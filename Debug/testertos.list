
testertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac64  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800ae04  0800ae04  0001ae04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af28  0800af28  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800af28  0800af28  0001af28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af30  0800af30  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af30  0800af30  0001af30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af34  0800af34  0001af34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800af38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000aa80  20000164  0800b09c  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000abe4  0800b09c  0002abe4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aeec  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004365  00000000  00000000  0003b080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0003f3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  00040830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006239  00000000  00000000  00041ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b7e  00000000  00000000  00047cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092699  00000000  00000000  0005f877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1f10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005624  00000000  00000000  000f1f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800adec 	.word	0x0800adec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	0800adec 	.word	0x0800adec

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <task_led>:
	int timeout;
}led_t;

led_t green_led;

void task_led(void *param){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *)param;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(led->port,led->pin);
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	889b      	ldrh	r3, [r3, #4]
 80004f8:	4619      	mov	r1, r3
 80004fa:	4610      	mov	r0, r2
 80004fc:	f000 fd07 	bl	8000f0e <HAL_GPIO_TogglePin>
		vTaskDelay(led->timeout);
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	4618      	mov	r0, r3
 8000506:	f007 fda7 	bl	8008058 <vTaskDelay>
		HAL_GPIO_TogglePin(led->port,led->pin);
 800050a:	e7f1      	b.n	80004f0 <task_led+0xc>

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 f9b7 	bl	8000884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f833 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f89d 	bl	8000658 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800051e:	f006 f807 	bl	8006530 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000522:	4a10      	ldr	r2, [pc, #64]	; (8000564 <main+0x58>)
 8000524:	2100      	movs	r1, #0
 8000526:	4810      	ldr	r0, [pc, #64]	; (8000568 <main+0x5c>)
 8000528:	f006 f84c 	bl	80065c4 <osThreadNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a0f      	ldr	r2, [pc, #60]	; (800056c <main+0x60>)
 8000530:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  green_led.timeout = 500;
 8000532:	4b0f      	ldr	r3, [pc, #60]	; (8000570 <main+0x64>)
 8000534:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000538:	609a      	str	r2, [r3, #8]
  green_led.port = LED_GPIO_Port;
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <main+0x64>)
 800053c:	4a0d      	ldr	r2, [pc, #52]	; (8000574 <main+0x68>)
 800053e:	601a      	str	r2, [r3, #0]
  green_led.pin = LED_Pin;
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <main+0x64>)
 8000542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000546:	809a      	strh	r2, [r3, #4]
  xTaskCreate(task_led,"Tarefa Led",256, &green_led, 1, NULL);
 8000548:	2300      	movs	r3, #0
 800054a:	9301      	str	r3, [sp, #4]
 800054c:	2301      	movs	r3, #1
 800054e:	9300      	str	r3, [sp, #0]
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <main+0x64>)
 8000552:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000556:	4908      	ldr	r1, [pc, #32]	; (8000578 <main+0x6c>)
 8000558:	4808      	ldr	r0, [pc, #32]	; (800057c <main+0x70>)
 800055a:	f007 fc22 	bl	8007da2 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800055e:	f006 f80b 	bl	8006578 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000562:	e7fe      	b.n	8000562 <main+0x56>
 8000564:	0800ae94 	.word	0x0800ae94
 8000568:	080006fd 	.word	0x080006fd
 800056c:	20000180 	.word	0x20000180
 8000570:	20000184 	.word	0x20000184
 8000574:	40020800 	.word	0x40020800
 8000578:	0800ae24 	.word	0x0800ae24
 800057c:	080004e5 	.word	0x080004e5

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f00a fb62 	bl	800ac58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b29      	ldr	r3, [pc, #164]	; (8000650 <SystemClock_Config+0xd0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a28      	ldr	r2, [pc, #160]	; (8000650 <SystemClock_Config+0xd0>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <SystemClock_Config+0xd0>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b23      	ldr	r3, [pc, #140]	; (8000654 <SystemClock_Config+0xd4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005cc:	4a21      	ldr	r2, [pc, #132]	; (8000654 <SystemClock_Config+0xd4>)
 80005ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <SystemClock_Config+0xd4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005f4:	2319      	movs	r3, #25
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005fe:	2304      	movs	r3, #4
 8000600:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000602:	2307      	movs	r3, #7
 8000604:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	4618      	mov	r0, r3
 800060c:	f001 ff16 	bl	800243c <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000616:	f000 f899 	bl	800074c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061e:	2302      	movs	r3, #2
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2102      	movs	r1, #2
 8000636:	4618      	mov	r0, r3
 8000638:	f002 f978 	bl	800292c <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000642:	f000 f883 	bl	800074c <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2200      	movs	r2, #0
 8000664:	601a      	str	r2, [r3, #0]
 8000666:	605a      	str	r2, [r3, #4]
 8000668:	609a      	str	r2, [r3, #8]
 800066a:	60da      	str	r2, [r3, #12]
 800066c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <MX_GPIO_Init+0x9c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a1f      	ldr	r2, [pc, #124]	; (80006f4 <MX_GPIO_Init+0x9c>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_GPIO_Init+0x9c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_GPIO_Init+0x9c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <MX_GPIO_Init+0x9c>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_GPIO_Init+0x9c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_GPIO_Init+0x9c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <MX_GPIO_Init+0x9c>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_GPIO_Init+0x9c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c8:	480b      	ldr	r0, [pc, #44]	; (80006f8 <MX_GPIO_Init+0xa0>)
 80006ca:	f000 fc07 	bl	8000edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2300      	movs	r3, #0
 80006de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	4619      	mov	r1, r3
 80006e6:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_GPIO_Init+0xa0>)
 80006e8:	f000 fa74 	bl	8000bd4 <HAL_GPIO_Init>

}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020800 	.word	0x40020800

080006fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	; 0x30
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000704:	f009 fcd2 	bl	800a0ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 8000708:	f009 fd00 	bl	800a10c <init_usb_rtos_obj>
  uint8_t cRxedChar, buffer[32], cInputIndex = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  /*char data;
	  CDC_Receiveq_MS(&data,portMAX_DELAY);
	  (void) CDC_Transmit_FS((uint8_t *) "\n\r",2);
	  (void) CDC_Transmit_FS((uint8_t *) &data,1);*/

		(void)read_usb_cdc((char *)buffer, 32, portMAX_DELAY);
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800071a:	2120      	movs	r1, #32
 800071c:	4618      	mov	r0, r3
 800071e:	f009 fd13 	bl	800a148 <read_usb_cdc>
		cRxedChar = buffer[0];
 8000722:	7b3b      	ldrb	r3, [r7, #12]
 8000724:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if( cRxedChar == '\r' ){
 8000728:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800072c:	2b0d      	cmp	r3, #13
 800072e:	d104      	bne.n	800073a <StartDefaultTask+0x3e>
			CDC_Transmit_FS((uint8_t *)"\n\r", 2);
 8000730:	2102      	movs	r1, #2
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <StartDefaultTask+0x4c>)
 8000734:	f009 fde4 	bl	800a300 <CDC_Transmit_FS>
 8000738:	e7eb      	b.n	8000712 <StartDefaultTask+0x16>
		} else {
			CDC_Transmit_FS(&cRxedChar, 1);
 800073a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800073e:	2101      	movs	r1, #1
 8000740:	4618      	mov	r0, r3
 8000742:	f009 fddd 	bl	800a300 <CDC_Transmit_FS>
		(void)read_usb_cdc((char *)buffer, 32, portMAX_DELAY);
 8000746:	e7e4      	b.n	8000712 <StartDefaultTask+0x16>
 8000748:	0800ae30 	.word	0x0800ae30

0800074c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000750:	b672      	cpsid	i
}
 8000752:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000754:	e7fe      	b.n	8000754 <Error_Handler+0x8>
	...

08000758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	4b12      	ldr	r3, [pc, #72]	; (80007ac <HAL_MspInit+0x54>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000766:	4a11      	ldr	r2, [pc, #68]	; (80007ac <HAL_MspInit+0x54>)
 8000768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800076c:	6453      	str	r3, [r2, #68]	; 0x44
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_MspInit+0x54>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <HAL_MspInit+0x54>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <HAL_MspInit+0x54>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_MspInit+0x54>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	210f      	movs	r1, #15
 800079a:	f06f 0001 	mvn.w	r0, #1
 800079e:	f000 f9e2 	bl	8000b66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <NMI_Handler+0x4>

080007b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <HardFault_Handler+0x4>

080007bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <MemManage_Handler+0x4>

080007c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c6:	e7fe      	b.n	80007c6 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007cc:	e7fe      	b.n	80007cc <UsageFault_Handler+0x4>

080007ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e0:	f000 f8a2 	bl	8000928 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007e4:	f008 f8d8 	bl	8008998 <xTaskGetSchedulerState>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d001      	beq.n	80007f2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007ee:	f009 f9e3 	bl	8009bb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007fc:	4802      	ldr	r0, [pc, #8]	; (8000808 <OTG_FS_IRQHandler+0x10>)
 80007fe:	f000 fcf0 	bl	80011e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000a4b0 	.word	0x2000a4b0

0800080c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <SystemInit+0x20>)
 8000812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000816:	4a05      	ldr	r2, [pc, #20]	; (800082c <SystemInit+0x20>)
 8000818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800081c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000868 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000836:	490e      	ldr	r1, [pc, #56]	; (8000870 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000838:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800083c:	e002      	b.n	8000844 <LoopCopyDataInit>

0800083e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000842:	3304      	adds	r3, #4

08000844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000848:	d3f9      	bcc.n	800083e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084a:	4a0b      	ldr	r2, [pc, #44]	; (8000878 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800084c:	4c0b      	ldr	r4, [pc, #44]	; (800087c <LoopFillZerobss+0x26>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000850:	e001      	b.n	8000856 <LoopFillZerobss>

08000852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000854:	3204      	adds	r2, #4

08000856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000858:	d3fb      	bcc.n	8000852 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800085a:	f7ff ffd7 	bl	800080c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800085e:	f00a f9c7 	bl	800abf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000862:	f7ff fe53 	bl	800050c <main>
  bx  lr    
 8000866:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000868:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800086c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000870:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000874:	0800af38 	.word	0x0800af38
  ldr r2, =_sbss
 8000878:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 800087c:	2000abe4 	.word	0x2000abe4

08000880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000880:	e7fe      	b.n	8000880 <ADC_IRQHandler>
	...

08000884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000888:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <HAL_Init+0x40>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0d      	ldr	r2, [pc, #52]	; (80008c4 <HAL_Init+0x40>)
 800088e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000894:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <HAL_Init+0x40>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <HAL_Init+0x40>)
 800089a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800089e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_Init+0x40>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_Init+0x40>)
 80008a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ac:	2003      	movs	r0, #3
 80008ae:	f000 f94f 	bl	8000b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b2:	200f      	movs	r0, #15
 80008b4:	f000 f808 	bl	80008c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b8:	f7ff ff4e 	bl	8000758 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023c00 	.word	0x40023c00

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_InitTick+0x54>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x58>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f967 	bl	8000bba <HAL_SYSTICK_Config>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00e      	b.n	8000914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b0f      	cmp	r3, #15
 80008fa:	d80a      	bhi.n	8000912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fc:	2200      	movs	r2, #0
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000904:	f000 f92f 	bl	8000b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <HAL_InitTick+0x5c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	e000      	b.n	8000914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000000 	.word	0x20000000
 8000920:	20000008 	.word	0x20000008
 8000924:	20000004 	.word	0x20000004

08000928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_IncTick+0x20>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_IncTick+0x24>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4413      	add	r3, r2
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <HAL_IncTick+0x24>)
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000008 	.word	0x20000008
 800094c:	20000190 	.word	0x20000190

08000950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <HAL_GetTick+0x14>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000190 	.word	0x20000190

08000968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000970:	f7ff ffee 	bl	8000950 <HAL_GetTick>
 8000974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000980:	d005      	beq.n	800098e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <HAL_Delay+0x44>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800098e:	bf00      	nop
 8000990:	f7ff ffde 	bl	8000950 <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	429a      	cmp	r2, r3
 800099e:	d8f7      	bhi.n	8000990 <HAL_Delay+0x28>
  {
  }
}
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4907      	ldr	r1, [pc, #28]	; (8000a4c <__NVIC_EnableIRQ+0x38>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
         );
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b1c:	d301      	bcc.n	8000b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e00f      	b.n	8000b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b22:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <SysTick_Config+0x40>)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b2a:	210f      	movs	r1, #15
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b30:	f7ff ff8e 	bl	8000a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <SysTick_Config+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <SysTick_Config+0x40>)
 8000b3c:	2207      	movs	r2, #7
 8000b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	e000e010 	.word	0xe000e010

08000b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f7ff ff29 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b086      	sub	sp, #24
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	60b9      	str	r1, [r7, #8]
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b78:	f7ff ff3e 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	68b9      	ldr	r1, [r7, #8]
 8000b82:	6978      	ldr	r0, [r7, #20]
 8000b84:	f7ff ff8e 	bl	8000aa4 <NVIC_EncodePriority>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8e:	4611      	mov	r1, r2
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff5d 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b96:	bf00      	nop
 8000b98:	3718      	adds	r7, #24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff31 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffa2 	bl	8000b0c <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	e159      	b.n	8000ea4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	f040 8148 	bne.w	8000e9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d005      	beq.n	8000c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d130      	bne.n	8000c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2203      	movs	r2, #3
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	091b      	lsrs	r3, r3, #4
 8000c72:	f003 0201 	and.w	r2, r3, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d017      	beq.n	8000cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d123      	bne.n	8000d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	08da      	lsrs	r2, r3, #3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3208      	adds	r2, #8
 8000cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	08da      	lsrs	r2, r3, #3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3208      	adds	r2, #8
 8000d12:	69b9      	ldr	r1, [r7, #24]
 8000d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0203 	and.w	r2, r3, #3
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80a2 	beq.w	8000e9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b57      	ldr	r3, [pc, #348]	; (8000ebc <HAL_GPIO_Init+0x2e8>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a56      	ldr	r2, [pc, #344]	; (8000ebc <HAL_GPIO_Init+0x2e8>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b54      	ldr	r3, [pc, #336]	; (8000ebc <HAL_GPIO_Init+0x2e8>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d76:	4a52      	ldr	r2, [pc, #328]	; (8000ec0 <HAL_GPIO_Init+0x2ec>)
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a49      	ldr	r2, [pc, #292]	; (8000ec4 <HAL_GPIO_Init+0x2f0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d019      	beq.n	8000dd6 <HAL_GPIO_Init+0x202>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a48      	ldr	r2, [pc, #288]	; (8000ec8 <HAL_GPIO_Init+0x2f4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x1fe>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a47      	ldr	r2, [pc, #284]	; (8000ecc <HAL_GPIO_Init+0x2f8>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x1fa>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a46      	ldr	r2, [pc, #280]	; (8000ed0 <HAL_GPIO_Init+0x2fc>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x1f6>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a45      	ldr	r2, [pc, #276]	; (8000ed4 <HAL_GPIO_Init+0x300>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x1f2>
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	e008      	b.n	8000dd8 <HAL_GPIO_Init+0x204>
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x204>
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e004      	b.n	8000dd8 <HAL_GPIO_Init+0x204>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x204>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x204>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	f002 0203 	and.w	r2, r2, #3
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	4093      	lsls	r3, r2
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de8:	4935      	ldr	r1, [pc, #212]	; (8000ec0 <HAL_GPIO_Init+0x2ec>)
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df6:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e1a:	4a2f      	ldr	r2, [pc, #188]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e20:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e44:	4a24      	ldr	r2, [pc, #144]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e4a:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e6e:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e98:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	2b0f      	cmp	r3, #15
 8000ea8:	f67f aea2 	bls.w	8000bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40013c00 	.word	0x40013c00

08000edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000eec:	787b      	ldrb	r3, [r7, #1]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ef2:	887a      	ldrh	r2, [r7, #2]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ef8:	e003      	b.n	8000f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000efa:	887b      	ldrh	r3, [r7, #2]
 8000efc:	041a      	lsls	r2, r3, #16
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	619a      	str	r2, [r3, #24]
}
 8000f02:	bf00      	nop
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b085      	sub	sp, #20
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	460b      	mov	r3, r1
 8000f18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f20:	887a      	ldrh	r2, [r7, #2]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	4013      	ands	r3, r2
 8000f26:	041a      	lsls	r2, r3, #16
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	43d9      	mvns	r1, r3
 8000f2c:	887b      	ldrh	r3, [r7, #2]
 8000f2e:	400b      	ands	r3, r1
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	619a      	str	r2, [r3, #24]
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f42:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f44:	b08f      	sub	sp, #60	; 0x3c
 8000f46:	af0a      	add	r7, sp, #40	; 0x28
 8000f48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e10f      	b.n	8001174 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d106      	bne.n	8000f74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f009 fb2a 	bl	800a5c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2203      	movs	r2, #3
 8000f78:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f001 ff97 	bl	8002ec6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	603b      	str	r3, [r7, #0]
 8000f9e:	687e      	ldr	r6, [r7, #4]
 8000fa0:	466d      	mov	r5, sp
 8000fa2:	f106 0410 	add.w	r4, r6, #16
 8000fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fb6:	1d33      	adds	r3, r6, #4
 8000fb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fba:	6838      	ldr	r0, [r7, #0]
 8000fbc:	f001 fe6e 	bl	8002c9c <USB_CoreInit>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d005      	beq.n	8000fd2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2202      	movs	r2, #2
 8000fca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e0d0      	b.n	8001174 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 ff85 	bl	8002ee8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	73fb      	strb	r3, [r7, #15]
 8000fe2:	e04a      	b.n	800107a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4413      	add	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	333d      	adds	r3, #61	; 0x3d
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	6879      	ldr	r1, [r7, #4]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	333c      	adds	r3, #60	; 0x3c
 8001008:	7bfa      	ldrb	r2, [r7, #15]
 800100a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	b298      	uxth	r0, r3
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	4413      	add	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	3344      	adds	r3, #68	; 0x44
 8001020:	4602      	mov	r2, r0
 8001022:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4413      	add	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	3340      	adds	r3, #64	; 0x40
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001038:	7bfa      	ldrb	r2, [r7, #15]
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	4613      	mov	r3, r2
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	3348      	adds	r3, #72	; 0x48
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	334c      	adds	r3, #76	; 0x4c
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001060:	7bfa      	ldrb	r2, [r7, #15]
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	4613      	mov	r3, r2
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4413      	add	r3, r2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	440b      	add	r3, r1
 800106e:	3354      	adds	r3, #84	; 0x54
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	3301      	adds	r3, #1
 8001078:	73fb      	strb	r3, [r7, #15]
 800107a:	7bfa      	ldrb	r2, [r7, #15]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	429a      	cmp	r2, r3
 8001082:	d3af      	bcc.n	8000fe4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001084:	2300      	movs	r3, #0
 8001086:	73fb      	strb	r3, [r7, #15]
 8001088:	e044      	b.n	8001114 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4413      	add	r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010a0:	7bfa      	ldrb	r2, [r7, #15]
 80010a2:	6879      	ldr	r1, [r7, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	440b      	add	r3, r1
 80010ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	4413      	add	r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	440b      	add	r3, r1
 80010c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	4613      	mov	r3, r2
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	440b      	add	r3, r1
 80010da:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	4413      	add	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	4613      	mov	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	4413      	add	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	440b      	add	r3, r1
 8001106:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800110e:	7bfb      	ldrb	r3, [r7, #15]
 8001110:	3301      	adds	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	429a      	cmp	r2, r3
 800111c:	d3b5      	bcc.n	800108a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	603b      	str	r3, [r7, #0]
 8001124:	687e      	ldr	r6, [r7, #4]
 8001126:	466d      	mov	r5, sp
 8001128:	f106 0410 	add.w	r4, r6, #16
 800112c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800112e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001138:	e885 0003 	stmia.w	r5, {r0, r1}
 800113c:	1d33      	adds	r3, r6, #4
 800113e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001140:	6838      	ldr	r0, [r7, #0]
 8001142:	f001 ff1d 	bl	8002f80 <USB_DevInit>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d005      	beq.n	8001158 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2202      	movs	r2, #2
 8001150:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e00d      	b.n	8001174 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f003 f86c 	bl	800424a <USB_DevDisconnect>

  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800117c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001190:	2b01      	cmp	r3, #1
 8001192:	d101      	bne.n	8001198 <HAL_PCD_Start+0x1c>
 8001194:	2302      	movs	r3, #2
 8001196:	e020      	b.n	80011da <HAL_PCD_Start+0x5e>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d109      	bne.n	80011bc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d005      	beq.n	80011bc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 fe6f 	bl	8002ea4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4618      	mov	r0, r3
 80011cc:	f003 f81c 	bl	8004208 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011e2:	b590      	push	{r4, r7, lr}
 80011e4:	b08d      	sub	sp, #52	; 0x34
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f003 f8da 	bl	80043b2 <USB_GetMode>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	f040 848a 	bne.w	8001b1a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f003 f83e 	bl	800428c <USB_ReadInterrupts>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8480 	beq.w	8001b18 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f003 f82b 	bl	800428c <USB_ReadInterrupts>
 8001236:	4603      	mov	r3, r0
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b02      	cmp	r3, #2
 800123e:	d107      	bne.n	8001250 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f002 0202 	and.w	r2, r2, #2
 800124e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f003 f819 	bl	800428c <USB_ReadInterrupts>
 800125a:	4603      	mov	r3, r0
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	2b10      	cmp	r3, #16
 8001262:	d161      	bne.n	8001328 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	699a      	ldr	r2, [r3, #24]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f022 0210 	bic.w	r2, r2, #16
 8001272:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001274:	6a3b      	ldr	r3, [r7, #32]
 8001276:	6a1b      	ldr	r3, [r3, #32]
 8001278:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	f003 020f 	and.w	r2, r3, #15
 8001280:	4613      	mov	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4413      	add	r3, r2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	3304      	adds	r3, #4
 8001292:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	0c5b      	lsrs	r3, r3, #17
 8001298:	f003 030f 	and.w	r3, r3, #15
 800129c:	2b02      	cmp	r3, #2
 800129e:	d124      	bne.n	80012ea <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012a6:	4013      	ands	r3, r2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d035      	beq.n	8001318 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	6a38      	ldr	r0, [r7, #32]
 80012c0:	f002 fe50 	bl	8003f64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	691a      	ldr	r2, [r3, #16]
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	091b      	lsrs	r3, r3, #4
 80012cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012d0:	441a      	add	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	6a1a      	ldr	r2, [r3, #32]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e2:	441a      	add	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	621a      	str	r2, [r3, #32]
 80012e8:	e016      	b.n	8001318 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	0c5b      	lsrs	r3, r3, #17
 80012ee:	f003 030f 	and.w	r3, r3, #15
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d110      	bne.n	8001318 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80012fc:	2208      	movs	r2, #8
 80012fe:	4619      	mov	r1, r3
 8001300:	6a38      	ldr	r0, [r7, #32]
 8001302:	f002 fe2f 	bl	8003f64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	6a1a      	ldr	r2, [r3, #32]
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	091b      	lsrs	r3, r3, #4
 800130e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001312:	441a      	add	r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	699a      	ldr	r2, [r3, #24]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0210 	orr.w	r2, r2, #16
 8001326:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f002 ffad 	bl	800428c <USB_ReadInterrupts>
 8001332:	4603      	mov	r3, r0
 8001334:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001338:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800133c:	f040 80a7 	bne.w	800148e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001340:	2300      	movs	r3, #0
 8001342:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f002 ffb2 	bl	80042b2 <USB_ReadDevAllOutEpInterrupt>
 800134e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001350:	e099      	b.n	8001486 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	f003 0301 	and.w	r3, r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	f000 808e 	beq.w	800147a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f002 ffd6 	bl	800431a <USB_ReadDevOutEPInterrupt>
 800136e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00c      	beq.n	8001394 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	015a      	lsls	r2, r3, #5
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	4413      	add	r3, r2
 8001382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001386:	461a      	mov	r2, r3
 8001388:	2301      	movs	r3, #1
 800138a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800138c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fec2 	bl	8002118 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00c      	beq.n	80013b8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	015a      	lsls	r2, r3, #5
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	4413      	add	r3, r2
 80013a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013aa:	461a      	mov	r2, r3
 80013ac:	2308      	movs	r3, #8
 80013ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 ff98 	bl	80022e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d008      	beq.n	80013d4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	015a      	lsls	r2, r3, #5
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4413      	add	r3, r2
 80013ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ce:	461a      	mov	r2, r3
 80013d0:	2310      	movs	r3, #16
 80013d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d030      	beq.n	8001440 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e6:	2b80      	cmp	r3, #128	; 0x80
 80013e8:	d109      	bne.n	80013fe <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013fc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001400:	4613      	mov	r3, r2
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4413      	add	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	4413      	add	r3, r2
 8001410:	3304      	adds	r3, #4
 8001412:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	78db      	ldrb	r3, [r3, #3]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d108      	bne.n	800142e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2200      	movs	r2, #0
 8001420:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	b2db      	uxtb	r3, r3
 8001426:	4619      	mov	r1, r3
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f009 f9d3 	bl	800a7d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	015a      	lsls	r2, r3, #5
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	4413      	add	r3, r2
 8001436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800143a:	461a      	mov	r2, r3
 800143c:	2302      	movs	r3, #2
 800143e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	f003 0320 	and.w	r3, r3, #32
 8001446:	2b00      	cmp	r3, #0
 8001448:	d008      	beq.n	800145c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	015a      	lsls	r2, r3, #5
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	4413      	add	r3, r2
 8001452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001456:	461a      	mov	r2, r3
 8001458:	2320      	movs	r3, #32
 800145a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d009      	beq.n	800147a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	015a      	lsls	r2, r3, #5
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	4413      	add	r3, r2
 800146e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001472:	461a      	mov	r2, r3
 8001474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001478:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800147a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147c:	3301      	adds	r3, #1
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001488:	2b00      	cmp	r3, #0
 800148a:	f47f af62 	bne.w	8001352 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f002 fefa 	bl	800428c <USB_ReadInterrupts>
 8001498:	4603      	mov	r3, r0
 800149a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800149e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014a2:	f040 80db 	bne.w	800165c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 ff1b 	bl	80042e6 <USB_ReadDevAllInEpInterrupt>
 80014b0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014b6:	e0cd      	b.n	8001654 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 80c2 	beq.w	8001648 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 ff41 	bl	8004356 <USB_ReadDevInEPInterrupt>
 80014d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d057      	beq.n	8001590 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	2201      	movs	r2, #1
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	43db      	mvns	r3, r3
 80014fa:	69f9      	ldr	r1, [r7, #28]
 80014fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001500:	4013      	ands	r3, r2
 8001502:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	015a      	lsls	r2, r3, #5
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	4413      	add	r3, r2
 800150c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001510:	461a      	mov	r2, r3
 8001512:	2301      	movs	r3, #1
 8001514:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d132      	bne.n	8001584 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800151e:	6879      	ldr	r1, [r7, #4]
 8001520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	334c      	adds	r3, #76	; 0x4c
 800152e:	6819      	ldr	r1, [r3, #0]
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001534:	4613      	mov	r3, r2
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4403      	add	r3, r0
 800153e:	3348      	adds	r3, #72	; 0x48
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4419      	add	r1, r3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4403      	add	r3, r0
 8001552:	334c      	adds	r3, #76	; 0x4c
 8001554:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001558:	2b00      	cmp	r3, #0
 800155a:	d113      	bne.n	8001584 <HAL_PCD_IRQHandler+0x3a2>
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001560:	4613      	mov	r3, r2
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3354      	adds	r3, #84	; 0x54
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d108      	bne.n	8001584 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800157c:	461a      	mov	r2, r3
 800157e:	2101      	movs	r1, #1
 8001580:	f002 ff48 	bl	8004414 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	b2db      	uxtb	r3, r3
 8001588:	4619      	mov	r1, r3
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	f009 f89d 	bl	800a6ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	015a      	lsls	r2, r3, #5
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	4413      	add	r3, r2
 80015a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015a6:	461a      	mov	r2, r3
 80015a8:	2308      	movs	r3, #8
 80015aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d008      	beq.n	80015c8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b8:	015a      	lsls	r2, r3, #5
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	4413      	add	r3, r2
 80015be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c2:	461a      	mov	r2, r3
 80015c4:	2310      	movs	r3, #16
 80015c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d008      	beq.n	80015e4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	015a      	lsls	r2, r3, #5
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	4413      	add	r3, r2
 80015da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015de:	461a      	mov	r2, r3
 80015e0:	2340      	movs	r3, #64	; 0x40
 80015e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d023      	beq.n	8001636 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015f0:	6a38      	ldr	r0, [r7, #32]
 80015f2:	f001 fe29 	bl	8003248 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	3338      	adds	r3, #56	; 0x38
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	3304      	adds	r3, #4
 8001608:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	78db      	ldrb	r3, [r3, #3]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d108      	bne.n	8001624 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2200      	movs	r2, #0
 8001616:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	b2db      	uxtb	r3, r3
 800161c:	4619      	mov	r1, r3
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f009 f8ea 	bl	800a7f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	015a      	lsls	r2, r3, #5
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	4413      	add	r3, r2
 800162c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001630:	461a      	mov	r2, r3
 8001632:	2302      	movs	r3, #2
 8001634:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001640:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 fcdb 	bl	8001ffe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	3301      	adds	r3, #1
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001650:	085b      	lsrs	r3, r3, #1
 8001652:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001656:	2b00      	cmp	r3, #0
 8001658:	f47f af2e 	bne.w	80014b8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f002 fe13 	bl	800428c <USB_ReadInterrupts>
 8001666:	4603      	mov	r3, r0
 8001668:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800166c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001670:	d122      	bne.n	80016b8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800168c:	2b01      	cmp	r3, #1
 800168e:	d108      	bne.n	80016a2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001698:	2100      	movs	r1, #0
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 fec2 	bl	8002424 <HAL_PCDEx_LPM_Callback>
 80016a0:	e002      	b.n	80016a8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f009 f888 	bl	800a7b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f002 fde5 	bl	800428c <USB_ReadInterrupts>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016cc:	d112      	bne.n	80016f4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d102      	bne.n	80016e4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f009 f844 	bl	800a76c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016f2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 fdc7 	bl	800428c <USB_ReadInterrupts>
 80016fe:	4603      	mov	r3, r0
 8001700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001708:	f040 80b7 	bne.w	800187a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800171a:	f023 0301 	bic.w	r3, r3, #1
 800171e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2110      	movs	r1, #16
 8001726:	4618      	mov	r0, r3
 8001728:	f001 fd8e 	bl	8003248 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001730:	e046      	b.n	80017c0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001734:	015a      	lsls	r2, r3, #5
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	4413      	add	r3, r2
 800173a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800173e:	461a      	mov	r2, r3
 8001740:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001744:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001748:	015a      	lsls	r2, r3, #5
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	4413      	add	r3, r2
 800174e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001756:	0151      	lsls	r1, r2, #5
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	440a      	add	r2, r1
 800175c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001760:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001764:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001768:	015a      	lsls	r2, r3, #5
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	4413      	add	r3, r2
 800176e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001772:	461a      	mov	r2, r3
 8001774:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001778:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800177a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177c:	015a      	lsls	r2, r3, #5
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	4413      	add	r3, r2
 8001782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800178a:	0151      	lsls	r1, r2, #5
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	440a      	add	r2, r1
 8001790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001794:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001798:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179c:	015a      	lsls	r2, r3, #5
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017aa:	0151      	lsls	r1, r2, #5
 80017ac:	69fa      	ldr	r2, [r7, #28]
 80017ae:	440a      	add	r2, r1
 80017b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017bc:	3301      	adds	r3, #1
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d3b3      	bcc.n	8001732 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d016      	beq.n	8001814 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017f0:	69fa      	ldr	r2, [r7, #28]
 80017f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f6:	f043 030b 	orr.w	r3, r3, #11
 80017fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800180c:	f043 030b 	orr.w	r3, r3, #11
 8001810:	6453      	str	r3, [r2, #68]	; 0x44
 8001812:	e015      	b.n	8001840 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001822:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001826:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800182a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001832:	691b      	ldr	r3, [r3, #16]
 8001834:	69fa      	ldr	r2, [r7, #28]
 8001836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800183a:	f043 030b 	orr.w	r3, r3, #11
 800183e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800184e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001852:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6818      	ldr	r0, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001864:	461a      	mov	r2, r3
 8001866:	f002 fdd5 	bl	8004414 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001878:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f002 fd04 	bl	800428c <USB_ReadInterrupts>
 8001884:	4603      	mov	r3, r0
 8001886:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800188a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800188e:	d124      	bne.n	80018da <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f002 fd9a 	bl	80043ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f001 fd4f 	bl	8003342 <USB_GetDevSpeed>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681c      	ldr	r4, [r3, #0]
 80018b0:	f001 f9e8 	bl	8002c84 <HAL_RCC_GetHCLKFreq>
 80018b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	461a      	mov	r2, r3
 80018be:	4620      	mov	r0, r4
 80018c0:	f001 fa4e 	bl	8002d60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f008 ff28 	bl	800a71a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695a      	ldr	r2, [r3, #20]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 fcd4 	bl	800428c <USB_ReadInterrupts>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b08      	cmp	r3, #8
 80018ec:	d10a      	bne.n	8001904 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f008 ff05 	bl	800a6fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f002 0208 	and.w	r2, r2, #8
 8001902:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f002 fcbf 	bl	800428c <USB_ReadInterrupts>
 800190e:	4603      	mov	r3, r0
 8001910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001914:	2b80      	cmp	r3, #128	; 0x80
 8001916:	d122      	bne.n	800195e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001924:	2301      	movs	r3, #1
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
 8001928:	e014      	b.n	8001954 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800192e:	4613      	mov	r3, r2
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4413      	add	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d105      	bne.n	800194e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	b2db      	uxtb	r3, r3
 8001946:	4619      	mov	r1, r3
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 fb27 	bl	8001f9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	3301      	adds	r3, #1
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195a:	429a      	cmp	r2, r3
 800195c:	d3e5      	bcc.n	800192a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fc92 	bl	800428c <USB_ReadInterrupts>
 8001968:	4603      	mov	r3, r0
 800196a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001972:	d13b      	bne.n	80019ec <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001974:	2301      	movs	r3, #1
 8001976:	627b      	str	r3, [r7, #36]	; 0x24
 8001978:	e02b      	b.n	80019d2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	015a      	lsls	r2, r3, #5
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	4413      	add	r3, r2
 8001982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800198e:	4613      	mov	r3, r2
 8001990:	00db      	lsls	r3, r3, #3
 8001992:	4413      	add	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	3340      	adds	r3, #64	; 0x40
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d115      	bne.n	80019cc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80019a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	da12      	bge.n	80019cc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019aa:	4613      	mov	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	333f      	adds	r3, #63	; 0x3f
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	4619      	mov	r1, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fae8 	bl	8001f9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ce:	3301      	adds	r3, #1
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d8:	429a      	cmp	r2, r3
 80019da:	d3ce      	bcc.n	800197a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 fc4b 	bl	800428c <USB_ReadInterrupts>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001a00:	d155      	bne.n	8001aae <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a02:	2301      	movs	r3, #1
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
 8001a06:	e045      	b.n	8001a94 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	015a      	lsls	r2, r3, #5
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	4413      	add	r3, r2
 8001a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a18:	6879      	ldr	r1, [r7, #4]
 8001a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4413      	add	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	440b      	add	r3, r1
 8001a26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d12e      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	da2b      	bge.n	8001a8e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001a42:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d121      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a60:	6a3b      	ldr	r3, [r7, #32]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a68:	6a3b      	ldr	r3, [r7, #32]
 8001a6a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10a      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a8a:	6053      	str	r3, [r2, #4]
            break;
 8001a8c:	e007      	b.n	8001a9e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	3301      	adds	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d3b4      	bcc.n	8001a08 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	695a      	ldr	r2, [r3, #20]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001aac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f002 fbea 	bl	800428c <USB_ReadInterrupts>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac2:	d10a      	bne.n	8001ada <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f008 fea9 	bl	800a81c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f002 fbd4 	bl	800428c <USB_ReadInterrupts>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d115      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f008 fe99 	bl	800a838 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6859      	ldr	r1, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	e000      	b.n	8001b1a <HAL_PCD_IRQHandler+0x938>
      return;
 8001b18:	bf00      	nop
    }
  }
}
 8001b1a:	3734      	adds	r7, #52	; 0x34
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd90      	pop	{r4, r7, pc}

08001b20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d101      	bne.n	8001b3a <HAL_PCD_SetAddress+0x1a>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e013      	b.n	8001b62 <HAL_PCD_SetAddress+0x42>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	78fa      	ldrb	r2, [r7, #3]
 8001b46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	78fa      	ldrb	r2, [r7, #3]
 8001b50:	4611      	mov	r1, r2
 8001b52:	4618      	mov	r0, r3
 8001b54:	f002 fb32 	bl	80041bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b084      	sub	sp, #16
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	4608      	mov	r0, r1
 8001b74:	4611      	mov	r1, r2
 8001b76:	461a      	mov	r2, r3
 8001b78:	4603      	mov	r3, r0
 8001b7a:	70fb      	strb	r3, [r7, #3]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	803b      	strh	r3, [r7, #0]
 8001b80:	4613      	mov	r3, r2
 8001b82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	da0f      	bge.n	8001bb0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b90:	78fb      	ldrb	r3, [r7, #3]
 8001b92:	f003 020f 	and.w	r2, r3, #15
 8001b96:	4613      	mov	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	3338      	adds	r3, #56	; 0x38
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3304      	adds	r3, #4
 8001ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	705a      	strb	r2, [r3, #1]
 8001bae:	e00f      	b.n	8001bd0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	f003 020f 	and.w	r2, r3, #15
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	4413      	add	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bd0:	78fb      	ldrb	r3, [r7, #3]
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	b2da      	uxtb	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bdc:	883a      	ldrh	r2, [r7, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	78ba      	ldrb	r2, [r7, #2]
 8001be6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	785b      	ldrb	r3, [r3, #1]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d004      	beq.n	8001bfa <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bfa:	78bb      	ldrb	r3, [r7, #2]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d102      	bne.n	8001c06 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_PCD_EP_Open+0xaa>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e00e      	b.n	8001c32 <HAL_PCD_EP_Open+0xc8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68f9      	ldr	r1, [r7, #12]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f001 fbb2 	bl	800338c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c30:	7afb      	ldrb	r3, [r7, #11]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	460b      	mov	r3, r1
 8001c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	da0f      	bge.n	8001c6e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	f003 020f 	and.w	r2, r3, #15
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	3338      	adds	r3, #56	; 0x38
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	3304      	adds	r3, #4
 8001c64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	705a      	strb	r2, [r3, #1]
 8001c6c:	e00f      	b.n	8001c8e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	f003 020f 	and.w	r2, r3, #15
 8001c74:	4613      	mov	r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	3304      	adds	r3, #4
 8001c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	f003 030f 	and.w	r3, r3, #15
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_PCD_EP_Close+0x6e>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e00e      	b.n	8001cc6 <HAL_PCD_EP_Close+0x8c>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68f9      	ldr	r1, [r7, #12]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f001 fbf0 	bl	800349c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	607a      	str	r2, [r7, #4]
 8001cd8:	603b      	str	r3, [r7, #0]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cde:	7afb      	ldrb	r3, [r7, #11]
 8001ce0:	f003 020f 	and.w	r2, r3, #15
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2200      	movs	r2, #0
 8001d08:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d10:	7afb      	ldrb	r3, [r7, #11]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d102      	bne.n	8001d2a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d2a:	7afb      	ldrb	r3, [r7, #11]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d109      	bne.n	8001d48 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6818      	ldr	r0, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	6979      	ldr	r1, [r7, #20]
 8001d42:	f001 fecf 	bl	8003ae4 <USB_EP0StartXfer>
 8001d46:	e008      	b.n	8001d5a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6818      	ldr	r0, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	6979      	ldr	r1, [r7, #20]
 8001d56:	f001 fc7d 	bl	8003654 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f003 020f 	and.w	r2, r3, #15
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001d86:	681b      	ldr	r3, [r3, #0]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	460b      	mov	r3, r1
 8001da2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001da4:	7afb      	ldrb	r3, [r7, #11]
 8001da6:	f003 020f 	and.w	r2, r3, #15
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	3338      	adds	r3, #56	; 0x38
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	3304      	adds	r3, #4
 8001dba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd4:	7afb      	ldrb	r3, [r7, #11]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d102      	bne.n	8001dee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dee:	7afb      	ldrb	r3, [r7, #11]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	6979      	ldr	r1, [r7, #20]
 8001e06:	f001 fe6d 	bl	8003ae4 <USB_EP0StartXfer>
 8001e0a:	e008      	b.n	8001e1e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	6979      	ldr	r1, [r7, #20]
 8001e1a:	f001 fc1b 	bl	8003654 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d901      	bls.n	8001e46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e050      	b.n	8001ee8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	da0f      	bge.n	8001e6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	f003 020f 	and.w	r2, r3, #15
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	3338      	adds	r3, #56	; 0x38
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	3304      	adds	r3, #4
 8001e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	705a      	strb	r2, [r3, #1]
 8001e6c:	e00d      	b.n	8001e8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e6e:	78fa      	ldrb	r2, [r7, #3]
 8001e70:	4613      	mov	r3, r2
 8001e72:	00db      	lsls	r3, r3, #3
 8001e74:	4413      	add	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	3304      	adds	r3, #4
 8001e82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2200      	movs	r2, #0
 8001e88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_PCD_EP_SetStall+0x82>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e01e      	b.n	8001ee8 <HAL_PCD_EP_SetStall+0xc0>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68f9      	ldr	r1, [r7, #12]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f002 f8ab 	bl	8004014 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ebe:	78fb      	ldrb	r3, [r7, #3]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10a      	bne.n	8001ede <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	b2d9      	uxtb	r1, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f002 fa9b 	bl	8004414 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	f003 020f 	and.w	r2, r3, #15
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d901      	bls.n	8001f0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e042      	b.n	8001f94 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	da0f      	bge.n	8001f36 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	f003 020f 	and.w	r2, r3, #15
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	3338      	adds	r3, #56	; 0x38
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	705a      	strb	r2, [r3, #1]
 8001f34:	e00f      	b.n	8001f56 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f36:	78fb      	ldrb	r3, [r7, #3]
 8001f38:	f003 020f 	and.w	r2, r3, #15
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_PCD_EP_ClrStall+0x86>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e00e      	b.n	8001f94 <HAL_PCD_EP_ClrStall+0xa4>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68f9      	ldr	r1, [r7, #12]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 f8b3 	bl	80040f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3710      	adds	r7, #16
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	da0c      	bge.n	8001fca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 020f 	and.w	r2, r3, #15
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	3338      	adds	r3, #56	; 0x38
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	e00c      	b.n	8001fe4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 020f 	and.w	r2, r3, #15
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68f9      	ldr	r1, [r7, #12]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f001 fed2 	bl	8003d94 <USB_EPStopXfer>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ff4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b08a      	sub	sp, #40	; 0x28
 8002002:	af02      	add	r7, sp, #8
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	3338      	adds	r3, #56	; 0x38
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	3304      	adds	r3, #4
 8002024:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6a1a      	ldr	r2, [r3, #32]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	429a      	cmp	r2, r3
 8002030:	d901      	bls.n	8002036 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e06c      	b.n	8002110 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	699a      	ldr	r2, [r3, #24]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	429a      	cmp	r2, r3
 800204a:	d902      	bls.n	8002052 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3303      	adds	r3, #3
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800205a:	e02b      	b.n	80020b4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	699a      	ldr	r2, [r3, #24]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	429a      	cmp	r2, r3
 8002070:	d902      	bls.n	8002078 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	3303      	adds	r3, #3
 800207c:	089b      	lsrs	r3, r3, #2
 800207e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6919      	ldr	r1, [r3, #16]
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	b2da      	uxtb	r2, r3
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002090:	b2db      	uxtb	r3, r3
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	4603      	mov	r3, r0
 8002096:	6978      	ldr	r0, [r7, #20]
 8002098:	f001 ff26 	bl	8003ee8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	441a      	add	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	6a1a      	ldr	r2, [r3, #32]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	441a      	add	r2, r3
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	015a      	lsls	r2, r3, #5
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	4413      	add	r3, r2
 80020bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d809      	bhi.n	80020de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a1a      	ldr	r2, [r3, #32]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d203      	bcs.n	80020de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1be      	bne.n	800205c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	699a      	ldr	r2, [r3, #24]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d811      	bhi.n	800210e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	2201      	movs	r2, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	43db      	mvns	r3, r3
 8002104:	6939      	ldr	r1, [r7, #16]
 8002106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800210a:	4013      	ands	r3, r2
 800210c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	3720      	adds	r7, #32
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	333c      	adds	r3, #60	; 0x3c
 8002130:	3304      	adds	r3, #4
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	015a      	lsls	r2, r3, #5
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4413      	add	r3, r2
 800213e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d17b      	bne.n	8002246 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	f003 0308 	and.w	r3, r3, #8
 8002154:	2b00      	cmp	r3, #0
 8002156:	d015      	beq.n	8002184 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	4a61      	ldr	r2, [pc, #388]	; (80022e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800215c:	4293      	cmp	r3, r2
 800215e:	f240 80b9 	bls.w	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80b3 	beq.w	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217a:	461a      	mov	r2, r3
 800217c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002180:	6093      	str	r3, [r2, #8]
 8002182:	e0a7      	b.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d009      	beq.n	80021a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	4413      	add	r3, r2
 8002196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219a:	461a      	mov	r2, r3
 800219c:	2320      	movs	r3, #32
 800219e:	6093      	str	r3, [r2, #8]
 80021a0:	e098      	b.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f040 8093 	bne.w	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	4a4b      	ldr	r2, [pc, #300]	; (80022e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d90f      	bls.n	80021d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021cc:	461a      	mov	r2, r3
 80021ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021d2:	6093      	str	r3, [r2, #8]
 80021d4:	e07e      	b.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	4413      	add	r3, r2
 80021e8:	3304      	adds	r3, #4
 80021ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	69da      	ldr	r2, [r3, #28]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	0159      	lsls	r1, r3, #5
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	440b      	add	r3, r1
 80021f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002202:	1ad2      	subs	r2, r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d114      	bne.n	8002238 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6818      	ldr	r0, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002220:	461a      	mov	r2, r3
 8002222:	2101      	movs	r1, #1
 8002224:	f002 f8f6 	bl	8004414 <USB_EP0_OutStart>
 8002228:	e006      	b.n	8002238 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	691a      	ldr	r2, [r3, #16]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	441a      	add	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f008 fa28 	bl	800a694 <HAL_PCD_DataOutStageCallback>
 8002244:	e046      	b.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d124      	bne.n	8002298 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	4413      	add	r3, r2
 8002260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002264:	461a      	mov	r2, r3
 8002266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800226a:	6093      	str	r3, [r2, #8]
 800226c:	e032      	b.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f003 0320 	and.w	r3, r3, #32
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	4413      	add	r3, r2
 8002280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002284:	461a      	mov	r2, r3
 8002286:	2320      	movs	r3, #32
 8002288:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	4619      	mov	r1, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f008 f9ff 	bl	800a694 <HAL_PCD_DataOutStageCallback>
 8002296:	e01d      	b.n	80022d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d114      	bne.n	80022c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d108      	bne.n	80022c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022c0:	461a      	mov	r2, r3
 80022c2:	2100      	movs	r1, #0
 80022c4:	f002 f8a6 	bl	8004414 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	4619      	mov	r1, r3
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f008 f9e0 	bl	800a694 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3720      	adds	r7, #32
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	4f54300a 	.word	0x4f54300a
 80022e4:	4f54310a 	.word	0x4f54310a

080022e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	333c      	adds	r3, #60	; 0x3c
 8002300:	3304      	adds	r3, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a15      	ldr	r2, [pc, #84]	; (8002370 <PCD_EP_OutSetupPacket_int+0x88>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d90e      	bls.n	800233c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002334:	461a      	mov	r2, r3
 8002336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f008 f997 	bl	800a670 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <PCD_EP_OutSetupPacket_int+0x88>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d90c      	bls.n	8002364 <PCD_EP_OutSetupPacket_int+0x7c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d108      	bne.n	8002364 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800235c:	461a      	mov	r2, r3
 800235e:	2101      	movs	r1, #1
 8002360:	f002 f858 	bl	8004414 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	4f54300a 	.word	0x4f54300a

08002374 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	70fb      	strb	r3, [r7, #3]
 8002380:	4613      	mov	r3, r2
 8002382:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800238c:	78fb      	ldrb	r3, [r7, #3]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d107      	bne.n	80023a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002392:	883b      	ldrh	r3, [r7, #0]
 8002394:	0419      	lsls	r1, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	430a      	orrs	r2, r1
 800239e:	629a      	str	r2, [r3, #40]	; 0x28
 80023a0:	e028      	b.n	80023f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	4413      	add	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023b0:	2300      	movs	r3, #0
 80023b2:	73fb      	strb	r3, [r7, #15]
 80023b4:	e00d      	b.n	80023d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	3340      	adds	r3, #64	; 0x40
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	4413      	add	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3301      	adds	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	78fb      	ldrb	r3, [r7, #3]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	429a      	cmp	r2, r3
 80023da:	d3ec      	bcc.n	80023b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023dc:	883b      	ldrh	r3, [r7, #0]
 80023de:	0418      	lsls	r0, r3, #16
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	78fb      	ldrb	r3, [r7, #3]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	4302      	orrs	r2, r0
 80023ec:	3340      	adds	r3, #64	; 0x40
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	460b      	mov	r3, r1
 800240c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	887a      	ldrh	r2, [r7, #2]
 8002414:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e267      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d075      	beq.n	8002546 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800245a:	4b88      	ldr	r3, [pc, #544]	; (800267c <HAL_RCC_OscConfig+0x240>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f003 030c 	and.w	r3, r3, #12
 8002462:	2b04      	cmp	r3, #4
 8002464:	d00c      	beq.n	8002480 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002466:	4b85      	ldr	r3, [pc, #532]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800246e:	2b08      	cmp	r3, #8
 8002470:	d112      	bne.n	8002498 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002472:	4b82      	ldr	r3, [pc, #520]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800247e:	d10b      	bne.n	8002498 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	4b7e      	ldr	r3, [pc, #504]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d05b      	beq.n	8002544 <HAL_RCC_OscConfig+0x108>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d157      	bne.n	8002544 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e242      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a0:	d106      	bne.n	80024b0 <HAL_RCC_OscConfig+0x74>
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a75      	ldr	r2, [pc, #468]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e01d      	b.n	80024ec <HAL_RCC_OscConfig+0xb0>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x98>
 80024ba:	4b70      	ldr	r3, [pc, #448]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6f      	ldr	r2, [pc, #444]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	4b6d      	ldr	r3, [pc, #436]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a6c      	ldr	r2, [pc, #432]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024d0:	6013      	str	r3, [r2, #0]
 80024d2:	e00b      	b.n	80024ec <HAL_RCC_OscConfig+0xb0>
 80024d4:	4b69      	ldr	r3, [pc, #420]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a68      	ldr	r2, [pc, #416]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b66      	ldr	r3, [pc, #408]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a65      	ldr	r2, [pc, #404]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80024e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d013      	beq.n	800251c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f4:	f7fe fa2c 	bl	8000950 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024fa:	e008      	b.n	800250e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024fc:	f7fe fa28 	bl	8000950 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b64      	cmp	r3, #100	; 0x64
 8002508:	d901      	bls.n	800250e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	e207      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800250e:	4b5b      	ldr	r3, [pc, #364]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d0f0      	beq.n	80024fc <HAL_RCC_OscConfig+0xc0>
 800251a:	e014      	b.n	8002546 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe fa18 	bl	8000950 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002524:	f7fe fa14 	bl	8000950 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	; 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e1f3      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002536:	4b51      	ldr	r3, [pc, #324]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1f0      	bne.n	8002524 <HAL_RCC_OscConfig+0xe8>
 8002542:	e000      	b.n	8002546 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002544:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d063      	beq.n	800261a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002552:	4b4a      	ldr	r3, [pc, #296]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 030c 	and.w	r3, r3, #12
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00b      	beq.n	8002576 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002566:	2b08      	cmp	r3, #8
 8002568:	d11c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800256a:	4b44      	ldr	r3, [pc, #272]	; (800267c <HAL_RCC_OscConfig+0x240>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d116      	bne.n	80025a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002576:	4b41      	ldr	r3, [pc, #260]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_RCC_OscConfig+0x152>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d001      	beq.n	800258e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e1c7      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258e:	4b3b      	ldr	r3, [pc, #236]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4937      	ldr	r1, [pc, #220]	; (800267c <HAL_RCC_OscConfig+0x240>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a2:	e03a      	b.n	800261a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d020      	beq.n	80025ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025ac:	4b34      	ldr	r3, [pc, #208]	; (8002680 <HAL_RCC_OscConfig+0x244>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe f9cd 	bl	8000950 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025ba:	f7fe f9c9 	bl	8000950 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e1a8      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025cc:	4b2b      	ldr	r3, [pc, #172]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4925      	ldr	r1, [pc, #148]	; (800267c <HAL_RCC_OscConfig+0x240>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	600b      	str	r3, [r1, #0]
 80025ec:	e015      	b.n	800261a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ee:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_OscConfig+0x244>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe f9ac 	bl	8000950 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025fc:	f7fe f9a8 	bl	8000950 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e187      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	4b1b      	ldr	r3, [pc, #108]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d036      	beq.n	8002694 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d016      	beq.n	800265c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800262e:	4b15      	ldr	r3, [pc, #84]	; (8002684 <HAL_RCC_OscConfig+0x248>)
 8002630:	2201      	movs	r2, #1
 8002632:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	f7fe f98c 	bl	8000950 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800263c:	f7fe f988 	bl	8000950 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e167      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCC_OscConfig+0x240>)
 8002650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x200>
 800265a:	e01b      	b.n	8002694 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <HAL_RCC_OscConfig+0x248>)
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002662:	f7fe f975 	bl	8000950 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002668:	e00e      	b.n	8002688 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800266a:	f7fe f971 	bl	8000950 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d907      	bls.n	8002688 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e150      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
 800267c:	40023800 	.word	0x40023800
 8002680:	42470000 	.word	0x42470000
 8002684:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	4b88      	ldr	r3, [pc, #544]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 800268a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1ea      	bne.n	800266a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8097 	beq.w	80027d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b81      	ldr	r3, [pc, #516]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
 80026b6:	4b7d      	ldr	r3, [pc, #500]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	4a7c      	ldr	r2, [pc, #496]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80026bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c0:	6413      	str	r3, [r2, #64]	; 0x40
 80026c2:	4b7a      	ldr	r3, [pc, #488]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ce:	2301      	movs	r3, #1
 80026d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d2:	4b77      	ldr	r3, [pc, #476]	; (80028b0 <HAL_RCC_OscConfig+0x474>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d118      	bne.n	8002710 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026de:	4b74      	ldr	r3, [pc, #464]	; (80028b0 <HAL_RCC_OscConfig+0x474>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a73      	ldr	r2, [pc, #460]	; (80028b0 <HAL_RCC_OscConfig+0x474>)
 80026e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ea:	f7fe f931 	bl	8000950 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026f2:	f7fe f92d 	bl	8000950 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e10c      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002704:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <HAL_RCC_OscConfig+0x474>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d106      	bne.n	8002726 <HAL_RCC_OscConfig+0x2ea>
 8002718:	4b64      	ldr	r3, [pc, #400]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	4a63      	ldr	r2, [pc, #396]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6713      	str	r3, [r2, #112]	; 0x70
 8002724:	e01c      	b.n	8002760 <HAL_RCC_OscConfig+0x324>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	2b05      	cmp	r3, #5
 800272c:	d10c      	bne.n	8002748 <HAL_RCC_OscConfig+0x30c>
 800272e:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002732:	4a5e      	ldr	r2, [pc, #376]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	6713      	str	r3, [r2, #112]	; 0x70
 800273a:	4b5c      	ldr	r3, [pc, #368]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 800273c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273e:	4a5b      	ldr	r2, [pc, #364]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	6713      	str	r3, [r2, #112]	; 0x70
 8002746:	e00b      	b.n	8002760 <HAL_RCC_OscConfig+0x324>
 8002748:	4b58      	ldr	r3, [pc, #352]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 800274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274c:	4a57      	ldr	r2, [pc, #348]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 800274e:	f023 0301 	bic.w	r3, r3, #1
 8002752:	6713      	str	r3, [r2, #112]	; 0x70
 8002754:	4b55      	ldr	r3, [pc, #340]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002758:	4a54      	ldr	r2, [pc, #336]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 800275a:	f023 0304 	bic.w	r3, r3, #4
 800275e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe f8f2 	bl	8000950 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276e:	e00a      	b.n	8002786 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7fe f8ee 	bl	8000950 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e0cb      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002786:	4b49      	ldr	r3, [pc, #292]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0ee      	beq.n	8002770 <HAL_RCC_OscConfig+0x334>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002794:	f7fe f8dc 	bl	8000950 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279c:	f7fe f8d8 	bl	8000950 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0b5      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027b2:	4b3e      	ldr	r3, [pc, #248]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1ee      	bne.n	800279c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027be:	7dfb      	ldrb	r3, [r7, #23]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d105      	bne.n	80027d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c4:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	4a38      	ldr	r2, [pc, #224]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80027ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80a1 	beq.w	800291c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027da:	4b34      	ldr	r3, [pc, #208]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d05c      	beq.n	80028a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d141      	bne.n	8002872 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ee:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_RCC_OscConfig+0x478>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe f8ac 	bl	8000950 <HAL_GetTick>
 80027f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe f8a8 	bl	8000950 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b02      	cmp	r3, #2
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e087      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280e:	4b27      	ldr	r3, [pc, #156]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f0      	bne.n	80027fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69da      	ldr	r2, [r3, #28]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	019b      	lsls	r3, r3, #6
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	085b      	lsrs	r3, r3, #1
 8002832:	3b01      	subs	r3, #1
 8002834:	041b      	lsls	r3, r3, #16
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	061b      	lsls	r3, r3, #24
 800283e:	491b      	ldr	r1, [pc, #108]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002840:	4313      	orrs	r3, r2
 8002842:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002844:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_RCC_OscConfig+0x478>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7fe f881 	bl	8000950 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002850:	e008      	b.n	8002864 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7fe f87d 	bl	8000950 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d901      	bls.n	8002864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e05c      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002864:	4b11      	ldr	r3, [pc, #68]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d0f0      	beq.n	8002852 <HAL_RCC_OscConfig+0x416>
 8002870:	e054      	b.n	800291c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002872:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <HAL_RCC_OscConfig+0x478>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002878:	f7fe f86a 	bl	8000950 <HAL_GetTick>
 800287c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe f866 	bl	8000950 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e045      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_RCC_OscConfig+0x470>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x444>
 800289e:	e03d      	b.n	800291c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d107      	bne.n	80028b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e038      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
 80028ac:	40023800 	.word	0x40023800
 80028b0:	40007000 	.word	0x40007000
 80028b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028b8:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <HAL_RCC_OscConfig+0x4ec>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d028      	beq.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d121      	bne.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d11a      	bne.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d111      	bne.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	3b01      	subs	r3, #1
 8002902:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d107      	bne.n	8002918 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3718      	adds	r7, #24
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023800 	.word	0x40023800

0800292c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e0cc      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002940:	4b68      	ldr	r3, [pc, #416]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d90c      	bls.n	8002968 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b65      	ldr	r3, [pc, #404]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002956:	4b63      	ldr	r3, [pc, #396]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0b8      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d020      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d005      	beq.n	800298c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002980:	4b59      	ldr	r3, [pc, #356]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	4a58      	ldr	r2, [pc, #352]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800298a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002998:	4b53      	ldr	r3, [pc, #332]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	4a52      	ldr	r2, [pc, #328]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029a4:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	494d      	ldr	r1, [pc, #308]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d044      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d107      	bne.n	80029da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d119      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e07f      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d003      	beq.n	80029ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ea:	4b3f      	ldr	r3, [pc, #252]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e06f      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fa:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e067      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a0a:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f023 0203 	bic.w	r2, r3, #3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	4934      	ldr	r1, [pc, #208]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a1c:	f7fd ff98 	bl	8000950 <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a24:	f7fd ff94 	bl	8000950 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e04f      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 020c 	and.w	r2, r3, #12
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d1eb      	bne.n	8002a24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a4c:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d20c      	bcs.n	8002a74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a5a:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a62:	4b20      	ldr	r3, [pc, #128]	; (8002ae4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d001      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e032      	b.n	8002ada <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a80:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	4916      	ldr	r1, [pc, #88]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a9e:	4b12      	ldr	r3, [pc, #72]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	490e      	ldr	r1, [pc, #56]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ab2:	f000 f821 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	490a      	ldr	r1, [pc, #40]	; (8002aec <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	5ccb      	ldrb	r3, [r1, r3]
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fef8 	bl	80008c8 <HAL_InitTick>

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	40023c00 	.word	0x40023c00
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	0800aeb8 	.word	0x0800aeb8
 8002af0:	20000000 	.word	0x20000000
 8002af4:	20000004 	.word	0x20000004

08002af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002afc:	b090      	sub	sp, #64	; 0x40
 8002afe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	637b      	str	r3, [r7, #52]	; 0x34
 8002b04:	2300      	movs	r3, #0
 8002b06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b08:	2300      	movs	r3, #0
 8002b0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b10:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 030c 	and.w	r3, r3, #12
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d00d      	beq.n	8002b38 <HAL_RCC_GetSysClockFreq+0x40>
 8002b1c:	2b08      	cmp	r3, #8
 8002b1e:	f200 80a1 	bhi.w	8002c64 <HAL_RCC_GetSysClockFreq+0x16c>
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x34>
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d003      	beq.n	8002b32 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b2a:	e09b      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b2c:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b2e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002b30:	e09b      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b32:	4b53      	ldr	r3, [pc, #332]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b36:	e098      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b38:	4b4f      	ldr	r3, [pc, #316]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b40:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b42:	4b4d      	ldr	r3, [pc, #308]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d028      	beq.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4e:	4b4a      	ldr	r3, [pc, #296]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	099b      	lsrs	r3, r3, #6
 8002b54:	2200      	movs	r2, #0
 8002b56:	623b      	str	r3, [r7, #32]
 8002b58:	627a      	str	r2, [r7, #36]	; 0x24
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002b60:	2100      	movs	r1, #0
 8002b62:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b64:	fb03 f201 	mul.w	r2, r3, r1
 8002b68:	2300      	movs	r3, #0
 8002b6a:	fb00 f303 	mul.w	r3, r0, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	4a43      	ldr	r2, [pc, #268]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b72:	fba0 1202 	umull	r1, r2, r0, r2
 8002b76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b78:	460a      	mov	r2, r1
 8002b7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7e:	4413      	add	r3, r2
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	2200      	movs	r2, #0
 8002b86:	61bb      	str	r3, [r7, #24]
 8002b88:	61fa      	str	r2, [r7, #28]
 8002b8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b92:	f7fd fb25 	bl	80001e0 <__aeabi_uldivmod>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9e:	e053      	b.n	8002c48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba0:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	099b      	lsrs	r3, r3, #6
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	613b      	str	r3, [r7, #16]
 8002baa:	617a      	str	r2, [r7, #20]
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002bb2:	f04f 0b00 	mov.w	fp, #0
 8002bb6:	4652      	mov	r2, sl
 8002bb8:	465b      	mov	r3, fp
 8002bba:	f04f 0000 	mov.w	r0, #0
 8002bbe:	f04f 0100 	mov.w	r1, #0
 8002bc2:	0159      	lsls	r1, r3, #5
 8002bc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bc8:	0150      	lsls	r0, r2, #5
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	ebb2 080a 	subs.w	r8, r2, sl
 8002bd2:	eb63 090b 	sbc.w	r9, r3, fp
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002be2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002be6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002bea:	ebb2 0408 	subs.w	r4, r2, r8
 8002bee:	eb63 0509 	sbc.w	r5, r3, r9
 8002bf2:	f04f 0200 	mov.w	r2, #0
 8002bf6:	f04f 0300 	mov.w	r3, #0
 8002bfa:	00eb      	lsls	r3, r5, #3
 8002bfc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c00:	00e2      	lsls	r2, r4, #3
 8002c02:	4614      	mov	r4, r2
 8002c04:	461d      	mov	r5, r3
 8002c06:	eb14 030a 	adds.w	r3, r4, sl
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	eb45 030b 	adc.w	r3, r5, fp
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c1e:	4629      	mov	r1, r5
 8002c20:	028b      	lsls	r3, r1, #10
 8002c22:	4621      	mov	r1, r4
 8002c24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c28:	4621      	mov	r1, r4
 8002c2a:	028a      	lsls	r2, r1, #10
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c32:	2200      	movs	r2, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	60fa      	str	r2, [r7, #12]
 8002c38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c3c:	f7fd fad0 	bl	80001e0 <__aeabi_uldivmod>
 8002c40:	4602      	mov	r2, r0
 8002c42:	460b      	mov	r3, r1
 8002c44:	4613      	mov	r3, r2
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	0c1b      	lsrs	r3, r3, #16
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	3301      	adds	r3, #1
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002c58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c62:	e002      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x184>)
 8002c66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3740      	adds	r7, #64	; 0x40
 8002c70:	46bd      	mov	sp, r7
 8002c72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	00f42400 	.word	0x00f42400
 8002c80:	017d7840 	.word	0x017d7840

08002c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000000 	.word	0x20000000

08002c9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	f107 001c 	add.w	r0, r7, #28
 8002caa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d122      	bne.n	8002cfa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d105      	bne.n	8002cee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f001 fbee 	bl	80044d0 <USB_CoreReset>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	73fb      	strb	r3, [r7, #15]
 8002cf8:	e01a      	b.n	8002d30 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f001 fbe2 	bl	80044d0 <USB_CoreReset>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d106      	bne.n	8002d24 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	639a      	str	r2, [r3, #56]	; 0x38
 8002d22:	e005      	b.n	8002d30 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d10b      	bne.n	8002d4e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f043 0206 	orr.w	r2, r3, #6
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f043 0220 	orr.w	r2, r3, #32
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d5a:	b004      	add	sp, #16
 8002d5c:	4770      	bx	lr
	...

08002d60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b087      	sub	sp, #28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d165      	bne.n	8002e40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4a41      	ldr	r2, [pc, #260]	; (8002e7c <USB_SetTurnaroundTime+0x11c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d906      	bls.n	8002d8a <USB_SetTurnaroundTime+0x2a>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4a40      	ldr	r2, [pc, #256]	; (8002e80 <USB_SetTurnaroundTime+0x120>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d202      	bcs.n	8002d8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d84:	230f      	movs	r3, #15
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	e062      	b.n	8002e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	4a3c      	ldr	r2, [pc, #240]	; (8002e80 <USB_SetTurnaroundTime+0x120>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d306      	bcc.n	8002da0 <USB_SetTurnaroundTime+0x40>
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	4a3b      	ldr	r2, [pc, #236]	; (8002e84 <USB_SetTurnaroundTime+0x124>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d202      	bcs.n	8002da0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d9a:	230e      	movs	r3, #14
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	e057      	b.n	8002e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	4a38      	ldr	r2, [pc, #224]	; (8002e84 <USB_SetTurnaroundTime+0x124>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d306      	bcc.n	8002db6 <USB_SetTurnaroundTime+0x56>
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4a37      	ldr	r2, [pc, #220]	; (8002e88 <USB_SetTurnaroundTime+0x128>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d202      	bcs.n	8002db6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002db0:	230d      	movs	r3, #13
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	e04c      	b.n	8002e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	4a33      	ldr	r2, [pc, #204]	; (8002e88 <USB_SetTurnaroundTime+0x128>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d306      	bcc.n	8002dcc <USB_SetTurnaroundTime+0x6c>
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	4a32      	ldr	r2, [pc, #200]	; (8002e8c <USB_SetTurnaroundTime+0x12c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d802      	bhi.n	8002dcc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002dc6:	230c      	movs	r3, #12
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	e041      	b.n	8002e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4a2f      	ldr	r2, [pc, #188]	; (8002e8c <USB_SetTurnaroundTime+0x12c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d906      	bls.n	8002de2 <USB_SetTurnaroundTime+0x82>
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4a2e      	ldr	r2, [pc, #184]	; (8002e90 <USB_SetTurnaroundTime+0x130>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d802      	bhi.n	8002de2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002ddc:	230b      	movs	r3, #11
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	e036      	b.n	8002e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	4a2a      	ldr	r2, [pc, #168]	; (8002e90 <USB_SetTurnaroundTime+0x130>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d906      	bls.n	8002df8 <USB_SetTurnaroundTime+0x98>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4a29      	ldr	r2, [pc, #164]	; (8002e94 <USB_SetTurnaroundTime+0x134>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d802      	bhi.n	8002df8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002df2:	230a      	movs	r3, #10
 8002df4:	617b      	str	r3, [r7, #20]
 8002df6:	e02b      	b.n	8002e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4a26      	ldr	r2, [pc, #152]	; (8002e94 <USB_SetTurnaroundTime+0x134>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d906      	bls.n	8002e0e <USB_SetTurnaroundTime+0xae>
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4a25      	ldr	r2, [pc, #148]	; (8002e98 <USB_SetTurnaroundTime+0x138>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d202      	bcs.n	8002e0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e08:	2309      	movs	r3, #9
 8002e0a:	617b      	str	r3, [r7, #20]
 8002e0c:	e020      	b.n	8002e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <USB_SetTurnaroundTime+0x138>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d306      	bcc.n	8002e24 <USB_SetTurnaroundTime+0xc4>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4a20      	ldr	r2, [pc, #128]	; (8002e9c <USB_SetTurnaroundTime+0x13c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d802      	bhi.n	8002e24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e1e:	2308      	movs	r3, #8
 8002e20:	617b      	str	r3, [r7, #20]
 8002e22:	e015      	b.n	8002e50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	4a1d      	ldr	r2, [pc, #116]	; (8002e9c <USB_SetTurnaroundTime+0x13c>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d906      	bls.n	8002e3a <USB_SetTurnaroundTime+0xda>
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4a1c      	ldr	r2, [pc, #112]	; (8002ea0 <USB_SetTurnaroundTime+0x140>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d202      	bcs.n	8002e3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e34:	2307      	movs	r3, #7
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e00a      	b.n	8002e50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e3a:	2306      	movs	r3, #6
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e007      	b.n	8002e50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e46:	2309      	movs	r3, #9
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	e001      	b.n	8002e50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e4c:	2309      	movs	r3, #9
 8002e4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	029b      	lsls	r3, r3, #10
 8002e64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	00d8acbf 	.word	0x00d8acbf
 8002e80:	00e4e1c0 	.word	0x00e4e1c0
 8002e84:	00f42400 	.word	0x00f42400
 8002e88:	01067380 	.word	0x01067380
 8002e8c:	011a499f 	.word	0x011a499f
 8002e90:	01312cff 	.word	0x01312cff
 8002e94:	014ca43f 	.word	0x014ca43f
 8002e98:	016e3600 	.word	0x016e3600
 8002e9c:	01a6ab1f 	.word	0x01a6ab1f
 8002ea0:	01e84800 	.word	0x01e84800

08002ea4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f023 0201 	bic.w	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d115      	bne.n	8002f36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f16:	2001      	movs	r0, #1
 8002f18:	f7fd fd26 	bl	8000968 <HAL_Delay>
      ms++;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f001 fa45 	bl	80043b2 <USB_GetMode>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d01e      	beq.n	8002f6c <USB_SetCurrentMode+0x84>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b31      	cmp	r3, #49	; 0x31
 8002f32:	d9f0      	bls.n	8002f16 <USB_SetCurrentMode+0x2e>
 8002f34:	e01a      	b.n	8002f6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d115      	bne.n	8002f68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f48:	2001      	movs	r0, #1
 8002f4a:	f7fd fd0d 	bl	8000968 <HAL_Delay>
      ms++;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	3301      	adds	r3, #1
 8002f52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f001 fa2c 	bl	80043b2 <USB_GetMode>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <USB_SetCurrentMode+0x84>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2b31      	cmp	r3, #49	; 0x31
 8002f64:	d9f0      	bls.n	8002f48 <USB_SetCurrentMode+0x60>
 8002f66:	e001      	b.n	8002f6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e005      	b.n	8002f78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2b32      	cmp	r3, #50	; 0x32
 8002f70:	d101      	bne.n	8002f76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f80:	b084      	sub	sp, #16
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	e009      	b.n	8002fb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	3340      	adds	r3, #64	; 0x40
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	2200      	movs	r2, #0
 8002fac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b0e      	cmp	r3, #14
 8002fb8:	d9f2      	bls.n	8002fa0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d11c      	bne.n	8002ffa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fce:	f043 0302 	orr.w	r3, r3, #2
 8002fd2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	639a      	str	r2, [r3, #56]	; 0x38
 8002ff8:	e00b      	b.n	8003012 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003018:	461a      	mov	r2, r3
 800301a:	2300      	movs	r3, #0
 800301c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003024:	4619      	mov	r1, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302c:	461a      	mov	r2, r3
 800302e:	680b      	ldr	r3, [r1, #0]
 8003030:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	2b01      	cmp	r3, #1
 8003036:	d10c      	bne.n	8003052 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303a:	2b00      	cmp	r3, #0
 800303c:	d104      	bne.n	8003048 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800303e:	2100      	movs	r1, #0
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f965 	bl	8003310 <USB_SetDevSpeed>
 8003046:	e008      	b.n	800305a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003048:	2101      	movs	r1, #1
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f960 	bl	8003310 <USB_SetDevSpeed>
 8003050:	e003      	b.n	800305a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003052:	2103      	movs	r1, #3
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f95b 	bl	8003310 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800305a:	2110      	movs	r1, #16
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 f8f3 	bl	8003248 <USB_FlushTxFifo>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f91f 	bl	80032b0 <USB_FlushRxFifo>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003082:	461a      	mov	r2, r3
 8003084:	2300      	movs	r3, #0
 8003086:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308e:	461a      	mov	r2, r3
 8003090:	2300      	movs	r3, #0
 8003092:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309a:	461a      	mov	r2, r3
 800309c:	2300      	movs	r3, #0
 800309e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	e043      	b.n	800312e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030bc:	d118      	bne.n	80030f0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10a      	bne.n	80030da <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	015a      	lsls	r2, r3, #5
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4413      	add	r3, r2
 80030cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d0:	461a      	mov	r2, r3
 80030d2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	e013      	b.n	8003102 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	015a      	lsls	r2, r3, #5
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4413      	add	r3, r2
 80030e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e6:	461a      	mov	r2, r3
 80030e8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e008      	b.n	8003102 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fc:	461a      	mov	r2, r3
 80030fe:	2300      	movs	r3, #0
 8003100:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4413      	add	r3, r2
 800310a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310e:	461a      	mov	r2, r3
 8003110:	2300      	movs	r3, #0
 8003112:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003120:	461a      	mov	r2, r3
 8003122:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003126:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	3301      	adds	r3, #1
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	429a      	cmp	r2, r3
 8003134:	d3b7      	bcc.n	80030a6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	e043      	b.n	80031c4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800314e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003152:	d118      	bne.n	8003186 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10a      	bne.n	8003170 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003166:	461a      	mov	r2, r3
 8003168:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	e013      	b.n	8003198 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317c:	461a      	mov	r2, r3
 800317e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	e008      	b.n	8003198 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003192:	461a      	mov	r2, r3
 8003194:	2300      	movs	r3, #0
 8003196:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a4:	461a      	mov	r2, r3
 80031a6:	2300      	movs	r3, #0
 80031a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	015a      	lsls	r2, r3, #5
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4413      	add	r3, r2
 80031b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b6:	461a      	mov	r2, r3
 80031b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	3301      	adds	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d3b7      	bcc.n	800313c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031de:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80031ec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80031ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	f043 0210 	orr.w	r2, r3, #16
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699a      	ldr	r2, [r3, #24]
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <USB_DevInit+0x2c4>)
 8003206:	4313      	orrs	r3, r2
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800320c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d005      	beq.n	800321e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	f043 0208 	orr.w	r2, r3, #8
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800321e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003220:	2b01      	cmp	r3, #1
 8003222:	d107      	bne.n	8003234 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800322c:	f043 0304 	orr.w	r3, r3, #4
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003234:	7dfb      	ldrb	r3, [r7, #23]
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003240:	b004      	add	sp, #16
 8003242:	4770      	bx	lr
 8003244:	803c3800 	.word	0x803c3800

08003248 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3301      	adds	r3, #1
 800325a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4a13      	ldr	r2, [pc, #76]	; (80032ac <USB_FlushTxFifo+0x64>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d901      	bls.n	8003268 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e01b      	b.n	80032a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	daf2      	bge.n	8003256 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	019b      	lsls	r3, r3, #6
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3301      	adds	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4a08      	ldr	r2, [pc, #32]	; (80032ac <USB_FlushTxFifo+0x64>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e006      	b.n	80032a0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	f003 0320 	and.w	r3, r3, #32
 800329a:	2b20      	cmp	r3, #32
 800329c:	d0f0      	beq.n	8003280 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	00030d40 	.word	0x00030d40

080032b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3301      	adds	r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a11      	ldr	r2, [pc, #68]	; (800330c <USB_FlushRxFifo+0x5c>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e018      	b.n	8003300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	daf2      	bge.n	80032bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2210      	movs	r2, #16
 80032de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	3301      	adds	r3, #1
 80032e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a08      	ldr	r2, [pc, #32]	; (800330c <USB_FlushRxFifo+0x5c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e006      	b.n	8003300 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	f003 0310 	and.w	r3, r3, #16
 80032fa:	2b10      	cmp	r3, #16
 80032fc:	d0f0      	beq.n	80032e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3714      	adds	r7, #20
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	00030d40 	.word	0x00030d40

08003310 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	68f9      	ldr	r1, [r7, #12]
 800332c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003330:	4313      	orrs	r3, r2
 8003332:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003342:	b480      	push	{r7}
 8003344:	b087      	sub	sp, #28
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 0306 	and.w	r3, r3, #6
 800335a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d102      	bne.n	8003368 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003362:	2300      	movs	r3, #0
 8003364:	75fb      	strb	r3, [r7, #23]
 8003366:	e00a      	b.n	800337e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d002      	beq.n	8003374 <USB_GetDevSpeed+0x32>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2b06      	cmp	r3, #6
 8003372:	d102      	bne.n	800337a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003374:	2302      	movs	r3, #2
 8003376:	75fb      	strb	r3, [r7, #23]
 8003378:	e001      	b.n	800337e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800337a:	230f      	movs	r3, #15
 800337c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800337e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003380:	4618      	mov	r0, r3
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	785b      	ldrb	r3, [r3, #1]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d13a      	bne.n	800341e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ae:	69da      	ldr	r2, [r3, #28]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	2101      	movs	r1, #1
 80033ba:	fa01 f303 	lsl.w	r3, r1, r3
 80033be:	b29b      	uxth	r3, r3
 80033c0:	68f9      	ldr	r1, [r7, #12]
 80033c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	015a      	lsls	r2, r3, #5
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	4413      	add	r3, r2
 80033d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d155      	bne.n	800348c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	791b      	ldrb	r3, [r3, #4]
 80033fa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033fc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	059b      	lsls	r3, r3, #22
 8003402:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003404:	4313      	orrs	r3, r2
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	0151      	lsls	r1, r2, #5
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	440a      	add	r2, r1
 800340e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	e036      	b.n	800348c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	2101      	movs	r1, #1
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	041b      	lsls	r3, r3, #16
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800343c:	4313      	orrs	r3, r2
 800343e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d11a      	bne.n	800348c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	791b      	ldrb	r3, [r3, #4]
 8003470:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003472:	430b      	orrs	r3, r1
 8003474:	4313      	orrs	r3, r2
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	0151      	lsls	r1, r2, #5
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	440a      	add	r2, r1
 800347e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800348a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	785b      	ldrb	r3, [r3, #1]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d161      	bne.n	800357c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034ce:	d11f      	bne.n	8003510 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68ba      	ldr	r2, [r7, #8]
 80034e0:	0151      	lsls	r1, r2, #5
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	440a      	add	r2, r1
 80034e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	0151      	lsls	r1, r2, #5
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	440a      	add	r2, r1
 8003506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800350a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800350e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	f003 030f 	and.w	r3, r3, #15
 8003520:	2101      	movs	r1, #1
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	b29b      	uxth	r3, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	68f9      	ldr	r1, [r7, #12]
 800352c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003530:	4013      	ands	r3, r2
 8003532:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353a:	69da      	ldr	r2, [r3, #28]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	2101      	movs	r1, #1
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	b29b      	uxth	r3, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	68f9      	ldr	r1, [r7, #12]
 8003550:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003554:	4013      	ands	r3, r2
 8003556:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	0159      	lsls	r1, r3, #5
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	440b      	add	r3, r1
 800356e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003572:	4619      	mov	r1, r3
 8003574:	4b35      	ldr	r3, [pc, #212]	; (800364c <USB_DeactivateEndpoint+0x1b0>)
 8003576:	4013      	ands	r3, r2
 8003578:	600b      	str	r3, [r1, #0]
 800357a:	e060      	b.n	800363e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800358e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003592:	d11f      	bne.n	80035d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	0151      	lsls	r1, r2, #5
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	440a      	add	r2, r1
 80035aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	0151      	lsls	r1, r2, #5
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	440a      	add	r2, r1
 80035ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	2101      	movs	r1, #1
 80035e6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ea:	041b      	lsls	r3, r3, #16
 80035ec:	43db      	mvns	r3, r3
 80035ee:	68f9      	ldr	r1, [r7, #12]
 80035f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035f4:	4013      	ands	r3, r2
 80035f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	2101      	movs	r1, #1
 800360a:	fa01 f303 	lsl.w	r3, r1, r3
 800360e:	041b      	lsls	r3, r3, #16
 8003610:	43db      	mvns	r3, r3
 8003612:	68f9      	ldr	r1, [r7, #12]
 8003614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003618:	4013      	ands	r3, r2
 800361a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	0159      	lsls	r1, r3, #5
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	440b      	add	r3, r1
 8003632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003636:	4619      	mov	r1, r3
 8003638:	4b05      	ldr	r3, [pc, #20]	; (8003650 <USB_DeactivateEndpoint+0x1b4>)
 800363a:	4013      	ands	r3, r2
 800363c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	ec337800 	.word	0xec337800
 8003650:	eff37800 	.word	0xeff37800

08003654 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af02      	add	r7, sp, #8
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	4613      	mov	r3, r2
 8003660:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	785b      	ldrb	r3, [r3, #1]
 8003670:	2b01      	cmp	r3, #1
 8003672:	f040 815c 	bne.w	800392e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d132      	bne.n	80036e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	0151      	lsls	r1, r2, #5
 8003690:	69fa      	ldr	r2, [r7, #28]
 8003692:	440a      	add	r2, r1
 8003694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003698:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800369c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	0151      	lsls	r1, r2, #5
 80036b4:	69fa      	ldr	r2, [r7, #28]
 80036b6:	440a      	add	r2, r1
 80036b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	0151      	lsls	r1, r2, #5
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	440a      	add	r2, r1
 80036d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036dc:	0cdb      	lsrs	r3, r3, #19
 80036de:	04db      	lsls	r3, r3, #19
 80036e0:	6113      	str	r3, [r2, #16]
 80036e2:	e074      	b.n	80037ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	0151      	lsls	r1, r2, #5
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	440a      	add	r2, r1
 80036fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036fe:	0cdb      	lsrs	r3, r3, #19
 8003700:	04db      	lsls	r3, r3, #19
 8003702:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	0151      	lsls	r1, r2, #5
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	440a      	add	r2, r1
 800371a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800371e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003722:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003726:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003734:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	6999      	ldr	r1, [r3, #24]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	440b      	add	r3, r1
 8003740:	1e59      	subs	r1, r3, #1
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	fbb1 f3f3 	udiv	r3, r1, r3
 800374a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800374c:	4b9d      	ldr	r3, [pc, #628]	; (80039c4 <USB_EPStartXfer+0x370>)
 800374e:	400b      	ands	r3, r1
 8003750:	69b9      	ldr	r1, [r7, #24]
 8003752:	0148      	lsls	r0, r1, #5
 8003754:	69f9      	ldr	r1, [r7, #28]
 8003756:	4401      	add	r1, r0
 8003758:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800375c:	4313      	orrs	r3, r2
 800375e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003776:	69b9      	ldr	r1, [r7, #24]
 8003778:	0148      	lsls	r0, r1, #5
 800377a:	69f9      	ldr	r1, [r7, #28]
 800377c:	4401      	add	r1, r0
 800377e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003782:	4313      	orrs	r3, r2
 8003784:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	791b      	ldrb	r3, [r3, #4]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d11f      	bne.n	80037ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	0151      	lsls	r1, r2, #5
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	440a      	add	r2, r1
 80037a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80037ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80037ce:	79fb      	ldrb	r3, [r7, #7]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d14b      	bne.n	800386c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e8:	461a      	mov	r2, r3
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	791b      	ldrb	r3, [r3, #4]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d128      	bne.n	800384a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003804:	2b00      	cmp	r3, #0
 8003806:	d110      	bne.n	800382a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	0151      	lsls	r1, r2, #5
 800381a:	69fa      	ldr	r2, [r7, #28]
 800381c:	440a      	add	r2, r1
 800381e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003822:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003826:	6013      	str	r3, [r2, #0]
 8003828:	e00f      	b.n	800384a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	0151      	lsls	r1, r2, #5
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	440a      	add	r2, r1
 8003840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003848:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	0151      	lsls	r1, r2, #5
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	440a      	add	r2, r1
 8003860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003864:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003868:	6013      	str	r3, [r2, #0]
 800386a:	e133      	b.n	8003ad4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	0151      	lsls	r1, r2, #5
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	440a      	add	r2, r1
 8003882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003886:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800388a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	791b      	ldrb	r3, [r3, #4]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d015      	beq.n	80038c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 811b 	beq.w	8003ad4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	f003 030f 	and.w	r3, r3, #15
 80038ae:	2101      	movs	r1, #1
 80038b0:	fa01 f303 	lsl.w	r3, r1, r3
 80038b4:	69f9      	ldr	r1, [r7, #28]
 80038b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038ba:	4313      	orrs	r3, r2
 80038bc:	634b      	str	r3, [r1, #52]	; 0x34
 80038be:	e109      	b.n	8003ad4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d110      	bne.n	80038f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	0151      	lsls	r1, r2, #5
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	440a      	add	r2, r1
 80038e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	e00f      	b.n	8003912 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	0151      	lsls	r1, r2, #5
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	440a      	add	r2, r1
 8003908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800390c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003910:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6919      	ldr	r1, [r3, #16]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	b298      	uxth	r0, r3
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	4603      	mov	r3, r0
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f000 fade 	bl	8003ee8 <USB_WritePacket>
 800392c:	e0d2      	b.n	8003ad4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	0151      	lsls	r1, r2, #5
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	440a      	add	r2, r1
 8003944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003948:	0cdb      	lsrs	r3, r3, #19
 800394a:	04db      	lsls	r3, r3, #19
 800394c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	0151      	lsls	r1, r2, #5
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	440a      	add	r2, r1
 8003964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003968:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800396c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003970:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d126      	bne.n	80039c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	015a      	lsls	r2, r3, #5
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	4413      	add	r3, r2
 8003982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003990:	69b9      	ldr	r1, [r7, #24]
 8003992:	0148      	lsls	r0, r1, #5
 8003994:	69f9      	ldr	r1, [r7, #28]
 8003996:	4401      	add	r1, r0
 8003998:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800399c:	4313      	orrs	r3, r2
 800399e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	0151      	lsls	r1, r2, #5
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	440a      	add	r2, r1
 80039b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039be:	6113      	str	r3, [r2, #16]
 80039c0:	e03a      	b.n	8003a38 <USB_EPStartXfer+0x3e4>
 80039c2:	bf00      	nop
 80039c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	699a      	ldr	r2, [r3, #24]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4413      	add	r3, r2
 80039d2:	1e5a      	subs	r2, r3, #1
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039dc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	8afa      	ldrh	r2, [r7, #22]
 80039e4:	fb03 f202 	mul.w	r2, r3, r2
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	015a      	lsls	r2, r3, #5
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	4413      	add	r3, r2
 80039f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f8:	691a      	ldr	r2, [r3, #16]
 80039fa:	8afb      	ldrh	r3, [r7, #22]
 80039fc:	04d9      	lsls	r1, r3, #19
 80039fe:	4b38      	ldr	r3, [pc, #224]	; (8003ae0 <USB_EPStartXfer+0x48c>)
 8003a00:	400b      	ands	r3, r1
 8003a02:	69b9      	ldr	r1, [r7, #24]
 8003a04:	0148      	lsls	r0, r1, #5
 8003a06:	69f9      	ldr	r1, [r7, #28]
 8003a08:	4401      	add	r1, r0
 8003a0a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a28:	69b9      	ldr	r1, [r7, #24]
 8003a2a:	0148      	lsls	r0, r1, #5
 8003a2c:	69f9      	ldr	r1, [r7, #28]
 8003a2e:	4401      	add	r1, r0
 8003a30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a34:	4313      	orrs	r3, r2
 8003a36:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a38:	79fb      	ldrb	r3, [r7, #7]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d10d      	bne.n	8003a5a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	6919      	ldr	r1, [r3, #16]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a56:	460a      	mov	r2, r1
 8003a58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	791b      	ldrb	r3, [r3, #4]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d128      	bne.n	8003ab4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d110      	bne.n	8003a94 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69ba      	ldr	r2, [r7, #24]
 8003a82:	0151      	lsls	r1, r2, #5
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	440a      	add	r2, r1
 8003a88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	e00f      	b.n	8003ab4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	0151      	lsls	r1, r2, #5
 8003aa6:	69fa      	ldr	r2, [r7, #28]
 8003aa8:	440a      	add	r2, r1
 8003aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	0151      	lsls	r1, r2, #5
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	440a      	add	r2, r1
 8003aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ace:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003ad2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3720      	adds	r7, #32
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	1ff80000 	.word	0x1ff80000

08003ae4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	785b      	ldrb	r3, [r3, #1]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	f040 80ce 	bne.w	8003ca2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d132      	bne.n	8003b74 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	0151      	lsls	r1, r2, #5
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	440a      	add	r2, r1
 8003b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b28:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b2c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	0151      	lsls	r1, r2, #5
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	440a      	add	r2, r1
 8003b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b4c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5e:	691b      	ldr	r3, [r3, #16]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	0151      	lsls	r1, r2, #5
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	440a      	add	r2, r1
 8003b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b6c:	0cdb      	lsrs	r3, r3, #19
 8003b6e:	04db      	lsls	r3, r3, #19
 8003b70:	6113      	str	r3, [r2, #16]
 8003b72:	e04e      	b.n	8003c12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	0151      	lsls	r1, r2, #5
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	440a      	add	r2, r1
 8003b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b8e:	0cdb      	lsrs	r3, r3, #19
 8003b90:	04db      	lsls	r3, r3, #19
 8003b92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	015a      	lsls	r2, r3, #5
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	0151      	lsls	r1, r2, #5
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	440a      	add	r2, r1
 8003baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bb2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bb6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	699a      	ldr	r2, [r3, #24]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d903      	bls.n	8003bcc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	68da      	ldr	r2, [r3, #12]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	0151      	lsls	r1, r2, #5
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	440a      	add	r2, r1
 8003be2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003be6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c02:	6939      	ldr	r1, [r7, #16]
 8003c04:	0148      	lsls	r0, r1, #5
 8003c06:	6979      	ldr	r1, [r7, #20]
 8003c08:	4401      	add	r1, r0
 8003c0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d11e      	bne.n	8003c56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d009      	beq.n	8003c34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2c:	461a      	mov	r2, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	0151      	lsls	r1, r2, #5
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	440a      	add	r2, r1
 8003c4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	e097      	b.n	8003d86 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	015a      	lsls	r2, r3, #5
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	4413      	add	r3, r2
 8003c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	0151      	lsls	r1, r2, #5
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	440a      	add	r2, r1
 8003c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 8083 	beq.w	8003d86 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	2101      	movs	r1, #1
 8003c92:	fa01 f303 	lsl.w	r3, r1, r3
 8003c96:	6979      	ldr	r1, [r7, #20]
 8003c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	634b      	str	r3, [r1, #52]	; 0x34
 8003ca0:	e071      	b.n	8003d86 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	0151      	lsls	r1, r2, #5
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	440a      	add	r2, r1
 8003cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cbc:	0cdb      	lsrs	r3, r3, #19
 8003cbe:	04db      	lsls	r3, r3, #19
 8003cc0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	0151      	lsls	r1, r2, #5
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	440a      	add	r2, r1
 8003cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ce0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ce4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	0151      	lsls	r1, r2, #5
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	440a      	add	r2, r1
 8003d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d34:	6939      	ldr	r1, [r7, #16]
 8003d36:	0148      	lsls	r0, r1, #5
 8003d38:	6979      	ldr	r1, [r7, #20]
 8003d3a:	4401      	add	r1, r0
 8003d3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d40:	4313      	orrs	r3, r2
 8003d42:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d10d      	bne.n	8003d66 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	6919      	ldr	r1, [r3, #16]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d62:	460a      	mov	r2, r1
 8003d64:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	0151      	lsls	r1, r2, #5
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	440a      	add	r2, r1
 8003d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	371c      	adds	r7, #28
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b087      	sub	sp, #28
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	785b      	ldrb	r3, [r3, #1]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d14a      	bne.n	8003e48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dca:	f040 8086 	bne.w	8003eda <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	7812      	ldrb	r2, [r2, #0]
 8003de2:	0151      	lsls	r1, r2, #5
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	440a      	add	r2, r1
 8003de8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003df0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	683a      	ldr	r2, [r7, #0]
 8003e04:	7812      	ldrb	r2, [r2, #0]
 8003e06:	0151      	lsls	r1, r2, #5
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	440a      	add	r2, r1
 8003e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d902      	bls.n	8003e2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	75fb      	strb	r3, [r7, #23]
          break;
 8003e2a:	e056      	b.n	8003eda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e44:	d0e7      	beq.n	8003e16 <USB_EPStopXfer+0x82>
 8003e46:	e048      	b.n	8003eda <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e60:	d13b      	bne.n	8003eda <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	7812      	ldrb	r2, [r2, #0]
 8003e76:	0151      	lsls	r1, r2, #5
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	440a      	add	r2, r1
 8003e7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e80:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	7812      	ldrb	r2, [r2, #0]
 8003e9a:	0151      	lsls	r1, r2, #5
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ea8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	3301      	adds	r3, #1
 8003eae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d902      	bls.n	8003ec0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8003ebe:	e00c      	b.n	8003eda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ed8:	d0e7      	beq.n	8003eaa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b089      	sub	sp, #36	; 0x24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	71fb      	strb	r3, [r7, #7]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003f06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d123      	bne.n	8003f56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f0e:	88bb      	ldrh	r3, [r7, #4]
 8003f10:	3303      	adds	r3, #3
 8003f12:	089b      	lsrs	r3, r3, #2
 8003f14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	61bb      	str	r3, [r7, #24]
 8003f1a:	e018      	b.n	8003f4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	031a      	lsls	r2, r3, #12
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f28:	461a      	mov	r2, r3
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	3301      	adds	r3, #1
 8003f34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	3301      	adds	r3, #1
 8003f46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d3e2      	bcc.n	8003f1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3724      	adds	r7, #36	; 0x24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b08b      	sub	sp, #44	; 0x2c
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	089b      	lsrs	r3, r3, #2
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f82:	88fb      	ldrh	r3, [r7, #6]
 8003f84:	f003 0303 	and.w	r3, r3, #3
 8003f88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	623b      	str	r3, [r7, #32]
 8003f8e:	e014      	b.n	8003fba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	3301      	adds	r3, #1
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	623b      	str	r3, [r7, #32]
 8003fba:	6a3a      	ldr	r2, [r7, #32]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d3e6      	bcc.n	8003f90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003fc2:	8bfb      	ldrh	r3, [r7, #30]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d01e      	beq.n	8004006 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f107 0310 	add.w	r3, r7, #16
 8003fd8:	6812      	ldr	r2, [r2, #0]
 8003fda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	701a      	strb	r2, [r3, #0]
      i++;
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	623b      	str	r3, [r7, #32]
      pDest++;
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003ffa:	8bfb      	ldrh	r3, [r7, #30]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004000:	8bfb      	ldrh	r3, [r7, #30]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ea      	bne.n	8003fdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004008:	4618      	mov	r0, r3
 800400a:	372c      	adds	r7, #44	; 0x2c
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	785b      	ldrb	r3, [r3, #1]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d12c      	bne.n	800408a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	db12      	blt.n	8004068 <USB_EPSetStall+0x54>
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00f      	beq.n	8004068 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004062:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004066:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	0151      	lsls	r1, r2, #5
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	440a      	add	r2, r1
 800407e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004086:	6013      	str	r3, [r2, #0]
 8004088:	e02b      	b.n	80040e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	db12      	blt.n	80040c2 <USB_EPSetStall+0xae>
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00f      	beq.n	80040c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	0151      	lsls	r1, r2, #5
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	440a      	add	r2, r1
 80040b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	015a      	lsls	r2, r3, #5
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	0151      	lsls	r1, r2, #5
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	440a      	add	r2, r1
 80040d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d128      	bne.n	800415e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68ba      	ldr	r2, [r7, #8]
 800411c:	0151      	lsls	r1, r2, #5
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	440a      	add	r2, r1
 8004122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004126:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800412a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	791b      	ldrb	r3, [r3, #4]
 8004130:	2b03      	cmp	r3, #3
 8004132:	d003      	beq.n	800413c <USB_EPClearStall+0x4c>
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	791b      	ldrb	r3, [r3, #4]
 8004138:	2b02      	cmp	r3, #2
 800413a:	d138      	bne.n	80041ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	0151      	lsls	r1, r2, #5
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	440a      	add	r2, r1
 8004152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004156:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	e027      	b.n	80041ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	0151      	lsls	r1, r2, #5
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	440a      	add	r2, r1
 8004174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004178:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800417c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	791b      	ldrb	r3, [r3, #4]
 8004182:	2b03      	cmp	r3, #3
 8004184:	d003      	beq.n	800418e <USB_EPClearStall+0x9e>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	791b      	ldrb	r3, [r3, #4]
 800418a:	2b02      	cmp	r3, #2
 800418c:	d10f      	bne.n	80041ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68ba      	ldr	r2, [r7, #8]
 800419e:	0151      	lsls	r1, r2, #5
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	440a      	add	r2, r1
 80041a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3714      	adds	r7, #20
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041da:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	78fb      	ldrb	r3, [r7, #3]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80041f0:	68f9      	ldr	r1, [r7, #12]
 80041f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041f6:	4313      	orrs	r3, r2
 80041f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004208:	b480      	push	{r7}
 800420a:	b085      	sub	sp, #20
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004222:	f023 0303 	bic.w	r3, r3, #3
 8004226:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004236:	f023 0302 	bic.w	r3, r3, #2
 800423a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800424a:	b480      	push	{r7}
 800424c:	b085      	sub	sp, #20
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004264:	f023 0303 	bic.w	r3, r3, #3
 8004268:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	695b      	ldr	r3, [r3, #20]
 8004298:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4013      	ands	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80042a4:	68fb      	ldr	r3, [r7, #12]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b085      	sub	sp, #20
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	4013      	ands	r3, r2
 80042d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	0c1b      	lsrs	r3, r3, #16
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b085      	sub	sp, #20
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	4013      	ands	r3, r2
 8004308:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	b29b      	uxth	r3, r3
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800431a:	b480      	push	{r7}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	460b      	mov	r3, r1
 8004324:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	015a      	lsls	r2, r3, #5
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4413      	add	r3, r2
 8004332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	4013      	ands	r3, r2
 8004346:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004348:	68bb      	ldr	r3, [r7, #8]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004356:	b480      	push	{r7}
 8004358:	b087      	sub	sp, #28
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	460b      	mov	r3, r1
 8004360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004378:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	fa22 f303 	lsr.w	r3, r2, r3
 8004386:	01db      	lsls	r3, r3, #7
 8004388:	b2db      	uxtb	r3, r3
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4013      	ands	r3, r2
 80043a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043a4:	68bb      	ldr	r3, [r7, #8]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	371c      	adds	r7, #28
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f003 0301 	and.w	r3, r3, #1
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b085      	sub	sp, #20
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043ec:	f023 0307 	bic.w	r3, r3, #7
 80043f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004404:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	460b      	mov	r3, r1
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	333c      	adds	r3, #60	; 0x3c
 800442a:	3304      	adds	r3, #4
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4a26      	ldr	r2, [pc, #152]	; (80044cc <USB_EP0_OutStart+0xb8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d90a      	bls.n	800444e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004448:	d101      	bne.n	800444e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e037      	b.n	80044be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004454:	461a      	mov	r2, r3
 8004456:	2300      	movs	r3, #0
 8004458:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004468:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800446c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800447c:	f043 0318 	orr.w	r3, r3, #24
 8004480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004490:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004494:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004496:	7afb      	ldrb	r3, [r7, #11]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d10f      	bne.n	80044bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a2:	461a      	mov	r2, r3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80044ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	371c      	adds	r7, #28
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	4f54300a 	.word	0x4f54300a

080044d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3301      	adds	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4a13      	ldr	r2, [pc, #76]	; (8004534 <USB_CoreReset+0x64>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d901      	bls.n	80044ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e01b      	b.n	8004526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	daf2      	bge.n	80044dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f043 0201 	orr.w	r2, r3, #1
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	3301      	adds	r3, #1
 800450a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a09      	ldr	r2, [pc, #36]	; (8004534 <USB_CoreReset+0x64>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e006      	b.n	8004526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b01      	cmp	r3, #1
 8004522:	d0f0      	beq.n	8004506 <USB_CoreReset+0x36>

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	00030d40 	.word	0x00030d40

08004538 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004544:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004548:	f006 fb0e 	bl	800ab68 <USBD_static_malloc>
 800454c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d109      	bne.n	8004568 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	32b0      	adds	r2, #176	; 0xb0
 800455e:	2100      	movs	r1, #0
 8004560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004564:	2302      	movs	r3, #2
 8004566:	e0d4      	b.n	8004712 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004568:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800456c:	2100      	movs	r1, #0
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f006 fb72 	bl	800ac58 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	32b0      	adds	r2, #176	; 0xb0
 800457e:	68f9      	ldr	r1, [r7, #12]
 8004580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	32b0      	adds	r2, #176	; 0xb0
 800458e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	7c1b      	ldrb	r3, [r3, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d138      	bne.n	8004612 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80045a0:	4b5e      	ldr	r3, [pc, #376]	; (800471c <USBD_CDC_Init+0x1e4>)
 80045a2:	7819      	ldrb	r1, [r3, #0]
 80045a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045a8:	2202      	movs	r2, #2
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f006 f9b9 	bl	800a922 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80045b0:	4b5a      	ldr	r3, [pc, #360]	; (800471c <USBD_CDC_Init+0x1e4>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	f003 020f 	and.w	r2, r3, #15
 80045b8:	6879      	ldr	r1, [r7, #4]
 80045ba:	4613      	mov	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	3324      	adds	r3, #36	; 0x24
 80045c6:	2201      	movs	r2, #1
 80045c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80045ca:	4b55      	ldr	r3, [pc, #340]	; (8004720 <USBD_CDC_Init+0x1e8>)
 80045cc:	7819      	ldrb	r1, [r3, #0]
 80045ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045d2:	2202      	movs	r2, #2
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f006 f9a4 	bl	800a922 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80045da:	4b51      	ldr	r3, [pc, #324]	; (8004720 <USBD_CDC_Init+0x1e8>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	f003 020f 	and.w	r2, r3, #15
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80045f2:	2201      	movs	r2, #1
 80045f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80045f6:	4b4b      	ldr	r3, [pc, #300]	; (8004724 <USBD_CDC_Init+0x1ec>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	f003 020f 	and.w	r2, r3, #15
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	4613      	mov	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	3326      	adds	r3, #38	; 0x26
 800460c:	2210      	movs	r2, #16
 800460e:	801a      	strh	r2, [r3, #0]
 8004610:	e035      	b.n	800467e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004612:	4b42      	ldr	r3, [pc, #264]	; (800471c <USBD_CDC_Init+0x1e4>)
 8004614:	7819      	ldrb	r1, [r3, #0]
 8004616:	2340      	movs	r3, #64	; 0x40
 8004618:	2202      	movs	r2, #2
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f006 f981 	bl	800a922 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004620:	4b3e      	ldr	r3, [pc, #248]	; (800471c <USBD_CDC_Init+0x1e4>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	f003 020f 	and.w	r2, r3, #15
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	440b      	add	r3, r1
 8004634:	3324      	adds	r3, #36	; 0x24
 8004636:	2201      	movs	r2, #1
 8004638:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800463a:	4b39      	ldr	r3, [pc, #228]	; (8004720 <USBD_CDC_Init+0x1e8>)
 800463c:	7819      	ldrb	r1, [r3, #0]
 800463e:	2340      	movs	r3, #64	; 0x40
 8004640:	2202      	movs	r2, #2
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f006 f96d 	bl	800a922 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004648:	4b35      	ldr	r3, [pc, #212]	; (8004720 <USBD_CDC_Init+0x1e8>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	f003 020f 	and.w	r2, r3, #15
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	4613      	mov	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4413      	add	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	440b      	add	r3, r1
 800465c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004660:	2201      	movs	r2, #1
 8004662:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004664:	4b2f      	ldr	r3, [pc, #188]	; (8004724 <USBD_CDC_Init+0x1ec>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	f003 020f 	and.w	r2, r3, #15
 800466c:	6879      	ldr	r1, [r7, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	440b      	add	r3, r1
 8004678:	3326      	adds	r3, #38	; 0x26
 800467a:	2210      	movs	r2, #16
 800467c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800467e:	4b29      	ldr	r3, [pc, #164]	; (8004724 <USBD_CDC_Init+0x1ec>)
 8004680:	7819      	ldrb	r1, [r3, #0]
 8004682:	2308      	movs	r3, #8
 8004684:	2203      	movs	r2, #3
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f006 f94b 	bl	800a922 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800468c:	4b25      	ldr	r3, [pc, #148]	; (8004724 <USBD_CDC_Init+0x1ec>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	f003 020f 	and.w	r2, r3, #15
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	3324      	adds	r3, #36	; 0x24
 80046a2:	2201      	movs	r2, #1
 80046a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	33b0      	adds	r3, #176	; 0xb0
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d101      	bne.n	80046e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80046dc:	2302      	movs	r3, #2
 80046de:	e018      	b.n	8004712 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	7c1b      	ldrb	r3, [r3, #16]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046e8:	4b0d      	ldr	r3, [pc, #52]	; (8004720 <USBD_CDC_Init+0x1e8>)
 80046ea:	7819      	ldrb	r1, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80046f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f006 fa02 	bl	800ab00 <USBD_LL_PrepareReceive>
 80046fc:	e008      	b.n	8004710 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80046fe:	4b08      	ldr	r3, [pc, #32]	; (8004720 <USBD_CDC_Init+0x1e8>)
 8004700:	7819      	ldrb	r1, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004708:	2340      	movs	r3, #64	; 0x40
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f006 f9f8 	bl	800ab00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000093 	.word	0x20000093
 8004720:	20000094 	.word	0x20000094
 8004724:	20000095 	.word	0x20000095

08004728 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	460b      	mov	r3, r1
 8004732:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004734:	4b3a      	ldr	r3, [pc, #232]	; (8004820 <USBD_CDC_DeInit+0xf8>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	4619      	mov	r1, r3
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f006 f917 	bl	800a96e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004740:	4b37      	ldr	r3, [pc, #220]	; (8004820 <USBD_CDC_DeInit+0xf8>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	f003 020f 	and.w	r2, r3, #15
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	3324      	adds	r3, #36	; 0x24
 8004756:	2200      	movs	r2, #0
 8004758:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800475a:	4b32      	ldr	r3, [pc, #200]	; (8004824 <USBD_CDC_DeInit+0xfc>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	4619      	mov	r1, r3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f006 f904 	bl	800a96e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004766:	4b2f      	ldr	r3, [pc, #188]	; (8004824 <USBD_CDC_DeInit+0xfc>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	f003 020f 	and.w	r2, r3, #15
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800477e:	2200      	movs	r2, #0
 8004780:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004782:	4b29      	ldr	r3, [pc, #164]	; (8004828 <USBD_CDC_DeInit+0x100>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	4619      	mov	r1, r3
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f006 f8f0 	bl	800a96e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800478e:	4b26      	ldr	r3, [pc, #152]	; (8004828 <USBD_CDC_DeInit+0x100>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	f003 020f 	and.w	r2, r3, #15
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	3324      	adds	r3, #36	; 0x24
 80047a4:	2200      	movs	r2, #0
 80047a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80047a8:	4b1f      	ldr	r3, [pc, #124]	; (8004828 <USBD_CDC_DeInit+0x100>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	f003 020f 	and.w	r2, r3, #15
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	3326      	adds	r3, #38	; 0x26
 80047be:	2200      	movs	r2, #0
 80047c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	32b0      	adds	r2, #176	; 0xb0
 80047cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01f      	beq.n	8004814 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	33b0      	adds	r3, #176	; 0xb0
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	32b0      	adds	r2, #176	; 0xb0
 80047f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f006 f9c4 	bl	800ab84 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	32b0      	adds	r2, #176	; 0xb0
 8004806:	2100      	movs	r1, #0
 8004808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20000093 	.word	0x20000093
 8004824:	20000094 	.word	0x20000094
 8004828:	20000095 	.word	0x20000095

0800482c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	32b0      	adds	r2, #176	; 0xb0
 8004840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004844:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800484e:	2300      	movs	r3, #0
 8004850:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d101      	bne.n	800485c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004858:	2303      	movs	r3, #3
 800485a:	e0bf      	b.n	80049dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004864:	2b00      	cmp	r3, #0
 8004866:	d050      	beq.n	800490a <USBD_CDC_Setup+0xde>
 8004868:	2b20      	cmp	r3, #32
 800486a:	f040 80af 	bne.w	80049cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	88db      	ldrh	r3, [r3, #6]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d03a      	beq.n	80048ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	b25b      	sxtb	r3, r3
 800487c:	2b00      	cmp	r3, #0
 800487e:	da1b      	bge.n	80048b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	33b0      	adds	r3, #176	; 0xb0
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004896:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	88d2      	ldrh	r2, [r2, #6]
 800489c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	88db      	ldrh	r3, [r3, #6]
 80048a2:	2b07      	cmp	r3, #7
 80048a4:	bf28      	it	cs
 80048a6:	2307      	movcs	r3, #7
 80048a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	89fa      	ldrh	r2, [r7, #14]
 80048ae:	4619      	mov	r1, r3
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f001 fd89 	bl	80063c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80048b6:	e090      	b.n	80049da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	785a      	ldrb	r2, [r3, #1]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	88db      	ldrh	r3, [r3, #6]
 80048c6:	2b3f      	cmp	r3, #63	; 0x3f
 80048c8:	d803      	bhi.n	80048d2 <USBD_CDC_Setup+0xa6>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	88db      	ldrh	r3, [r3, #6]
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	e000      	b.n	80048d4 <USBD_CDC_Setup+0xa8>
 80048d2:	2240      	movs	r2, #64	; 0x40
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80048da:	6939      	ldr	r1, [r7, #16]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80048e2:	461a      	mov	r2, r3
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f001 fd9b 	bl	8006420 <USBD_CtlPrepareRx>
      break;
 80048ea:	e076      	b.n	80049da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	33b0      	adds	r3, #176	; 0xb0
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	7850      	ldrb	r0, [r2, #1]
 8004902:	2200      	movs	r2, #0
 8004904:	6839      	ldr	r1, [r7, #0]
 8004906:	4798      	blx	r3
      break;
 8004908:	e067      	b.n	80049da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	785b      	ldrb	r3, [r3, #1]
 800490e:	2b0b      	cmp	r3, #11
 8004910:	d851      	bhi.n	80049b6 <USBD_CDC_Setup+0x18a>
 8004912:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <USBD_CDC_Setup+0xec>)
 8004914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004918:	08004949 	.word	0x08004949
 800491c:	080049c5 	.word	0x080049c5
 8004920:	080049b7 	.word	0x080049b7
 8004924:	080049b7 	.word	0x080049b7
 8004928:	080049b7 	.word	0x080049b7
 800492c:	080049b7 	.word	0x080049b7
 8004930:	080049b7 	.word	0x080049b7
 8004934:	080049b7 	.word	0x080049b7
 8004938:	080049b7 	.word	0x080049b7
 800493c:	080049b7 	.word	0x080049b7
 8004940:	08004973 	.word	0x08004973
 8004944:	0800499d 	.word	0x0800499d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b03      	cmp	r3, #3
 8004952:	d107      	bne.n	8004964 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004954:	f107 030a 	add.w	r3, r7, #10
 8004958:	2202      	movs	r2, #2
 800495a:	4619      	mov	r1, r3
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f001 fd33 	bl	80063c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004962:	e032      	b.n	80049ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004964:	6839      	ldr	r1, [r7, #0]
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f001 fcbd 	bl	80062e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800496c:	2303      	movs	r3, #3
 800496e:	75fb      	strb	r3, [r7, #23]
          break;
 8004970:	e02b      	b.n	80049ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b03      	cmp	r3, #3
 800497c:	d107      	bne.n	800498e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800497e:	f107 030d 	add.w	r3, r7, #13
 8004982:	2201      	movs	r2, #1
 8004984:	4619      	mov	r1, r3
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f001 fd1e 	bl	80063c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800498c:	e01d      	b.n	80049ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800498e:	6839      	ldr	r1, [r7, #0]
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f001 fca8 	bl	80062e6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004996:	2303      	movs	r3, #3
 8004998:	75fb      	strb	r3, [r7, #23]
          break;
 800499a:	e016      	b.n	80049ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	d00f      	beq.n	80049c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80049a8:	6839      	ldr	r1, [r7, #0]
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f001 fc9b 	bl	80062e6 <USBD_CtlError>
            ret = USBD_FAIL;
 80049b0:	2303      	movs	r3, #3
 80049b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80049b4:	e008      	b.n	80049c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80049b6:	6839      	ldr	r1, [r7, #0]
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f001 fc94 	bl	80062e6 <USBD_CtlError>
          ret = USBD_FAIL;
 80049be:	2303      	movs	r3, #3
 80049c0:	75fb      	strb	r3, [r7, #23]
          break;
 80049c2:	e002      	b.n	80049ca <USBD_CDC_Setup+0x19e>
          break;
 80049c4:	bf00      	nop
 80049c6:	e008      	b.n	80049da <USBD_CDC_Setup+0x1ae>
          break;
 80049c8:	bf00      	nop
      }
      break;
 80049ca:	e006      	b.n	80049da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f001 fc89 	bl	80062e6 <USBD_CtlError>
      ret = USBD_FAIL;
 80049d4:	2303      	movs	r3, #3
 80049d6:	75fb      	strb	r3, [r7, #23]
      break;
 80049d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80049da:	7dfb      	ldrb	r3, [r7, #23]
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80049f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	32b0      	adds	r2, #176	; 0xb0
 8004a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e065      	b.n	8004ada <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	32b0      	adds	r2, #176	; 0xb0
 8004a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a1c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	f003 020f 	and.w	r2, r3, #15
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	4613      	mov	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	440b      	add	r3, r1
 8004a30:	3318      	adds	r3, #24
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02f      	beq.n	8004a98 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	f003 020f 	and.w	r2, r3, #15
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	3318      	adds	r3, #24
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	f003 010f 	and.w	r1, r3, #15
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	460b      	mov	r3, r1
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	440b      	add	r3, r1
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4403      	add	r3, r0
 8004a60:	3348      	adds	r3, #72	; 0x48
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	fbb2 f1f3 	udiv	r1, r2, r3
 8004a68:	fb01 f303 	mul.w	r3, r1, r3
 8004a6c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d112      	bne.n	8004a98 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004a72:	78fb      	ldrb	r3, [r7, #3]
 8004a74:	f003 020f 	and.w	r2, r3, #15
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	440b      	add	r3, r1
 8004a84:	3318      	adds	r3, #24
 8004a86:	2200      	movs	r2, #0
 8004a88:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004a8a:	78f9      	ldrb	r1, [r7, #3]
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	2200      	movs	r2, #0
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f006 f814 	bl	800aabe <USBD_LL_Transmit>
 8004a96:	e01f      	b.n	8004ad8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	33b0      	adds	r3, #176	; 0xb0
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	4413      	add	r3, r2
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d010      	beq.n	8004ad8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	33b0      	adds	r3, #176	; 0xb0
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004ad4:	78fa      	ldrb	r2, [r7, #3]
 8004ad6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b084      	sub	sp, #16
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
 8004aea:	460b      	mov	r3, r1
 8004aec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	32b0      	adds	r2, #176	; 0xb0
 8004af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004afc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	32b0      	adds	r2, #176	; 0xb0
 8004b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e01a      	b.n	8004b4a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	4619      	mov	r1, r3
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f006 f812 	bl	800ab42 <USBD_LL_GetRxDataSize>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	33b0      	adds	r3, #176	; 0xb0
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	4413      	add	r3, r2
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004b44:	4611      	mov	r1, r2
 8004b46:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004b48:	2300      	movs	r3, #0
}
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b084      	sub	sp, #16
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	32b0      	adds	r2, #176	; 0xb0
 8004b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e025      	b.n	8004bc0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	33b0      	adds	r3, #176	; 0xb0
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d01a      	beq.n	8004bbe <USBD_CDC_EP0_RxReady+0x6c>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004b8e:	2bff      	cmp	r3, #255	; 0xff
 8004b90:	d015      	beq.n	8004bbe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	33b0      	adds	r3, #176	; 0xb0
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004baa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004bb2:	b292      	uxth	r2, r2
 8004bb4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	22ff      	movs	r2, #255	; 0xff
 8004bba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004bd0:	2182      	movs	r1, #130	; 0x82
 8004bd2:	4818      	ldr	r0, [pc, #96]	; (8004c34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bd4:	f000 fd4f 	bl	8005676 <USBD_GetEpDesc>
 8004bd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004bda:	2101      	movs	r1, #1
 8004bdc:	4815      	ldr	r0, [pc, #84]	; (8004c34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004bde:	f000 fd4a 	bl	8005676 <USBD_GetEpDesc>
 8004be2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004be4:	2181      	movs	r1, #129	; 0x81
 8004be6:	4813      	ldr	r0, [pc, #76]	; (8004c34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004be8:	f000 fd45 	bl	8005676 <USBD_GetEpDesc>
 8004bec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2210      	movs	r2, #16
 8004bf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d006      	beq.n	8004c0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c08:	711a      	strb	r2, [r3, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d006      	beq.n	8004c22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c1c:	711a      	strb	r2, [r3, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2243      	movs	r2, #67	; 0x43
 8004c26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c28:	4b02      	ldr	r3, [pc, #8]	; (8004c34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000050 	.word	0x20000050

08004c38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c40:	2182      	movs	r1, #130	; 0x82
 8004c42:	4818      	ldr	r0, [pc, #96]	; (8004ca4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c44:	f000 fd17 	bl	8005676 <USBD_GetEpDesc>
 8004c48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	4815      	ldr	r0, [pc, #84]	; (8004ca4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c4e:	f000 fd12 	bl	8005676 <USBD_GetEpDesc>
 8004c52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c54:	2181      	movs	r1, #129	; 0x81
 8004c56:	4813      	ldr	r0, [pc, #76]	; (8004ca4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004c58:	f000 fd0d 	bl	8005676 <USBD_GetEpDesc>
 8004c5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2210      	movs	r2, #16
 8004c68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d006      	beq.n	8004c7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	2200      	movs	r2, #0
 8004c74:	711a      	strb	r2, [r3, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f042 0202 	orr.w	r2, r2, #2
 8004c7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d006      	beq.n	8004c92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	711a      	strb	r2, [r3, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f042 0202 	orr.w	r2, r2, #2
 8004c90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2243      	movs	r2, #67	; 0x43
 8004c96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c98:	4b02      	ldr	r3, [pc, #8]	; (8004ca4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	20000050 	.word	0x20000050

08004ca8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004cb0:	2182      	movs	r1, #130	; 0x82
 8004cb2:	4818      	ldr	r0, [pc, #96]	; (8004d14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004cb4:	f000 fcdf 	bl	8005676 <USBD_GetEpDesc>
 8004cb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004cba:	2101      	movs	r1, #1
 8004cbc:	4815      	ldr	r0, [pc, #84]	; (8004d14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004cbe:	f000 fcda 	bl	8005676 <USBD_GetEpDesc>
 8004cc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004cc4:	2181      	movs	r1, #129	; 0x81
 8004cc6:	4813      	ldr	r0, [pc, #76]	; (8004d14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004cc8:	f000 fcd5 	bl	8005676 <USBD_GetEpDesc>
 8004ccc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2210      	movs	r2, #16
 8004cd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d006      	beq.n	8004cee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce8:	711a      	strb	r2, [r3, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d006      	beq.n	8004d02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cfc:	711a      	strb	r2, [r3, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2243      	movs	r2, #67	; 0x43
 8004d06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004d08:	4b02      	ldr	r3, [pc, #8]	; (8004d14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	20000050 	.word	0x20000050

08004d18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	220a      	movs	r2, #10
 8004d24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004d26:	4b03      	ldr	r3, [pc, #12]	; (8004d34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	2000000c 	.word	0x2000000c

08004d38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d101      	bne.n	8004d4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e009      	b.n	8004d60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	33b0      	adds	r3, #176	; 0xb0
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	32b0      	adds	r2, #176	; 0xb0
 8004d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d86:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e008      	b.n	8004da4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	32b0      	adds	r2, #176	; 0xb0
 8004dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e004      	b.n	8004dde <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	32b0      	adds	r2, #176	; 0xb0
 8004dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e02:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	32b0      	adds	r2, #176	; 0xb0
 8004e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e025      	b.n	8004e6a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d11f      	bne.n	8004e68 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004e30:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <USBD_CDC_TransmitPacket+0x88>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	f003 020f 	and.w	r2, r3, #15
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4403      	add	r3, r0
 8004e4a:	3318      	adds	r3, #24
 8004e4c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <USBD_CDC_TransmitPacket+0x88>)
 8004e50:	7819      	ldrb	r1, [r3, #0]
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f005 fe2d 	bl	800aabe <USBD_LL_Transmit>

    ret = USBD_OK;
 8004e64:	2300      	movs	r3, #0
 8004e66:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000093 	.word	0x20000093

08004e78 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	32b0      	adds	r2, #176	; 0xb0
 8004e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	32b0      	adds	r2, #176	; 0xb0
 8004e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d101      	bne.n	8004ea6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e018      	b.n	8004ed8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	7c1b      	ldrb	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004eae:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <USBD_CDC_ReceivePacket+0x68>)
 8004eb0:	7819      	ldrb	r1, [r3, #0]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f005 fe1f 	bl	800ab00 <USBD_LL_PrepareReceive>
 8004ec2:	e008      	b.n	8004ed6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004ec4:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <USBD_CDC_ReceivePacket+0x68>)
 8004ec6:	7819      	ldrb	r1, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ece:	2340      	movs	r3, #64	; 0x40
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f005 fe15 	bl	800ab00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20000094 	.word	0x20000094

08004ee4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	4613      	mov	r3, r2
 8004ef0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e01f      	b.n	8004f3c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	79fa      	ldrb	r2, [r7, #7]
 8004f2e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f005 fc8f 	bl	800a854 <USBD_LL_Init>
 8004f36:	4603      	mov	r3, r0
 8004f38:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e025      	b.n	8004fa8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	32ae      	adds	r2, #174	; 0xae
 8004f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00f      	beq.n	8004f98 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	32ae      	adds	r2, #174	; 0xae
 8004f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	f107 020e 	add.w	r2, r7, #14
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4798      	blx	r3
 8004f90:	4602      	mov	r2, r0
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f005 fc97 	bl	800a8ec <USBD_LL_Start>
 8004fbe:	4603      	mov	r3, r0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fd0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr

08004fde <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d009      	beq.n	800500c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	78fa      	ldrb	r2, [r7, #3]
 8005002:	4611      	mov	r1, r2
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	4798      	blx	r3
 8005008:	4603      	mov	r3, r0
 800500a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b084      	sub	sp, #16
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	78fa      	ldrb	r2, [r7, #3]
 8005030:	4611      	mov	r1, r2
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	4798      	blx	r3
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800503c:	2303      	movs	r3, #3
 800503e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005040:	7bfb      	ldrb	r3, [r7, #15]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800505a:	6839      	ldr	r1, [r7, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f001 f908 	bl	8006272 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005070:	461a      	mov	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800507e:	f003 031f 	and.w	r3, r3, #31
 8005082:	2b02      	cmp	r3, #2
 8005084:	d01a      	beq.n	80050bc <USBD_LL_SetupStage+0x72>
 8005086:	2b02      	cmp	r3, #2
 8005088:	d822      	bhi.n	80050d0 <USBD_LL_SetupStage+0x86>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <USBD_LL_SetupStage+0x4a>
 800508e:	2b01      	cmp	r3, #1
 8005090:	d00a      	beq.n	80050a8 <USBD_LL_SetupStage+0x5e>
 8005092:	e01d      	b.n	80050d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800509a:	4619      	mov	r1, r3
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fb5f 	bl	8005760 <USBD_StdDevReq>
 80050a2:	4603      	mov	r3, r0
 80050a4:	73fb      	strb	r3, [r7, #15]
      break;
 80050a6:	e020      	b.n	80050ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 fbc7 	bl	8005844 <USBD_StdItfReq>
 80050b6:	4603      	mov	r3, r0
 80050b8:	73fb      	strb	r3, [r7, #15]
      break;
 80050ba:	e016      	b.n	80050ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fc29 	bl	800591c <USBD_StdEPReq>
 80050ca:	4603      	mov	r3, r0
 80050cc:	73fb      	strb	r3, [r7, #15]
      break;
 80050ce:	e00c      	b.n	80050ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	4619      	mov	r1, r3
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f005 fc64 	bl	800a9ac <USBD_LL_StallEP>
 80050e4:	4603      	mov	r3, r0
 80050e6:	73fb      	strb	r3, [r7, #15]
      break;
 80050e8:	bf00      	nop
  }

  return ret;
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	460b      	mov	r3, r1
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005106:	7afb      	ldrb	r3, [r7, #11]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d16e      	bne.n	80051ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005112:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800511a:	2b03      	cmp	r3, #3
 800511c:	f040 8098 	bne.w	8005250 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	429a      	cmp	r2, r3
 800512a:	d913      	bls.n	8005154 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	1ad2      	subs	r2, r2, r3
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	4293      	cmp	r3, r2
 8005144:	bf28      	it	cs
 8005146:	4613      	movcs	r3, r2
 8005148:	461a      	mov	r2, r3
 800514a:	6879      	ldr	r1, [r7, #4]
 800514c:	68f8      	ldr	r0, [r7, #12]
 800514e:	f001 f984 	bl	800645a <USBD_CtlContinueRx>
 8005152:	e07d      	b.n	8005250 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	2b02      	cmp	r3, #2
 8005160:	d014      	beq.n	800518c <USBD_LL_DataOutStage+0x98>
 8005162:	2b02      	cmp	r3, #2
 8005164:	d81d      	bhi.n	80051a2 <USBD_LL_DataOutStage+0xae>
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <USBD_LL_DataOutStage+0x7c>
 800516a:	2b01      	cmp	r3, #1
 800516c:	d003      	beq.n	8005176 <USBD_LL_DataOutStage+0x82>
 800516e:	e018      	b.n	80051a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	75bb      	strb	r3, [r7, #22]
            break;
 8005174:	e018      	b.n	80051a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800517c:	b2db      	uxtb	r3, r3
 800517e:	4619      	mov	r1, r3
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fa5e 	bl	8005642 <USBD_CoreFindIF>
 8005186:	4603      	mov	r3, r0
 8005188:	75bb      	strb	r3, [r7, #22]
            break;
 800518a:	e00d      	b.n	80051a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005192:	b2db      	uxtb	r3, r3
 8005194:	4619      	mov	r1, r3
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 fa60 	bl	800565c <USBD_CoreFindEP>
 800519c:	4603      	mov	r3, r0
 800519e:	75bb      	strb	r3, [r7, #22]
            break;
 80051a0:	e002      	b.n	80051a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	75bb      	strb	r3, [r7, #22]
            break;
 80051a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80051a8:	7dbb      	ldrb	r3, [r7, #22]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d119      	bne.n	80051e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d113      	bne.n	80051e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80051ba:	7dba      	ldrb	r2, [r7, #22]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	32ae      	adds	r2, #174	; 0xae
 80051c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80051ca:	7dba      	ldrb	r2, [r7, #22]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80051d2:	7dba      	ldrb	r2, [r7, #22]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	32ae      	adds	r2, #174	; 0xae
 80051d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	68f8      	ldr	r0, [r7, #12]
 80051e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f001 f94a 	bl	800647c <USBD_CtlSendStatus>
 80051e8:	e032      	b.n	8005250 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80051ea:	7afb      	ldrb	r3, [r7, #11]
 80051ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	4619      	mov	r1, r3
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 fa31 	bl	800565c <USBD_CoreFindEP>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051fe:	7dbb      	ldrb	r3, [r7, #22]
 8005200:	2bff      	cmp	r3, #255	; 0xff
 8005202:	d025      	beq.n	8005250 <USBD_LL_DataOutStage+0x15c>
 8005204:	7dbb      	ldrb	r3, [r7, #22]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d122      	bne.n	8005250 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b03      	cmp	r3, #3
 8005214:	d117      	bne.n	8005246 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005216:	7dba      	ldrb	r2, [r7, #22]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	32ae      	adds	r2, #174	; 0xae
 800521c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00f      	beq.n	8005246 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005226:	7dba      	ldrb	r2, [r7, #22]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800522e:	7dba      	ldrb	r2, [r7, #22]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	32ae      	adds	r2, #174	; 0xae
 8005234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	7afa      	ldrb	r2, [r7, #11]
 800523c:	4611      	mov	r1, r2
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	4798      	blx	r3
 8005242:	4603      	mov	r3, r0
 8005244:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005246:	7dfb      	ldrb	r3, [r7, #23]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800524c:	7dfb      	ldrb	r3, [r7, #23]
 800524e:	e000      	b.n	8005252 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}

0800525a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800525a:	b580      	push	{r7, lr}
 800525c:	b086      	sub	sp, #24
 800525e:	af00      	add	r7, sp, #0
 8005260:	60f8      	str	r0, [r7, #12]
 8005262:	460b      	mov	r3, r1
 8005264:	607a      	str	r2, [r7, #4]
 8005266:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005268:	7afb      	ldrb	r3, [r7, #11]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d16f      	bne.n	800534e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3314      	adds	r3, #20
 8005272:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800527a:	2b02      	cmp	r3, #2
 800527c:	d15a      	bne.n	8005334 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	429a      	cmp	r2, r3
 8005288:	d914      	bls.n	80052b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	689a      	ldr	r2, [r3, #8]
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	1ad2      	subs	r2, r2, r3
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	461a      	mov	r2, r3
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f001 f8ac 	bl	80063fe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052a6:	2300      	movs	r3, #0
 80052a8:	2200      	movs	r2, #0
 80052aa:	2100      	movs	r1, #0
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f005 fc27 	bl	800ab00 <USBD_LL_PrepareReceive>
 80052b2:	e03f      	b.n	8005334 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	68da      	ldr	r2, [r3, #12]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d11c      	bne.n	80052fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d316      	bcc.n	80052fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d20f      	bcs.n	80052fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80052da:	2200      	movs	r2, #0
 80052dc:	2100      	movs	r1, #0
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f001 f88d 	bl	80063fe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052ec:	2300      	movs	r3, #0
 80052ee:	2200      	movs	r2, #0
 80052f0:	2100      	movs	r1, #0
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f005 fc04 	bl	800ab00 <USBD_LL_PrepareReceive>
 80052f8:	e01c      	b.n	8005334 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b03      	cmp	r3, #3
 8005304:	d10f      	bne.n	8005326 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005326:	2180      	movs	r1, #128	; 0x80
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f005 fb3f 	bl	800a9ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f001 f8b7 	bl	80064a2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d03a      	beq.n	80053b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7ff fe42 	bl	8004fc8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800534c:	e032      	b.n	80053b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800534e:	7afb      	ldrb	r3, [r7, #11]
 8005350:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005354:	b2db      	uxtb	r3, r3
 8005356:	4619      	mov	r1, r3
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f97f 	bl	800565c <USBD_CoreFindEP>
 800535e:	4603      	mov	r3, r0
 8005360:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005362:	7dfb      	ldrb	r3, [r7, #23]
 8005364:	2bff      	cmp	r3, #255	; 0xff
 8005366:	d025      	beq.n	80053b4 <USBD_LL_DataInStage+0x15a>
 8005368:	7dfb      	ldrb	r3, [r7, #23]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d122      	bne.n	80053b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b03      	cmp	r3, #3
 8005378:	d11c      	bne.n	80053b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800537a:	7dfa      	ldrb	r2, [r7, #23]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	32ae      	adds	r2, #174	; 0xae
 8005380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d014      	beq.n	80053b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800538a:	7dfa      	ldrb	r2, [r7, #23]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005392:	7dfa      	ldrb	r2, [r7, #23]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	32ae      	adds	r2, #174	; 0xae
 8005398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	7afa      	ldrb	r2, [r7, #11]
 80053a0:	4611      	mov	r1, r2
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	4798      	blx	r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80053aa:	7dbb      	ldrb	r3, [r7, #22]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80053b0:	7dbb      	ldrb	r3, [r7, #22]
 80053b2:	e000      	b.n	80053b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b084      	sub	sp, #16
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d014      	beq.n	8005424 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00e      	beq.n	8005424 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6852      	ldr	r2, [r2, #4]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	4611      	mov	r1, r2
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	4798      	blx	r3
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005420:	2303      	movs	r3, #3
 8005422:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005424:	2340      	movs	r3, #64	; 0x40
 8005426:	2200      	movs	r2, #0
 8005428:	2100      	movs	r1, #0
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f005 fa79 	bl	800a922 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2240      	movs	r2, #64	; 0x40
 800543c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005440:	2340      	movs	r3, #64	; 0x40
 8005442:	2200      	movs	r2, #0
 8005444:	2180      	movs	r1, #128	; 0x80
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f005 fa6b 	bl	800a922 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2240      	movs	r2, #64	; 0x40
 8005456:	621a      	str	r2, [r3, #32]

  return ret;
 8005458:	7bfb      	ldrb	r3, [r7, #15]
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	460b      	mov	r3, r1
 800546c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005482:	b480      	push	{r7}
 8005484:	b083      	sub	sp, #12
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005490:	b2da      	uxtb	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2204      	movs	r2, #4
 800549c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b04      	cmp	r3, #4
 80054c0:	d106      	bne.n	80054d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b082      	sub	sp, #8
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d110      	bne.n	8005514 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00b      	beq.n	8005514 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3708      	adds	r7, #8
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	460b      	mov	r3, r1
 8005528:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	32ae      	adds	r2, #174	; 0xae
 8005534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800553c:	2303      	movs	r3, #3
 800553e:	e01c      	b.n	800557a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b03      	cmp	r3, #3
 800554a:	d115      	bne.n	8005578 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	32ae      	adds	r2, #174	; 0xae
 8005556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00b      	beq.n	8005578 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	32ae      	adds	r2, #174	; 0xae
 800556a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556e:	6a1b      	ldr	r3, [r3, #32]
 8005570:	78fa      	ldrb	r2, [r7, #3]
 8005572:	4611      	mov	r1, r2
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	32ae      	adds	r2, #174	; 0xae
 8005598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e01c      	b.n	80055de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d115      	bne.n	80055dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	32ae      	adds	r2, #174	; 0xae
 80055ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00b      	beq.n	80055dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	32ae      	adds	r2, #174	; 0xae
 80055ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	78fa      	ldrb	r2, [r7, #3]
 80055d6:	4611      	mov	r1, r2
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00e      	beq.n	8005638 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6852      	ldr	r2, [r2, #4]
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	4611      	mov	r1, r2
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	4798      	blx	r3
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d001      	beq.n	8005638 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005634:	2303      	movs	r3, #3
 8005636:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005638:	7bfb      	ldrb	r3, [r7, #15]
}
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	460b      	mov	r3, r1
 800564c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800564e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	460b      	mov	r3, r1
 8005666:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005668:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800566a:	4618      	mov	r0, r3
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	b086      	sub	sp, #24
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	460b      	mov	r3, r1
 8005680:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	885b      	ldrh	r3, [r3, #2]
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	b29b      	uxth	r3, r3
 800569a:	429a      	cmp	r2, r3
 800569c:	d920      	bls.n	80056e0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80056a6:	e013      	b.n	80056d0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80056a8:	f107 030a 	add.w	r3, r7, #10
 80056ac:	4619      	mov	r1, r3
 80056ae:	6978      	ldr	r0, [r7, #20]
 80056b0:	f000 f81b 	bl	80056ea <USBD_GetNextDesc>
 80056b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	785b      	ldrb	r3, [r3, #1]
 80056ba:	2b05      	cmp	r3, #5
 80056bc:	d108      	bne.n	80056d0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	789b      	ldrb	r3, [r3, #2]
 80056c6:	78fa      	ldrb	r2, [r7, #3]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d008      	beq.n	80056de <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80056cc:	2300      	movs	r3, #0
 80056ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	885b      	ldrh	r3, [r3, #2]
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	897b      	ldrh	r3, [r7, #10]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d8e5      	bhi.n	80056a8 <USBD_GetEpDesc+0x32>
 80056dc:	e000      	b.n	80056e0 <USBD_GetEpDesc+0x6a>
          break;
 80056de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80056e0:	693b      	ldr	r3, [r7, #16]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b085      	sub	sp, #20
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	881a      	ldrh	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	b29b      	uxth	r3, r3
 8005702:	4413      	add	r3, r2
 8005704:	b29a      	uxth	r2, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	461a      	mov	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4413      	add	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005716:	68fb      	ldr	r3, [r7, #12]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	3301      	adds	r3, #1
 800573a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005742:	8a3b      	ldrh	r3, [r7, #16]
 8005744:	021b      	lsls	r3, r3, #8
 8005746:	b21a      	sxth	r2, r3
 8005748:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800574c:	4313      	orrs	r3, r2
 800574e:	b21b      	sxth	r3, r3
 8005750:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005752:	89fb      	ldrh	r3, [r7, #14]
}
 8005754:	4618      	mov	r0, r3
 8005756:	371c      	adds	r7, #28
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005776:	2b40      	cmp	r3, #64	; 0x40
 8005778:	d005      	beq.n	8005786 <USBD_StdDevReq+0x26>
 800577a:	2b40      	cmp	r3, #64	; 0x40
 800577c:	d857      	bhi.n	800582e <USBD_StdDevReq+0xce>
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00f      	beq.n	80057a2 <USBD_StdDevReq+0x42>
 8005782:	2b20      	cmp	r3, #32
 8005784:	d153      	bne.n	800582e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	32ae      	adds	r2, #174	; 0xae
 8005790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	6839      	ldr	r1, [r7, #0]
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	4798      	blx	r3
 800579c:	4603      	mov	r3, r0
 800579e:	73fb      	strb	r3, [r7, #15]
      break;
 80057a0:	e04a      	b.n	8005838 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	785b      	ldrb	r3, [r3, #1]
 80057a6:	2b09      	cmp	r3, #9
 80057a8:	d83b      	bhi.n	8005822 <USBD_StdDevReq+0xc2>
 80057aa:	a201      	add	r2, pc, #4	; (adr r2, 80057b0 <USBD_StdDevReq+0x50>)
 80057ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b0:	08005805 	.word	0x08005805
 80057b4:	08005819 	.word	0x08005819
 80057b8:	08005823 	.word	0x08005823
 80057bc:	0800580f 	.word	0x0800580f
 80057c0:	08005823 	.word	0x08005823
 80057c4:	080057e3 	.word	0x080057e3
 80057c8:	080057d9 	.word	0x080057d9
 80057cc:	08005823 	.word	0x08005823
 80057d0:	080057fb 	.word	0x080057fb
 80057d4:	080057ed 	.word	0x080057ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80057d8:	6839      	ldr	r1, [r7, #0]
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fa3c 	bl	8005c58 <USBD_GetDescriptor>
          break;
 80057e0:	e024      	b.n	800582c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80057e2:	6839      	ldr	r1, [r7, #0]
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fba1 	bl	8005f2c <USBD_SetAddress>
          break;
 80057ea:	e01f      	b.n	800582c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80057ec:	6839      	ldr	r1, [r7, #0]
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 fbe0 	bl	8005fb4 <USBD_SetConfig>
 80057f4:	4603      	mov	r3, r0
 80057f6:	73fb      	strb	r3, [r7, #15]
          break;
 80057f8:	e018      	b.n	800582c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80057fa:	6839      	ldr	r1, [r7, #0]
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fc83 	bl	8006108 <USBD_GetConfig>
          break;
 8005802:	e013      	b.n	800582c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005804:	6839      	ldr	r1, [r7, #0]
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fcb4 	bl	8006174 <USBD_GetStatus>
          break;
 800580c:	e00e      	b.n	800582c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800580e:	6839      	ldr	r1, [r7, #0]
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fce3 	bl	80061dc <USBD_SetFeature>
          break;
 8005816:	e009      	b.n	800582c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fd07 	bl	800622e <USBD_ClrFeature>
          break;
 8005820:	e004      	b.n	800582c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005822:	6839      	ldr	r1, [r7, #0]
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fd5e 	bl	80062e6 <USBD_CtlError>
          break;
 800582a:	bf00      	nop
      }
      break;
 800582c:	e004      	b.n	8005838 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800582e:	6839      	ldr	r1, [r7, #0]
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fd58 	bl	80062e6 <USBD_CtlError>
      break;
 8005836:	bf00      	nop
  }

  return ret;
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3710      	adds	r7, #16
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop

08005844 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800584e:	2300      	movs	r3, #0
 8005850:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800585a:	2b40      	cmp	r3, #64	; 0x40
 800585c:	d005      	beq.n	800586a <USBD_StdItfReq+0x26>
 800585e:	2b40      	cmp	r3, #64	; 0x40
 8005860:	d852      	bhi.n	8005908 <USBD_StdItfReq+0xc4>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <USBD_StdItfReq+0x26>
 8005866:	2b20      	cmp	r3, #32
 8005868:	d14e      	bne.n	8005908 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005870:	b2db      	uxtb	r3, r3
 8005872:	3b01      	subs	r3, #1
 8005874:	2b02      	cmp	r3, #2
 8005876:	d840      	bhi.n	80058fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	889b      	ldrh	r3, [r3, #4]
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b01      	cmp	r3, #1
 8005880:	d836      	bhi.n	80058f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	889b      	ldrh	r3, [r3, #4]
 8005886:	b2db      	uxtb	r3, r3
 8005888:	4619      	mov	r1, r3
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff fed9 	bl	8005642 <USBD_CoreFindIF>
 8005890:	4603      	mov	r3, r0
 8005892:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	2bff      	cmp	r3, #255	; 0xff
 8005898:	d01d      	beq.n	80058d6 <USBD_StdItfReq+0x92>
 800589a:	7bbb      	ldrb	r3, [r7, #14]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11a      	bne.n	80058d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80058a0:	7bba      	ldrb	r2, [r7, #14]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	32ae      	adds	r2, #174	; 0xae
 80058a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00f      	beq.n	80058d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80058b0:	7bba      	ldrb	r2, [r7, #14]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80058b8:	7bba      	ldrb	r2, [r7, #14]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	32ae      	adds	r2, #174	; 0xae
 80058be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	4798      	blx	r3
 80058ca:	4603      	mov	r3, r0
 80058cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058ce:	e004      	b.n	80058da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80058d0:	2303      	movs	r3, #3
 80058d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058d4:	e001      	b.n	80058da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80058d6:	2303      	movs	r3, #3
 80058d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	88db      	ldrh	r3, [r3, #6]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d110      	bne.n	8005904 <USBD_StdItfReq+0xc0>
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10d      	bne.n	8005904 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fdc7 	bl	800647c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80058ee:	e009      	b.n	8005904 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fcf7 	bl	80062e6 <USBD_CtlError>
          break;
 80058f8:	e004      	b.n	8005904 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fcf2 	bl	80062e6 <USBD_CtlError>
          break;
 8005902:	e000      	b.n	8005906 <USBD_StdItfReq+0xc2>
          break;
 8005904:	bf00      	nop
      }
      break;
 8005906:	e004      	b.n	8005912 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005908:	6839      	ldr	r1, [r7, #0]
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fceb 	bl	80062e6 <USBD_CtlError>
      break;
 8005910:	bf00      	nop
  }

  return ret;
 8005912:	7bfb      	ldrb	r3, [r7, #15]
}
 8005914:	4618      	mov	r0, r3
 8005916:	3710      	adds	r7, #16
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005926:	2300      	movs	r3, #0
 8005928:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	889b      	ldrh	r3, [r3, #4]
 800592e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005938:	2b40      	cmp	r3, #64	; 0x40
 800593a:	d007      	beq.n	800594c <USBD_StdEPReq+0x30>
 800593c:	2b40      	cmp	r3, #64	; 0x40
 800593e:	f200 817f 	bhi.w	8005c40 <USBD_StdEPReq+0x324>
 8005942:	2b00      	cmp	r3, #0
 8005944:	d02a      	beq.n	800599c <USBD_StdEPReq+0x80>
 8005946:	2b20      	cmp	r3, #32
 8005948:	f040 817a 	bne.w	8005c40 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800594c:	7bbb      	ldrb	r3, [r7, #14]
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff fe83 	bl	800565c <USBD_CoreFindEP>
 8005956:	4603      	mov	r3, r0
 8005958:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800595a:	7b7b      	ldrb	r3, [r7, #13]
 800595c:	2bff      	cmp	r3, #255	; 0xff
 800595e:	f000 8174 	beq.w	8005c4a <USBD_StdEPReq+0x32e>
 8005962:	7b7b      	ldrb	r3, [r7, #13]
 8005964:	2b00      	cmp	r3, #0
 8005966:	f040 8170 	bne.w	8005c4a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800596a:	7b7a      	ldrb	r2, [r7, #13]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005972:	7b7a      	ldrb	r2, [r7, #13]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	32ae      	adds	r2, #174	; 0xae
 8005978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 8163 	beq.w	8005c4a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005984:	7b7a      	ldrb	r2, [r7, #13]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	32ae      	adds	r2, #174	; 0xae
 800598a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	4798      	blx	r3
 8005996:	4603      	mov	r3, r0
 8005998:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800599a:	e156      	b.n	8005c4a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	785b      	ldrb	r3, [r3, #1]
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d008      	beq.n	80059b6 <USBD_StdEPReq+0x9a>
 80059a4:	2b03      	cmp	r3, #3
 80059a6:	f300 8145 	bgt.w	8005c34 <USBD_StdEPReq+0x318>
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 809b 	beq.w	8005ae6 <USBD_StdEPReq+0x1ca>
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d03c      	beq.n	8005a2e <USBD_StdEPReq+0x112>
 80059b4:	e13e      	b.n	8005c34 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d002      	beq.n	80059c8 <USBD_StdEPReq+0xac>
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d016      	beq.n	80059f4 <USBD_StdEPReq+0xd8>
 80059c6:	e02c      	b.n	8005a22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059c8:	7bbb      	ldrb	r3, [r7, #14]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00d      	beq.n	80059ea <USBD_StdEPReq+0xce>
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
 80059d0:	2b80      	cmp	r3, #128	; 0x80
 80059d2:	d00a      	beq.n	80059ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80059d4:	7bbb      	ldrb	r3, [r7, #14]
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f004 ffe7 	bl	800a9ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80059de:	2180      	movs	r1, #128	; 0x80
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f004 ffe3 	bl	800a9ac <USBD_LL_StallEP>
 80059e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059e8:	e020      	b.n	8005a2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fc7a 	bl	80062e6 <USBD_CtlError>
              break;
 80059f2:	e01b      	b.n	8005a2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	885b      	ldrh	r3, [r3, #2]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10e      	bne.n	8005a1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80059fc:	7bbb      	ldrb	r3, [r7, #14]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00b      	beq.n	8005a1a <USBD_StdEPReq+0xfe>
 8005a02:	7bbb      	ldrb	r3, [r7, #14]
 8005a04:	2b80      	cmp	r3, #128	; 0x80
 8005a06:	d008      	beq.n	8005a1a <USBD_StdEPReq+0xfe>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	88db      	ldrh	r3, [r3, #6]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d104      	bne.n	8005a1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a10:	7bbb      	ldrb	r3, [r7, #14]
 8005a12:	4619      	mov	r1, r3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f004 ffc9 	bl	800a9ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fd2e 	bl	800647c <USBD_CtlSendStatus>

              break;
 8005a20:	e004      	b.n	8005a2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005a22:	6839      	ldr	r1, [r7, #0]
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fc5e 	bl	80062e6 <USBD_CtlError>
              break;
 8005a2a:	bf00      	nop
          }
          break;
 8005a2c:	e107      	b.n	8005c3e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d002      	beq.n	8005a40 <USBD_StdEPReq+0x124>
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d016      	beq.n	8005a6c <USBD_StdEPReq+0x150>
 8005a3e:	e04b      	b.n	8005ad8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a40:	7bbb      	ldrb	r3, [r7, #14]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00d      	beq.n	8005a62 <USBD_StdEPReq+0x146>
 8005a46:	7bbb      	ldrb	r3, [r7, #14]
 8005a48:	2b80      	cmp	r3, #128	; 0x80
 8005a4a:	d00a      	beq.n	8005a62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a4c:	7bbb      	ldrb	r3, [r7, #14]
 8005a4e:	4619      	mov	r1, r3
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f004 ffab 	bl	800a9ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a56:	2180      	movs	r1, #128	; 0x80
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f004 ffa7 	bl	800a9ac <USBD_LL_StallEP>
 8005a5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a60:	e040      	b.n	8005ae4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005a62:	6839      	ldr	r1, [r7, #0]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fc3e 	bl	80062e6 <USBD_CtlError>
              break;
 8005a6a:	e03b      	b.n	8005ae4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	885b      	ldrh	r3, [r3, #2]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d136      	bne.n	8005ae2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a74:	7bbb      	ldrb	r3, [r7, #14]
 8005a76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a7e:	7bbb      	ldrb	r3, [r7, #14]
 8005a80:	4619      	mov	r1, r3
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f004 ffb1 	bl	800a9ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fcf7 	bl	800647c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005a8e:	7bbb      	ldrb	r3, [r7, #14]
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f7ff fde2 	bl	800565c <USBD_CoreFindEP>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a9c:	7b7b      	ldrb	r3, [r7, #13]
 8005a9e:	2bff      	cmp	r3, #255	; 0xff
 8005aa0:	d01f      	beq.n	8005ae2 <USBD_StdEPReq+0x1c6>
 8005aa2:	7b7b      	ldrb	r3, [r7, #13]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d11c      	bne.n	8005ae2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005aa8:	7b7a      	ldrb	r2, [r7, #13]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005ab0:	7b7a      	ldrb	r2, [r7, #13]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	32ae      	adds	r2, #174	; 0xae
 8005ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d010      	beq.n	8005ae2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005ac0:	7b7a      	ldrb	r2, [r7, #13]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	32ae      	adds	r2, #174	; 0xae
 8005ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	4798      	blx	r3
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005ad6:	e004      	b.n	8005ae2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fc03 	bl	80062e6 <USBD_CtlError>
              break;
 8005ae0:	e000      	b.n	8005ae4 <USBD_StdEPReq+0x1c8>
              break;
 8005ae2:	bf00      	nop
          }
          break;
 8005ae4:	e0ab      	b.n	8005c3e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d002      	beq.n	8005af8 <USBD_StdEPReq+0x1dc>
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	d032      	beq.n	8005b5c <USBD_StdEPReq+0x240>
 8005af6:	e097      	b.n	8005c28 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005af8:	7bbb      	ldrb	r3, [r7, #14]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d007      	beq.n	8005b0e <USBD_StdEPReq+0x1f2>
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	2b80      	cmp	r3, #128	; 0x80
 8005b02:	d004      	beq.n	8005b0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fbed 	bl	80062e6 <USBD_CtlError>
                break;
 8005b0c:	e091      	b.n	8005c32 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	da0b      	bge.n	8005b2e <USBD_StdEPReq+0x212>
 8005b16:	7bbb      	ldrb	r3, [r7, #14]
 8005b18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	3310      	adds	r3, #16
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	4413      	add	r3, r2
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	e00b      	b.n	8005b46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b2e:	7bbb      	ldrb	r3, [r7, #14]
 8005b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	4413      	add	r3, r2
 8005b44:	3304      	adds	r3, #4
 8005b46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2202      	movs	r2, #2
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fc37 	bl	80063c8 <USBD_CtlSendData>
              break;
 8005b5a:	e06a      	b.n	8005c32 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	da11      	bge.n	8005b88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b64:	7bbb      	ldrb	r3, [r7, #14]
 8005b66:	f003 020f 	and.w	r2, r3, #15
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	3324      	adds	r3, #36	; 0x24
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d117      	bne.n	8005bae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b7e:	6839      	ldr	r1, [r7, #0]
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fbb0 	bl	80062e6 <USBD_CtlError>
                  break;
 8005b86:	e054      	b.n	8005c32 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b88:	7bbb      	ldrb	r3, [r7, #14]
 8005b8a:	f003 020f 	and.w	r2, r3, #15
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	440b      	add	r3, r1
 8005b9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d104      	bne.n	8005bae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fb9d 	bl	80062e6 <USBD_CtlError>
                  break;
 8005bac:	e041      	b.n	8005c32 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	da0b      	bge.n	8005bce <USBD_StdEPReq+0x2b2>
 8005bb6:	7bbb      	ldrb	r3, [r7, #14]
 8005bb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	3310      	adds	r3, #16
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4413      	add	r3, r2
 8005bca:	3304      	adds	r3, #4
 8005bcc:	e00b      	b.n	8005be6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bce:	7bbb      	ldrb	r3, [r7, #14]
 8005bd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	4413      	add	r3, r2
 8005be4:	3304      	adds	r3, #4
 8005be6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <USBD_StdEPReq+0x2d8>
 8005bee:	7bbb      	ldrb	r3, [r7, #14]
 8005bf0:	2b80      	cmp	r3, #128	; 0x80
 8005bf2:	d103      	bne.n	8005bfc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
 8005bfa:	e00e      	b.n	8005c1a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005bfc:	7bbb      	ldrb	r3, [r7, #14]
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f004 ff11 	bl	800aa28 <USBD_LL_IsStallEP>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	e002      	b.n	8005c1a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2200      	movs	r2, #0
 8005c18:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fbd1 	bl	80063c8 <USBD_CtlSendData>
              break;
 8005c26:	e004      	b.n	8005c32 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005c28:	6839      	ldr	r1, [r7, #0]
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fb5b 	bl	80062e6 <USBD_CtlError>
              break;
 8005c30:	bf00      	nop
          }
          break;
 8005c32:	e004      	b.n	8005c3e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 fb55 	bl	80062e6 <USBD_CtlError>
          break;
 8005c3c:	bf00      	nop
      }
      break;
 8005c3e:	e005      	b.n	8005c4c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f000 fb4f 	bl	80062e6 <USBD_CtlError>
      break;
 8005c48:	e000      	b.n	8005c4c <USBD_StdEPReq+0x330>
      break;
 8005c4a:	bf00      	nop
  }

  return ret;
 8005c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	885b      	ldrh	r3, [r3, #2]
 8005c72:	0a1b      	lsrs	r3, r3, #8
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	2b06      	cmp	r3, #6
 8005c7a:	f200 8128 	bhi.w	8005ece <USBD_GetDescriptor+0x276>
 8005c7e:	a201      	add	r2, pc, #4	; (adr r2, 8005c84 <USBD_GetDescriptor+0x2c>)
 8005c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c84:	08005ca1 	.word	0x08005ca1
 8005c88:	08005cb9 	.word	0x08005cb9
 8005c8c:	08005cf9 	.word	0x08005cf9
 8005c90:	08005ecf 	.word	0x08005ecf
 8005c94:	08005ecf 	.word	0x08005ecf
 8005c98:	08005e6f 	.word	0x08005e6f
 8005c9c:	08005e9b 	.word	0x08005e9b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	7c12      	ldrb	r2, [r2, #16]
 8005cac:	f107 0108 	add.w	r1, r7, #8
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4798      	blx	r3
 8005cb4:	60f8      	str	r0, [r7, #12]
      break;
 8005cb6:	e112      	b.n	8005ede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	7c1b      	ldrb	r3, [r3, #16]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10d      	bne.n	8005cdc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc8:	f107 0208 	add.w	r2, r7, #8
 8005ccc:	4610      	mov	r0, r2
 8005cce:	4798      	blx	r3
 8005cd0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	2202      	movs	r2, #2
 8005cd8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005cda:	e100      	b.n	8005ede <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	f107 0208 	add.w	r2, r7, #8
 8005ce8:	4610      	mov	r0, r2
 8005cea:	4798      	blx	r3
 8005cec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	701a      	strb	r2, [r3, #0]
      break;
 8005cf6:	e0f2      	b.n	8005ede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	885b      	ldrh	r3, [r3, #2]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b05      	cmp	r3, #5
 8005d00:	f200 80ac 	bhi.w	8005e5c <USBD_GetDescriptor+0x204>
 8005d04:	a201      	add	r2, pc, #4	; (adr r2, 8005d0c <USBD_GetDescriptor+0xb4>)
 8005d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0a:	bf00      	nop
 8005d0c:	08005d25 	.word	0x08005d25
 8005d10:	08005d59 	.word	0x08005d59
 8005d14:	08005d8d 	.word	0x08005d8d
 8005d18:	08005dc1 	.word	0x08005dc1
 8005d1c:	08005df5 	.word	0x08005df5
 8005d20:	08005e29 	.word	0x08005e29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00b      	beq.n	8005d48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	7c12      	ldrb	r2, [r2, #16]
 8005d3c:	f107 0108 	add.w	r1, r7, #8
 8005d40:	4610      	mov	r0, r2
 8005d42:	4798      	blx	r3
 8005d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d46:	e091      	b.n	8005e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 facb 	bl	80062e6 <USBD_CtlError>
            err++;
 8005d50:	7afb      	ldrb	r3, [r7, #11]
 8005d52:	3301      	adds	r3, #1
 8005d54:	72fb      	strb	r3, [r7, #11]
          break;
 8005d56:	e089      	b.n	8005e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00b      	beq.n	8005d7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	7c12      	ldrb	r2, [r2, #16]
 8005d70:	f107 0108 	add.w	r1, r7, #8
 8005d74:	4610      	mov	r0, r2
 8005d76:	4798      	blx	r3
 8005d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d7a:	e077      	b.n	8005e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d7c:	6839      	ldr	r1, [r7, #0]
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fab1 	bl	80062e6 <USBD_CtlError>
            err++;
 8005d84:	7afb      	ldrb	r3, [r7, #11]
 8005d86:	3301      	adds	r3, #1
 8005d88:	72fb      	strb	r3, [r7, #11]
          break;
 8005d8a:	e06f      	b.n	8005e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d00b      	beq.n	8005db0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	7c12      	ldrb	r2, [r2, #16]
 8005da4:	f107 0108 	add.w	r1, r7, #8
 8005da8:	4610      	mov	r0, r2
 8005daa:	4798      	blx	r3
 8005dac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dae:	e05d      	b.n	8005e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005db0:	6839      	ldr	r1, [r7, #0]
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 fa97 	bl	80062e6 <USBD_CtlError>
            err++;
 8005db8:	7afb      	ldrb	r3, [r7, #11]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	72fb      	strb	r3, [r7, #11]
          break;
 8005dbe:	e055      	b.n	8005e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00b      	beq.n	8005de4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dd2:	691b      	ldr	r3, [r3, #16]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	7c12      	ldrb	r2, [r2, #16]
 8005dd8:	f107 0108 	add.w	r1, r7, #8
 8005ddc:	4610      	mov	r0, r2
 8005dde:	4798      	blx	r3
 8005de0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005de2:	e043      	b.n	8005e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fa7d 	bl	80062e6 <USBD_CtlError>
            err++;
 8005dec:	7afb      	ldrb	r3, [r7, #11]
 8005dee:	3301      	adds	r3, #1
 8005df0:	72fb      	strb	r3, [r7, #11]
          break;
 8005df2:	e03b      	b.n	8005e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00b      	beq.n	8005e18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	7c12      	ldrb	r2, [r2, #16]
 8005e0c:	f107 0108 	add.w	r1, r7, #8
 8005e10:	4610      	mov	r0, r2
 8005e12:	4798      	blx	r3
 8005e14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e16:	e029      	b.n	8005e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fa63 	bl	80062e6 <USBD_CtlError>
            err++;
 8005e20:	7afb      	ldrb	r3, [r7, #11]
 8005e22:	3301      	adds	r3, #1
 8005e24:	72fb      	strb	r3, [r7, #11]
          break;
 8005e26:	e021      	b.n	8005e6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	7c12      	ldrb	r2, [r2, #16]
 8005e40:	f107 0108 	add.w	r1, r7, #8
 8005e44:	4610      	mov	r0, r2
 8005e46:	4798      	blx	r3
 8005e48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e4a:	e00f      	b.n	8005e6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e4c:	6839      	ldr	r1, [r7, #0]
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fa49 	bl	80062e6 <USBD_CtlError>
            err++;
 8005e54:	7afb      	ldrb	r3, [r7, #11]
 8005e56:	3301      	adds	r3, #1
 8005e58:	72fb      	strb	r3, [r7, #11]
          break;
 8005e5a:	e007      	b.n	8005e6c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa41 	bl	80062e6 <USBD_CtlError>
          err++;
 8005e64:	7afb      	ldrb	r3, [r7, #11]
 8005e66:	3301      	adds	r3, #1
 8005e68:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005e6a:	bf00      	nop
      }
      break;
 8005e6c:	e037      	b.n	8005ede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	7c1b      	ldrb	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d109      	bne.n	8005e8a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e7e:	f107 0208 	add.w	r2, r7, #8
 8005e82:	4610      	mov	r0, r2
 8005e84:	4798      	blx	r3
 8005e86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e88:	e029      	b.n	8005ede <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fa2a 	bl	80062e6 <USBD_CtlError>
        err++;
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	3301      	adds	r3, #1
 8005e96:	72fb      	strb	r3, [r7, #11]
      break;
 8005e98:	e021      	b.n	8005ede <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	7c1b      	ldrb	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10d      	bne.n	8005ebe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	f107 0208 	add.w	r2, r7, #8
 8005eae:	4610      	mov	r0, r2
 8005eb0:	4798      	blx	r3
 8005eb2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	2207      	movs	r2, #7
 8005eba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ebc:	e00f      	b.n	8005ede <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ebe:	6839      	ldr	r1, [r7, #0]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fa10 	bl	80062e6 <USBD_CtlError>
        err++;
 8005ec6:	7afb      	ldrb	r3, [r7, #11]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	72fb      	strb	r3, [r7, #11]
      break;
 8005ecc:	e007      	b.n	8005ede <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fa08 	bl	80062e6 <USBD_CtlError>
      err++;
 8005ed6:	7afb      	ldrb	r3, [r7, #11]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	72fb      	strb	r3, [r7, #11]
      break;
 8005edc:	bf00      	nop
  }

  if (err != 0U)
 8005ede:	7afb      	ldrb	r3, [r7, #11]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d11e      	bne.n	8005f22 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	88db      	ldrh	r3, [r3, #6]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d016      	beq.n	8005f1a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005eec:	893b      	ldrh	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00e      	beq.n	8005f10 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	88da      	ldrh	r2, [r3, #6]
 8005ef6:	893b      	ldrh	r3, [r7, #8]
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	bf28      	it	cs
 8005efc:	4613      	movcs	r3, r2
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f02:	893b      	ldrh	r3, [r7, #8]
 8005f04:	461a      	mov	r2, r3
 8005f06:	68f9      	ldr	r1, [r7, #12]
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fa5d 	bl	80063c8 <USBD_CtlSendData>
 8005f0e:	e009      	b.n	8005f24 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005f10:	6839      	ldr	r1, [r7, #0]
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 f9e7 	bl	80062e6 <USBD_CtlError>
 8005f18:	e004      	b.n	8005f24 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 faae 	bl	800647c <USBD_CtlSendStatus>
 8005f20:	e000      	b.n	8005f24 <USBD_GetDescriptor+0x2cc>
    return;
 8005f22:	bf00      	nop
  }
}
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop

08005f2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	889b      	ldrh	r3, [r3, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d131      	bne.n	8005fa2 <USBD_SetAddress+0x76>
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	88db      	ldrh	r3, [r3, #6]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d12d      	bne.n	8005fa2 <USBD_SetAddress+0x76>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	885b      	ldrh	r3, [r3, #2]
 8005f4a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f4c:	d829      	bhi.n	8005fa2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	885b      	ldrh	r3, [r3, #2]
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d104      	bne.n	8005f70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f66:	6839      	ldr	r1, [r7, #0]
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 f9bc 	bl	80062e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6e:	e01d      	b.n	8005fac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	7bfa      	ldrb	r2, [r7, #15]
 8005f74:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f004 fd7f 	bl	800aa80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fa7a 	bl	800647c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d004      	beq.n	8005f98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f96:	e009      	b.n	8005fac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa0:	e004      	b.n	8005fac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005fa2:	6839      	ldr	r1, [r7, #0]
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f99e 	bl	80062e6 <USBD_CtlError>
  }
}
 8005faa:	bf00      	nop
 8005fac:	bf00      	nop
 8005fae:	3710      	adds	r7, #16
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b084      	sub	sp, #16
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	885b      	ldrh	r3, [r3, #2]
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	4b4e      	ldr	r3, [pc, #312]	; (8006104 <USBD_SetConfig+0x150>)
 8005fca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fcc:	4b4d      	ldr	r3, [pc, #308]	; (8006104 <USBD_SetConfig+0x150>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d905      	bls.n	8005fe0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f985 	bl	80062e6 <USBD_CtlError>
    return USBD_FAIL;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	e08c      	b.n	80060fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d002      	beq.n	8005ff2 <USBD_SetConfig+0x3e>
 8005fec:	2b03      	cmp	r3, #3
 8005fee:	d029      	beq.n	8006044 <USBD_SetConfig+0x90>
 8005ff0:	e075      	b.n	80060de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005ff2:	4b44      	ldr	r3, [pc, #272]	; (8006104 <USBD_SetConfig+0x150>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d020      	beq.n	800603c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005ffa:	4b42      	ldr	r3, [pc, #264]	; (8006104 <USBD_SetConfig+0x150>)
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006004:	4b3f      	ldr	r3, [pc, #252]	; (8006104 <USBD_SetConfig+0x150>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fe ffe7 	bl	8004fde <USBD_SetClassConfig>
 8006010:	4603      	mov	r3, r0
 8006012:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d008      	beq.n	800602c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f962 	bl	80062e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2202      	movs	r2, #2
 8006026:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800602a:	e065      	b.n	80060f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fa25 	bl	800647c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2203      	movs	r2, #3
 8006036:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800603a:	e05d      	b.n	80060f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fa1d 	bl	800647c <USBD_CtlSendStatus>
      break;
 8006042:	e059      	b.n	80060f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006044:	4b2f      	ldr	r3, [pc, #188]	; (8006104 <USBD_SetConfig+0x150>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d112      	bne.n	8006072 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006054:	4b2b      	ldr	r3, [pc, #172]	; (8006104 <USBD_SetConfig+0x150>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800605e:	4b29      	ldr	r3, [pc, #164]	; (8006104 <USBD_SetConfig+0x150>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7fe ffd6 	bl	8005016 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fa06 	bl	800647c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006070:	e042      	b.n	80060f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006072:	4b24      	ldr	r3, [pc, #144]	; (8006104 <USBD_SetConfig+0x150>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	429a      	cmp	r2, r3
 800607e:	d02a      	beq.n	80060d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	b2db      	uxtb	r3, r3
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7fe ffc4 	bl	8005016 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800608e:	4b1d      	ldr	r3, [pc, #116]	; (8006104 <USBD_SetConfig+0x150>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	461a      	mov	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006098:	4b1a      	ldr	r3, [pc, #104]	; (8006104 <USBD_SetConfig+0x150>)
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7fe ff9d 	bl	8004fde <USBD_SetClassConfig>
 80060a4:	4603      	mov	r3, r0
 80060a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d00f      	beq.n	80060ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80060ae:	6839      	ldr	r1, [r7, #0]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f918 	bl	80062e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	4619      	mov	r1, r3
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fe ffa9 	bl	8005016 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80060cc:	e014      	b.n	80060f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f9d4 	bl	800647c <USBD_CtlSendStatus>
      break;
 80060d4:	e010      	b.n	80060f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f9d0 	bl	800647c <USBD_CtlSendStatus>
      break;
 80060dc:	e00c      	b.n	80060f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80060de:	6839      	ldr	r1, [r7, #0]
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f900 	bl	80062e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060e6:	4b07      	ldr	r3, [pc, #28]	; (8006104 <USBD_SetConfig+0x150>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f7fe ff92 	bl	8005016 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80060f2:	2303      	movs	r3, #3
 80060f4:	73fb      	strb	r3, [r7, #15]
      break;
 80060f6:	bf00      	nop
  }

  return ret;
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20000194 	.word	0x20000194

08006108 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	88db      	ldrh	r3, [r3, #6]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d004      	beq.n	8006124 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f8e2 	bl	80062e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006122:	e023      	b.n	800616c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800612a:	b2db      	uxtb	r3, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	dc02      	bgt.n	8006136 <USBD_GetConfig+0x2e>
 8006130:	2b00      	cmp	r3, #0
 8006132:	dc03      	bgt.n	800613c <USBD_GetConfig+0x34>
 8006134:	e015      	b.n	8006162 <USBD_GetConfig+0x5a>
 8006136:	2b03      	cmp	r3, #3
 8006138:	d00b      	beq.n	8006152 <USBD_GetConfig+0x4a>
 800613a:	e012      	b.n	8006162 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3308      	adds	r3, #8
 8006146:	2201      	movs	r2, #1
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f93c 	bl	80063c8 <USBD_CtlSendData>
        break;
 8006150:	e00c      	b.n	800616c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3304      	adds	r3, #4
 8006156:	2201      	movs	r2, #1
 8006158:	4619      	mov	r1, r3
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f934 	bl	80063c8 <USBD_CtlSendData>
        break;
 8006160:	e004      	b.n	800616c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f000 f8be 	bl	80062e6 <USBD_CtlError>
        break;
 800616a:	bf00      	nop
}
 800616c:	bf00      	nop
 800616e:	3708      	adds	r7, #8
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006184:	b2db      	uxtb	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	2b02      	cmp	r3, #2
 800618a:	d81e      	bhi.n	80061ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	88db      	ldrh	r3, [r3, #6]
 8006190:	2b02      	cmp	r3, #2
 8006192:	d004      	beq.n	800619e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006194:	6839      	ldr	r1, [r7, #0]
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f8a5 	bl	80062e6 <USBD_CtlError>
        break;
 800619c:	e01a      	b.n	80061d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d005      	beq.n	80061ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	f043 0202 	orr.w	r2, r3, #2
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	330c      	adds	r3, #12
 80061be:	2202      	movs	r2, #2
 80061c0:	4619      	mov	r1, r3
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f900 	bl	80063c8 <USBD_CtlSendData>
      break;
 80061c8:	e004      	b.n	80061d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80061ca:	6839      	ldr	r1, [r7, #0]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f88a 	bl	80062e6 <USBD_CtlError>
      break;
 80061d2:	bf00      	nop
  }
}
 80061d4:	bf00      	nop
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	885b      	ldrh	r3, [r3, #2]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d107      	bne.n	80061fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f940 	bl	800647c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80061fc:	e013      	b.n	8006226 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	885b      	ldrh	r3, [r3, #2]
 8006202:	2b02      	cmp	r3, #2
 8006204:	d10b      	bne.n	800621e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	889b      	ldrh	r3, [r3, #4]
 800620a:	0a1b      	lsrs	r3, r3, #8
 800620c:	b29b      	uxth	r3, r3
 800620e:	b2da      	uxtb	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f930 	bl	800647c <USBD_CtlSendStatus>
}
 800621c:	e003      	b.n	8006226 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800621e:	6839      	ldr	r1, [r7, #0]
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f860 	bl	80062e6 <USBD_CtlError>
}
 8006226:	bf00      	nop
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b082      	sub	sp, #8
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800623e:	b2db      	uxtb	r3, r3
 8006240:	3b01      	subs	r3, #1
 8006242:	2b02      	cmp	r3, #2
 8006244:	d80b      	bhi.n	800625e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	885b      	ldrh	r3, [r3, #2]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d10c      	bne.n	8006268 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 f910 	bl	800647c <USBD_CtlSendStatus>
      }
      break;
 800625c:	e004      	b.n	8006268 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 f840 	bl	80062e6 <USBD_CtlError>
      break;
 8006266:	e000      	b.n	800626a <USBD_ClrFeature+0x3c>
      break;
 8006268:	bf00      	nop
  }
}
 800626a:	bf00      	nop
 800626c:	3708      	adds	r7, #8
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	781a      	ldrb	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3301      	adds	r3, #1
 800628c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	781a      	ldrb	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3301      	adds	r3, #1
 800629a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f7ff fa41 	bl	8005724 <SWAPBYTE>
 80062a2:	4603      	mov	r3, r0
 80062a4:	461a      	mov	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3301      	adds	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff fa34 	bl	8005724 <SWAPBYTE>
 80062bc:	4603      	mov	r3, r0
 80062be:	461a      	mov	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	3301      	adds	r3, #1
 80062c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3301      	adds	r3, #1
 80062ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80062d0:	68f8      	ldr	r0, [r7, #12]
 80062d2:	f7ff fa27 	bl	8005724 <SWAPBYTE>
 80062d6:	4603      	mov	r3, r0
 80062d8:	461a      	mov	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	80da      	strh	r2, [r3, #6]
}
 80062de:	bf00      	nop
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
 80062ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80062f0:	2180      	movs	r1, #128	; 0x80
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f004 fb5a 	bl	800a9ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062f8:	2100      	movs	r1, #0
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f004 fb56 	bl	800a9ac <USBD_LL_StallEP>
}
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006314:	2300      	movs	r3, #0
 8006316:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d036      	beq.n	800638c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006322:	6938      	ldr	r0, [r7, #16]
 8006324:	f000 f836 	bl	8006394 <USBD_GetLen>
 8006328:	4603      	mov	r3, r0
 800632a:	3301      	adds	r3, #1
 800632c:	b29b      	uxth	r3, r3
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006336:	7dfb      	ldrb	r3, [r7, #23]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	4413      	add	r3, r2
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	7812      	ldrb	r2, [r2, #0]
 8006340:	701a      	strb	r2, [r3, #0]
  idx++;
 8006342:	7dfb      	ldrb	r3, [r7, #23]
 8006344:	3301      	adds	r3, #1
 8006346:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	4413      	add	r3, r2
 800634e:	2203      	movs	r2, #3
 8006350:	701a      	strb	r2, [r3, #0]
  idx++;
 8006352:	7dfb      	ldrb	r3, [r7, #23]
 8006354:	3301      	adds	r3, #1
 8006356:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006358:	e013      	b.n	8006382 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800635a:	7dfb      	ldrb	r3, [r7, #23]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	4413      	add	r3, r2
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	7812      	ldrb	r2, [r2, #0]
 8006364:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	3301      	adds	r3, #1
 800636a:	613b      	str	r3, [r7, #16]
    idx++;
 800636c:	7dfb      	ldrb	r3, [r7, #23]
 800636e:	3301      	adds	r3, #1
 8006370:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006372:	7dfb      	ldrb	r3, [r7, #23]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	4413      	add	r3, r2
 8006378:	2200      	movs	r2, #0
 800637a:	701a      	strb	r2, [r3, #0]
    idx++;
 800637c:	7dfb      	ldrb	r3, [r7, #23]
 800637e:	3301      	adds	r3, #1
 8006380:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e7      	bne.n	800635a <USBD_GetString+0x52>
 800638a:	e000      	b.n	800638e <USBD_GetString+0x86>
    return;
 800638c:	bf00      	nop
  }
}
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80063a4:	e005      	b.n	80063b2 <USBD_GetLen+0x1e>
  {
    len++;
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	3301      	adds	r3, #1
 80063aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	3301      	adds	r3, #1
 80063b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1f5      	bne.n	80063a6 <USBD_GetLen+0x12>
  }

  return len;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	2100      	movs	r1, #0
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f004 fb65 	bl	800aabe <USBD_LL_Transmit>

  return USBD_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	60f8      	str	r0, [r7, #12]
 8006406:	60b9      	str	r1, [r7, #8]
 8006408:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	2100      	movs	r1, #0
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f004 fb54 	bl	800aabe <USBD_LL_Transmit>

  return USBD_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3710      	adds	r7, #16
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2203      	movs	r2, #3
 8006430:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	2100      	movs	r1, #0
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f004 fb58 	bl	800ab00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	2100      	movs	r1, #0
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f004 fb47 	bl	800ab00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2204      	movs	r2, #4
 8006488:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800648c:	2300      	movs	r3, #0
 800648e:	2200      	movs	r2, #0
 8006490:	2100      	movs	r1, #0
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f004 fb13 	bl	800aabe <USBD_LL_Transmit>

  return USBD_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b082      	sub	sp, #8
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2205      	movs	r2, #5
 80064ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064b2:	2300      	movs	r3, #0
 80064b4:	2200      	movs	r2, #0
 80064b6:	2100      	movs	r1, #0
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f004 fb21 	bl	800ab00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <__NVIC_SetPriority>:
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	6039      	str	r1, [r7, #0]
 80064d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	db0a      	blt.n	80064f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	490c      	ldr	r1, [pc, #48]	; (8006514 <__NVIC_SetPriority+0x4c>)
 80064e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e6:	0112      	lsls	r2, r2, #4
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	440b      	add	r3, r1
 80064ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80064f0:	e00a      	b.n	8006508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	4908      	ldr	r1, [pc, #32]	; (8006518 <__NVIC_SetPriority+0x50>)
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	3b04      	subs	r3, #4
 8006500:	0112      	lsls	r2, r2, #4
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	440b      	add	r3, r1
 8006506:	761a      	strb	r2, [r3, #24]
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	e000e100 	.word	0xe000e100
 8006518:	e000ed00 	.word	0xe000ed00

0800651c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006520:	2100      	movs	r1, #0
 8006522:	f06f 0004 	mvn.w	r0, #4
 8006526:	f7ff ffcf 	bl	80064c8 <__NVIC_SetPriority>
#endif
}
 800652a:	bf00      	nop
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006536:	f3ef 8305 	mrs	r3, IPSR
 800653a:	603b      	str	r3, [r7, #0]
  return(result);
 800653c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006542:	f06f 0305 	mvn.w	r3, #5
 8006546:	607b      	str	r3, [r7, #4]
 8006548:	e00c      	b.n	8006564 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800654a:	4b0a      	ldr	r3, [pc, #40]	; (8006574 <osKernelInitialize+0x44>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d105      	bne.n	800655e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006552:	4b08      	ldr	r3, [pc, #32]	; (8006574 <osKernelInitialize+0x44>)
 8006554:	2201      	movs	r2, #1
 8006556:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006558:	2300      	movs	r3, #0
 800655a:	607b      	str	r3, [r7, #4]
 800655c:	e002      	b.n	8006564 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800655e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006562:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006564:	687b      	ldr	r3, [r7, #4]
}
 8006566:	4618      	mov	r0, r3
 8006568:	370c      	adds	r7, #12
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20000198 	.word	0x20000198

08006578 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800657e:	f3ef 8305 	mrs	r3, IPSR
 8006582:	603b      	str	r3, [r7, #0]
  return(result);
 8006584:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <osKernelStart+0x1a>
    stat = osErrorISR;
 800658a:	f06f 0305 	mvn.w	r3, #5
 800658e:	607b      	str	r3, [r7, #4]
 8006590:	e010      	b.n	80065b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006592:	4b0b      	ldr	r3, [pc, #44]	; (80065c0 <osKernelStart+0x48>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b01      	cmp	r3, #1
 8006598:	d109      	bne.n	80065ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800659a:	f7ff ffbf 	bl	800651c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800659e:	4b08      	ldr	r3, [pc, #32]	; (80065c0 <osKernelStart+0x48>)
 80065a0:	2202      	movs	r2, #2
 80065a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80065a4:	f001 fd8c 	bl	80080c0 <vTaskStartScheduler>
      stat = osOK;
 80065a8:	2300      	movs	r3, #0
 80065aa:	607b      	str	r3, [r7, #4]
 80065ac:	e002      	b.n	80065b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80065ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065b4:	687b      	ldr	r3, [r7, #4]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	20000198 	.word	0x20000198

080065c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08e      	sub	sp, #56	; 0x38
 80065c8:	af04      	add	r7, sp, #16
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065d4:	f3ef 8305 	mrs	r3, IPSR
 80065d8:	617b      	str	r3, [r7, #20]
  return(result);
 80065da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d17e      	bne.n	80066de <osThreadNew+0x11a>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d07b      	beq.n	80066de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80065e6:	2380      	movs	r3, #128	; 0x80
 80065e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80065ea:	2318      	movs	r3, #24
 80065ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80065f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d045      	beq.n	800668a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <osThreadNew+0x48>
        name = attr->name;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d008      	beq.n	8006632 <osThreadNew+0x6e>
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	2b38      	cmp	r3, #56	; 0x38
 8006624:	d805      	bhi.n	8006632 <osThreadNew+0x6e>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f003 0301 	and.w	r3, r3, #1
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <osThreadNew+0x72>
        return (NULL);
 8006632:	2300      	movs	r3, #0
 8006634:	e054      	b.n	80066e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d003      	beq.n	8006646 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	089b      	lsrs	r3, r3, #2
 8006644:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00e      	beq.n	800666c <osThreadNew+0xa8>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	2bcb      	cmp	r3, #203	; 0xcb
 8006654:	d90a      	bls.n	800666c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800665a:	2b00      	cmp	r3, #0
 800665c:	d006      	beq.n	800666c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d002      	beq.n	800666c <osThreadNew+0xa8>
        mem = 1;
 8006666:	2301      	movs	r3, #1
 8006668:	61bb      	str	r3, [r7, #24]
 800666a:	e010      	b.n	800668e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10c      	bne.n	800668e <osThreadNew+0xca>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d108      	bne.n	800668e <osThreadNew+0xca>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <osThreadNew+0xca>
          mem = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	e001      	b.n	800668e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d110      	bne.n	80066b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800669c:	9202      	str	r2, [sp, #8]
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	6a3a      	ldr	r2, [r7, #32]
 80066a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f001 fb1c 	bl	8007ce8 <xTaskCreateStatic>
 80066b0:	4603      	mov	r3, r0
 80066b2:	613b      	str	r3, [r7, #16]
 80066b4:	e013      	b.n	80066de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d110      	bne.n	80066de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	b29a      	uxth	r2, r3
 80066c0:	f107 0310 	add.w	r3, r7, #16
 80066c4:	9301      	str	r3, [sp, #4]
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f001 fb67 	bl	8007da2 <xTaskCreate>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d001      	beq.n	80066de <osThreadNew+0x11a>
            hTask = NULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066de:	693b      	ldr	r3, [r7, #16]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3728      	adds	r7, #40	; 0x28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4a07      	ldr	r2, [pc, #28]	; (8006714 <vApplicationGetIdleTaskMemory+0x2c>)
 80066f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	4a06      	ldr	r2, [pc, #24]	; (8006718 <vApplicationGetIdleTaskMemory+0x30>)
 80066fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2280      	movs	r2, #128	; 0x80
 8006704:	601a      	str	r2, [r3, #0]
}
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	2000019c 	.word	0x2000019c
 8006718:	20000268 	.word	0x20000268

0800671c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4a07      	ldr	r2, [pc, #28]	; (8006748 <vApplicationGetTimerTaskMemory+0x2c>)
 800672c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	4a06      	ldr	r2, [pc, #24]	; (800674c <vApplicationGetTimerTaskMemory+0x30>)
 8006732:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800673a:	601a      	str	r2, [r3, #0]
}
 800673c:	bf00      	nop
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	20000468 	.word	0x20000468
 800674c:	20000534 	.word	0x20000534

08006750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f103 0208 	add.w	r2, r3, #8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006768:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f103 0208 	add.w	r2, r3, #8
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f103 0208 	add.w	r2, r3, #8
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	601a      	str	r2, [r3, #0]
}
 80067e6:	bf00      	nop
 80067e8:	3714      	adds	r7, #20
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006808:	d103      	bne.n	8006812 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	e00c      	b.n	800682c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3308      	adds	r3, #8
 8006816:	60fb      	str	r3, [r7, #12]
 8006818:	e002      	b.n	8006820 <vListInsert+0x2e>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	429a      	cmp	r2, r3
 800682a:	d2f6      	bcs.n	800681a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	683a      	ldr	r2, [r7, #0]
 8006846:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	1c5a      	adds	r2, r3, #1
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	601a      	str	r2, [r3, #0]
}
 8006858:	bf00      	nop
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr

08006864 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6892      	ldr	r2, [r2, #8]
 800687a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6852      	ldr	r2, [r2, #4]
 8006884:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	429a      	cmp	r2, r3
 800688e:	d103      	bne.n	8006898 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	1e5a      	subs	r2, r3, #1
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80068de:	bf00      	nop
 80068e0:	e7fe      	b.n	80068e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80068e2:	f003 f8d7 	bl	8009a94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ee:	68f9      	ldr	r1, [r7, #12]
 80068f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	441a      	add	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006912:	3b01      	subs	r3, #1
 8006914:	68f9      	ldr	r1, [r7, #12]
 8006916:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006918:	fb01 f303 	mul.w	r3, r1, r3
 800691c:	441a      	add	r2, r3
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	22ff      	movs	r2, #255	; 0xff
 8006926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	22ff      	movs	r2, #255	; 0xff
 800692e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d114      	bne.n	8006962 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d01a      	beq.n	8006976 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3310      	adds	r3, #16
 8006944:	4618      	mov	r0, r3
 8006946:	f001 fe55 	bl	80085f4 <xTaskRemoveFromEventList>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d012      	beq.n	8006976 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006950:	4b0c      	ldr	r3, [pc, #48]	; (8006984 <xQueueGenericReset+0xcc>)
 8006952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	f3bf 8f4f 	dsb	sy
 800695c:	f3bf 8f6f 	isb	sy
 8006960:	e009      	b.n	8006976 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3310      	adds	r3, #16
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff fef2 	bl	8006750 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3324      	adds	r3, #36	; 0x24
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff feed 	bl	8006750 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006976:	f003 f8bd 	bl	8009af4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800697a:	2301      	movs	r3, #1
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	e000ed04 	.word	0xe000ed04

08006988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006988:	b580      	push	{r7, lr}
 800698a:	b08e      	sub	sp, #56	; 0x38
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <xQueueGenericCreateStatic+0x52>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <xQueueGenericCreateStatic+0x56>
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <xQueueGenericCreateStatic+0x58>
 80069de:	2300      	movs	r3, #0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	623b      	str	r3, [r7, #32]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d102      	bne.n	8006a06 <xQueueGenericCreateStatic+0x7e>
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <xQueueGenericCreateStatic+0x82>
 8006a06:	2301      	movs	r3, #1
 8006a08:	e000      	b.n	8006a0c <xQueueGenericCreateStatic+0x84>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	61fb      	str	r3, [r7, #28]
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a26:	2350      	movs	r3, #80	; 0x50
 8006a28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	2b50      	cmp	r3, #80	; 0x50
 8006a2e:	d00a      	beq.n	8006a46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	61bb      	str	r3, [r7, #24]
}
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00d      	beq.n	8006a6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	9300      	str	r3, [sp, #0]
 8006a62:	4613      	mov	r3, r2
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	68b9      	ldr	r1, [r7, #8]
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f83f 	bl	8006aec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3730      	adds	r7, #48	; 0x30
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b08a      	sub	sp, #40	; 0x28
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	4613      	mov	r3, r2
 8006a84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	613b      	str	r3, [r7, #16]
}
 8006a9e:	bf00      	nop
 8006aa0:	e7fe      	b.n	8006aa0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	68ba      	ldr	r2, [r7, #8]
 8006aa6:	fb02 f303 	mul.w	r3, r2, r3
 8006aaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	3350      	adds	r3, #80	; 0x50
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f003 f911 	bl	8009cd8 <pvPortMalloc>
 8006ab6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d011      	beq.n	8006ae2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	3350      	adds	r3, #80	; 0x50
 8006ac6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ad0:	79fa      	ldrb	r2, [r7, #7]
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	68b9      	ldr	r1, [r7, #8]
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f805 	bl	8006aec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ae2:	69bb      	ldr	r3, [r7, #24]
	}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3720      	adds	r7, #32
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
 8006af8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d103      	bne.n	8006b08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	e002      	b.n	8006b0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	69b8      	ldr	r0, [r7, #24]
 8006b1e:	f7ff fecb 	bl	80068b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	78fa      	ldrb	r2, [r7, #3]
 8006b26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b2a:	bf00      	nop
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08e      	sub	sp, #56	; 0x38
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b42:	2300      	movs	r3, #0
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <xQueueGenericSend+0x32>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d103      	bne.n	8006b74 <xQueueGenericSend+0x40>
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <xQueueGenericSend+0x44>
 8006b74:	2301      	movs	r3, #1
 8006b76:	e000      	b.n	8006b7a <xQueueGenericSend+0x46>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10a      	bne.n	8006b94 <xQueueGenericSend+0x60>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b82:	f383 8811 	msr	BASEPRI, r3
 8006b86:	f3bf 8f6f 	isb	sy
 8006b8a:	f3bf 8f4f 	dsb	sy
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b90:	bf00      	nop
 8006b92:	e7fe      	b.n	8006b92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d103      	bne.n	8006ba2 <xQueueGenericSend+0x6e>
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d101      	bne.n	8006ba6 <xQueueGenericSend+0x72>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <xQueueGenericSend+0x74>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10a      	bne.n	8006bc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	623b      	str	r3, [r7, #32]
}
 8006bbe:	bf00      	nop
 8006bc0:	e7fe      	b.n	8006bc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bc2:	f001 fee9 	bl	8008998 <xTaskGetSchedulerState>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d102      	bne.n	8006bd2 <xQueueGenericSend+0x9e>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <xQueueGenericSend+0xa2>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <xQueueGenericSend+0xa4>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d10a      	bne.n	8006bf2 <xQueueGenericSend+0xbe>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	61fb      	str	r3, [r7, #28]
}
 8006bee:	bf00      	nop
 8006bf0:	e7fe      	b.n	8006bf0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bf2:	f002 ff4f 	bl	8009a94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d302      	bcc.n	8006c08 <xQueueGenericSend+0xd4>
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d129      	bne.n	8006c5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c0e:	f000 fbbb 	bl	8007388 <prvCopyDataToQueue>
 8006c12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d010      	beq.n	8006c3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	3324      	adds	r3, #36	; 0x24
 8006c20:	4618      	mov	r0, r3
 8006c22:	f001 fce7 	bl	80085f4 <xTaskRemoveFromEventList>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d013      	beq.n	8006c54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c2c:	4b3f      	ldr	r3, [pc, #252]	; (8006d2c <xQueueGenericSend+0x1f8>)
 8006c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	f3bf 8f4f 	dsb	sy
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	e00a      	b.n	8006c54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d007      	beq.n	8006c54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c44:	4b39      	ldr	r3, [pc, #228]	; (8006d2c <xQueueGenericSend+0x1f8>)
 8006c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c54:	f002 ff4e 	bl	8009af4 <vPortExitCritical>
				return pdPASS;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e063      	b.n	8006d24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d103      	bne.n	8006c6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c62:	f002 ff47 	bl	8009af4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	e05c      	b.n	8006d24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d106      	bne.n	8006c7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c70:	f107 0314 	add.w	r3, r7, #20
 8006c74:	4618      	mov	r0, r3
 8006c76:	f001 fd21 	bl	80086bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c7e:	f002 ff39 	bl	8009af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c82:	f001 fa8d 	bl	80081a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c86:	f002 ff05 	bl	8009a94 <vPortEnterCritical>
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c90:	b25b      	sxtb	r3, r3
 8006c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c96:	d103      	bne.n	8006ca0 <xQueueGenericSend+0x16c>
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ca6:	b25b      	sxtb	r3, r3
 8006ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cac:	d103      	bne.n	8006cb6 <xQueueGenericSend+0x182>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cb6:	f002 ff1d 	bl	8009af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cba:	1d3a      	adds	r2, r7, #4
 8006cbc:	f107 0314 	add.w	r3, r7, #20
 8006cc0:	4611      	mov	r1, r2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 fd10 	bl	80086e8 <xTaskCheckForTimeOut>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d124      	bne.n	8006d18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cd0:	f000 fc52 	bl	8007578 <prvIsQueueFull>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d018      	beq.n	8006d0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	3310      	adds	r3, #16
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f001 fc36 	bl	8008554 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cea:	f000 fbdd 	bl	80074a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006cee:	f001 fa65 	bl	80081bc <xTaskResumeAll>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f47f af7c 	bne.w	8006bf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006cfa:	4b0c      	ldr	r3, [pc, #48]	; (8006d2c <xQueueGenericSend+0x1f8>)
 8006cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	e772      	b.n	8006bf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d0e:	f000 fbcb 	bl	80074a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d12:	f001 fa53 	bl	80081bc <xTaskResumeAll>
 8006d16:	e76c      	b.n	8006bf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d1a:	f000 fbc5 	bl	80074a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d1e:	f001 fa4d 	bl	80081bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3738      	adds	r7, #56	; 0x38
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	e000ed04 	.word	0xe000ed04

08006d30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b090      	sub	sp, #64	; 0x40
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10a      	bne.n	8006d5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d5a:	bf00      	nop
 8006d5c:	e7fe      	b.n	8006d5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d103      	bne.n	8006d6c <xQueueGenericSendFromISR+0x3c>
 8006d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <xQueueGenericSendFromISR+0x40>
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e000      	b.n	8006d72 <xQueueGenericSendFromISR+0x42>
 8006d70:	2300      	movs	r3, #0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10a      	bne.n	8006d8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d88:	bf00      	nop
 8006d8a:	e7fe      	b.n	8006d8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2b02      	cmp	r3, #2
 8006d90:	d103      	bne.n	8006d9a <xQueueGenericSendFromISR+0x6a>
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d101      	bne.n	8006d9e <xQueueGenericSendFromISR+0x6e>
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e000      	b.n	8006da0 <xQueueGenericSendFromISR+0x70>
 8006d9e:	2300      	movs	r3, #0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	623b      	str	r3, [r7, #32]
}
 8006db6:	bf00      	nop
 8006db8:	e7fe      	b.n	8006db8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dba:	f002 ff4d 	bl	8009c58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006dbe:	f3ef 8211 	mrs	r2, BASEPRI
 8006dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	61fa      	str	r2, [r7, #28]
 8006dd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006dd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d302      	bcc.n	8006dec <xQueueGenericSendFromISR+0xbc>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d12f      	bne.n	8006e4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	68b9      	ldr	r1, [r7, #8]
 8006e00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e02:	f000 fac1 	bl	8007388 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006e06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e0e:	d112      	bne.n	8006e36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d016      	beq.n	8006e46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e1a:	3324      	adds	r3, #36	; 0x24
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f001 fbe9 	bl	80085f4 <xTaskRemoveFromEventList>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00e      	beq.n	8006e46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00b      	beq.n	8006e46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	e007      	b.n	8006e46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	b25a      	sxtb	r2, r3
 8006e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e46:	2301      	movs	r3, #1
 8006e48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006e4a:	e001      	b.n	8006e50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3740      	adds	r7, #64	; 0x40
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b08e      	sub	sp, #56	; 0x38
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10a      	bne.n	8006e90 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	623b      	str	r3, [r7, #32]
}
 8006e8c:	bf00      	nop
 8006e8e:	e7fe      	b.n	8006e8e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00a      	beq.n	8006eae <xQueueGiveFromISR+0x48>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	61fb      	str	r3, [r7, #28]
}
 8006eaa:	bf00      	nop
 8006eac:	e7fe      	b.n	8006eac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d103      	bne.n	8006ebe <xQueueGiveFromISR+0x58>
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <xQueueGiveFromISR+0x5c>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e000      	b.n	8006ec4 <xQueueGiveFromISR+0x5e>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10a      	bne.n	8006ede <xQueueGiveFromISR+0x78>
	__asm volatile
 8006ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	61bb      	str	r3, [r7, #24]
}
 8006eda:	bf00      	nop
 8006edc:	e7fe      	b.n	8006edc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ede:	f002 febb 	bl	8009c58 <vPortValidateInterruptPriority>
	__asm volatile
 8006ee2:	f3ef 8211 	mrs	r2, BASEPRI
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	617a      	str	r2, [r7, #20]
 8006ef8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006efa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006efc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d22b      	bcs.n	8006f66 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	1c5a      	adds	r2, r3, #1
 8006f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f28:	d112      	bne.n	8006f50 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d016      	beq.n	8006f60 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f34:	3324      	adds	r3, #36	; 0x24
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 fb5c 	bl	80085f4 <xTaskRemoveFromEventList>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00e      	beq.n	8006f60 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00b      	beq.n	8006f60 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e007      	b.n	8006f60 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f54:	3301      	adds	r3, #1
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	b25a      	sxtb	r2, r3
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f60:	2301      	movs	r3, #1
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34
 8006f64:	e001      	b.n	8006f6a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	637b      	str	r3, [r7, #52]	; 0x34
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f383 8811 	msr	BASEPRI, r3
}
 8006f74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3738      	adds	r7, #56	; 0x38
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b08c      	sub	sp, #48	; 0x30
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <xQueueReceive+0x30>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	623b      	str	r3, [r7, #32]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d103      	bne.n	8006fbe <xQueueReceive+0x3e>
 8006fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d101      	bne.n	8006fc2 <xQueueReceive+0x42>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e000      	b.n	8006fc4 <xQueueReceive+0x44>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <xQueueReceive+0x5e>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	f383 8811 	msr	BASEPRI, r3
 8006fd0:	f3bf 8f6f 	isb	sy
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	61fb      	str	r3, [r7, #28]
}
 8006fda:	bf00      	nop
 8006fdc:	e7fe      	b.n	8006fdc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006fde:	f001 fcdb 	bl	8008998 <xTaskGetSchedulerState>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d102      	bne.n	8006fee <xQueueReceive+0x6e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <xQueueReceive+0x72>
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e000      	b.n	8006ff4 <xQueueReceive+0x74>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10a      	bne.n	800700e <xQueueReceive+0x8e>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	61bb      	str	r3, [r7, #24]
}
 800700a:	bf00      	nop
 800700c:	e7fe      	b.n	800700c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800700e:	f002 fd41 	bl	8009a94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007016:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	2b00      	cmp	r3, #0
 800701c:	d01f      	beq.n	800705e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800701e:	68b9      	ldr	r1, [r7, #8]
 8007020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007022:	f000 fa1b 	bl	800745c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	1e5a      	subs	r2, r3, #1
 800702a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00f      	beq.n	8007056 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007038:	3310      	adds	r3, #16
 800703a:	4618      	mov	r0, r3
 800703c:	f001 fada 	bl	80085f4 <xTaskRemoveFromEventList>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007046:	4b3d      	ldr	r3, [pc, #244]	; (800713c <xQueueReceive+0x1bc>)
 8007048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800704c:	601a      	str	r2, [r3, #0]
 800704e:	f3bf 8f4f 	dsb	sy
 8007052:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007056:	f002 fd4d 	bl	8009af4 <vPortExitCritical>
				return pdPASS;
 800705a:	2301      	movs	r3, #1
 800705c:	e069      	b.n	8007132 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d103      	bne.n	800706c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007064:	f002 fd46 	bl	8009af4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007068:	2300      	movs	r3, #0
 800706a:	e062      	b.n	8007132 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800706c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007072:	f107 0310 	add.w	r3, r7, #16
 8007076:	4618      	mov	r0, r3
 8007078:	f001 fb20 	bl	80086bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800707c:	2301      	movs	r3, #1
 800707e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007080:	f002 fd38 	bl	8009af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007084:	f001 f88c 	bl	80081a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007088:	f002 fd04 	bl	8009a94 <vPortEnterCritical>
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007092:	b25b      	sxtb	r3, r3
 8007094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007098:	d103      	bne.n	80070a2 <xQueueReceive+0x122>
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070a8:	b25b      	sxtb	r3, r3
 80070aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070ae:	d103      	bne.n	80070b8 <xQueueReceive+0x138>
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070b8:	f002 fd1c 	bl	8009af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070bc:	1d3a      	adds	r2, r7, #4
 80070be:	f107 0310 	add.w	r3, r7, #16
 80070c2:	4611      	mov	r1, r2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f001 fb0f 	bl	80086e8 <xTaskCheckForTimeOut>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d123      	bne.n	8007118 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070d2:	f000 fa3b 	bl	800754c <prvIsQueueEmpty>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d017      	beq.n	800710c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	3324      	adds	r3, #36	; 0x24
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	4611      	mov	r1, r2
 80070e4:	4618      	mov	r0, r3
 80070e6:	f001 fa35 	bl	8008554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80070ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070ec:	f000 f9dc 	bl	80074a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80070f0:	f001 f864 	bl	80081bc <xTaskResumeAll>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d189      	bne.n	800700e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80070fa:	4b10      	ldr	r3, [pc, #64]	; (800713c <xQueueReceive+0x1bc>)
 80070fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	f3bf 8f6f 	isb	sy
 800710a:	e780      	b.n	800700e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800710c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800710e:	f000 f9cb 	bl	80074a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007112:	f001 f853 	bl	80081bc <xTaskResumeAll>
 8007116:	e77a      	b.n	800700e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800711a:	f000 f9c5 	bl	80074a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800711e:	f001 f84d 	bl	80081bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007124:	f000 fa12 	bl	800754c <prvIsQueueEmpty>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	f43f af6f 	beq.w	800700e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007132:	4618      	mov	r0, r3
 8007134:	3730      	adds	r7, #48	; 0x30
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	e000ed04 	.word	0xe000ed04

08007140 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b08e      	sub	sp, #56	; 0x38
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800714a:	2300      	movs	r3, #0
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007152:	2300      	movs	r3, #0
 8007154:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10a      	bne.n	8007172 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	623b      	str	r3, [r7, #32]
}
 800716e:	bf00      	nop
 8007170:	e7fe      	b.n	8007170 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00a      	beq.n	8007190 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	61fb      	str	r3, [r7, #28]
}
 800718c:	bf00      	nop
 800718e:	e7fe      	b.n	800718e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007190:	f001 fc02 	bl	8008998 <xTaskGetSchedulerState>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d102      	bne.n	80071a0 <xQueueSemaphoreTake+0x60>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d101      	bne.n	80071a4 <xQueueSemaphoreTake+0x64>
 80071a0:	2301      	movs	r3, #1
 80071a2:	e000      	b.n	80071a6 <xQueueSemaphoreTake+0x66>
 80071a4:	2300      	movs	r3, #0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10a      	bne.n	80071c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80071aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ae:	f383 8811 	msr	BASEPRI, r3
 80071b2:	f3bf 8f6f 	isb	sy
 80071b6:	f3bf 8f4f 	dsb	sy
 80071ba:	61bb      	str	r3, [r7, #24]
}
 80071bc:	bf00      	nop
 80071be:	e7fe      	b.n	80071be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071c0:	f002 fc68 	bl	8009a94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80071c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80071ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d024      	beq.n	800721a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	1e5a      	subs	r2, r3, #1
 80071d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d104      	bne.n	80071ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80071e0:	f001 fd50 	bl	8008c84 <pvTaskIncrementMutexHeldCount>
 80071e4:	4602      	mov	r2, r0
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00f      	beq.n	8007212 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	3310      	adds	r3, #16
 80071f6:	4618      	mov	r0, r3
 80071f8:	f001 f9fc 	bl	80085f4 <xTaskRemoveFromEventList>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d007      	beq.n	8007212 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007202:	4b54      	ldr	r3, [pc, #336]	; (8007354 <xQueueSemaphoreTake+0x214>)
 8007204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007212:	f002 fc6f 	bl	8009af4 <vPortExitCritical>
				return pdPASS;
 8007216:	2301      	movs	r3, #1
 8007218:	e097      	b.n	800734a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d111      	bne.n	8007244 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00a      	beq.n	800723c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800722a:	f383 8811 	msr	BASEPRI, r3
 800722e:	f3bf 8f6f 	isb	sy
 8007232:	f3bf 8f4f 	dsb	sy
 8007236:	617b      	str	r3, [r7, #20]
}
 8007238:	bf00      	nop
 800723a:	e7fe      	b.n	800723a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800723c:	f002 fc5a 	bl	8009af4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007240:	2300      	movs	r3, #0
 8007242:	e082      	b.n	800734a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007246:	2b00      	cmp	r3, #0
 8007248:	d106      	bne.n	8007258 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800724a:	f107 030c 	add.w	r3, r7, #12
 800724e:	4618      	mov	r0, r3
 8007250:	f001 fa34 	bl	80086bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007254:	2301      	movs	r3, #1
 8007256:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007258:	f002 fc4c 	bl	8009af4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800725c:	f000 ffa0 	bl	80081a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007260:	f002 fc18 	bl	8009a94 <vPortEnterCritical>
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800726a:	b25b      	sxtb	r3, r3
 800726c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007270:	d103      	bne.n	800727a <xQueueSemaphoreTake+0x13a>
 8007272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007280:	b25b      	sxtb	r3, r3
 8007282:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007286:	d103      	bne.n	8007290 <xQueueSemaphoreTake+0x150>
 8007288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007290:	f002 fc30 	bl	8009af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007294:	463a      	mov	r2, r7
 8007296:	f107 030c 	add.w	r3, r7, #12
 800729a:	4611      	mov	r1, r2
 800729c:	4618      	mov	r0, r3
 800729e:	f001 fa23 	bl	80086e8 <xTaskCheckForTimeOut>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d132      	bne.n	800730e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072aa:	f000 f94f 	bl	800754c <prvIsQueueEmpty>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d026      	beq.n	8007302 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d109      	bne.n	80072d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80072bc:	f002 fbea 	bl	8009a94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f001 fb85 	bl	80089d4 <xTaskPriorityInherit>
 80072ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80072cc:	f002 fc12 	bl	8009af4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d2:	3324      	adds	r3, #36	; 0x24
 80072d4:	683a      	ldr	r2, [r7, #0]
 80072d6:	4611      	mov	r1, r2
 80072d8:	4618      	mov	r0, r3
 80072da:	f001 f93b 	bl	8008554 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80072e0:	f000 f8e2 	bl	80074a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072e4:	f000 ff6a 	bl	80081bc <xTaskResumeAll>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	f47f af68 	bne.w	80071c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80072f0:	4b18      	ldr	r3, [pc, #96]	; (8007354 <xQueueSemaphoreTake+0x214>)
 80072f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	e75e      	b.n	80071c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007304:	f000 f8d0 	bl	80074a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007308:	f000 ff58 	bl	80081bc <xTaskResumeAll>
 800730c:	e758      	b.n	80071c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800730e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007310:	f000 f8ca 	bl	80074a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007314:	f000 ff52 	bl	80081bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007318:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800731a:	f000 f917 	bl	800754c <prvIsQueueEmpty>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	f43f af4d 	beq.w	80071c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00d      	beq.n	8007348 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800732c:	f002 fbb2 	bl	8009a94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007330:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007332:	f000 f811 	bl	8007358 <prvGetDisinheritPriorityAfterTimeout>
 8007336:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800733e:	4618      	mov	r0, r3
 8007340:	f001 fc1e 	bl	8008b80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007344:	f002 fbd6 	bl	8009af4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007348:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800734a:	4618      	mov	r0, r3
 800734c:	3738      	adds	r7, #56	; 0x38
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	e000ed04 	.word	0xe000ed04

08007358 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007364:	2b00      	cmp	r3, #0
 8007366:	d006      	beq.n	8007376 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e001      	b.n	800737a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007376:	2300      	movs	r3, #0
 8007378:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800737a:	68fb      	ldr	r3, [r7, #12]
	}
 800737c:	4618      	mov	r0, r3
 800737e:	3714      	adds	r7, #20
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10d      	bne.n	80073c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d14d      	bne.n	800744a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 fb76 	bl	8008aa4 <xTaskPriorityDisinherit>
 80073b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	609a      	str	r2, [r3, #8]
 80073c0:	e043      	b.n	800744a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d119      	bne.n	80073fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6858      	ldr	r0, [r3, #4]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d0:	461a      	mov	r2, r3
 80073d2:	68b9      	ldr	r1, [r7, #8]
 80073d4:	f003 fc32 	bl	800ac3c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e0:	441a      	add	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d32b      	bcc.n	800744a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	605a      	str	r2, [r3, #4]
 80073fa:	e026      	b.n	800744a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	68d8      	ldr	r0, [r3, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007404:	461a      	mov	r2, r3
 8007406:	68b9      	ldr	r1, [r7, #8]
 8007408:	f003 fc18 	bl	800ac3c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	68da      	ldr	r2, [r3, #12]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007414:	425b      	negs	r3, r3
 8007416:	441a      	add	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	68da      	ldr	r2, [r3, #12]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	429a      	cmp	r2, r3
 8007426:	d207      	bcs.n	8007438 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007430:	425b      	negs	r3, r3
 8007432:	441a      	add	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b02      	cmp	r3, #2
 800743c:	d105      	bne.n	800744a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	3b01      	subs	r3, #1
 8007448:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007452:	697b      	ldr	r3, [r7, #20]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3718      	adds	r7, #24
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d018      	beq.n	80074a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	441a      	add	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68da      	ldr	r2, [r3, #12]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	429a      	cmp	r2, r3
 8007486:	d303      	bcc.n	8007490 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	68d9      	ldr	r1, [r3, #12]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007498:	461a      	mov	r2, r3
 800749a:	6838      	ldr	r0, [r7, #0]
 800749c:	f003 fbce 	bl	800ac3c <memcpy>
	}
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80074b0:	f002 faf0 	bl	8009a94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074bc:	e011      	b.n	80074e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d012      	beq.n	80074ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3324      	adds	r3, #36	; 0x24
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 f892 	bl	80085f4 <xTaskRemoveFromEventList>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074d6:	f001 f969 	bl	80087ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	3b01      	subs	r3, #1
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	dce9      	bgt.n	80074be <prvUnlockQueue+0x16>
 80074ea:	e000      	b.n	80074ee <prvUnlockQueue+0x46>
					break;
 80074ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	22ff      	movs	r2, #255	; 0xff
 80074f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80074f6:	f002 fafd 	bl	8009af4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074fa:	f002 facb 	bl	8009a94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007504:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007506:	e011      	b.n	800752c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d012      	beq.n	8007536 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3310      	adds	r3, #16
 8007514:	4618      	mov	r0, r3
 8007516:	f001 f86d 	bl	80085f4 <xTaskRemoveFromEventList>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d001      	beq.n	8007524 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007520:	f001 f944 	bl	80087ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007524:	7bbb      	ldrb	r3, [r7, #14]
 8007526:	3b01      	subs	r3, #1
 8007528:	b2db      	uxtb	r3, r3
 800752a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800752c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007530:	2b00      	cmp	r3, #0
 8007532:	dce9      	bgt.n	8007508 <prvUnlockQueue+0x60>
 8007534:	e000      	b.n	8007538 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007536:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	22ff      	movs	r2, #255	; 0xff
 800753c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007540:	f002 fad8 	bl	8009af4 <vPortExitCritical>
}
 8007544:	bf00      	nop
 8007546:	3710      	adds	r7, #16
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007554:	f002 fa9e 	bl	8009a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	2b00      	cmp	r3, #0
 800755e:	d102      	bne.n	8007566 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007560:	2301      	movs	r3, #1
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	e001      	b.n	800756a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800756a:	f002 fac3 	bl	8009af4 <vPortExitCritical>

	return xReturn;
 800756e:	68fb      	ldr	r3, [r7, #12]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007580:	f002 fa88 	bl	8009a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758c:	429a      	cmp	r2, r3
 800758e:	d102      	bne.n	8007596 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007590:	2301      	movs	r3, #1
 8007592:	60fb      	str	r3, [r7, #12]
 8007594:	e001      	b.n	800759a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007596:	2300      	movs	r3, #0
 8007598:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800759a:	f002 faab 	bl	8009af4 <vPortExitCritical>

	return xReturn;
 800759e:	68fb      	ldr	r3, [r7, #12]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]
 80075b6:	e014      	b.n	80075e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075b8:	4a0f      	ldr	r2, [pc, #60]	; (80075f8 <vQueueAddToRegistry+0x50>)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10b      	bne.n	80075dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075c4:	490c      	ldr	r1, [pc, #48]	; (80075f8 <vQueueAddToRegistry+0x50>)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075ce:	4a0a      	ldr	r2, [pc, #40]	; (80075f8 <vQueueAddToRegistry+0x50>)
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	4413      	add	r3, r2
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075da:	e006      	b.n	80075ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b07      	cmp	r3, #7
 80075e6:	d9e7      	bls.n	80075b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	20000934 	.word	0x20000934

080075fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800760c:	f002 fa42 	bl	8009a94 <vPortEnterCritical>
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007616:	b25b      	sxtb	r3, r3
 8007618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800761c:	d103      	bne.n	8007626 <vQueueWaitForMessageRestricted+0x2a>
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800762c:	b25b      	sxtb	r3, r3
 800762e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007632:	d103      	bne.n	800763c <vQueueWaitForMessageRestricted+0x40>
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800763c:	f002 fa5a 	bl	8009af4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007644:	2b00      	cmp	r3, #0
 8007646:	d106      	bne.n	8007656 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	3324      	adds	r3, #36	; 0x24
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	68b9      	ldr	r1, [r7, #8]
 8007650:	4618      	mov	r0, r3
 8007652:	f000 ffa3 	bl	800859c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007656:	6978      	ldr	r0, [r7, #20]
 8007658:	f7ff ff26 	bl	80074a8 <prvUnlockQueue>
	}
 800765c:	bf00      	nop
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8007664:	b580      	push	{r7, lr}
 8007666:	b08c      	sub	sp, #48	; 0x30
 8007668:	af02      	add	r7, sp, #8
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d110      	bne.n	8007698 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8007676:	2301      	movs	r3, #1
 8007678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b04      	cmp	r3, #4
 8007680:	d81b      	bhi.n	80076ba <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8007682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007686:	f383 8811 	msr	BASEPRI, r3
 800768a:	f3bf 8f6f 	isb	sy
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	61fb      	str	r3, [r7, #28]
}
 8007694:	bf00      	nop
 8007696:	e7fe      	b.n	8007696 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8007698:	2300      	movs	r3, #0
 800769a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d10a      	bne.n	80076ba <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80076a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a8:	f383 8811 	msr	BASEPRI, r3
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	61bb      	str	r3, [r7, #24]
}
 80076b6:	bf00      	nop
 80076b8:	e7fe      	b.n	80076b8 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80076ba:	68ba      	ldr	r2, [r7, #8]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d90a      	bls.n	80076d8 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	617b      	str	r3, [r7, #20]
}
 80076d4:	bf00      	nop
 80076d6:	e7fe      	b.n	80076d6 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80076de:	2301      	movs	r3, #1
 80076e0:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	3301      	adds	r3, #1
 80076e6:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3324      	adds	r3, #36	; 0x24
 80076ec:	4618      	mov	r0, r3
 80076ee:	f002 faf3 	bl	8009cd8 <pvPortMalloc>
 80076f2:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80076f4:	6a3b      	ldr	r3, [r7, #32]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00a      	beq.n	8007710 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8007700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	6a38      	ldr	r0, [r7, #32]
 800770c:	f000 fab9 	bl	8007c82 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8007710:	6a3b      	ldr	r3, [r7, #32]
	}
 8007712:	4618      	mov	r0, r3
 8007714:	3728      	adds	r7, #40	; 0x28
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800771a:	b480      	push	{r7}
 800771c:	b087      	sub	sp, #28
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d10a      	bne.n	8007742 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	60fb      	str	r3, [r7, #12]
}
 800773e:	bf00      	nop
 8007740:	e7fe      	b.n	8007740 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	689a      	ldr	r2, [r3, #8]
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4413      	add	r3, r2
 800774c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	3b01      	subs	r3, #1
 800775c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	697a      	ldr	r2, [r7, #20]
 8007764:	429a      	cmp	r2, r3
 8007766:	d304      	bcc.n	8007772 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8007772:	697b      	ldr	r3, [r7, #20]
}
 8007774:	4618      	mov	r0, r3
 8007776:	371c      	adds	r7, #28
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b090      	sub	sp, #64	; 0x40
 8007784:	af02      	add	r7, sp, #8
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
 800778c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10a      	bne.n	80077b2 <xStreamBufferSendFromISR+0x32>
	__asm volatile
 800779c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	623b      	str	r3, [r7, #32]
}
 80077ae:	bf00      	nop
 80077b0:	e7fe      	b.n	80077b0 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10a      	bne.n	80077ce <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	61fb      	str	r3, [r7, #28]
}
 80077ca:	bf00      	nop
 80077cc:	e7fe      	b.n	80077cc <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80077ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d0:	7f1b      	ldrb	r3, [r3, #28]
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80077da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077dc:	3304      	adds	r3, #4
 80077de:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80077e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077e2:	f7ff ff9a 	bl	800771a <xStreamBufferSpacesAvailable>
 80077e6:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80077e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	68b9      	ldr	r1, [r7, #8]
 80077f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077f4:	f000 f835 	bl	8007862 <prvWriteMessageToBuffer>
 80077f8:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d02b      	beq.n	8007858 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8007800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007802:	f000 fa1e 	bl	8007c42 <prvBytesInBuffer>
 8007806:	4602      	mov	r2, r0
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	429a      	cmp	r2, r3
 800780e:	d323      	bcc.n	8007858 <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 8007810:	f3ef 8211 	mrs	r2, BASEPRI
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	61ba      	str	r2, [r7, #24]
 8007826:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007828:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00b      	beq.n	800784c <xStreamBufferSendFromISR+0xcc>
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	6918      	ldr	r0, [r3, #16]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	2300      	movs	r3, #0
 800783e:	2200      	movs	r2, #0
 8007840:	2100      	movs	r1, #0
 8007842:	f001 fb51 	bl	8008ee8 <xTaskGenericNotifyFromISR>
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	2200      	movs	r2, #0
 800784a:	611a      	str	r2, [r3, #16]
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	f383 8811 	msr	BASEPRI, r3
}
 8007856:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8007858:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800785a:	4618      	mov	r0, r3
 800785c:	3738      	adds	r7, #56	; 0x38
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b086      	sub	sp, #24
 8007866:	af00      	add	r7, sp, #0
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	607a      	str	r2, [r7, #4]
 800786e:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d102      	bne.n	800787c <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8007876:	2300      	movs	r3, #0
 8007878:	617b      	str	r3, [r7, #20]
 800787a:	e01d      	b.n	80078b8 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	7f1b      	ldrb	r3, [r3, #28]
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d108      	bne.n	800789a <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8007888:	2301      	movs	r3, #1
 800788a:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	4293      	cmp	r3, r2
 8007892:	bf28      	it	cs
 8007894:	4613      	movcs	r3, r2
 8007896:	607b      	str	r3, [r7, #4]
 8007898:	e00e      	b.n	80078b8 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800789a:	683a      	ldr	r2, [r7, #0]
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d308      	bcc.n	80078b4 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80078a2:	2301      	movs	r3, #1
 80078a4:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80078a6:	1d3b      	adds	r3, r7, #4
 80078a8:	2204      	movs	r2, #4
 80078aa:	4619      	mov	r1, r3
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f8dc 	bl	8007a6a <prvWriteBytesToBuffer>
 80078b2:	e001      	b.n	80078b8 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d007      	beq.n	80078ce <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	461a      	mov	r2, r3
 80078c2:	68b9      	ldr	r1, [r7, #8]
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 f8d0 	bl	8007a6a <prvWriteBytesToBuffer>
 80078ca:	6138      	str	r0, [r7, #16]
 80078cc:	e001      	b.n	80078d2 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80078d2:	693b      	ldr	r3, [r7, #16]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3718      	adds	r7, #24
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08e      	sub	sp, #56	; 0x38
 80078e0:	af02      	add	r7, sp, #8
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
 80078e8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80078ee:	2300      	movs	r3, #0
 80078f0:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <xStreamBufferReceive+0x32>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	61fb      	str	r3, [r7, #28]
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800790e:	6a3b      	ldr	r3, [r7, #32]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <xStreamBufferReceive+0x4e>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	f383 8811 	msr	BASEPRI, r3
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	61bb      	str	r3, [r7, #24]
}
 8007926:	bf00      	nop
 8007928:	e7fe      	b.n	8007928 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	7f1b      	ldrb	r3, [r3, #28]
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8007936:	2304      	movs	r3, #4
 8007938:	627b      	str	r3, [r7, #36]	; 0x24
 800793a:	e001      	b.n	8007940 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800793c:	2300      	movs	r3, #0
 800793e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d034      	beq.n	80079b0 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8007946:	f002 f8a5 	bl	8009a94 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800794a:	6a38      	ldr	r0, [r7, #32]
 800794c:	f000 f979 	bl	8007c42 <prvBytesInBuffer>
 8007950:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8007952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	429a      	cmp	r2, r3
 8007958:	d816      	bhi.n	8007988 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800795a:	2000      	movs	r0, #0
 800795c:	f001 fba8 	bl	80090b0 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <xStreamBufferReceive+0xa2>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	617b      	str	r3, [r7, #20]
}
 800797a:	bf00      	nop
 800797c:	e7fe      	b.n	800797c <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800797e:	f000 fffb 	bl	8008978 <xTaskGetCurrentTaskHandle>
 8007982:	4602      	mov	r2, r0
 8007984:	6a3b      	ldr	r3, [r7, #32]
 8007986:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007988:	f002 f8b4 	bl	8009af4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800798c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	429a      	cmp	r2, r3
 8007992:	d811      	bhi.n	80079b8 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	2200      	movs	r2, #0
 8007998:	2100      	movs	r1, #0
 800799a:	2000      	movs	r0, #0
 800799c:	f001 f986 	bl	8008cac <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	2200      	movs	r2, #0
 80079a4:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80079a6:	6a38      	ldr	r0, [r7, #32]
 80079a8:	f000 f94b 	bl	8007c42 <prvBytesInBuffer>
 80079ac:	62b8      	str	r0, [r7, #40]	; 0x28
 80079ae:	e003      	b.n	80079b8 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80079b0:	6a38      	ldr	r0, [r7, #32]
 80079b2:	f000 f946 	bl	8007c42 <prvBytesInBuffer>
 80079b6:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80079b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079bc:	429a      	cmp	r2, r3
 80079be:	d91d      	bls.n	80079fc <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	68b9      	ldr	r1, [r7, #8]
 80079ca:	6a38      	ldr	r0, [r7, #32]
 80079cc:	f000 f81b 	bl	8007a06 <prvReadMessageFromBuffer>
 80079d0:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80079d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d011      	beq.n	80079fc <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80079d8:	f000 fbe2 	bl	80081a0 <vTaskSuspendAll>
 80079dc:	6a3b      	ldr	r3, [r7, #32]
 80079de:	695b      	ldr	r3, [r3, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <xStreamBufferReceive+0x11c>
 80079e4:	6a3b      	ldr	r3, [r7, #32]
 80079e6:	6958      	ldr	r0, [r3, #20]
 80079e8:	2300      	movs	r3, #0
 80079ea:	2200      	movs	r2, #0
 80079ec:	2100      	movs	r1, #0
 80079ee:	f001 f9bd 	bl	8008d6c <xTaskGenericNotify>
 80079f2:	6a3b      	ldr	r3, [r7, #32]
 80079f4:	2200      	movs	r2, #0
 80079f6:	615a      	str	r2, [r3, #20]
 80079f8:	f000 fbe0 	bl	80081bc <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3730      	adds	r7, #48	; 0x30
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b088      	sub	sp, #32
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	60f8      	str	r0, [r7, #12]
 8007a0e:	60b9      	str	r1, [r7, #8]
 8007a10:	607a      	str	r2, [r7, #4]
 8007a12:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8007a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d019      	beq.n	8007a4e <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8007a20:	f107 0110 	add.w	r1, r7, #16
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 f890 	bl	8007b4e <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8007a3a:	69fa      	ldr	r2, [r7, #28]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d907      	bls.n	8007a52 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	69ba      	ldr	r2, [r7, #24]
 8007a46:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	e001      	b.n	8007a52 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	69fa      	ldr	r2, [r7, #28]
 8007a56:	68b9      	ldr	r1, [r7, #8]
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 f878 	bl	8007b4e <prvReadBytesFromBuffer>
 8007a5e:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8007a60:	697b      	ldr	r3, [r7, #20]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3720      	adds	r7, #32
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}

08007a6a <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b08a      	sub	sp, #40	; 0x28
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	60f8      	str	r0, [r7, #12]
 8007a72:	60b9      	str	r1, [r7, #8]
 8007a74:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10a      	bne.n	8007a92 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8007a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a80:	f383 8811 	msr	BASEPRI, r3
 8007a84:	f3bf 8f6f 	isb	sy
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	61fb      	str	r3, [r7, #28]
}
 8007a8e:	bf00      	nop
 8007a90:	e7fe      	b.n	8007a90 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	bf28      	it	cs
 8007aa6:	4613      	movcs	r3, r2
 8007aa8:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8007aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	441a      	add	r2, r3
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d90a      	bls.n	8007ace <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8007ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	61bb      	str	r3, [r7, #24]
}
 8007aca:	bf00      	nop
 8007acc:	e7fe      	b.n	8007acc <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	699a      	ldr	r2, [r3, #24]
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	4413      	add	r3, r2
 8007ad6:	6a3a      	ldr	r2, [r7, #32]
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f003 f8ae 	bl	800ac3c <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d91c      	bls.n	8007b22 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	1ad2      	subs	r2, r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d90a      	bls.n	8007b0c <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	617b      	str	r3, [r7, #20]
}
 8007b08:	bf00      	nop
 8007b0a:	e7fe      	b.n	8007b0a <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	6998      	ldr	r0, [r3, #24]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	18d1      	adds	r1, r2, r3
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f003 f88d 	bl	800ac3c <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8007b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4413      	add	r3, r2
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d304      	bcc.n	8007b3e <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b42:	605a      	str	r2, [r3, #4]

	return xCount;
 8007b44:	687b      	ldr	r3, [r7, #4]
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3728      	adds	r7, #40	; 0x28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b08a      	sub	sp, #40	; 0x28
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	60f8      	str	r0, [r7, #12]
 8007b56:	60b9      	str	r1, [r7, #8]
 8007b58:	607a      	str	r2, [r7, #4]
 8007b5a:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	4293      	cmp	r3, r2
 8007b62:	bf28      	it	cs
 8007b64:	4613      	movcs	r3, r2
 8007b66:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d064      	beq.n	8007c38 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	6a3a      	ldr	r2, [r7, #32]
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	bf28      	it	cs
 8007b82:	4613      	movcs	r3, r2
 8007b84:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8007b86:	69fa      	ldr	r2, [r7, #28]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d90a      	bls.n	8007ba4 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	61bb      	str	r3, [r7, #24]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8007ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	441a      	add	r2, r3
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d90a      	bls.n	8007bc8 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	617b      	str	r3, [r7, #20]
}
 8007bc4:	bf00      	nop
 8007bc6:	e7fe      	b.n	8007bc6 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	699a      	ldr	r2, [r3, #24]
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	4413      	add	r3, r2
 8007bd0:	69fa      	ldr	r2, [r7, #28]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	68b8      	ldr	r0, [r7, #8]
 8007bd6:	f003 f831 	bl	800ac3c <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8007bda:	6a3a      	ldr	r2, [r7, #32]
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d919      	bls.n	8007c16 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8007be2:	6a3a      	ldr	r2, [r7, #32]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d90a      	bls.n	8007c00 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	613b      	str	r3, [r7, #16]
}
 8007bfc:	bf00      	nop
 8007bfe:	e7fe      	b.n	8007bfe <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	18d0      	adds	r0, r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6999      	ldr	r1, [r3, #24]
 8007c0a:	6a3a      	ldr	r2, [r7, #32]
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	461a      	mov	r2, r3
 8007c12:	f003 f813 	bl	800ac3c <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8007c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d304      	bcc.n	8007c32 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c36:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8007c38:	6a3b      	ldr	r3, [r7, #32]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3728      	adds	r7, #40	; 0x28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8007c42:	b480      	push	{r7}
 8007c44:	b085      	sub	sp, #20
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	4413      	add	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d304      	bcc.n	8007c74 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	689b      	ldr	r3, [r3, #8]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8007c74:	68fb      	ldr	r3, [r7, #12]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b086      	sub	sp, #24
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	607a      	str	r2, [r7, #4]
 8007c8e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8007c90:	2355      	movs	r3, #85	; 0x55
 8007c92:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	6979      	ldr	r1, [r7, #20]
 8007c98:	68b8      	ldr	r0, [r7, #8]
 8007c9a:	f002 ffdd 	bl	800ac58 <memset>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d00a      	beq.n	8007cbc <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8007ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007caa:	f383 8811 	msr	BASEPRI, r3
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f3bf 8f4f 	dsb	sy
 8007cb6:	613b      	str	r3, [r7, #16]
}
 8007cb8:	bf00      	nop
 8007cba:	e7fe      	b.n	8007cba <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8007cbc:	2224      	movs	r2, #36	; 0x24
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f002 ffc9 	bl	800ac58 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007cde:	771a      	strb	r2, [r3, #28]
}
 8007ce0:	bf00      	nop
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08e      	sub	sp, #56	; 0x38
 8007cec:	af04      	add	r7, sp, #16
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
 8007cf4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d10a      	bne.n	8007d12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d00:	f383 8811 	msr	BASEPRI, r3
 8007d04:	f3bf 8f6f 	isb	sy
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	623b      	str	r3, [r7, #32]
}
 8007d0e:	bf00      	nop
 8007d10:	e7fe      	b.n	8007d10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10a      	bne.n	8007d2e <xTaskCreateStatic+0x46>
	__asm volatile
 8007d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	61fb      	str	r3, [r7, #28]
}
 8007d2a:	bf00      	nop
 8007d2c:	e7fe      	b.n	8007d2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007d2e:	23cc      	movs	r3, #204	; 0xcc
 8007d30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	2bcc      	cmp	r3, #204	; 0xcc
 8007d36:	d00a      	beq.n	8007d4e <xTaskCreateStatic+0x66>
	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3c:	f383 8811 	msr	BASEPRI, r3
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	f3bf 8f4f 	dsb	sy
 8007d48:	61bb      	str	r3, [r7, #24]
}
 8007d4a:	bf00      	nop
 8007d4c:	e7fe      	b.n	8007d4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d01e      	beq.n	8007d94 <xTaskCreateStatic+0xac>
 8007d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d01b      	beq.n	8007d94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	2202      	movs	r2, #2
 8007d6a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d6e:	2300      	movs	r3, #0
 8007d70:	9303      	str	r3, [sp, #12]
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	9302      	str	r3, [sp, #8]
 8007d76:	f107 0314 	add.w	r3, r7, #20
 8007d7a:	9301      	str	r3, [sp, #4]
 8007d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	68b9      	ldr	r1, [r7, #8]
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 f850 	bl	8007e2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d8e:	f000 f8f3 	bl	8007f78 <prvAddNewTaskToReadyList>
 8007d92:	e001      	b.n	8007d98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007d94:	2300      	movs	r3, #0
 8007d96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d98:	697b      	ldr	r3, [r7, #20]
	}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3728      	adds	r7, #40	; 0x28
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}

08007da2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007da2:	b580      	push	{r7, lr}
 8007da4:	b08c      	sub	sp, #48	; 0x30
 8007da6:	af04      	add	r7, sp, #16
 8007da8:	60f8      	str	r0, [r7, #12]
 8007daa:	60b9      	str	r1, [r7, #8]
 8007dac:	603b      	str	r3, [r7, #0]
 8007dae:	4613      	mov	r3, r2
 8007db0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007db2:	88fb      	ldrh	r3, [r7, #6]
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f001 ff8e 	bl	8009cd8 <pvPortMalloc>
 8007dbc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00e      	beq.n	8007de2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007dc4:	20cc      	movs	r0, #204	; 0xcc
 8007dc6:	f001 ff87 	bl	8009cd8 <pvPortMalloc>
 8007dca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d003      	beq.n	8007dda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	631a      	str	r2, [r3, #48]	; 0x30
 8007dd8:	e005      	b.n	8007de6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007dda:	6978      	ldr	r0, [r7, #20]
 8007ddc:	f002 f848 	bl	8009e70 <vPortFree>
 8007de0:	e001      	b.n	8007de6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007de2:	2300      	movs	r3, #0
 8007de4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d017      	beq.n	8007e1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007df4:	88fa      	ldrh	r2, [r7, #6]
 8007df6:	2300      	movs	r3, #0
 8007df8:	9303      	str	r3, [sp, #12]
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	9302      	str	r3, [sp, #8]
 8007dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e00:	9301      	str	r3, [sp, #4]
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68b9      	ldr	r1, [r7, #8]
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f000 f80e 	bl	8007e2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e10:	69f8      	ldr	r0, [r7, #28]
 8007e12:	f000 f8b1 	bl	8007f78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007e16:	2301      	movs	r3, #1
 8007e18:	61bb      	str	r3, [r7, #24]
 8007e1a:	e002      	b.n	8007e22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007e1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007e22:	69bb      	ldr	r3, [r7, #24]
	}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3720      	adds	r7, #32
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	461a      	mov	r2, r3
 8007e44:	21a5      	movs	r1, #165	; 0xa5
 8007e46:	f002 ff07 	bl	800ac58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007e54:	3b01      	subs	r3, #1
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	f023 0307 	bic.w	r3, r3, #7
 8007e62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	f003 0307 	and.w	r3, r3, #7
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	f383 8811 	msr	BASEPRI, r3
 8007e76:	f3bf 8f6f 	isb	sy
 8007e7a:	f3bf 8f4f 	dsb	sy
 8007e7e:	617b      	str	r3, [r7, #20]
}
 8007e80:	bf00      	nop
 8007e82:	e7fe      	b.n	8007e82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d01f      	beq.n	8007eca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	61fb      	str	r3, [r7, #28]
 8007e8e:	e012      	b.n	8007eb6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	4413      	add	r3, r2
 8007e96:	7819      	ldrb	r1, [r3, #0]
 8007e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	4413      	add	r3, r2
 8007e9e:	3334      	adds	r3, #52	; 0x34
 8007ea0:	460a      	mov	r2, r1
 8007ea2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007ea4:	68ba      	ldr	r2, [r7, #8]
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	4413      	add	r3, r2
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d006      	beq.n	8007ebe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	61fb      	str	r3, [r7, #28]
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	2b1f      	cmp	r3, #31
 8007eba:	d9e9      	bls.n	8007e90 <prvInitialiseNewTask+0x64>
 8007ebc:	e000      	b.n	8007ec0 <prvInitialiseNewTask+0x94>
			{
				break;
 8007ebe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007ec8:	e003      	b.n	8007ed2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	2b37      	cmp	r3, #55	; 0x37
 8007ed6:	d901      	bls.n	8007edc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007ed8:	2337      	movs	r3, #55	; 0x37
 8007eda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ee6:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	2200      	movs	r2, #0
 8007eec:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	3304      	adds	r3, #4
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fe fc4c 	bl	8006790 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	3318      	adds	r3, #24
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe fc47 	bl	8006790 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f22:	2200      	movs	r2, #0
 8007f24:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2a:	3364      	adds	r3, #100	; 0x64
 8007f2c:	2260      	movs	r2, #96	; 0x60
 8007f2e:	2100      	movs	r1, #0
 8007f30:	4618      	mov	r0, r3
 8007f32:	f002 fe91 	bl	800ac58 <memset>
 8007f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f38:	4a0c      	ldr	r2, [pc, #48]	; (8007f6c <prvInitialiseNewTask+0x140>)
 8007f3a:	669a      	str	r2, [r3, #104]	; 0x68
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3e:	4a0c      	ldr	r2, [pc, #48]	; (8007f70 <prvInitialiseNewTask+0x144>)
 8007f40:	66da      	str	r2, [r3, #108]	; 0x6c
 8007f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f44:	4a0b      	ldr	r2, [pc, #44]	; (8007f74 <prvInitialiseNewTask+0x148>)
 8007f46:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f48:	683a      	ldr	r2, [r7, #0]
 8007f4a:	68f9      	ldr	r1, [r7, #12]
 8007f4c:	69b8      	ldr	r0, [r7, #24]
 8007f4e:	f001 fc77 	bl	8009840 <pxPortInitialiseStack>
 8007f52:	4602      	mov	r2, r0
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d002      	beq.n	8007f64 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f64:	bf00      	nop
 8007f66:	3720      	adds	r7, #32
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	0800aee8 	.word	0x0800aee8
 8007f70:	0800af08 	.word	0x0800af08
 8007f74:	0800aec8 	.word	0x0800aec8

08007f78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f80:	f001 fd88 	bl	8009a94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f84:	4b2d      	ldr	r3, [pc, #180]	; (800803c <prvAddNewTaskToReadyList+0xc4>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	4a2c      	ldr	r2, [pc, #176]	; (800803c <prvAddNewTaskToReadyList+0xc4>)
 8007f8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f8e:	4b2c      	ldr	r3, [pc, #176]	; (8008040 <prvAddNewTaskToReadyList+0xc8>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d109      	bne.n	8007faa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f96:	4a2a      	ldr	r2, [pc, #168]	; (8008040 <prvAddNewTaskToReadyList+0xc8>)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f9c:	4b27      	ldr	r3, [pc, #156]	; (800803c <prvAddNewTaskToReadyList+0xc4>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d110      	bne.n	8007fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007fa4:	f000 fc26 	bl	80087f4 <prvInitialiseTaskLists>
 8007fa8:	e00d      	b.n	8007fc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007faa:	4b26      	ldr	r3, [pc, #152]	; (8008044 <prvAddNewTaskToReadyList+0xcc>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d109      	bne.n	8007fc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007fb2:	4b23      	ldr	r3, [pc, #140]	; (8008040 <prvAddNewTaskToReadyList+0xc8>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d802      	bhi.n	8007fc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007fc0:	4a1f      	ldr	r2, [pc, #124]	; (8008040 <prvAddNewTaskToReadyList+0xc8>)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007fc6:	4b20      	ldr	r3, [pc, #128]	; (8008048 <prvAddNewTaskToReadyList+0xd0>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	4a1e      	ldr	r2, [pc, #120]	; (8008048 <prvAddNewTaskToReadyList+0xd0>)
 8007fce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007fd0:	4b1d      	ldr	r3, [pc, #116]	; (8008048 <prvAddNewTaskToReadyList+0xd0>)
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fdc:	4b1b      	ldr	r3, [pc, #108]	; (800804c <prvAddNewTaskToReadyList+0xd4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d903      	bls.n	8007fec <prvAddNewTaskToReadyList+0x74>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe8:	4a18      	ldr	r2, [pc, #96]	; (800804c <prvAddNewTaskToReadyList+0xd4>)
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff0:	4613      	mov	r3, r2
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	4413      	add	r3, r2
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	4a15      	ldr	r2, [pc, #84]	; (8008050 <prvAddNewTaskToReadyList+0xd8>)
 8007ffa:	441a      	add	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	3304      	adds	r3, #4
 8008000:	4619      	mov	r1, r3
 8008002:	4610      	mov	r0, r2
 8008004:	f7fe fbd1 	bl	80067aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008008:	f001 fd74 	bl	8009af4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800800c:	4b0d      	ldr	r3, [pc, #52]	; (8008044 <prvAddNewTaskToReadyList+0xcc>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00e      	beq.n	8008032 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008014:	4b0a      	ldr	r3, [pc, #40]	; (8008040 <prvAddNewTaskToReadyList+0xc8>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	429a      	cmp	r2, r3
 8008020:	d207      	bcs.n	8008032 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008022:	4b0c      	ldr	r3, [pc, #48]	; (8008054 <prvAddNewTaskToReadyList+0xdc>)
 8008024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20000e48 	.word	0x20000e48
 8008040:	20000974 	.word	0x20000974
 8008044:	20000e54 	.word	0x20000e54
 8008048:	20000e64 	.word	0x20000e64
 800804c:	20000e50 	.word	0x20000e50
 8008050:	20000978 	.word	0x20000978
 8008054:	e000ed04 	.word	0xe000ed04

08008058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d017      	beq.n	800809a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800806a:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <vTaskDelay+0x60>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <vTaskDelay+0x30>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	60bb      	str	r3, [r7, #8]
}
 8008084:	bf00      	nop
 8008086:	e7fe      	b.n	8008086 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008088:	f000 f88a 	bl	80081a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800808c:	2100      	movs	r1, #0
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f001 f834 	bl	80090fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008094:	f000 f892 	bl	80081bc <xTaskResumeAll>
 8008098:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d107      	bne.n	80080b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80080a0:	4b06      	ldr	r3, [pc, #24]	; (80080bc <vTaskDelay+0x64>)
 80080a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080b0:	bf00      	nop
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	20000e70 	.word	0x20000e70
 80080bc:	e000ed04 	.word	0xe000ed04

080080c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b08a      	sub	sp, #40	; 0x28
 80080c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80080c6:	2300      	movs	r3, #0
 80080c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80080ce:	463a      	mov	r2, r7
 80080d0:	1d39      	adds	r1, r7, #4
 80080d2:	f107 0308 	add.w	r3, r7, #8
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fe fb06 	bl	80066e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	9202      	str	r2, [sp, #8]
 80080e4:	9301      	str	r3, [sp, #4]
 80080e6:	2300      	movs	r3, #0
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	2300      	movs	r3, #0
 80080ec:	460a      	mov	r2, r1
 80080ee:	4924      	ldr	r1, [pc, #144]	; (8008180 <vTaskStartScheduler+0xc0>)
 80080f0:	4824      	ldr	r0, [pc, #144]	; (8008184 <vTaskStartScheduler+0xc4>)
 80080f2:	f7ff fdf9 	bl	8007ce8 <xTaskCreateStatic>
 80080f6:	4603      	mov	r3, r0
 80080f8:	4a23      	ldr	r2, [pc, #140]	; (8008188 <vTaskStartScheduler+0xc8>)
 80080fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080fc:	4b22      	ldr	r3, [pc, #136]	; (8008188 <vTaskStartScheduler+0xc8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008104:	2301      	movs	r3, #1
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e001      	b.n	800810e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800810a:	2300      	movs	r3, #0
 800810c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2b01      	cmp	r3, #1
 8008112:	d102      	bne.n	800811a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008114:	f001 f846 	bl	80091a4 <xTimerCreateTimerTask>
 8008118:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d11b      	bne.n	8008158 <vTaskStartScheduler+0x98>
	__asm volatile
 8008120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008124:	f383 8811 	msr	BASEPRI, r3
 8008128:	f3bf 8f6f 	isb	sy
 800812c:	f3bf 8f4f 	dsb	sy
 8008130:	613b      	str	r3, [r7, #16]
}
 8008132:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008134:	4b15      	ldr	r3, [pc, #84]	; (800818c <vTaskStartScheduler+0xcc>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3364      	adds	r3, #100	; 0x64
 800813a:	4a15      	ldr	r2, [pc, #84]	; (8008190 <vTaskStartScheduler+0xd0>)
 800813c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800813e:	4b15      	ldr	r3, [pc, #84]	; (8008194 <vTaskStartScheduler+0xd4>)
 8008140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008144:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008146:	4b14      	ldr	r3, [pc, #80]	; (8008198 <vTaskStartScheduler+0xd8>)
 8008148:	2201      	movs	r2, #1
 800814a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800814c:	4b13      	ldr	r3, [pc, #76]	; (800819c <vTaskStartScheduler+0xdc>)
 800814e:	2200      	movs	r2, #0
 8008150:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008152:	f001 fbfd 	bl	8009950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008156:	e00e      	b.n	8008176 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800815e:	d10a      	bne.n	8008176 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	60fb      	str	r3, [r7, #12]
}
 8008172:	bf00      	nop
 8008174:	e7fe      	b.n	8008174 <vTaskStartScheduler+0xb4>
}
 8008176:	bf00      	nop
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	0800ae34 	.word	0x0800ae34
 8008184:	080087c5 	.word	0x080087c5
 8008188:	20000e6c 	.word	0x20000e6c
 800818c:	20000974 	.word	0x20000974
 8008190:	20000100 	.word	0x20000100
 8008194:	20000e68 	.word	0x20000e68
 8008198:	20000e54 	.word	0x20000e54
 800819c:	20000e4c 	.word	0x20000e4c

080081a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081a0:	b480      	push	{r7}
 80081a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80081a4:	4b04      	ldr	r3, [pc, #16]	; (80081b8 <vTaskSuspendAll+0x18>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3301      	adds	r3, #1
 80081aa:	4a03      	ldr	r2, [pc, #12]	; (80081b8 <vTaskSuspendAll+0x18>)
 80081ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80081ae:	bf00      	nop
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr
 80081b8:	20000e70 	.word	0x20000e70

080081bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80081ca:	4b42      	ldr	r3, [pc, #264]	; (80082d4 <xTaskResumeAll+0x118>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10a      	bne.n	80081e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	603b      	str	r3, [r7, #0]
}
 80081e4:	bf00      	nop
 80081e6:	e7fe      	b.n	80081e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081e8:	f001 fc54 	bl	8009a94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081ec:	4b39      	ldr	r3, [pc, #228]	; (80082d4 <xTaskResumeAll+0x118>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3b01      	subs	r3, #1
 80081f2:	4a38      	ldr	r2, [pc, #224]	; (80082d4 <xTaskResumeAll+0x118>)
 80081f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081f6:	4b37      	ldr	r3, [pc, #220]	; (80082d4 <xTaskResumeAll+0x118>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d162      	bne.n	80082c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081fe:	4b36      	ldr	r3, [pc, #216]	; (80082d8 <xTaskResumeAll+0x11c>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d05e      	beq.n	80082c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008206:	e02f      	b.n	8008268 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008208:	4b34      	ldr	r3, [pc, #208]	; (80082dc <xTaskResumeAll+0x120>)
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3318      	adds	r3, #24
 8008214:	4618      	mov	r0, r3
 8008216:	f7fe fb25 	bl	8006864 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3304      	adds	r3, #4
 800821e:	4618      	mov	r0, r3
 8008220:	f7fe fb20 	bl	8006864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008228:	4b2d      	ldr	r3, [pc, #180]	; (80082e0 <xTaskResumeAll+0x124>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	429a      	cmp	r2, r3
 800822e:	d903      	bls.n	8008238 <xTaskResumeAll+0x7c>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008234:	4a2a      	ldr	r2, [pc, #168]	; (80082e0 <xTaskResumeAll+0x124>)
 8008236:	6013      	str	r3, [r2, #0]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823c:	4613      	mov	r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	4413      	add	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4a27      	ldr	r2, [pc, #156]	; (80082e4 <xTaskResumeAll+0x128>)
 8008246:	441a      	add	r2, r3
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3304      	adds	r3, #4
 800824c:	4619      	mov	r1, r3
 800824e:	4610      	mov	r0, r2
 8008250:	f7fe faab 	bl	80067aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008258:	4b23      	ldr	r3, [pc, #140]	; (80082e8 <xTaskResumeAll+0x12c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825e:	429a      	cmp	r2, r3
 8008260:	d302      	bcc.n	8008268 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008262:	4b22      	ldr	r3, [pc, #136]	; (80082ec <xTaskResumeAll+0x130>)
 8008264:	2201      	movs	r2, #1
 8008266:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008268:	4b1c      	ldr	r3, [pc, #112]	; (80082dc <xTaskResumeAll+0x120>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1cb      	bne.n	8008208 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008276:	f000 fb5f 	bl	8008938 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800827a:	4b1d      	ldr	r3, [pc, #116]	; (80082f0 <xTaskResumeAll+0x134>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d010      	beq.n	80082a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008286:	f000 f847 	bl	8008318 <xTaskIncrementTick>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d002      	beq.n	8008296 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008290:	4b16      	ldr	r3, [pc, #88]	; (80082ec <xTaskResumeAll+0x130>)
 8008292:	2201      	movs	r2, #1
 8008294:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3b01      	subs	r3, #1
 800829a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1f1      	bne.n	8008286 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80082a2:	4b13      	ldr	r3, [pc, #76]	; (80082f0 <xTaskResumeAll+0x134>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082a8:	4b10      	ldr	r3, [pc, #64]	; (80082ec <xTaskResumeAll+0x130>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d009      	beq.n	80082c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80082b0:	2301      	movs	r3, #1
 80082b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80082b4:	4b0f      	ldr	r3, [pc, #60]	; (80082f4 <xTaskResumeAll+0x138>)
 80082b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ba:	601a      	str	r2, [r3, #0]
 80082bc:	f3bf 8f4f 	dsb	sy
 80082c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082c4:	f001 fc16 	bl	8009af4 <vPortExitCritical>

	return xAlreadyYielded;
 80082c8:	68bb      	ldr	r3, [r7, #8]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20000e70 	.word	0x20000e70
 80082d8:	20000e48 	.word	0x20000e48
 80082dc:	20000e08 	.word	0x20000e08
 80082e0:	20000e50 	.word	0x20000e50
 80082e4:	20000978 	.word	0x20000978
 80082e8:	20000974 	.word	0x20000974
 80082ec:	20000e5c 	.word	0x20000e5c
 80082f0:	20000e58 	.word	0x20000e58
 80082f4:	e000ed04 	.word	0xe000ed04

080082f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80082f8:	b480      	push	{r7}
 80082fa:	b083      	sub	sp, #12
 80082fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <xTaskGetTickCount+0x1c>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008304:	687b      	ldr	r3, [r7, #4]
}
 8008306:	4618      	mov	r0, r3
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	20000e4c 	.word	0x20000e4c

08008318 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800831e:	2300      	movs	r3, #0
 8008320:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008322:	4b4f      	ldr	r3, [pc, #316]	; (8008460 <xTaskIncrementTick+0x148>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	f040 808f 	bne.w	800844a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800832c:	4b4d      	ldr	r3, [pc, #308]	; (8008464 <xTaskIncrementTick+0x14c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	3301      	adds	r3, #1
 8008332:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008334:	4a4b      	ldr	r2, [pc, #300]	; (8008464 <xTaskIncrementTick+0x14c>)
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d120      	bne.n	8008382 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008340:	4b49      	ldr	r3, [pc, #292]	; (8008468 <xTaskIncrementTick+0x150>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <xTaskIncrementTick+0x48>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	603b      	str	r3, [r7, #0]
}
 800835c:	bf00      	nop
 800835e:	e7fe      	b.n	800835e <xTaskIncrementTick+0x46>
 8008360:	4b41      	ldr	r3, [pc, #260]	; (8008468 <xTaskIncrementTick+0x150>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	60fb      	str	r3, [r7, #12]
 8008366:	4b41      	ldr	r3, [pc, #260]	; (800846c <xTaskIncrementTick+0x154>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a3f      	ldr	r2, [pc, #252]	; (8008468 <xTaskIncrementTick+0x150>)
 800836c:	6013      	str	r3, [r2, #0]
 800836e:	4a3f      	ldr	r2, [pc, #252]	; (800846c <xTaskIncrementTick+0x154>)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	4b3e      	ldr	r3, [pc, #248]	; (8008470 <xTaskIncrementTick+0x158>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	3301      	adds	r3, #1
 800837a:	4a3d      	ldr	r2, [pc, #244]	; (8008470 <xTaskIncrementTick+0x158>)
 800837c:	6013      	str	r3, [r2, #0]
 800837e:	f000 fadb 	bl	8008938 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008382:	4b3c      	ldr	r3, [pc, #240]	; (8008474 <xTaskIncrementTick+0x15c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	429a      	cmp	r2, r3
 800838a:	d349      	bcc.n	8008420 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800838c:	4b36      	ldr	r3, [pc, #216]	; (8008468 <xTaskIncrementTick+0x150>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d104      	bne.n	80083a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008396:	4b37      	ldr	r3, [pc, #220]	; (8008474 <xTaskIncrementTick+0x15c>)
 8008398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800839c:	601a      	str	r2, [r3, #0]
					break;
 800839e:	e03f      	b.n	8008420 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083a0:	4b31      	ldr	r3, [pc, #196]	; (8008468 <xTaskIncrementTick+0x150>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d203      	bcs.n	80083c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083b8:	4a2e      	ldr	r2, [pc, #184]	; (8008474 <xTaskIncrementTick+0x15c>)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80083be:	e02f      	b.n	8008420 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	3304      	adds	r3, #4
 80083c4:	4618      	mov	r0, r3
 80083c6:	f7fe fa4d 	bl	8006864 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d004      	beq.n	80083dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	3318      	adds	r3, #24
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fa44 	bl	8006864 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e0:	4b25      	ldr	r3, [pc, #148]	; (8008478 <xTaskIncrementTick+0x160>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d903      	bls.n	80083f0 <xTaskIncrementTick+0xd8>
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	4a22      	ldr	r2, [pc, #136]	; (8008478 <xTaskIncrementTick+0x160>)
 80083ee:	6013      	str	r3, [r2, #0]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f4:	4613      	mov	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4413      	add	r3, r2
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	4a1f      	ldr	r2, [pc, #124]	; (800847c <xTaskIncrementTick+0x164>)
 80083fe:	441a      	add	r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	3304      	adds	r3, #4
 8008404:	4619      	mov	r1, r3
 8008406:	4610      	mov	r0, r2
 8008408:	f7fe f9cf 	bl	80067aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008410:	4b1b      	ldr	r3, [pc, #108]	; (8008480 <xTaskIncrementTick+0x168>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008416:	429a      	cmp	r2, r3
 8008418:	d3b8      	bcc.n	800838c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800841a:	2301      	movs	r3, #1
 800841c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800841e:	e7b5      	b.n	800838c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008420:	4b17      	ldr	r3, [pc, #92]	; (8008480 <xTaskIncrementTick+0x168>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008426:	4915      	ldr	r1, [pc, #84]	; (800847c <xTaskIncrementTick+0x164>)
 8008428:	4613      	mov	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	440b      	add	r3, r1
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d901      	bls.n	800843c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008438:	2301      	movs	r3, #1
 800843a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800843c:	4b11      	ldr	r3, [pc, #68]	; (8008484 <xTaskIncrementTick+0x16c>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d007      	beq.n	8008454 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008444:	2301      	movs	r3, #1
 8008446:	617b      	str	r3, [r7, #20]
 8008448:	e004      	b.n	8008454 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800844a:	4b0f      	ldr	r3, [pc, #60]	; (8008488 <xTaskIncrementTick+0x170>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	3301      	adds	r3, #1
 8008450:	4a0d      	ldr	r2, [pc, #52]	; (8008488 <xTaskIncrementTick+0x170>)
 8008452:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008454:	697b      	ldr	r3, [r7, #20]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3718      	adds	r7, #24
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20000e70 	.word	0x20000e70
 8008464:	20000e4c 	.word	0x20000e4c
 8008468:	20000e00 	.word	0x20000e00
 800846c:	20000e04 	.word	0x20000e04
 8008470:	20000e60 	.word	0x20000e60
 8008474:	20000e68 	.word	0x20000e68
 8008478:	20000e50 	.word	0x20000e50
 800847c:	20000978 	.word	0x20000978
 8008480:	20000974 	.word	0x20000974
 8008484:	20000e5c 	.word	0x20000e5c
 8008488:	20000e58 	.word	0x20000e58

0800848c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008492:	4b2a      	ldr	r3, [pc, #168]	; (800853c <vTaskSwitchContext+0xb0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d003      	beq.n	80084a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800849a:	4b29      	ldr	r3, [pc, #164]	; (8008540 <vTaskSwitchContext+0xb4>)
 800849c:	2201      	movs	r2, #1
 800849e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084a0:	e046      	b.n	8008530 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80084a2:	4b27      	ldr	r3, [pc, #156]	; (8008540 <vTaskSwitchContext+0xb4>)
 80084a4:	2200      	movs	r2, #0
 80084a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084a8:	4b26      	ldr	r3, [pc, #152]	; (8008544 <vTaskSwitchContext+0xb8>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	60fb      	str	r3, [r7, #12]
 80084ae:	e010      	b.n	80084d2 <vTaskSwitchContext+0x46>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10a      	bne.n	80084cc <vTaskSwitchContext+0x40>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	607b      	str	r3, [r7, #4]
}
 80084c8:	bf00      	nop
 80084ca:	e7fe      	b.n	80084ca <vTaskSwitchContext+0x3e>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	3b01      	subs	r3, #1
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	491d      	ldr	r1, [pc, #116]	; (8008548 <vTaskSwitchContext+0xbc>)
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	440b      	add	r3, r1
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d0e4      	beq.n	80084b0 <vTaskSwitchContext+0x24>
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	4613      	mov	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	009b      	lsls	r3, r3, #2
 80084f0:	4a15      	ldr	r2, [pc, #84]	; (8008548 <vTaskSwitchContext+0xbc>)
 80084f2:	4413      	add	r3, r2
 80084f4:	60bb      	str	r3, [r7, #8]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	605a      	str	r2, [r3, #4]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	3308      	adds	r3, #8
 8008508:	429a      	cmp	r2, r3
 800850a:	d104      	bne.n	8008516 <vTaskSwitchContext+0x8a>
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	685a      	ldr	r2, [r3, #4]
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	605a      	str	r2, [r3, #4]
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	4a0b      	ldr	r2, [pc, #44]	; (800854c <vTaskSwitchContext+0xc0>)
 800851e:	6013      	str	r3, [r2, #0]
 8008520:	4a08      	ldr	r2, [pc, #32]	; (8008544 <vTaskSwitchContext+0xb8>)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008526:	4b09      	ldr	r3, [pc, #36]	; (800854c <vTaskSwitchContext+0xc0>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	3364      	adds	r3, #100	; 0x64
 800852c:	4a08      	ldr	r2, [pc, #32]	; (8008550 <vTaskSwitchContext+0xc4>)
 800852e:	6013      	str	r3, [r2, #0]
}
 8008530:	bf00      	nop
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	20000e70 	.word	0x20000e70
 8008540:	20000e5c 	.word	0x20000e5c
 8008544:	20000e50 	.word	0x20000e50
 8008548:	20000978 	.word	0x20000978
 800854c:	20000974 	.word	0x20000974
 8008550:	20000100 	.word	0x20000100

08008554 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10a      	bne.n	800857a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	60fb      	str	r3, [r7, #12]
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800857a:	4b07      	ldr	r3, [pc, #28]	; (8008598 <vTaskPlaceOnEventList+0x44>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3318      	adds	r3, #24
 8008580:	4619      	mov	r1, r3
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f7fe f935 	bl	80067f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008588:	2101      	movs	r1, #1
 800858a:	6838      	ldr	r0, [r7, #0]
 800858c:	f000 fdb6 	bl	80090fc <prvAddCurrentTaskToDelayedList>
}
 8008590:	bf00      	nop
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	20000974 	.word	0x20000974

0800859c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10a      	bne.n	80085c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	617b      	str	r3, [r7, #20]
}
 80085c0:	bf00      	nop
 80085c2:	e7fe      	b.n	80085c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085c4:	4b0a      	ldr	r3, [pc, #40]	; (80085f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3318      	adds	r3, #24
 80085ca:	4619      	mov	r1, r3
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f7fe f8ec 	bl	80067aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d002      	beq.n	80085de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80085d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80085de:	6879      	ldr	r1, [r7, #4]
 80085e0:	68b8      	ldr	r0, [r7, #8]
 80085e2:	f000 fd8b 	bl	80090fc <prvAddCurrentTaskToDelayedList>
	}
 80085e6:	bf00      	nop
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	20000974 	.word	0x20000974

080085f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b086      	sub	sp, #24
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10a      	bne.n	8008620 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	60fb      	str	r3, [r7, #12]
}
 800861c:	bf00      	nop
 800861e:	e7fe      	b.n	800861e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	3318      	adds	r3, #24
 8008624:	4618      	mov	r0, r3
 8008626:	f7fe f91d 	bl	8006864 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800862a:	4b1e      	ldr	r3, [pc, #120]	; (80086a4 <xTaskRemoveFromEventList+0xb0>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d11d      	bne.n	800866e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	3304      	adds	r3, #4
 8008636:	4618      	mov	r0, r3
 8008638:	f7fe f914 	bl	8006864 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008640:	4b19      	ldr	r3, [pc, #100]	; (80086a8 <xTaskRemoveFromEventList+0xb4>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	429a      	cmp	r2, r3
 8008646:	d903      	bls.n	8008650 <xTaskRemoveFromEventList+0x5c>
 8008648:	693b      	ldr	r3, [r7, #16]
 800864a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864c:	4a16      	ldr	r2, [pc, #88]	; (80086a8 <xTaskRemoveFromEventList+0xb4>)
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008654:	4613      	mov	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4a13      	ldr	r2, [pc, #76]	; (80086ac <xTaskRemoveFromEventList+0xb8>)
 800865e:	441a      	add	r2, r3
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	3304      	adds	r3, #4
 8008664:	4619      	mov	r1, r3
 8008666:	4610      	mov	r0, r2
 8008668:	f7fe f89f 	bl	80067aa <vListInsertEnd>
 800866c:	e005      	b.n	800867a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	3318      	adds	r3, #24
 8008672:	4619      	mov	r1, r3
 8008674:	480e      	ldr	r0, [pc, #56]	; (80086b0 <xTaskRemoveFromEventList+0xbc>)
 8008676:	f7fe f898 	bl	80067aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800867e:	4b0d      	ldr	r3, [pc, #52]	; (80086b4 <xTaskRemoveFromEventList+0xc0>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008684:	429a      	cmp	r2, r3
 8008686:	d905      	bls.n	8008694 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008688:	2301      	movs	r3, #1
 800868a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800868c:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <xTaskRemoveFromEventList+0xc4>)
 800868e:	2201      	movs	r2, #1
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	e001      	b.n	8008698 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008694:	2300      	movs	r3, #0
 8008696:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008698:	697b      	ldr	r3, [r7, #20]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20000e70 	.word	0x20000e70
 80086a8:	20000e50 	.word	0x20000e50
 80086ac:	20000978 	.word	0x20000978
 80086b0:	20000e08 	.word	0x20000e08
 80086b4:	20000974 	.word	0x20000974
 80086b8:	20000e5c 	.word	0x20000e5c

080086bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086c4:	4b06      	ldr	r3, [pc, #24]	; (80086e0 <vTaskInternalSetTimeOutState+0x24>)
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80086cc:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <vTaskInternalSetTimeOutState+0x28>)
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	605a      	str	r2, [r3, #4]
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr
 80086e0:	20000e60 	.word	0x20000e60
 80086e4:	20000e4c 	.word	0x20000e4c

080086e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b088      	sub	sp, #32
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d10a      	bne.n	800870e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80086f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fc:	f383 8811 	msr	BASEPRI, r3
 8008700:	f3bf 8f6f 	isb	sy
 8008704:	f3bf 8f4f 	dsb	sy
 8008708:	613b      	str	r3, [r7, #16]
}
 800870a:	bf00      	nop
 800870c:	e7fe      	b.n	800870c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10a      	bne.n	800872a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008718:	f383 8811 	msr	BASEPRI, r3
 800871c:	f3bf 8f6f 	isb	sy
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	60fb      	str	r3, [r7, #12]
}
 8008726:	bf00      	nop
 8008728:	e7fe      	b.n	8008728 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800872a:	f001 f9b3 	bl	8009a94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800872e:	4b1d      	ldr	r3, [pc, #116]	; (80087a4 <xTaskCheckForTimeOut+0xbc>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008746:	d102      	bne.n	800874e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008748:	2300      	movs	r3, #0
 800874a:	61fb      	str	r3, [r7, #28]
 800874c:	e023      	b.n	8008796 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	4b15      	ldr	r3, [pc, #84]	; (80087a8 <xTaskCheckForTimeOut+0xc0>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	429a      	cmp	r2, r3
 8008758:	d007      	beq.n	800876a <xTaskCheckForTimeOut+0x82>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	69ba      	ldr	r2, [r7, #24]
 8008760:	429a      	cmp	r2, r3
 8008762:	d302      	bcc.n	800876a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008764:	2301      	movs	r3, #1
 8008766:	61fb      	str	r3, [r7, #28]
 8008768:	e015      	b.n	8008796 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	429a      	cmp	r2, r3
 8008772:	d20b      	bcs.n	800878c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	1ad2      	subs	r2, r2, r3
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f7ff ff9b 	bl	80086bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008786:	2300      	movs	r3, #0
 8008788:	61fb      	str	r3, [r7, #28]
 800878a:	e004      	b.n	8008796 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2200      	movs	r2, #0
 8008790:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008792:	2301      	movs	r3, #1
 8008794:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008796:	f001 f9ad 	bl	8009af4 <vPortExitCritical>

	return xReturn;
 800879a:	69fb      	ldr	r3, [r7, #28]
}
 800879c:	4618      	mov	r0, r3
 800879e:	3720      	adds	r7, #32
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20000e4c 	.word	0x20000e4c
 80087a8:	20000e60 	.word	0x20000e60

080087ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80087ac:	b480      	push	{r7}
 80087ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80087b0:	4b03      	ldr	r3, [pc, #12]	; (80087c0 <vTaskMissedYield+0x14>)
 80087b2:	2201      	movs	r2, #1
 80087b4:	601a      	str	r2, [r3, #0]
}
 80087b6:	bf00      	nop
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	20000e5c 	.word	0x20000e5c

080087c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087cc:	f000 f852 	bl	8008874 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087d0:	4b06      	ldr	r3, [pc, #24]	; (80087ec <prvIdleTask+0x28>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d9f9      	bls.n	80087cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80087d8:	4b05      	ldr	r3, [pc, #20]	; (80087f0 <prvIdleTask+0x2c>)
 80087da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087e8:	e7f0      	b.n	80087cc <prvIdleTask+0x8>
 80087ea:	bf00      	nop
 80087ec:	20000978 	.word	0x20000978
 80087f0:	e000ed04 	.word	0xe000ed04

080087f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087fa:	2300      	movs	r3, #0
 80087fc:	607b      	str	r3, [r7, #4]
 80087fe:	e00c      	b.n	800881a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4a12      	ldr	r2, [pc, #72]	; (8008854 <prvInitialiseTaskLists+0x60>)
 800880c:	4413      	add	r3, r2
 800880e:	4618      	mov	r0, r3
 8008810:	f7fd ff9e 	bl	8006750 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	3301      	adds	r3, #1
 8008818:	607b      	str	r3, [r7, #4]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b37      	cmp	r3, #55	; 0x37
 800881e:	d9ef      	bls.n	8008800 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008820:	480d      	ldr	r0, [pc, #52]	; (8008858 <prvInitialiseTaskLists+0x64>)
 8008822:	f7fd ff95 	bl	8006750 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008826:	480d      	ldr	r0, [pc, #52]	; (800885c <prvInitialiseTaskLists+0x68>)
 8008828:	f7fd ff92 	bl	8006750 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800882c:	480c      	ldr	r0, [pc, #48]	; (8008860 <prvInitialiseTaskLists+0x6c>)
 800882e:	f7fd ff8f 	bl	8006750 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008832:	480c      	ldr	r0, [pc, #48]	; (8008864 <prvInitialiseTaskLists+0x70>)
 8008834:	f7fd ff8c 	bl	8006750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008838:	480b      	ldr	r0, [pc, #44]	; (8008868 <prvInitialiseTaskLists+0x74>)
 800883a:	f7fd ff89 	bl	8006750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800883e:	4b0b      	ldr	r3, [pc, #44]	; (800886c <prvInitialiseTaskLists+0x78>)
 8008840:	4a05      	ldr	r2, [pc, #20]	; (8008858 <prvInitialiseTaskLists+0x64>)
 8008842:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008844:	4b0a      	ldr	r3, [pc, #40]	; (8008870 <prvInitialiseTaskLists+0x7c>)
 8008846:	4a05      	ldr	r2, [pc, #20]	; (800885c <prvInitialiseTaskLists+0x68>)
 8008848:	601a      	str	r2, [r3, #0]
}
 800884a:	bf00      	nop
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
 8008852:	bf00      	nop
 8008854:	20000978 	.word	0x20000978
 8008858:	20000dd8 	.word	0x20000dd8
 800885c:	20000dec 	.word	0x20000dec
 8008860:	20000e08 	.word	0x20000e08
 8008864:	20000e1c 	.word	0x20000e1c
 8008868:	20000e34 	.word	0x20000e34
 800886c:	20000e00 	.word	0x20000e00
 8008870:	20000e04 	.word	0x20000e04

08008874 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800887a:	e019      	b.n	80088b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800887c:	f001 f90a 	bl	8009a94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008880:	4b10      	ldr	r3, [pc, #64]	; (80088c4 <prvCheckTasksWaitingTermination+0x50>)
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	68db      	ldr	r3, [r3, #12]
 8008886:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	3304      	adds	r3, #4
 800888c:	4618      	mov	r0, r3
 800888e:	f7fd ffe9 	bl	8006864 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008892:	4b0d      	ldr	r3, [pc, #52]	; (80088c8 <prvCheckTasksWaitingTermination+0x54>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	3b01      	subs	r3, #1
 8008898:	4a0b      	ldr	r2, [pc, #44]	; (80088c8 <prvCheckTasksWaitingTermination+0x54>)
 800889a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800889c:	4b0b      	ldr	r3, [pc, #44]	; (80088cc <prvCheckTasksWaitingTermination+0x58>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	4a0a      	ldr	r2, [pc, #40]	; (80088cc <prvCheckTasksWaitingTermination+0x58>)
 80088a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80088a6:	f001 f925 	bl	8009af4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f810 	bl	80088d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088b0:	4b06      	ldr	r3, [pc, #24]	; (80088cc <prvCheckTasksWaitingTermination+0x58>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1e1      	bne.n	800887c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088b8:	bf00      	nop
 80088ba:	bf00      	nop
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20000e1c 	.word	0x20000e1c
 80088c8:	20000e48 	.word	0x20000e48
 80088cc:	20000e30 	.word	0x20000e30

080088d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3364      	adds	r3, #100	; 0x64
 80088dc:	4618      	mov	r0, r3
 80088de:	f002 f9d1 	bl	800ac84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d108      	bne.n	80088fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f0:	4618      	mov	r0, r3
 80088f2:	f001 fabd 	bl	8009e70 <vPortFree>
				vPortFree( pxTCB );
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 faba 	bl	8009e70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088fc:	e018      	b.n	8008930 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8008904:	2b01      	cmp	r3, #1
 8008906:	d103      	bne.n	8008910 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f001 fab1 	bl	8009e70 <vPortFree>
	}
 800890e:	e00f      	b.n	8008930 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8008916:	2b02      	cmp	r3, #2
 8008918:	d00a      	beq.n	8008930 <prvDeleteTCB+0x60>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	60fb      	str	r3, [r7, #12]
}
 800892c:	bf00      	nop
 800892e:	e7fe      	b.n	800892e <prvDeleteTCB+0x5e>
	}
 8008930:	bf00      	nop
 8008932:	3710      	adds	r7, #16
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800893e:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <prvResetNextTaskUnblockTime+0x38>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d104      	bne.n	8008952 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008948:	4b0a      	ldr	r3, [pc, #40]	; (8008974 <prvResetNextTaskUnblockTime+0x3c>)
 800894a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800894e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008950:	e008      	b.n	8008964 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008952:	4b07      	ldr	r3, [pc, #28]	; (8008970 <prvResetNextTaskUnblockTime+0x38>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4a04      	ldr	r2, [pc, #16]	; (8008974 <prvResetNextTaskUnblockTime+0x3c>)
 8008962:	6013      	str	r3, [r2, #0]
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	20000e00 	.word	0x20000e00
 8008974:	20000e68 	.word	0x20000e68

08008978 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800897e:	4b05      	ldr	r3, [pc, #20]	; (8008994 <xTaskGetCurrentTaskHandle+0x1c>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008984:	687b      	ldr	r3, [r7, #4]
	}
 8008986:	4618      	mov	r0, r3
 8008988:	370c      	adds	r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	20000974 	.word	0x20000974

08008998 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800899e:	4b0b      	ldr	r3, [pc, #44]	; (80089cc <xTaskGetSchedulerState+0x34>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d102      	bne.n	80089ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089a6:	2301      	movs	r3, #1
 80089a8:	607b      	str	r3, [r7, #4]
 80089aa:	e008      	b.n	80089be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089ac:	4b08      	ldr	r3, [pc, #32]	; (80089d0 <xTaskGetSchedulerState+0x38>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d102      	bne.n	80089ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80089b4:	2302      	movs	r3, #2
 80089b6:	607b      	str	r3, [r7, #4]
 80089b8:	e001      	b.n	80089be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80089ba:	2300      	movs	r3, #0
 80089bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80089be:	687b      	ldr	r3, [r7, #4]
	}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	20000e54 	.word	0x20000e54
 80089d0:	20000e70 	.word	0x20000e70

080089d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80089e0:	2300      	movs	r3, #0
 80089e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d051      	beq.n	8008a8e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ee:	4b2a      	ldr	r3, [pc, #168]	; (8008a98 <xTaskPriorityInherit+0xc4>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d241      	bcs.n	8008a7c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	db06      	blt.n	8008a0e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a00:	4b25      	ldr	r3, [pc, #148]	; (8008a98 <xTaskPriorityInherit+0xc4>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	6959      	ldr	r1, [r3, #20]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a16:	4613      	mov	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4413      	add	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4a1f      	ldr	r2, [pc, #124]	; (8008a9c <xTaskPriorityInherit+0xc8>)
 8008a20:	4413      	add	r3, r2
 8008a22:	4299      	cmp	r1, r3
 8008a24:	d122      	bne.n	8008a6c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fd ff1a 	bl	8006864 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a30:	4b19      	ldr	r3, [pc, #100]	; (8008a98 <xTaskPriorityInherit+0xc4>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3e:	4b18      	ldr	r3, [pc, #96]	; (8008aa0 <xTaskPriorityInherit+0xcc>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d903      	bls.n	8008a4e <xTaskPriorityInherit+0x7a>
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4a:	4a15      	ldr	r2, [pc, #84]	; (8008aa0 <xTaskPriorityInherit+0xcc>)
 8008a4c:	6013      	str	r3, [r2, #0]
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a52:	4613      	mov	r3, r2
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	4413      	add	r3, r2
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	4a10      	ldr	r2, [pc, #64]	; (8008a9c <xTaskPriorityInherit+0xc8>)
 8008a5c:	441a      	add	r2, r3
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	3304      	adds	r3, #4
 8008a62:	4619      	mov	r1, r3
 8008a64:	4610      	mov	r0, r2
 8008a66:	f7fd fea0 	bl	80067aa <vListInsertEnd>
 8008a6a:	e004      	b.n	8008a76 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008a6c:	4b0a      	ldr	r3, [pc, #40]	; (8008a98 <xTaskPriorityInherit+0xc4>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008a76:	2301      	movs	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]
 8008a7a:	e008      	b.n	8008a8e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008a80:	4b05      	ldr	r3, [pc, #20]	; (8008a98 <xTaskPriorityInherit+0xc4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d201      	bcs.n	8008a8e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
	}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}
 8008a98:	20000974 	.word	0x20000974
 8008a9c:	20000978 	.word	0x20000978
 8008aa0:	20000e50 	.word	0x20000e50

08008aa4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d056      	beq.n	8008b68 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008aba:	4b2e      	ldr	r3, [pc, #184]	; (8008b74 <xTaskPriorityDisinherit+0xd0>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d00a      	beq.n	8008ada <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	60fb      	str	r3, [r7, #12]
}
 8008ad6:	bf00      	nop
 8008ad8:	e7fe      	b.n	8008ad8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d10a      	bne.n	8008af8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	60bb      	str	r3, [r7, #8]
}
 8008af4:	bf00      	nop
 8008af6:	e7fe      	b.n	8008af6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008afc:	1e5a      	subs	r2, r3, #1
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d02c      	beq.n	8008b68 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d128      	bne.n	8008b68 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	3304      	adds	r3, #4
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fd fea2 	bl	8006864 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b38:	4b0f      	ldr	r3, [pc, #60]	; (8008b78 <xTaskPriorityDisinherit+0xd4>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d903      	bls.n	8008b48 <xTaskPriorityDisinherit+0xa4>
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b44:	4a0c      	ldr	r2, [pc, #48]	; (8008b78 <xTaskPriorityDisinherit+0xd4>)
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4a09      	ldr	r2, [pc, #36]	; (8008b7c <xTaskPriorityDisinherit+0xd8>)
 8008b56:	441a      	add	r2, r3
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	3304      	adds	r3, #4
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4610      	mov	r0, r2
 8008b60:	f7fd fe23 	bl	80067aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b64:	2301      	movs	r3, #1
 8008b66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b68:	697b      	ldr	r3, [r7, #20]
	}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20000974 	.word	0x20000974
 8008b78:	20000e50 	.word	0x20000e50
 8008b7c:	20000978 	.word	0x20000978

08008b80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b088      	sub	sp, #32
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d06a      	beq.n	8008c6e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d10a      	bne.n	8008bb6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	60fb      	str	r3, [r7, #12]
}
 8008bb2:	bf00      	nop
 8008bb4:	e7fe      	b.n	8008bb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bba:	683a      	ldr	r2, [r7, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d902      	bls.n	8008bc6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	61fb      	str	r3, [r7, #28]
 8008bc4:	e002      	b.n	8008bcc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd0:	69fa      	ldr	r2, [r7, #28]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d04b      	beq.n	8008c6e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008bd6:	69bb      	ldr	r3, [r7, #24]
 8008bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d146      	bne.n	8008c6e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008be0:	4b25      	ldr	r3, [pc, #148]	; (8008c78 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69ba      	ldr	r2, [r7, #24]
 8008be6:	429a      	cmp	r2, r3
 8008be8:	d10a      	bne.n	8008c00 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	60bb      	str	r3, [r7, #8]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008c06:	69bb      	ldr	r3, [r7, #24]
 8008c08:	69fa      	ldr	r2, [r7, #28]
 8008c0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008c0c:	69bb      	ldr	r3, [r7, #24]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	db04      	blt.n	8008c1e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	6959      	ldr	r1, [r3, #20]
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	4613      	mov	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4a13      	ldr	r2, [pc, #76]	; (8008c7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008c2e:	4413      	add	r3, r2
 8008c30:	4299      	cmp	r1, r3
 8008c32:	d11c      	bne.n	8008c6e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c34:	69bb      	ldr	r3, [r7, #24]
 8008c36:	3304      	adds	r3, #4
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f7fd fe13 	bl	8006864 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c42:	4b0f      	ldr	r3, [pc, #60]	; (8008c80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d903      	bls.n	8008c52 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4e:	4a0c      	ldr	r2, [pc, #48]	; (8008c80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008c50:	6013      	str	r3, [r2, #0]
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4a07      	ldr	r2, [pc, #28]	; (8008c7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008c60:	441a      	add	r2, r3
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	3304      	adds	r3, #4
 8008c66:	4619      	mov	r1, r3
 8008c68:	4610      	mov	r0, r2
 8008c6a:	f7fd fd9e 	bl	80067aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008c6e:	bf00      	nop
 8008c70:	3720      	adds	r7, #32
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	20000974 	.word	0x20000974
 8008c7c:	20000978 	.word	0x20000978
 8008c80:	20000e50 	.word	0x20000e50

08008c84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008c88:	4b07      	ldr	r3, [pc, #28]	; (8008ca8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d004      	beq.n	8008c9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008c90:	4b05      	ldr	r3, [pc, #20]	; (8008ca8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008c96:	3201      	adds	r2, #1
 8008c98:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 8008c9a:	4b03      	ldr	r3, [pc, #12]	; (8008ca8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
	}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	20000974 	.word	0x20000974

08008cac <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008cba:	f000 feeb 	bl	8009a94 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008cbe:	4b29      	ldr	r3, [pc, #164]	; (8008d64 <xTaskNotifyWait+0xb8>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d01c      	beq.n	8008d06 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008ccc:	4b25      	ldr	r3, [pc, #148]	; (8008d64 <xTaskNotifyWait+0xb8>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	43d2      	mvns	r2, r2
 8008cd8:	400a      	ands	r2, r1
 8008cda:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008cde:	4b21      	ldr	r3, [pc, #132]	; (8008d64 <xTaskNotifyWait+0xb8>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

				if( xTicksToWait > ( TickType_t ) 0 )
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00b      	beq.n	8008d06 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008cee:	2101      	movs	r1, #1
 8008cf0:	6838      	ldr	r0, [r7, #0]
 8008cf2:	f000 fa03 	bl	80090fc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008cf6:	4b1c      	ldr	r3, [pc, #112]	; (8008d68 <xTaskNotifyWait+0xbc>)
 8008cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cfc:	601a      	str	r2, [r3, #0]
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008d06:	f000 fef5 	bl	8009af4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008d0a:	f000 fec3 	bl	8009a94 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d005      	beq.n	8008d20 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008d14:	4b13      	ldr	r3, [pc, #76]	; (8008d64 <xTaskNotifyWait+0xb8>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008d20:	4b10      	ldr	r3, [pc, #64]	; (8008d64 <xTaskNotifyWait+0xb8>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d002      	beq.n	8008d34 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	617b      	str	r3, [r7, #20]
 8008d32:	e00a      	b.n	8008d4a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008d34:	4b0b      	ldr	r3, [pc, #44]	; (8008d64 <xTaskNotifyWait+0xb8>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	43d2      	mvns	r2, r2
 8008d40:	400a      	ands	r2, r1
 8008d42:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				xReturn = pdTRUE;
 8008d46:	2301      	movs	r3, #1
 8008d48:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d4a:	4b06      	ldr	r3, [pc, #24]	; (8008d64 <xTaskNotifyWait+0xb8>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		}
		taskEXIT_CRITICAL();
 8008d54:	f000 fece 	bl	8009af4 <vPortExitCritical>

		return xReturn;
 8008d58:	697b      	ldr	r3, [r7, #20]
	}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20000974 	.word	0x20000974
 8008d68:	e000ed04 	.word	0xe000ed04

08008d6c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	; 0x28
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	603b      	str	r3, [r7, #0]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10a      	bne.n	8008d9c <xTaskGenericNotify+0x30>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	61bb      	str	r3, [r7, #24]
}
 8008d98:	bf00      	nop
 8008d9a:	e7fe      	b.n	8008d9a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008da0:	f000 fe78 	bl	8009a94 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008db4:	6a3b      	ldr	r3, [r7, #32]
 8008db6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8008dba:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 8008dc4:	79fb      	ldrb	r3, [r7, #7]
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d82d      	bhi.n	8008e26 <xTaskGenericNotify+0xba>
 8008dca:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <xTaskGenericNotify+0x64>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008e49 	.word	0x08008e49
 8008dd4:	08008de5 	.word	0x08008de5
 8008dd8:	08008df7 	.word	0x08008df7
 8008ddc:	08008e07 	.word	0x08008e07
 8008de0:	08008e11 	.word	0x08008e11
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	431a      	orrs	r2, r3
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8008df4:	e02b      	b.n	8008e4e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008df6:	6a3b      	ldr	r3, [r7, #32]
 8008df8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	6a3b      	ldr	r3, [r7, #32]
 8008e00:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8008e04:	e023      	b.n	8008e4e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8008e0e:	e01e      	b.n	8008e4e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008e10:	7ffb      	ldrb	r3, [r7, #31]
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d004      	beq.n	8008e20 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008e1e:	e016      	b.n	8008e4e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8008e20:	2300      	movs	r3, #0
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008e24:	e013      	b.n	8008e4e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008e26:	6a3b      	ldr	r3, [r7, #32]
 8008e28:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e30:	d00c      	beq.n	8008e4c <xTaskGenericNotify+0xe0>
	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	617b      	str	r3, [r7, #20]
}
 8008e44:	bf00      	nop
 8008e46:	e7fe      	b.n	8008e46 <xTaskGenericNotify+0xda>
					break;
 8008e48:	bf00      	nop
 8008e4a:	e000      	b.n	8008e4e <xTaskGenericNotify+0xe2>

					break;
 8008e4c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008e4e:	7ffb      	ldrb	r3, [r7, #31]
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d13a      	bne.n	8008eca <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	3304      	adds	r3, #4
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f7fd fd03 	bl	8006864 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008e5e:	6a3b      	ldr	r3, [r7, #32]
 8008e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e62:	4b1d      	ldr	r3, [pc, #116]	; (8008ed8 <xTaskGenericNotify+0x16c>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	d903      	bls.n	8008e72 <xTaskGenericNotify+0x106>
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	4a1a      	ldr	r2, [pc, #104]	; (8008ed8 <xTaskGenericNotify+0x16c>)
 8008e70:	6013      	str	r3, [r2, #0]
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e76:	4613      	mov	r3, r2
 8008e78:	009b      	lsls	r3, r3, #2
 8008e7a:	4413      	add	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4a17      	ldr	r2, [pc, #92]	; (8008edc <xTaskGenericNotify+0x170>)
 8008e80:	441a      	add	r2, r3
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	3304      	adds	r3, #4
 8008e86:	4619      	mov	r1, r3
 8008e88:	4610      	mov	r0, r2
 8008e8a:	f7fd fc8e 	bl	80067aa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <xTaskGenericNotify+0x140>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	613b      	str	r3, [r7, #16]
}
 8008ea8:	bf00      	nop
 8008eaa:	e7fe      	b.n	8008eaa <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008eac:	6a3b      	ldr	r3, [r7, #32]
 8008eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb0:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <xTaskGenericNotify+0x174>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d907      	bls.n	8008eca <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008eba:	4b0a      	ldr	r3, [pc, #40]	; (8008ee4 <xTaskGenericNotify+0x178>)
 8008ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec0:	601a      	str	r2, [r3, #0]
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008eca:	f000 fe13 	bl	8009af4 <vPortExitCritical>

		return xReturn;
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3728      	adds	r7, #40	; 0x28
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	20000e50 	.word	0x20000e50
 8008edc:	20000978 	.word	0x20000978
 8008ee0:	20000974 	.word	0x20000974
 8008ee4:	e000ed04 	.word	0xe000ed04

08008ee8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b08e      	sub	sp, #56	; 0x38
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	603b      	str	r3, [r7, #0]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10a      	bne.n	8008f18 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8008f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f14:	bf00      	nop
 8008f16:	e7fe      	b.n	8008f16 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f18:	f000 fe9e 	bl	8009c58 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8008f20:	f3ef 8211 	mrs	r2, BASEPRI
 8008f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	623a      	str	r2, [r7, #32]
 8008f36:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8008f38:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d004      	beq.n	8008f4c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8008f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f58:	2202      	movs	r2, #2
 8008f5a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	2b04      	cmp	r3, #4
 8008f62:	d82f      	bhi.n	8008fc4 <xTaskGenericNotifyFromISR+0xdc>
 8008f64:	a201      	add	r2, pc, #4	; (adr r2, 8008f6c <xTaskGenericNotifyFromISR+0x84>)
 8008f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6a:	bf00      	nop
 8008f6c:	08008fe7 	.word	0x08008fe7
 8008f70:	08008f81 	.word	0x08008f81
 8008f74:	08008f93 	.word	0x08008f93
 8008f78:	08008fa3 	.word	0x08008fa3
 8008f7c:	08008fad 	.word	0x08008fad
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8008f90:	e02c      	b.n	8008fec <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8008fa0:	e024      	b.n	8008fec <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8008faa:	e01f      	b.n	8008fec <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008fac:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fb0:	2b02      	cmp	r3, #2
 8008fb2:	d004      	beq.n	8008fbe <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb6:	68ba      	ldr	r2, [r7, #8]
 8008fb8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008fbc:	e016      	b.n	8008fec <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8008fc2:	e013      	b.n	8008fec <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008fca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fce:	d00c      	beq.n	8008fea <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	61bb      	str	r3, [r7, #24]
}
 8008fe2:	bf00      	nop
 8008fe4:	e7fe      	b.n	8008fe4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8008fe6:	bf00      	nop
 8008fe8:	e000      	b.n	8008fec <xTaskGenericNotifyFromISR+0x104>
					break;
 8008fea:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008fec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d146      	bne.n	8009082 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00a      	beq.n	8009012 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	617b      	str	r3, [r7, #20]
}
 800900e:	bf00      	nop
 8009010:	e7fe      	b.n	8009010 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009012:	4b21      	ldr	r3, [pc, #132]	; (8009098 <xTaskGenericNotifyFromISR+0x1b0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d11d      	bne.n	8009056 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	3304      	adds	r3, #4
 800901e:	4618      	mov	r0, r3
 8009020:	f7fd fc20 	bl	8006864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009028:	4b1c      	ldr	r3, [pc, #112]	; (800909c <xTaskGenericNotifyFromISR+0x1b4>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	429a      	cmp	r2, r3
 800902e:	d903      	bls.n	8009038 <xTaskGenericNotifyFromISR+0x150>
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009034:	4a19      	ldr	r2, [pc, #100]	; (800909c <xTaskGenericNotifyFromISR+0x1b4>)
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800903c:	4613      	mov	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4413      	add	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	4a16      	ldr	r2, [pc, #88]	; (80090a0 <xTaskGenericNotifyFromISR+0x1b8>)
 8009046:	441a      	add	r2, r3
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	3304      	adds	r3, #4
 800904c:	4619      	mov	r1, r3
 800904e:	4610      	mov	r0, r2
 8009050:	f7fd fbab 	bl	80067aa <vListInsertEnd>
 8009054:	e005      	b.n	8009062 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	3318      	adds	r3, #24
 800905a:	4619      	mov	r1, r3
 800905c:	4811      	ldr	r0, [pc, #68]	; (80090a4 <xTaskGenericNotifyFromISR+0x1bc>)
 800905e:	f7fd fba4 	bl	80067aa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009066:	4b10      	ldr	r3, [pc, #64]	; (80090a8 <xTaskGenericNotifyFromISR+0x1c0>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	429a      	cmp	r2, r3
 800906e:	d908      	bls.n	8009082 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009078:	2201      	movs	r2, #1
 800907a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800907c:	4b0b      	ldr	r3, [pc, #44]	; (80090ac <xTaskGenericNotifyFromISR+0x1c4>)
 800907e:	2201      	movs	r2, #1
 8009080:	601a      	str	r2, [r3, #0]
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009084:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	f383 8811 	msr	BASEPRI, r3
}
 800908c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800908e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009090:	4618      	mov	r0, r3
 8009092:	3738      	adds	r7, #56	; 0x38
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	20000e70 	.word	0x20000e70
 800909c:	20000e50 	.word	0x20000e50
 80090a0:	20000978 	.word	0x20000978
 80090a4:	20000e08 	.word	0x20000e08
 80090a8:	20000974 	.word	0x20000974
 80090ac:	20000e5c 	.word	0x20000e5c

080090b0 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d102      	bne.n	80090c4 <xTaskNotifyStateClear+0x14>
 80090be:	4b0e      	ldr	r3, [pc, #56]	; (80090f8 <xTaskNotifyStateClear+0x48>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	e000      	b.n	80090c6 <xTaskNotifyStateClear+0x16>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 80090c8:	f000 fce4 	bl	8009a94 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d106      	bne.n	80090e6 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				xReturn = pdPASS;
 80090e0:	2301      	movs	r3, #1
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	e001      	b.n	80090ea <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 80090ea:	f000 fd03 	bl	8009af4 <vPortExitCritical>

		return xReturn;
 80090ee:	68fb      	ldr	r3, [r7, #12]
	}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	20000974 	.word	0x20000974

080090fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b084      	sub	sp, #16
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009106:	4b21      	ldr	r3, [pc, #132]	; (800918c <prvAddCurrentTaskToDelayedList+0x90>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800910c:	4b20      	ldr	r3, [pc, #128]	; (8009190 <prvAddCurrentTaskToDelayedList+0x94>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3304      	adds	r3, #4
 8009112:	4618      	mov	r0, r3
 8009114:	f7fd fba6 	bl	8006864 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800911e:	d10a      	bne.n	8009136 <prvAddCurrentTaskToDelayedList+0x3a>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d007      	beq.n	8009136 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009126:	4b1a      	ldr	r3, [pc, #104]	; (8009190 <prvAddCurrentTaskToDelayedList+0x94>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3304      	adds	r3, #4
 800912c:	4619      	mov	r1, r3
 800912e:	4819      	ldr	r0, [pc, #100]	; (8009194 <prvAddCurrentTaskToDelayedList+0x98>)
 8009130:	f7fd fb3b 	bl	80067aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009134:	e026      	b.n	8009184 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4413      	add	r3, r2
 800913c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800913e:	4b14      	ldr	r3, [pc, #80]	; (8009190 <prvAddCurrentTaskToDelayedList+0x94>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009146:	68ba      	ldr	r2, [r7, #8]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	429a      	cmp	r2, r3
 800914c:	d209      	bcs.n	8009162 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800914e:	4b12      	ldr	r3, [pc, #72]	; (8009198 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	4b0f      	ldr	r3, [pc, #60]	; (8009190 <prvAddCurrentTaskToDelayedList+0x94>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	3304      	adds	r3, #4
 8009158:	4619      	mov	r1, r3
 800915a:	4610      	mov	r0, r2
 800915c:	f7fd fb49 	bl	80067f2 <vListInsert>
}
 8009160:	e010      	b.n	8009184 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009162:	4b0e      	ldr	r3, [pc, #56]	; (800919c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	4b0a      	ldr	r3, [pc, #40]	; (8009190 <prvAddCurrentTaskToDelayedList+0x94>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3304      	adds	r3, #4
 800916c:	4619      	mov	r1, r3
 800916e:	4610      	mov	r0, r2
 8009170:	f7fd fb3f 	bl	80067f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009174:	4b0a      	ldr	r3, [pc, #40]	; (80091a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68ba      	ldr	r2, [r7, #8]
 800917a:	429a      	cmp	r2, r3
 800917c:	d202      	bcs.n	8009184 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800917e:	4a08      	ldr	r2, [pc, #32]	; (80091a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	6013      	str	r3, [r2, #0]
}
 8009184:	bf00      	nop
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	20000e4c 	.word	0x20000e4c
 8009190:	20000974 	.word	0x20000974
 8009194:	20000e34 	.word	0x20000e34
 8009198:	20000e04 	.word	0x20000e04
 800919c:	20000e00 	.word	0x20000e00
 80091a0:	20000e68 	.word	0x20000e68

080091a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08a      	sub	sp, #40	; 0x28
 80091a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80091ae:	f000 fb07 	bl	80097c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80091b2:	4b1c      	ldr	r3, [pc, #112]	; (8009224 <xTimerCreateTimerTask+0x80>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d021      	beq.n	80091fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091c2:	1d3a      	adds	r2, r7, #4
 80091c4:	f107 0108 	add.w	r1, r7, #8
 80091c8:	f107 030c 	add.w	r3, r7, #12
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fd faa5 	bl	800671c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091d2:	6879      	ldr	r1, [r7, #4]
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	9202      	str	r2, [sp, #8]
 80091da:	9301      	str	r3, [sp, #4]
 80091dc:	2302      	movs	r3, #2
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	2300      	movs	r3, #0
 80091e2:	460a      	mov	r2, r1
 80091e4:	4910      	ldr	r1, [pc, #64]	; (8009228 <xTimerCreateTimerTask+0x84>)
 80091e6:	4811      	ldr	r0, [pc, #68]	; (800922c <xTimerCreateTimerTask+0x88>)
 80091e8:	f7fe fd7e 	bl	8007ce8 <xTaskCreateStatic>
 80091ec:	4603      	mov	r3, r0
 80091ee:	4a10      	ldr	r2, [pc, #64]	; (8009230 <xTimerCreateTimerTask+0x8c>)
 80091f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80091f2:	4b0f      	ldr	r3, [pc, #60]	; (8009230 <xTimerCreateTimerTask+0x8c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091fa:	2301      	movs	r3, #1
 80091fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d10a      	bne.n	800921a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	613b      	str	r3, [r7, #16]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800921a:	697b      	ldr	r3, [r7, #20]
}
 800921c:	4618      	mov	r0, r3
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	20000ea4 	.word	0x20000ea4
 8009228:	0800ae3c 	.word	0x0800ae3c
 800922c:	08009369 	.word	0x08009369
 8009230:	20000ea8 	.word	0x20000ea8

08009234 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b08a      	sub	sp, #40	; 0x28
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	607a      	str	r2, [r7, #4]
 8009240:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009242:	2300      	movs	r3, #0
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10a      	bne.n	8009262 <xTimerGenericCommand+0x2e>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	623b      	str	r3, [r7, #32]
}
 800925e:	bf00      	nop
 8009260:	e7fe      	b.n	8009260 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009262:	4b1a      	ldr	r3, [pc, #104]	; (80092cc <xTimerGenericCommand+0x98>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d02a      	beq.n	80092c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	2b05      	cmp	r3, #5
 800927a:	dc18      	bgt.n	80092ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800927c:	f7ff fb8c 	bl	8008998 <xTaskGetSchedulerState>
 8009280:	4603      	mov	r3, r0
 8009282:	2b02      	cmp	r3, #2
 8009284:	d109      	bne.n	800929a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009286:	4b11      	ldr	r3, [pc, #68]	; (80092cc <xTimerGenericCommand+0x98>)
 8009288:	6818      	ldr	r0, [r3, #0]
 800928a:	f107 0110 	add.w	r1, r7, #16
 800928e:	2300      	movs	r3, #0
 8009290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009292:	f7fd fc4f 	bl	8006b34 <xQueueGenericSend>
 8009296:	6278      	str	r0, [r7, #36]	; 0x24
 8009298:	e012      	b.n	80092c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800929a:	4b0c      	ldr	r3, [pc, #48]	; (80092cc <xTimerGenericCommand+0x98>)
 800929c:	6818      	ldr	r0, [r3, #0]
 800929e:	f107 0110 	add.w	r1, r7, #16
 80092a2:	2300      	movs	r3, #0
 80092a4:	2200      	movs	r2, #0
 80092a6:	f7fd fc45 	bl	8006b34 <xQueueGenericSend>
 80092aa:	6278      	str	r0, [r7, #36]	; 0x24
 80092ac:	e008      	b.n	80092c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092ae:	4b07      	ldr	r3, [pc, #28]	; (80092cc <xTimerGenericCommand+0x98>)
 80092b0:	6818      	ldr	r0, [r3, #0]
 80092b2:	f107 0110 	add.w	r1, r7, #16
 80092b6:	2300      	movs	r3, #0
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	f7fd fd39 	bl	8006d30 <xQueueGenericSendFromISR>
 80092be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80092c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3728      	adds	r7, #40	; 0x28
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	20000ea4 	.word	0x20000ea4

080092d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b088      	sub	sp, #32
 80092d4:	af02      	add	r7, sp, #8
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092da:	4b22      	ldr	r3, [pc, #136]	; (8009364 <prvProcessExpiredTimer+0x94>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	3304      	adds	r3, #4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fd fabb 	bl	8006864 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092f4:	f003 0304 	and.w	r3, r3, #4
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d022      	beq.n	8009342 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	699a      	ldr	r2, [r3, #24]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	18d1      	adds	r1, r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	6978      	ldr	r0, [r7, #20]
 800930a:	f000 f8d1 	bl	80094b0 <prvInsertTimerInActiveList>
 800930e:	4603      	mov	r3, r0
 8009310:	2b00      	cmp	r3, #0
 8009312:	d01f      	beq.n	8009354 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009314:	2300      	movs	r3, #0
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	2300      	movs	r3, #0
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	2100      	movs	r1, #0
 800931e:	6978      	ldr	r0, [r7, #20]
 8009320:	f7ff ff88 	bl	8009234 <xTimerGenericCommand>
 8009324:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d113      	bne.n	8009354 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800932c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009330:	f383 8811 	msr	BASEPRI, r3
 8009334:	f3bf 8f6f 	isb	sy
 8009338:	f3bf 8f4f 	dsb	sy
 800933c:	60fb      	str	r3, [r7, #12]
}
 800933e:	bf00      	nop
 8009340:	e7fe      	b.n	8009340 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009348:	f023 0301 	bic.w	r3, r3, #1
 800934c:	b2da      	uxtb	r2, r3
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	6a1b      	ldr	r3, [r3, #32]
 8009358:	6978      	ldr	r0, [r7, #20]
 800935a:	4798      	blx	r3
}
 800935c:	bf00      	nop
 800935e:	3718      	adds	r7, #24
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}
 8009364:	20000e9c 	.word	0x20000e9c

08009368 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009370:	f107 0308 	add.w	r3, r7, #8
 8009374:	4618      	mov	r0, r3
 8009376:	f000 f857 	bl	8009428 <prvGetNextExpireTime>
 800937a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	4619      	mov	r1, r3
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f000 f803 	bl	800938c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009386:	f000 f8d5 	bl	8009534 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800938a:	e7f1      	b.n	8009370 <prvTimerTask+0x8>

0800938c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009396:	f7fe ff03 	bl	80081a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800939a:	f107 0308 	add.w	r3, r7, #8
 800939e:	4618      	mov	r0, r3
 80093a0:	f000 f866 	bl	8009470 <prvSampleTimeNow>
 80093a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d130      	bne.n	800940e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10a      	bne.n	80093c8 <prvProcessTimerOrBlockTask+0x3c>
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d806      	bhi.n	80093c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80093ba:	f7fe feff 	bl	80081bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093be:	68f9      	ldr	r1, [r7, #12]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7ff ff85 	bl	80092d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80093c6:	e024      	b.n	8009412 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d008      	beq.n	80093e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093ce:	4b13      	ldr	r3, [pc, #76]	; (800941c <prvProcessTimerOrBlockTask+0x90>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d101      	bne.n	80093dc <prvProcessTimerOrBlockTask+0x50>
 80093d8:	2301      	movs	r3, #1
 80093da:	e000      	b.n	80093de <prvProcessTimerOrBlockTask+0x52>
 80093dc:	2300      	movs	r3, #0
 80093de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80093e0:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <prvProcessTimerOrBlockTask+0x94>)
 80093e2:	6818      	ldr	r0, [r3, #0]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	683a      	ldr	r2, [r7, #0]
 80093ec:	4619      	mov	r1, r3
 80093ee:	f7fe f905 	bl	80075fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80093f2:	f7fe fee3 	bl	80081bc <xTaskResumeAll>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10a      	bne.n	8009412 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093fc:	4b09      	ldr	r3, [pc, #36]	; (8009424 <prvProcessTimerOrBlockTask+0x98>)
 80093fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009402:	601a      	str	r2, [r3, #0]
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	f3bf 8f6f 	isb	sy
}
 800940c:	e001      	b.n	8009412 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800940e:	f7fe fed5 	bl	80081bc <xTaskResumeAll>
}
 8009412:	bf00      	nop
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	20000ea0 	.word	0x20000ea0
 8009420:	20000ea4 	.word	0x20000ea4
 8009424:	e000ed04 	.word	0xe000ed04

08009428 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009430:	4b0e      	ldr	r3, [pc, #56]	; (800946c <prvGetNextExpireTime+0x44>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d101      	bne.n	800943e <prvGetNextExpireTime+0x16>
 800943a:	2201      	movs	r2, #1
 800943c:	e000      	b.n	8009440 <prvGetNextExpireTime+0x18>
 800943e:	2200      	movs	r2, #0
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d105      	bne.n	8009458 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800944c:	4b07      	ldr	r3, [pc, #28]	; (800946c <prvGetNextExpireTime+0x44>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	60fb      	str	r3, [r7, #12]
 8009456:	e001      	b.n	800945c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009458:	2300      	movs	r3, #0
 800945a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800945c:	68fb      	ldr	r3, [r7, #12]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	20000e9c 	.word	0x20000e9c

08009470 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009478:	f7fe ff3e 	bl	80082f8 <xTaskGetTickCount>
 800947c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800947e:	4b0b      	ldr	r3, [pc, #44]	; (80094ac <prvSampleTimeNow+0x3c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	429a      	cmp	r2, r3
 8009486:	d205      	bcs.n	8009494 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009488:	f000 f936 	bl	80096f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	e002      	b.n	800949a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800949a:	4a04      	ldr	r2, [pc, #16]	; (80094ac <prvSampleTimeNow+0x3c>)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094a0:	68fb      	ldr	r3, [r7, #12]
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	3710      	adds	r7, #16
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	20000eac 	.word	0x20000eac

080094b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
 80094bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80094be:	2300      	movs	r3, #0
 80094c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80094ce:	68ba      	ldr	r2, [r7, #8]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d812      	bhi.n	80094fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	1ad2      	subs	r2, r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d302      	bcc.n	80094ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80094e4:	2301      	movs	r3, #1
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	e01b      	b.n	8009522 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80094ea:	4b10      	ldr	r3, [pc, #64]	; (800952c <prvInsertTimerInActiveList+0x7c>)
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	3304      	adds	r3, #4
 80094f2:	4619      	mov	r1, r3
 80094f4:	4610      	mov	r0, r2
 80094f6:	f7fd f97c 	bl	80067f2 <vListInsert>
 80094fa:	e012      	b.n	8009522 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	429a      	cmp	r2, r3
 8009502:	d206      	bcs.n	8009512 <prvInsertTimerInActiveList+0x62>
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	429a      	cmp	r2, r3
 800950a:	d302      	bcc.n	8009512 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800950c:	2301      	movs	r3, #1
 800950e:	617b      	str	r3, [r7, #20]
 8009510:	e007      	b.n	8009522 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009512:	4b07      	ldr	r3, [pc, #28]	; (8009530 <prvInsertTimerInActiveList+0x80>)
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3304      	adds	r3, #4
 800951a:	4619      	mov	r1, r3
 800951c:	4610      	mov	r0, r2
 800951e:	f7fd f968 	bl	80067f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009522:	697b      	ldr	r3, [r7, #20]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	20000ea0 	.word	0x20000ea0
 8009530:	20000e9c 	.word	0x20000e9c

08009534 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b08e      	sub	sp, #56	; 0x38
 8009538:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800953a:	e0ca      	b.n	80096d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2b00      	cmp	r3, #0
 8009540:	da18      	bge.n	8009574 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009542:	1d3b      	adds	r3, r7, #4
 8009544:	3304      	adds	r3, #4
 8009546:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10a      	bne.n	8009564 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800954e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009552:	f383 8811 	msr	BASEPRI, r3
 8009556:	f3bf 8f6f 	isb	sy
 800955a:	f3bf 8f4f 	dsb	sy
 800955e:	61fb      	str	r3, [r7, #28]
}
 8009560:	bf00      	nop
 8009562:	e7fe      	b.n	8009562 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800956a:	6850      	ldr	r0, [r2, #4]
 800956c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800956e:	6892      	ldr	r2, [r2, #8]
 8009570:	4611      	mov	r1, r2
 8009572:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2b00      	cmp	r3, #0
 8009578:	f2c0 80aa 	blt.w	80096d0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d004      	beq.n	8009592 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	3304      	adds	r3, #4
 800958c:	4618      	mov	r0, r3
 800958e:	f7fd f969 	bl	8006864 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009592:	463b      	mov	r3, r7
 8009594:	4618      	mov	r0, r3
 8009596:	f7ff ff6b 	bl	8009470 <prvSampleTimeNow>
 800959a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2b09      	cmp	r3, #9
 80095a0:	f200 8097 	bhi.w	80096d2 <prvProcessReceivedCommands+0x19e>
 80095a4:	a201      	add	r2, pc, #4	; (adr r2, 80095ac <prvProcessReceivedCommands+0x78>)
 80095a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095aa:	bf00      	nop
 80095ac:	080095d5 	.word	0x080095d5
 80095b0:	080095d5 	.word	0x080095d5
 80095b4:	080095d5 	.word	0x080095d5
 80095b8:	08009649 	.word	0x08009649
 80095bc:	0800965d 	.word	0x0800965d
 80095c0:	080096a7 	.word	0x080096a7
 80095c4:	080095d5 	.word	0x080095d5
 80095c8:	080095d5 	.word	0x080095d5
 80095cc:	08009649 	.word	0x08009649
 80095d0:	0800965d 	.word	0x0800965d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095da:	f043 0301 	orr.w	r3, r3, #1
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	18d1      	adds	r1, r2, r3
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095f4:	f7ff ff5c 	bl	80094b0 <prvInsertTimerInActiveList>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d069      	beq.n	80096d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009604:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800960c:	f003 0304 	and.w	r3, r3, #4
 8009610:	2b00      	cmp	r3, #0
 8009612:	d05e      	beq.n	80096d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	441a      	add	r2, r3
 800961c:	2300      	movs	r3, #0
 800961e:	9300      	str	r3, [sp, #0]
 8009620:	2300      	movs	r3, #0
 8009622:	2100      	movs	r1, #0
 8009624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009626:	f7ff fe05 	bl	8009234 <xTimerGenericCommand>
 800962a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800962c:	6a3b      	ldr	r3, [r7, #32]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d14f      	bne.n	80096d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009636:	f383 8811 	msr	BASEPRI, r3
 800963a:	f3bf 8f6f 	isb	sy
 800963e:	f3bf 8f4f 	dsb	sy
 8009642:	61bb      	str	r3, [r7, #24]
}
 8009644:	bf00      	nop
 8009646:	e7fe      	b.n	8009646 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800964e:	f023 0301 	bic.w	r3, r3, #1
 8009652:	b2da      	uxtb	r2, r3
 8009654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800965a:	e03a      	b.n	80096d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800965c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009662:	f043 0301 	orr.w	r3, r3, #1
 8009666:	b2da      	uxtb	r2, r3
 8009668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800966e:	68ba      	ldr	r2, [r7, #8]
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10a      	bne.n	8009692 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800967c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009680:	f383 8811 	msr	BASEPRI, r3
 8009684:	f3bf 8f6f 	isb	sy
 8009688:	f3bf 8f4f 	dsb	sy
 800968c:	617b      	str	r3, [r7, #20]
}
 800968e:	bf00      	nop
 8009690:	e7fe      	b.n	8009690 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009694:	699a      	ldr	r2, [r3, #24]
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	18d1      	adds	r1, r2, r3
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800969e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096a0:	f7ff ff06 	bl	80094b0 <prvInsertTimerInActiveList>
					break;
 80096a4:	e015      	b.n	80096d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ac:	f003 0302 	and.w	r3, r3, #2
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d103      	bne.n	80096bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80096b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096b6:	f000 fbdb 	bl	8009e70 <vPortFree>
 80096ba:	e00a      	b.n	80096d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096c2:	f023 0301 	bic.w	r3, r3, #1
 80096c6:	b2da      	uxtb	r2, r3
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096ce:	e000      	b.n	80096d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80096d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096d2:	4b08      	ldr	r3, [pc, #32]	; (80096f4 <prvProcessReceivedCommands+0x1c0>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	1d39      	adds	r1, r7, #4
 80096d8:	2200      	movs	r2, #0
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fd fc50 	bl	8006f80 <xQueueReceive>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f47f af2a 	bne.w	800953c <prvProcessReceivedCommands+0x8>
	}
}
 80096e8:	bf00      	nop
 80096ea:	bf00      	nop
 80096ec:	3730      	adds	r7, #48	; 0x30
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	20000ea4 	.word	0x20000ea4

080096f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096fe:	e048      	b.n	8009792 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009700:	4b2d      	ldr	r3, [pc, #180]	; (80097b8 <prvSwitchTimerLists+0xc0>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800970a:	4b2b      	ldr	r3, [pc, #172]	; (80097b8 <prvSwitchTimerLists+0xc0>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	3304      	adds	r3, #4
 8009718:	4618      	mov	r0, r3
 800971a:	f7fd f8a3 	bl	8006864 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6a1b      	ldr	r3, [r3, #32]
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d02e      	beq.n	8009792 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	693a      	ldr	r2, [r7, #16]
 800973a:	4413      	add	r3, r2
 800973c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800973e:	68ba      	ldr	r2, [r7, #8]
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	429a      	cmp	r2, r3
 8009744:	d90e      	bls.n	8009764 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009752:	4b19      	ldr	r3, [pc, #100]	; (80097b8 <prvSwitchTimerLists+0xc0>)
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3304      	adds	r3, #4
 800975a:	4619      	mov	r1, r3
 800975c:	4610      	mov	r0, r2
 800975e:	f7fd f848 	bl	80067f2 <vListInsert>
 8009762:	e016      	b.n	8009792 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009764:	2300      	movs	r3, #0
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	2300      	movs	r3, #0
 800976a:	693a      	ldr	r2, [r7, #16]
 800976c:	2100      	movs	r1, #0
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f7ff fd60 	bl	8009234 <xTimerGenericCommand>
 8009774:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10a      	bne.n	8009792 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800977c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009780:	f383 8811 	msr	BASEPRI, r3
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	f3bf 8f4f 	dsb	sy
 800978c:	603b      	str	r3, [r7, #0]
}
 800978e:	bf00      	nop
 8009790:	e7fe      	b.n	8009790 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009792:	4b09      	ldr	r3, [pc, #36]	; (80097b8 <prvSwitchTimerLists+0xc0>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1b1      	bne.n	8009700 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800979c:	4b06      	ldr	r3, [pc, #24]	; (80097b8 <prvSwitchTimerLists+0xc0>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097a2:	4b06      	ldr	r3, [pc, #24]	; (80097bc <prvSwitchTimerLists+0xc4>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a04      	ldr	r2, [pc, #16]	; (80097b8 <prvSwitchTimerLists+0xc0>)
 80097a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097aa:	4a04      	ldr	r2, [pc, #16]	; (80097bc <prvSwitchTimerLists+0xc4>)
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	6013      	str	r3, [r2, #0]
}
 80097b0:	bf00      	nop
 80097b2:	3718      	adds	r7, #24
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	20000e9c 	.word	0x20000e9c
 80097bc:	20000ea0 	.word	0x20000ea0

080097c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097c6:	f000 f965 	bl	8009a94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097ca:	4b15      	ldr	r3, [pc, #84]	; (8009820 <prvCheckForValidListAndQueue+0x60>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d120      	bne.n	8009814 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097d2:	4814      	ldr	r0, [pc, #80]	; (8009824 <prvCheckForValidListAndQueue+0x64>)
 80097d4:	f7fc ffbc 	bl	8006750 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097d8:	4813      	ldr	r0, [pc, #76]	; (8009828 <prvCheckForValidListAndQueue+0x68>)
 80097da:	f7fc ffb9 	bl	8006750 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097de:	4b13      	ldr	r3, [pc, #76]	; (800982c <prvCheckForValidListAndQueue+0x6c>)
 80097e0:	4a10      	ldr	r2, [pc, #64]	; (8009824 <prvCheckForValidListAndQueue+0x64>)
 80097e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097e4:	4b12      	ldr	r3, [pc, #72]	; (8009830 <prvCheckForValidListAndQueue+0x70>)
 80097e6:	4a10      	ldr	r2, [pc, #64]	; (8009828 <prvCheckForValidListAndQueue+0x68>)
 80097e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097ea:	2300      	movs	r3, #0
 80097ec:	9300      	str	r3, [sp, #0]
 80097ee:	4b11      	ldr	r3, [pc, #68]	; (8009834 <prvCheckForValidListAndQueue+0x74>)
 80097f0:	4a11      	ldr	r2, [pc, #68]	; (8009838 <prvCheckForValidListAndQueue+0x78>)
 80097f2:	2110      	movs	r1, #16
 80097f4:	200a      	movs	r0, #10
 80097f6:	f7fd f8c7 	bl	8006988 <xQueueGenericCreateStatic>
 80097fa:	4603      	mov	r3, r0
 80097fc:	4a08      	ldr	r2, [pc, #32]	; (8009820 <prvCheckForValidListAndQueue+0x60>)
 80097fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009800:	4b07      	ldr	r3, [pc, #28]	; (8009820 <prvCheckForValidListAndQueue+0x60>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d005      	beq.n	8009814 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009808:	4b05      	ldr	r3, [pc, #20]	; (8009820 <prvCheckForValidListAndQueue+0x60>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	490b      	ldr	r1, [pc, #44]	; (800983c <prvCheckForValidListAndQueue+0x7c>)
 800980e:	4618      	mov	r0, r3
 8009810:	f7fd feca 	bl	80075a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009814:	f000 f96e 	bl	8009af4 <vPortExitCritical>
}
 8009818:	bf00      	nop
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000ea4 	.word	0x20000ea4
 8009824:	20000e74 	.word	0x20000e74
 8009828:	20000e88 	.word	0x20000e88
 800982c:	20000e9c 	.word	0x20000e9c
 8009830:	20000ea0 	.word	0x20000ea0
 8009834:	20000f50 	.word	0x20000f50
 8009838:	20000eb0 	.word	0x20000eb0
 800983c:	0800ae44 	.word	0x0800ae44

08009840 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3b04      	subs	r3, #4
 8009850:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	3b04      	subs	r3, #4
 800985e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f023 0201 	bic.w	r2, r3, #1
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3b04      	subs	r3, #4
 800986e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009870:	4a0c      	ldr	r2, [pc, #48]	; (80098a4 <pxPortInitialiseStack+0x64>)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	3b14      	subs	r3, #20
 800987a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	3b04      	subs	r3, #4
 8009886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f06f 0202 	mvn.w	r2, #2
 800988e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	3b20      	subs	r3, #32
 8009894:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009896:	68fb      	ldr	r3, [r7, #12]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr
 80098a4:	080098a9 	.word	0x080098a9

080098a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098b2:	4b12      	ldr	r3, [pc, #72]	; (80098fc <prvTaskExitError+0x54>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098ba:	d00a      	beq.n	80098d2 <prvTaskExitError+0x2a>
	__asm volatile
 80098bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098c0:	f383 8811 	msr	BASEPRI, r3
 80098c4:	f3bf 8f6f 	isb	sy
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	60fb      	str	r3, [r7, #12]
}
 80098ce:	bf00      	nop
 80098d0:	e7fe      	b.n	80098d0 <prvTaskExitError+0x28>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	60bb      	str	r3, [r7, #8]
}
 80098e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098e6:	bf00      	nop
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d0fc      	beq.n	80098e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098ee:	bf00      	nop
 80098f0:	bf00      	nop
 80098f2:	3714      	adds	r7, #20
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr
 80098fc:	20000098 	.word	0x20000098

08009900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009900:	4b07      	ldr	r3, [pc, #28]	; (8009920 <pxCurrentTCBConst2>)
 8009902:	6819      	ldr	r1, [r3, #0]
 8009904:	6808      	ldr	r0, [r1, #0]
 8009906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800990a:	f380 8809 	msr	PSP, r0
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f04f 0000 	mov.w	r0, #0
 8009916:	f380 8811 	msr	BASEPRI, r0
 800991a:	4770      	bx	lr
 800991c:	f3af 8000 	nop.w

08009920 <pxCurrentTCBConst2>:
 8009920:	20000974 	.word	0x20000974
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009924:	bf00      	nop
 8009926:	bf00      	nop

08009928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009928:	4808      	ldr	r0, [pc, #32]	; (800994c <prvPortStartFirstTask+0x24>)
 800992a:	6800      	ldr	r0, [r0, #0]
 800992c:	6800      	ldr	r0, [r0, #0]
 800992e:	f380 8808 	msr	MSP, r0
 8009932:	f04f 0000 	mov.w	r0, #0
 8009936:	f380 8814 	msr	CONTROL, r0
 800993a:	b662      	cpsie	i
 800993c:	b661      	cpsie	f
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	df00      	svc	0
 8009948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800994a:	bf00      	nop
 800994c:	e000ed08 	.word	0xe000ed08

08009950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009956:	4b46      	ldr	r3, [pc, #280]	; (8009a70 <xPortStartScheduler+0x120>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a46      	ldr	r2, [pc, #280]	; (8009a74 <xPortStartScheduler+0x124>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d10a      	bne.n	8009976 <xPortStartScheduler+0x26>
	__asm volatile
 8009960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009964:	f383 8811 	msr	BASEPRI, r3
 8009968:	f3bf 8f6f 	isb	sy
 800996c:	f3bf 8f4f 	dsb	sy
 8009970:	613b      	str	r3, [r7, #16]
}
 8009972:	bf00      	nop
 8009974:	e7fe      	b.n	8009974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009976:	4b3e      	ldr	r3, [pc, #248]	; (8009a70 <xPortStartScheduler+0x120>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a3f      	ldr	r2, [pc, #252]	; (8009a78 <xPortStartScheduler+0x128>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d10a      	bne.n	8009996 <xPortStartScheduler+0x46>
	__asm volatile
 8009980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009984:	f383 8811 	msr	BASEPRI, r3
 8009988:	f3bf 8f6f 	isb	sy
 800998c:	f3bf 8f4f 	dsb	sy
 8009990:	60fb      	str	r3, [r7, #12]
}
 8009992:	bf00      	nop
 8009994:	e7fe      	b.n	8009994 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009996:	4b39      	ldr	r3, [pc, #228]	; (8009a7c <xPortStartScheduler+0x12c>)
 8009998:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	22ff      	movs	r2, #255	; 0xff
 80099a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	781b      	ldrb	r3, [r3, #0]
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	b2db      	uxtb	r3, r3
 80099b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	4b31      	ldr	r3, [pc, #196]	; (8009a80 <xPortStartScheduler+0x130>)
 80099bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099be:	4b31      	ldr	r3, [pc, #196]	; (8009a84 <xPortStartScheduler+0x134>)
 80099c0:	2207      	movs	r2, #7
 80099c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099c4:	e009      	b.n	80099da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80099c6:	4b2f      	ldr	r3, [pc, #188]	; (8009a84 <xPortStartScheduler+0x134>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	4a2d      	ldr	r2, [pc, #180]	; (8009a84 <xPortStartScheduler+0x134>)
 80099ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099d0:	78fb      	ldrb	r3, [r7, #3]
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099da:	78fb      	ldrb	r3, [r7, #3]
 80099dc:	b2db      	uxtb	r3, r3
 80099de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099e2:	2b80      	cmp	r3, #128	; 0x80
 80099e4:	d0ef      	beq.n	80099c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099e6:	4b27      	ldr	r3, [pc, #156]	; (8009a84 <xPortStartScheduler+0x134>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f1c3 0307 	rsb	r3, r3, #7
 80099ee:	2b04      	cmp	r3, #4
 80099f0:	d00a      	beq.n	8009a08 <xPortStartScheduler+0xb8>
	__asm volatile
 80099f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f6:	f383 8811 	msr	BASEPRI, r3
 80099fa:	f3bf 8f6f 	isb	sy
 80099fe:	f3bf 8f4f 	dsb	sy
 8009a02:	60bb      	str	r3, [r7, #8]
}
 8009a04:	bf00      	nop
 8009a06:	e7fe      	b.n	8009a06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a08:	4b1e      	ldr	r3, [pc, #120]	; (8009a84 <xPortStartScheduler+0x134>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	021b      	lsls	r3, r3, #8
 8009a0e:	4a1d      	ldr	r2, [pc, #116]	; (8009a84 <xPortStartScheduler+0x134>)
 8009a10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a12:	4b1c      	ldr	r3, [pc, #112]	; (8009a84 <xPortStartScheduler+0x134>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a1a:	4a1a      	ldr	r2, [pc, #104]	; (8009a84 <xPortStartScheduler+0x134>)
 8009a1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	b2da      	uxtb	r2, r3
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a26:	4b18      	ldr	r3, [pc, #96]	; (8009a88 <xPortStartScheduler+0x138>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a17      	ldr	r2, [pc, #92]	; (8009a88 <xPortStartScheduler+0x138>)
 8009a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a32:	4b15      	ldr	r3, [pc, #84]	; (8009a88 <xPortStartScheduler+0x138>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a14      	ldr	r2, [pc, #80]	; (8009a88 <xPortStartScheduler+0x138>)
 8009a38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a3e:	f000 f8dd 	bl	8009bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a42:	4b12      	ldr	r3, [pc, #72]	; (8009a8c <xPortStartScheduler+0x13c>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a48:	f000 f8fc 	bl	8009c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a4c:	4b10      	ldr	r3, [pc, #64]	; (8009a90 <xPortStartScheduler+0x140>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a0f      	ldr	r2, [pc, #60]	; (8009a90 <xPortStartScheduler+0x140>)
 8009a52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009a56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a58:	f7ff ff66 	bl	8009928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a5c:	f7fe fd16 	bl	800848c <vTaskSwitchContext>
	prvTaskExitError();
 8009a60:	f7ff ff22 	bl	80098a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3718      	adds	r7, #24
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	e000ed00 	.word	0xe000ed00
 8009a74:	410fc271 	.word	0x410fc271
 8009a78:	410fc270 	.word	0x410fc270
 8009a7c:	e000e400 	.word	0xe000e400
 8009a80:	20000fa0 	.word	0x20000fa0
 8009a84:	20000fa4 	.word	0x20000fa4
 8009a88:	e000ed20 	.word	0xe000ed20
 8009a8c:	20000098 	.word	0x20000098
 8009a90:	e000ef34 	.word	0xe000ef34

08009a94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
	__asm volatile
 8009a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a9e:	f383 8811 	msr	BASEPRI, r3
 8009aa2:	f3bf 8f6f 	isb	sy
 8009aa6:	f3bf 8f4f 	dsb	sy
 8009aaa:	607b      	str	r3, [r7, #4]
}
 8009aac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009aae:	4b0f      	ldr	r3, [pc, #60]	; (8009aec <vPortEnterCritical+0x58>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	4a0d      	ldr	r2, [pc, #52]	; (8009aec <vPortEnterCritical+0x58>)
 8009ab6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ab8:	4b0c      	ldr	r3, [pc, #48]	; (8009aec <vPortEnterCritical+0x58>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d10f      	bne.n	8009ae0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009ac0:	4b0b      	ldr	r3, [pc, #44]	; (8009af0 <vPortEnterCritical+0x5c>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ace:	f383 8811 	msr	BASEPRI, r3
 8009ad2:	f3bf 8f6f 	isb	sy
 8009ad6:	f3bf 8f4f 	dsb	sy
 8009ada:	603b      	str	r3, [r7, #0]
}
 8009adc:	bf00      	nop
 8009ade:	e7fe      	b.n	8009ade <vPortEnterCritical+0x4a>
	}
}
 8009ae0:	bf00      	nop
 8009ae2:	370c      	adds	r7, #12
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	20000098 	.word	0x20000098
 8009af0:	e000ed04 	.word	0xe000ed04

08009af4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009afa:	4b12      	ldr	r3, [pc, #72]	; (8009b44 <vPortExitCritical+0x50>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10a      	bne.n	8009b18 <vPortExitCritical+0x24>
	__asm volatile
 8009b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b06:	f383 8811 	msr	BASEPRI, r3
 8009b0a:	f3bf 8f6f 	isb	sy
 8009b0e:	f3bf 8f4f 	dsb	sy
 8009b12:	607b      	str	r3, [r7, #4]
}
 8009b14:	bf00      	nop
 8009b16:	e7fe      	b.n	8009b16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b18:	4b0a      	ldr	r3, [pc, #40]	; (8009b44 <vPortExitCritical+0x50>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	4a09      	ldr	r2, [pc, #36]	; (8009b44 <vPortExitCritical+0x50>)
 8009b20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b22:	4b08      	ldr	r3, [pc, #32]	; (8009b44 <vPortExitCritical+0x50>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d105      	bne.n	8009b36 <vPortExitCritical+0x42>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	f383 8811 	msr	BASEPRI, r3
}
 8009b34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b36:	bf00      	nop
 8009b38:	370c      	adds	r7, #12
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	20000098 	.word	0x20000098
	...

08009b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b50:	f3ef 8009 	mrs	r0, PSP
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	4b15      	ldr	r3, [pc, #84]	; (8009bb0 <pxCurrentTCBConst>)
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	f01e 0f10 	tst.w	lr, #16
 8009b60:	bf08      	it	eq
 8009b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b6a:	6010      	str	r0, [r2, #0]
 8009b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b74:	f380 8811 	msr	BASEPRI, r0
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f7fe fc84 	bl	800848c <vTaskSwitchContext>
 8009b84:	f04f 0000 	mov.w	r0, #0
 8009b88:	f380 8811 	msr	BASEPRI, r0
 8009b8c:	bc09      	pop	{r0, r3}
 8009b8e:	6819      	ldr	r1, [r3, #0]
 8009b90:	6808      	ldr	r0, [r1, #0]
 8009b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b96:	f01e 0f10 	tst.w	lr, #16
 8009b9a:	bf08      	it	eq
 8009b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ba0:	f380 8809 	msr	PSP, r0
 8009ba4:	f3bf 8f6f 	isb	sy
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	f3af 8000 	nop.w

08009bb0 <pxCurrentTCBConst>:
 8009bb0:	20000974 	.word	0x20000974
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009bb4:	bf00      	nop
 8009bb6:	bf00      	nop

08009bb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b082      	sub	sp, #8
 8009bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	607b      	str	r3, [r7, #4]
}
 8009bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009bd2:	f7fe fba1 	bl	8008318 <xTaskIncrementTick>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d003      	beq.n	8009be4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bdc:	4b06      	ldr	r3, [pc, #24]	; (8009bf8 <xPortSysTickHandler+0x40>)
 8009bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009be2:	601a      	str	r2, [r3, #0]
 8009be4:	2300      	movs	r3, #0
 8009be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	f383 8811 	msr	BASEPRI, r3
}
 8009bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009bf0:	bf00      	nop
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	e000ed04 	.word	0xe000ed04

08009bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c00:	4b0b      	ldr	r3, [pc, #44]	; (8009c30 <vPortSetupTimerInterrupt+0x34>)
 8009c02:	2200      	movs	r2, #0
 8009c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c06:	4b0b      	ldr	r3, [pc, #44]	; (8009c34 <vPortSetupTimerInterrupt+0x38>)
 8009c08:	2200      	movs	r2, #0
 8009c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c0c:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <vPortSetupTimerInterrupt+0x3c>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a0a      	ldr	r2, [pc, #40]	; (8009c3c <vPortSetupTimerInterrupt+0x40>)
 8009c12:	fba2 2303 	umull	r2, r3, r2, r3
 8009c16:	099b      	lsrs	r3, r3, #6
 8009c18:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <vPortSetupTimerInterrupt+0x44>)
 8009c1a:	3b01      	subs	r3, #1
 8009c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c1e:	4b04      	ldr	r3, [pc, #16]	; (8009c30 <vPortSetupTimerInterrupt+0x34>)
 8009c20:	2207      	movs	r2, #7
 8009c22:	601a      	str	r2, [r3, #0]
}
 8009c24:	bf00      	nop
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	e000e010 	.word	0xe000e010
 8009c34:	e000e018 	.word	0xe000e018
 8009c38:	20000000 	.word	0x20000000
 8009c3c:	10624dd3 	.word	0x10624dd3
 8009c40:	e000e014 	.word	0xe000e014

08009c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c54 <vPortEnableVFP+0x10>
 8009c48:	6801      	ldr	r1, [r0, #0]
 8009c4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c4e:	6001      	str	r1, [r0, #0]
 8009c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c52:	bf00      	nop
 8009c54:	e000ed88 	.word	0xe000ed88

08009c58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c5e:	f3ef 8305 	mrs	r3, IPSR
 8009c62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2b0f      	cmp	r3, #15
 8009c68:	d914      	bls.n	8009c94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c6a:	4a17      	ldr	r2, [pc, #92]	; (8009cc8 <vPortValidateInterruptPriority+0x70>)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4413      	add	r3, r2
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c74:	4b15      	ldr	r3, [pc, #84]	; (8009ccc <vPortValidateInterruptPriority+0x74>)
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	7afa      	ldrb	r2, [r7, #11]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d20a      	bcs.n	8009c94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	607b      	str	r3, [r7, #4]
}
 8009c90:	bf00      	nop
 8009c92:	e7fe      	b.n	8009c92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c94:	4b0e      	ldr	r3, [pc, #56]	; (8009cd0 <vPortValidateInterruptPriority+0x78>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c9c:	4b0d      	ldr	r3, [pc, #52]	; (8009cd4 <vPortValidateInterruptPriority+0x7c>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d90a      	bls.n	8009cba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca8:	f383 8811 	msr	BASEPRI, r3
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	f3bf 8f4f 	dsb	sy
 8009cb4:	603b      	str	r3, [r7, #0]
}
 8009cb6:	bf00      	nop
 8009cb8:	e7fe      	b.n	8009cb8 <vPortValidateInterruptPriority+0x60>
	}
 8009cba:	bf00      	nop
 8009cbc:	3714      	adds	r7, #20
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr
 8009cc6:	bf00      	nop
 8009cc8:	e000e3f0 	.word	0xe000e3f0
 8009ccc:	20000fa0 	.word	0x20000fa0
 8009cd0:	e000ed0c 	.word	0xe000ed0c
 8009cd4:	20000fa4 	.word	0x20000fa4

08009cd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b08a      	sub	sp, #40	; 0x28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ce4:	f7fe fa5c 	bl	80081a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ce8:	4b5b      	ldr	r3, [pc, #364]	; (8009e58 <pvPortMalloc+0x180>)
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d101      	bne.n	8009cf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009cf0:	f000 f920 	bl	8009f34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009cf4:	4b59      	ldr	r3, [pc, #356]	; (8009e5c <pvPortMalloc+0x184>)
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f040 8093 	bne.w	8009e28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d01d      	beq.n	8009d44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009d08:	2208      	movs	r2, #8
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f003 0307 	and.w	r3, r3, #7
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d014      	beq.n	8009d44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f023 0307 	bic.w	r3, r3, #7
 8009d20:	3308      	adds	r3, #8
 8009d22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f003 0307 	and.w	r3, r3, #7
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00a      	beq.n	8009d44 <pvPortMalloc+0x6c>
	__asm volatile
 8009d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	617b      	str	r3, [r7, #20]
}
 8009d40:	bf00      	nop
 8009d42:	e7fe      	b.n	8009d42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d06e      	beq.n	8009e28 <pvPortMalloc+0x150>
 8009d4a:	4b45      	ldr	r3, [pc, #276]	; (8009e60 <pvPortMalloc+0x188>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d869      	bhi.n	8009e28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d54:	4b43      	ldr	r3, [pc, #268]	; (8009e64 <pvPortMalloc+0x18c>)
 8009d56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d58:	4b42      	ldr	r3, [pc, #264]	; (8009e64 <pvPortMalloc+0x18c>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d5e:	e004      	b.n	8009d6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d903      	bls.n	8009d7c <pvPortMalloc+0xa4>
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1f1      	bne.n	8009d60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d7c:	4b36      	ldr	r3, [pc, #216]	; (8009e58 <pvPortMalloc+0x180>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d82:	429a      	cmp	r2, r3
 8009d84:	d050      	beq.n	8009e28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2208      	movs	r2, #8
 8009d8c:	4413      	add	r3, r2
 8009d8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9a:	685a      	ldr	r2, [r3, #4]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	1ad2      	subs	r2, r2, r3
 8009da0:	2308      	movs	r3, #8
 8009da2:	005b      	lsls	r3, r3, #1
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d91f      	bls.n	8009de8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4413      	add	r3, r2
 8009dae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009db0:	69bb      	ldr	r3, [r7, #24]
 8009db2:	f003 0307 	and.w	r3, r3, #7
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00a      	beq.n	8009dd0 <pvPortMalloc+0xf8>
	__asm volatile
 8009dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dbe:	f383 8811 	msr	BASEPRI, r3
 8009dc2:	f3bf 8f6f 	isb	sy
 8009dc6:	f3bf 8f4f 	dsb	sy
 8009dca:	613b      	str	r3, [r7, #16]
}
 8009dcc:	bf00      	nop
 8009dce:	e7fe      	b.n	8009dce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	1ad2      	subs	r2, r2, r3
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009de2:	69b8      	ldr	r0, [r7, #24]
 8009de4:	f000 f908 	bl	8009ff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009de8:	4b1d      	ldr	r3, [pc, #116]	; (8009e60 <pvPortMalloc+0x188>)
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	685b      	ldr	r3, [r3, #4]
 8009df0:	1ad3      	subs	r3, r2, r3
 8009df2:	4a1b      	ldr	r2, [pc, #108]	; (8009e60 <pvPortMalloc+0x188>)
 8009df4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009df6:	4b1a      	ldr	r3, [pc, #104]	; (8009e60 <pvPortMalloc+0x188>)
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	4b1b      	ldr	r3, [pc, #108]	; (8009e68 <pvPortMalloc+0x190>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d203      	bcs.n	8009e0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e02:	4b17      	ldr	r3, [pc, #92]	; (8009e60 <pvPortMalloc+0x188>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a18      	ldr	r2, [pc, #96]	; (8009e68 <pvPortMalloc+0x190>)
 8009e08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	4b13      	ldr	r3, [pc, #76]	; (8009e5c <pvPortMalloc+0x184>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	431a      	orrs	r2, r3
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009e1e:	4b13      	ldr	r3, [pc, #76]	; (8009e6c <pvPortMalloc+0x194>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3301      	adds	r3, #1
 8009e24:	4a11      	ldr	r2, [pc, #68]	; (8009e6c <pvPortMalloc+0x194>)
 8009e26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e28:	f7fe f9c8 	bl	80081bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e2c:	69fb      	ldr	r3, [r7, #28]
 8009e2e:	f003 0307 	and.w	r3, r3, #7
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d00a      	beq.n	8009e4c <pvPortMalloc+0x174>
	__asm volatile
 8009e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3a:	f383 8811 	msr	BASEPRI, r3
 8009e3e:	f3bf 8f6f 	isb	sy
 8009e42:	f3bf 8f4f 	dsb	sy
 8009e46:	60fb      	str	r3, [r7, #12]
}
 8009e48:	bf00      	nop
 8009e4a:	e7fe      	b.n	8009e4a <pvPortMalloc+0x172>
	return pvReturn;
 8009e4c:	69fb      	ldr	r3, [r7, #28]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3728      	adds	r7, #40	; 0x28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	20008fb0 	.word	0x20008fb0
 8009e5c:	20008fc4 	.word	0x20008fc4
 8009e60:	20008fb4 	.word	0x20008fb4
 8009e64:	20008fa8 	.word	0x20008fa8
 8009e68:	20008fb8 	.word	0x20008fb8
 8009e6c:	20008fbc 	.word	0x20008fbc

08009e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b086      	sub	sp, #24
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d04d      	beq.n	8009f1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e82:	2308      	movs	r3, #8
 8009e84:	425b      	negs	r3, r3
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	4413      	add	r3, r2
 8009e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	4b24      	ldr	r3, [pc, #144]	; (8009f28 <vPortFree+0xb8>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4013      	ands	r3, r2
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10a      	bne.n	8009eb4 <vPortFree+0x44>
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea2:	f383 8811 	msr	BASEPRI, r3
 8009ea6:	f3bf 8f6f 	isb	sy
 8009eaa:	f3bf 8f4f 	dsb	sy
 8009eae:	60fb      	str	r3, [r7, #12]
}
 8009eb0:	bf00      	nop
 8009eb2:	e7fe      	b.n	8009eb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00a      	beq.n	8009ed2 <vPortFree+0x62>
	__asm volatile
 8009ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	60bb      	str	r3, [r7, #8]
}
 8009ece:	bf00      	nop
 8009ed0:	e7fe      	b.n	8009ed0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	685a      	ldr	r2, [r3, #4]
 8009ed6:	4b14      	ldr	r3, [pc, #80]	; (8009f28 <vPortFree+0xb8>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4013      	ands	r3, r2
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d01e      	beq.n	8009f1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d11a      	bne.n	8009f1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	4b0e      	ldr	r3, [pc, #56]	; (8009f28 <vPortFree+0xb8>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	43db      	mvns	r3, r3
 8009ef2:	401a      	ands	r2, r3
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ef8:	f7fe f952 	bl	80081a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	685a      	ldr	r2, [r3, #4]
 8009f00:	4b0a      	ldr	r3, [pc, #40]	; (8009f2c <vPortFree+0xbc>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4413      	add	r3, r2
 8009f06:	4a09      	ldr	r2, [pc, #36]	; (8009f2c <vPortFree+0xbc>)
 8009f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f0a:	6938      	ldr	r0, [r7, #16]
 8009f0c:	f000 f874 	bl	8009ff8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009f10:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <vPortFree+0xc0>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	3301      	adds	r3, #1
 8009f16:	4a06      	ldr	r2, [pc, #24]	; (8009f30 <vPortFree+0xc0>)
 8009f18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009f1a:	f7fe f94f 	bl	80081bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f1e:	bf00      	nop
 8009f20:	3718      	adds	r7, #24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop
 8009f28:	20008fc4 	.word	0x20008fc4
 8009f2c:	20008fb4 	.word	0x20008fb4
 8009f30:	20008fc0 	.word	0x20008fc0

08009f34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f40:	4b27      	ldr	r3, [pc, #156]	; (8009fe0 <prvHeapInit+0xac>)
 8009f42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f003 0307 	and.w	r3, r3, #7
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00c      	beq.n	8009f68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	3307      	adds	r3, #7
 8009f52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f023 0307 	bic.w	r3, r3, #7
 8009f5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	1ad3      	subs	r3, r2, r3
 8009f62:	4a1f      	ldr	r2, [pc, #124]	; (8009fe0 <prvHeapInit+0xac>)
 8009f64:	4413      	add	r3, r2
 8009f66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f6c:	4a1d      	ldr	r2, [pc, #116]	; (8009fe4 <prvHeapInit+0xb0>)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f72:	4b1c      	ldr	r3, [pc, #112]	; (8009fe4 <prvHeapInit+0xb0>)
 8009f74:	2200      	movs	r2, #0
 8009f76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f80:	2208      	movs	r2, #8
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	1a9b      	subs	r3, r3, r2
 8009f86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	f023 0307 	bic.w	r3, r3, #7
 8009f8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	4a15      	ldr	r2, [pc, #84]	; (8009fe8 <prvHeapInit+0xb4>)
 8009f94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f96:	4b14      	ldr	r3, [pc, #80]	; (8009fe8 <prvHeapInit+0xb4>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f9e:	4b12      	ldr	r3, [pc, #72]	; (8009fe8 <prvHeapInit+0xb4>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	1ad2      	subs	r2, r2, r3
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009fb4:	4b0c      	ldr	r3, [pc, #48]	; (8009fe8 <prvHeapInit+0xb4>)
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	4a0a      	ldr	r2, [pc, #40]	; (8009fec <prvHeapInit+0xb8>)
 8009fc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	4a09      	ldr	r2, [pc, #36]	; (8009ff0 <prvHeapInit+0xbc>)
 8009fca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fcc:	4b09      	ldr	r3, [pc, #36]	; (8009ff4 <prvHeapInit+0xc0>)
 8009fce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009fd2:	601a      	str	r2, [r3, #0]
}
 8009fd4:	bf00      	nop
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr
 8009fe0:	20000fa8 	.word	0x20000fa8
 8009fe4:	20008fa8 	.word	0x20008fa8
 8009fe8:	20008fb0 	.word	0x20008fb0
 8009fec:	20008fb8 	.word	0x20008fb8
 8009ff0:	20008fb4 	.word	0x20008fb4
 8009ff4:	20008fc4 	.word	0x20008fc4

08009ff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a000:	4b28      	ldr	r3, [pc, #160]	; (800a0a4 <prvInsertBlockIntoFreeList+0xac>)
 800a002:	60fb      	str	r3, [r7, #12]
 800a004:	e002      	b.n	800a00c <prvInsertBlockIntoFreeList+0x14>
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	60fb      	str	r3, [r7, #12]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	429a      	cmp	r2, r3
 800a014:	d8f7      	bhi.n	800a006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	68ba      	ldr	r2, [r7, #8]
 800a020:	4413      	add	r3, r2
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	429a      	cmp	r2, r3
 800a026:	d108      	bne.n	800a03a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	685a      	ldr	r2, [r3, #4]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	441a      	add	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	441a      	add	r2, r3
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d118      	bne.n	800a080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	4b15      	ldr	r3, [pc, #84]	; (800a0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	429a      	cmp	r2, r3
 800a058:	d00d      	beq.n	800a076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685a      	ldr	r2, [r3, #4]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	441a      	add	r2, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	601a      	str	r2, [r3, #0]
 800a074:	e008      	b.n	800a088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a076:	4b0c      	ldr	r3, [pc, #48]	; (800a0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	601a      	str	r2, [r3, #0]
 800a07e:	e003      	b.n	800a088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d002      	beq.n	800a096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a096:	bf00      	nop
 800a098:	3714      	adds	r7, #20
 800a09a:	46bd      	mov	sp, r7
 800a09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a0:	4770      	bx	lr
 800a0a2:	bf00      	nop
 800a0a4:	20008fa8 	.word	0x20008fa8
 800a0a8:	20008fb0 	.word	0x20008fb0

0800a0ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4912      	ldr	r1, [pc, #72]	; (800a0fc <MX_USB_DEVICE_Init+0x50>)
 800a0b4:	4812      	ldr	r0, [pc, #72]	; (800a100 <MX_USB_DEVICE_Init+0x54>)
 800a0b6:	f7fa ff15 	bl	8004ee4 <USBD_Init>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d001      	beq.n	800a0c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a0c0:	f7f6 fb44 	bl	800074c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a0c4:	490f      	ldr	r1, [pc, #60]	; (800a104 <MX_USB_DEVICE_Init+0x58>)
 800a0c6:	480e      	ldr	r0, [pc, #56]	; (800a100 <MX_USB_DEVICE_Init+0x54>)
 800a0c8:	f7fa ff3c 	bl	8004f44 <USBD_RegisterClass>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a0d2:	f7f6 fb3b 	bl	800074c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a0d6:	490c      	ldr	r1, [pc, #48]	; (800a108 <MX_USB_DEVICE_Init+0x5c>)
 800a0d8:	4809      	ldr	r0, [pc, #36]	; (800a100 <MX_USB_DEVICE_Init+0x54>)
 800a0da:	f7fa fe2d 	bl	8004d38 <USBD_CDC_RegisterInterface>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d001      	beq.n	800a0e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a0e4:	f7f6 fb32 	bl	800074c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a0e8:	4805      	ldr	r0, [pc, #20]	; (800a100 <MX_USB_DEVICE_Init+0x54>)
 800a0ea:	f7fa ff61 	bl	8004fb0 <USBD_Start>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d001      	beq.n	800a0f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a0f4:	f7f6 fb2a 	bl	800074c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a0f8:	bf00      	nop
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	200000b0 	.word	0x200000b0
 800a100:	20008fc8 	.word	0x20008fc8
 800a104:	20000018 	.word	0x20000018
 800a108:	2000009c 	.word	0x2000009c

0800a10c <init_usb_rtos_obj>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

void init_usb_rtos_obj(void){
 800a10c:	b580      	push	{r7, lr}
 800a10e:	af00      	add	r7, sp, #0
	sem_usb_tx = xSemaphoreCreateBinary();
 800a110:	2203      	movs	r2, #3
 800a112:	2100      	movs	r1, #0
 800a114:	2001      	movs	r0, #1
 800a116:	f7fc fcaf 	bl	8006a78 <xQueueGenericCreate>
 800a11a:	4603      	mov	r3, r0
 800a11c:	4a07      	ldr	r2, [pc, #28]	; (800a13c <init_usb_rtos_obj+0x30>)
 800a11e:	6013      	str	r3, [r2, #0]
	msg_buf_rx = xMessageBufferCreate(768);
 800a120:	2201      	movs	r2, #1
 800a122:	2100      	movs	r1, #0
 800a124:	f44f 7040 	mov.w	r0, #768	; 0x300
 800a128:	f7fd fa9c 	bl	8007664 <xStreamBufferGenericCreate>
 800a12c:	4603      	mov	r3, r0
 800a12e:	4a04      	ldr	r2, [pc, #16]	; (800a140 <init_usb_rtos_obj+0x34>)
 800a130:	6013      	str	r3, [r2, #0]
	usb_on = 1;
 800a132:	4b04      	ldr	r3, [pc, #16]	; (800a144 <init_usb_rtos_obj+0x38>)
 800a134:	2201      	movs	r2, #1
 800a136:	601a      	str	r2, [r3, #0]
}
 800a138:	bf00      	nop
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	2000a2a8 	.word	0x2000a2a8
 800a140:	200092a4 	.word	0x200092a4
 800a144:	2000a2ac 	.word	0x2000a2ac

0800a148 <read_usb_cdc>:
/*
BaseType_t CDC_Receiveq_MS(char *data, TickType_t timeout){
	return xQueueReceive(queue_usb, data, timeout);
}*/

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout){
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
	return xMessageBufferReceive(msg_buf_rx, buffer, buf_len, timeout);
 800a154:	4b06      	ldr	r3, [pc, #24]	; (800a170 <read_usb_cdc+0x28>)
 800a156:	6818      	ldr	r0, [r3, #0]
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68f9      	ldr	r1, [r7, #12]
 800a15e:	f7fd fbbd 	bl	80078dc <xStreamBufferReceive>
 800a162:	4603      	mov	r3, r0
 800a164:	b2db      	uxtb	r3, r3
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	200092a4 	.word	0x200092a4

0800a174 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a178:	2200      	movs	r2, #0
 800a17a:	4905      	ldr	r1, [pc, #20]	; (800a190 <CDC_Init_FS+0x1c>)
 800a17c:	4805      	ldr	r0, [pc, #20]	; (800a194 <CDC_Init_FS+0x20>)
 800a17e:	f7fa fdf5 	bl	8004d6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a182:	4905      	ldr	r1, [pc, #20]	; (800a198 <CDC_Init_FS+0x24>)
 800a184:	4803      	ldr	r0, [pc, #12]	; (800a194 <CDC_Init_FS+0x20>)
 800a186:	f7fa fe13 	bl	8004db0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a18a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	bd80      	pop	{r7, pc}
 800a190:	20009aa8 	.word	0x20009aa8
 800a194:	20008fc8 	.word	0x20008fc8
 800a198:	200092a8 	.word	0x200092a8

0800a19c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a19c:	b480      	push	{r7}
 800a19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a1a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	6039      	str	r1, [r7, #0]
 800a1b6:	71fb      	strb	r3, [r7, #7]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  portBASE_TYPE yield = pdFALSE;
 800a1bc:	2300      	movs	r3, #0
 800a1be:	60fb      	str	r3, [r7, #12]
  char data = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	72fb      	strb	r3, [r7, #11]
  switch(cmd)
 800a1c4:	79fb      	ldrb	r3, [r7, #7]
 800a1c6:	2b23      	cmp	r3, #35	; 0x23
 800a1c8:	d85f      	bhi.n	800a28a <CDC_Control_FS+0xde>
 800a1ca:	a201      	add	r2, pc, #4	; (adr r2, 800a1d0 <CDC_Control_FS+0x24>)
 800a1cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d0:	0800a28b 	.word	0x0800a28b
 800a1d4:	0800a28b 	.word	0x0800a28b
 800a1d8:	0800a28b 	.word	0x0800a28b
 800a1dc:	0800a28b 	.word	0x0800a28b
 800a1e0:	0800a28b 	.word	0x0800a28b
 800a1e4:	0800a28b 	.word	0x0800a28b
 800a1e8:	0800a28b 	.word	0x0800a28b
 800a1ec:	0800a28b 	.word	0x0800a28b
 800a1f0:	0800a28b 	.word	0x0800a28b
 800a1f4:	0800a28b 	.word	0x0800a28b
 800a1f8:	0800a28b 	.word	0x0800a28b
 800a1fc:	0800a28b 	.word	0x0800a28b
 800a200:	0800a28b 	.word	0x0800a28b
 800a204:	0800a28b 	.word	0x0800a28b
 800a208:	0800a28b 	.word	0x0800a28b
 800a20c:	0800a28b 	.word	0x0800a28b
 800a210:	0800a28b 	.word	0x0800a28b
 800a214:	0800a28b 	.word	0x0800a28b
 800a218:	0800a28b 	.word	0x0800a28b
 800a21c:	0800a28b 	.word	0x0800a28b
 800a220:	0800a28b 	.word	0x0800a28b
 800a224:	0800a28b 	.word	0x0800a28b
 800a228:	0800a28b 	.word	0x0800a28b
 800a22c:	0800a28b 	.word	0x0800a28b
 800a230:	0800a28b 	.word	0x0800a28b
 800a234:	0800a28b 	.word	0x0800a28b
 800a238:	0800a28b 	.word	0x0800a28b
 800a23c:	0800a28b 	.word	0x0800a28b
 800a240:	0800a28b 	.word	0x0800a28b
 800a244:	0800a28b 	.word	0x0800a28b
 800a248:	0800a28b 	.word	0x0800a28b
 800a24c:	0800a28b 	.word	0x0800a28b
 800a250:	0800a28b 	.word	0x0800a28b
 800a254:	0800a28b 	.word	0x0800a28b
 800a258:	0800a261 	.word	0x0800a261
 800a25c:	0800a28b 	.word	0x0800a28b
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
  	  xMessageBufferSendFromISR(msg_buf_rx, &data, 1, &yield);
 800a260:	4b0e      	ldr	r3, [pc, #56]	; (800a29c <CDC_Control_FS+0xf0>)
 800a262:	6818      	ldr	r0, [r3, #0]
 800a264:	f107 030c 	add.w	r3, r7, #12
 800a268:	f107 010b 	add.w	r1, r7, #11
 800a26c:	2201      	movs	r2, #1
 800a26e:	f7fd fa87 	bl	8007780 <xStreamBufferSendFromISR>
  	  portYIELD_FROM_ISR(yield);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d00a      	beq.n	800a28e <CDC_Control_FS+0xe2>
 800a278:	4b09      	ldr	r3, [pc, #36]	; (800a2a0 <CDC_Control_FS+0xf4>)
 800a27a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a27e:	601a      	str	r2, [r3, #0]
 800a280:	f3bf 8f4f 	dsb	sy
 800a284:	f3bf 8f6f 	isb	sy

    break;
 800a288:	e001      	b.n	800a28e <CDC_Control_FS+0xe2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a28a:	bf00      	nop
 800a28c:	e000      	b.n	800a290 <CDC_Control_FS+0xe4>
    break;
 800a28e:	bf00      	nop
  }

  return (USBD_OK);
 800a290:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	200092a4 	.word	0x200092a4
 800a2a0:	e000ed04 	.word	0xe000ed04

0800a2a4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	portBASE_TYPE yield = pdFALSE;
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	60fb      	str	r3, [r7, #12]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a2b2:	6879      	ldr	r1, [r7, #4]
 800a2b4:	480f      	ldr	r0, [pc, #60]	; (800a2f4 <CDC_Receive_FS+0x50>)
 800a2b6:	f7fa fd7b 	bl	8004db0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a2ba:	480e      	ldr	r0, [pc, #56]	; (800a2f4 <CDC_Receive_FS+0x50>)
 800a2bc:	f7fa fddc 	bl	8004e78 <USBD_CDC_ReceivePacket>

	  xMessageBufferSendFromISR(msg_buf_rx, Buf, *Len, &yield);
 800a2c0:	4b0d      	ldr	r3, [pc, #52]	; (800a2f8 <CDC_Receive_FS+0x54>)
 800a2c2:	6818      	ldr	r0, [r3, #0]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	681a      	ldr	r2, [r3, #0]
 800a2c8:	f107 030c 	add.w	r3, r7, #12
 800a2cc:	6879      	ldr	r1, [r7, #4]
 800a2ce:	f7fd fa57 	bl	8007780 <xStreamBufferSendFromISR>
	  portYIELD_FROM_ISR(yield);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d007      	beq.n	800a2e8 <CDC_Receive_FS+0x44>
 800a2d8:	4b08      	ldr	r3, [pc, #32]	; (800a2fc <CDC_Receive_FS+0x58>)
 800a2da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2de:	601a      	str	r2, [r3, #0]
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	f3bf 8f6f 	isb	sy

	return (USBD_OK);
 800a2e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3710      	adds	r7, #16
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd80      	pop	{r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	20008fc8 	.word	0x20008fc8
 800a2f8:	200092a4 	.word	0x200092a4
 800a2fc:	e000ed04 	.word	0xe000ed04

0800a300 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b084      	sub	sp, #16
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	460b      	mov	r3, r1
 800a30a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	73fb      	strb	r3, [r7, #15]
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
	  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
	  xSemaphoreGive(mutex_usb);
  }*/
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a310:	4b10      	ldr	r3, [pc, #64]	; (800a354 <CDC_Transmit_FS+0x54>)
 800a312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a316:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a322:	2301      	movs	r3, #1
 800a324:	e012      	b.n	800a34c <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a326:	887b      	ldrh	r3, [r7, #2]
 800a328:	461a      	mov	r2, r3
 800a32a:	6879      	ldr	r1, [r7, #4]
 800a32c:	4809      	ldr	r0, [pc, #36]	; (800a354 <CDC_Transmit_FS+0x54>)
 800a32e:	f7fa fd1d 	bl	8004d6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a332:	4808      	ldr	r0, [pc, #32]	; (800a354 <CDC_Transmit_FS+0x54>)
 800a334:	f7fa fd5a 	bl	8004dec <USBD_CDC_TransmitPacket>
 800a338:	4603      	mov	r3, r0
 800a33a:	73fb      	strb	r3, [r7, #15]
  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 800a33c:	4b06      	ldr	r3, [pc, #24]	; (800a358 <CDC_Transmit_FS+0x58>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a344:	4618      	mov	r0, r3
 800a346:	f7fc fefb 	bl	8007140 <xQueueSemaphoreTake>
  /* USER CODE END 7 */
  return result;
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20008fc8 	.word	0x20008fc8
 800a358:	2000a2a8 	.word	0x2000a2a8

0800a35c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b086      	sub	sp, #24
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	4613      	mov	r3, r2
 800a368:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 800a36e:	2300      	movs	r3, #0
 800a370:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 800a372:	4b0b      	ldr	r3, [pc, #44]	; (800a3a0 <CDC_TransmitCplt_FS+0x44>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f107 0210 	add.w	r2, r7, #16
 800a37a:	4611      	mov	r1, r2
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fc fd72 	bl	8006e66 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(&tmp);
 800a382:	4b08      	ldr	r3, [pc, #32]	; (800a3a4 <CDC_TransmitCplt_FS+0x48>)
 800a384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a388:	601a      	str	r2, [r3, #0]
 800a38a:	f3bf 8f4f 	dsb	sy
 800a38e:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 800a392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a396:	4618      	mov	r0, r3
 800a398:	3718      	adds	r7, #24
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}
 800a39e:	bf00      	nop
 800a3a0:	2000a2a8 	.word	0x2000a2a8
 800a3a4:	e000ed04 	.word	0xe000ed04

0800a3a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	6039      	str	r1, [r7, #0]
 800a3b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2212      	movs	r2, #18
 800a3b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a3ba:	4b03      	ldr	r3, [pc, #12]	; (800a3c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr
 800a3c8:	200000cc 	.word	0x200000cc

0800a3cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	6039      	str	r1, [r7, #0]
 800a3d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	2204      	movs	r2, #4
 800a3dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a3de:	4b03      	ldr	r3, [pc, #12]	; (800a3ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr
 800a3ec:	200000e0 	.word	0x200000e0

0800a3f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b082      	sub	sp, #8
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	6039      	str	r1, [r7, #0]
 800a3fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3fc:	79fb      	ldrb	r3, [r7, #7]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d105      	bne.n	800a40e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	4907      	ldr	r1, [pc, #28]	; (800a424 <USBD_FS_ProductStrDescriptor+0x34>)
 800a406:	4808      	ldr	r0, [pc, #32]	; (800a428 <USBD_FS_ProductStrDescriptor+0x38>)
 800a408:	f7fb ff7e 	bl	8006308 <USBD_GetString>
 800a40c:	e004      	b.n	800a418 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a40e:	683a      	ldr	r2, [r7, #0]
 800a410:	4904      	ldr	r1, [pc, #16]	; (800a424 <USBD_FS_ProductStrDescriptor+0x34>)
 800a412:	4805      	ldr	r0, [pc, #20]	; (800a428 <USBD_FS_ProductStrDescriptor+0x38>)
 800a414:	f7fb ff78 	bl	8006308 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a418:	4b02      	ldr	r3, [pc, #8]	; (800a424 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	2000a2b0 	.word	0x2000a2b0
 800a428:	0800ae4c 	.word	0x0800ae4c

0800a42c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	4603      	mov	r3, r0
 800a434:	6039      	str	r1, [r7, #0]
 800a436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	4904      	ldr	r1, [pc, #16]	; (800a44c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a43c:	4804      	ldr	r0, [pc, #16]	; (800a450 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a43e:	f7fb ff63 	bl	8006308 <USBD_GetString>
  return USBD_StrDesc;
 800a442:	4b02      	ldr	r3, [pc, #8]	; (800a44c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a444:	4618      	mov	r0, r3
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	2000a2b0 	.word	0x2000a2b0
 800a450:	0800ae64 	.word	0x0800ae64

0800a454 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	4603      	mov	r3, r0
 800a45c:	6039      	str	r1, [r7, #0]
 800a45e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	221a      	movs	r2, #26
 800a464:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a466:	f000 f843 	bl	800a4f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a46a:	4b02      	ldr	r3, [pc, #8]	; (800a474 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	200000e4 	.word	0x200000e4

0800a478 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	4603      	mov	r3, r0
 800a480:	6039      	str	r1, [r7, #0]
 800a482:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a484:	79fb      	ldrb	r3, [r7, #7]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d105      	bne.n	800a496 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	4907      	ldr	r1, [pc, #28]	; (800a4ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800a48e:	4808      	ldr	r0, [pc, #32]	; (800a4b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a490:	f7fb ff3a 	bl	8006308 <USBD_GetString>
 800a494:	e004      	b.n	800a4a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	4904      	ldr	r1, [pc, #16]	; (800a4ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800a49a:	4805      	ldr	r0, [pc, #20]	; (800a4b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a49c:	f7fb ff34 	bl	8006308 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4a0:	4b02      	ldr	r3, [pc, #8]	; (800a4ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3708      	adds	r7, #8
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	2000a2b0 	.word	0x2000a2b0
 800a4b0:	0800ae78 	.word	0x0800ae78

0800a4b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	6039      	str	r1, [r7, #0]
 800a4be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a4c0:	79fb      	ldrb	r3, [r7, #7]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d105      	bne.n	800a4d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4c6:	683a      	ldr	r2, [r7, #0]
 800a4c8:	4907      	ldr	r1, [pc, #28]	; (800a4e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4ca:	4808      	ldr	r0, [pc, #32]	; (800a4ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4cc:	f7fb ff1c 	bl	8006308 <USBD_GetString>
 800a4d0:	e004      	b.n	800a4dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	4904      	ldr	r1, [pc, #16]	; (800a4e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a4d6:	4805      	ldr	r0, [pc, #20]	; (800a4ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a4d8:	f7fb ff16 	bl	8006308 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a4dc:	4b02      	ldr	r3, [pc, #8]	; (800a4e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	2000a2b0 	.word	0x2000a2b0
 800a4ec:	0800ae84 	.word	0x0800ae84

0800a4f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b084      	sub	sp, #16
 800a4f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a4f6:	4b0f      	ldr	r3, [pc, #60]	; (800a534 <Get_SerialNum+0x44>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a4fc:	4b0e      	ldr	r3, [pc, #56]	; (800a538 <Get_SerialNum+0x48>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a502:	4b0e      	ldr	r3, [pc, #56]	; (800a53c <Get_SerialNum+0x4c>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	4413      	add	r3, r2
 800a50e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d009      	beq.n	800a52a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a516:	2208      	movs	r2, #8
 800a518:	4909      	ldr	r1, [pc, #36]	; (800a540 <Get_SerialNum+0x50>)
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 f814 	bl	800a548 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a520:	2204      	movs	r2, #4
 800a522:	4908      	ldr	r1, [pc, #32]	; (800a544 <Get_SerialNum+0x54>)
 800a524:	68b8      	ldr	r0, [r7, #8]
 800a526:	f000 f80f 	bl	800a548 <IntToUnicode>
  }
}
 800a52a:	bf00      	nop
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	1fff7a10 	.word	0x1fff7a10
 800a538:	1fff7a14 	.word	0x1fff7a14
 800a53c:	1fff7a18 	.word	0x1fff7a18
 800a540:	200000e6 	.word	0x200000e6
 800a544:	200000f6 	.word	0x200000f6

0800a548 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a548:	b480      	push	{r7}
 800a54a:	b087      	sub	sp, #28
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	60b9      	str	r1, [r7, #8]
 800a552:	4613      	mov	r3, r2
 800a554:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a556:	2300      	movs	r3, #0
 800a558:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a55a:	2300      	movs	r3, #0
 800a55c:	75fb      	strb	r3, [r7, #23]
 800a55e:	e027      	b.n	800a5b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	0f1b      	lsrs	r3, r3, #28
 800a564:	2b09      	cmp	r3, #9
 800a566:	d80b      	bhi.n	800a580 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	0f1b      	lsrs	r3, r3, #28
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	7dfb      	ldrb	r3, [r7, #23]
 800a570:	005b      	lsls	r3, r3, #1
 800a572:	4619      	mov	r1, r3
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	440b      	add	r3, r1
 800a578:	3230      	adds	r2, #48	; 0x30
 800a57a:	b2d2      	uxtb	r2, r2
 800a57c:	701a      	strb	r2, [r3, #0]
 800a57e:	e00a      	b.n	800a596 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	0f1b      	lsrs	r3, r3, #28
 800a584:	b2da      	uxtb	r2, r3
 800a586:	7dfb      	ldrb	r3, [r7, #23]
 800a588:	005b      	lsls	r3, r3, #1
 800a58a:	4619      	mov	r1, r3
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	440b      	add	r3, r1
 800a590:	3237      	adds	r2, #55	; 0x37
 800a592:	b2d2      	uxtb	r2, r2
 800a594:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	011b      	lsls	r3, r3, #4
 800a59a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a59c:	7dfb      	ldrb	r3, [r7, #23]
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a5aa:	7dfb      	ldrb	r3, [r7, #23]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	75fb      	strb	r3, [r7, #23]
 800a5b0:	7dfa      	ldrb	r2, [r7, #23]
 800a5b2:	79fb      	ldrb	r3, [r7, #7]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d3d3      	bcc.n	800a560 <IntToUnicode+0x18>
  }
}
 800a5b8:	bf00      	nop
 800a5ba:	bf00      	nop
 800a5bc:	371c      	adds	r7, #28
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
	...

0800a5c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08a      	sub	sp, #40	; 0x28
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5d0:	f107 0314 	add.w	r3, r7, #20
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	605a      	str	r2, [r3, #4]
 800a5da:	609a      	str	r2, [r3, #8]
 800a5dc:	60da      	str	r2, [r3, #12]
 800a5de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5e8:	d13a      	bne.n	800a660 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	613b      	str	r3, [r7, #16]
 800a5ee:	4b1e      	ldr	r3, [pc, #120]	; (800a668 <HAL_PCD_MspInit+0xa0>)
 800a5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f2:	4a1d      	ldr	r2, [pc, #116]	; (800a668 <HAL_PCD_MspInit+0xa0>)
 800a5f4:	f043 0301 	orr.w	r3, r3, #1
 800a5f8:	6313      	str	r3, [r2, #48]	; 0x30
 800a5fa:	4b1b      	ldr	r3, [pc, #108]	; (800a668 <HAL_PCD_MspInit+0xa0>)
 800a5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	613b      	str	r3, [r7, #16]
 800a604:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a606:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a60a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a60c:	2302      	movs	r3, #2
 800a60e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a610:	2300      	movs	r3, #0
 800a612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a614:	2303      	movs	r3, #3
 800a616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a618:	230a      	movs	r3, #10
 800a61a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a61c:	f107 0314 	add.w	r3, r7, #20
 800a620:	4619      	mov	r1, r3
 800a622:	4812      	ldr	r0, [pc, #72]	; (800a66c <HAL_PCD_MspInit+0xa4>)
 800a624:	f7f6 fad6 	bl	8000bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a628:	4b0f      	ldr	r3, [pc, #60]	; (800a668 <HAL_PCD_MspInit+0xa0>)
 800a62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a62c:	4a0e      	ldr	r2, [pc, #56]	; (800a668 <HAL_PCD_MspInit+0xa0>)
 800a62e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a632:	6353      	str	r3, [r2, #52]	; 0x34
 800a634:	2300      	movs	r3, #0
 800a636:	60fb      	str	r3, [r7, #12]
 800a638:	4b0b      	ldr	r3, [pc, #44]	; (800a668 <HAL_PCD_MspInit+0xa0>)
 800a63a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a63c:	4a0a      	ldr	r2, [pc, #40]	; (800a668 <HAL_PCD_MspInit+0xa0>)
 800a63e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a642:	6453      	str	r3, [r2, #68]	; 0x44
 800a644:	4b08      	ldr	r3, [pc, #32]	; (800a668 <HAL_PCD_MspInit+0xa0>)
 800a646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a64c:	60fb      	str	r3, [r7, #12]
 800a64e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a650:	2200      	movs	r2, #0
 800a652:	2105      	movs	r1, #5
 800a654:	2043      	movs	r0, #67	; 0x43
 800a656:	f7f6 fa86 	bl	8000b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a65a:	2043      	movs	r0, #67	; 0x43
 800a65c:	f7f6 fa9f 	bl	8000b9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a660:	bf00      	nop
 800a662:	3728      	adds	r7, #40	; 0x28
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}
 800a668:	40023800 	.word	0x40023800
 800a66c:	40020000 	.word	0x40020000

0800a670 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a684:	4619      	mov	r1, r3
 800a686:	4610      	mov	r0, r2
 800a688:	f7fa fcdf 	bl	800504a <USBD_LL_SetupStage>
}
 800a68c:	bf00      	nop
 800a68e:	3708      	adds	r7, #8
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a6a6:	78fa      	ldrb	r2, [r7, #3]
 800a6a8:	6879      	ldr	r1, [r7, #4]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	00db      	lsls	r3, r3, #3
 800a6ae:	4413      	add	r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	440b      	add	r3, r1
 800a6b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	78fb      	ldrb	r3, [r7, #3]
 800a6bc:	4619      	mov	r1, r3
 800a6be:	f7fa fd19 	bl	80050f4 <USBD_LL_DataOutStage>
}
 800a6c2:	bf00      	nop
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b082      	sub	sp, #8
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a6dc:	78fa      	ldrb	r2, [r7, #3]
 800a6de:	6879      	ldr	r1, [r7, #4]
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	00db      	lsls	r3, r3, #3
 800a6e4:	4413      	add	r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	440b      	add	r3, r1
 800a6ea:	334c      	adds	r3, #76	; 0x4c
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	78fb      	ldrb	r3, [r7, #3]
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	f7fa fdb2 	bl	800525a <USBD_LL_DataInStage>
}
 800a6f6:	bf00      	nop
 800a6f8:	3708      	adds	r7, #8
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}

0800a6fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6fe:	b580      	push	{r7, lr}
 800a700:	b082      	sub	sp, #8
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a70c:	4618      	mov	r0, r3
 800a70e:	f7fa fee6 	bl	80054de <USBD_LL_SOF>
}
 800a712:	bf00      	nop
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}

0800a71a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a71a:	b580      	push	{r7, lr}
 800a71c:	b084      	sub	sp, #16
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a722:	2301      	movs	r3, #1
 800a724:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	68db      	ldr	r3, [r3, #12]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d102      	bne.n	800a734 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a72e:	2300      	movs	r3, #0
 800a730:	73fb      	strb	r3, [r7, #15]
 800a732:	e008      	b.n	800a746 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	2b02      	cmp	r3, #2
 800a73a:	d102      	bne.n	800a742 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a73c:	2301      	movs	r3, #1
 800a73e:	73fb      	strb	r3, [r7, #15]
 800a740:	e001      	b.n	800a746 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a742:	f7f6 f803 	bl	800074c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a74c:	7bfa      	ldrb	r2, [r7, #15]
 800a74e:	4611      	mov	r1, r2
 800a750:	4618      	mov	r0, r3
 800a752:	f7fa fe86 	bl	8005462 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a75c:	4618      	mov	r0, r3
 800a75e:	f7fa fe2e 	bl	80053be <USBD_LL_Reset>
}
 800a762:	bf00      	nop
 800a764:	3710      	adds	r7, #16
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}
	...

0800a76c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fa fe81 	bl	8005482 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	6812      	ldr	r2, [r2, #0]
 800a78e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a792:	f043 0301 	orr.w	r3, r3, #1
 800a796:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6a1b      	ldr	r3, [r3, #32]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d005      	beq.n	800a7ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a7a0:	4b04      	ldr	r3, [pc, #16]	; (800a7b4 <HAL_PCD_SuspendCallback+0x48>)
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	4a03      	ldr	r2, [pc, #12]	; (800a7b4 <HAL_PCD_SuspendCallback+0x48>)
 800a7a6:	f043 0306 	orr.w	r3, r3, #6
 800a7aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a7ac:	bf00      	nop
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	e000ed00 	.word	0xe000ed00

0800a7b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fa fe71 	bl	80054ae <USBD_LL_Resume>
}
 800a7cc:	bf00      	nop
 800a7ce:	3708      	adds	r7, #8
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7e6:	78fa      	ldrb	r2, [r7, #3]
 800a7e8:	4611      	mov	r1, r2
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f7fa fec9 	bl	8005582 <USBD_LL_IsoOUTIncomplete>
}
 800a7f0:	bf00      	nop
 800a7f2:	3708      	adds	r7, #8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}

0800a7f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b082      	sub	sp, #8
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	460b      	mov	r3, r1
 800a802:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a80a:	78fa      	ldrb	r2, [r7, #3]
 800a80c:	4611      	mov	r1, r2
 800a80e:	4618      	mov	r0, r3
 800a810:	f7fa fe85 	bl	800551e <USBD_LL_IsoINIncomplete>
}
 800a814:	bf00      	nop
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fa fedb 	bl	80055e6 <USBD_LL_DevConnected>
}
 800a830:	bf00      	nop
 800a832:	3708      	adds	r7, #8
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b082      	sub	sp, #8
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a846:	4618      	mov	r0, r3
 800a848:	f7fa fed8 	bl	80055fc <USBD_LL_DevDisconnected>
}
 800a84c:	bf00      	nop
 800a84e:	3708      	adds	r7, #8
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d13c      	bne.n	800a8de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a864:	4a20      	ldr	r2, [pc, #128]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4a1e      	ldr	r2, [pc, #120]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a870:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a874:	4b1c      	ldr	r3, [pc, #112]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a876:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a87a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a87c:	4b1a      	ldr	r3, [pc, #104]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a87e:	2204      	movs	r2, #4
 800a880:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a882:	4b19      	ldr	r3, [pc, #100]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a884:	2202      	movs	r2, #2
 800a886:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a888:	4b17      	ldr	r3, [pc, #92]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a88a:	2200      	movs	r2, #0
 800a88c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a88e:	4b16      	ldr	r3, [pc, #88]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a890:	2202      	movs	r2, #2
 800a892:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a894:	4b14      	ldr	r3, [pc, #80]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a896:	2200      	movs	r2, #0
 800a898:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a89a:	4b13      	ldr	r3, [pc, #76]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a89c:	2200      	movs	r2, #0
 800a89e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a8a0:	4b11      	ldr	r3, [pc, #68]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a8a6:	4b10      	ldr	r3, [pc, #64]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a8ac:	4b0e      	ldr	r3, [pc, #56]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a8b2:	480d      	ldr	r0, [pc, #52]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a8b4:	f7f6 fb45 	bl	8000f42 <HAL_PCD_Init>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a8be:	f7f5 ff45 	bl	800074c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8c2:	2180      	movs	r1, #128	; 0x80
 800a8c4:	4808      	ldr	r0, [pc, #32]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a8c6:	f7f7 fd9c 	bl	8002402 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a8ca:	2240      	movs	r2, #64	; 0x40
 800a8cc:	2100      	movs	r1, #0
 800a8ce:	4806      	ldr	r0, [pc, #24]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a8d0:	f7f7 fd50 	bl	8002374 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a8d4:	2280      	movs	r2, #128	; 0x80
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	4803      	ldr	r0, [pc, #12]	; (800a8e8 <USBD_LL_Init+0x94>)
 800a8da:	f7f7 fd4b 	bl	8002374 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3708      	adds	r7, #8
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}
 800a8e8:	2000a4b0 	.word	0x2000a4b0

0800a8ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a902:	4618      	mov	r0, r3
 800a904:	f7f6 fc3a 	bl	800117c <HAL_PCD_Start>
 800a908:	4603      	mov	r3, r0
 800a90a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a90c:	7bfb      	ldrb	r3, [r7, #15]
 800a90e:	4618      	mov	r0, r3
 800a910:	f000 f942 	bl	800ab98 <USBD_Get_USB_Status>
 800a914:	4603      	mov	r3, r0
 800a916:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a918:	7bbb      	ldrb	r3, [r7, #14]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b084      	sub	sp, #16
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	4608      	mov	r0, r1
 800a92c:	4611      	mov	r1, r2
 800a92e:	461a      	mov	r2, r3
 800a930:	4603      	mov	r3, r0
 800a932:	70fb      	strb	r3, [r7, #3]
 800a934:	460b      	mov	r3, r1
 800a936:	70bb      	strb	r3, [r7, #2]
 800a938:	4613      	mov	r3, r2
 800a93a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a93c:	2300      	movs	r3, #0
 800a93e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a940:	2300      	movs	r3, #0
 800a942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a94a:	78bb      	ldrb	r3, [r7, #2]
 800a94c:	883a      	ldrh	r2, [r7, #0]
 800a94e:	78f9      	ldrb	r1, [r7, #3]
 800a950:	f7f7 f90b 	bl	8001b6a <HAL_PCD_EP_Open>
 800a954:	4603      	mov	r3, r0
 800a956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a958:	7bfb      	ldrb	r3, [r7, #15]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 f91c 	bl	800ab98 <USBD_Get_USB_Status>
 800a960:	4603      	mov	r3, r0
 800a962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a964:	7bbb      	ldrb	r3, [r7, #14]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	460b      	mov	r3, r1
 800a978:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a97a:	2300      	movs	r3, #0
 800a97c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a97e:	2300      	movs	r3, #0
 800a980:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a988:	78fa      	ldrb	r2, [r7, #3]
 800a98a:	4611      	mov	r1, r2
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7f7 f954 	bl	8001c3a <HAL_PCD_EP_Close>
 800a992:	4603      	mov	r3, r0
 800a994:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 f8fd 	bl	800ab98 <USBD_Get_USB_Status>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3710      	adds	r7, #16
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b084      	sub	sp, #16
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	460b      	mov	r3, r1
 800a9b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9c6:	78fa      	ldrb	r2, [r7, #3]
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7f7 fa2c 	bl	8001e28 <HAL_PCD_EP_SetStall>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a9d4:	7bfb      	ldrb	r3, [r7, #15]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f000 f8de 	bl	800ab98 <USBD_Get_USB_Status>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b084      	sub	sp, #16
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
 800a9f2:	460b      	mov	r3, r1
 800a9f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa04:	78fa      	ldrb	r2, [r7, #3]
 800aa06:	4611      	mov	r1, r2
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7f7 fa71 	bl	8001ef0 <HAL_PCD_EP_ClrStall>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aa12:	7bfb      	ldrb	r3, [r7, #15]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f000 f8bf 	bl	800ab98 <USBD_Get_USB_Status>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aa1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3710      	adds	r7, #16
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aa3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	da0b      	bge.n	800aa5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aa44:	78fb      	ldrb	r3, [r7, #3]
 800aa46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa4a:	68f9      	ldr	r1, [r7, #12]
 800aa4c:	4613      	mov	r3, r2
 800aa4e:	00db      	lsls	r3, r3, #3
 800aa50:	4413      	add	r3, r2
 800aa52:	009b      	lsls	r3, r3, #2
 800aa54:	440b      	add	r3, r1
 800aa56:	333e      	adds	r3, #62	; 0x3e
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	e00b      	b.n	800aa74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aa5c:	78fb      	ldrb	r3, [r7, #3]
 800aa5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa62:	68f9      	ldr	r1, [r7, #12]
 800aa64:	4613      	mov	r3, r2
 800aa66:	00db      	lsls	r3, r3, #3
 800aa68:	4413      	add	r3, r2
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	440b      	add	r3, r1
 800aa6e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800aa72:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3714      	adds	r7, #20
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	460b      	mov	r3, r1
 800aa8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa9a:	78fa      	ldrb	r2, [r7, #3]
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7f7 f83e 	bl	8001b20 <HAL_PCD_SetAddress>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 f874 	bl	800ab98 <USBD_Get_USB_Status>
 800aab0:	4603      	mov	r3, r0
 800aab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aab4:	7bbb      	ldrb	r3, [r7, #14]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b086      	sub	sp, #24
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	60f8      	str	r0, [r7, #12]
 800aac6:	607a      	str	r2, [r7, #4]
 800aac8:	603b      	str	r3, [r7, #0]
 800aaca:	460b      	mov	r3, r1
 800aacc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aace:	2300      	movs	r3, #0
 800aad0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aad2:	2300      	movs	r3, #0
 800aad4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800aadc:	7af9      	ldrb	r1, [r7, #11]
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	f7f7 f957 	bl	8001d94 <HAL_PCD_EP_Transmit>
 800aae6:	4603      	mov	r3, r0
 800aae8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
 800aaec:	4618      	mov	r0, r3
 800aaee:	f000 f853 	bl	800ab98 <USBD_Get_USB_Status>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800aaf6:	7dbb      	ldrb	r3, [r7, #22]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3718      	adds	r7, #24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}

0800ab00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	607a      	str	r2, [r7, #4]
 800ab0a:	603b      	str	r3, [r7, #0]
 800ab0c:	460b      	mov	r3, r1
 800ab0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab14:	2300      	movs	r3, #0
 800ab16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ab1e:	7af9      	ldrb	r1, [r7, #11]
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	f7f7 f8d3 	bl	8001cce <HAL_PCD_EP_Receive>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 f832 	bl	800ab98 <USBD_Get_USB_Status>
 800ab34:	4603      	mov	r3, r0
 800ab36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ab38:	7dbb      	ldrb	r3, [r7, #22]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3718      	adds	r7, #24
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	460b      	mov	r3, r1
 800ab4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab54:	78fa      	ldrb	r2, [r7, #3]
 800ab56:	4611      	mov	r1, r2
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f7f7 f903 	bl	8001d64 <HAL_PCD_EP_GetRxCount>
 800ab5e:	4603      	mov	r3, r0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3708      	adds	r7, #8
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ab70:	4b03      	ldr	r3, [pc, #12]	; (800ab80 <USBD_static_malloc+0x18>)
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	2000a9bc 	.word	0x2000a9bc

0800ab84 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]

}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	4603      	mov	r3, r0
 800aba0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aba6:	79fb      	ldrb	r3, [r7, #7]
 800aba8:	2b03      	cmp	r3, #3
 800abaa:	d817      	bhi.n	800abdc <USBD_Get_USB_Status+0x44>
 800abac:	a201      	add	r2, pc, #4	; (adr r2, 800abb4 <USBD_Get_USB_Status+0x1c>)
 800abae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb2:	bf00      	nop
 800abb4:	0800abc5 	.word	0x0800abc5
 800abb8:	0800abcb 	.word	0x0800abcb
 800abbc:	0800abd1 	.word	0x0800abd1
 800abc0:	0800abd7 	.word	0x0800abd7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	73fb      	strb	r3, [r7, #15]
    break;
 800abc8:	e00b      	b.n	800abe2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800abca:	2303      	movs	r3, #3
 800abcc:	73fb      	strb	r3, [r7, #15]
    break;
 800abce:	e008      	b.n	800abe2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800abd0:	2301      	movs	r3, #1
 800abd2:	73fb      	strb	r3, [r7, #15]
    break;
 800abd4:	e005      	b.n	800abe2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abd6:	2303      	movs	r3, #3
 800abd8:	73fb      	strb	r3, [r7, #15]
    break;
 800abda:	e002      	b.n	800abe2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800abdc:	2303      	movs	r3, #3
 800abde:	73fb      	strb	r3, [r7, #15]
    break;
 800abe0:	bf00      	nop
  }
  return usb_status;
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <__libc_init_array>:
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	4d0d      	ldr	r5, [pc, #52]	; (800ac28 <__libc_init_array+0x38>)
 800abf4:	4c0d      	ldr	r4, [pc, #52]	; (800ac2c <__libc_init_array+0x3c>)
 800abf6:	1b64      	subs	r4, r4, r5
 800abf8:	10a4      	asrs	r4, r4, #2
 800abfa:	2600      	movs	r6, #0
 800abfc:	42a6      	cmp	r6, r4
 800abfe:	d109      	bne.n	800ac14 <__libc_init_array+0x24>
 800ac00:	4d0b      	ldr	r5, [pc, #44]	; (800ac30 <__libc_init_array+0x40>)
 800ac02:	4c0c      	ldr	r4, [pc, #48]	; (800ac34 <__libc_init_array+0x44>)
 800ac04:	f000 f8f2 	bl	800adec <_init>
 800ac08:	1b64      	subs	r4, r4, r5
 800ac0a:	10a4      	asrs	r4, r4, #2
 800ac0c:	2600      	movs	r6, #0
 800ac0e:	42a6      	cmp	r6, r4
 800ac10:	d105      	bne.n	800ac1e <__libc_init_array+0x2e>
 800ac12:	bd70      	pop	{r4, r5, r6, pc}
 800ac14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac18:	4798      	blx	r3
 800ac1a:	3601      	adds	r6, #1
 800ac1c:	e7ee      	b.n	800abfc <__libc_init_array+0xc>
 800ac1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac22:	4798      	blx	r3
 800ac24:	3601      	adds	r6, #1
 800ac26:	e7f2      	b.n	800ac0e <__libc_init_array+0x1e>
 800ac28:	0800af30 	.word	0x0800af30
 800ac2c:	0800af30 	.word	0x0800af30
 800ac30:	0800af30 	.word	0x0800af30
 800ac34:	0800af34 	.word	0x0800af34

0800ac38 <__retarget_lock_acquire_recursive>:
 800ac38:	4770      	bx	lr

0800ac3a <__retarget_lock_release_recursive>:
 800ac3a:	4770      	bx	lr

0800ac3c <memcpy>:
 800ac3c:	440a      	add	r2, r1
 800ac3e:	4291      	cmp	r1, r2
 800ac40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ac44:	d100      	bne.n	800ac48 <memcpy+0xc>
 800ac46:	4770      	bx	lr
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac52:	4291      	cmp	r1, r2
 800ac54:	d1f9      	bne.n	800ac4a <memcpy+0xe>
 800ac56:	bd10      	pop	{r4, pc}

0800ac58 <memset>:
 800ac58:	4402      	add	r2, r0
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	4293      	cmp	r3, r2
 800ac5e:	d100      	bne.n	800ac62 <memset+0xa>
 800ac60:	4770      	bx	lr
 800ac62:	f803 1b01 	strb.w	r1, [r3], #1
 800ac66:	e7f9      	b.n	800ac5c <memset+0x4>

0800ac68 <cleanup_glue>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	6809      	ldr	r1, [r1, #0]
 800ac6e:	4605      	mov	r5, r0
 800ac70:	b109      	cbz	r1, 800ac76 <cleanup_glue+0xe>
 800ac72:	f7ff fff9 	bl	800ac68 <cleanup_glue>
 800ac76:	4621      	mov	r1, r4
 800ac78:	4628      	mov	r0, r5
 800ac7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac7e:	f000 b869 	b.w	800ad54 <_free_r>
	...

0800ac84 <_reclaim_reent>:
 800ac84:	4b2c      	ldr	r3, [pc, #176]	; (800ad38 <_reclaim_reent+0xb4>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	4283      	cmp	r3, r0
 800ac8a:	b570      	push	{r4, r5, r6, lr}
 800ac8c:	4604      	mov	r4, r0
 800ac8e:	d051      	beq.n	800ad34 <_reclaim_reent+0xb0>
 800ac90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ac92:	b143      	cbz	r3, 800aca6 <_reclaim_reent+0x22>
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d14a      	bne.n	800ad30 <_reclaim_reent+0xac>
 800ac9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac9c:	6819      	ldr	r1, [r3, #0]
 800ac9e:	b111      	cbz	r1, 800aca6 <_reclaim_reent+0x22>
 800aca0:	4620      	mov	r0, r4
 800aca2:	f000 f857 	bl	800ad54 <_free_r>
 800aca6:	6961      	ldr	r1, [r4, #20]
 800aca8:	b111      	cbz	r1, 800acb0 <_reclaim_reent+0x2c>
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 f852 	bl	800ad54 <_free_r>
 800acb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800acb2:	b111      	cbz	r1, 800acba <_reclaim_reent+0x36>
 800acb4:	4620      	mov	r0, r4
 800acb6:	f000 f84d 	bl	800ad54 <_free_r>
 800acba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800acbc:	b111      	cbz	r1, 800acc4 <_reclaim_reent+0x40>
 800acbe:	4620      	mov	r0, r4
 800acc0:	f000 f848 	bl	800ad54 <_free_r>
 800acc4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800acc6:	b111      	cbz	r1, 800acce <_reclaim_reent+0x4a>
 800acc8:	4620      	mov	r0, r4
 800acca:	f000 f843 	bl	800ad54 <_free_r>
 800acce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800acd0:	b111      	cbz	r1, 800acd8 <_reclaim_reent+0x54>
 800acd2:	4620      	mov	r0, r4
 800acd4:	f000 f83e 	bl	800ad54 <_free_r>
 800acd8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800acda:	b111      	cbz	r1, 800ace2 <_reclaim_reent+0x5e>
 800acdc:	4620      	mov	r0, r4
 800acde:	f000 f839 	bl	800ad54 <_free_r>
 800ace2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ace4:	b111      	cbz	r1, 800acec <_reclaim_reent+0x68>
 800ace6:	4620      	mov	r0, r4
 800ace8:	f000 f834 	bl	800ad54 <_free_r>
 800acec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800acee:	b111      	cbz	r1, 800acf6 <_reclaim_reent+0x72>
 800acf0:	4620      	mov	r0, r4
 800acf2:	f000 f82f 	bl	800ad54 <_free_r>
 800acf6:	69a3      	ldr	r3, [r4, #24]
 800acf8:	b1e3      	cbz	r3, 800ad34 <_reclaim_reent+0xb0>
 800acfa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800acfc:	4620      	mov	r0, r4
 800acfe:	4798      	blx	r3
 800ad00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ad02:	b1b9      	cbz	r1, 800ad34 <_reclaim_reent+0xb0>
 800ad04:	4620      	mov	r0, r4
 800ad06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad0a:	f7ff bfad 	b.w	800ac68 <cleanup_glue>
 800ad0e:	5949      	ldr	r1, [r1, r5]
 800ad10:	b941      	cbnz	r1, 800ad24 <_reclaim_reent+0xa0>
 800ad12:	3504      	adds	r5, #4
 800ad14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad16:	2d80      	cmp	r5, #128	; 0x80
 800ad18:	68d9      	ldr	r1, [r3, #12]
 800ad1a:	d1f8      	bne.n	800ad0e <_reclaim_reent+0x8a>
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f000 f819 	bl	800ad54 <_free_r>
 800ad22:	e7ba      	b.n	800ac9a <_reclaim_reent+0x16>
 800ad24:	680e      	ldr	r6, [r1, #0]
 800ad26:	4620      	mov	r0, r4
 800ad28:	f000 f814 	bl	800ad54 <_free_r>
 800ad2c:	4631      	mov	r1, r6
 800ad2e:	e7ef      	b.n	800ad10 <_reclaim_reent+0x8c>
 800ad30:	2500      	movs	r5, #0
 800ad32:	e7ef      	b.n	800ad14 <_reclaim_reent+0x90>
 800ad34:	bd70      	pop	{r4, r5, r6, pc}
 800ad36:	bf00      	nop
 800ad38:	20000100 	.word	0x20000100

0800ad3c <__malloc_lock>:
 800ad3c:	4801      	ldr	r0, [pc, #4]	; (800ad44 <__malloc_lock+0x8>)
 800ad3e:	f7ff bf7b 	b.w	800ac38 <__retarget_lock_acquire_recursive>
 800ad42:	bf00      	nop
 800ad44:	2000abdc 	.word	0x2000abdc

0800ad48 <__malloc_unlock>:
 800ad48:	4801      	ldr	r0, [pc, #4]	; (800ad50 <__malloc_unlock+0x8>)
 800ad4a:	f7ff bf76 	b.w	800ac3a <__retarget_lock_release_recursive>
 800ad4e:	bf00      	nop
 800ad50:	2000abdc 	.word	0x2000abdc

0800ad54 <_free_r>:
 800ad54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad56:	2900      	cmp	r1, #0
 800ad58:	d044      	beq.n	800ade4 <_free_r+0x90>
 800ad5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad5e:	9001      	str	r0, [sp, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f1a1 0404 	sub.w	r4, r1, #4
 800ad66:	bfb8      	it	lt
 800ad68:	18e4      	addlt	r4, r4, r3
 800ad6a:	f7ff ffe7 	bl	800ad3c <__malloc_lock>
 800ad6e:	4a1e      	ldr	r2, [pc, #120]	; (800ade8 <_free_r+0x94>)
 800ad70:	9801      	ldr	r0, [sp, #4]
 800ad72:	6813      	ldr	r3, [r2, #0]
 800ad74:	b933      	cbnz	r3, 800ad84 <_free_r+0x30>
 800ad76:	6063      	str	r3, [r4, #4]
 800ad78:	6014      	str	r4, [r2, #0]
 800ad7a:	b003      	add	sp, #12
 800ad7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad80:	f7ff bfe2 	b.w	800ad48 <__malloc_unlock>
 800ad84:	42a3      	cmp	r3, r4
 800ad86:	d908      	bls.n	800ad9a <_free_r+0x46>
 800ad88:	6825      	ldr	r5, [r4, #0]
 800ad8a:	1961      	adds	r1, r4, r5
 800ad8c:	428b      	cmp	r3, r1
 800ad8e:	bf01      	itttt	eq
 800ad90:	6819      	ldreq	r1, [r3, #0]
 800ad92:	685b      	ldreq	r3, [r3, #4]
 800ad94:	1949      	addeq	r1, r1, r5
 800ad96:	6021      	streq	r1, [r4, #0]
 800ad98:	e7ed      	b.n	800ad76 <_free_r+0x22>
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	b10b      	cbz	r3, 800ada4 <_free_r+0x50>
 800ada0:	42a3      	cmp	r3, r4
 800ada2:	d9fa      	bls.n	800ad9a <_free_r+0x46>
 800ada4:	6811      	ldr	r1, [r2, #0]
 800ada6:	1855      	adds	r5, r2, r1
 800ada8:	42a5      	cmp	r5, r4
 800adaa:	d10b      	bne.n	800adc4 <_free_r+0x70>
 800adac:	6824      	ldr	r4, [r4, #0]
 800adae:	4421      	add	r1, r4
 800adb0:	1854      	adds	r4, r2, r1
 800adb2:	42a3      	cmp	r3, r4
 800adb4:	6011      	str	r1, [r2, #0]
 800adb6:	d1e0      	bne.n	800ad7a <_free_r+0x26>
 800adb8:	681c      	ldr	r4, [r3, #0]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	6053      	str	r3, [r2, #4]
 800adbe:	4421      	add	r1, r4
 800adc0:	6011      	str	r1, [r2, #0]
 800adc2:	e7da      	b.n	800ad7a <_free_r+0x26>
 800adc4:	d902      	bls.n	800adcc <_free_r+0x78>
 800adc6:	230c      	movs	r3, #12
 800adc8:	6003      	str	r3, [r0, #0]
 800adca:	e7d6      	b.n	800ad7a <_free_r+0x26>
 800adcc:	6825      	ldr	r5, [r4, #0]
 800adce:	1961      	adds	r1, r4, r5
 800add0:	428b      	cmp	r3, r1
 800add2:	bf04      	itt	eq
 800add4:	6819      	ldreq	r1, [r3, #0]
 800add6:	685b      	ldreq	r3, [r3, #4]
 800add8:	6063      	str	r3, [r4, #4]
 800adda:	bf04      	itt	eq
 800addc:	1949      	addeq	r1, r1, r5
 800adde:	6021      	streq	r1, [r4, #0]
 800ade0:	6054      	str	r4, [r2, #4]
 800ade2:	e7ca      	b.n	800ad7a <_free_r+0x26>
 800ade4:	b003      	add	sp, #12
 800ade6:	bd30      	pop	{r4, r5, pc}
 800ade8:	2000abe0 	.word	0x2000abe0

0800adec <_init>:
 800adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adee:	bf00      	nop
 800adf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adf2:	bc08      	pop	{r3}
 800adf4:	469e      	mov	lr, r3
 800adf6:	4770      	bx	lr

0800adf8 <_fini>:
 800adf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfa:	bf00      	nop
 800adfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adfe:	bc08      	pop	{r3}
 800ae00:	469e      	mov	lr, r3
 800ae02:	4770      	bx	lr
