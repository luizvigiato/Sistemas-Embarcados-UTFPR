
testertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d73c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  0800d8dc  0800d8dc  0001d8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc1c  0800dc1c  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc1c  0800dc1c  0001dc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc24  0800dc24  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc24  0800dc24  0001dc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc28  0800dc28  0001dc28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800dc2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000acc4  20000170  0800dd9c  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ae34  0800dd9c  0002ae34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022bb1  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000509f  00000000  00000000  00042d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bc8  00000000  00000000  00047df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019b0  00000000  00000000  000499b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009330  00000000  00000000  0004b368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002054d  00000000  00000000  00054698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a75c3  00000000  00000000  00074be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c1a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a00  00000000  00000000  0011c1f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000170 	.word	0x20000170
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d8c4 	.word	0x0800d8c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000174 	.word	0x20000174
 80001dc:	0800d8c4 	.word	0x0800d8c4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d10a      	bne.n	80005bc <FreeRTOS_CLIRegisterCommand+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80005b8:	bf00      	nop
 80005ba:	e7fe      	b.n	80005ba <FreeRTOS_CLIRegisterCommand+0x26>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 80005bc:	2008      	movs	r0, #8
 80005be:	f00b fcbb 	bl	800bf38 <pvPortMalloc>
 80005c2:	6138      	str	r0, [r7, #16]
	configASSERT( pxNewListItem );
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d10a      	bne.n	80005e0 <FreeRTOS_CLIRegisterCommand+0x4c>
	__asm volatile
 80005ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ce:	f383 8811 	msr	BASEPRI, r3
 80005d2:	f3bf 8f6f 	isb	sy
 80005d6:	f3bf 8f4f 	dsb	sy
 80005da:	60bb      	str	r3, [r7, #8]
}
 80005dc:	bf00      	nop
 80005de:	e7fe      	b.n	80005de <FreeRTOS_CLIRegisterCommand+0x4a>

	if( pxNewListItem != NULL )
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d012      	beq.n	800060c <FreeRTOS_CLIRegisterCommand+0x78>
	{
		taskENTER_CRITICAL();
 80005e6:	f00b fb85 	bl	800bcf4 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <FreeRTOS_CLIRegisterCommand+0x84>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 80005fe:	4a06      	ldr	r2, [pc, #24]	; (8000618 <FreeRTOS_CLIRegisterCommand+0x84>)
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 8000604:	f00b fba6 	bl	800bd54 <vPortExitCritical>

		xReturn = pdPASS;
 8000608:	2301      	movs	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800060c:	697b      	ldr	r3, [r7, #20]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000008 	.word	0x20000008

0800061c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8000628:	2301      	movs	r3, #1
 800062a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 800062c:	4b3a      	ldr	r3, [pc, #232]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d141      	bne.n	80006b8 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000634:	4b38      	ldr	r3, [pc, #224]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000636:	4a39      	ldr	r2, [pc, #228]	; (800071c <FreeRTOS_CLIProcessCommand+0x100>)
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	e037      	b.n	80006ac <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800063c:	4b36      	ldr	r3, [pc, #216]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8000646:	69b8      	ldr	r0, [r7, #24]
 8000648:	f7ff fdca 	bl	80001e0 <strlen>
 800064c:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	69b9      	ldr	r1, [r7, #24]
 8000652:	68f8      	ldr	r0, [r7, #12]
 8000654:	f00c fd74 	bl	800d140 <strncmp>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d121      	bne.n	80006a2 <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	4413      	add	r3, r2
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b20      	cmp	r3, #32
 8000668:	d005      	beq.n	8000676 <FreeRTOS_CLIProcessCommand+0x5a>
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d115      	bne.n	80006a2 <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000680:	2b00      	cmp	r3, #0
 8000682:	db18      	blt.n	80006b6 <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f000 f87d 	bl	8000784 <prvGetNumberOfParameters>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	4b22      	ldr	r3, [pc, #136]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d00c      	beq.n	80006b6 <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 80006a0:	e009      	b.n	80006b6 <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80006a2:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1c3      	bne.n	800063c <FreeRTOS_CLIProcessCommand+0x20>
 80006b4:	e000      	b.n	80006b8 <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 80006b6:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00b      	beq.n	80006d8 <FreeRTOS_CLIProcessCommand+0xbc>
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d108      	bne.n	80006d8 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <FreeRTOS_CLIProcessCommand+0x104>)
 80006ca:	68b8      	ldr	r0, [r7, #8]
 80006cc:	f00c fd4c 	bl	800d168 <strncpy>
		pxCommand = NULL;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	e01a      	b.n	800070e <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d00f      	beq.n	8000700 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	68b8      	ldr	r0, [r7, #8]
 80006ee:	4798      	blx	r3
 80006f0:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d10a      	bne.n	800070e <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	e006      	b.n	800070e <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4908      	ldr	r1, [pc, #32]	; (8000724 <FreeRTOS_CLIProcessCommand+0x108>)
 8000704:	68b8      	ldr	r0, [r7, #8]
 8000706:	f00c fd2f 	bl	800d168 <strncpy>
		xReturn = pdFALSE;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 800070e:	69fb      	ldr	r3, [r7, #28]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3720      	adds	r7, #32
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000018c 	.word	0x2000018c
 800071c:	20000000 	.word	0x20000000
 8000720:	0800d914 	.word	0x0800d914
 8000724:	0800d96c 	.word	0x0800d96c

08000728 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <prvHelpCommand+0x54>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <prvHelpCommand+0x54>)
 800073e:	4a10      	ldr	r2, [pc, #64]	; (8000780 <prvHelpCommand+0x58>)
 8000740:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <prvHelpCommand+0x54>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	4619      	mov	r1, r3
 800074e:	68f8      	ldr	r0, [r7, #12]
 8000750:	f00c fd0a 	bl	800d168 <strncpy>
	pxCommand = pxCommand->pxNext;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <prvHelpCommand+0x54>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <prvHelpCommand+0x54>)
 800075c:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <prvHelpCommand+0x54>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d102      	bne.n	800076c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	e001      	b.n	8000770 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 800076c:	2301      	movs	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8000770:	697b      	ldr	r3, [r7, #20]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000190 	.word	0x20000190
 8000780:	20000000 	.word	0x20000000

08000784 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8000794:	e014      	b.n	80007c0 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b20      	cmp	r3, #32
 800079c:	d10b      	bne.n	80007b6 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d00a      	beq.n	80007ba <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 80007a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	3301      	adds	r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	e001      	b.n	80007ba <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3301      	adds	r3, #1
 80007be:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1e6      	bne.n	8000796 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d105      	bne.n	80007da <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3b01      	subs	r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <task_led>:
	int timeout;
}led_t;

led_t green_led;

void task_led(void *param){
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *)param;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(led->port,led->pin);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	889b      	ldrh	r3, [r3, #4]
 80007fe:	4619      	mov	r1, r3
 8000800:	4610      	mov	r0, r2
 8000802:	f001 fce8 	bl	80021d6 <HAL_GPIO_TogglePin>
		vTaskDelay(led->timeout);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	4618      	mov	r0, r3
 800080c:	f009 face 	bl	8009dac <vTaskDelay>
		HAL_GPIO_TogglePin(led->port,led->pin);
 8000810:	e7f1      	b.n	80007f6 <task_led+0xc>
	...

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f000 fc4b 	bl	80010b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f839 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000822:	f000 f98b 	bl	8000b3c <MX_GPIO_Init>
  MX_DMA_Init();
 8000826:	f000 f969 	bl	8000afc <MX_DMA_Init>
  MX_ADC1_Init();
 800082a:	f000 f89f 	bl	800096c <MX_ADC1_Init>
  MX_TIM2_Init();
 800082e:	f000 f8ef 	bl	8000a10 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000832:	f007 fd27 	bl	8008284 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000836:	4a10      	ldr	r2, [pc, #64]	; (8000878 <main+0x64>)
 8000838:	2100      	movs	r1, #0
 800083a:	4810      	ldr	r0, [pc, #64]	; (800087c <main+0x68>)
 800083c:	f007 fd6c 	bl	8008318 <osThreadNew>
 8000840:	4603      	mov	r3, r0
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <main+0x6c>)
 8000844:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  green_led.timeout = 500;
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <main+0x70>)
 8000848:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800084c:	609a      	str	r2, [r3, #8]
  green_led.port = LED_GPIO_Port;
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <main+0x70>)
 8000850:	4a0d      	ldr	r2, [pc, #52]	; (8000888 <main+0x74>)
 8000852:	601a      	str	r2, [r3, #0]
  green_led.pin = LED_Pin;
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <main+0x70>)
 8000856:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800085a:	809a      	strh	r2, [r3, #4]
  xTaskCreate(task_led,"Tarefa Led",256, &green_led, 1, NULL);
 800085c:	2300      	movs	r3, #0
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	2301      	movs	r3, #1
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <main+0x70>)
 8000866:	f44f 7280 	mov.w	r2, #256	; 0x100
 800086a:	4908      	ldr	r1, [pc, #32]	; (800088c <main+0x78>)
 800086c:	4808      	ldr	r0, [pc, #32]	; (8000890 <main+0x7c>)
 800086e:	f009 f942 	bl	8009af6 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000872:	f007 fd2b 	bl	80082cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000876:	e7fe      	b.n	8000876 <main+0x62>
 8000878:	0800db2c 	.word	0x0800db2c
 800087c:	08000c4d 	.word	0x08000c4d
 8000880:	20000284 	.word	0x20000284
 8000884:	20000288 	.word	0x20000288
 8000888:	40020800 	.word	0x40020800
 800088c:	0800d9dc 	.word	0x0800d9dc
 8000890:	080007eb 	.word	0x080007eb

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	; 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2230      	movs	r2, #48	; 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f00c fb0e 	bl	800cec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b29      	ldr	r3, [pc, #164]	; (8000964 <SystemClock_Config+0xd0>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a28      	ldr	r2, [pc, #160]	; (8000964 <SystemClock_Config+0xd0>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <SystemClock_Config+0xd0>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b23      	ldr	r3, [pc, #140]	; (8000968 <SystemClock_Config+0xd4>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008e0:	4a21      	ldr	r2, [pc, #132]	; (8000968 <SystemClock_Config+0xd4>)
 80008e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <SystemClock_Config+0xd4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000902:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000906:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000908:	2319      	movs	r3, #25
 800090a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800090c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000910:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000912:	2304      	movs	r3, #4
 8000914:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000916:	2307      	movs	r3, #7
 8000918:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0320 	add.w	r3, r7, #32
 800091e:	4618      	mov	r0, r3
 8000920:	f002 fef0 	bl	8003704 <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800092a:	f000 fa19 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	230f      	movs	r3, #15
 8000930:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	2302      	movs	r3, #2
 8000934:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800093a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2102      	movs	r1, #2
 800094a:	4618      	mov	r0, r3
 800094c:	f003 f952 	bl	8003bf4 <HAL_RCC_ClockConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000956:	f000 fa03 	bl	8000d60 <Error_Handler>
  }
}
 800095a:	bf00      	nop
 800095c:	3750      	adds	r7, #80	; 0x50
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800
 8000968:	40007000 	.word	0x40007000

0800096c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_ADC1_Init+0x9c>)
 8000980:	4a22      	ldr	r2, [pc, #136]	; (8000a0c <MX_ADC1_Init+0xa0>)
 8000982:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_ADC1_Init+0x9c>)
 8000986:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800098a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_ADC1_Init+0x9c>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_ADC1_Init+0x9c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_ADC1_Init+0x9c>)
 800099a:	2200      	movs	r2, #0
 800099c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_ADC1_Init+0x9c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_ADC1_Init+0x9c>)
 80009a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_ADC1_Init+0x9c>)
 80009b0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_ADC1_Init+0x9c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_ADC1_Init+0x9c>)
 80009be:	2201      	movs	r2, #1
 80009c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_ADC1_Init+0x9c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_ADC1_Init+0x9c>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_ADC1_Init+0x9c>)
 80009d2:	f000 fc05 	bl	80011e0 <HAL_ADC_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80009dc:	f000 f9c0 	bl	8000d60 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80009e0:	2301      	movs	r3, #1
 80009e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009e4:	2301      	movs	r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009e8:	2300      	movs	r3, #0
 80009ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_ADC1_Init+0x9c>)
 80009f2:	f000 fc39 	bl	8001268 <HAL_ADC_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80009fc:	f000 f9b0 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	3710      	adds	r7, #16
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000194 	.word	0x20000194
 8000a0c:	40012000 	.word	0x40012000

08000a10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08e      	sub	sp, #56	; 0x38
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	605a      	str	r2, [r3, #4]
 8000a20:	609a      	str	r2, [r3, #8]
 8000a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a24:	f107 0320 	add.w	r3, r7, #32
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]
 8000a3c:	615a      	str	r2, [r3, #20]
 8000a3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a42:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a48:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32656;
 8000a54:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a56:	f647 7290 	movw	r2, #32656	; 0x7f90
 8000a5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a64:	2280      	movs	r2, #128	; 0x80
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a68:	4823      	ldr	r0, [pc, #140]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a6a:	f003 fa7b 	bl	8003f64 <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000a74:	f000 f974 	bl	8000d60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a82:	4619      	mov	r1, r3
 8000a84:	481c      	ldr	r0, [pc, #112]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a86:	f003 fbd7 	bl	8004238 <HAL_TIM_ConfigClockSource>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000a90:	f000 f966 	bl	8000d60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a94:	4818      	ldr	r0, [pc, #96]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000a96:	f003 fab4 	bl	8004002 <HAL_TIM_PWM_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000aa0:	f000 f95e 	bl	8000d60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aac:	f107 0320 	add.w	r3, r7, #32
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4811      	ldr	r0, [pc, #68]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000ab4:	f003 ff2e 	bl	8004914 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000abe:	f000 f94f 	bl	8000d60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ac2:	2360      	movs	r3, #96	; 0x60
 8000ac4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000ada:	f003 faeb 	bl	80040b4 <HAL_TIM_PWM_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ae4:	f000 f93c 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <MX_TIM2_Init+0xe8>)
 8000aea:	f000 fa01 	bl	8000ef0 <HAL_TIM_MspPostInit>

}
 8000aee:	bf00      	nop
 8000af0:	3738      	adds	r7, #56	; 0x38
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	2000023c 	.word	0x2000023c

08000afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <MX_DMA_Init+0x3c>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	4a0b      	ldr	r2, [pc, #44]	; (8000b38 <MX_DMA_Init+0x3c>)
 8000b0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b10:	6313      	str	r3, [r2, #48]	; 0x30
 8000b12:	4b09      	ldr	r3, [pc, #36]	; (8000b38 <MX_DMA_Init+0x3c>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2105      	movs	r1, #5
 8000b22:	2038      	movs	r0, #56	; 0x38
 8000b24:	f000 fe99 	bl	800185a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000b28:	2038      	movs	r0, #56	; 0x38
 8000b2a:	f000 feb2 	bl	8001892 <HAL_NVIC_EnableIRQ>

}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800

08000b3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <MX_GPIO_Init+0x9c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a1f      	ldr	r2, [pc, #124]	; (8000bd8 <MX_GPIO_Init+0x9c>)
 8000b5c:	f043 0304 	orr.w	r3, r3, #4
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b1d      	ldr	r3, [pc, #116]	; (8000bd8 <MX_GPIO_Init+0x9c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <MX_GPIO_Init+0x9c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a18      	ldr	r2, [pc, #96]	; (8000bd8 <MX_GPIO_Init+0x9c>)
 8000b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <MX_GPIO_Init+0x9c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	603b      	str	r3, [r7, #0]
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <MX_GPIO_Init+0x9c>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a11      	ldr	r2, [pc, #68]	; (8000bd8 <MX_GPIO_Init+0x9c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <MX_GPIO_Init+0x9c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	603b      	str	r3, [r7, #0]
 8000ba4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bac:	480b      	ldr	r0, [pc, #44]	; (8000bdc <MX_GPIO_Init+0xa0>)
 8000bae:	f001 faf9 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bc4:	f107 030c 	add.w	r3, r7, #12
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_GPIO_Init+0xa0>)
 8000bcc:	f001 f966 	bl	8001e9c <HAL_GPIO_Init>

}
 8000bd0:	bf00      	nop
 8000bd2:	3720      	adds	r7, #32
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020800 	.word	0x40020800

08000be0 <prvTaskStatsCommand>:
//uint8_t buffer[128];
uint32_t len;

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout);

static BaseType_t prvTaskStatsCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607a      	str	r2, [r7, #4]


        /* For simplicity, this function assumes the output buffer is large enough
        to hold all the text generated by executing the vTaskList() API function,
        so the xWriteBufferLen parameter is not used. */
        char *head = "Name\t\tState  Priority  Stack  Number\n\r";
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <prvTaskStatsCommand+0x34>)
 8000bee:	617b      	str	r3, [r7, #20]
        ( void ) xWriteBufferLen;

        /* pcWriteBuffer is used directly as the vTaskList() parameter, so the table
        generated by executing vTaskList() is written directly into the output
        buffer. */
        strcpy(pcWriteBuffer, head);
 8000bf0:	6979      	ldr	r1, [r7, #20]
 8000bf2:	68f8      	ldr	r0, [r7, #12]
 8000bf4:	f00c fa9c 	bl	800d130 <strcpy>
        vTaskList( pcWriteBuffer + strlen(head));
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff faf1 	bl	80001e0 <strlen>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00a f8d5 	bl	800adb4 <vTaskList>

        /* The entire table was written directly to the output buffer.  Execution
        of this command is complete, so return pdFALSE. */
        return pdFALSE;
 8000c0a:	2300      	movs	r3, #0
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	0800d9e8 	.word	0x0800d9e8

08000c18 <prvTaskStatsTexto>:

static BaseType_t prvTaskStatsTexto( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8000c18:	b4b0      	push	{r4, r5, r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
	strcpy(pcWriteBuffer,(char*)"Este e um texto teste\r\n");
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <prvTaskStatsTexto+0x30>)
 8000c28:	461d      	mov	r5, r3
 8000c2a:	4614      	mov	r4, r2
 8000c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c2e:	6028      	str	r0, [r5, #0]
 8000c30:	6069      	str	r1, [r5, #4]
 8000c32:	60aa      	str	r2, [r5, #8]
 8000c34:	60eb      	str	r3, [r5, #12]
 8000c36:	cc03      	ldmia	r4!, {r0, r1}
 8000c38:	6128      	str	r0, [r5, #16]
 8000c3a:	6169      	str	r1, [r5, #20]
	return pdFALSE;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3714      	adds	r7, #20
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bcb0      	pop	{r4, r5, r7}
 8000c46:	4770      	bx	lr
 8000c48:	0800da10 	.word	0x0800da10

08000c4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000c54:	f00b fb5a 	bl	800c30c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 8000c58:	f00b fb88 	bl	800c36c <init_usb_rtos_obj>

  static uint8_t pcOutputString[ MAX_OUTPUT_LENGTH ], pcInputString[ MAX_INPUT_LENGTH ];

  FreeRTOS_CLIRegisterCommand( &xTasksCommand );
 8000c5c:	4839      	ldr	r0, [pc, #228]	; (8000d44 <StartDefaultTask+0xf8>)
 8000c5e:	f7ff fc99 	bl	8000594 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xTasksTexto );
 8000c62:	4839      	ldr	r0, [pc, #228]	; (8000d48 <StartDefaultTask+0xfc>)
 8000c64:	f7ff fc96 	bl	8000594 <FreeRTOS_CLIRegisterCommand>
  BaseType_t xMoreDataToFollow;
  uint8_t cRxedChar, buffer[32], cInputIndex = 0;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  /*char data;
	  CDC_Receiveq_MS(&data,portMAX_DELAY);
	  (void) CDC_Transmit_FS((uint8_t *) "\n\r",2);
	  (void) CDC_Transmit_FS((uint8_t *) &data,1);*/

		(void)read_usb_cdc((char *)buffer, 32, portMAX_DELAY);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c76:	2120      	movs	r1, #32
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00b fb95 	bl	800c3a8 <read_usb_cdc>
		cRxedChar = buffer[0];
 8000c7e:	7b3b      	ldrb	r3, [r7, #12]
 8000c80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( cRxedChar == '\r' ){
 8000c84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000c88:	2b0d      	cmp	r3, #13
 8000c8a:	d123      	bne.n	8000cd4 <StartDefaultTask+0x88>
			/*
			 * Entra quando finalizado envio de comando
			 */
			CDC_Transmit_FS((uint8_t *)"\n\r", 2);
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	482f      	ldr	r0, [pc, #188]	; (8000d4c <StartDefaultTask+0x100>)
 8000c90:	f00b fc66 	bl	800c560 <CDC_Transmit_FS>
			 do{
				 /* Send the command string to the command interpreter.  Any
				 output generated by the command interpreter will be placed in the
				 pcOutputString buffer. */
				 xMoreDataToFollow = FreeRTOS_CLIProcessCommand
 8000c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c98:	492d      	ldr	r1, [pc, #180]	; (8000d50 <StartDefaultTask+0x104>)
 8000c9a:	482e      	ldr	r0, [pc, #184]	; (8000d54 <StartDefaultTask+0x108>)
 8000c9c:	f7ff fcbe 	bl	800061c <FreeRTOS_CLIProcessCommand>
 8000ca0:	6338      	str	r0, [r7, #48]	; 0x30
								   MAX_OUTPUT_LENGTH/* The size of the output buffer. */
							   );

				 /* Write the output generated by the command interpreter to the
				 console. */
				 CDC_Transmit_FS((uint8_t *) pcOutputString, strlen((char *) pcOutputString ) );
 8000ca2:	482b      	ldr	r0, [pc, #172]	; (8000d50 <StartDefaultTask+0x104>)
 8000ca4:	f7ff fa9c 	bl	80001e0 <strlen>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4619      	mov	r1, r3
 8000cae:	4828      	ldr	r0, [pc, #160]	; (8000d50 <StartDefaultTask+0x104>)
 8000cb0:	f00b fc56 	bl	800c560 <CDC_Transmit_FS>
			 } while( xMoreDataToFollow != pdFALSE );
 8000cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1ec      	bne.n	8000c94 <StartDefaultTask+0x48>

			 /* All the strings generated by the input command have been sent.
			 Processing of the command is complete.  Clear the input string ready
			 to receive the next command. */
			 cInputIndex = 0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			 memset( pcInputString, 0x00, MAX_INPUT_LENGTH );
 8000cc0:	2240      	movs	r2, #64	; 0x40
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4823      	ldr	r0, [pc, #140]	; (8000d54 <StartDefaultTask+0x108>)
 8000cc6:	f00c f8fd 	bl	800cec4 <memset>
			 CDC_Transmit_FS((uint8_t *) "\n\r# ", 4);
 8000cca:	2104      	movs	r1, #4
 8000ccc:	4822      	ldr	r0, [pc, #136]	; (8000d58 <StartDefaultTask+0x10c>)
 8000cce:	f00b fc47 	bl	800c560 <CDC_Transmit_FS>
 8000cd2:	e7cc      	b.n	8000c6e <StartDefaultTask+0x22>

		} else {
			if( cRxedChar == '\0' ){
 8000cd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d104      	bne.n	8000ce6 <StartDefaultTask+0x9a>
				CDC_Transmit_FS((uint8_t *) "Welcome to FreeRTOS\n\r# ", strlen((char *)"Welcome to FreeRTOS\n\r# "));
 8000cdc:	2117      	movs	r1, #23
 8000cde:	481f      	ldr	r0, [pc, #124]	; (8000d5c <StartDefaultTask+0x110>)
 8000ce0:	f00b fc3e 	bl	800c560 <CDC_Transmit_FS>
 8000ce4:	e7c3      	b.n	8000c6e <StartDefaultTask+0x22>
			} else if (cRxedChar == 0x7F ){
 8000ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cea:	2b7f      	cmp	r3, #127	; 0x7f
 8000cec:	d114      	bne.n	8000d18 <StartDefaultTask+0xcc>
				/*
				 * Backspace was pressed.
				 */
				if(cInputIndex > 0){
 8000cee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d0bb      	beq.n	8000c6e <StartDefaultTask+0x22>
					CDC_Transmit_FS(&cRxedChar, 1);
 8000cf6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00b fc2f 	bl	800c560 <CDC_Transmit_FS>
					cInputIndex--;
 8000d02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d06:	3b01      	subs	r3, #1
 8000d08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pcInputString[ cInputIndex ] = '\0';
 8000d0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d10:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <StartDefaultTask+0x108>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	54d1      	strb	r1, [r2, r3]
 8000d16:	e7aa      	b.n	8000c6e <StartDefaultTask+0x22>
				}
			} else if(cInputIndex < MAX_INPUT_LENGTH){
 8000d18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d1c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d1e:	d8a6      	bhi.n	8000c6e <StartDefaultTask+0x22>
			/*
			 * Replica digitado para tela
			 */
				CDC_Transmit_FS(&cRxedChar, 1);
 8000d20:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000d24:	2101      	movs	r1, #1
 8000d26:	4618      	mov	r0, r3
 8000d28:	f00b fc1a 	bl	800c560 <CDC_Transmit_FS>
				pcInputString[ cInputIndex ] = cRxedChar;
 8000d2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d30:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8000d34:	4a07      	ldr	r2, [pc, #28]	; (8000d54 <StartDefaultTask+0x108>)
 8000d36:	54d1      	strb	r1, [r2, r3]
				cInputIndex++;
 8000d38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		(void)read_usb_cdc((char *)buffer, 32, portMAX_DELAY);
 8000d42:	e794      	b.n	8000c6e <StartDefaultTask+0x22>
 8000d44:	0800db50 	.word	0x0800db50
 8000d48:	0800db60 	.word	0x0800db60
 8000d4c:	0800da88 	.word	0x0800da88
 8000d50:	200002d4 	.word	0x200002d4
 8000d54:	20000294 	.word	0x20000294
 8000d58:	0800da8c 	.word	0x0800da8c
 8000d5c:	0800da94 	.word	0x0800da94

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <Error_Handler+0x8>
	...

08000d6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_MspInit+0x54>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a11      	ldr	r2, [pc, #68]	; (8000dc0 <HAL_MspInit+0x54>)
 8000d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_MspInit+0x54>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	603b      	str	r3, [r7, #0]
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <HAL_MspInit+0x54>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_MspInit+0x54>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_MspInit+0x54>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	210f      	movs	r1, #15
 8000dae:	f06f 0001 	mvn.w	r0, #1
 8000db2:	f000 fd52 	bl	800185a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <HAL_ADC_MspInit+0xd8>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d156      	bne.n	8000e94 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <HAL_ADC_MspInit+0xdc>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a2c      	ldr	r2, [pc, #176]	; (8000ea0 <HAL_ADC_MspInit+0xdc>)
 8000df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <HAL_ADC_MspInit+0xdc>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <HAL_ADC_MspInit+0xdc>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a25      	ldr	r2, [pc, #148]	; (8000ea0 <HAL_ADC_MspInit+0xdc>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <HAL_ADC_MspInit+0xdc>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e22:	2303      	movs	r3, #3
 8000e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481c      	ldr	r0, [pc, #112]	; (8000ea4 <HAL_ADC_MspInit+0xe0>)
 8000e32:	f001 f833 	bl	8001e9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	; (8000ea8 <HAL_ADC_MspInit+0xe4>)
 8000e38:	4a1c      	ldr	r2, [pc, #112]	; (8000eac <HAL_ADC_MspInit+0xe8>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <HAL_ADC_MspInit+0xe4>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e42:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_ADC_MspInit+0xe4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e48:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_ADC_MspInit+0xe4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e4e:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <HAL_ADC_MspInit+0xe4>)
 8000e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_ADC_MspInit+0xe4>)
 8000e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_ADC_MspInit+0xe4>)
 8000e60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_ADC_MspInit+0xe4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_ADC_MspInit+0xe4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_ADC_MspInit+0xe4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <HAL_ADC_MspInit+0xe4>)
 8000e7a:	f000 fd25 	bl	80018c8 <HAL_DMA_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000e84:	f7ff ff6c 	bl	8000d60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a07      	ldr	r2, [pc, #28]	; (8000ea8 <HAL_ADC_MspInit+0xe4>)
 8000e8c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e8e:	4a06      	ldr	r2, [pc, #24]	; (8000ea8 <HAL_ADC_MspInit+0xe4>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	; 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40012000 	.word	0x40012000
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	200001dc 	.word	0x200001dc
 8000eac:	40026410 	.word	0x40026410

08000eb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec0:	d10d      	bne.n	8000ede <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_TIM_Base_MspInit+0x3c>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_TIM_Base_MspInit+0x3c>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_TIM_Base_MspInit+0x3c>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3714      	adds	r7, #20
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f10:	d11d      	bne.n	8000f4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_TIM_MspPostInit+0x68>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_TIM_MspPostInit+0x68>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_TIM_MspPostInit+0x68>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60bb      	str	r3, [r7, #8]
 8000f2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIMER_Pin;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIMER_GPIO_Port, &GPIO_InitStruct);
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	4619      	mov	r1, r3
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <HAL_TIM_MspPostInit+0x6c>)
 8000f4a:	f000 ffa7 	bl	8001e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f4e:	bf00      	nop
 8000f50:	3720      	adds	r7, #32
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40020000 	.word	0x40020000

08000f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <NMI_Handler+0x4>

08000f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6a:	e7fe      	b.n	8000f6a <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <MemManage_Handler+0x4>

08000f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <BusFault_Handler+0x4>

08000f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <UsageFault_Handler+0x4>

08000f7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f8e2 	bl	8001158 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f94:	f009 fd72 	bl	800aa7c <xTaskGetSchedulerState>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d001      	beq.n	8000fa2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f9e:	f00a ff3b 	bl	800be18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <DMA2_Stream0_IRQHandler+0x10>)
 8000fae:	f000 fd39 	bl	8001a24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200001dc 	.word	0x200001dc

08000fbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <OTG_FS_IRQHandler+0x10>)
 8000fc2:	f001 fa72 	bl	80024aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000a6f8 	.word	0x2000a6f8

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	; (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	; (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	; (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f00b ff26 	bl	800ce50 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	; (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20018000 	.word	0x20018000
 8001030:	00000400 	.word	0x00000400
 8001034:	200003d4 	.word	0x200003d4
 8001038:	2000ae38 	.word	0x2000ae38

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	; (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001098 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001066:	490e      	ldr	r1, [pc, #56]	; (80010a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001068:	4a0e      	ldr	r2, [pc, #56]	; (80010a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800106a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800106c:	e002      	b.n	8001074 <LoopCopyDataInit>

0800106e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800106e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001072:	3304      	adds	r3, #4

08001074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001078:	d3f9      	bcc.n	800106e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800107c:	4c0b      	ldr	r4, [pc, #44]	; (80010ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001080:	e001      	b.n	8001086 <LoopFillZerobss>

08001082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001084:	3204      	adds	r2, #4

08001086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001088:	d3fb      	bcc.n	8001082 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800108a:	f7ff ffd7 	bl	800103c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800108e:	f00b fee5 	bl	800ce5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001092:	f7ff fbbf 	bl	8000814 <main>
  bx  lr    
 8001096:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001098:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800109c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a0:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80010a4:	0800dc2c 	.word	0x0800dc2c
  ldr r2, =_sbss
 80010a8:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80010ac:	2000ae34 	.word	0x2000ae34

080010b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b0:	e7fe      	b.n	80010b0 <ADC_IRQHandler>
	...

080010b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010b8:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <HAL_Init+0x40>)
 80010be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_Init+0x40>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_Init+0x40>)
 80010ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <HAL_Init+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a07      	ldr	r2, [pc, #28]	; (80010f4 <HAL_Init+0x40>)
 80010d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f000 fbb1 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e2:	200f      	movs	r0, #15
 80010e4:	f000 f808 	bl	80010f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e8:	f7ff fe40 	bl	8000d6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40023c00 	.word	0x40023c00

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b12      	ldr	r3, [pc, #72]	; (800114c <HAL_InitTick+0x54>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x58>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	4619      	mov	r1, r3
 800110a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001112:	fbb2 f3f3 	udiv	r3, r2, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f000 fbc9 	bl	80018ae <HAL_SYSTICK_Config>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e00e      	b.n	8001144 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b0f      	cmp	r3, #15
 800112a:	d80a      	bhi.n	8001142 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800112c:	2200      	movs	r2, #0
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001134:	f000 fb91 	bl	800185a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001138:	4a06      	ldr	r2, [pc, #24]	; (8001154 <HAL_InitTick+0x5c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e000      	b.n	8001144 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000000c 	.word	0x2000000c
 8001150:	20000014 	.word	0x20000014
 8001154:	20000010 	.word	0x20000010

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000014 	.word	0x20000014
 800117c:	200003d8 	.word	0x200003d8

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	200003d8 	.word	0x200003d8

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff ffee 	bl	8001180 <HAL_GetTick>
 80011a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4413      	add	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011be:	bf00      	nop
 80011c0:	f7ff ffde 	bl	8001180 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000014 	.word	0x20000014

080011e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d101      	bne.n	80011f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e033      	b.n	800125e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d109      	bne.n	8001212 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fde0 	bl	8000dc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f003 0310 	and.w	r3, r3, #16
 800121a:	2b00      	cmp	r3, #0
 800121c:	d118      	bne.n	8001250 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001226:	f023 0302 	bic.w	r3, r3, #2
 800122a:	f043 0202 	orr.w	r2, r3, #2
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f93a 	bl	80014ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	f023 0303 	bic.w	r3, r3, #3
 8001246:	f043 0201 	orr.w	r2, r3, #1
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	641a      	str	r2, [r3, #64]	; 0x40
 800124e:	e001      	b.n	8001254 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800127c:	2b01      	cmp	r3, #1
 800127e:	d101      	bne.n	8001284 <HAL_ADC_ConfigChannel+0x1c>
 8001280:	2302      	movs	r3, #2
 8001282:	e105      	b.n	8001490 <HAL_ADC_ConfigChannel+0x228>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b09      	cmp	r3, #9
 8001292:	d925      	bls.n	80012e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	68d9      	ldr	r1, [r3, #12]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	b29b      	uxth	r3, r3
 80012a0:	461a      	mov	r2, r3
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	3b1e      	subs	r3, #30
 80012aa:	2207      	movs	r2, #7
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43da      	mvns	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	400a      	ands	r2, r1
 80012b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	68d9      	ldr	r1, [r3, #12]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	4603      	mov	r3, r0
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4403      	add	r3, r0
 80012d2:	3b1e      	subs	r3, #30
 80012d4:	409a      	lsls	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	e022      	b.n	8001326 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6919      	ldr	r1, [r3, #16]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	2207      	movs	r2, #7
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43da      	mvns	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	400a      	ands	r2, r1
 8001302:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	6919      	ldr	r1, [r3, #16]
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	4618      	mov	r0, r3
 8001316:	4603      	mov	r3, r0
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4403      	add	r3, r0
 800131c:	409a      	lsls	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	2b06      	cmp	r3, #6
 800132c:	d824      	bhi.n	8001378 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	3b05      	subs	r3, #5
 8001340:	221f      	movs	r2, #31
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	400a      	ands	r2, r1
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	3b05      	subs	r3, #5
 800136a:	fa00 f203 	lsl.w	r2, r0, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	635a      	str	r2, [r3, #52]	; 0x34
 8001376:	e04c      	b.n	8001412 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	2b0c      	cmp	r3, #12
 800137e:	d824      	bhi.n	80013ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	3b23      	subs	r3, #35	; 0x23
 8001392:	221f      	movs	r2, #31
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43da      	mvns	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	400a      	ands	r2, r1
 80013a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	4613      	mov	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	3b23      	subs	r3, #35	; 0x23
 80013bc:	fa00 f203 	lsl.w	r2, r0, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	631a      	str	r2, [r3, #48]	; 0x30
 80013c8:	e023      	b.n	8001412 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	3b41      	subs	r3, #65	; 0x41
 80013dc:	221f      	movs	r2, #31
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43da      	mvns	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	400a      	ands	r2, r1
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	4618      	mov	r0, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	3b41      	subs	r3, #65	; 0x41
 8001406:	fa00 f203 	lsl.w	r2, r0, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001412:	4b22      	ldr	r3, [pc, #136]	; (800149c <HAL_ADC_ConfigChannel+0x234>)
 8001414:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <HAL_ADC_ConfigChannel+0x238>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d109      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x1cc>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2b12      	cmp	r3, #18
 8001426:	d105      	bne.n	8001434 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a19      	ldr	r2, [pc, #100]	; (80014a0 <HAL_ADC_ConfigChannel+0x238>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d123      	bne.n	8001486 <HAL_ADC_ConfigChannel+0x21e>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b10      	cmp	r3, #16
 8001444:	d003      	beq.n	800144e <HAL_ADC_ConfigChannel+0x1e6>
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b11      	cmp	r3, #17
 800144c:	d11b      	bne.n	8001486 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2b10      	cmp	r3, #16
 8001460:	d111      	bne.n	8001486 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_ADC_ConfigChannel+0x23c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a10      	ldr	r2, [pc, #64]	; (80014a8 <HAL_ADC_ConfigChannel+0x240>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	0c9a      	lsrs	r2, r3, #18
 800146e:	4613      	mov	r3, r2
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001478:	e002      	b.n	8001480 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	3b01      	subs	r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f9      	bne.n	800147a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	40012300 	.word	0x40012300
 80014a0:	40012000 	.word	0x40012000
 80014a4:	2000000c 	.word	0x2000000c
 80014a8:	431bde83 	.word	0x431bde83

080014ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014b4:	4b79      	ldr	r3, [pc, #484]	; (800169c <ADC_Init+0x1f0>)
 80014b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	431a      	orrs	r2, r3
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6859      	ldr	r1, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	021a      	lsls	r2, r3, #8
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001504:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6859      	ldr	r1, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001526:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	6899      	ldr	r1, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	68da      	ldr	r2, [r3, #12]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	430a      	orrs	r2, r1
 8001538:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800153e:	4a58      	ldr	r2, [pc, #352]	; (80016a0 <ADC_Init+0x1f4>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d022      	beq.n	800158a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001552:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6899      	ldr	r1, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001574:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6899      	ldr	r1, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	e00f      	b.n	80015aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001598:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0202 	bic.w	r2, r2, #2
 80015b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6899      	ldr	r1, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7e1b      	ldrb	r3, [r3, #24]
 80015c4:	005a      	lsls	r2, r3, #1
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d01b      	beq.n	8001610 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	685a      	ldr	r2, [r3, #4]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6859      	ldr	r1, [r3, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	3b01      	subs	r3, #1
 8001604:	035a      	lsls	r2, r3, #13
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	e007      	b.n	8001620 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800161e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800162e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	3b01      	subs	r3, #1
 800163c:	051a      	lsls	r2, r3, #20
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001654:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6899      	ldr	r1, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001662:	025a      	lsls	r2, r3, #9
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800167a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6899      	ldr	r1, [r3, #8]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	029a      	lsls	r2, r3, #10
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	430a      	orrs	r2, r1
 800168e:	609a      	str	r2, [r3, #8]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40012300 	.word	0x40012300
 80016a0:	0f000001 	.word	0x0f000001

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4907      	ldr	r1, [pc, #28]	; (8001740 <__NVIC_EnableIRQ+0x38>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001824:	f7ff ff8e 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff29 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff3e 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff8e 	bl	8001798 <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5d 	bl	8001744 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff31 	bl	8001708 <__NVIC_EnableIRQ>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffa2 	bl	8001800 <SysTick_Config>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff fc54 	bl	8001180 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e099      	b.n	8001a18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2202      	movs	r2, #2
 80018e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f022 0201 	bic.w	r2, r2, #1
 8001902:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001904:	e00f      	b.n	8001926 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001906:	f7ff fc3b 	bl	8001180 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b05      	cmp	r3, #5
 8001912:	d908      	bls.n	8001926 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2220      	movs	r2, #32
 8001918:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2203      	movs	r2, #3
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e078      	b.n	8001a18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	2b00      	cmp	r3, #0
 8001932:	d1e8      	bne.n	8001906 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	4b38      	ldr	r3, [pc, #224]	; (8001a20 <HAL_DMA_Init+0x158>)
 8001940:	4013      	ands	r3, r2
 8001942:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001952:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800195e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800196a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	4313      	orrs	r3, r2
 8001976:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	2b04      	cmp	r3, #4
 800197e:	d107      	bne.n	8001990 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	4313      	orrs	r3, r2
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	4313      	orrs	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	697a      	ldr	r2, [r7, #20]
 8001996:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f023 0307 	bic.w	r3, r3, #7
 80019a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	d117      	bne.n	80019ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00e      	beq.n	80019ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f000 f9e9 	bl	8001da4 <DMA_CheckFifoParam>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d008      	beq.n	80019ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2240      	movs	r2, #64	; 0x40
 80019dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019e6:	2301      	movs	r3, #1
 80019e8:	e016      	b.n	8001a18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f9a0 	bl	8001d38 <DMA_CalcBaseAndBitshift>
 80019f8:	4603      	mov	r3, r0
 80019fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a00:	223f      	movs	r2, #63	; 0x3f
 8001a02:	409a      	lsls	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2201      	movs	r2, #1
 8001a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	f010803f 	.word	0xf010803f

08001a24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001a30:	4b8e      	ldr	r3, [pc, #568]	; (8001c6c <HAL_DMA_IRQHandler+0x248>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a8e      	ldr	r2, [pc, #568]	; (8001c70 <HAL_DMA_IRQHandler+0x24c>)
 8001a36:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3a:	0a9b      	lsrs	r3, r3, #10
 8001a3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4e:	2208      	movs	r2, #8
 8001a50:	409a      	lsls	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d01a      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d013      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0204 	bic.w	r2, r2, #4
 8001a76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7c:	2208      	movs	r2, #8
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a88:	f043 0201 	orr.w	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	2201      	movs	r2, #1
 8001a96:	409a      	lsls	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d012      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00b      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001abe:	f043 0202 	orr.w	r2, r3, #2
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aca:	2204      	movs	r2, #4
 8001acc:	409a      	lsls	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d012      	beq.n	8001afc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00b      	beq.n	8001afc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae8:	2204      	movs	r2, #4
 8001aea:	409a      	lsls	r2, r3
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af4:	f043 0204 	orr.w	r2, r3, #4
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b00:	2210      	movs	r2, #16
 8001b02:	409a      	lsls	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4013      	ands	r3, r2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d043      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0308 	and.w	r3, r3, #8
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d03c      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1e:	2210      	movs	r2, #16
 8001b20:	409a      	lsls	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d018      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d108      	bne.n	8001b54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d024      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	4798      	blx	r3
 8001b52:	e01f      	b.n	8001b94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01b      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4798      	blx	r3
 8001b64:	e016      	b.n	8001b94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0208 	bic.w	r2, r2, #8
 8001b82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b98:	2220      	movs	r2, #32
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 808f 	beq.w	8001cc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 8087 	beq.w	8001cc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bba:	2220      	movs	r2, #32
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b05      	cmp	r3, #5
 8001bcc:	d136      	bne.n	8001c3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0216 	bic.w	r2, r2, #22
 8001bdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <HAL_DMA_IRQHandler+0x1da>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d007      	beq.n	8001c0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f022 0208 	bic.w	r2, r2, #8
 8001c0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c12:	223f      	movs	r2, #63	; 0x3f
 8001c14:	409a      	lsls	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d07e      	beq.n	8001d30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
        }
        return;
 8001c3a:	e079      	b.n	8001d30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d01d      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10d      	bne.n	8001c74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d031      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	4798      	blx	r3
 8001c68:	e02c      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x2a0>
 8001c6a:	bf00      	nop
 8001c6c:	2000000c 	.word	0x2000000c
 8001c70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d023      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
 8001c84:	e01e      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10f      	bne.n	8001cb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f022 0210 	bic.w	r2, r2, #16
 8001ca2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d032      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d022      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2205      	movs	r2, #5
 8001cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d307      	bcc.n	8001d0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f2      	bne.n	8001cf0 <HAL_DMA_IRQHandler+0x2cc>
 8001d0a:	e000      	b.n	8001d0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	4798      	blx	r3
 8001d2e:	e000      	b.n	8001d32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d30:	bf00      	nop
    }
  }
}
 8001d32:	3718      	adds	r7, #24
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	3b10      	subs	r3, #16
 8001d48:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <DMA_CalcBaseAndBitshift+0x64>)
 8001d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4e:	091b      	lsrs	r3, r3, #4
 8001d50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d52:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <DMA_CalcBaseAndBitshift+0x68>)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d909      	bls.n	8001d7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d6e:	f023 0303 	bic.w	r3, r3, #3
 8001d72:	1d1a      	adds	r2, r3, #4
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	659a      	str	r2, [r3, #88]	; 0x58
 8001d78:	e007      	b.n	8001d8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d82:	f023 0303 	bic.w	r3, r3, #3
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	aaaaaaab 	.word	0xaaaaaaab
 8001da0:	0800db80 	.word	0x0800db80

08001da4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d11f      	bne.n	8001dfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d856      	bhi.n	8001e72 <DMA_CheckFifoParam+0xce>
 8001dc4:	a201      	add	r2, pc, #4	; (adr r2, 8001dcc <DMA_CheckFifoParam+0x28>)
 8001dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dca:	bf00      	nop
 8001dcc:	08001ddd 	.word	0x08001ddd
 8001dd0:	08001def 	.word	0x08001def
 8001dd4:	08001ddd 	.word	0x08001ddd
 8001dd8:	08001e73 	.word	0x08001e73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d046      	beq.n	8001e76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dec:	e043      	b.n	8001e76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001df2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001df6:	d140      	bne.n	8001e7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001dfc:	e03d      	b.n	8001e7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e06:	d121      	bne.n	8001e4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d837      	bhi.n	8001e7e <DMA_CheckFifoParam+0xda>
 8001e0e:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <DMA_CheckFifoParam+0x70>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e25 	.word	0x08001e25
 8001e18:	08001e2b 	.word	0x08001e2b
 8001e1c:	08001e25 	.word	0x08001e25
 8001e20:	08001e3d 	.word	0x08001e3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	73fb      	strb	r3, [r7, #15]
      break;
 8001e28:	e030      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d025      	beq.n	8001e82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e3a:	e022      	b.n	8001e82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e44:	d11f      	bne.n	8001e86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e4a:	e01c      	b.n	8001e86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d903      	bls.n	8001e5a <DMA_CheckFifoParam+0xb6>
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d003      	beq.n	8001e60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e58:	e018      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8001e5e:	e015      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00e      	beq.n	8001e8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e70:	e00b      	b.n	8001e8a <DMA_CheckFifoParam+0xe6>
      break;
 8001e72:	bf00      	nop
 8001e74:	e00a      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e76:	bf00      	nop
 8001e78:	e008      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e7a:	bf00      	nop
 8001e7c:	e006      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e7e:	bf00      	nop
 8001e80:	e004      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e82:	bf00      	nop
 8001e84:	e002      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;   
 8001e86:	bf00      	nop
 8001e88:	e000      	b.n	8001e8c <DMA_CheckFifoParam+0xe8>
      break;
 8001e8a:	bf00      	nop
    }
  } 
  
  return status; 
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3714      	adds	r7, #20
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop

08001e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
 8001eb6:	e159      	b.n	800216c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb8:	2201      	movs	r2, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	f040 8148 	bne.w	8002166 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d005      	beq.n	8001eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d130      	bne.n	8001f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f24:	2201      	movs	r2, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 0201 	and.w	r2, r3, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d017      	beq.n	8001f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d123      	bne.n	8001fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	08da      	lsrs	r2, r3, #3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3208      	adds	r2, #8
 8001fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	08da      	lsrs	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3208      	adds	r2, #8
 8001fda:	69b9      	ldr	r1, [r7, #24]
 8001fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	2203      	movs	r2, #3
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 0203 	and.w	r2, r3, #3
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 80a2 	beq.w	8002166 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b57      	ldr	r3, [pc, #348]	; (8002184 <HAL_GPIO_Init+0x2e8>)
 8002028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202a:	4a56      	ldr	r2, [pc, #344]	; (8002184 <HAL_GPIO_Init+0x2e8>)
 800202c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002030:	6453      	str	r3, [r2, #68]	; 0x44
 8002032:	4b54      	ldr	r3, [pc, #336]	; (8002184 <HAL_GPIO_Init+0x2e8>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800203e:	4a52      	ldr	r2, [pc, #328]	; (8002188 <HAL_GPIO_Init+0x2ec>)
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	089b      	lsrs	r3, r3, #2
 8002044:	3302      	adds	r3, #2
 8002046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	220f      	movs	r2, #15
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43db      	mvns	r3, r3
 800205c:	69ba      	ldr	r2, [r7, #24]
 800205e:	4013      	ands	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a49      	ldr	r2, [pc, #292]	; (800218c <HAL_GPIO_Init+0x2f0>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d019      	beq.n	800209e <HAL_GPIO_Init+0x202>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a48      	ldr	r2, [pc, #288]	; (8002190 <HAL_GPIO_Init+0x2f4>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_GPIO_Init+0x1fe>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a47      	ldr	r2, [pc, #284]	; (8002194 <HAL_GPIO_Init+0x2f8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d00d      	beq.n	8002096 <HAL_GPIO_Init+0x1fa>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a46      	ldr	r2, [pc, #280]	; (8002198 <HAL_GPIO_Init+0x2fc>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d007      	beq.n	8002092 <HAL_GPIO_Init+0x1f6>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	4a45      	ldr	r2, [pc, #276]	; (800219c <HAL_GPIO_Init+0x300>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d101      	bne.n	800208e <HAL_GPIO_Init+0x1f2>
 800208a:	2304      	movs	r3, #4
 800208c:	e008      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 800208e:	2307      	movs	r3, #7
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 8002092:	2303      	movs	r3, #3
 8002094:	e004      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 8002096:	2302      	movs	r3, #2
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x204>
 800209e:	2300      	movs	r3, #0
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	f002 0203 	and.w	r2, r2, #3
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	4093      	lsls	r3, r2
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b0:	4935      	ldr	r1, [pc, #212]	; (8002188 <HAL_GPIO_Init+0x2ec>)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3302      	adds	r3, #2
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020be:	4b38      	ldr	r3, [pc, #224]	; (80021a0 <HAL_GPIO_Init+0x304>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020e2:	4a2f      	ldr	r2, [pc, #188]	; (80021a0 <HAL_GPIO_Init+0x304>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <HAL_GPIO_Init+0x304>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800210c:	4a24      	ldr	r2, [pc, #144]	; (80021a0 <HAL_GPIO_Init+0x304>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002112:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <HAL_GPIO_Init+0x304>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002136:	4a1a      	ldr	r2, [pc, #104]	; (80021a0 <HAL_GPIO_Init+0x304>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800213c:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <HAL_GPIO_Init+0x304>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002160:	4a0f      	ldr	r2, [pc, #60]	; (80021a0 <HAL_GPIO_Init+0x304>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	f67f aea2 	bls.w	8001eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3724      	adds	r7, #36	; 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40013800 	.word	0x40013800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40020800 	.word	0x40020800
 8002198:	40020c00 	.word	0x40020c00
 800219c:	40021000 	.word	0x40021000
 80021a0:	40013c00 	.word	0x40013c00

080021a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	807b      	strh	r3, [r7, #2]
 80021b0:	4613      	mov	r3, r2
 80021b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021b4:	787b      	ldrb	r3, [r7, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ba:	887a      	ldrh	r2, [r7, #2]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021c0:	e003      	b.n	80021ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021c2:	887b      	ldrh	r3, [r7, #2]
 80021c4:	041a      	lsls	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	619a      	str	r2, [r3, #24]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e8:	887a      	ldrh	r2, [r7, #2]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4013      	ands	r3, r2
 80021ee:	041a      	lsls	r2, r3, #16
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	887b      	ldrh	r3, [r7, #2]
 80021f6:	400b      	ands	r3, r1
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	619a      	str	r2, [r3, #24]
}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800220a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220c:	b08f      	sub	sp, #60	; 0x3c
 800220e:	af0a      	add	r7, sp, #40	; 0x28
 8002210:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e10f      	b.n	800243c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f00a faf6 	bl	800c828 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2203      	movs	r2, #3
 8002240:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f002 fcdd 	bl	8004c1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	687e      	ldr	r6, [r7, #4]
 8002268:	466d      	mov	r5, sp
 800226a:	f106 0410 	add.w	r4, r6, #16
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800227a:	e885 0003 	stmia.w	r5, {r0, r1}
 800227e:	1d33      	adds	r3, r6, #4
 8002280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002282:	6838      	ldr	r0, [r7, #0]
 8002284:	f002 fbb4 	bl	80049f0 <USB_CoreInit>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0d0      	b.n	800243c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 fccb 	bl	8004c3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e04a      	b.n	8002342 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	333d      	adds	r3, #61	; 0x3d
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	333c      	adds	r3, #60	; 0x3c
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	b298      	uxth	r0, r3
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	3344      	adds	r3, #68	; 0x44
 80022e8:	4602      	mov	r2, r0
 80022ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	3340      	adds	r3, #64	; 0x40
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3348      	adds	r3, #72	; 0x48
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	334c      	adds	r3, #76	; 0x4c
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3354      	adds	r3, #84	; 0x54
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	3301      	adds	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	d3af      	bcc.n	80022ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e044      	b.n	80023dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	3301      	adds	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d3b5      	bcc.n	8002352 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	687e      	ldr	r6, [r7, #4]
 80023ee:	466d      	mov	r5, sp
 80023f0:	f106 0410 	add.w	r4, r6, #16
 80023f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002400:	e885 0003 	stmia.w	r5, {r0, r1}
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002408:	6838      	ldr	r0, [r7, #0]
 800240a:	f002 fc63 	bl	8004cd4 <USB_DevInit>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e00d      	b.n	800243c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f003 fdb2 	bl	8005f9e <USB_DevDisconnect>

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002444 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_PCD_Start+0x1c>
 800245c:	2302      	movs	r3, #2
 800245e:	e020      	b.n	80024a2 <HAL_PCD_Start+0x5e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	2b01      	cmp	r3, #1
 800246e:	d109      	bne.n	8002484 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002474:	2b01      	cmp	r3, #1
 8002476:	d005      	beq.n	8002484 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f002 fbb5 	bl	8004bf8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f003 fd62 	bl	8005f5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024aa:	b590      	push	{r4, r7, lr}
 80024ac:	b08d      	sub	sp, #52	; 0x34
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 fe20 	bl	8006106 <USB_GetMode>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f040 848a 	bne.w	8002de2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 fd84 	bl	8005fe0 <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8480 	beq.w	8002de0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 fd71 	bl	8005fe0 <USB_ReadInterrupts>
 80024fe:	4603      	mov	r3, r0
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b02      	cmp	r3, #2
 8002506:	d107      	bne.n	8002518 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f002 0202 	and.w	r2, r2, #2
 8002516:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f003 fd5f 	bl	8005fe0 <USB_ReadInterrupts>
 8002522:	4603      	mov	r3, r0
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b10      	cmp	r3, #16
 800252a:	d161      	bne.n	80025f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0210 	bic.w	r2, r2, #16
 800253a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f003 020f 	and.w	r2, r3, #15
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	3304      	adds	r3, #4
 800255a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	0c5b      	lsrs	r3, r3, #17
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	2b02      	cmp	r3, #2
 8002566:	d124      	bne.n	80025b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d035      	beq.n	80025e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800257e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002582:	b29b      	uxth	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	6a38      	ldr	r0, [r7, #32]
 8002588:	f003 fb96 	bl	8005cb8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002598:	441a      	add	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	6a1a      	ldr	r2, [r3, #32]
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025aa:	441a      	add	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	621a      	str	r2, [r3, #32]
 80025b0:	e016      	b.n	80025e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	0c5b      	lsrs	r3, r3, #17
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d110      	bne.n	80025e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025c4:	2208      	movs	r2, #8
 80025c6:	4619      	mov	r1, r3
 80025c8:	6a38      	ldr	r0, [r7, #32]
 80025ca:	f003 fb75 	bl	8005cb8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	6a1a      	ldr	r2, [r3, #32]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025da:	441a      	add	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0210 	orr.w	r2, r2, #16
 80025ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 fcf3 	bl	8005fe0 <USB_ReadInterrupts>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002600:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002604:	f040 80a7 	bne.w	8002756 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f003 fcf8 	bl	8006006 <USB_ReadDevAllOutEpInterrupt>
 8002616:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002618:	e099      	b.n	800274e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 808e 	beq.w	8002742 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f003 fd1c 	bl	800606e <USB_ReadDevOutEPInterrupt>
 8002636:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00c      	beq.n	800265c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264e:	461a      	mov	r2, r3
 8002650:	2301      	movs	r3, #1
 8002652:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fec2 	bl	80033e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00c      	beq.n	8002680 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002672:	461a      	mov	r2, r3
 8002674:	2308      	movs	r3, #8
 8002676:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002678:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 ff98 	bl	80035b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002696:	461a      	mov	r2, r3
 8002698:	2310      	movs	r3, #16
 800269a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d030      	beq.n	8002708 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ae:	2b80      	cmp	r3, #128	; 0x80
 80026b0:	d109      	bne.n	80026c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	3304      	adds	r3, #4
 80026da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	78db      	ldrb	r3, [r3, #3]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d108      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2200      	movs	r2, #0
 80026e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f00a f99f 	bl	800ca34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002702:	461a      	mov	r2, r3
 8002704:	2302      	movs	r3, #2
 8002706:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271e:	461a      	mov	r2, r3
 8002720:	2320      	movs	r3, #32
 8002722:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273a:	461a      	mov	r2, r3
 800273c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002740:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	3301      	adds	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	f47f af62 	bne.w	800261a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 fc40 	bl	8005fe0 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002766:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800276a:	f040 80db 	bne.w	8002924 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f003 fc61 	bl	800603a <USB_ReadDevAllInEpInterrupt>
 8002778:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800277e:	e0cd      	b.n	800291c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80c2 	beq.w	8002910 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f003 fc87 	bl	80060aa <USB_ReadDevInEPInterrupt>
 800279c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d057      	beq.n	8002858 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	2201      	movs	r2, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69f9      	ldr	r1, [r7, #28]
 80027c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027c8:	4013      	ands	r3, r2
 80027ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d8:	461a      	mov	r2, r3
 80027da:	2301      	movs	r3, #1
 80027dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d132      	bne.n	800284c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	334c      	adds	r3, #76	; 0x4c
 80027f6:	6819      	ldr	r1, [r3, #0]
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4403      	add	r3, r0
 8002806:	3348      	adds	r3, #72	; 0x48
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4419      	add	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4403      	add	r3, r0
 800281a:	334c      	adds	r3, #76	; 0x4c
 800281c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	2b00      	cmp	r3, #0
 8002822:	d113      	bne.n	800284c <HAL_PCD_IRQHandler+0x3a2>
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3354      	adds	r3, #84	; 0x54
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d108      	bne.n	800284c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002844:	461a      	mov	r2, r3
 8002846:	2101      	movs	r1, #1
 8002848:	f003 fc8e 	bl	8006168 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4619      	mov	r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f00a f869 	bl	800c92a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286e:	461a      	mov	r2, r3
 8002870:	2308      	movs	r3, #8
 8002872:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	4413      	add	r3, r2
 8002886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800288a:	461a      	mov	r2, r3
 800288c:	2310      	movs	r3, #16
 800288e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a6:	461a      	mov	r2, r3
 80028a8:	2340      	movs	r3, #64	; 0x40
 80028aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d023      	beq.n	80028fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b8:	6a38      	ldr	r0, [r7, #32]
 80028ba:	f002 fb6f 	bl	8004f9c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	3338      	adds	r3, #56	; 0x38
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	3304      	adds	r3, #4
 80028d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	78db      	ldrb	r3, [r3, #3]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d108      	bne.n	80028ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2200      	movs	r2, #0
 80028de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	4619      	mov	r1, r3
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f00a f8b6 	bl	800ca58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f8:	461a      	mov	r2, r3
 80028fa:	2302      	movs	r3, #2
 80028fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fcdb 	bl	80032c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	3301      	adds	r3, #1
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	2b00      	cmp	r3, #0
 8002920:	f47f af2e 	bne.w	8002780 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f003 fb59 	bl	8005fe0 <USB_ReadInterrupts>
 800292e:	4603      	mov	r3, r0
 8002930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002938:	d122      	bne.n	8002980 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002954:	2b01      	cmp	r3, #1
 8002956:	d108      	bne.n	800296a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002960:	2100      	movs	r1, #0
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fec2 	bl	80036ec <HAL_PCDEx_LPM_Callback>
 8002968:	e002      	b.n	8002970 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f00a f854 	bl	800ca18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800297e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f003 fb2b 	bl	8005fe0 <USB_ReadInterrupts>
 800298a:	4603      	mov	r3, r0
 800298c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002994:	d112      	bne.n	80029bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d102      	bne.n	80029ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f00a f810 	bl	800c9cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029ba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 fb0d 	bl	8005fe0 <USB_ReadInterrupts>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d0:	f040 80b7 	bne.w	8002b42 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2110      	movs	r1, #16
 80029ee:	4618      	mov	r0, r3
 80029f0:	f002 fad4 	bl	8004f9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f8:	e046      	b.n	8002a88 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a06:	461a      	mov	r2, r3
 8002a08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1e:	0151      	lsls	r1, r2, #5
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	440a      	add	r2, r1
 8002a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a52:	0151      	lsls	r1, r2, #5
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	440a      	add	r2, r1
 8002a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a72:	0151      	lsls	r1, r2, #5
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	440a      	add	r2, r1
 8002a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	3301      	adds	r3, #1
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d3b3      	bcc.n	80029fa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002aa4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d016      	beq.n	8002adc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002abe:	f043 030b 	orr.w	r3, r3, #11
 8002ac2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad4:	f043 030b 	orr.w	r3, r3, #11
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	e015      	b.n	8002b08 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002aee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002af2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b02:	f043 030b 	orr.w	r3, r3, #11
 8002b06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f003 fb1b 	bl	8006168 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fa4a 	bl	8005fe0 <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b56:	d124      	bne.n	8002ba2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 fae0 	bl	8006122 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f002 fa95 	bl	8005096 <USB_GetDevSpeed>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681c      	ldr	r4, [r3, #0]
 8002b78:	f001 f9e8 	bl	8003f4c <HAL_RCC_GetHCLKFreq>
 8002b7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	4620      	mov	r0, r4
 8002b88:	f001 ff94 	bl	8004ab4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f009 fef4 	bl	800c97a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f003 fa1a 	bl	8005fe0 <USB_ReadInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d10a      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f009 fed1 	bl	800c95e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f002 0208 	and.w	r2, r2, #8
 8002bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f003 fa05 	bl	8005fe0 <USB_ReadInterrupts>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d122      	bne.n	8002c26 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bec:	2301      	movs	r3, #1
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf0:	e014      	b.n	8002c1c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d105      	bne.n	8002c16 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fb27 	bl	8003264 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	3301      	adds	r3, #1
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d3e5      	bcc.n	8002bf2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f003 f9d8 	bl	8005fe0 <USB_ReadInterrupts>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c3a:	d13b      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c40:	e02b      	b.n	8002c9a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3340      	adds	r3, #64	; 0x40
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d115      	bne.n	8002c94 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	da12      	bge.n	8002c94 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	333f      	adds	r3, #63	; 0x3f
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fae8 	bl	8003264 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	3301      	adds	r3, #1
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3ce      	bcc.n	8002c42 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 f991 	bl	8005fe0 <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc8:	d155      	bne.n	8002d76 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cca:	2301      	movs	r3, #1
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cce:	e045      	b.n	8002d5c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d12e      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cf8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	da2b      	bge.n	8002d56 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d0a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d121      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d52:	6053      	str	r3, [r2, #4]
            break;
 8002d54:	e007      	b.n	8002d66 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	3301      	adds	r3, #1
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d3b4      	bcc.n	8002cd0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 f930 	bl	8005fe0 <USB_ReadInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8a:	d10a      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f009 fe75 	bl	800ca7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 f91a 	bl	8005fe0 <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d115      	bne.n	8002de2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f009 fe65 	bl	800ca98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	e000      	b.n	8002de2 <HAL_PCD_IRQHandler+0x938>
      return;
 8002de0:	bf00      	nop
    }
  }
}
 8002de2:	3734      	adds	r7, #52	; 0x34
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}

08002de8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_PCD_SetAddress+0x1a>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e013      	b.n	8002e2a <HAL_PCD_SetAddress+0x42>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 f878 	bl	8005f10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	4608      	mov	r0, r1
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4603      	mov	r3, r0
 8002e42:	70fb      	strb	r3, [r7, #3]
 8002e44:	460b      	mov	r3, r1
 8002e46:	803b      	strh	r3, [r7, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da0f      	bge.n	8002e78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	f003 020f 	and.w	r2, r3, #15
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	3338      	adds	r3, #56	; 0x38
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	705a      	strb	r2, [r3, #1]
 8002e76:	e00f      	b.n	8002e98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	f003 020f 	and.w	r2, r3, #15
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3304      	adds	r3, #4
 8002e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ea4:	883a      	ldrh	r2, [r7, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	78ba      	ldrb	r2, [r7, #2]
 8002eae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ec2:	78bb      	ldrb	r3, [r7, #2]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d102      	bne.n	8002ece <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_PCD_EP_Open+0xaa>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e00e      	b.n	8002efa <HAL_PCD_EP_Open+0xc8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68f9      	ldr	r1, [r7, #12]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f002 f8f8 	bl	80050e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	da0f      	bge.n	8002f36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	f003 020f 	and.w	r2, r3, #15
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	3338      	adds	r3, #56	; 0x38
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	705a      	strb	r2, [r3, #1]
 8002f34:	e00f      	b.n	8002f56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	f003 020f 	and.w	r2, r3, #15
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_PCD_EP_Close+0x6e>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e00e      	b.n	8002f8e <HAL_PCD_EP_Close+0x8c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68f9      	ldr	r1, [r7, #12]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f002 f936 	bl	80051f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa6:	7afb      	ldrb	r3, [r7, #11]
 8002fa8:	f003 020f 	and.w	r2, r3, #15
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd8:	7afb      	ldrb	r3, [r7, #11]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d102      	bne.n	8002ff2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	6979      	ldr	r1, [r7, #20]
 800300a:	f002 fc15 	bl	8005838 <USB_EP0StartXfer>
 800300e:	e008      	b.n	8003022 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	6979      	ldr	r1, [r7, #20]
 800301e:	f002 f9c3 	bl	80053a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	f003 020f 	and.w	r2, r3, #15
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	460b      	mov	r3, r1
 800306a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306c:	7afb      	ldrb	r3, [r7, #11]
 800306e:	f003 020f 	and.w	r2, r3, #15
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	3338      	adds	r3, #56	; 0x38
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	3304      	adds	r3, #4
 8003082:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2200      	movs	r2, #0
 8003094:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2201      	movs	r2, #1
 800309a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800309c:	7afb      	ldrb	r3, [r7, #11]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d102      	bne.n	80030b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030b6:	7afb      	ldrb	r3, [r7, #11]
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d109      	bne.n	80030d4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	6979      	ldr	r1, [r7, #20]
 80030ce:	f002 fbb3 	bl	8005838 <USB_EP0StartXfer>
 80030d2:	e008      	b.n	80030e6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	6979      	ldr	r1, [r7, #20]
 80030e2:	f002 f961 	bl	80053a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	f003 020f 	and.w	r2, r3, #15
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	429a      	cmp	r2, r3
 8003108:	d901      	bls.n	800310e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e050      	b.n	80031b0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800310e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003112:	2b00      	cmp	r3, #0
 8003114:	da0f      	bge.n	8003136 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	f003 020f 	and.w	r2, r3, #15
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	3338      	adds	r3, #56	; 0x38
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	3304      	adds	r3, #4
 800312c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	705a      	strb	r2, [r3, #1]
 8003134:	e00d      	b.n	8003152 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	3304      	adds	r3, #4
 800314a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	b2da      	uxtb	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_PCD_EP_SetStall+0x82>
 800316e:	2302      	movs	r3, #2
 8003170:	e01e      	b.n	80031b0 <HAL_PCD_EP_SetStall+0xc0>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68f9      	ldr	r1, [r7, #12]
 8003180:	4618      	mov	r0, r3
 8003182:	f002 fdf1 	bl	8005d68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	b2d9      	uxtb	r1, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031a0:	461a      	mov	r2, r3
 80031a2:	f002 ffe1 	bl	8006168 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 020f 	and.w	r2, r3, #15
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d901      	bls.n	80031d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e042      	b.n	800325c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	da0f      	bge.n	80031fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f003 020f 	and.w	r2, r3, #15
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	3338      	adds	r3, #56	; 0x38
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	3304      	adds	r3, #4
 80031f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	705a      	strb	r2, [r3, #1]
 80031fc:	e00f      	b.n	800321e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	f003 020f 	and.w	r2, r3, #15
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4413      	add	r3, r2
 8003214:	3304      	adds	r3, #4
 8003216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	b2da      	uxtb	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_PCD_EP_ClrStall+0x86>
 800323a:	2302      	movs	r3, #2
 800323c:	e00e      	b.n	800325c <HAL_PCD_EP_ClrStall+0xa4>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68f9      	ldr	r1, [r7, #12]
 800324c:	4618      	mov	r0, r3
 800324e:	f002 fdf9 	bl	8005e44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003274:	2b00      	cmp	r3, #0
 8003276:	da0c      	bge.n	8003292 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	f003 020f 	and.w	r2, r3, #15
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	3338      	adds	r3, #56	; 0x38
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4413      	add	r3, r2
 800328c:	3304      	adds	r3, #4
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e00c      	b.n	80032ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 020f 	and.w	r2, r3, #15
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	3304      	adds	r3, #4
 80032aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68f9      	ldr	r1, [r7, #12]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f002 fc18 	bl	8005ae8 <USB_EPStopXfer>
 80032b8:	4603      	mov	r3, r0
 80032ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032bc:	7afb      	ldrb	r3, [r7, #11]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b08a      	sub	sp, #40	; 0x28
 80032ca:	af02      	add	r7, sp, #8
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	3338      	adds	r3, #56	; 0x38
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	3304      	adds	r3, #4
 80032ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a1a      	ldr	r2, [r3, #32]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d901      	bls.n	80032fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e06c      	b.n	80033d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	429a      	cmp	r2, r3
 8003312:	d902      	bls.n	800331a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3303      	adds	r3, #3
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003322:	e02b      	b.n	800337c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	429a      	cmp	r2, r3
 8003338:	d902      	bls.n	8003340 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	3303      	adds	r3, #3
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6919      	ldr	r1, [r3, #16]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2da      	uxtb	r2, r3
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003358:	b2db      	uxtb	r3, r3
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	4603      	mov	r3, r0
 800335e:	6978      	ldr	r0, [r7, #20]
 8003360:	f002 fc6c 	bl	8005c3c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	441a      	add	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	441a      	add	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	b29b      	uxth	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	429a      	cmp	r2, r3
 8003390:	d809      	bhi.n	80033a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1a      	ldr	r2, [r3, #32]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800339a:	429a      	cmp	r2, r3
 800339c:	d203      	bcs.n	80033a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1be      	bne.n	8003324 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d811      	bhi.n	80033d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	2201      	movs	r2, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	6939      	ldr	r1, [r7, #16]
 80033ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033d2:	4013      	ands	r3, r2
 80033d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	333c      	adds	r3, #60	; 0x3c
 80033f8:	3304      	adds	r3, #4
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d17b      	bne.n	800350e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d015      	beq.n	800344c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	4a61      	ldr	r2, [pc, #388]	; (80035a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	f240 80b9 	bls.w	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80b3 	beq.w	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003442:	461a      	mov	r2, r3
 8003444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003448:	6093      	str	r3, [r2, #8]
 800344a:	e0a7      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	461a      	mov	r2, r3
 8003464:	2320      	movs	r3, #32
 8003466:	6093      	str	r3, [r2, #8]
 8003468:	e098      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	f040 8093 	bne.w	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	4a4b      	ldr	r2, [pc, #300]	; (80035a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d90f      	bls.n	800349e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003494:	461a      	mov	r2, r3
 8003496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349a:	6093      	str	r3, [r2, #8]
 800349c:	e07e      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	3304      	adds	r3, #4
 80034b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	0159      	lsls	r1, r3, #5
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	440b      	add	r3, r1
 80034c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ca:	1ad2      	subs	r2, r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d114      	bne.n	8003500 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034e8:	461a      	mov	r2, r3
 80034ea:	2101      	movs	r1, #1
 80034ec:	f002 fe3c 	bl	8006168 <USB_EP0_OutStart>
 80034f0:	e006      	b.n	8003500 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	441a      	add	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f009 f9f4 	bl	800c8f4 <HAL_PCD_DataOutStageCallback>
 800350c:	e046      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	4a26      	ldr	r2, [pc, #152]	; (80035ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d124      	bne.n	8003560 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003532:	6093      	str	r3, [r2, #8]
 8003534:	e032      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354c:	461a      	mov	r2, r3
 800354e:	2320      	movs	r3, #32
 8003550:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f009 f9cb 	bl	800c8f4 <HAL_PCD_DataOutStageCallback>
 800355e:	e01d      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d114      	bne.n	8003590 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d108      	bne.n	8003590 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003588:	461a      	mov	r2, r3
 800358a:	2100      	movs	r1, #0
 800358c:	f002 fdec 	bl	8006168 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f009 f9ac 	bl	800c8f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	4f54300a 	.word	0x4f54300a
 80035ac:	4f54310a 	.word	0x4f54310a

080035b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	333c      	adds	r3, #60	; 0x3c
 80035c8:	3304      	adds	r3, #4
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4a15      	ldr	r2, [pc, #84]	; (8003638 <PCD_EP_OutSetupPacket_int+0x88>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d90e      	bls.n	8003604 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fc:	461a      	mov	r2, r3
 80035fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003602:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f009 f963 	bl	800c8d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <PCD_EP_OutSetupPacket_int+0x88>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d90c      	bls.n	800362c <PCD_EP_OutSetupPacket_int+0x7c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d108      	bne.n	800362c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003624:	461a      	mov	r2, r3
 8003626:	2101      	movs	r1, #1
 8003628:	f002 fd9e 	bl	8006168 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	4f54300a 	.word	0x4f54300a

0800363c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	70fb      	strb	r3, [r7, #3]
 8003648:	4613      	mov	r3, r2
 800364a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d107      	bne.n	800366a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800365a:	883b      	ldrh	r3, [r7, #0]
 800365c:	0419      	lsls	r1, r3, #16
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	430a      	orrs	r2, r1
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
 8003668:	e028      	b.n	80036bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	4413      	add	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
 800367c:	e00d      	b.n	800369a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	3340      	adds	r3, #64	; 0x40
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4413      	add	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	3301      	adds	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	3b01      	subs	r3, #1
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d3ec      	bcc.n	800367e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036a4:	883b      	ldrh	r3, [r7, #0]
 80036a6:	0418      	lsls	r0, r3, #16
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6819      	ldr	r1, [r3, #0]
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	4302      	orrs	r2, r0
 80036b4:	3340      	adds	r3, #64	; 0x40
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	460b      	mov	r3, r1
 80036d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e267      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d075      	beq.n	800380e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003722:	4b88      	ldr	r3, [pc, #544]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b04      	cmp	r3, #4
 800372c:	d00c      	beq.n	8003748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372e:	4b85      	ldr	r3, [pc, #532]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003736:	2b08      	cmp	r3, #8
 8003738:	d112      	bne.n	8003760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800373a:	4b82      	ldr	r3, [pc, #520]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003746:	d10b      	bne.n	8003760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	4b7e      	ldr	r3, [pc, #504]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d05b      	beq.n	800380c <HAL_RCC_OscConfig+0x108>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d157      	bne.n	800380c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e242      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003768:	d106      	bne.n	8003778 <HAL_RCC_OscConfig+0x74>
 800376a:	4b76      	ldr	r3, [pc, #472]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a75      	ldr	r2, [pc, #468]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e01d      	b.n	80037b4 <HAL_RCC_OscConfig+0xb0>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0x98>
 8003782:	4b70      	ldr	r3, [pc, #448]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6f      	ldr	r2, [pc, #444]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b6d      	ldr	r3, [pc, #436]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a6c      	ldr	r2, [pc, #432]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e00b      	b.n	80037b4 <HAL_RCC_OscConfig+0xb0>
 800379c:	4b69      	ldr	r3, [pc, #420]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a68      	ldr	r2, [pc, #416]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80037a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b66      	ldr	r3, [pc, #408]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a65      	ldr	r2, [pc, #404]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80037ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d013      	beq.n	80037e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fd fce0 	bl	8001180 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fd fcdc 	bl	8001180 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	; 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e207      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	4b5b      	ldr	r3, [pc, #364]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0xc0>
 80037e2:	e014      	b.n	800380e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd fccc 	bl	8001180 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd fcc8 	bl	8001180 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e1f3      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fe:	4b51      	ldr	r3, [pc, #324]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0xe8>
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d063      	beq.n	80038e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800381a:	4b4a      	ldr	r3, [pc, #296]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003826:	4b47      	ldr	r3, [pc, #284]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382e:	2b08      	cmp	r3, #8
 8003830:	d11c      	bne.n	800386c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003832:	4b44      	ldr	r3, [pc, #272]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d116      	bne.n	800386c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	4b41      	ldr	r3, [pc, #260]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_RCC_OscConfig+0x152>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d001      	beq.n	8003856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e1c7      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003856:	4b3b      	ldr	r3, [pc, #236]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4937      	ldr	r1, [pc, #220]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386a:	e03a      	b.n	80038e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d020      	beq.n	80038b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003874:	4b34      	ldr	r3, [pc, #208]	; (8003948 <HAL_RCC_OscConfig+0x244>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387a:	f7fd fc81 	bl	8001180 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003882:	f7fd fc7d 	bl	8001180 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e1a8      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a0:	4b28      	ldr	r3, [pc, #160]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4925      	ldr	r1, [pc, #148]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]
 80038b4:	e015      	b.n	80038e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b6:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_RCC_OscConfig+0x244>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fd fc60 	bl	8001180 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c4:	f7fd fc5c 	bl	8001180 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e187      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d036      	beq.n	800395c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <HAL_RCC_OscConfig+0x248>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fd fc40 	bl	8001180 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003904:	f7fd fc3c 	bl	8001180 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e167      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x200>
 8003922:	e01b      	b.n	800395c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003924:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCC_OscConfig+0x248>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392a:	f7fd fc29 	bl	8001180 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	e00e      	b.n	8003950 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003932:	f7fd fc25 	bl	8001180 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d907      	bls.n	8003950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e150      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
 8003944:	40023800 	.word	0x40023800
 8003948:	42470000 	.word	0x42470000
 800394c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003950:	4b88      	ldr	r3, [pc, #544]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ea      	bne.n	8003932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8097 	beq.w	8003a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396a:	2300      	movs	r3, #0
 800396c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396e:	4b81      	ldr	r3, [pc, #516]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10f      	bne.n	800399a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	4b7d      	ldr	r3, [pc, #500]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	4a7c      	ldr	r2, [pc, #496]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003988:	6413      	str	r3, [r2, #64]	; 0x40
 800398a:	4b7a      	ldr	r3, [pc, #488]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399a:	4b77      	ldr	r3, [pc, #476]	; (8003b78 <HAL_RCC_OscConfig+0x474>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d118      	bne.n	80039d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039a6:	4b74      	ldr	r3, [pc, #464]	; (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a73      	ldr	r2, [pc, #460]	; (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b2:	f7fd fbe5 	bl	8001180 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ba:	f7fd fbe1 	bl	8001180 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e10c      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d106      	bne.n	80039ee <HAL_RCC_OscConfig+0x2ea>
 80039e0:	4b64      	ldr	r3, [pc, #400]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e4:	4a63      	ldr	r2, [pc, #396]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	6713      	str	r3, [r2, #112]	; 0x70
 80039ec:	e01c      	b.n	8003a28 <HAL_RCC_OscConfig+0x324>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b05      	cmp	r3, #5
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x30c>
 80039f6:	4b5f      	ldr	r3, [pc, #380]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	4a5e      	ldr	r2, [pc, #376]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039fc:	f043 0304 	orr.w	r3, r3, #4
 8003a00:	6713      	str	r3, [r2, #112]	; 0x70
 8003a02:	4b5c      	ldr	r3, [pc, #368]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	4a5b      	ldr	r2, [pc, #364]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0x324>
 8003a10:	4b58      	ldr	r3, [pc, #352]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	4a57      	ldr	r2, [pc, #348]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1c:	4b55      	ldr	r3, [pc, #340]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	4a54      	ldr	r2, [pc, #336]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a22:	f023 0304 	bic.w	r3, r3, #4
 8003a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fd fba6 	bl	8001180 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a36:	e00a      	b.n	8003a4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a38:	f7fd fba2 	bl	8001180 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0cb      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4e:	4b49      	ldr	r3, [pc, #292]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0ee      	beq.n	8003a38 <HAL_RCC_OscConfig+0x334>
 8003a5a:	e014      	b.n	8003a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5c:	f7fd fb90 	bl	8001180 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a64:	f7fd fb8c 	bl	8001180 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e0b5      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7a:	4b3e      	ldr	r3, [pc, #248]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1ee      	bne.n	8003a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8c:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	4a38      	ldr	r2, [pc, #224]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a1 	beq.w	8003be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa2:	4b34      	ldr	r3, [pc, #208]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d05c      	beq.n	8003b68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d141      	bne.n	8003b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab6:	4b31      	ldr	r3, [pc, #196]	; (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7fd fb60 	bl	8001180 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fb5c 	bl	8001180 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e087      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	019b      	lsls	r3, r3, #6
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	3b01      	subs	r3, #1
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	491b      	ldr	r1, [pc, #108]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7fd fb35 	bl	8001180 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1a:	f7fd fb31 	bl	8001180 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e05c      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x416>
 8003b38:	e054      	b.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fd fb1e 	bl	8001180 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fd fb1a 	bl	8001180 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e045      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x444>
 8003b66:	e03d      	b.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e038      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b80:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <HAL_RCC_OscConfig+0x4ec>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d028      	beq.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d121      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d11a      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d111      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800

08003bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0cc      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c08:	4b68      	ldr	r3, [pc, #416]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d90c      	bls.n	8003c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b65      	ldr	r3, [pc, #404]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b63      	ldr	r3, [pc, #396]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0b8      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c48:	4b59      	ldr	r3, [pc, #356]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c60:	4b53      	ldr	r3, [pc, #332]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4a52      	ldr	r2, [pc, #328]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c6c:	4b50      	ldr	r3, [pc, #320]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	494d      	ldr	r1, [pc, #308]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d044      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d119      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e07f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb2:	4b3f      	ldr	r3, [pc, #252]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e06f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc2:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e067      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cd2:	4b37      	ldr	r3, [pc, #220]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f023 0203 	bic.w	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4934      	ldr	r1, [pc, #208]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce4:	f7fd fa4c 	bl	8001180 <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cec:	f7fd fa48 	bl	8001180 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e04f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 020c 	and.w	r2, r3, #12
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d1eb      	bne.n	8003cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d14:	4b25      	ldr	r3, [pc, #148]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d20c      	bcs.n	8003d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d22:	4b22      	ldr	r3, [pc, #136]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e032      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d48:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4916      	ldr	r1, [pc, #88]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	490e      	ldr	r1, [pc, #56]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d7a:	f000 f821 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	490a      	ldr	r1, [pc, #40]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	5ccb      	ldrb	r3, [r1, r3]
 8003d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d92:	4a09      	ldr	r2, [pc, #36]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd f9ac 	bl	80010f8 <HAL_InitTick>

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40023c00 	.word	0x40023c00
 8003db0:	40023800 	.word	0x40023800
 8003db4:	0800db70 	.word	0x0800db70
 8003db8:	2000000c 	.word	0x2000000c
 8003dbc:	20000010 	.word	0x20000010

08003dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc4:	b090      	sub	sp, #64	; 0x40
 8003dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	637b      	str	r3, [r7, #52]	; 0x34
 8003dcc:	2300      	movs	r3, #0
 8003dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd8:	4b59      	ldr	r3, [pc, #356]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d00d      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x40>
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	f200 80a1 	bhi.w	8003f2c <HAL_RCC_GetSysClockFreq+0x16c>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d003      	beq.n	8003dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8003df2:	e09b      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003df4:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003df6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003df8:	e09b      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dfa:	4b53      	ldr	r3, [pc, #332]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dfe:	e098      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e00:	4b4f      	ldr	r3, [pc, #316]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e08:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e0a:	4b4d      	ldr	r3, [pc, #308]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d028      	beq.n	8003e68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e16:	4b4a      	ldr	r3, [pc, #296]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	099b      	lsrs	r3, r3, #6
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	623b      	str	r3, [r7, #32]
 8003e20:	627a      	str	r2, [r7, #36]	; 0x24
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4b47      	ldr	r3, [pc, #284]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e2c:	fb03 f201 	mul.w	r2, r3, r1
 8003e30:	2300      	movs	r3, #0
 8003e32:	fb00 f303 	mul.w	r3, r0, r3
 8003e36:	4413      	add	r3, r2
 8003e38:	4a43      	ldr	r2, [pc, #268]	; (8003f48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e3a:	fba0 1202 	umull	r1, r2, r0, r2
 8003e3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e40:	460a      	mov	r2, r1
 8003e42:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e46:	4413      	add	r3, r2
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	61fa      	str	r2, [r7, #28]
 8003e52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e5a:	f7fc fa19 	bl	8000290 <__aeabi_uldivmod>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4613      	mov	r3, r2
 8003e64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e66:	e053      	b.n	8003f10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e68:	4b35      	ldr	r3, [pc, #212]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	2200      	movs	r2, #0
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	617a      	str	r2, [r7, #20]
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e7a:	f04f 0b00 	mov.w	fp, #0
 8003e7e:	4652      	mov	r2, sl
 8003e80:	465b      	mov	r3, fp
 8003e82:	f04f 0000 	mov.w	r0, #0
 8003e86:	f04f 0100 	mov.w	r1, #0
 8003e8a:	0159      	lsls	r1, r3, #5
 8003e8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e90:	0150      	lsls	r0, r2, #5
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	ebb2 080a 	subs.w	r8, r2, sl
 8003e9a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003eaa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003eae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003eb2:	ebb2 0408 	subs.w	r4, r2, r8
 8003eb6:	eb63 0509 	sbc.w	r5, r3, r9
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	00eb      	lsls	r3, r5, #3
 8003ec4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ec8:	00e2      	lsls	r2, r4, #3
 8003eca:	4614      	mov	r4, r2
 8003ecc:	461d      	mov	r5, r3
 8003ece:	eb14 030a 	adds.w	r3, r4, sl
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	eb45 030b 	adc.w	r3, r5, fp
 8003ed8:	607b      	str	r3, [r7, #4]
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	028b      	lsls	r3, r1, #10
 8003eea:	4621      	mov	r1, r4
 8003eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	028a      	lsls	r2, r1, #10
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003efa:	2200      	movs	r2, #0
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	60fa      	str	r2, [r7, #12]
 8003f00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f04:	f7fc f9c4 	bl	8000290 <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f10:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	0c1b      	lsrs	r3, r3, #16
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f2a:	e002      	b.n	8003f32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f2c:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3740      	adds	r7, #64	; 0x40
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800
 8003f44:	00f42400 	.word	0x00f42400
 8003f48:	017d7840 	.word	0x017d7840

08003f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f50:	4b03      	ldr	r3, [pc, #12]	; (8003f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f52:	681b      	ldr	r3, [r3, #0]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	2000000c 	.word	0x2000000c

08003f64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e041      	b.n	8003ffa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fc ff90 	bl	8000eb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3304      	adds	r3, #4
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f000 fa10 	bl	80043c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3708      	adds	r7, #8
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}

08004002 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b082      	sub	sp, #8
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e041      	b.n	8004098 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f839 	bl	80040a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2202      	movs	r2, #2
 8004032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3304      	adds	r3, #4
 800403e:	4619      	mov	r1, r3
 8004040:	4610      	mov	r0, r2
 8004042:	f000 f9c1 	bl	80043c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040c0:	2300      	movs	r3, #0
 80040c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e0ae      	b.n	8004230 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b0c      	cmp	r3, #12
 80040de:	f200 809f 	bhi.w	8004220 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040e2:	a201      	add	r2, pc, #4	; (adr r2, 80040e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e8:	0800411d 	.word	0x0800411d
 80040ec:	08004221 	.word	0x08004221
 80040f0:	08004221 	.word	0x08004221
 80040f4:	08004221 	.word	0x08004221
 80040f8:	0800415d 	.word	0x0800415d
 80040fc:	08004221 	.word	0x08004221
 8004100:	08004221 	.word	0x08004221
 8004104:	08004221 	.word	0x08004221
 8004108:	0800419f 	.word	0x0800419f
 800410c:	08004221 	.word	0x08004221
 8004110:	08004221 	.word	0x08004221
 8004114:	08004221 	.word	0x08004221
 8004118:	080041df 	.word	0x080041df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68b9      	ldr	r1, [r7, #8]
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f9d0 	bl	80044c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	699a      	ldr	r2, [r3, #24]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0208 	orr.w	r2, r2, #8
 8004136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699a      	ldr	r2, [r3, #24]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f022 0204 	bic.w	r2, r2, #4
 8004146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6999      	ldr	r1, [r3, #24]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	619a      	str	r2, [r3, #24]
      break;
 800415a:	e064      	b.n	8004226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68b9      	ldr	r1, [r7, #8]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 fa16 	bl	8004594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699a      	ldr	r2, [r3, #24]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6999      	ldr	r1, [r3, #24]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	021a      	lsls	r2, r3, #8
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	619a      	str	r2, [r3, #24]
      break;
 800419c:	e043      	b.n	8004226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68b9      	ldr	r1, [r7, #8]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fa61 	bl	800466c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	69da      	ldr	r2, [r3, #28]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f042 0208 	orr.w	r2, r2, #8
 80041b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	69da      	ldr	r2, [r3, #28]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0204 	bic.w	r2, r2, #4
 80041c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69d9      	ldr	r1, [r3, #28]
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	61da      	str	r2, [r3, #28]
      break;
 80041dc:	e023      	b.n	8004226 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 faab 	bl	8004740 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69da      	ldr	r2, [r3, #28]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69da      	ldr	r2, [r3, #28]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004208:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69d9      	ldr	r1, [r3, #28]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	021a      	lsls	r2, r3, #8
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	61da      	str	r2, [r3, #28]
      break;
 800421e:	e002      	b.n	8004226 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	75fb      	strb	r3, [r7, #23]
      break;
 8004224:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800422e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_TIM_ConfigClockSource+0x1c>
 8004250:	2302      	movs	r3, #2
 8004252:	e0b4      	b.n	80043be <HAL_TIM_ConfigClockSource+0x186>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800427a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428c:	d03e      	beq.n	800430c <HAL_TIM_ConfigClockSource+0xd4>
 800428e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004292:	f200 8087 	bhi.w	80043a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429a:	f000 8086 	beq.w	80043aa <HAL_TIM_ConfigClockSource+0x172>
 800429e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042a2:	d87f      	bhi.n	80043a4 <HAL_TIM_ConfigClockSource+0x16c>
 80042a4:	2b70      	cmp	r3, #112	; 0x70
 80042a6:	d01a      	beq.n	80042de <HAL_TIM_ConfigClockSource+0xa6>
 80042a8:	2b70      	cmp	r3, #112	; 0x70
 80042aa:	d87b      	bhi.n	80043a4 <HAL_TIM_ConfigClockSource+0x16c>
 80042ac:	2b60      	cmp	r3, #96	; 0x60
 80042ae:	d050      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x11a>
 80042b0:	2b60      	cmp	r3, #96	; 0x60
 80042b2:	d877      	bhi.n	80043a4 <HAL_TIM_ConfigClockSource+0x16c>
 80042b4:	2b50      	cmp	r3, #80	; 0x50
 80042b6:	d03c      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0xfa>
 80042b8:	2b50      	cmp	r3, #80	; 0x50
 80042ba:	d873      	bhi.n	80043a4 <HAL_TIM_ConfigClockSource+0x16c>
 80042bc:	2b40      	cmp	r3, #64	; 0x40
 80042be:	d058      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0x13a>
 80042c0:	2b40      	cmp	r3, #64	; 0x40
 80042c2:	d86f      	bhi.n	80043a4 <HAL_TIM_ConfigClockSource+0x16c>
 80042c4:	2b30      	cmp	r3, #48	; 0x30
 80042c6:	d064      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x15a>
 80042c8:	2b30      	cmp	r3, #48	; 0x30
 80042ca:	d86b      	bhi.n	80043a4 <HAL_TIM_ConfigClockSource+0x16c>
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d060      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x15a>
 80042d0:	2b20      	cmp	r3, #32
 80042d2:	d867      	bhi.n	80043a4 <HAL_TIM_ConfigClockSource+0x16c>
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d05c      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x15a>
 80042d8:	2b10      	cmp	r3, #16
 80042da:	d05a      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x15a>
 80042dc:	e062      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	6899      	ldr	r1, [r3, #8]
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f000 faf1 	bl	80048d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004300:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	609a      	str	r2, [r3, #8]
      break;
 800430a:	e04f      	b.n	80043ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	6899      	ldr	r1, [r3, #8]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f000 fada 	bl	80048d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800432e:	609a      	str	r2, [r3, #8]
      break;
 8004330:	e03c      	b.n	80043ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6859      	ldr	r1, [r3, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	461a      	mov	r2, r3
 8004340:	f000 fa4e 	bl	80047e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2150      	movs	r1, #80	; 0x50
 800434a:	4618      	mov	r0, r3
 800434c:	f000 faa7 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 8004350:	e02c      	b.n	80043ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6859      	ldr	r1, [r3, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	461a      	mov	r2, r3
 8004360:	f000 fa6d 	bl	800483e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2160      	movs	r1, #96	; 0x60
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fa97 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 8004370:	e01c      	b.n	80043ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	6859      	ldr	r1, [r3, #4]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	461a      	mov	r2, r3
 8004380:	f000 fa2e 	bl	80047e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2140      	movs	r1, #64	; 0x40
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fa87 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 8004390:	e00c      	b.n	80043ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4619      	mov	r1, r3
 800439c:	4610      	mov	r0, r2
 800439e:	f000 fa7e 	bl	800489e <TIM_ITRx_SetConfig>
      break;
 80043a2:	e003      	b.n	80043ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	73fb      	strb	r3, [r7, #15]
      break;
 80043a8:	e000      	b.n	80043ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a34      	ldr	r2, [pc, #208]	; (80044ac <TIM_Base_SetConfig+0xe4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d00f      	beq.n	8004400 <TIM_Base_SetConfig+0x38>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e6:	d00b      	beq.n	8004400 <TIM_Base_SetConfig+0x38>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a31      	ldr	r2, [pc, #196]	; (80044b0 <TIM_Base_SetConfig+0xe8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d007      	beq.n	8004400 <TIM_Base_SetConfig+0x38>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a30      	ldr	r2, [pc, #192]	; (80044b4 <TIM_Base_SetConfig+0xec>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <TIM_Base_SetConfig+0x38>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a2f      	ldr	r2, [pc, #188]	; (80044b8 <TIM_Base_SetConfig+0xf0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d108      	bne.n	8004412 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a25      	ldr	r2, [pc, #148]	; (80044ac <TIM_Base_SetConfig+0xe4>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01b      	beq.n	8004452 <TIM_Base_SetConfig+0x8a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004420:	d017      	beq.n	8004452 <TIM_Base_SetConfig+0x8a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a22      	ldr	r2, [pc, #136]	; (80044b0 <TIM_Base_SetConfig+0xe8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <TIM_Base_SetConfig+0x8a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a21      	ldr	r2, [pc, #132]	; (80044b4 <TIM_Base_SetConfig+0xec>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00f      	beq.n	8004452 <TIM_Base_SetConfig+0x8a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a20      	ldr	r2, [pc, #128]	; (80044b8 <TIM_Base_SetConfig+0xf0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d00b      	beq.n	8004452 <TIM_Base_SetConfig+0x8a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a1f      	ldr	r2, [pc, #124]	; (80044bc <TIM_Base_SetConfig+0xf4>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d007      	beq.n	8004452 <TIM_Base_SetConfig+0x8a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a1e      	ldr	r2, [pc, #120]	; (80044c0 <TIM_Base_SetConfig+0xf8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d003      	beq.n	8004452 <TIM_Base_SetConfig+0x8a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <TIM_Base_SetConfig+0xfc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d108      	bne.n	8004464 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4313      	orrs	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689a      	ldr	r2, [r3, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a08      	ldr	r2, [pc, #32]	; (80044ac <TIM_Base_SetConfig+0xe4>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d103      	bne.n	8004498 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	615a      	str	r2, [r3, #20]
}
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40010000 	.word	0x40010000
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40000800 	.word	0x40000800
 80044b8:	40000c00 	.word	0x40000c00
 80044bc:	40014000 	.word	0x40014000
 80044c0:	40014400 	.word	0x40014400
 80044c4:	40014800 	.word	0x40014800

080044c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f023 0201 	bic.w	r2, r3, #1
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f023 0302 	bic.w	r3, r3, #2
 8004510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4a1c      	ldr	r2, [pc, #112]	; (8004590 <TIM_OC1_SetConfig+0xc8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d10c      	bne.n	800453e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	f023 0308 	bic.w	r3, r3, #8
 800452a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f023 0304 	bic.w	r3, r3, #4
 800453c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a13      	ldr	r2, [pc, #76]	; (8004590 <TIM_OC1_SetConfig+0xc8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d111      	bne.n	800456a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800454c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	621a      	str	r2, [r3, #32]
}
 8004584:	bf00      	nop
 8004586:	371c      	adds	r7, #28
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	40010000 	.word	0x40010000

08004594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f023 0210 	bic.w	r2, r3, #16
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f023 0320 	bic.w	r3, r3, #32
 80045de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a1e      	ldr	r2, [pc, #120]	; (8004668 <TIM_OC2_SetConfig+0xd4>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d10d      	bne.n	8004610 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	697a      	ldr	r2, [r7, #20]
 8004604:	4313      	orrs	r3, r2
 8004606:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800460e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a15      	ldr	r2, [pc, #84]	; (8004668 <TIM_OC2_SetConfig+0xd4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d113      	bne.n	8004640 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800461e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004626:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	4313      	orrs	r3, r2
 8004632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	621a      	str	r2, [r3, #32]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40010000 	.word	0x40010000

0800466c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0303 	bic.w	r3, r3, #3
 80046a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	021b      	lsls	r3, r3, #8
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	4313      	orrs	r3, r2
 80046c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a1d      	ldr	r2, [pc, #116]	; (800473c <TIM_OC3_SetConfig+0xd0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10d      	bne.n	80046e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	021b      	lsls	r3, r3, #8
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	4313      	orrs	r3, r2
 80046dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a14      	ldr	r2, [pc, #80]	; (800473c <TIM_OC3_SetConfig+0xd0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d113      	bne.n	8004716 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	621a      	str	r2, [r3, #32]
}
 8004730:	bf00      	nop
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	40010000 	.word	0x40010000

08004740 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800476e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	4313      	orrs	r3, r2
 8004782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800478a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	031b      	lsls	r3, r3, #12
 8004792:	693a      	ldr	r2, [r7, #16]
 8004794:	4313      	orrs	r3, r2
 8004796:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a10      	ldr	r2, [pc, #64]	; (80047dc <TIM_OC4_SetConfig+0x9c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d109      	bne.n	80047b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	019b      	lsls	r3, r3, #6
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	621a      	str	r2, [r3, #32]
}
 80047ce:	bf00      	nop
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40010000 	.word	0x40010000

080047e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 0201 	bic.w	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800480a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f023 030a 	bic.w	r3, r3, #10
 800481c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4313      	orrs	r3, r2
 8004824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800483e:	b480      	push	{r7}
 8004840:	b087      	sub	sp, #28
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f023 0210 	bic.w	r2, r3, #16
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004868:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	031b      	lsls	r3, r3, #12
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800487a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f043 0307 	orr.w	r3, r3, #7
 80048c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	609a      	str	r2, [r3, #8]
}
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
 80048e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	021a      	lsls	r2, r3, #8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	609a      	str	r2, [r3, #8]
}
 8004908:	bf00      	nop
 800490a:	371c      	adds	r7, #28
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004928:	2302      	movs	r3, #2
 800492a:	e050      	b.n	80049ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004952:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	4313      	orrs	r3, r2
 800495c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a1c      	ldr	r2, [pc, #112]	; (80049dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d018      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004978:	d013      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a18      	ldr	r2, [pc, #96]	; (80049e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d00e      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a16      	ldr	r2, [pc, #88]	; (80049e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d009      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a15      	ldr	r2, [pc, #84]	; (80049e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d004      	beq.n	80049a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a13      	ldr	r2, [pc, #76]	; (80049ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d10c      	bne.n	80049bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40000400 	.word	0x40000400
 80049e4:	40000800 	.word	0x40000800
 80049e8:	40000c00 	.word	0x40000c00
 80049ec:	40014000 	.word	0x40014000

080049f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049f0:	b084      	sub	sp, #16
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	f107 001c 	add.w	r0, r7, #28
 80049fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d122      	bne.n	8004a4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d105      	bne.n	8004a42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f001 fbee 	bl	8006224 <USB_CoreReset>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	73fb      	strb	r3, [r7, #15]
 8004a4c:	e01a      	b.n	8004a84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f001 fbe2 	bl	8006224 <USB_CoreReset>
 8004a60:	4603      	mov	r3, r0
 8004a62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
 8004a76:	e005      	b.n	8004a84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d10b      	bne.n	8004aa2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	f043 0206 	orr.w	r2, r3, #6
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f043 0220 	orr.w	r2, r3, #32
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aae:	b004      	add	sp, #16
 8004ab0:	4770      	bx	lr
	...

08004ab4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ac2:	79fb      	ldrb	r3, [r7, #7]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d165      	bne.n	8004b94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4a41      	ldr	r2, [pc, #260]	; (8004bd0 <USB_SetTurnaroundTime+0x11c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d906      	bls.n	8004ade <USB_SetTurnaroundTime+0x2a>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4a40      	ldr	r2, [pc, #256]	; (8004bd4 <USB_SetTurnaroundTime+0x120>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d202      	bcs.n	8004ade <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ad8:	230f      	movs	r3, #15
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e062      	b.n	8004ba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4a3c      	ldr	r2, [pc, #240]	; (8004bd4 <USB_SetTurnaroundTime+0x120>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d306      	bcc.n	8004af4 <USB_SetTurnaroundTime+0x40>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4a3b      	ldr	r2, [pc, #236]	; (8004bd8 <USB_SetTurnaroundTime+0x124>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d202      	bcs.n	8004af4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004aee:	230e      	movs	r3, #14
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	e057      	b.n	8004ba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4a38      	ldr	r2, [pc, #224]	; (8004bd8 <USB_SetTurnaroundTime+0x124>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d306      	bcc.n	8004b0a <USB_SetTurnaroundTime+0x56>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4a37      	ldr	r2, [pc, #220]	; (8004bdc <USB_SetTurnaroundTime+0x128>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d202      	bcs.n	8004b0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b04:	230d      	movs	r3, #13
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e04c      	b.n	8004ba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4a33      	ldr	r2, [pc, #204]	; (8004bdc <USB_SetTurnaroundTime+0x128>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d306      	bcc.n	8004b20 <USB_SetTurnaroundTime+0x6c>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4a32      	ldr	r2, [pc, #200]	; (8004be0 <USB_SetTurnaroundTime+0x12c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d802      	bhi.n	8004b20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b1a:	230c      	movs	r3, #12
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	e041      	b.n	8004ba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4a2f      	ldr	r2, [pc, #188]	; (8004be0 <USB_SetTurnaroundTime+0x12c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d906      	bls.n	8004b36 <USB_SetTurnaroundTime+0x82>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4a2e      	ldr	r2, [pc, #184]	; (8004be4 <USB_SetTurnaroundTime+0x130>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d802      	bhi.n	8004b36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b30:	230b      	movs	r3, #11
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e036      	b.n	8004ba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	4a2a      	ldr	r2, [pc, #168]	; (8004be4 <USB_SetTurnaroundTime+0x130>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d906      	bls.n	8004b4c <USB_SetTurnaroundTime+0x98>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	4a29      	ldr	r2, [pc, #164]	; (8004be8 <USB_SetTurnaroundTime+0x134>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d802      	bhi.n	8004b4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b46:	230a      	movs	r3, #10
 8004b48:	617b      	str	r3, [r7, #20]
 8004b4a:	e02b      	b.n	8004ba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4a26      	ldr	r2, [pc, #152]	; (8004be8 <USB_SetTurnaroundTime+0x134>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d906      	bls.n	8004b62 <USB_SetTurnaroundTime+0xae>
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	4a25      	ldr	r2, [pc, #148]	; (8004bec <USB_SetTurnaroundTime+0x138>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d202      	bcs.n	8004b62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b5c:	2309      	movs	r3, #9
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	e020      	b.n	8004ba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	4a21      	ldr	r2, [pc, #132]	; (8004bec <USB_SetTurnaroundTime+0x138>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d306      	bcc.n	8004b78 <USB_SetTurnaroundTime+0xc4>
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4a20      	ldr	r2, [pc, #128]	; (8004bf0 <USB_SetTurnaroundTime+0x13c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d802      	bhi.n	8004b78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b72:	2308      	movs	r3, #8
 8004b74:	617b      	str	r3, [r7, #20]
 8004b76:	e015      	b.n	8004ba4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	; (8004bf0 <USB_SetTurnaroundTime+0x13c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d906      	bls.n	8004b8e <USB_SetTurnaroundTime+0xda>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4a1c      	ldr	r2, [pc, #112]	; (8004bf4 <USB_SetTurnaroundTime+0x140>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d202      	bcs.n	8004b8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b88:	2307      	movs	r3, #7
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	e00a      	b.n	8004ba4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b8e:	2306      	movs	r3, #6
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	e007      	b.n	8004ba4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b94:	79fb      	ldrb	r3, [r7, #7]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d102      	bne.n	8004ba0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b9a:	2309      	movs	r3, #9
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	e001      	b.n	8004ba4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004ba0:	2309      	movs	r3, #9
 8004ba2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	68da      	ldr	r2, [r3, #12]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	029b      	lsls	r3, r3, #10
 8004bb8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	00d8acbf 	.word	0x00d8acbf
 8004bd4:	00e4e1c0 	.word	0x00e4e1c0
 8004bd8:	00f42400 	.word	0x00f42400
 8004bdc:	01067380 	.word	0x01067380
 8004be0:	011a499f 	.word	0x011a499f
 8004be4:	01312cff 	.word	0x01312cff
 8004be8:	014ca43f 	.word	0x014ca43f
 8004bec:	016e3600 	.word	0x016e3600
 8004bf0:	01a6ab1f 	.word	0x01a6ab1f
 8004bf4:	01e84800 	.word	0x01e84800

08004bf8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f043 0201 	orr.w	r2, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b083      	sub	sp, #12
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f023 0201 	bic.w	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	460b      	mov	r3, r1
 8004c46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d115      	bne.n	8004c8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	f7fc fa94 	bl	8001198 <HAL_Delay>
      ms++;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3301      	adds	r3, #1
 8004c74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f001 fa45 	bl	8006106 <USB_GetMode>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d01e      	beq.n	8004cc0 <USB_SetCurrentMode+0x84>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2b31      	cmp	r3, #49	; 0x31
 8004c86:	d9f0      	bls.n	8004c6a <USB_SetCurrentMode+0x2e>
 8004c88:	e01a      	b.n	8004cc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c8a:	78fb      	ldrb	r3, [r7, #3]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d115      	bne.n	8004cbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c9c:	2001      	movs	r0, #1
 8004c9e:	f7fc fa7b 	bl	8001198 <HAL_Delay>
      ms++;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f001 fa2c 	bl	8006106 <USB_GetMode>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d005      	beq.n	8004cc0 <USB_SetCurrentMode+0x84>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b31      	cmp	r3, #49	; 0x31
 8004cb8:	d9f0      	bls.n	8004c9c <USB_SetCurrentMode+0x60>
 8004cba:	e001      	b.n	8004cc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e005      	b.n	8004ccc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b32      	cmp	r3, #50	; 0x32
 8004cc4:	d101      	bne.n	8004cca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e000      	b.n	8004ccc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b086      	sub	sp, #24
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ce2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cee:	2300      	movs	r3, #0
 8004cf0:	613b      	str	r3, [r7, #16]
 8004cf2:	e009      	b.n	8004d08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	3340      	adds	r3, #64	; 0x40
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	2200      	movs	r2, #0
 8004d00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	3301      	adds	r3, #1
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2b0e      	cmp	r3, #14
 8004d0c:	d9f2      	bls.n	8004cf4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d11c      	bne.n	8004d4e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d22:	f043 0302 	orr.w	r3, r3, #2
 8004d26:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	639a      	str	r2, [r3, #56]	; 0x38
 8004d4c:	e00b      	b.n	8004d66 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	2300      	movs	r3, #0
 8004d70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d78:	4619      	mov	r1, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d80:	461a      	mov	r2, r3
 8004d82:	680b      	ldr	r3, [r1, #0]
 8004d84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d10c      	bne.n	8004da6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d104      	bne.n	8004d9c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d92:	2100      	movs	r1, #0
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f965 	bl	8005064 <USB_SetDevSpeed>
 8004d9a:	e008      	b.n	8004dae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f960 	bl	8005064 <USB_SetDevSpeed>
 8004da4:	e003      	b.n	8004dae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004da6:	2103      	movs	r1, #3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f95b 	bl	8005064 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004dae:	2110      	movs	r1, #16
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 f8f3 	bl	8004f9c <USB_FlushTxFifo>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f91f 	bl	8005004 <USB_FlushRxFifo>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	2300      	movs	r3, #0
 8004dda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de2:	461a      	mov	r2, r3
 8004de4:	2300      	movs	r3, #0
 8004de6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dee:	461a      	mov	r2, r3
 8004df0:	2300      	movs	r3, #0
 8004df2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004df4:	2300      	movs	r3, #0
 8004df6:	613b      	str	r3, [r7, #16]
 8004df8:	e043      	b.n	8004e82 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e10:	d118      	bne.n	8004e44 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10a      	bne.n	8004e2e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	015a      	lsls	r2, r3, #5
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	4413      	add	r3, r2
 8004e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e24:	461a      	mov	r2, r3
 8004e26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	e013      	b.n	8004e56 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	e008      	b.n	8004e56 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e50:	461a      	mov	r2, r3
 8004e52:	2300      	movs	r3, #0
 8004e54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e62:	461a      	mov	r2, r3
 8004e64:	2300      	movs	r3, #0
 8004e66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	461a      	mov	r2, r3
 8004e76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	3301      	adds	r3, #1
 8004e80:	613b      	str	r3, [r7, #16]
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d3b7      	bcc.n	8004dfa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	e043      	b.n	8004f18 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	015a      	lsls	r2, r3, #5
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4413      	add	r3, r2
 8004e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ea2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ea6:	d118      	bne.n	8004eda <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e013      	b.n	8004eec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ed6:	6013      	str	r3, [r2, #0]
 8004ed8:	e008      	b.n	8004eec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	2300      	movs	r3, #0
 8004eea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef8:	461a      	mov	r2, r3
 8004efa:	2300      	movs	r3, #0
 8004efc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	3301      	adds	r3, #1
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d3b7      	bcc.n	8004e90 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d105      	bne.n	8004f54 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f043 0210 	orr.w	r2, r3, #16
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699a      	ldr	r2, [r3, #24]
 8004f58:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <USB_DevInit+0x2c4>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f043 0208 	orr.w	r2, r3, #8
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d107      	bne.n	8004f88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f80:	f043 0304 	orr.w	r3, r3, #4
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f94:	b004      	add	sp, #16
 8004f96:	4770      	bx	lr
 8004f98:	803c3800 	.word	0x803c3800

08004f9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3301      	adds	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4a13      	ldr	r2, [pc, #76]	; (8005000 <USB_FlushTxFifo+0x64>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d901      	bls.n	8004fbc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e01b      	b.n	8004ff4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	daf2      	bge.n	8004faa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	019b      	lsls	r3, r3, #6
 8004fcc:	f043 0220 	orr.w	r2, r3, #32
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	3301      	adds	r3, #1
 8004fd8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4a08      	ldr	r2, [pc, #32]	; (8005000 <USB_FlushTxFifo+0x64>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e006      	b.n	8004ff4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0320 	and.w	r3, r3, #32
 8004fee:	2b20      	cmp	r3, #32
 8004ff0:	d0f0      	beq.n	8004fd4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3714      	adds	r7, #20
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	00030d40 	.word	0x00030d40

08005004 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3301      	adds	r3, #1
 8005014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	4a11      	ldr	r2, [pc, #68]	; (8005060 <USB_FlushRxFifo+0x5c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d901      	bls.n	8005022 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e018      	b.n	8005054 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	daf2      	bge.n	8005010 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2210      	movs	r2, #16
 8005032:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3301      	adds	r3, #1
 8005038:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4a08      	ldr	r2, [pc, #32]	; (8005060 <USB_FlushRxFifo+0x5c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d901      	bls.n	8005046 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e006      	b.n	8005054 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f003 0310 	and.w	r3, r3, #16
 800504e:	2b10      	cmp	r3, #16
 8005050:	d0f0      	beq.n	8005034 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	00030d40 	.word	0x00030d40

08005064 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	68f9      	ldr	r1, [r7, #12]
 8005080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005084:	4313      	orrs	r3, r2
 8005086:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005096:	b480      	push	{r7}
 8005098:	b087      	sub	sp, #28
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 0306 	and.w	r3, r3, #6
 80050ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d102      	bne.n	80050bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80050b6:	2300      	movs	r3, #0
 80050b8:	75fb      	strb	r3, [r7, #23]
 80050ba:	e00a      	b.n	80050d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d002      	beq.n	80050c8 <USB_GetDevSpeed+0x32>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b06      	cmp	r3, #6
 80050c6:	d102      	bne.n	80050ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80050c8:	2302      	movs	r3, #2
 80050ca:	75fb      	strb	r3, [r7, #23]
 80050cc:	e001      	b.n	80050d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80050ce:	230f      	movs	r3, #15
 80050d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	371c      	adds	r7, #28
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	785b      	ldrb	r3, [r3, #1]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d13a      	bne.n	8005172 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005102:	69da      	ldr	r2, [r3, #28]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	2101      	movs	r1, #1
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	b29b      	uxth	r3, r3
 8005114:	68f9      	ldr	r1, [r7, #12]
 8005116:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800511a:	4313      	orrs	r3, r2
 800511c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	015a      	lsls	r2, r3, #5
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4413      	add	r3, r2
 8005126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d155      	bne.n	80051e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	791b      	ldrb	r3, [r3, #4]
 800514e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005150:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	059b      	lsls	r3, r3, #22
 8005156:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005158:	4313      	orrs	r3, r2
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800516a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	e036      	b.n	80051e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005178:	69da      	ldr	r2, [r3, #28]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	2101      	movs	r1, #1
 8005184:	fa01 f303 	lsl.w	r3, r1, r3
 8005188:	041b      	lsls	r3, r3, #16
 800518a:	68f9      	ldr	r1, [r7, #12]
 800518c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005190:	4313      	orrs	r3, r2
 8005192:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d11a      	bne.n	80051e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	791b      	ldrb	r3, [r3, #4]
 80051c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80051c6:	430b      	orrs	r3, r1
 80051c8:	4313      	orrs	r3, r2
 80051ca:	68ba      	ldr	r2, [r7, #8]
 80051cc:	0151      	lsls	r1, r2, #5
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	440a      	add	r2, r1
 80051d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3714      	adds	r7, #20
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
	...

080051f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	785b      	ldrb	r3, [r3, #1]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d161      	bne.n	80052d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800521e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005222:	d11f      	bne.n	8005264 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	440a      	add	r2, r1
 800523a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005242:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	440a      	add	r2, r1
 800525a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005262:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800526a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	2101      	movs	r1, #1
 8005276:	fa01 f303 	lsl.w	r3, r1, r3
 800527a:	b29b      	uxth	r3, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	68f9      	ldr	r1, [r7, #12]
 8005280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005284:	4013      	ands	r3, r2
 8005286:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	f003 030f 	and.w	r3, r3, #15
 8005298:	2101      	movs	r1, #1
 800529a:	fa01 f303 	lsl.w	r3, r1, r3
 800529e:	b29b      	uxth	r3, r3
 80052a0:	43db      	mvns	r3, r3
 80052a2:	68f9      	ldr	r1, [r7, #12]
 80052a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052a8:	4013      	ands	r3, r2
 80052aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	0159      	lsls	r1, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	440b      	add	r3, r1
 80052c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c6:	4619      	mov	r1, r3
 80052c8:	4b35      	ldr	r3, [pc, #212]	; (80053a0 <USB_DeactivateEndpoint+0x1b0>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]
 80052ce:	e060      	b.n	8005392 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052e6:	d11f      	bne.n	8005328 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005302:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005306:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	0151      	lsls	r1, r2, #5
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	440a      	add	r2, r1
 800531e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005322:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005326:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800532e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	f003 030f 	and.w	r3, r3, #15
 8005338:	2101      	movs	r1, #1
 800533a:	fa01 f303 	lsl.w	r3, r1, r3
 800533e:	041b      	lsls	r3, r3, #16
 8005340:	43db      	mvns	r3, r3
 8005342:	68f9      	ldr	r1, [r7, #12]
 8005344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005348:	4013      	ands	r3, r2
 800534a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	69da      	ldr	r2, [r3, #28]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	2101      	movs	r1, #1
 800535e:	fa01 f303 	lsl.w	r3, r1, r3
 8005362:	041b      	lsls	r3, r3, #16
 8005364:	43db      	mvns	r3, r3
 8005366:	68f9      	ldr	r1, [r7, #12]
 8005368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800536c:	4013      	ands	r3, r2
 800536e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	015a      	lsls	r2, r3, #5
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4413      	add	r3, r2
 8005378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	0159      	lsls	r1, r3, #5
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	440b      	add	r3, r1
 8005386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538a:	4619      	mov	r1, r3
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <USB_DeactivateEndpoint+0x1b4>)
 800538e:	4013      	ands	r3, r2
 8005390:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	ec337800 	.word	0xec337800
 80053a4:	eff37800 	.word	0xeff37800

080053a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	4613      	mov	r3, r2
 80053b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	785b      	ldrb	r3, [r3, #1]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	f040 815c 	bne.w	8005682 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d132      	bne.n	8005438 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	0151      	lsls	r1, r2, #5
 80053e4:	69fa      	ldr	r2, [r7, #28]
 80053e6:	440a      	add	r2, r1
 80053e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	015a      	lsls	r2, r3, #5
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	4413      	add	r3, r2
 80053fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	0151      	lsls	r1, r2, #5
 8005408:	69fa      	ldr	r2, [r7, #28]
 800540a:	440a      	add	r2, r1
 800540c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005410:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005414:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	015a      	lsls	r2, r3, #5
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	4413      	add	r3, r2
 800541e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	69ba      	ldr	r2, [r7, #24]
 8005426:	0151      	lsls	r1, r2, #5
 8005428:	69fa      	ldr	r2, [r7, #28]
 800542a:	440a      	add	r2, r1
 800542c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005430:	0cdb      	lsrs	r3, r3, #19
 8005432:	04db      	lsls	r3, r3, #19
 8005434:	6113      	str	r3, [r2, #16]
 8005436:	e074      	b.n	8005522 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	0151      	lsls	r1, r2, #5
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	440a      	add	r2, r1
 800544e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005452:	0cdb      	lsrs	r3, r3, #19
 8005454:	04db      	lsls	r3, r3, #19
 8005456:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	0151      	lsls	r1, r2, #5
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	440a      	add	r2, r1
 800546e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005472:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005476:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800547a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	015a      	lsls	r2, r3, #5
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	4413      	add	r3, r2
 8005484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005488:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	6999      	ldr	r1, [r3, #24]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	440b      	add	r3, r1
 8005494:	1e59      	subs	r1, r3, #1
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	fbb1 f3f3 	udiv	r3, r1, r3
 800549e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80054a0:	4b9d      	ldr	r3, [pc, #628]	; (8005718 <USB_EPStartXfer+0x370>)
 80054a2:	400b      	ands	r3, r1
 80054a4:	69b9      	ldr	r1, [r7, #24]
 80054a6:	0148      	lsls	r0, r1, #5
 80054a8:	69f9      	ldr	r1, [r7, #28]
 80054aa:	4401      	add	r1, r0
 80054ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054b0:	4313      	orrs	r3, r2
 80054b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	015a      	lsls	r2, r3, #5
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ca:	69b9      	ldr	r1, [r7, #24]
 80054cc:	0148      	lsls	r0, r1, #5
 80054ce:	69f9      	ldr	r1, [r7, #28]
 80054d0:	4401      	add	r1, r0
 80054d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054d6:	4313      	orrs	r3, r2
 80054d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	791b      	ldrb	r3, [r3, #4]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d11f      	bne.n	8005522 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005500:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	0151      	lsls	r1, r2, #5
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	440a      	add	r2, r1
 8005518:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005520:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005522:	79fb      	ldrb	r3, [r7, #7]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d14b      	bne.n	80055c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d009      	beq.n	8005544 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	461a      	mov	r2, r3
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	791b      	ldrb	r3, [r3, #4]
 8005548:	2b01      	cmp	r3, #1
 800554a:	d128      	bne.n	800559e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005558:	2b00      	cmp	r3, #0
 800555a:	d110      	bne.n	800557e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69ba      	ldr	r2, [r7, #24]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	440a      	add	r2, r1
 8005572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005576:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800557a:	6013      	str	r3, [r2, #0]
 800557c:	e00f      	b.n	800559e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	0151      	lsls	r1, r2, #5
 8005590:	69fa      	ldr	r2, [r7, #28]
 8005592:	440a      	add	r2, r1
 8005594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	0151      	lsls	r1, r2, #5
 80055b0:	69fa      	ldr	r2, [r7, #28]
 80055b2:	440a      	add	r2, r1
 80055b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	e133      	b.n	8005828 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	0151      	lsls	r1, r2, #5
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	440a      	add	r2, r1
 80055d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	791b      	ldrb	r3, [r3, #4]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d015      	beq.n	8005614 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 811b 	beq.w	8005828 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	2101      	movs	r1, #1
 8005604:	fa01 f303 	lsl.w	r3, r1, r3
 8005608:	69f9      	ldr	r1, [r7, #28]
 800560a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800560e:	4313      	orrs	r3, r2
 8005610:	634b      	str	r3, [r1, #52]	; 0x34
 8005612:	e109      	b.n	8005828 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005620:	2b00      	cmp	r3, #0
 8005622:	d110      	bne.n	8005646 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	015a      	lsls	r2, r3, #5
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	4413      	add	r3, r2
 800562c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69ba      	ldr	r2, [r7, #24]
 8005634:	0151      	lsls	r1, r2, #5
 8005636:	69fa      	ldr	r2, [r7, #28]
 8005638:	440a      	add	r2, r1
 800563a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	e00f      	b.n	8005666 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	69fa      	ldr	r2, [r7, #28]
 800565a:	440a      	add	r2, r1
 800565c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005664:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	6919      	ldr	r1, [r3, #16]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	781a      	ldrb	r2, [r3, #0]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	b298      	uxth	r0, r3
 8005674:	79fb      	ldrb	r3, [r7, #7]
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	4603      	mov	r3, r0
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 fade 	bl	8005c3c <USB_WritePacket>
 8005680:	e0d2      	b.n	8005828 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800569c:	0cdb      	lsrs	r3, r3, #19
 800569e:	04db      	lsls	r3, r3, #19
 80056a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	015a      	lsls	r2, r3, #5
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	4413      	add	r3, r2
 80056aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	0151      	lsls	r1, r2, #5
 80056b4:	69fa      	ldr	r2, [r7, #28]
 80056b6:	440a      	add	r2, r1
 80056b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d126      	bne.n	800571c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056da:	691a      	ldr	r2, [r3, #16]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056e4:	69b9      	ldr	r1, [r7, #24]
 80056e6:	0148      	lsls	r0, r1, #5
 80056e8:	69f9      	ldr	r1, [r7, #28]
 80056ea:	4401      	add	r1, r0
 80056ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056f0:	4313      	orrs	r3, r2
 80056f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	0151      	lsls	r1, r2, #5
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	440a      	add	r2, r1
 800570a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800570e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005712:	6113      	str	r3, [r2, #16]
 8005714:	e03a      	b.n	800578c <USB_EPStartXfer+0x3e4>
 8005716:	bf00      	nop
 8005718:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	699a      	ldr	r2, [r3, #24]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	4413      	add	r3, r2
 8005726:	1e5a      	subs	r2, r3, #1
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005730:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	8afa      	ldrh	r2, [r7, #22]
 8005738:	fb03 f202 	mul.w	r2, r3, r2
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	4413      	add	r3, r2
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	8afb      	ldrh	r3, [r7, #22]
 8005750:	04d9      	lsls	r1, r3, #19
 8005752:	4b38      	ldr	r3, [pc, #224]	; (8005834 <USB_EPStartXfer+0x48c>)
 8005754:	400b      	ands	r3, r1
 8005756:	69b9      	ldr	r1, [r7, #24]
 8005758:	0148      	lsls	r0, r1, #5
 800575a:	69f9      	ldr	r1, [r7, #28]
 800575c:	4401      	add	r1, r0
 800575e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005762:	4313      	orrs	r3, r2
 8005764:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	015a      	lsls	r2, r3, #5
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	4413      	add	r3, r2
 800576e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005772:	691a      	ldr	r2, [r3, #16]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800577c:	69b9      	ldr	r1, [r7, #24]
 800577e:	0148      	lsls	r0, r1, #5
 8005780:	69f9      	ldr	r1, [r7, #28]
 8005782:	4401      	add	r1, r0
 8005784:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005788:	4313      	orrs	r3, r2
 800578a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800578c:	79fb      	ldrb	r3, [r7, #7]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d10d      	bne.n	80057ae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d009      	beq.n	80057ae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	6919      	ldr	r1, [r3, #16]
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057aa:	460a      	mov	r2, r1
 80057ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	791b      	ldrb	r3, [r3, #4]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d128      	bne.n	8005808 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d110      	bne.n	80057e8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	0151      	lsls	r1, r2, #5
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	440a      	add	r2, r1
 80057dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057e4:	6013      	str	r3, [r2, #0]
 80057e6:	e00f      	b.n	8005808 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005806:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	0151      	lsls	r1, r2, #5
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	440a      	add	r2, r1
 800581e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005822:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005826:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	1ff80000 	.word	0x1ff80000

08005838 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	4613      	mov	r3, r2
 8005844:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	785b      	ldrb	r3, [r3, #1]
 8005854:	2b01      	cmp	r3, #1
 8005856:	f040 80ce 	bne.w	80059f6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d132      	bne.n	80058c8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	0151      	lsls	r1, r2, #5
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	440a      	add	r2, r1
 8005878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800587c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005880:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005884:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	0151      	lsls	r1, r2, #5
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	440a      	add	r2, r1
 800589c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c0:	0cdb      	lsrs	r3, r3, #19
 80058c2:	04db      	lsls	r3, r3, #19
 80058c4:	6113      	str	r3, [r2, #16]
 80058c6:	e04e      	b.n	8005966 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	0151      	lsls	r1, r2, #5
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	440a      	add	r2, r1
 80058de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e2:	0cdb      	lsrs	r3, r3, #19
 80058e4:	04db      	lsls	r3, r3, #19
 80058e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	0151      	lsls	r1, r2, #5
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	440a      	add	r2, r1
 80058fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005902:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005906:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800590a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	699a      	ldr	r2, [r3, #24]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	429a      	cmp	r2, r3
 8005916:	d903      	bls.n	8005920 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	0151      	lsls	r1, r2, #5
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	440a      	add	r2, r1
 8005936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800593a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800593e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594c:	691a      	ldr	r2, [r3, #16]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005956:	6939      	ldr	r1, [r7, #16]
 8005958:	0148      	lsls	r0, r1, #5
 800595a:	6979      	ldr	r1, [r7, #20]
 800595c:	4401      	add	r1, r0
 800595e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005962:	4313      	orrs	r3, r2
 8005964:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005966:	79fb      	ldrb	r3, [r7, #7]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d11e      	bne.n	80059aa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d009      	beq.n	8005988 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	015a      	lsls	r2, r3, #5
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4413      	add	r3, r2
 800597c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005980:	461a      	mov	r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	440a      	add	r2, r1
 800599e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059a6:	6013      	str	r3, [r2, #0]
 80059a8:	e097      	b.n	8005ada <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	0151      	lsls	r1, r2, #5
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	440a      	add	r2, r1
 80059c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80059c8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 8083 	beq.w	8005ada <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	f003 030f 	and.w	r3, r3, #15
 80059e4:	2101      	movs	r1, #1
 80059e6:	fa01 f303 	lsl.w	r3, r1, r3
 80059ea:	6979      	ldr	r1, [r7, #20]
 80059ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059f0:	4313      	orrs	r3, r2
 80059f2:	634b      	str	r3, [r1, #52]	; 0x34
 80059f4:	e071      	b.n	8005ada <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a10:	0cdb      	lsrs	r3, r3, #19
 8005a12:	04db      	lsls	r3, r3, #19
 8005a14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005a34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005a38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	68da      	ldr	r2, [r3, #12]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	0151      	lsls	r1, r2, #5
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	440a      	add	r2, r1
 8005a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a88:	6939      	ldr	r1, [r7, #16]
 8005a8a:	0148      	lsls	r0, r1, #5
 8005a8c:	6979      	ldr	r1, [r7, #20]
 8005a8e:	4401      	add	r1, r0
 8005a90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a94:	4313      	orrs	r3, r2
 8005a96:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d10d      	bne.n	8005aba <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d009      	beq.n	8005aba <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	6919      	ldr	r1, [r3, #16]
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab6:	460a      	mov	r2, r1
 8005ab8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	0151      	lsls	r1, r2, #5
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	440a      	add	r2, r1
 8005ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ad4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005ad8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	371c      	adds	r7, #28
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	785b      	ldrb	r3, [r3, #1]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d14a      	bne.n	8005b9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b1e:	f040 8086 	bne.w	8005c2e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	7812      	ldrb	r2, [r2, #0]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	7812      	ldrb	r2, [r2, #0]
 8005b5a:	0151      	lsls	r1, r2, #5
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	440a      	add	r2, r1
 8005b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d902      	bls.n	8005b80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	75fb      	strb	r3, [r7, #23]
          break;
 8005b7e:	e056      	b.n	8005c2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b98:	d0e7      	beq.n	8005b6a <USB_EPStopXfer+0x82>
 8005b9a:	e048      	b.n	8005c2e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bb4:	d13b      	bne.n	8005c2e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	7812      	ldrb	r2, [r2, #0]
 8005bca:	0151      	lsls	r1, r2, #5
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	440a      	add	r2, r1
 8005bd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bd8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	015a      	lsls	r2, r3, #5
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	4413      	add	r3, r2
 8005be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	7812      	ldrb	r2, [r2, #0]
 8005bee:	0151      	lsls	r1, r2, #5
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	440a      	add	r2, r1
 8005bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bf8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3301      	adds	r3, #1
 8005c02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d902      	bls.n	8005c14 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	75fb      	strb	r3, [r7, #23]
          break;
 8005c12:	e00c      	b.n	8005c2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c2c:	d0e7      	beq.n	8005bfe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	371c      	adds	r7, #28
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b089      	sub	sp, #36	; 0x24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	4611      	mov	r1, r2
 8005c48:	461a      	mov	r2, r3
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	71fb      	strb	r3, [r7, #7]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c5a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d123      	bne.n	8005caa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c62:	88bb      	ldrh	r3, [r7, #4]
 8005c64:	3303      	adds	r3, #3
 8005c66:	089b      	lsrs	r3, r3, #2
 8005c68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61bb      	str	r3, [r7, #24]
 8005c6e:	e018      	b.n	8005ca2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c70:	79fb      	ldrb	r3, [r7, #7]
 8005c72:	031a      	lsls	r2, r3, #12
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	3301      	adds	r3, #1
 8005c88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	3301      	adds	r3, #1
 8005c94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d3e2      	bcc.n	8005c70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3724      	adds	r7, #36	; 0x24
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b08b      	sub	sp, #44	; 0x2c
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005cce:	88fb      	ldrh	r3, [r7, #6]
 8005cd0:	089b      	lsrs	r3, r3, #2
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005cd6:	88fb      	ldrh	r3, [r7, #6]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005cde:	2300      	movs	r3, #0
 8005ce0:	623b      	str	r3, [r7, #32]
 8005ce2:	e014      	b.n	8005d0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfe:	3301      	adds	r3, #1
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	3301      	adds	r3, #1
 8005d06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	623b      	str	r3, [r7, #32]
 8005d0e:	6a3a      	ldr	r2, [r7, #32]
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d3e6      	bcc.n	8005ce4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005d16:	8bfb      	ldrh	r3, [r7, #30]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d01e      	beq.n	8005d5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d26:	461a      	mov	r2, r3
 8005d28:	f107 0310 	add.w	r3, r7, #16
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	fa22 f303 	lsr.w	r3, r2, r3
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	701a      	strb	r2, [r3, #0]
      i++;
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	3301      	adds	r3, #1
 8005d46:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005d4e:	8bfb      	ldrh	r3, [r7, #30]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d54:	8bfb      	ldrh	r3, [r7, #30]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1ea      	bne.n	8005d30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	372c      	adds	r7, #44	; 0x2c
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	785b      	ldrb	r3, [r3, #1]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d12c      	bne.n	8005dde <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	db12      	blt.n	8005dbc <USB_EPSetStall+0x54>
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00f      	beq.n	8005dbc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	0151      	lsls	r1, r2, #5
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	440a      	add	r2, r1
 8005dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	e02b      	b.n	8005e36 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	db12      	blt.n	8005e16 <USB_EPSetStall+0xae>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00f      	beq.n	8005e16 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	0151      	lsls	r1, r2, #5
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	440a      	add	r2, r1
 8005e0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e14:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	0151      	lsls	r1, r2, #5
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	440a      	add	r2, r1
 8005e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e36:	2300      	movs	r3, #0
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d128      	bne.n	8005eb2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	791b      	ldrb	r3, [r3, #4]
 8005e84:	2b03      	cmp	r3, #3
 8005e86:	d003      	beq.n	8005e90 <USB_EPClearStall+0x4c>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	791b      	ldrb	r3, [r3, #4]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d138      	bne.n	8005f02 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eae:	6013      	str	r3, [r2, #0]
 8005eb0:	e027      	b.n	8005f02 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	0151      	lsls	r1, r2, #5
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	440a      	add	r2, r1
 8005ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ecc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ed0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	791b      	ldrb	r3, [r3, #4]
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d003      	beq.n	8005ee2 <USB_EPClearStall+0x9e>
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	791b      	ldrb	r3, [r3, #4]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d10f      	bne.n	8005f02 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	015a      	lsls	r2, r3, #5
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	0151      	lsls	r1, r2, #5
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	440a      	add	r2, r1
 8005ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f00:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005f32:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	78fb      	ldrb	r3, [r7, #3]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005f44:	68f9      	ldr	r1, [r7, #12]
 8005f46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68fa      	ldr	r2, [r7, #12]
 8005f72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f76:	f023 0303 	bic.w	r3, r3, #3
 8005f7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f8a:	f023 0302 	bic.w	r3, r3, #2
 8005f8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005fb8:	f023 0303 	bic.w	r3, r3, #3
 8005fbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fcc:	f043 0302 	orr.w	r3, r3, #2
 8005fd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b085      	sub	sp, #20
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3714      	adds	r7, #20
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	4013      	ands	r3, r2
 8006028:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	0c1b      	lsrs	r3, r3, #16
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800603a:	b480      	push	{r7}
 800603c:	b085      	sub	sp, #20
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	4013      	ands	r3, r2
 800605c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	b29b      	uxth	r3, r3
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800606e:	b480      	push	{r7}
 8006070:	b085      	sub	sp, #20
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	460b      	mov	r3, r1
 8006078:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4413      	add	r3, r2
 8006086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	4013      	ands	r3, r2
 800609a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800609c:	68bb      	ldr	r3, [r7, #8]
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b087      	sub	sp, #28
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	460b      	mov	r3, r1
 80060b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80060ce:	78fb      	ldrb	r3, [r7, #3]
 80060d0:	f003 030f 	and.w	r3, r3, #15
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	fa22 f303 	lsr.w	r3, r2, r3
 80060da:	01db      	lsls	r3, r3, #7
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	693a      	ldr	r2, [r7, #16]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80060e4:	78fb      	ldrb	r3, [r7, #3]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	4013      	ands	r3, r2
 80060f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060f8:	68bb      	ldr	r3, [r7, #8]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	371c      	adds	r7, #28
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006106:	b480      	push	{r7}
 8006108:	b083      	sub	sp, #12
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	695b      	ldr	r3, [r3, #20]
 8006112:	f003 0301 	and.w	r3, r3, #1
}
 8006116:	4618      	mov	r0, r3
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006140:	f023 0307 	bic.w	r3, r3, #7
 8006144:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006158:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006168:	b480      	push	{r7}
 800616a:	b087      	sub	sp, #28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	460b      	mov	r3, r1
 8006172:	607a      	str	r2, [r7, #4]
 8006174:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	333c      	adds	r3, #60	; 0x3c
 800617e:	3304      	adds	r3, #4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	4a26      	ldr	r2, [pc, #152]	; (8006220 <USB_EP0_OutStart+0xb8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d90a      	bls.n	80061a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800619c:	d101      	bne.n	80061a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800619e:	2300      	movs	r3, #0
 80061a0:	e037      	b.n	8006212 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a8:	461a      	mov	r2, r3
 80061aa:	2300      	movs	r3, #0
 80061ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	697a      	ldr	r2, [r7, #20]
 80061b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d0:	f043 0318 	orr.w	r3, r3, #24
 80061d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80061e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d10f      	bne.n	8006210 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f6:	461a      	mov	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800620a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800620e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	371c      	adds	r7, #28
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	4f54300a 	.word	0x4f54300a

08006224 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3301      	adds	r3, #1
 8006234:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4a13      	ldr	r2, [pc, #76]	; (8006288 <USB_CoreReset+0x64>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d901      	bls.n	8006242 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e01b      	b.n	800627a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	daf2      	bge.n	8006230 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f043 0201 	orr.w	r2, r3, #1
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	3301      	adds	r3, #1
 800625e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4a09      	ldr	r2, [pc, #36]	; (8006288 <USB_CoreReset+0x64>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d901      	bls.n	800626c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e006      	b.n	800627a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b01      	cmp	r3, #1
 8006276:	d0f0      	beq.n	800625a <USB_CoreReset+0x36>

  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	00030d40 	.word	0x00030d40

0800628c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006298:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800629c:	f006 fd94 	bl	800cdc8 <USBD_static_malloc>
 80062a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d109      	bne.n	80062bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	32b0      	adds	r2, #176	; 0xb0
 80062b2:	2100      	movs	r1, #0
 80062b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80062b8:	2302      	movs	r3, #2
 80062ba:	e0d4      	b.n	8006466 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80062bc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80062c0:	2100      	movs	r1, #0
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f006 fdfe 	bl	800cec4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	32b0      	adds	r2, #176	; 0xb0
 80062d2:	68f9      	ldr	r1, [r7, #12]
 80062d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	32b0      	adds	r2, #176	; 0xb0
 80062e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	7c1b      	ldrb	r3, [r3, #16]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d138      	bne.n	8006366 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80062f4:	4b5e      	ldr	r3, [pc, #376]	; (8006470 <USBD_CDC_Init+0x1e4>)
 80062f6:	7819      	ldrb	r1, [r3, #0]
 80062f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062fc:	2202      	movs	r2, #2
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f006 fc3f 	bl	800cb82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006304:	4b5a      	ldr	r3, [pc, #360]	; (8006470 <USBD_CDC_Init+0x1e4>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	f003 020f 	and.w	r2, r3, #15
 800630c:	6879      	ldr	r1, [r7, #4]
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	440b      	add	r3, r1
 8006318:	3324      	adds	r3, #36	; 0x24
 800631a:	2201      	movs	r2, #1
 800631c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800631e:	4b55      	ldr	r3, [pc, #340]	; (8006474 <USBD_CDC_Init+0x1e8>)
 8006320:	7819      	ldrb	r1, [r3, #0]
 8006322:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006326:	2202      	movs	r2, #2
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f006 fc2a 	bl	800cb82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800632e:	4b51      	ldr	r3, [pc, #324]	; (8006474 <USBD_CDC_Init+0x1e8>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	f003 020f 	and.w	r2, r3, #15
 8006336:	6879      	ldr	r1, [r7, #4]
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	440b      	add	r3, r1
 8006342:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006346:	2201      	movs	r2, #1
 8006348:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800634a:	4b4b      	ldr	r3, [pc, #300]	; (8006478 <USBD_CDC_Init+0x1ec>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	f003 020f 	and.w	r2, r3, #15
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	3326      	adds	r3, #38	; 0x26
 8006360:	2210      	movs	r2, #16
 8006362:	801a      	strh	r2, [r3, #0]
 8006364:	e035      	b.n	80063d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006366:	4b42      	ldr	r3, [pc, #264]	; (8006470 <USBD_CDC_Init+0x1e4>)
 8006368:	7819      	ldrb	r1, [r3, #0]
 800636a:	2340      	movs	r3, #64	; 0x40
 800636c:	2202      	movs	r2, #2
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f006 fc07 	bl	800cb82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006374:	4b3e      	ldr	r3, [pc, #248]	; (8006470 <USBD_CDC_Init+0x1e4>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	f003 020f 	and.w	r2, r3, #15
 800637c:	6879      	ldr	r1, [r7, #4]
 800637e:	4613      	mov	r3, r2
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	440b      	add	r3, r1
 8006388:	3324      	adds	r3, #36	; 0x24
 800638a:	2201      	movs	r2, #1
 800638c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800638e:	4b39      	ldr	r3, [pc, #228]	; (8006474 <USBD_CDC_Init+0x1e8>)
 8006390:	7819      	ldrb	r1, [r3, #0]
 8006392:	2340      	movs	r3, #64	; 0x40
 8006394:	2202      	movs	r2, #2
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f006 fbf3 	bl	800cb82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800639c:	4b35      	ldr	r3, [pc, #212]	; (8006474 <USBD_CDC_Init+0x1e8>)
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	f003 020f 	and.w	r2, r3, #15
 80063a4:	6879      	ldr	r1, [r7, #4]
 80063a6:	4613      	mov	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4413      	add	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	440b      	add	r3, r1
 80063b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063b4:	2201      	movs	r2, #1
 80063b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80063b8:	4b2f      	ldr	r3, [pc, #188]	; (8006478 <USBD_CDC_Init+0x1ec>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	f003 020f 	and.w	r2, r3, #15
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	440b      	add	r3, r1
 80063cc:	3326      	adds	r3, #38	; 0x26
 80063ce:	2210      	movs	r2, #16
 80063d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063d2:	4b29      	ldr	r3, [pc, #164]	; (8006478 <USBD_CDC_Init+0x1ec>)
 80063d4:	7819      	ldrb	r1, [r3, #0]
 80063d6:	2308      	movs	r3, #8
 80063d8:	2203      	movs	r2, #3
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f006 fbd1 	bl	800cb82 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80063e0:	4b25      	ldr	r3, [pc, #148]	; (8006478 <USBD_CDC_Init+0x1ec>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	f003 020f 	and.w	r2, r3, #15
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	3324      	adds	r3, #36	; 0x24
 80063f6:	2201      	movs	r2, #1
 80063f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	33b0      	adds	r3, #176	; 0xb0
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006430:	2302      	movs	r3, #2
 8006432:	e018      	b.n	8006466 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	7c1b      	ldrb	r3, [r3, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800643c:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <USBD_CDC_Init+0x1e8>)
 800643e:	7819      	ldrb	r1, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f006 fc88 	bl	800cd60 <USBD_LL_PrepareReceive>
 8006450:	e008      	b.n	8006464 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006452:	4b08      	ldr	r3, [pc, #32]	; (8006474 <USBD_CDC_Init+0x1e8>)
 8006454:	7819      	ldrb	r1, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800645c:	2340      	movs	r3, #64	; 0x40
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f006 fc7e 	bl	800cd60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3710      	adds	r7, #16
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	2000009f 	.word	0x2000009f
 8006474:	200000a0 	.word	0x200000a0
 8006478:	200000a1 	.word	0x200000a1

0800647c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006488:	4b3a      	ldr	r3, [pc, #232]	; (8006574 <USBD_CDC_DeInit+0xf8>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	4619      	mov	r1, r3
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f006 fb9d 	bl	800cbce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006494:	4b37      	ldr	r3, [pc, #220]	; (8006574 <USBD_CDC_DeInit+0xf8>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	f003 020f 	and.w	r2, r3, #15
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	4613      	mov	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	440b      	add	r3, r1
 80064a8:	3324      	adds	r3, #36	; 0x24
 80064aa:	2200      	movs	r2, #0
 80064ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80064ae:	4b32      	ldr	r3, [pc, #200]	; (8006578 <USBD_CDC_DeInit+0xfc>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f006 fb8a 	bl	800cbce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80064ba:	4b2f      	ldr	r3, [pc, #188]	; (8006578 <USBD_CDC_DeInit+0xfc>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	f003 020f 	and.w	r2, r3, #15
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	440b      	add	r3, r1
 80064ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80064d2:	2200      	movs	r2, #0
 80064d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80064d6:	4b29      	ldr	r3, [pc, #164]	; (800657c <USBD_CDC_DeInit+0x100>)
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f006 fb76 	bl	800cbce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80064e2:	4b26      	ldr	r3, [pc, #152]	; (800657c <USBD_CDC_DeInit+0x100>)
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	f003 020f 	and.w	r2, r3, #15
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	440b      	add	r3, r1
 80064f6:	3324      	adds	r3, #36	; 0x24
 80064f8:	2200      	movs	r2, #0
 80064fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80064fc:	4b1f      	ldr	r3, [pc, #124]	; (800657c <USBD_CDC_DeInit+0x100>)
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	f003 020f 	and.w	r2, r3, #15
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	4613      	mov	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	3326      	adds	r3, #38	; 0x26
 8006512:	2200      	movs	r2, #0
 8006514:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	32b0      	adds	r2, #176	; 0xb0
 8006520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d01f      	beq.n	8006568 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	33b0      	adds	r3, #176	; 0xb0
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	32b0      	adds	r2, #176	; 0xb0
 8006546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654a:	4618      	mov	r0, r3
 800654c:	f006 fc4a 	bl	800cde4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	32b0      	adds	r2, #176	; 0xb0
 800655a:	2100      	movs	r1, #0
 800655c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	2000009f 	.word	0x2000009f
 8006578:	200000a0 	.word	0x200000a0
 800657c:	200000a1 	.word	0x200000a1

08006580 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	32b0      	adds	r2, #176	; 0xb0
 8006594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006598:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80065a2:	2300      	movs	r3, #0
 80065a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e0bf      	b.n	8006730 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d050      	beq.n	800665e <USBD_CDC_Setup+0xde>
 80065bc:	2b20      	cmp	r3, #32
 80065be:	f040 80af 	bne.w	8006720 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	88db      	ldrh	r3, [r3, #6]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d03a      	beq.n	8006640 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	b25b      	sxtb	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	da1b      	bge.n	800660c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	33b0      	adds	r3, #176	; 0xb0
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80065ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	88d2      	ldrh	r2, [r2, #6]
 80065f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	88db      	ldrh	r3, [r3, #6]
 80065f6:	2b07      	cmp	r3, #7
 80065f8:	bf28      	it	cs
 80065fa:	2307      	movcs	r3, #7
 80065fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	89fa      	ldrh	r2, [r7, #14]
 8006602:	4619      	mov	r1, r3
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 fd89 	bl	800811c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800660a:	e090      	b.n	800672e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	785a      	ldrb	r2, [r3, #1]
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	88db      	ldrh	r3, [r3, #6]
 800661a:	2b3f      	cmp	r3, #63	; 0x3f
 800661c:	d803      	bhi.n	8006626 <USBD_CDC_Setup+0xa6>
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	88db      	ldrh	r3, [r3, #6]
 8006622:	b2da      	uxtb	r2, r3
 8006624:	e000      	b.n	8006628 <USBD_CDC_Setup+0xa8>
 8006626:	2240      	movs	r2, #64	; 0x40
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800662e:	6939      	ldr	r1, [r7, #16]
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006636:	461a      	mov	r2, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 fd9b 	bl	8008174 <USBD_CtlPrepareRx>
      break;
 800663e:	e076      	b.n	800672e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	33b0      	adds	r3, #176	; 0xb0
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	7850      	ldrb	r0, [r2, #1]
 8006656:	2200      	movs	r2, #0
 8006658:	6839      	ldr	r1, [r7, #0]
 800665a:	4798      	blx	r3
      break;
 800665c:	e067      	b.n	800672e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	785b      	ldrb	r3, [r3, #1]
 8006662:	2b0b      	cmp	r3, #11
 8006664:	d851      	bhi.n	800670a <USBD_CDC_Setup+0x18a>
 8006666:	a201      	add	r2, pc, #4	; (adr r2, 800666c <USBD_CDC_Setup+0xec>)
 8006668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666c:	0800669d 	.word	0x0800669d
 8006670:	08006719 	.word	0x08006719
 8006674:	0800670b 	.word	0x0800670b
 8006678:	0800670b 	.word	0x0800670b
 800667c:	0800670b 	.word	0x0800670b
 8006680:	0800670b 	.word	0x0800670b
 8006684:	0800670b 	.word	0x0800670b
 8006688:	0800670b 	.word	0x0800670b
 800668c:	0800670b 	.word	0x0800670b
 8006690:	0800670b 	.word	0x0800670b
 8006694:	080066c7 	.word	0x080066c7
 8006698:	080066f1 	.word	0x080066f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d107      	bne.n	80066b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80066a8:	f107 030a 	add.w	r3, r7, #10
 80066ac:	2202      	movs	r2, #2
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 fd33 	bl	800811c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066b6:	e032      	b.n	800671e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80066b8:	6839      	ldr	r1, [r7, #0]
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 fcbd 	bl	800803a <USBD_CtlError>
            ret = USBD_FAIL;
 80066c0:	2303      	movs	r3, #3
 80066c2:	75fb      	strb	r3, [r7, #23]
          break;
 80066c4:	e02b      	b.n	800671e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d107      	bne.n	80066e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80066d2:	f107 030d 	add.w	r3, r7, #13
 80066d6:	2201      	movs	r2, #1
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f001 fd1e 	bl	800811c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80066e0:	e01d      	b.n	800671e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 fca8 	bl	800803a <USBD_CtlError>
            ret = USBD_FAIL;
 80066ea:	2303      	movs	r3, #3
 80066ec:	75fb      	strb	r3, [r7, #23]
          break;
 80066ee:	e016      	b.n	800671e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d00f      	beq.n	800671c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80066fc:	6839      	ldr	r1, [r7, #0]
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f001 fc9b 	bl	800803a <USBD_CtlError>
            ret = USBD_FAIL;
 8006704:	2303      	movs	r3, #3
 8006706:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006708:	e008      	b.n	800671c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f001 fc94 	bl	800803a <USBD_CtlError>
          ret = USBD_FAIL;
 8006712:	2303      	movs	r3, #3
 8006714:	75fb      	strb	r3, [r7, #23]
          break;
 8006716:	e002      	b.n	800671e <USBD_CDC_Setup+0x19e>
          break;
 8006718:	bf00      	nop
 800671a:	e008      	b.n	800672e <USBD_CDC_Setup+0x1ae>
          break;
 800671c:	bf00      	nop
      }
      break;
 800671e:	e006      	b.n	800672e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f001 fc89 	bl	800803a <USBD_CtlError>
      ret = USBD_FAIL;
 8006728:	2303      	movs	r3, #3
 800672a:	75fb      	strb	r3, [r7, #23]
      break;
 800672c:	bf00      	nop
  }

  return (uint8_t)ret;
 800672e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3718      	adds	r7, #24
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	460b      	mov	r3, r1
 8006742:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800674a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	32b0      	adds	r2, #176	; 0xb0
 8006756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800675e:	2303      	movs	r3, #3
 8006760:	e065      	b.n	800682e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	32b0      	adds	r2, #176	; 0xb0
 800676c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006770:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006772:	78fb      	ldrb	r3, [r7, #3]
 8006774:	f003 020f 	and.w	r2, r3, #15
 8006778:	6879      	ldr	r1, [r7, #4]
 800677a:	4613      	mov	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	440b      	add	r3, r1
 8006784:	3318      	adds	r3, #24
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d02f      	beq.n	80067ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	f003 020f 	and.w	r2, r3, #15
 8006792:	6879      	ldr	r1, [r7, #4]
 8006794:	4613      	mov	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	440b      	add	r3, r1
 800679e:	3318      	adds	r3, #24
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	78fb      	ldrb	r3, [r7, #3]
 80067a4:	f003 010f 	and.w	r1, r3, #15
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	460b      	mov	r3, r1
 80067ac:	00db      	lsls	r3, r3, #3
 80067ae:	440b      	add	r3, r1
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4403      	add	r3, r0
 80067b4:	3348      	adds	r3, #72	; 0x48
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	fbb2 f1f3 	udiv	r1, r2, r3
 80067bc:	fb01 f303 	mul.w	r3, r1, r3
 80067c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d112      	bne.n	80067ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	f003 020f 	and.w	r2, r3, #15
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	4613      	mov	r3, r2
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	440b      	add	r3, r1
 80067d8:	3318      	adds	r3, #24
 80067da:	2200      	movs	r2, #0
 80067dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80067de:	78f9      	ldrb	r1, [r7, #3]
 80067e0:	2300      	movs	r3, #0
 80067e2:	2200      	movs	r2, #0
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f006 fa9a 	bl	800cd1e <USBD_LL_Transmit>
 80067ea:	e01f      	b.n	800682c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	33b0      	adds	r3, #176	; 0xb0
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d010      	beq.n	800682c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	33b0      	adds	r3, #176	; 0xb0
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	4413      	add	r3, r2
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006828:	78fa      	ldrb	r2, [r7, #3]
 800682a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3710      	adds	r7, #16
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	32b0      	adds	r2, #176	; 0xb0
 800684c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006850:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	32b0      	adds	r2, #176	; 0xb0
 800685c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d101      	bne.n	8006868 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006864:	2303      	movs	r3, #3
 8006866:	e01a      	b.n	800689e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f006 fa98 	bl	800cda2 <USBD_LL_GetRxDataSize>
 8006872:	4602      	mov	r2, r0
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	33b0      	adds	r3, #176	; 0xb0
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	4413      	add	r3, r2
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006898:	4611      	mov	r1, r2
 800689a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	32b0      	adds	r2, #176	; 0xb0
 80068b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d101      	bne.n	80068c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e025      	b.n	8006914 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	33b0      	adds	r3, #176	; 0xb0
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d01a      	beq.n	8006912 <USBD_CDC_EP0_RxReady+0x6c>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80068e2:	2bff      	cmp	r3, #255	; 0xff
 80068e4:	d015      	beq.n	8006912 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	33b0      	adds	r3, #176	; 0xb0
 80068f0:	009b      	lsls	r3, r3, #2
 80068f2:	4413      	add	r3, r2
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80068fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006906:	b292      	uxth	r2, r2
 8006908:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	22ff      	movs	r2, #255	; 0xff
 800690e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006924:	2182      	movs	r1, #130	; 0x82
 8006926:	4818      	ldr	r0, [pc, #96]	; (8006988 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006928:	f000 fd4f 	bl	80073ca <USBD_GetEpDesc>
 800692c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800692e:	2101      	movs	r1, #1
 8006930:	4815      	ldr	r0, [pc, #84]	; (8006988 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006932:	f000 fd4a 	bl	80073ca <USBD_GetEpDesc>
 8006936:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006938:	2181      	movs	r1, #129	; 0x81
 800693a:	4813      	ldr	r0, [pc, #76]	; (8006988 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800693c:	f000 fd45 	bl	80073ca <USBD_GetEpDesc>
 8006940:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d002      	beq.n	800694e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2210      	movs	r2, #16
 800694c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d006      	beq.n	8006962 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2200      	movs	r2, #0
 8006958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800695c:	711a      	strb	r2, [r3, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d006      	beq.n	8006976 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006970:	711a      	strb	r2, [r3, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2243      	movs	r2, #67	; 0x43
 800697a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800697c:	4b02      	ldr	r3, [pc, #8]	; (8006988 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800697e:	4618      	mov	r0, r3
 8006980:	3718      	adds	r7, #24
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	2000005c 	.word	0x2000005c

0800698c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006994:	2182      	movs	r1, #130	; 0x82
 8006996:	4818      	ldr	r0, [pc, #96]	; (80069f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006998:	f000 fd17 	bl	80073ca <USBD_GetEpDesc>
 800699c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800699e:	2101      	movs	r1, #1
 80069a0:	4815      	ldr	r0, [pc, #84]	; (80069f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069a2:	f000 fd12 	bl	80073ca <USBD_GetEpDesc>
 80069a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069a8:	2181      	movs	r1, #129	; 0x81
 80069aa:	4813      	ldr	r0, [pc, #76]	; (80069f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80069ac:	f000 fd0d 	bl	80073ca <USBD_GetEpDesc>
 80069b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d002      	beq.n	80069be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2210      	movs	r2, #16
 80069bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d006      	beq.n	80069d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	2200      	movs	r2, #0
 80069c8:	711a      	strb	r2, [r3, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f042 0202 	orr.w	r2, r2, #2
 80069d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d006      	beq.n	80069e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	711a      	strb	r2, [r3, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f042 0202 	orr.w	r2, r2, #2
 80069e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2243      	movs	r2, #67	; 0x43
 80069ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80069ec:	4b02      	ldr	r3, [pc, #8]	; (80069f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	2000005c 	.word	0x2000005c

080069fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a04:	2182      	movs	r1, #130	; 0x82
 8006a06:	4818      	ldr	r0, [pc, #96]	; (8006a68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a08:	f000 fcdf 	bl	80073ca <USBD_GetEpDesc>
 8006a0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a0e:	2101      	movs	r1, #1
 8006a10:	4815      	ldr	r0, [pc, #84]	; (8006a68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a12:	f000 fcda 	bl	80073ca <USBD_GetEpDesc>
 8006a16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a18:	2181      	movs	r1, #129	; 0x81
 8006a1a:	4813      	ldr	r0, [pc, #76]	; (8006a68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006a1c:	f000 fcd5 	bl	80073ca <USBD_GetEpDesc>
 8006a20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2210      	movs	r2, #16
 8006a2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d006      	beq.n	8006a42 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a3c:	711a      	strb	r2, [r3, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d006      	beq.n	8006a56 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a50:	711a      	strb	r2, [r3, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2243      	movs	r2, #67	; 0x43
 8006a5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a5c:	4b02      	ldr	r3, [pc, #8]	; (8006a68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	2000005c 	.word	0x2000005c

08006a6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	220a      	movs	r2, #10
 8006a78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a7a:	4b03      	ldr	r3, [pc, #12]	; (8006a88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	370c      	adds	r7, #12
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr
 8006a88:	20000018 	.word	0x20000018

08006a8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e009      	b.n	8006ab4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	33b0      	adds	r3, #176	; 0xb0
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	370c      	adds	r7, #12
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	32b0      	adds	r2, #176	; 0xb0
 8006ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ada:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e008      	b.n	8006af8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	371c      	adds	r7, #28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b085      	sub	sp, #20
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	32b0      	adds	r2, #176	; 0xb0
 8006b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d101      	bne.n	8006b28 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e004      	b.n	8006b32 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
	...

08006b40 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	32b0      	adds	r2, #176	; 0xb0
 8006b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b56:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	32b0      	adds	r2, #176	; 0xb0
 8006b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d101      	bne.n	8006b72 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e025      	b.n	8006bbe <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d11f      	bne.n	8006bbc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006b84:	4b10      	ldr	r3, [pc, #64]	; (8006bc8 <USBD_CDC_TransmitPacket+0x88>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	f003 020f 	and.w	r2, r3, #15
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	4613      	mov	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	4403      	add	r3, r0
 8006b9e:	3318      	adds	r3, #24
 8006ba0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006ba2:	4b09      	ldr	r3, [pc, #36]	; (8006bc8 <USBD_CDC_TransmitPacket+0x88>)
 8006ba4:	7819      	ldrb	r1, [r3, #0]
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f006 f8b3 	bl	800cd1e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	2000009f 	.word	0x2000009f

08006bcc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	32b0      	adds	r2, #176	; 0xb0
 8006bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	32b0      	adds	r2, #176	; 0xb0
 8006bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e018      	b.n	8006c2c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	7c1b      	ldrb	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c02:	4b0c      	ldr	r3, [pc, #48]	; (8006c34 <USBD_CDC_ReceivePacket+0x68>)
 8006c04:	7819      	ldrb	r1, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f006 f8a5 	bl	800cd60 <USBD_LL_PrepareReceive>
 8006c16:	e008      	b.n	8006c2a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c18:	4b06      	ldr	r3, [pc, #24]	; (8006c34 <USBD_CDC_ReceivePacket+0x68>)
 8006c1a:	7819      	ldrb	r1, [r3, #0]
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006c22:	2340      	movs	r3, #64	; 0x40
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f006 f89b 	bl	800cd60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3710      	adds	r7, #16
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	200000a0 	.word	0x200000a0

08006c38 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b086      	sub	sp, #24
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	4613      	mov	r3, r2
 8006c44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c4c:	2303      	movs	r3, #3
 8006c4e:	e01f      	b.n	8006c90 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	79fa      	ldrb	r2, [r7, #7]
 8006c82:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f005 ff15 	bl	800cab4 <USBD_LL_Init>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e025      	b.n	8006cfc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	683a      	ldr	r2, [r7, #0]
 8006cb4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	32ae      	adds	r2, #174	; 0xae
 8006cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00f      	beq.n	8006cec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	32ae      	adds	r2, #174	; 0xae
 8006cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	f107 020e 	add.w	r2, r7, #14
 8006ce0:	4610      	mov	r0, r2
 8006ce2:	4798      	blx	r3
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f005 ff1d 	bl	800cb4c <USBD_LL_Start>
 8006d12:	4603      	mov	r3, r0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006d24:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b084      	sub	sp, #16
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d009      	beq.n	8006d60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	78fa      	ldrb	r2, [r7, #3]
 8006d56:	4611      	mov	r1, r2
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	4798      	blx	r3
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
 8006d72:	460b      	mov	r3, r1
 8006d74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	78fa      	ldrb	r2, [r7, #3]
 8006d84:	4611      	mov	r1, r2
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4798      	blx	r3
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006d90:	2303      	movs	r3, #3
 8006d92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dae:	6839      	ldr	r1, [r7, #0]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f001 f908 	bl	8007fc6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006dd2:	f003 031f 	and.w	r3, r3, #31
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d01a      	beq.n	8006e10 <USBD_LL_SetupStage+0x72>
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d822      	bhi.n	8006e24 <USBD_LL_SetupStage+0x86>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <USBD_LL_SetupStage+0x4a>
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d00a      	beq.n	8006dfc <USBD_LL_SetupStage+0x5e>
 8006de6:	e01d      	b.n	8006e24 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fb5f 	bl	80074b4 <USBD_StdDevReq>
 8006df6:	4603      	mov	r3, r0
 8006df8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dfa:	e020      	b.n	8006e3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e02:	4619      	mov	r1, r3
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fbc7 	bl	8007598 <USBD_StdItfReq>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e0e:	e016      	b.n	8006e3e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fc29 	bl	8007670 <USBD_StdEPReq>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	73fb      	strb	r3, [r7, #15]
      break;
 8006e22:	e00c      	b.n	8006e3e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	4619      	mov	r1, r3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f005 feea 	bl	800cc0c <USBD_LL_StallEP>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e3c:	bf00      	nop
  }

  return ret;
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	460b      	mov	r3, r1
 8006e52:	607a      	str	r2, [r7, #4]
 8006e54:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e5a:	7afb      	ldrb	r3, [r7, #11]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d16e      	bne.n	8006f3e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	f040 8098 	bne.w	8006fa4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d913      	bls.n	8006ea8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	68db      	ldr	r3, [r3, #12]
 8006e88:	1ad2      	subs	r2, r2, r3
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	68da      	ldr	r2, [r3, #12]
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	4293      	cmp	r3, r2
 8006e98:	bf28      	it	cs
 8006e9a:	4613      	movcs	r3, r2
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	6879      	ldr	r1, [r7, #4]
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f001 f984 	bl	80081ae <USBD_CtlContinueRx>
 8006ea6:	e07d      	b.n	8006fa4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006eae:	f003 031f 	and.w	r3, r3, #31
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d014      	beq.n	8006ee0 <USBD_LL_DataOutStage+0x98>
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d81d      	bhi.n	8006ef6 <USBD_LL_DataOutStage+0xae>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <USBD_LL_DataOutStage+0x7c>
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d003      	beq.n	8006eca <USBD_LL_DataOutStage+0x82>
 8006ec2:	e018      	b.n	8006ef6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	75bb      	strb	r3, [r7, #22]
            break;
 8006ec8:	e018      	b.n	8006efc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 fa5e 	bl	8007396 <USBD_CoreFindIF>
 8006eda:	4603      	mov	r3, r0
 8006edc:	75bb      	strb	r3, [r7, #22]
            break;
 8006ede:	e00d      	b.n	8006efc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	4619      	mov	r1, r3
 8006eea:	68f8      	ldr	r0, [r7, #12]
 8006eec:	f000 fa60 	bl	80073b0 <USBD_CoreFindEP>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	75bb      	strb	r3, [r7, #22]
            break;
 8006ef4:	e002      	b.n	8006efc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	75bb      	strb	r3, [r7, #22]
            break;
 8006efa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006efc:	7dbb      	ldrb	r3, [r7, #22]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d119      	bne.n	8006f36 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b03      	cmp	r3, #3
 8006f0c:	d113      	bne.n	8006f36 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f0e:	7dba      	ldrb	r2, [r7, #22]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	32ae      	adds	r2, #174	; 0xae
 8006f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00b      	beq.n	8006f36 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006f1e:	7dba      	ldrb	r2, [r7, #22]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006f26:	7dba      	ldrb	r2, [r7, #22]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	32ae      	adds	r2, #174	; 0xae
 8006f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f001 f94a 	bl	80081d0 <USBD_CtlSendStatus>
 8006f3c:	e032      	b.n	8006fa4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006f3e:	7afb      	ldrb	r3, [r7, #11]
 8006f40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	4619      	mov	r1, r3
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 fa31 	bl	80073b0 <USBD_CoreFindEP>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f52:	7dbb      	ldrb	r3, [r7, #22]
 8006f54:	2bff      	cmp	r3, #255	; 0xff
 8006f56:	d025      	beq.n	8006fa4 <USBD_LL_DataOutStage+0x15c>
 8006f58:	7dbb      	ldrb	r3, [r7, #22]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d122      	bne.n	8006fa4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d117      	bne.n	8006f9a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f6a:	7dba      	ldrb	r2, [r7, #22]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	32ae      	adds	r2, #174	; 0xae
 8006f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00f      	beq.n	8006f9a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f7a:	7dba      	ldrb	r2, [r7, #22]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f82:	7dba      	ldrb	r2, [r7, #22]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	32ae      	adds	r2, #174	; 0xae
 8006f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	7afa      	ldrb	r2, [r7, #11]
 8006f90:	4611      	mov	r1, r2
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	4798      	blx	r3
 8006f96:	4603      	mov	r3, r0
 8006f98:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006f9a:	7dfb      	ldrb	r3, [r7, #23]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	e000      	b.n	8006fa6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3718      	adds	r7, #24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b086      	sub	sp, #24
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	60f8      	str	r0, [r7, #12]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	607a      	str	r2, [r7, #4]
 8006fba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006fbc:	7afb      	ldrb	r3, [r7, #11]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d16f      	bne.n	80070a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	3314      	adds	r3, #20
 8006fc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d15a      	bne.n	8007088 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d914      	bls.n	8007008 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	689a      	ldr	r2, [r3, #8]
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	1ad2      	subs	r2, r2, r3
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f001 f8ac 	bl	8008152 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2100      	movs	r1, #0
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f005 fead 	bl	800cd60 <USBD_LL_PrepareReceive>
 8007006:	e03f      	b.n	8007088 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	429a      	cmp	r2, r3
 8007012:	d11c      	bne.n	800704e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800701c:	429a      	cmp	r2, r3
 800701e:	d316      	bcc.n	800704e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800702a:	429a      	cmp	r2, r3
 800702c:	d20f      	bcs.n	800704e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800702e:	2200      	movs	r2, #0
 8007030:	2100      	movs	r1, #0
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f001 f88d 	bl	8008152 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007040:	2300      	movs	r3, #0
 8007042:	2200      	movs	r2, #0
 8007044:	2100      	movs	r1, #0
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f005 fe8a 	bl	800cd60 <USBD_LL_PrepareReceive>
 800704c:	e01c      	b.n	8007088 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b03      	cmp	r3, #3
 8007058:	d10f      	bne.n	800707a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d009      	beq.n	800707a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800707a:	2180      	movs	r1, #128	; 0x80
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f005 fdc5 	bl	800cc0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f001 f8b7 	bl	80081f6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d03a      	beq.n	8007108 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007092:	68f8      	ldr	r0, [r7, #12]
 8007094:	f7ff fe42 	bl	8006d1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80070a0:	e032      	b.n	8007108 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80070a2:	7afb      	ldrb	r3, [r7, #11]
 80070a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	4619      	mov	r1, r3
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 f97f 	bl	80073b0 <USBD_CoreFindEP>
 80070b2:	4603      	mov	r3, r0
 80070b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070b6:	7dfb      	ldrb	r3, [r7, #23]
 80070b8:	2bff      	cmp	r3, #255	; 0xff
 80070ba:	d025      	beq.n	8007108 <USBD_LL_DataInStage+0x15a>
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d122      	bne.n	8007108 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b03      	cmp	r3, #3
 80070cc:	d11c      	bne.n	8007108 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80070ce:	7dfa      	ldrb	r2, [r7, #23]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	32ae      	adds	r2, #174	; 0xae
 80070d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d014      	beq.n	8007108 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80070de:	7dfa      	ldrb	r2, [r7, #23]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80070e6:	7dfa      	ldrb	r2, [r7, #23]
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	32ae      	adds	r2, #174	; 0xae
 80070ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	7afa      	ldrb	r2, [r7, #11]
 80070f4:	4611      	mov	r1, r2
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	4798      	blx	r3
 80070fa:	4603      	mov	r3, r0
 80070fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80070fe:	7dbb      	ldrb	r3, [r7, #22]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007104:	7dbb      	ldrb	r3, [r7, #22]
 8007106:	e000      	b.n	800710a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}

08007112 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007112:	b580      	push	{r7, lr}
 8007114:	b084      	sub	sp, #16
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800714a:	2b00      	cmp	r3, #0
 800714c:	d014      	beq.n	8007178 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00e      	beq.n	8007178 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	6852      	ldr	r2, [r2, #4]
 8007166:	b2d2      	uxtb	r2, r2
 8007168:	4611      	mov	r1, r2
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	4798      	blx	r3
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007174:	2303      	movs	r3, #3
 8007176:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007178:	2340      	movs	r3, #64	; 0x40
 800717a:	2200      	movs	r2, #0
 800717c:	2100      	movs	r1, #0
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f005 fcff 	bl	800cb82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2240      	movs	r2, #64	; 0x40
 8007190:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007194:	2340      	movs	r3, #64	; 0x40
 8007196:	2200      	movs	r2, #0
 8007198:	2180      	movs	r1, #128	; 0x80
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f005 fcf1 	bl	800cb82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2240      	movs	r2, #64	; 0x40
 80071aa:	621a      	str	r2, [r3, #32]

  return ret;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
 80071be:	460b      	mov	r3, r1
 80071c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	78fa      	ldrb	r2, [r7, #3]
 80071c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2204      	movs	r2, #4
 80071f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b04      	cmp	r3, #4
 8007214:	d106      	bne.n	8007224 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800721c:	b2da      	uxtb	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	370c      	adds	r7, #12
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr

08007232 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b082      	sub	sp, #8
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007240:	b2db      	uxtb	r3, r3
 8007242:	2b03      	cmp	r3, #3
 8007244:	d110      	bne.n	8007268 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007256:	69db      	ldr	r3, [r3, #28]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b082      	sub	sp, #8
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
 800727a:	460b      	mov	r3, r1
 800727c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	32ae      	adds	r2, #174	; 0xae
 8007288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007290:	2303      	movs	r3, #3
 8007292:	e01c      	b.n	80072ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729a:	b2db      	uxtb	r3, r3
 800729c:	2b03      	cmp	r3, #3
 800729e:	d115      	bne.n	80072cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	32ae      	adds	r2, #174	; 0xae
 80072aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ae:	6a1b      	ldr	r3, [r3, #32]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00b      	beq.n	80072cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	32ae      	adds	r2, #174	; 0xae
 80072be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	78fa      	ldrb	r2, [r7, #3]
 80072c6:	4611      	mov	r1, r2
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3708      	adds	r7, #8
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b082      	sub	sp, #8
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	460b      	mov	r3, r1
 80072e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	32ae      	adds	r2, #174	; 0xae
 80072ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d101      	bne.n	80072f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e01c      	b.n	8007332 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b03      	cmp	r3, #3
 8007302:	d115      	bne.n	8007330 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	32ae      	adds	r2, #174	; 0xae
 800730e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	32ae      	adds	r2, #174	; 0xae
 8007322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007328:	78fa      	ldrb	r2, [r7, #3]
 800732a:	4611      	mov	r1, r2
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800733a:	b480      	push	{r7}
 800733c:	b083      	sub	sp, #12
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007358:	2300      	movs	r3, #0
 800735a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00e      	beq.n	800738c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	6852      	ldr	r2, [r2, #4]
 800737a:	b2d2      	uxtb	r2, r2
 800737c:	4611      	mov	r1, r2
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	4798      	blx	r3
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007388:	2303      	movs	r3, #3
 800738a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}

08007396 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	460b      	mov	r3, r1
 80073a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80073bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80073be:	4618      	mov	r0, r3
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b086      	sub	sp, #24
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	460b      	mov	r3, r1
 80073d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80073de:	2300      	movs	r3, #0
 80073e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	885b      	ldrh	r3, [r3, #2]
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d920      	bls.n	8007434 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80073fa:	e013      	b.n	8007424 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80073fc:	f107 030a 	add.w	r3, r7, #10
 8007400:	4619      	mov	r1, r3
 8007402:	6978      	ldr	r0, [r7, #20]
 8007404:	f000 f81b 	bl	800743e <USBD_GetNextDesc>
 8007408:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	785b      	ldrb	r3, [r3, #1]
 800740e:	2b05      	cmp	r3, #5
 8007410:	d108      	bne.n	8007424 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	789b      	ldrb	r3, [r3, #2]
 800741a:	78fa      	ldrb	r2, [r7, #3]
 800741c:	429a      	cmp	r2, r3
 800741e:	d008      	beq.n	8007432 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007420:	2300      	movs	r3, #0
 8007422:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	885b      	ldrh	r3, [r3, #2]
 8007428:	b29a      	uxth	r2, r3
 800742a:	897b      	ldrh	r3, [r7, #10]
 800742c:	429a      	cmp	r2, r3
 800742e:	d8e5      	bhi.n	80073fc <USBD_GetEpDesc+0x32>
 8007430:	e000      	b.n	8007434 <USBD_GetEpDesc+0x6a>
          break;
 8007432:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007434:	693b      	ldr	r3, [r7, #16]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	881a      	ldrh	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	b29b      	uxth	r3, r3
 8007456:	4413      	add	r3, r2
 8007458:	b29a      	uxth	r2, r3
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4413      	add	r3, r2
 8007468:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800746a:	68fb      	ldr	r3, [r7, #12]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	3301      	adds	r3, #1
 800748e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007496:	8a3b      	ldrh	r3, [r7, #16]
 8007498:	021b      	lsls	r3, r3, #8
 800749a:	b21a      	sxth	r2, r3
 800749c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	b21b      	sxth	r3, r3
 80074a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80074a6:	89fb      	ldrh	r3, [r7, #14]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	371c      	adds	r7, #28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074ca:	2b40      	cmp	r3, #64	; 0x40
 80074cc:	d005      	beq.n	80074da <USBD_StdDevReq+0x26>
 80074ce:	2b40      	cmp	r3, #64	; 0x40
 80074d0:	d857      	bhi.n	8007582 <USBD_StdDevReq+0xce>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00f      	beq.n	80074f6 <USBD_StdDevReq+0x42>
 80074d6:	2b20      	cmp	r3, #32
 80074d8:	d153      	bne.n	8007582 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	32ae      	adds	r2, #174	; 0xae
 80074e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	4798      	blx	r3
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]
      break;
 80074f4:	e04a      	b.n	800758c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	785b      	ldrb	r3, [r3, #1]
 80074fa:	2b09      	cmp	r3, #9
 80074fc:	d83b      	bhi.n	8007576 <USBD_StdDevReq+0xc2>
 80074fe:	a201      	add	r2, pc, #4	; (adr r2, 8007504 <USBD_StdDevReq+0x50>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	08007559 	.word	0x08007559
 8007508:	0800756d 	.word	0x0800756d
 800750c:	08007577 	.word	0x08007577
 8007510:	08007563 	.word	0x08007563
 8007514:	08007577 	.word	0x08007577
 8007518:	08007537 	.word	0x08007537
 800751c:	0800752d 	.word	0x0800752d
 8007520:	08007577 	.word	0x08007577
 8007524:	0800754f 	.word	0x0800754f
 8007528:	08007541 	.word	0x08007541
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fa3c 	bl	80079ac <USBD_GetDescriptor>
          break;
 8007534:	e024      	b.n	8007580 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fba1 	bl	8007c80 <USBD_SetAddress>
          break;
 800753e:	e01f      	b.n	8007580 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fbe0 	bl	8007d08 <USBD_SetConfig>
 8007548:	4603      	mov	r3, r0
 800754a:	73fb      	strb	r3, [r7, #15]
          break;
 800754c:	e018      	b.n	8007580 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 fc83 	bl	8007e5c <USBD_GetConfig>
          break;
 8007556:	e013      	b.n	8007580 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007558:	6839      	ldr	r1, [r7, #0]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fcb4 	bl	8007ec8 <USBD_GetStatus>
          break;
 8007560:	e00e      	b.n	8007580 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007562:	6839      	ldr	r1, [r7, #0]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fce3 	bl	8007f30 <USBD_SetFeature>
          break;
 800756a:	e009      	b.n	8007580 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fd07 	bl	8007f82 <USBD_ClrFeature>
          break;
 8007574:	e004      	b.n	8007580 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fd5e 	bl	800803a <USBD_CtlError>
          break;
 800757e:	bf00      	nop
      }
      break;
 8007580:	e004      	b.n	800758c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fd58 	bl	800803a <USBD_CtlError>
      break;
 800758a:	bf00      	nop
  }

  return ret;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop

08007598 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075a2:	2300      	movs	r3, #0
 80075a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80075ae:	2b40      	cmp	r3, #64	; 0x40
 80075b0:	d005      	beq.n	80075be <USBD_StdItfReq+0x26>
 80075b2:	2b40      	cmp	r3, #64	; 0x40
 80075b4:	d852      	bhi.n	800765c <USBD_StdItfReq+0xc4>
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <USBD_StdItfReq+0x26>
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	d14e      	bne.n	800765c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d840      	bhi.n	800764e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	889b      	ldrh	r3, [r3, #4]
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d836      	bhi.n	8007644 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	889b      	ldrh	r3, [r3, #4]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7ff fed9 	bl	8007396 <USBD_CoreFindIF>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80075e8:	7bbb      	ldrb	r3, [r7, #14]
 80075ea:	2bff      	cmp	r3, #255	; 0xff
 80075ec:	d01d      	beq.n	800762a <USBD_StdItfReq+0x92>
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d11a      	bne.n	800762a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80075f4:	7bba      	ldrb	r2, [r7, #14]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	32ae      	adds	r2, #174	; 0xae
 80075fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00f      	beq.n	8007624 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007604:	7bba      	ldrb	r2, [r7, #14]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800760c:	7bba      	ldrb	r2, [r7, #14]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	32ae      	adds	r2, #174	; 0xae
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	4798      	blx	r3
 800761e:	4603      	mov	r3, r0
 8007620:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007622:	e004      	b.n	800762e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007624:	2303      	movs	r3, #3
 8007626:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007628:	e001      	b.n	800762e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800762a:	2303      	movs	r3, #3
 800762c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	88db      	ldrh	r3, [r3, #6]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d110      	bne.n	8007658 <USBD_StdItfReq+0xc0>
 8007636:	7bfb      	ldrb	r3, [r7, #15]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10d      	bne.n	8007658 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fdc7 	bl	80081d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007642:	e009      	b.n	8007658 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007644:	6839      	ldr	r1, [r7, #0]
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f000 fcf7 	bl	800803a <USBD_CtlError>
          break;
 800764c:	e004      	b.n	8007658 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 fcf2 	bl	800803a <USBD_CtlError>
          break;
 8007656:	e000      	b.n	800765a <USBD_StdItfReq+0xc2>
          break;
 8007658:	bf00      	nop
      }
      break;
 800765a:	e004      	b.n	8007666 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fceb 	bl	800803a <USBD_CtlError>
      break;
 8007664:	bf00      	nop
  }

  return ret;
 8007666:	7bfb      	ldrb	r3, [r7, #15]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	889b      	ldrh	r3, [r3, #4]
 8007682:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800768c:	2b40      	cmp	r3, #64	; 0x40
 800768e:	d007      	beq.n	80076a0 <USBD_StdEPReq+0x30>
 8007690:	2b40      	cmp	r3, #64	; 0x40
 8007692:	f200 817f 	bhi.w	8007994 <USBD_StdEPReq+0x324>
 8007696:	2b00      	cmp	r3, #0
 8007698:	d02a      	beq.n	80076f0 <USBD_StdEPReq+0x80>
 800769a:	2b20      	cmp	r3, #32
 800769c:	f040 817a 	bne.w	8007994 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80076a0:	7bbb      	ldrb	r3, [r7, #14]
 80076a2:	4619      	mov	r1, r3
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f7ff fe83 	bl	80073b0 <USBD_CoreFindEP>
 80076aa:	4603      	mov	r3, r0
 80076ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80076ae:	7b7b      	ldrb	r3, [r7, #13]
 80076b0:	2bff      	cmp	r3, #255	; 0xff
 80076b2:	f000 8174 	beq.w	800799e <USBD_StdEPReq+0x32e>
 80076b6:	7b7b      	ldrb	r3, [r7, #13]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f040 8170 	bne.w	800799e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80076be:	7b7a      	ldrb	r2, [r7, #13]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80076c6:	7b7a      	ldrb	r2, [r7, #13]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	32ae      	adds	r2, #174	; 0xae
 80076cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	f000 8163 	beq.w	800799e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80076d8:	7b7a      	ldrb	r2, [r7, #13]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	32ae      	adds	r2, #174	; 0xae
 80076de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	4798      	blx	r3
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80076ee:	e156      	b.n	800799e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	785b      	ldrb	r3, [r3, #1]
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d008      	beq.n	800770a <USBD_StdEPReq+0x9a>
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	f300 8145 	bgt.w	8007988 <USBD_StdEPReq+0x318>
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f000 809b 	beq.w	800783a <USBD_StdEPReq+0x1ca>
 8007704:	2b01      	cmp	r3, #1
 8007706:	d03c      	beq.n	8007782 <USBD_StdEPReq+0x112>
 8007708:	e13e      	b.n	8007988 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d002      	beq.n	800771c <USBD_StdEPReq+0xac>
 8007716:	2b03      	cmp	r3, #3
 8007718:	d016      	beq.n	8007748 <USBD_StdEPReq+0xd8>
 800771a:	e02c      	b.n	8007776 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800771c:	7bbb      	ldrb	r3, [r7, #14]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00d      	beq.n	800773e <USBD_StdEPReq+0xce>
 8007722:	7bbb      	ldrb	r3, [r7, #14]
 8007724:	2b80      	cmp	r3, #128	; 0x80
 8007726:	d00a      	beq.n	800773e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f005 fa6d 	bl	800cc0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007732:	2180      	movs	r1, #128	; 0x80
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f005 fa69 	bl	800cc0c <USBD_LL_StallEP>
 800773a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800773c:	e020      	b.n	8007780 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fc7a 	bl	800803a <USBD_CtlError>
              break;
 8007746:	e01b      	b.n	8007780 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	885b      	ldrh	r3, [r3, #2]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10e      	bne.n	800776e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00b      	beq.n	800776e <USBD_StdEPReq+0xfe>
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	2b80      	cmp	r3, #128	; 0x80
 800775a:	d008      	beq.n	800776e <USBD_StdEPReq+0xfe>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	88db      	ldrh	r3, [r3, #6]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d104      	bne.n	800776e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007764:	7bbb      	ldrb	r3, [r7, #14]
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f005 fa4f 	bl	800cc0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fd2e 	bl	80081d0 <USBD_CtlSendStatus>

              break;
 8007774:	e004      	b.n	8007780 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fc5e 	bl	800803a <USBD_CtlError>
              break;
 800777e:	bf00      	nop
          }
          break;
 8007780:	e107      	b.n	8007992 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007788:	b2db      	uxtb	r3, r3
 800778a:	2b02      	cmp	r3, #2
 800778c:	d002      	beq.n	8007794 <USBD_StdEPReq+0x124>
 800778e:	2b03      	cmp	r3, #3
 8007790:	d016      	beq.n	80077c0 <USBD_StdEPReq+0x150>
 8007792:	e04b      	b.n	800782c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007794:	7bbb      	ldrb	r3, [r7, #14]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00d      	beq.n	80077b6 <USBD_StdEPReq+0x146>
 800779a:	7bbb      	ldrb	r3, [r7, #14]
 800779c:	2b80      	cmp	r3, #128	; 0x80
 800779e:	d00a      	beq.n	80077b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	4619      	mov	r1, r3
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f005 fa31 	bl	800cc0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077aa:	2180      	movs	r1, #128	; 0x80
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f005 fa2d 	bl	800cc0c <USBD_LL_StallEP>
 80077b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077b4:	e040      	b.n	8007838 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fc3e 	bl	800803a <USBD_CtlError>
              break;
 80077be:	e03b      	b.n	8007838 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	885b      	ldrh	r3, [r3, #2]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d136      	bne.n	8007836 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80077c8:	7bbb      	ldrb	r3, [r7, #14]
 80077ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d004      	beq.n	80077dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	4619      	mov	r1, r3
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f005 fa37 	bl	800cc4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fcf7 	bl	80081d0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80077e2:	7bbb      	ldrb	r3, [r7, #14]
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7ff fde2 	bl	80073b0 <USBD_CoreFindEP>
 80077ec:	4603      	mov	r3, r0
 80077ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077f0:	7b7b      	ldrb	r3, [r7, #13]
 80077f2:	2bff      	cmp	r3, #255	; 0xff
 80077f4:	d01f      	beq.n	8007836 <USBD_StdEPReq+0x1c6>
 80077f6:	7b7b      	ldrb	r3, [r7, #13]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d11c      	bne.n	8007836 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80077fc:	7b7a      	ldrb	r2, [r7, #13]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007804:	7b7a      	ldrb	r2, [r7, #13]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	32ae      	adds	r2, #174	; 0xae
 800780a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d010      	beq.n	8007836 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007814:	7b7a      	ldrb	r2, [r7, #13]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	32ae      	adds	r2, #174	; 0xae
 800781a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	6839      	ldr	r1, [r7, #0]
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	4798      	blx	r3
 8007826:	4603      	mov	r3, r0
 8007828:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800782a:	e004      	b.n	8007836 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fc03 	bl	800803a <USBD_CtlError>
              break;
 8007834:	e000      	b.n	8007838 <USBD_StdEPReq+0x1c8>
              break;
 8007836:	bf00      	nop
          }
          break;
 8007838:	e0ab      	b.n	8007992 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b02      	cmp	r3, #2
 8007844:	d002      	beq.n	800784c <USBD_StdEPReq+0x1dc>
 8007846:	2b03      	cmp	r3, #3
 8007848:	d032      	beq.n	80078b0 <USBD_StdEPReq+0x240>
 800784a:	e097      	b.n	800797c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d007      	beq.n	8007862 <USBD_StdEPReq+0x1f2>
 8007852:	7bbb      	ldrb	r3, [r7, #14]
 8007854:	2b80      	cmp	r3, #128	; 0x80
 8007856:	d004      	beq.n	8007862 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fbed 	bl	800803a <USBD_CtlError>
                break;
 8007860:	e091      	b.n	8007986 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007866:	2b00      	cmp	r3, #0
 8007868:	da0b      	bge.n	8007882 <USBD_StdEPReq+0x212>
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007870:	4613      	mov	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	3310      	adds	r3, #16
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	4413      	add	r3, r2
 800787e:	3304      	adds	r3, #4
 8007880:	e00b      	b.n	800789a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007888:	4613      	mov	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	4413      	add	r3, r2
 8007898:	3304      	adds	r3, #4
 800789a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	2202      	movs	r2, #2
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fc37 	bl	800811c <USBD_CtlSendData>
              break;
 80078ae:	e06a      	b.n	8007986 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80078b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	da11      	bge.n	80078dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	f003 020f 	and.w	r2, r3, #15
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	4613      	mov	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4413      	add	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	440b      	add	r3, r1
 80078ca:	3324      	adds	r3, #36	; 0x24
 80078cc:	881b      	ldrh	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d117      	bne.n	8007902 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fbb0 	bl	800803a <USBD_CtlError>
                  break;
 80078da:	e054      	b.n	8007986 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	f003 020f 	and.w	r2, r3, #15
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	4613      	mov	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	440b      	add	r3, r1
 80078ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80078f2:	881b      	ldrh	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d104      	bne.n	8007902 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fb9d 	bl	800803a <USBD_CtlError>
                  break;
 8007900:	e041      	b.n	8007986 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007902:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007906:	2b00      	cmp	r3, #0
 8007908:	da0b      	bge.n	8007922 <USBD_StdEPReq+0x2b2>
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007910:	4613      	mov	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	3310      	adds	r3, #16
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	4413      	add	r3, r2
 800791e:	3304      	adds	r3, #4
 8007920:	e00b      	b.n	800793a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007928:	4613      	mov	r3, r2
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	4413      	add	r3, r2
 8007938:	3304      	adds	r3, #4
 800793a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d002      	beq.n	8007948 <USBD_StdEPReq+0x2d8>
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b80      	cmp	r3, #128	; 0x80
 8007946:	d103      	bne.n	8007950 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	e00e      	b.n	800796e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	4619      	mov	r1, r3
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f005 f997 	bl	800cc88 <USBD_LL_IsStallEP>
 800795a:	4603      	mov	r3, r0
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2201      	movs	r2, #1
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	e002      	b.n	800796e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	2202      	movs	r2, #2
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fbd1 	bl	800811c <USBD_CtlSendData>
              break;
 800797a:	e004      	b.n	8007986 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fb5b 	bl	800803a <USBD_CtlError>
              break;
 8007984:	bf00      	nop
          }
          break;
 8007986:	e004      	b.n	8007992 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fb55 	bl	800803a <USBD_CtlError>
          break;
 8007990:	bf00      	nop
      }
      break;
 8007992:	e005      	b.n	80079a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007994:	6839      	ldr	r1, [r7, #0]
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fb4f 	bl	800803a <USBD_CtlError>
      break;
 800799c:	e000      	b.n	80079a0 <USBD_StdEPReq+0x330>
      break;
 800799e:	bf00      	nop
  }

  return ret;
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	885b      	ldrh	r3, [r3, #2]
 80079c6:	0a1b      	lsrs	r3, r3, #8
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	2b06      	cmp	r3, #6
 80079ce:	f200 8128 	bhi.w	8007c22 <USBD_GetDescriptor+0x276>
 80079d2:	a201      	add	r2, pc, #4	; (adr r2, 80079d8 <USBD_GetDescriptor+0x2c>)
 80079d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d8:	080079f5 	.word	0x080079f5
 80079dc:	08007a0d 	.word	0x08007a0d
 80079e0:	08007a4d 	.word	0x08007a4d
 80079e4:	08007c23 	.word	0x08007c23
 80079e8:	08007c23 	.word	0x08007c23
 80079ec:	08007bc3 	.word	0x08007bc3
 80079f0:	08007bef 	.word	0x08007bef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	7c12      	ldrb	r2, [r2, #16]
 8007a00:	f107 0108 	add.w	r1, r7, #8
 8007a04:	4610      	mov	r0, r2
 8007a06:	4798      	blx	r3
 8007a08:	60f8      	str	r0, [r7, #12]
      break;
 8007a0a:	e112      	b.n	8007c32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	7c1b      	ldrb	r3, [r3, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10d      	bne.n	8007a30 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a1c:	f107 0208 	add.w	r2, r7, #8
 8007a20:	4610      	mov	r0, r2
 8007a22:	4798      	blx	r3
 8007a24:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	3301      	adds	r3, #1
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007a2e:	e100      	b.n	8007c32 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a38:	f107 0208 	add.w	r2, r7, #8
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4798      	blx	r3
 8007a40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	3301      	adds	r3, #1
 8007a46:	2202      	movs	r2, #2
 8007a48:	701a      	strb	r2, [r3, #0]
      break;
 8007a4a:	e0f2      	b.n	8007c32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	885b      	ldrh	r3, [r3, #2]
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	f200 80ac 	bhi.w	8007bb0 <USBD_GetDescriptor+0x204>
 8007a58:	a201      	add	r2, pc, #4	; (adr r2, 8007a60 <USBD_GetDescriptor+0xb4>)
 8007a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5e:	bf00      	nop
 8007a60:	08007a79 	.word	0x08007a79
 8007a64:	08007aad 	.word	0x08007aad
 8007a68:	08007ae1 	.word	0x08007ae1
 8007a6c:	08007b15 	.word	0x08007b15
 8007a70:	08007b49 	.word	0x08007b49
 8007a74:	08007b7d 	.word	0x08007b7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d00b      	beq.n	8007a9c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	7c12      	ldrb	r2, [r2, #16]
 8007a90:	f107 0108 	add.w	r1, r7, #8
 8007a94:	4610      	mov	r0, r2
 8007a96:	4798      	blx	r3
 8007a98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a9a:	e091      	b.n	8007bc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 facb 	bl	800803a <USBD_CtlError>
            err++;
 8007aa4:	7afb      	ldrb	r3, [r7, #11]
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aaa:	e089      	b.n	8007bc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ab2:	689b      	ldr	r3, [r3, #8]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	7c12      	ldrb	r2, [r2, #16]
 8007ac4:	f107 0108 	add.w	r1, r7, #8
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4798      	blx	r3
 8007acc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ace:	e077      	b.n	8007bc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ad0:	6839      	ldr	r1, [r7, #0]
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fab1 	bl	800803a <USBD_CtlError>
            err++;
 8007ad8:	7afb      	ldrb	r3, [r7, #11]
 8007ada:	3301      	adds	r3, #1
 8007adc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ade:	e06f      	b.n	8007bc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d00b      	beq.n	8007b04 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	7c12      	ldrb	r2, [r2, #16]
 8007af8:	f107 0108 	add.w	r1, r7, #8
 8007afc:	4610      	mov	r0, r2
 8007afe:	4798      	blx	r3
 8007b00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b02:	e05d      	b.n	8007bc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fa97 	bl	800803a <USBD_CtlError>
            err++;
 8007b0c:	7afb      	ldrb	r3, [r7, #11]
 8007b0e:	3301      	adds	r3, #1
 8007b10:	72fb      	strb	r3, [r7, #11]
          break;
 8007b12:	e055      	b.n	8007bc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b1a:	691b      	ldr	r3, [r3, #16]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00b      	beq.n	8007b38 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	7c12      	ldrb	r2, [r2, #16]
 8007b2c:	f107 0108 	add.w	r1, r7, #8
 8007b30:	4610      	mov	r0, r2
 8007b32:	4798      	blx	r3
 8007b34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b36:	e043      	b.n	8007bc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa7d 	bl	800803a <USBD_CtlError>
            err++;
 8007b40:	7afb      	ldrb	r3, [r7, #11]
 8007b42:	3301      	adds	r3, #1
 8007b44:	72fb      	strb	r3, [r7, #11]
          break;
 8007b46:	e03b      	b.n	8007bc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b4e:	695b      	ldr	r3, [r3, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00b      	beq.n	8007b6c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	7c12      	ldrb	r2, [r2, #16]
 8007b60:	f107 0108 	add.w	r1, r7, #8
 8007b64:	4610      	mov	r0, r2
 8007b66:	4798      	blx	r3
 8007b68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b6a:	e029      	b.n	8007bc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b6c:	6839      	ldr	r1, [r7, #0]
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa63 	bl	800803a <USBD_CtlError>
            err++;
 8007b74:	7afb      	ldrb	r3, [r7, #11]
 8007b76:	3301      	adds	r3, #1
 8007b78:	72fb      	strb	r3, [r7, #11]
          break;
 8007b7a:	e021      	b.n	8007bc0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00b      	beq.n	8007ba0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b8e:	699b      	ldr	r3, [r3, #24]
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	7c12      	ldrb	r2, [r2, #16]
 8007b94:	f107 0108 	add.w	r1, r7, #8
 8007b98:	4610      	mov	r0, r2
 8007b9a:	4798      	blx	r3
 8007b9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b9e:	e00f      	b.n	8007bc0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa49 	bl	800803a <USBD_CtlError>
            err++;
 8007ba8:	7afb      	ldrb	r3, [r7, #11]
 8007baa:	3301      	adds	r3, #1
 8007bac:	72fb      	strb	r3, [r7, #11]
          break;
 8007bae:	e007      	b.n	8007bc0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 fa41 	bl	800803a <USBD_CtlError>
          err++;
 8007bb8:	7afb      	ldrb	r3, [r7, #11]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007bbe:	bf00      	nop
      }
      break;
 8007bc0:	e037      	b.n	8007c32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	7c1b      	ldrb	r3, [r3, #16]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd2:	f107 0208 	add.w	r2, r7, #8
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4798      	blx	r3
 8007bda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bdc:	e029      	b.n	8007c32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fa2a 	bl	800803a <USBD_CtlError>
        err++;
 8007be6:	7afb      	ldrb	r3, [r7, #11]
 8007be8:	3301      	adds	r3, #1
 8007bea:	72fb      	strb	r3, [r7, #11]
      break;
 8007bec:	e021      	b.n	8007c32 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	7c1b      	ldrb	r3, [r3, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d10d      	bne.n	8007c12 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfe:	f107 0208 	add.w	r2, r7, #8
 8007c02:	4610      	mov	r0, r2
 8007c04:	4798      	blx	r3
 8007c06:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	2207      	movs	r2, #7
 8007c0e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c10:	e00f      	b.n	8007c32 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c12:	6839      	ldr	r1, [r7, #0]
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fa10 	bl	800803a <USBD_CtlError>
        err++;
 8007c1a:	7afb      	ldrb	r3, [r7, #11]
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c20:	e007      	b.n	8007c32 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fa08 	bl	800803a <USBD_CtlError>
      err++;
 8007c2a:	7afb      	ldrb	r3, [r7, #11]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007c30:	bf00      	nop
  }

  if (err != 0U)
 8007c32:	7afb      	ldrb	r3, [r7, #11]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d11e      	bne.n	8007c76 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	88db      	ldrh	r3, [r3, #6]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d016      	beq.n	8007c6e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007c40:	893b      	ldrh	r3, [r7, #8]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00e      	beq.n	8007c64 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	88da      	ldrh	r2, [r3, #6]
 8007c4a:	893b      	ldrh	r3, [r7, #8]
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	bf28      	it	cs
 8007c50:	4613      	movcs	r3, r2
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007c56:	893b      	ldrh	r3, [r7, #8]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	68f9      	ldr	r1, [r7, #12]
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f000 fa5d 	bl	800811c <USBD_CtlSendData>
 8007c62:	e009      	b.n	8007c78 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c64:	6839      	ldr	r1, [r7, #0]
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f9e7 	bl	800803a <USBD_CtlError>
 8007c6c:	e004      	b.n	8007c78 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 faae 	bl	80081d0 <USBD_CtlSendStatus>
 8007c74:	e000      	b.n	8007c78 <USBD_GetDescriptor+0x2cc>
    return;
 8007c76:	bf00      	nop
  }
}
 8007c78:	3710      	adds	r7, #16
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop

08007c80 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	889b      	ldrh	r3, [r3, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d131      	bne.n	8007cf6 <USBD_SetAddress+0x76>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	88db      	ldrh	r3, [r3, #6]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d12d      	bne.n	8007cf6 <USBD_SetAddress+0x76>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	885b      	ldrh	r3, [r3, #2]
 8007c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8007ca0:	d829      	bhi.n	8007cf6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	885b      	ldrh	r3, [r3, #2]
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d104      	bne.n	8007cc4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 f9bc 	bl	800803a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc2:	e01d      	b.n	8007d00 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	7bfa      	ldrb	r2, [r7, #15]
 8007cc8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ccc:	7bfb      	ldrb	r3, [r7, #15]
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f005 f805 	bl	800cce0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa7a 	bl	80081d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d004      	beq.n	8007cec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cea:	e009      	b.n	8007d00 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf4:	e004      	b.n	8007d00 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f99e 	bl	800803a <USBD_CtlError>
  }
}
 8007cfe:	bf00      	nop
 8007d00:	bf00      	nop
 8007d02:	3710      	adds	r7, #16
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	885b      	ldrh	r3, [r3, #2]
 8007d1a:	b2da      	uxtb	r2, r3
 8007d1c:	4b4e      	ldr	r3, [pc, #312]	; (8007e58 <USBD_SetConfig+0x150>)
 8007d1e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007d20:	4b4d      	ldr	r3, [pc, #308]	; (8007e58 <USBD_SetConfig+0x150>)
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d905      	bls.n	8007d34 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f985 	bl	800803a <USBD_CtlError>
    return USBD_FAIL;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e08c      	b.n	8007e4e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d002      	beq.n	8007d46 <USBD_SetConfig+0x3e>
 8007d40:	2b03      	cmp	r3, #3
 8007d42:	d029      	beq.n	8007d98 <USBD_SetConfig+0x90>
 8007d44:	e075      	b.n	8007e32 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007d46:	4b44      	ldr	r3, [pc, #272]	; (8007e58 <USBD_SetConfig+0x150>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d020      	beq.n	8007d90 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007d4e:	4b42      	ldr	r3, [pc, #264]	; (8007e58 <USBD_SetConfig+0x150>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d58:	4b3f      	ldr	r3, [pc, #252]	; (8007e58 <USBD_SetConfig+0x150>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fe ffe7 	bl	8006d32 <USBD_SetClassConfig>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d008      	beq.n	8007d80 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007d6e:	6839      	ldr	r1, [r7, #0]
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f962 	bl	800803a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2202      	movs	r2, #2
 8007d7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d7e:	e065      	b.n	8007e4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fa25 	bl	80081d0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2203      	movs	r2, #3
 8007d8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d8e:	e05d      	b.n	8007e4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 fa1d 	bl	80081d0 <USBD_CtlSendStatus>
      break;
 8007d96:	e059      	b.n	8007e4c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d98:	4b2f      	ldr	r3, [pc, #188]	; (8007e58 <USBD_SetConfig+0x150>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d112      	bne.n	8007dc6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2202      	movs	r2, #2
 8007da4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007da8:	4b2b      	ldr	r3, [pc, #172]	; (8007e58 <USBD_SetConfig+0x150>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007db2:	4b29      	ldr	r3, [pc, #164]	; (8007e58 <USBD_SetConfig+0x150>)
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f7fe ffd6 	bl	8006d6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fa06 	bl	80081d0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007dc4:	e042      	b.n	8007e4c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007dc6:	4b24      	ldr	r3, [pc, #144]	; (8007e58 <USBD_SetConfig+0x150>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d02a      	beq.n	8007e2a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7fe ffc4 	bl	8006d6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007de2:	4b1d      	ldr	r3, [pc, #116]	; (8007e58 <USBD_SetConfig+0x150>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	461a      	mov	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007dec:	4b1a      	ldr	r3, [pc, #104]	; (8007e58 <USBD_SetConfig+0x150>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7fe ff9d 	bl	8006d32 <USBD_SetClassConfig>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007dfc:	7bfb      	ldrb	r3, [r7, #15]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00f      	beq.n	8007e22 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e02:	6839      	ldr	r1, [r7, #0]
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 f918 	bl	800803a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7fe ffa9 	bl	8006d6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e20:	e014      	b.n	8007e4c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f9d4 	bl	80081d0 <USBD_CtlSendStatus>
      break;
 8007e28:	e010      	b.n	8007e4c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f9d0 	bl	80081d0 <USBD_CtlSendStatus>
      break;
 8007e30:	e00c      	b.n	8007e4c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 f900 	bl	800803a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e3a:	4b07      	ldr	r3, [pc, #28]	; (8007e58 <USBD_SetConfig+0x150>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7fe ff92 	bl	8006d6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007e46:	2303      	movs	r3, #3
 8007e48:	73fb      	strb	r3, [r7, #15]
      break;
 8007e4a:	bf00      	nop
  }

  return ret;
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	200003dc 	.word	0x200003dc

08007e5c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	88db      	ldrh	r3, [r3, #6]
 8007e6a:	2b01      	cmp	r3, #1
 8007e6c:	d004      	beq.n	8007e78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f8e2 	bl	800803a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e76:	e023      	b.n	8007ec0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	dc02      	bgt.n	8007e8a <USBD_GetConfig+0x2e>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	dc03      	bgt.n	8007e90 <USBD_GetConfig+0x34>
 8007e88:	e015      	b.n	8007eb6 <USBD_GetConfig+0x5a>
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d00b      	beq.n	8007ea6 <USBD_GetConfig+0x4a>
 8007e8e:	e012      	b.n	8007eb6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3308      	adds	r3, #8
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f93c 	bl	800811c <USBD_CtlSendData>
        break;
 8007ea4:	e00c      	b.n	8007ec0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3304      	adds	r3, #4
 8007eaa:	2201      	movs	r2, #1
 8007eac:	4619      	mov	r1, r3
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 f934 	bl	800811c <USBD_CtlSendData>
        break;
 8007eb4:	e004      	b.n	8007ec0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f8be 	bl	800803a <USBD_CtlError>
        break;
 8007ebe:	bf00      	nop
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	3b01      	subs	r3, #1
 8007edc:	2b02      	cmp	r3, #2
 8007ede:	d81e      	bhi.n	8007f1e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	88db      	ldrh	r3, [r3, #6]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d004      	beq.n	8007ef2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 f8a5 	bl	800803a <USBD_CtlError>
        break;
 8007ef0:	e01a      	b.n	8007f28 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d005      	beq.n	8007f0e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f043 0202 	orr.w	r2, r3, #2
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	330c      	adds	r3, #12
 8007f12:	2202      	movs	r2, #2
 8007f14:	4619      	mov	r1, r3
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f900 	bl	800811c <USBD_CtlSendData>
      break;
 8007f1c:	e004      	b.n	8007f28 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f88a 	bl	800803a <USBD_CtlError>
      break;
 8007f26:	bf00      	nop
  }
}
 8007f28:	bf00      	nop
 8007f2a:	3708      	adds	r7, #8
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	885b      	ldrh	r3, [r3, #2]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d107      	bne.n	8007f52 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f940 	bl	80081d0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007f50:	e013      	b.n	8007f7a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	885b      	ldrh	r3, [r3, #2]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d10b      	bne.n	8007f72 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	889b      	ldrh	r3, [r3, #4]
 8007f5e:	0a1b      	lsrs	r3, r3, #8
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f000 f930 	bl	80081d0 <USBD_CtlSendStatus>
}
 8007f70:	e003      	b.n	8007f7a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	f000 f860 	bl	800803a <USBD_CtlError>
}
 8007f7a:	bf00      	nop
 8007f7c:	3708      	adds	r7, #8
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b082      	sub	sp, #8
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	3b01      	subs	r3, #1
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d80b      	bhi.n	8007fb2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	885b      	ldrh	r3, [r3, #2]
 8007f9e:	2b01      	cmp	r3, #1
 8007fa0:	d10c      	bne.n	8007fbc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f910 	bl	80081d0 <USBD_CtlSendStatus>
      }
      break;
 8007fb0:	e004      	b.n	8007fbc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f840 	bl	800803a <USBD_CtlError>
      break;
 8007fba:	e000      	b.n	8007fbe <USBD_ClrFeature+0x3c>
      break;
 8007fbc:	bf00      	nop
  }
}
 8007fbe:	bf00      	nop
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b084      	sub	sp, #16
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	781a      	ldrb	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	781a      	ldrb	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	3301      	adds	r3, #1
 8007fee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	f7ff fa41 	bl	8007478 <SWAPBYTE>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3301      	adds	r3, #1
 8008002:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3301      	adds	r3, #1
 8008008:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f7ff fa34 	bl	8007478 <SWAPBYTE>
 8008010:	4603      	mov	r3, r0
 8008012:	461a      	mov	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	3301      	adds	r3, #1
 800801c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	3301      	adds	r3, #1
 8008022:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f7ff fa27 	bl	8007478 <SWAPBYTE>
 800802a:	4603      	mov	r3, r0
 800802c:	461a      	mov	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	80da      	strh	r2, [r3, #6]
}
 8008032:	bf00      	nop
 8008034:	3710      	adds	r7, #16
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800803a:	b580      	push	{r7, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008044:	2180      	movs	r1, #128	; 0x80
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f004 fde0 	bl	800cc0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800804c:	2100      	movs	r1, #0
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f004 fddc 	bl	800cc0c <USBD_LL_StallEP>
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b086      	sub	sp, #24
 8008060:	af00      	add	r7, sp, #0
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d036      	beq.n	80080e0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008076:	6938      	ldr	r0, [r7, #16]
 8008078:	f000 f836 	bl	80080e8 <USBD_GetLen>
 800807c:	4603      	mov	r3, r0
 800807e:	3301      	adds	r3, #1
 8008080:	b29b      	uxth	r3, r3
 8008082:	005b      	lsls	r3, r3, #1
 8008084:	b29a      	uxth	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800808a:	7dfb      	ldrb	r3, [r7, #23]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	4413      	add	r3, r2
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	7812      	ldrb	r2, [r2, #0]
 8008094:	701a      	strb	r2, [r3, #0]
  idx++;
 8008096:	7dfb      	ldrb	r3, [r7, #23]
 8008098:	3301      	adds	r3, #1
 800809a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	4413      	add	r3, r2
 80080a2:	2203      	movs	r2, #3
 80080a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
 80080a8:	3301      	adds	r3, #1
 80080aa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80080ac:	e013      	b.n	80080d6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80080ae:	7dfb      	ldrb	r3, [r7, #23]
 80080b0:	68ba      	ldr	r2, [r7, #8]
 80080b2:	4413      	add	r3, r2
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	7812      	ldrb	r2, [r2, #0]
 80080b8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	3301      	adds	r3, #1
 80080be:	613b      	str	r3, [r7, #16]
    idx++;
 80080c0:	7dfb      	ldrb	r3, [r7, #23]
 80080c2:	3301      	adds	r3, #1
 80080c4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80080c6:	7dfb      	ldrb	r3, [r7, #23]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	4413      	add	r3, r2
 80080cc:	2200      	movs	r2, #0
 80080ce:	701a      	strb	r2, [r3, #0]
    idx++;
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
 80080d2:	3301      	adds	r3, #1
 80080d4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1e7      	bne.n	80080ae <USBD_GetString+0x52>
 80080de:	e000      	b.n	80080e2 <USBD_GetString+0x86>
    return;
 80080e0:	bf00      	nop
  }
}
 80080e2:	3718      	adds	r7, #24
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80080f0:	2300      	movs	r3, #0
 80080f2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80080f8:	e005      	b.n	8008106 <USBD_GetLen+0x1e>
  {
    len++;
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
 80080fc:	3301      	adds	r3, #1
 80080fe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	3301      	adds	r3, #1
 8008104:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1f5      	bne.n	80080fa <USBD_GetLen+0x12>
  }

  return len;
 800810e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3714      	adds	r7, #20
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2202      	movs	r2, #2
 800812c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	2100      	movs	r1, #0
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f004 fdeb 	bl	800cd1e <USBD_LL_Transmit>

  return USBD_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b084      	sub	sp, #16
 8008156:	af00      	add	r7, sp, #0
 8008158:	60f8      	str	r0, [r7, #12]
 800815a:	60b9      	str	r1, [r7, #8]
 800815c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	2100      	movs	r1, #0
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f004 fdda 	bl	800cd1e <USBD_LL_Transmit>

  return USBD_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2203      	movs	r2, #3
 8008184:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68ba      	ldr	r2, [r7, #8]
 800819c:	2100      	movs	r1, #0
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f004 fdde 	bl	800cd60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3710      	adds	r7, #16
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	60f8      	str	r0, [r7, #12]
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	2100      	movs	r1, #0
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f004 fdcd 	bl	800cd60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2204      	movs	r2, #4
 80081dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80081e0:	2300      	movs	r3, #0
 80081e2:	2200      	movs	r2, #0
 80081e4:	2100      	movs	r1, #0
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f004 fd99 	bl	800cd1e <USBD_LL_Transmit>

  return USBD_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b082      	sub	sp, #8
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2205      	movs	r2, #5
 8008202:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008206:	2300      	movs	r3, #0
 8008208:	2200      	movs	r2, #0
 800820a:	2100      	movs	r1, #0
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f004 fda7 	bl	800cd60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <__NVIC_SetPriority>:
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	4603      	mov	r3, r0
 8008224:	6039      	str	r1, [r7, #0]
 8008226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800822c:	2b00      	cmp	r3, #0
 800822e:	db0a      	blt.n	8008246 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	b2da      	uxtb	r2, r3
 8008234:	490c      	ldr	r1, [pc, #48]	; (8008268 <__NVIC_SetPriority+0x4c>)
 8008236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800823a:	0112      	lsls	r2, r2, #4
 800823c:	b2d2      	uxtb	r2, r2
 800823e:	440b      	add	r3, r1
 8008240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008244:	e00a      	b.n	800825c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	b2da      	uxtb	r2, r3
 800824a:	4908      	ldr	r1, [pc, #32]	; (800826c <__NVIC_SetPriority+0x50>)
 800824c:	79fb      	ldrb	r3, [r7, #7]
 800824e:	f003 030f 	and.w	r3, r3, #15
 8008252:	3b04      	subs	r3, #4
 8008254:	0112      	lsls	r2, r2, #4
 8008256:	b2d2      	uxtb	r2, r2
 8008258:	440b      	add	r3, r1
 800825a:	761a      	strb	r2, [r3, #24]
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr
 8008268:	e000e100 	.word	0xe000e100
 800826c:	e000ed00 	.word	0xe000ed00

08008270 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008274:	2100      	movs	r1, #0
 8008276:	f06f 0004 	mvn.w	r0, #4
 800827a:	f7ff ffcf 	bl	800821c <__NVIC_SetPriority>
#endif
}
 800827e:	bf00      	nop
 8008280:	bd80      	pop	{r7, pc}
	...

08008284 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800828a:	f3ef 8305 	mrs	r3, IPSR
 800828e:	603b      	str	r3, [r7, #0]
  return(result);
 8008290:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008296:	f06f 0305 	mvn.w	r3, #5
 800829a:	607b      	str	r3, [r7, #4]
 800829c:	e00c      	b.n	80082b8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800829e:	4b0a      	ldr	r3, [pc, #40]	; (80082c8 <osKernelInitialize+0x44>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d105      	bne.n	80082b2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80082a6:	4b08      	ldr	r3, [pc, #32]	; (80082c8 <osKernelInitialize+0x44>)
 80082a8:	2201      	movs	r2, #1
 80082aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	607b      	str	r3, [r7, #4]
 80082b0:	e002      	b.n	80082b8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80082b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80082b8:	687b      	ldr	r3, [r7, #4]
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	370c      	adds	r7, #12
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	200003e0 	.word	0x200003e0

080082cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80082d2:	f3ef 8305 	mrs	r3, IPSR
 80082d6:	603b      	str	r3, [r7, #0]
  return(result);
 80082d8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d003      	beq.n	80082e6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80082de:	f06f 0305 	mvn.w	r3, #5
 80082e2:	607b      	str	r3, [r7, #4]
 80082e4:	e010      	b.n	8008308 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80082e6:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <osKernelStart+0x48>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d109      	bne.n	8008302 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80082ee:	f7ff ffbf 	bl	8008270 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80082f2:	4b08      	ldr	r3, [pc, #32]	; (8008314 <osKernelStart+0x48>)
 80082f4:	2202      	movs	r2, #2
 80082f6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80082f8:	f001 fdf2 	bl	8009ee0 <vTaskStartScheduler>
      stat = osOK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	607b      	str	r3, [r7, #4]
 8008300:	e002      	b.n	8008308 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008306:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008308:	687b      	ldr	r3, [r7, #4]
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	200003e0 	.word	0x200003e0

08008318 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008318:	b580      	push	{r7, lr}
 800831a:	b08e      	sub	sp, #56	; 0x38
 800831c:	af04      	add	r7, sp, #16
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008324:	2300      	movs	r3, #0
 8008326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008328:	f3ef 8305 	mrs	r3, IPSR
 800832c:	617b      	str	r3, [r7, #20]
  return(result);
 800832e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008330:	2b00      	cmp	r3, #0
 8008332:	d17e      	bne.n	8008432 <osThreadNew+0x11a>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d07b      	beq.n	8008432 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800833a:	2380      	movs	r3, #128	; 0x80
 800833c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800833e:	2318      	movs	r3, #24
 8008340:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008342:	2300      	movs	r3, #0
 8008344:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800834a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d045      	beq.n	80083de <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <osThreadNew+0x48>
        name = attr->name;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	699b      	ldr	r3, [r3, #24]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d008      	beq.n	8008386 <osThreadNew+0x6e>
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	2b38      	cmp	r3, #56	; 0x38
 8008378:	d805      	bhi.n	8008386 <osThreadNew+0x6e>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <osThreadNew+0x72>
        return (NULL);
 8008386:	2300      	movs	r3, #0
 8008388:	e054      	b.n	8008434 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d003      	beq.n	800839a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	695b      	ldr	r3, [r3, #20]
 8008396:	089b      	lsrs	r3, r3, #2
 8008398:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00e      	beq.n	80083c0 <osThreadNew+0xa8>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	2bcb      	cmp	r3, #203	; 0xcb
 80083a8:	d90a      	bls.n	80083c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d006      	beq.n	80083c0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	695b      	ldr	r3, [r3, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d002      	beq.n	80083c0 <osThreadNew+0xa8>
        mem = 1;
 80083ba:	2301      	movs	r3, #1
 80083bc:	61bb      	str	r3, [r7, #24]
 80083be:	e010      	b.n	80083e2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10c      	bne.n	80083e2 <osThreadNew+0xca>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d108      	bne.n	80083e2 <osThreadNew+0xca>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d104      	bne.n	80083e2 <osThreadNew+0xca>
          mem = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	61bb      	str	r3, [r7, #24]
 80083dc:	e001      	b.n	80083e2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80083de:	2300      	movs	r3, #0
 80083e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d110      	bne.n	800840a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80083f0:	9202      	str	r2, [sp, #8]
 80083f2:	9301      	str	r3, [sp, #4]
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	9300      	str	r3, [sp, #0]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	6a3a      	ldr	r2, [r7, #32]
 80083fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f001 fb1c 	bl	8009a3c <xTaskCreateStatic>
 8008404:	4603      	mov	r3, r0
 8008406:	613b      	str	r3, [r7, #16]
 8008408:	e013      	b.n	8008432 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d110      	bne.n	8008432 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	b29a      	uxth	r2, r3
 8008414:	f107 0310 	add.w	r3, r7, #16
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f001 fb67 	bl	8009af6 <xTaskCreate>
 8008428:	4603      	mov	r3, r0
 800842a:	2b01      	cmp	r3, #1
 800842c:	d001      	beq.n	8008432 <osThreadNew+0x11a>
            hTask = NULL;
 800842e:	2300      	movs	r3, #0
 8008430:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008432:	693b      	ldr	r3, [r7, #16]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3728      	adds	r7, #40	; 0x28
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	4a07      	ldr	r2, [pc, #28]	; (8008468 <vApplicationGetIdleTaskMemory+0x2c>)
 800844c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	4a06      	ldr	r2, [pc, #24]	; (800846c <vApplicationGetIdleTaskMemory+0x30>)
 8008452:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2280      	movs	r2, #128	; 0x80
 8008458:	601a      	str	r2, [r3, #0]
}
 800845a:	bf00      	nop
 800845c:	3714      	adds	r7, #20
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	200003e4 	.word	0x200003e4
 800846c:	200004b0 	.word	0x200004b0

08008470 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	4a07      	ldr	r2, [pc, #28]	; (800849c <vApplicationGetTimerTaskMemory+0x2c>)
 8008480:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	4a06      	ldr	r2, [pc, #24]	; (80084a0 <vApplicationGetTimerTaskMemory+0x30>)
 8008486:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800848e:	601a      	str	r2, [r3, #0]
}
 8008490:	bf00      	nop
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	200006b0 	.word	0x200006b0
 80084a0:	2000077c 	.word	0x2000077c

080084a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f103 0208 	add.w	r2, r3, #8
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80084bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	f103 0208 	add.w	r2, r3, #8
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f103 0208 	add.w	r2, r3, #8
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80084f2:	bf00      	nop
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	689a      	ldr	r2, [r3, #8]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	683a      	ldr	r2, [r7, #0]
 8008522:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	1c5a      	adds	r2, r3, #1
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	601a      	str	r2, [r3, #0]
}
 800853a:	bf00      	nop
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008546:	b480      	push	{r7}
 8008548:	b085      	sub	sp, #20
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800855c:	d103      	bne.n	8008566 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	691b      	ldr	r3, [r3, #16]
 8008562:	60fb      	str	r3, [r7, #12]
 8008564:	e00c      	b.n	8008580 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	3308      	adds	r3, #8
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	e002      	b.n	8008574 <vListInsert+0x2e>
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	429a      	cmp	r2, r3
 800857e:	d2f6      	bcs.n	800856e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	685a      	ldr	r2, [r3, #4]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	601a      	str	r2, [r3, #0]
}
 80085ac:	bf00      	nop
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	6892      	ldr	r2, [r2, #8]
 80085ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	6852      	ldr	r2, [r2, #4]
 80085d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d103      	bne.n	80085ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	689a      	ldr	r2, [r3, #8]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	1e5a      	subs	r2, r3, #1
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3714      	adds	r7, #20
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b084      	sub	sp, #16
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d10a      	bne.n	8008636 <xQueueGenericReset+0x2a>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	f383 8811 	msr	BASEPRI, r3
 8008628:	f3bf 8f6f 	isb	sy
 800862c:	f3bf 8f4f 	dsb	sy
 8008630:	60bb      	str	r3, [r7, #8]
}
 8008632:	bf00      	nop
 8008634:	e7fe      	b.n	8008634 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008636:	f003 fb5d 	bl	800bcf4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008642:	68f9      	ldr	r1, [r7, #12]
 8008644:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008646:	fb01 f303 	mul.w	r3, r1, r3
 800864a:	441a      	add	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008666:	3b01      	subs	r3, #1
 8008668:	68f9      	ldr	r1, [r7, #12]
 800866a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800866c:	fb01 f303 	mul.w	r3, r1, r3
 8008670:	441a      	add	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	22ff      	movs	r2, #255	; 0xff
 800867a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	22ff      	movs	r2, #255	; 0xff
 8008682:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d114      	bne.n	80086b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d01a      	beq.n	80086ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3310      	adds	r3, #16
 8008698:	4618      	mov	r0, r3
 800869a:	f001 ff49 	bl	800a530 <xTaskRemoveFromEventList>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d012      	beq.n	80086ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086a4:	4b0c      	ldr	r3, [pc, #48]	; (80086d8 <xQueueGenericReset+0xcc>)
 80086a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	e009      	b.n	80086ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3310      	adds	r3, #16
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7ff fef2 	bl	80084a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3324      	adds	r3, #36	; 0x24
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff feed 	bl	80084a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086ca:	f003 fb43 	bl	800bd54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086ce:	2301      	movs	r3, #1
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3710      	adds	r7, #16
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	e000ed04 	.word	0xe000ed04

080086dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b08e      	sub	sp, #56	; 0x38
 80086e0:	af02      	add	r7, sp, #8
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
 80086e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d10a      	bne.n	8008706 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008702:	bf00      	nop
 8008704:	e7fe      	b.n	8008704 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10a      	bne.n	8008722 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800870c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008710:	f383 8811 	msr	BASEPRI, r3
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	f3bf 8f4f 	dsb	sy
 800871c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800871e:	bf00      	nop
 8008720:	e7fe      	b.n	8008720 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <xQueueGenericCreateStatic+0x52>
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d001      	beq.n	8008732 <xQueueGenericCreateStatic+0x56>
 800872e:	2301      	movs	r3, #1
 8008730:	e000      	b.n	8008734 <xQueueGenericCreateStatic+0x58>
 8008732:	2300      	movs	r3, #0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10a      	bne.n	800874e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	623b      	str	r3, [r7, #32]
}
 800874a:	bf00      	nop
 800874c:	e7fe      	b.n	800874c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d102      	bne.n	800875a <xQueueGenericCreateStatic+0x7e>
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <xQueueGenericCreateStatic+0x82>
 800875a:	2301      	movs	r3, #1
 800875c:	e000      	b.n	8008760 <xQueueGenericCreateStatic+0x84>
 800875e:	2300      	movs	r3, #0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10a      	bne.n	800877a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	61fb      	str	r3, [r7, #28]
}
 8008776:	bf00      	nop
 8008778:	e7fe      	b.n	8008778 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800877a:	2350      	movs	r3, #80	; 0x50
 800877c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	2b50      	cmp	r3, #80	; 0x50
 8008782:	d00a      	beq.n	800879a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	61bb      	str	r3, [r7, #24]
}
 8008796:	bf00      	nop
 8008798:	e7fe      	b.n	8008798 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800879a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80087a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d00d      	beq.n	80087c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80087a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80087ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80087b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	4613      	mov	r3, r2
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	68b9      	ldr	r1, [r7, #8]
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f000 f83f 	bl	8008840 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80087c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3730      	adds	r7, #48	; 0x30
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08a      	sub	sp, #40	; 0x28
 80087d0:	af02      	add	r7, sp, #8
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10a      	bne.n	80087f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	613b      	str	r3, [r7, #16]
}
 80087f2:	bf00      	nop
 80087f4:	e7fe      	b.n	80087f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	fb02 f303 	mul.w	r3, r2, r3
 80087fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	3350      	adds	r3, #80	; 0x50
 8008804:	4618      	mov	r0, r3
 8008806:	f003 fb97 	bl	800bf38 <pvPortMalloc>
 800880a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d011      	beq.n	8008836 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	3350      	adds	r3, #80	; 0x50
 800881a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008824:	79fa      	ldrb	r2, [r7, #7]
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	4613      	mov	r3, r2
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	68b9      	ldr	r1, [r7, #8]
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 f805 	bl	8008840 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008836:	69bb      	ldr	r3, [r7, #24]
	}
 8008838:	4618      	mov	r0, r3
 800883a:	3720      	adds	r7, #32
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d103      	bne.n	800885c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008854:	69bb      	ldr	r3, [r7, #24]
 8008856:	69ba      	ldr	r2, [r7, #24]
 8008858:	601a      	str	r2, [r3, #0]
 800885a:	e002      	b.n	8008862 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800886e:	2101      	movs	r1, #1
 8008870:	69b8      	ldr	r0, [r7, #24]
 8008872:	f7ff fecb 	bl	800860c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008876:	69bb      	ldr	r3, [r7, #24]
 8008878:	78fa      	ldrb	r2, [r7, #3]
 800887a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800887e:	bf00      	nop
 8008880:	3710      	adds	r7, #16
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
	...

08008888 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b08e      	sub	sp, #56	; 0x38
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008896:	2300      	movs	r3, #0
 8008898:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10a      	bne.n	80088ba <xQueueGenericSend+0x32>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80088b6:	bf00      	nop
 80088b8:	e7fe      	b.n	80088b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d103      	bne.n	80088c8 <xQueueGenericSend+0x40>
 80088c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d101      	bne.n	80088cc <xQueueGenericSend+0x44>
 80088c8:	2301      	movs	r3, #1
 80088ca:	e000      	b.n	80088ce <xQueueGenericSend+0x46>
 80088cc:	2300      	movs	r3, #0
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <xQueueGenericSend+0x60>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80088e4:	bf00      	nop
 80088e6:	e7fe      	b.n	80088e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d103      	bne.n	80088f6 <xQueueGenericSend+0x6e>
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d101      	bne.n	80088fa <xQueueGenericSend+0x72>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e000      	b.n	80088fc <xQueueGenericSend+0x74>
 80088fa:	2300      	movs	r3, #0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10a      	bne.n	8008916 <xQueueGenericSend+0x8e>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	623b      	str	r3, [r7, #32]
}
 8008912:	bf00      	nop
 8008914:	e7fe      	b.n	8008914 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008916:	f002 f8b1 	bl	800aa7c <xTaskGetSchedulerState>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d102      	bne.n	8008926 <xQueueGenericSend+0x9e>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <xQueueGenericSend+0xa2>
 8008926:	2301      	movs	r3, #1
 8008928:	e000      	b.n	800892c <xQueueGenericSend+0xa4>
 800892a:	2300      	movs	r3, #0
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10a      	bne.n	8008946 <xQueueGenericSend+0xbe>
	__asm volatile
 8008930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008934:	f383 8811 	msr	BASEPRI, r3
 8008938:	f3bf 8f6f 	isb	sy
 800893c:	f3bf 8f4f 	dsb	sy
 8008940:	61fb      	str	r3, [r7, #28]
}
 8008942:	bf00      	nop
 8008944:	e7fe      	b.n	8008944 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008946:	f003 f9d5 	bl	800bcf4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008952:	429a      	cmp	r2, r3
 8008954:	d302      	bcc.n	800895c <xQueueGenericSend+0xd4>
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2b02      	cmp	r3, #2
 800895a:	d129      	bne.n	80089b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800895c:	683a      	ldr	r2, [r7, #0]
 800895e:	68b9      	ldr	r1, [r7, #8]
 8008960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008962:	f000 fbbb 	bl	80090dc <prvCopyDataToQueue>
 8008966:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	2b00      	cmp	r3, #0
 800896e:	d010      	beq.n	8008992 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008972:	3324      	adds	r3, #36	; 0x24
 8008974:	4618      	mov	r0, r3
 8008976:	f001 fddb 	bl	800a530 <xTaskRemoveFromEventList>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d013      	beq.n	80089a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008980:	4b3f      	ldr	r3, [pc, #252]	; (8008a80 <xQueueGenericSend+0x1f8>)
 8008982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008986:	601a      	str	r2, [r3, #0]
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	e00a      	b.n	80089a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008994:	2b00      	cmp	r3, #0
 8008996:	d007      	beq.n	80089a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008998:	4b39      	ldr	r3, [pc, #228]	; (8008a80 <xQueueGenericSend+0x1f8>)
 800899a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800899e:	601a      	str	r2, [r3, #0]
 80089a0:	f3bf 8f4f 	dsb	sy
 80089a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80089a8:	f003 f9d4 	bl	800bd54 <vPortExitCritical>
				return pdPASS;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e063      	b.n	8008a78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d103      	bne.n	80089be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80089b6:	f003 f9cd 	bl	800bd54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	e05c      	b.n	8008a78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d106      	bne.n	80089d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089c4:	f107 0314 	add.w	r3, r7, #20
 80089c8:	4618      	mov	r0, r3
 80089ca:	f001 fe15 	bl	800a5f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089ce:	2301      	movs	r3, #1
 80089d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089d2:	f003 f9bf 	bl	800bd54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80089d6:	f001 faf3 	bl	8009fc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80089da:	f003 f98b 	bl	800bcf4 <vPortEnterCritical>
 80089de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80089e4:	b25b      	sxtb	r3, r3
 80089e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089ea:	d103      	bne.n	80089f4 <xQueueGenericSend+0x16c>
 80089ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ee:	2200      	movs	r2, #0
 80089f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089fa:	b25b      	sxtb	r3, r3
 80089fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a00:	d103      	bne.n	8008a0a <xQueueGenericSend+0x182>
 8008a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a0a:	f003 f9a3 	bl	800bd54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a0e:	1d3a      	adds	r2, r7, #4
 8008a10:	f107 0314 	add.w	r3, r7, #20
 8008a14:	4611      	mov	r1, r2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f001 fe04 	bl	800a624 <xTaskCheckForTimeOut>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d124      	bne.n	8008a6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008a22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a24:	f000 fc52 	bl	80092cc <prvIsQueueFull>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d018      	beq.n	8008a60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	3310      	adds	r3, #16
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	4611      	mov	r1, r2
 8008a36:	4618      	mov	r0, r3
 8008a38:	f001 fd2a 	bl	800a490 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a3e:	f000 fbdd 	bl	80091fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008a42:	f001 facb 	bl	8009fdc <xTaskResumeAll>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f47f af7c 	bne.w	8008946 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008a4e:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <xQueueGenericSend+0x1f8>)
 8008a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a54:	601a      	str	r2, [r3, #0]
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	e772      	b.n	8008946 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a62:	f000 fbcb 	bl	80091fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a66:	f001 fab9 	bl	8009fdc <xTaskResumeAll>
 8008a6a:	e76c      	b.n	8008946 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a6e:	f000 fbc5 	bl	80091fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a72:	f001 fab3 	bl	8009fdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008a76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3738      	adds	r7, #56	; 0x38
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	e000ed04 	.word	0xe000ed04

08008a84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b090      	sub	sp, #64	; 0x40
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
 8008a90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d10a      	bne.n	8008ab2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa0:	f383 8811 	msr	BASEPRI, r3
 8008aa4:	f3bf 8f6f 	isb	sy
 8008aa8:	f3bf 8f4f 	dsb	sy
 8008aac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008aae:	bf00      	nop
 8008ab0:	e7fe      	b.n	8008ab0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d103      	bne.n	8008ac0 <xQueueGenericSendFromISR+0x3c>
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d101      	bne.n	8008ac4 <xQueueGenericSendFromISR+0x40>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e000      	b.n	8008ac6 <xQueueGenericSendFromISR+0x42>
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10a      	bne.n	8008ae0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008adc:	bf00      	nop
 8008ade:	e7fe      	b.n	8008ade <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d103      	bne.n	8008aee <xQueueGenericSendFromISR+0x6a>
 8008ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d101      	bne.n	8008af2 <xQueueGenericSendFromISR+0x6e>
 8008aee:	2301      	movs	r3, #1
 8008af0:	e000      	b.n	8008af4 <xQueueGenericSendFromISR+0x70>
 8008af2:	2300      	movs	r3, #0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d10a      	bne.n	8008b0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008afc:	f383 8811 	msr	BASEPRI, r3
 8008b00:	f3bf 8f6f 	isb	sy
 8008b04:	f3bf 8f4f 	dsb	sy
 8008b08:	623b      	str	r3, [r7, #32]
}
 8008b0a:	bf00      	nop
 8008b0c:	e7fe      	b.n	8008b0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008b0e:	f003 f9d3 	bl	800beb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008b12:	f3ef 8211 	mrs	r2, BASEPRI
 8008b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	61fa      	str	r2, [r7, #28]
 8008b28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008b2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d302      	bcc.n	8008b40 <xQueueGenericSendFromISR+0xbc>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b02      	cmp	r3, #2
 8008b3e:	d12f      	bne.n	8008ba0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b50:	683a      	ldr	r2, [r7, #0]
 8008b52:	68b9      	ldr	r1, [r7, #8]
 8008b54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b56:	f000 fac1 	bl	80090dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008b5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b62:	d112      	bne.n	8008b8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d016      	beq.n	8008b9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b6e:	3324      	adds	r3, #36	; 0x24
 8008b70:	4618      	mov	r0, r3
 8008b72:	f001 fcdd 	bl	800a530 <xTaskRemoveFromEventList>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00e      	beq.n	8008b9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00b      	beq.n	8008b9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	e007      	b.n	8008b9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008b8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008b8e:	3301      	adds	r3, #1
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	b25a      	sxtb	r2, r3
 8008b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008b9e:	e001      	b.n	8008ba4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ba6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008bae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3740      	adds	r7, #64	; 0x40
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b08e      	sub	sp, #56	; 0x38
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d10a      	bne.n	8008be4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	623b      	str	r3, [r7, #32]
}
 8008be0:	bf00      	nop
 8008be2:	e7fe      	b.n	8008be2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d00a      	beq.n	8008c02 <xQueueGiveFromISR+0x48>
	__asm volatile
 8008bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf0:	f383 8811 	msr	BASEPRI, r3
 8008bf4:	f3bf 8f6f 	isb	sy
 8008bf8:	f3bf 8f4f 	dsb	sy
 8008bfc:	61fb      	str	r3, [r7, #28]
}
 8008bfe:	bf00      	nop
 8008c00:	e7fe      	b.n	8008c00 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d103      	bne.n	8008c12 <xQueueGiveFromISR+0x58>
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d101      	bne.n	8008c16 <xQueueGiveFromISR+0x5c>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e000      	b.n	8008c18 <xQueueGiveFromISR+0x5e>
 8008c16:	2300      	movs	r3, #0
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10a      	bne.n	8008c32 <xQueueGiveFromISR+0x78>
	__asm volatile
 8008c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c20:	f383 8811 	msr	BASEPRI, r3
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	61bb      	str	r3, [r7, #24]
}
 8008c2e:	bf00      	nop
 8008c30:	e7fe      	b.n	8008c30 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008c32:	f003 f941 	bl	800beb8 <vPortValidateInterruptPriority>
	__asm volatile
 8008c36:	f3ef 8211 	mrs	r2, BASEPRI
 8008c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3e:	f383 8811 	msr	BASEPRI, r3
 8008c42:	f3bf 8f6f 	isb	sy
 8008c46:	f3bf 8f4f 	dsb	sy
 8008c4a:	617a      	str	r2, [r7, #20]
 8008c4c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008c4e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008c50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d22b      	bcs.n	8008cba <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6e:	1c5a      	adds	r2, r3, #1
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008c74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008c78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c7c:	d112      	bne.n	8008ca4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d016      	beq.n	8008cb4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c88:	3324      	adds	r3, #36	; 0x24
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f001 fc50 	bl	800a530 <xTaskRemoveFromEventList>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00e      	beq.n	8008cb4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00b      	beq.n	8008cb4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	e007      	b.n	8008cb4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ca8:	3301      	adds	r3, #1
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	b25a      	sxtb	r2, r3
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8008cb8:	e001      	b.n	8008cbe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	637b      	str	r3, [r7, #52]	; 0x34
 8008cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f383 8811 	msr	BASEPRI, r3
}
 8008cc8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3738      	adds	r7, #56	; 0x38
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08c      	sub	sp, #48	; 0x30
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10a      	bne.n	8008d04 <xQueueReceive+0x30>
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	623b      	str	r3, [r7, #32]
}
 8008d00:	bf00      	nop
 8008d02:	e7fe      	b.n	8008d02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d103      	bne.n	8008d12 <xQueueReceive+0x3e>
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <xQueueReceive+0x42>
 8008d12:	2301      	movs	r3, #1
 8008d14:	e000      	b.n	8008d18 <xQueueReceive+0x44>
 8008d16:	2300      	movs	r3, #0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10a      	bne.n	8008d32 <xQueueReceive+0x5e>
	__asm volatile
 8008d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	61fb      	str	r3, [r7, #28]
}
 8008d2e:	bf00      	nop
 8008d30:	e7fe      	b.n	8008d30 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008d32:	f001 fea3 	bl	800aa7c <xTaskGetSchedulerState>
 8008d36:	4603      	mov	r3, r0
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d102      	bne.n	8008d42 <xQueueReceive+0x6e>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <xQueueReceive+0x72>
 8008d42:	2301      	movs	r3, #1
 8008d44:	e000      	b.n	8008d48 <xQueueReceive+0x74>
 8008d46:	2300      	movs	r3, #0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10a      	bne.n	8008d62 <xQueueReceive+0x8e>
	__asm volatile
 8008d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d50:	f383 8811 	msr	BASEPRI, r3
 8008d54:	f3bf 8f6f 	isb	sy
 8008d58:	f3bf 8f4f 	dsb	sy
 8008d5c:	61bb      	str	r3, [r7, #24]
}
 8008d5e:	bf00      	nop
 8008d60:	e7fe      	b.n	8008d60 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008d62:	f002 ffc7 	bl	800bcf4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d01f      	beq.n	8008db2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008d72:	68b9      	ldr	r1, [r7, #8]
 8008d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d76:	f000 fa1b 	bl	80091b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	1e5a      	subs	r2, r3, #1
 8008d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d80:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00f      	beq.n	8008daa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8c:	3310      	adds	r3, #16
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 fbce 	bl	800a530 <xTaskRemoveFromEventList>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d007      	beq.n	8008daa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008d9a:	4b3d      	ldr	r3, [pc, #244]	; (8008e90 <xQueueReceive+0x1bc>)
 8008d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008daa:	f002 ffd3 	bl	800bd54 <vPortExitCritical>
				return pdPASS;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e069      	b.n	8008e86 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d103      	bne.n	8008dc0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008db8:	f002 ffcc 	bl	800bd54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	e062      	b.n	8008e86 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d106      	bne.n	8008dd4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008dc6:	f107 0310 	add.w	r3, r7, #16
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f001 fc14 	bl	800a5f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008dd4:	f002 ffbe 	bl	800bd54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008dd8:	f001 f8f2 	bl	8009fc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ddc:	f002 ff8a 	bl	800bcf4 <vPortEnterCritical>
 8008de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008de6:	b25b      	sxtb	r3, r3
 8008de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dec:	d103      	bne.n	8008df6 <xQueueReceive+0x122>
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dfc:	b25b      	sxtb	r3, r3
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e02:	d103      	bne.n	8008e0c <xQueueReceive+0x138>
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e0c:	f002 ffa2 	bl	800bd54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e10:	1d3a      	adds	r2, r7, #4
 8008e12:	f107 0310 	add.w	r3, r7, #16
 8008e16:	4611      	mov	r1, r2
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f001 fc03 	bl	800a624 <xTaskCheckForTimeOut>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d123      	bne.n	8008e6c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e26:	f000 fa3b 	bl	80092a0 <prvIsQueueEmpty>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d017      	beq.n	8008e60 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	3324      	adds	r3, #36	; 0x24
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	4611      	mov	r1, r2
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f001 fb29 	bl	800a490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008e3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e40:	f000 f9dc 	bl	80091fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008e44:	f001 f8ca 	bl	8009fdc <xTaskResumeAll>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d189      	bne.n	8008d62 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008e4e:	4b10      	ldr	r3, [pc, #64]	; (8008e90 <xQueueReceive+0x1bc>)
 8008e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e54:	601a      	str	r2, [r3, #0]
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	e780      	b.n	8008d62 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e62:	f000 f9cb 	bl	80091fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008e66:	f001 f8b9 	bl	8009fdc <xTaskResumeAll>
 8008e6a:	e77a      	b.n	8008d62 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e6e:	f000 f9c5 	bl	80091fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008e72:	f001 f8b3 	bl	8009fdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e78:	f000 fa12 	bl	80092a0 <prvIsQueueEmpty>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	f43f af6f 	beq.w	8008d62 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008e84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3730      	adds	r7, #48	; 0x30
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	e000ed04 	.word	0xe000ed04

08008e94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b08e      	sub	sp, #56	; 0x38
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	623b      	str	r3, [r7, #32]
}
 8008ec2:	bf00      	nop
 8008ec4:	e7fe      	b.n	8008ec4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00a      	beq.n	8008ee4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	61fb      	str	r3, [r7, #28]
}
 8008ee0:	bf00      	nop
 8008ee2:	e7fe      	b.n	8008ee2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ee4:	f001 fdca 	bl	800aa7c <xTaskGetSchedulerState>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d102      	bne.n	8008ef4 <xQueueSemaphoreTake+0x60>
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <xQueueSemaphoreTake+0x64>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e000      	b.n	8008efa <xQueueSemaphoreTake+0x66>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d10a      	bne.n	8008f14 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	f383 8811 	msr	BASEPRI, r3
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	f3bf 8f4f 	dsb	sy
 8008f0e:	61bb      	str	r3, [r7, #24]
}
 8008f10:	bf00      	nop
 8008f12:	e7fe      	b.n	8008f12 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f14:	f002 feee 	bl	800bcf4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f1c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d024      	beq.n	8008f6e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f26:	1e5a      	subs	r2, r3, #1
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d104      	bne.n	8008f3e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008f34:	f001 ffd4 	bl	800aee0 <pvTaskIncrementMutexHeldCount>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d00f      	beq.n	8008f66 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f48:	3310      	adds	r3, #16
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f001 faf0 	bl	800a530 <xTaskRemoveFromEventList>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d007      	beq.n	8008f66 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008f56:	4b54      	ldr	r3, [pc, #336]	; (80090a8 <xQueueSemaphoreTake+0x214>)
 8008f58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008f66:	f002 fef5 	bl	800bd54 <vPortExitCritical>
				return pdPASS;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e097      	b.n	800909e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d111      	bne.n	8008f98 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	617b      	str	r3, [r7, #20]
}
 8008f8c:	bf00      	nop
 8008f8e:	e7fe      	b.n	8008f8e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008f90:	f002 fee0 	bl	800bd54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008f94:	2300      	movs	r3, #0
 8008f96:	e082      	b.n	800909e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f9e:	f107 030c 	add.w	r3, r7, #12
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f001 fb28 	bl	800a5f8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fac:	f002 fed2 	bl	800bd54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fb0:	f001 f806 	bl	8009fc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fb4:	f002 fe9e 	bl	800bcf4 <vPortEnterCritical>
 8008fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008fbe:	b25b      	sxtb	r3, r3
 8008fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fc4:	d103      	bne.n	8008fce <xQueueSemaphoreTake+0x13a>
 8008fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fd4:	b25b      	sxtb	r3, r3
 8008fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fda:	d103      	bne.n	8008fe4 <xQueueSemaphoreTake+0x150>
 8008fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fe4:	f002 feb6 	bl	800bd54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fe8:	463a      	mov	r2, r7
 8008fea:	f107 030c 	add.w	r3, r7, #12
 8008fee:	4611      	mov	r1, r2
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f001 fb17 	bl	800a624 <xTaskCheckForTimeOut>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d132      	bne.n	8009062 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ffe:	f000 f94f 	bl	80092a0 <prvIsQueueEmpty>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d026      	beq.n	8009056 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d109      	bne.n	8009024 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009010:	f002 fe70 	bl	800bcf4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	4618      	mov	r0, r3
 800901a:	f001 fd4d 	bl	800aab8 <xTaskPriorityInherit>
 800901e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009020:	f002 fe98 	bl	800bd54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009026:	3324      	adds	r3, #36	; 0x24
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	4611      	mov	r1, r2
 800902c:	4618      	mov	r0, r3
 800902e:	f001 fa2f 	bl	800a490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009032:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009034:	f000 f8e2 	bl	80091fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009038:	f000 ffd0 	bl	8009fdc <xTaskResumeAll>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	f47f af68 	bne.w	8008f14 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009044:	4b18      	ldr	r3, [pc, #96]	; (80090a8 <xQueueSemaphoreTake+0x214>)
 8009046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800904a:	601a      	str	r2, [r3, #0]
 800904c:	f3bf 8f4f 	dsb	sy
 8009050:	f3bf 8f6f 	isb	sy
 8009054:	e75e      	b.n	8008f14 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009056:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009058:	f000 f8d0 	bl	80091fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800905c:	f000 ffbe 	bl	8009fdc <xTaskResumeAll>
 8009060:	e758      	b.n	8008f14 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009062:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009064:	f000 f8ca 	bl	80091fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009068:	f000 ffb8 	bl	8009fdc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800906c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800906e:	f000 f917 	bl	80092a0 <prvIsQueueEmpty>
 8009072:	4603      	mov	r3, r0
 8009074:	2b00      	cmp	r3, #0
 8009076:	f43f af4d 	beq.w	8008f14 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00d      	beq.n	800909c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009080:	f002 fe38 	bl	800bcf4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009084:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009086:	f000 f811 	bl	80090ac <prvGetDisinheritPriorityAfterTimeout>
 800908a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800908c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009092:	4618      	mov	r0, r3
 8009094:	f001 fde6 	bl	800ac64 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009098:	f002 fe5c 	bl	800bd54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800909c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3738      	adds	r7, #56	; 0x38
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	e000ed04 	.word	0xe000ed04

080090ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80090ac:	b480      	push	{r7}
 80090ae:	b085      	sub	sp, #20
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d006      	beq.n	80090ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	e001      	b.n	80090ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80090ca:	2300      	movs	r3, #0
 80090cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80090ce:	68fb      	ldr	r3, [r7, #12]
	}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80090e8:	2300      	movs	r3, #0
 80090ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10d      	bne.n	8009116 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d14d      	bne.n	800919e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	4618      	mov	r0, r3
 8009108:	f001 fd3e 	bl	800ab88 <xTaskPriorityDisinherit>
 800910c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	609a      	str	r2, [r3, #8]
 8009114:	e043      	b.n	800919e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d119      	bne.n	8009150 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6858      	ldr	r0, [r3, #4]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009124:	461a      	mov	r2, r3
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	f003 febe 	bl	800cea8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	685a      	ldr	r2, [r3, #4]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009134:	441a      	add	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	685a      	ldr	r2, [r3, #4]
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	429a      	cmp	r2, r3
 8009144:	d32b      	bcc.n	800919e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	605a      	str	r2, [r3, #4]
 800914e:	e026      	b.n	800919e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	68d8      	ldr	r0, [r3, #12]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009158:	461a      	mov	r2, r3
 800915a:	68b9      	ldr	r1, [r7, #8]
 800915c:	f003 fea4 	bl	800cea8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	68da      	ldr	r2, [r3, #12]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009168:	425b      	negs	r3, r3
 800916a:	441a      	add	r2, r3
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	68da      	ldr	r2, [r3, #12]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	429a      	cmp	r2, r3
 800917a:	d207      	bcs.n	800918c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	689a      	ldr	r2, [r3, #8]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009184:	425b      	negs	r3, r3
 8009186:	441a      	add	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d105      	bne.n	800919e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d002      	beq.n	800919e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	3b01      	subs	r3, #1
 800919c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	1c5a      	adds	r2, r3, #1
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80091a6:	697b      	ldr	r3, [r7, #20]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d018      	beq.n	80091f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	441a      	add	r2, r3
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68da      	ldr	r2, [r3, #12]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d303      	bcc.n	80091e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681a      	ldr	r2, [r3, #0]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68d9      	ldr	r1, [r3, #12]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ec:	461a      	mov	r2, r3
 80091ee:	6838      	ldr	r0, [r7, #0]
 80091f0:	f003 fe5a 	bl	800cea8 <memcpy>
	}
}
 80091f4:	bf00      	nop
 80091f6:	3708      	adds	r7, #8
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009204:	f002 fd76 	bl	800bcf4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800920e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009210:	e011      	b.n	8009236 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009216:	2b00      	cmp	r3, #0
 8009218:	d012      	beq.n	8009240 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	3324      	adds	r3, #36	; 0x24
 800921e:	4618      	mov	r0, r3
 8009220:	f001 f986 	bl	800a530 <xTaskRemoveFromEventList>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800922a:	f001 fa5d 	bl	800a6e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800922e:	7bfb      	ldrb	r3, [r7, #15]
 8009230:	3b01      	subs	r3, #1
 8009232:	b2db      	uxtb	r3, r3
 8009234:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800923a:	2b00      	cmp	r3, #0
 800923c:	dce9      	bgt.n	8009212 <prvUnlockQueue+0x16>
 800923e:	e000      	b.n	8009242 <prvUnlockQueue+0x46>
					break;
 8009240:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	22ff      	movs	r2, #255	; 0xff
 8009246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800924a:	f002 fd83 	bl	800bd54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800924e:	f002 fd51 	bl	800bcf4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009258:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800925a:	e011      	b.n	8009280 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	691b      	ldr	r3, [r3, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d012      	beq.n	800928a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	3310      	adds	r3, #16
 8009268:	4618      	mov	r0, r3
 800926a:	f001 f961 	bl	800a530 <xTaskRemoveFromEventList>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009274:	f001 fa38 	bl	800a6e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009278:	7bbb      	ldrb	r3, [r7, #14]
 800927a:	3b01      	subs	r3, #1
 800927c:	b2db      	uxtb	r3, r3
 800927e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009280:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009284:	2b00      	cmp	r3, #0
 8009286:	dce9      	bgt.n	800925c <prvUnlockQueue+0x60>
 8009288:	e000      	b.n	800928c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800928a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	22ff      	movs	r2, #255	; 0xff
 8009290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009294:	f002 fd5e 	bl	800bd54 <vPortExitCritical>
}
 8009298:	bf00      	nop
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092a8:	f002 fd24 	bl	800bcf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d102      	bne.n	80092ba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80092b4:	2301      	movs	r3, #1
 80092b6:	60fb      	str	r3, [r7, #12]
 80092b8:	e001      	b.n	80092be <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80092ba:	2300      	movs	r3, #0
 80092bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092be:	f002 fd49 	bl	800bd54 <vPortExitCritical>

	return xReturn;
 80092c2:	68fb      	ldr	r3, [r7, #12]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3710      	adds	r7, #16
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80092d4:	f002 fd0e 	bl	800bcf4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d102      	bne.n	80092ea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80092e4:	2301      	movs	r3, #1
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	e001      	b.n	80092ee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80092ea:	2300      	movs	r3, #0
 80092ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80092ee:	f002 fd31 	bl	800bd54 <vPortExitCritical>

	return xReturn;
 80092f2:	68fb      	ldr	r3, [r7, #12]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009306:	2300      	movs	r3, #0
 8009308:	60fb      	str	r3, [r7, #12]
 800930a:	e014      	b.n	8009336 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800930c:	4a0f      	ldr	r2, [pc, #60]	; (800934c <vQueueAddToRegistry+0x50>)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10b      	bne.n	8009330 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009318:	490c      	ldr	r1, [pc, #48]	; (800934c <vQueueAddToRegistry+0x50>)
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	683a      	ldr	r2, [r7, #0]
 800931e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009322:	4a0a      	ldr	r2, [pc, #40]	; (800934c <vQueueAddToRegistry+0x50>)
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	00db      	lsls	r3, r3, #3
 8009328:	4413      	add	r3, r2
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800932e:	e006      	b.n	800933e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	3301      	adds	r3, #1
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2b07      	cmp	r3, #7
 800933a:	d9e7      	bls.n	800930c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800933c:	bf00      	nop
 800933e:	bf00      	nop
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	20000b7c 	.word	0x20000b7c

08009350 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009360:	f002 fcc8 	bl	800bcf4 <vPortEnterCritical>
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800936a:	b25b      	sxtb	r3, r3
 800936c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009370:	d103      	bne.n	800937a <vQueueWaitForMessageRestricted+0x2a>
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	2200      	movs	r2, #0
 8009376:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009380:	b25b      	sxtb	r3, r3
 8009382:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009386:	d103      	bne.n	8009390 <vQueueWaitForMessageRestricted+0x40>
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009390:	f002 fce0 	bl	800bd54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009398:	2b00      	cmp	r3, #0
 800939a:	d106      	bne.n	80093aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	3324      	adds	r3, #36	; 0x24
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	68b9      	ldr	r1, [r7, #8]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f001 f897 	bl	800a4d8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80093aa:	6978      	ldr	r0, [r7, #20]
 80093ac:	f7ff ff26 	bl	80091fc <prvUnlockQueue>
	}
 80093b0:	bf00      	nop
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b08c      	sub	sp, #48	; 0x30
 80093bc:	af02      	add	r7, sp, #8
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d110      	bne.n	80093ec <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80093ca:	2301      	movs	r3, #1
 80093cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b04      	cmp	r3, #4
 80093d4:	d81b      	bhi.n	800940e <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80093d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093da:	f383 8811 	msr	BASEPRI, r3
 80093de:	f3bf 8f6f 	isb	sy
 80093e2:	f3bf 8f4f 	dsb	sy
 80093e6:	61fb      	str	r3, [r7, #28]
}
 80093e8:	bf00      	nop
 80093ea:	e7fe      	b.n	80093ea <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80093ec:	2300      	movs	r3, #0
 80093ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10a      	bne.n	800940e <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	61bb      	str	r3, [r7, #24]
}
 800940a:	bf00      	nop
 800940c:	e7fe      	b.n	800940c <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800940e:	68ba      	ldr	r2, [r7, #8]
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	429a      	cmp	r2, r3
 8009414:	d90a      	bls.n	800942c <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8009416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941a:	f383 8811 	msr	BASEPRI, r3
 800941e:	f3bf 8f6f 	isb	sy
 8009422:	f3bf 8f4f 	dsb	sy
 8009426:	617b      	str	r3, [r7, #20]
}
 8009428:	bf00      	nop
 800942a:	e7fe      	b.n	800942a <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d101      	bne.n	8009436 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8009432:	2301      	movs	r3, #1
 8009434:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	3301      	adds	r3, #1
 800943a:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	3324      	adds	r3, #36	; 0x24
 8009440:	4618      	mov	r0, r3
 8009442:	f002 fd79 	bl	800bf38 <pvPortMalloc>
 8009446:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00a      	beq.n	8009464 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8009454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	6a38      	ldr	r0, [r7, #32]
 8009460:	f000 fab9 	bl	80099d6 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8009464:	6a3b      	ldr	r3, [r7, #32]
	}
 8009466:	4618      	mov	r0, r3
 8009468:	3728      	adds	r7, #40	; 0x28
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800946e:	b480      	push	{r7}
 8009470:	b087      	sub	sp, #28
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d10a      	bne.n	8009496 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8009480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009484:	f383 8811 	msr	BASEPRI, r3
 8009488:	f3bf 8f6f 	isb	sy
 800948c:	f3bf 8f4f 	dsb	sy
 8009490:	60fb      	str	r3, [r7, #12]
}
 8009492:	bf00      	nop
 8009494:	e7fe      	b.n	8009494 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	689a      	ldr	r2, [r3, #8]
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4413      	add	r3, r2
 80094a0:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	3b01      	subs	r3, #1
 80094b0:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	697a      	ldr	r2, [r7, #20]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d304      	bcc.n	80094c6 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 80094c6:	697b      	ldr	r3, [r7, #20]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	371c      	adds	r7, #28
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b090      	sub	sp, #64	; 0x40
 80094d8:	af02      	add	r7, sp, #8
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
 80094e0:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10a      	bne.n	8009506 <xStreamBufferSendFromISR+0x32>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	623b      	str	r3, [r7, #32]
}
 8009502:	bf00      	nop
 8009504:	e7fe      	b.n	8009504 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8009506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10a      	bne.n	8009522 <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 800950c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009510:	f383 8811 	msr	BASEPRI, r3
 8009514:	f3bf 8f6f 	isb	sy
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	61fb      	str	r3, [r7, #28]
}
 800951e:	bf00      	nop
 8009520:	e7fe      	b.n	8009520 <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	7f1b      	ldrb	r3, [r3, #28]
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d002      	beq.n	8009534 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800952e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009530:	3304      	adds	r3, #4
 8009532:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8009534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009536:	f7ff ff9a 	bl	800946e <xStreamBufferSpacesAvailable>
 800953a:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800953c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	68b9      	ldr	r1, [r7, #8]
 8009546:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009548:	f000 f835 	bl	80095b6 <prvWriteMessageToBuffer>
 800954c:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800954e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009550:	2b00      	cmp	r3, #0
 8009552:	d02b      	beq.n	80095ac <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8009554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009556:	f000 fa1e 	bl	8009996 <prvBytesInBuffer>
 800955a:	4602      	mov	r2, r0
 800955c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	429a      	cmp	r2, r3
 8009562:	d323      	bcc.n	80095ac <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 8009564:	f3ef 8211 	mrs	r2, BASEPRI
 8009568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	61ba      	str	r2, [r7, #24]
 800957a:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800957c:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800957e:	627b      	str	r3, [r7, #36]	; 0x24
 8009580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009582:	691b      	ldr	r3, [r3, #16]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00b      	beq.n	80095a0 <xStreamBufferSendFromISR+0xcc>
 8009588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800958a:	6918      	ldr	r0, [r3, #16]
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	2300      	movs	r3, #0
 8009592:	2200      	movs	r2, #0
 8009594:	2100      	movs	r1, #0
 8009596:	f001 fdd5 	bl	800b144 <xTaskGenericNotifyFromISR>
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	2200      	movs	r2, #0
 800959e:	611a      	str	r2, [r3, #16]
 80095a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80095a4:	693b      	ldr	r3, [r7, #16]
 80095a6:	f383 8811 	msr	BASEPRI, r3
}
 80095aa:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3738      	adds	r7, #56	; 0x38
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b086      	sub	sp, #24
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	60f8      	str	r0, [r7, #12]
 80095be:	60b9      	str	r1, [r7, #8]
 80095c0:	607a      	str	r2, [r7, #4]
 80095c2:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d102      	bne.n	80095d0 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80095ca:	2300      	movs	r3, #0
 80095cc:	617b      	str	r3, [r7, #20]
 80095ce:	e01d      	b.n	800960c <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	7f1b      	ldrb	r3, [r3, #28]
 80095d4:	f003 0301 	and.w	r3, r3, #1
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d108      	bne.n	80095ee <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80095dc:	2301      	movs	r3, #1
 80095de:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	4293      	cmp	r3, r2
 80095e6:	bf28      	it	cs
 80095e8:	4613      	movcs	r3, r2
 80095ea:	607b      	str	r3, [r7, #4]
 80095ec:	e00e      	b.n	800960c <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d308      	bcc.n	8009608 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80095f6:	2301      	movs	r3, #1
 80095f8:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80095fa:	1d3b      	adds	r3, r7, #4
 80095fc:	2204      	movs	r2, #4
 80095fe:	4619      	mov	r1, r3
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f000 f8dc 	bl	80097be <prvWriteBytesToBuffer>
 8009606:	e001      	b.n	800960c <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8009608:	2300      	movs	r3, #0
 800960a:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d007      	beq.n	8009622 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	461a      	mov	r2, r3
 8009616:	68b9      	ldr	r1, [r7, #8]
 8009618:	68f8      	ldr	r0, [r7, #12]
 800961a:	f000 f8d0 	bl	80097be <prvWriteBytesToBuffer>
 800961e:	6138      	str	r0, [r7, #16]
 8009620:	e001      	b.n	8009626 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8009622:	2300      	movs	r3, #0
 8009624:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8009626:	693b      	ldr	r3, [r7, #16]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b08e      	sub	sp, #56	; 0x38
 8009634:	af02      	add	r7, sp, #8
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	607a      	str	r2, [r7, #4]
 800963c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8009642:	2300      	movs	r3, #0
 8009644:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10a      	bne.n	8009662 <xStreamBufferReceive+0x32>
	__asm volatile
 800964c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	f3bf 8f4f 	dsb	sy
 800965c:	61fb      	str	r3, [r7, #28]
}
 800965e:	bf00      	nop
 8009660:	e7fe      	b.n	8009660 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10a      	bne.n	800967e <xStreamBufferReceive+0x4e>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	61bb      	str	r3, [r7, #24]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	7f1b      	ldrb	r3, [r3, #28]
 8009682:	f003 0301 	and.w	r3, r3, #1
 8009686:	2b00      	cmp	r3, #0
 8009688:	d002      	beq.n	8009690 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800968a:	2304      	movs	r3, #4
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
 800968e:	e001      	b.n	8009694 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8009690:	2300      	movs	r3, #0
 8009692:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d034      	beq.n	8009704 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800969a:	f002 fb2b 	bl	800bcf4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800969e:	6a38      	ldr	r0, [r7, #32]
 80096a0:	f000 f979 	bl	8009996 <prvBytesInBuffer>
 80096a4:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80096a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d816      	bhi.n	80096dc <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80096ae:	2000      	movs	r0, #0
 80096b0:	f001 fe2c 	bl	800b30c <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00a      	beq.n	80096d2 <xStreamBufferReceive+0xa2>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	617b      	str	r3, [r7, #20]
}
 80096ce:	bf00      	nop
 80096d0:	e7fe      	b.n	80096d0 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80096d2:	f001 f9c3 	bl	800aa5c <xTaskGetCurrentTaskHandle>
 80096d6:	4602      	mov	r2, r0
 80096d8:	6a3b      	ldr	r3, [r7, #32]
 80096da:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80096dc:	f002 fb3a 	bl	800bd54 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80096e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d811      	bhi.n	800970c <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	2200      	movs	r2, #0
 80096ec:	2100      	movs	r1, #0
 80096ee:	2000      	movs	r0, #0
 80096f0:	f001 fc0a 	bl	800af08 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	2200      	movs	r2, #0
 80096f8:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80096fa:	6a38      	ldr	r0, [r7, #32]
 80096fc:	f000 f94b 	bl	8009996 <prvBytesInBuffer>
 8009700:	62b8      	str	r0, [r7, #40]	; 0x28
 8009702:	e003      	b.n	800970c <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8009704:	6a38      	ldr	r0, [r7, #32]
 8009706:	f000 f946 	bl	8009996 <prvBytesInBuffer>
 800970a:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800970c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009710:	429a      	cmp	r2, r3
 8009712:	d91d      	bls.n	8009750 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	68b9      	ldr	r1, [r7, #8]
 800971e:	6a38      	ldr	r0, [r7, #32]
 8009720:	f000 f81b 	bl	800975a <prvReadMessageFromBuffer>
 8009724:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8009726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009728:	2b00      	cmp	r3, #0
 800972a:	d011      	beq.n	8009750 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800972c:	f000 fc48 	bl	8009fc0 <vTaskSuspendAll>
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	695b      	ldr	r3, [r3, #20]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d009      	beq.n	800974c <xStreamBufferReceive+0x11c>
 8009738:	6a3b      	ldr	r3, [r7, #32]
 800973a:	6958      	ldr	r0, [r3, #20]
 800973c:	2300      	movs	r3, #0
 800973e:	2200      	movs	r2, #0
 8009740:	2100      	movs	r1, #0
 8009742:	f001 fc41 	bl	800afc8 <xTaskGenericNotify>
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	2200      	movs	r2, #0
 800974a:	615a      	str	r2, [r3, #20]
 800974c:	f000 fc46 	bl	8009fdc <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8009750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009752:	4618      	mov	r0, r3
 8009754:	3730      	adds	r7, #48	; 0x30
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b088      	sub	sp, #32
 800975e:	af00      	add	r7, sp, #0
 8009760:	60f8      	str	r0, [r7, #12]
 8009762:	60b9      	str	r1, [r7, #8]
 8009764:	607a      	str	r2, [r7, #4]
 8009766:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8009768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976a:	2b00      	cmp	r3, #0
 800976c:	d019      	beq.n	80097a2 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8009774:	f107 0110 	add.w	r1, r7, #16
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f000 f890 	bl	80098a2 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8009786:	683a      	ldr	r2, [r7, #0]
 8009788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800978e:	69fa      	ldr	r2, [r7, #28]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	429a      	cmp	r2, r3
 8009794:	d907      	bls.n	80097a6 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	69ba      	ldr	r2, [r7, #24]
 800979a:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800979c:	2300      	movs	r3, #0
 800979e:	61fb      	str	r3, [r7, #28]
 80097a0:	e001      	b.n	80097a6 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	69fa      	ldr	r2, [r7, #28]
 80097aa:	68b9      	ldr	r1, [r7, #8]
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 f878 	bl	80098a2 <prvReadBytesFromBuffer>
 80097b2:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80097b4:	697b      	ldr	r3, [r7, #20]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3720      	adds	r7, #32
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b08a      	sub	sp, #40	; 0x28
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	60f8      	str	r0, [r7, #12]
 80097c6:	60b9      	str	r1, [r7, #8]
 80097c8:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d10a      	bne.n	80097e6 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 80097d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d4:	f383 8811 	msr	BASEPRI, r3
 80097d8:	f3bf 8f6f 	isb	sy
 80097dc:	f3bf 8f4f 	dsb	sy
 80097e0:	61fb      	str	r3, [r7, #28]
}
 80097e2:	bf00      	nop
 80097e4:	e7fe      	b.n	80097e4 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	689a      	ldr	r2, [r3, #8]
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	4293      	cmp	r3, r2
 80097f8:	bf28      	it	cs
 80097fa:	4613      	movcs	r3, r2
 80097fc:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80097fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009800:	6a3b      	ldr	r3, [r7, #32]
 8009802:	441a      	add	r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	429a      	cmp	r2, r3
 800980a:	d90a      	bls.n	8009822 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	61bb      	str	r3, [r7, #24]
}
 800981e:	bf00      	nop
 8009820:	e7fe      	b.n	8009820 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	699a      	ldr	r2, [r3, #24]
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	4413      	add	r3, r2
 800982a:	6a3a      	ldr	r2, [r7, #32]
 800982c:	68b9      	ldr	r1, [r7, #8]
 800982e:	4618      	mov	r0, r3
 8009830:	f003 fb3a 	bl	800cea8 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	429a      	cmp	r2, r3
 800983a:	d91c      	bls.n	8009876 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	6a3b      	ldr	r3, [r7, #32]
 8009840:	1ad2      	subs	r2, r2, r3
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	429a      	cmp	r2, r3
 8009848:	d90a      	bls.n	8009860 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800984a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800984e:	f383 8811 	msr	BASEPRI, r3
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	f3bf 8f4f 	dsb	sy
 800985a:	617b      	str	r3, [r7, #20]
}
 800985c:	bf00      	nop
 800985e:	e7fe      	b.n	800985e <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6998      	ldr	r0, [r3, #24]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	18d1      	adds	r1, r2, r3
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	6a3b      	ldr	r3, [r7, #32]
 800986e:	1ad3      	subs	r3, r2, r3
 8009870:	461a      	mov	r2, r3
 8009872:	f003 fb19 	bl	800cea8 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8009876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4413      	add	r3, r2
 800987c:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009884:	429a      	cmp	r2, r3
 8009886:	d304      	bcc.n	8009892 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009896:	605a      	str	r2, [r3, #4]

	return xCount;
 8009898:	687b      	ldr	r3, [r7, #4]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3728      	adds	r7, #40	; 0x28
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b08a      	sub	sp, #40	; 0x28
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	607a      	str	r2, [r7, #4]
 80098ae:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	4293      	cmp	r3, r2
 80098b6:	bf28      	it	cs
 80098b8:	4613      	movcs	r3, r2
 80098ba:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 80098bc:	6a3b      	ldr	r3, [r7, #32]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d064      	beq.n	800998c <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ce:	1ad3      	subs	r3, r2, r3
 80098d0:	6a3a      	ldr	r2, [r7, #32]
 80098d2:	4293      	cmp	r3, r2
 80098d4:	bf28      	it	cs
 80098d6:	4613      	movcs	r3, r2
 80098d8:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80098da:	69fa      	ldr	r2, [r7, #28]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d90a      	bls.n	80098f8 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	61bb      	str	r3, [r7, #24]
}
 80098f4:	bf00      	nop
 80098f6:	e7fe      	b.n	80098f6 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80098f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	441a      	add	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	689b      	ldr	r3, [r3, #8]
 8009902:	429a      	cmp	r2, r3
 8009904:	d90a      	bls.n	800991c <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	617b      	str	r3, [r7, #20]
}
 8009918:	bf00      	nop
 800991a:	e7fe      	b.n	800991a <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	699a      	ldr	r2, [r3, #24]
 8009920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009922:	4413      	add	r3, r2
 8009924:	69fa      	ldr	r2, [r7, #28]
 8009926:	4619      	mov	r1, r3
 8009928:	68b8      	ldr	r0, [r7, #8]
 800992a:	f003 fabd 	bl	800cea8 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800992e:	6a3a      	ldr	r2, [r7, #32]
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	429a      	cmp	r2, r3
 8009934:	d919      	bls.n	800996a <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8009936:	6a3a      	ldr	r2, [r7, #32]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	429a      	cmp	r2, r3
 800993c:	d90a      	bls.n	8009954 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800993e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009942:	f383 8811 	msr	BASEPRI, r3
 8009946:	f3bf 8f6f 	isb	sy
 800994a:	f3bf 8f4f 	dsb	sy
 800994e:	613b      	str	r3, [r7, #16]
}
 8009950:	bf00      	nop
 8009952:	e7fe      	b.n	8009952 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	18d0      	adds	r0, r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6999      	ldr	r1, [r3, #24]
 800995e:	6a3a      	ldr	r2, [r7, #32]
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	1ad3      	subs	r3, r2, r3
 8009964:	461a      	mov	r2, r3
 8009966:	f003 fa9f 	bl	800cea8 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800996a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800996c:	6a3b      	ldr	r3, [r7, #32]
 800996e:	4413      	add	r3, r2
 8009970:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	689b      	ldr	r3, [r3, #8]
 8009976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009978:	429a      	cmp	r2, r3
 800997a:	d304      	bcc.n	8009986 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800998a:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800998c:	6a3b      	ldr	r3, [r7, #32]
}
 800998e:	4618      	mov	r0, r3
 8009990:	3728      	adds	r7, #40	; 0x28
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8009996:	b480      	push	{r7}
 8009998:	b085      	sub	sp, #20
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	689a      	ldr	r2, [r3, #8]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	4413      	add	r3, r2
 80099a8:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d304      	bcc.n	80099c8 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80099c8:	68fb      	ldr	r3, [r7, #12]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b086      	sub	sp, #24
 80099da:	af00      	add	r7, sp, #0
 80099dc:	60f8      	str	r0, [r7, #12]
 80099de:	60b9      	str	r1, [r7, #8]
 80099e0:	607a      	str	r2, [r7, #4]
 80099e2:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80099e4:	2355      	movs	r3, #85	; 0x55
 80099e6:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	6979      	ldr	r1, [r7, #20]
 80099ec:	68b8      	ldr	r0, [r7, #8]
 80099ee:	f003 fa69 	bl	800cec4 <memset>
 80099f2:	4602      	mov	r2, r0
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00a      	beq.n	8009a10 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	613b      	str	r3, [r7, #16]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8009a10:	2224      	movs	r2, #36	; 0x24
 8009a12:	2100      	movs	r1, #0
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f003 fa55 	bl	800cec4 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	687a      	ldr	r2, [r7, #4]
 8009a24:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	683a      	ldr	r2, [r7, #0]
 8009a2a:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009a32:	771a      	strb	r2, [r3, #28]
}
 8009a34:	bf00      	nop
 8009a36:	3718      	adds	r7, #24
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b08e      	sub	sp, #56	; 0x38
 8009a40:	af04      	add	r7, sp, #16
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10a      	bne.n	8009a66 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	623b      	str	r3, [r7, #32]
}
 8009a62:	bf00      	nop
 8009a64:	e7fe      	b.n	8009a64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d10a      	bne.n	8009a82 <xTaskCreateStatic+0x46>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	61fb      	str	r3, [r7, #28]
}
 8009a7e:	bf00      	nop
 8009a80:	e7fe      	b.n	8009a80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009a82:	23cc      	movs	r3, #204	; 0xcc
 8009a84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	2bcc      	cmp	r3, #204	; 0xcc
 8009a8a:	d00a      	beq.n	8009aa2 <xTaskCreateStatic+0x66>
	__asm volatile
 8009a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a90:	f383 8811 	msr	BASEPRI, r3
 8009a94:	f3bf 8f6f 	isb	sy
 8009a98:	f3bf 8f4f 	dsb	sy
 8009a9c:	61bb      	str	r3, [r7, #24]
}
 8009a9e:	bf00      	nop
 8009aa0:	e7fe      	b.n	8009aa0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009aa2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d01e      	beq.n	8009ae8 <xTaskCreateStatic+0xac>
 8009aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d01b      	beq.n	8009ae8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ab8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	2202      	movs	r2, #2
 8009abe:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	9303      	str	r3, [sp, #12]
 8009ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac8:	9302      	str	r3, [sp, #8]
 8009aca:	f107 0314 	add.w	r3, r7, #20
 8009ace:	9301      	str	r3, [sp, #4]
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	68b9      	ldr	r1, [r7, #8]
 8009ada:	68f8      	ldr	r0, [r7, #12]
 8009adc:	f000 f850 	bl	8009b80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009ae0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ae2:	f000 f8f3 	bl	8009ccc <prvAddNewTaskToReadyList>
 8009ae6:	e001      	b.n	8009aec <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009aec:	697b      	ldr	r3, [r7, #20]
	}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3728      	adds	r7, #40	; 0x28
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b08c      	sub	sp, #48	; 0x30
 8009afa:	af04      	add	r7, sp, #16
 8009afc:	60f8      	str	r0, [r7, #12]
 8009afe:	60b9      	str	r1, [r7, #8]
 8009b00:	603b      	str	r3, [r7, #0]
 8009b02:	4613      	mov	r3, r2
 8009b04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009b06:	88fb      	ldrh	r3, [r7, #6]
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f002 fa14 	bl	800bf38 <pvPortMalloc>
 8009b10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00e      	beq.n	8009b36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009b18:	20cc      	movs	r0, #204	; 0xcc
 8009b1a:	f002 fa0d 	bl	800bf38 <pvPortMalloc>
 8009b1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	631a      	str	r2, [r3, #48]	; 0x30
 8009b2c:	e005      	b.n	8009b3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009b2e:	6978      	ldr	r0, [r7, #20]
 8009b30:	f002 face 	bl	800c0d0 <vPortFree>
 8009b34:	e001      	b.n	8009b3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009b36:	2300      	movs	r3, #0
 8009b38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d017      	beq.n	8009b70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009b48:	88fa      	ldrh	r2, [r7, #6]
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	9303      	str	r3, [sp, #12]
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	9302      	str	r3, [sp, #8]
 8009b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b54:	9301      	str	r3, [sp, #4]
 8009b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b58:	9300      	str	r3, [sp, #0]
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	68b9      	ldr	r1, [r7, #8]
 8009b5e:	68f8      	ldr	r0, [r7, #12]
 8009b60:	f000 f80e 	bl	8009b80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009b64:	69f8      	ldr	r0, [r7, #28]
 8009b66:	f000 f8b1 	bl	8009ccc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	61bb      	str	r3, [r7, #24]
 8009b6e:	e002      	b.n	8009b76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009b70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009b76:	69bb      	ldr	r3, [r7, #24]
	}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3720      	adds	r7, #32
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b088      	sub	sp, #32
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
 8009b8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b90:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	461a      	mov	r2, r3
 8009b98:	21a5      	movs	r1, #165	; 0xa5
 8009b9a:	f003 f993 	bl	800cec4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009ba8:	3b01      	subs	r3, #1
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	f023 0307 	bic.w	r3, r3, #7
 8009bb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	f003 0307 	and.w	r3, r3, #7
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00a      	beq.n	8009bd8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc6:	f383 8811 	msr	BASEPRI, r3
 8009bca:	f3bf 8f6f 	isb	sy
 8009bce:	f3bf 8f4f 	dsb	sy
 8009bd2:	617b      	str	r3, [r7, #20]
}
 8009bd4:	bf00      	nop
 8009bd6:	e7fe      	b.n	8009bd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d01f      	beq.n	8009c1e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009bde:	2300      	movs	r3, #0
 8009be0:	61fb      	str	r3, [r7, #28]
 8009be2:	e012      	b.n	8009c0a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009be4:	68ba      	ldr	r2, [r7, #8]
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	4413      	add	r3, r2
 8009bea:	7819      	ldrb	r1, [r3, #0]
 8009bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	3334      	adds	r3, #52	; 0x34
 8009bf4:	460a      	mov	r2, r1
 8009bf6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009bf8:	68ba      	ldr	r2, [r7, #8]
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d006      	beq.n	8009c12 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	3301      	adds	r3, #1
 8009c08:	61fb      	str	r3, [r7, #28]
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	2b1f      	cmp	r3, #31
 8009c0e:	d9e9      	bls.n	8009be4 <prvInitialiseNewTask+0x64>
 8009c10:	e000      	b.n	8009c14 <prvInitialiseNewTask+0x94>
			{
				break;
 8009c12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8009c1c:	e003      	b.n	8009c26 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c28:	2b37      	cmp	r3, #55	; 0x37
 8009c2a:	d901      	bls.n	8009c30 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009c2c:	2337      	movs	r3, #55	; 0x37
 8009c2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009c3a:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3e:	2200      	movs	r2, #0
 8009c40:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	3304      	adds	r3, #4
 8009c46:	4618      	mov	r0, r3
 8009c48:	f7fe fc4c 	bl	80084e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4e:	3318      	adds	r3, #24
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fe fc47 	bl	80084e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7e:	3364      	adds	r3, #100	; 0x64
 8009c80:	2260      	movs	r2, #96	; 0x60
 8009c82:	2100      	movs	r1, #0
 8009c84:	4618      	mov	r0, r3
 8009c86:	f003 f91d 	bl	800cec4 <memset>
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c8c:	4a0c      	ldr	r2, [pc, #48]	; (8009cc0 <prvInitialiseNewTask+0x140>)
 8009c8e:	669a      	str	r2, [r3, #104]	; 0x68
 8009c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c92:	4a0c      	ldr	r2, [pc, #48]	; (8009cc4 <prvInitialiseNewTask+0x144>)
 8009c94:	66da      	str	r2, [r3, #108]	; 0x6c
 8009c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c98:	4a0b      	ldr	r2, [pc, #44]	; (8009cc8 <prvInitialiseNewTask+0x148>)
 8009c9a:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	68f9      	ldr	r1, [r7, #12]
 8009ca0:	69b8      	ldr	r0, [r7, #24]
 8009ca2:	f001 fefb 	bl	800ba9c <pxPortInitialiseStack>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d002      	beq.n	8009cb8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009cb6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cb8:	bf00      	nop
 8009cba:	3720      	adds	r7, #32
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	0800dba8 	.word	0x0800dba8
 8009cc4:	0800dbc8 	.word	0x0800dbc8
 8009cc8:	0800db88 	.word	0x0800db88

08009ccc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009cd4:	f002 f80e 	bl	800bcf4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009cd8:	4b2d      	ldr	r3, [pc, #180]	; (8009d90 <prvAddNewTaskToReadyList+0xc4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	4a2c      	ldr	r2, [pc, #176]	; (8009d90 <prvAddNewTaskToReadyList+0xc4>)
 8009ce0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009ce2:	4b2c      	ldr	r3, [pc, #176]	; (8009d94 <prvAddNewTaskToReadyList+0xc8>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d109      	bne.n	8009cfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009cea:	4a2a      	ldr	r2, [pc, #168]	; (8009d94 <prvAddNewTaskToReadyList+0xc8>)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009cf0:	4b27      	ldr	r3, [pc, #156]	; (8009d90 <prvAddNewTaskToReadyList+0xc4>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d110      	bne.n	8009d1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009cf8:	f000 fd1a 	bl	800a730 <prvInitialiseTaskLists>
 8009cfc:	e00d      	b.n	8009d1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009cfe:	4b26      	ldr	r3, [pc, #152]	; (8009d98 <prvAddNewTaskToReadyList+0xcc>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d109      	bne.n	8009d1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009d06:	4b23      	ldr	r3, [pc, #140]	; (8009d94 <prvAddNewTaskToReadyList+0xc8>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d802      	bhi.n	8009d1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009d14:	4a1f      	ldr	r2, [pc, #124]	; (8009d94 <prvAddNewTaskToReadyList+0xc8>)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009d1a:	4b20      	ldr	r3, [pc, #128]	; (8009d9c <prvAddNewTaskToReadyList+0xd0>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	4a1e      	ldr	r2, [pc, #120]	; (8009d9c <prvAddNewTaskToReadyList+0xd0>)
 8009d22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009d24:	4b1d      	ldr	r3, [pc, #116]	; (8009d9c <prvAddNewTaskToReadyList+0xd0>)
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d30:	4b1b      	ldr	r3, [pc, #108]	; (8009da0 <prvAddNewTaskToReadyList+0xd4>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d903      	bls.n	8009d40 <prvAddNewTaskToReadyList+0x74>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3c:	4a18      	ldr	r2, [pc, #96]	; (8009da0 <prvAddNewTaskToReadyList+0xd4>)
 8009d3e:	6013      	str	r3, [r2, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d44:	4613      	mov	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4a15      	ldr	r2, [pc, #84]	; (8009da4 <prvAddNewTaskToReadyList+0xd8>)
 8009d4e:	441a      	add	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	3304      	adds	r3, #4
 8009d54:	4619      	mov	r1, r3
 8009d56:	4610      	mov	r0, r2
 8009d58:	f7fe fbd1 	bl	80084fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009d5c:	f001 fffa 	bl	800bd54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009d60:	4b0d      	ldr	r3, [pc, #52]	; (8009d98 <prvAddNewTaskToReadyList+0xcc>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d00e      	beq.n	8009d86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009d68:	4b0a      	ldr	r3, [pc, #40]	; (8009d94 <prvAddNewTaskToReadyList+0xc8>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d207      	bcs.n	8009d86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009d76:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <prvAddNewTaskToReadyList+0xdc>)
 8009d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d86:	bf00      	nop
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	20001090 	.word	0x20001090
 8009d94:	20000bbc 	.word	0x20000bbc
 8009d98:	2000109c 	.word	0x2000109c
 8009d9c:	200010ac 	.word	0x200010ac
 8009da0:	20001098 	.word	0x20001098
 8009da4:	20000bc0 	.word	0x20000bc0
 8009da8:	e000ed04 	.word	0xe000ed04

08009dac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d017      	beq.n	8009dee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009dbe:	4b13      	ldr	r3, [pc, #76]	; (8009e0c <vTaskDelay+0x60>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00a      	beq.n	8009ddc <vTaskDelay+0x30>
	__asm volatile
 8009dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	60bb      	str	r3, [r7, #8]
}
 8009dd8:	bf00      	nop
 8009dda:	e7fe      	b.n	8009dda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ddc:	f000 f8f0 	bl	8009fc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009de0:	2100      	movs	r1, #0
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f001 fab8 	bl	800b358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009de8:	f000 f8f8 	bl	8009fdc <xTaskResumeAll>
 8009dec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d107      	bne.n	8009e04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009df4:	4b06      	ldr	r3, [pc, #24]	; (8009e10 <vTaskDelay+0x64>)
 8009df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009e04:	bf00      	nop
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	200010b8 	.word	0x200010b8
 8009e10:	e000ed04 	.word	0xe000ed04

08009e14 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b088      	sub	sp, #32
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10a      	bne.n	8009e3c <eTaskGetState+0x28>
	__asm volatile
 8009e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2a:	f383 8811 	msr	BASEPRI, r3
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	f3bf 8f4f 	dsb	sy
 8009e36:	60bb      	str	r3, [r7, #8]
}
 8009e38:	bf00      	nop
 8009e3a:	e7fe      	b.n	8009e3a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8009e3c:	4b23      	ldr	r3, [pc, #140]	; (8009ecc <eTaskGetState+0xb8>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	69ba      	ldr	r2, [r7, #24]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d102      	bne.n	8009e4c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8009e46:	2300      	movs	r3, #0
 8009e48:	77fb      	strb	r3, [r7, #31]
 8009e4a:	e03a      	b.n	8009ec2 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8009e4c:	f001 ff52 	bl	800bcf4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	695b      	ldr	r3, [r3, #20]
 8009e54:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8009e56:	4b1e      	ldr	r3, [pc, #120]	; (8009ed0 <eTaskGetState+0xbc>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8009e5c:	4b1d      	ldr	r3, [pc, #116]	; (8009ed4 <eTaskGetState+0xc0>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8009e62:	f001 ff77 	bl	800bd54 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8009e66:	697a      	ldr	r2, [r7, #20]
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d003      	beq.n	8009e76 <eTaskGetState+0x62>
 8009e6e:	697a      	ldr	r2, [r7, #20]
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d102      	bne.n	8009e7c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8009e76:	2302      	movs	r3, #2
 8009e78:	77fb      	strb	r3, [r7, #31]
 8009e7a:	e022      	b.n	8009ec2 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	4a16      	ldr	r2, [pc, #88]	; (8009ed8 <eTaskGetState+0xc4>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d112      	bne.n	8009eaa <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009e84:	69bb      	ldr	r3, [r7, #24]
 8009e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d10b      	bne.n	8009ea4 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d102      	bne.n	8009e9e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8009e98:	2302      	movs	r3, #2
 8009e9a:	77fb      	strb	r3, [r7, #31]
 8009e9c:	e011      	b.n	8009ec2 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	77fb      	strb	r3, [r7, #31]
 8009ea2:	e00e      	b.n	8009ec2 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	77fb      	strb	r3, [r7, #31]
 8009ea8:	e00b      	b.n	8009ec2 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	4a0b      	ldr	r2, [pc, #44]	; (8009edc <eTaskGetState+0xc8>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d002      	beq.n	8009eb8 <eTaskGetState+0xa4>
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8009eb8:	2304      	movs	r3, #4
 8009eba:	77fb      	strb	r3, [r7, #31]
 8009ebc:	e001      	b.n	8009ec2 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009ec2:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3720      	adds	r7, #32
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	20000bbc 	.word	0x20000bbc
 8009ed0:	20001048 	.word	0x20001048
 8009ed4:	2000104c 	.word	0x2000104c
 8009ed8:	2000107c 	.word	0x2000107c
 8009edc:	20001064 	.word	0x20001064

08009ee0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08a      	sub	sp, #40	; 0x28
 8009ee4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009eee:	463a      	mov	r2, r7
 8009ef0:	1d39      	adds	r1, r7, #4
 8009ef2:	f107 0308 	add.w	r3, r7, #8
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7fe faa0 	bl	800843c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009efc:	6839      	ldr	r1, [r7, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68ba      	ldr	r2, [r7, #8]
 8009f02:	9202      	str	r2, [sp, #8]
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	2300      	movs	r3, #0
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	460a      	mov	r2, r1
 8009f0e:	4924      	ldr	r1, [pc, #144]	; (8009fa0 <vTaskStartScheduler+0xc0>)
 8009f10:	4824      	ldr	r0, [pc, #144]	; (8009fa4 <vTaskStartScheduler+0xc4>)
 8009f12:	f7ff fd93 	bl	8009a3c <xTaskCreateStatic>
 8009f16:	4603      	mov	r3, r0
 8009f18:	4a23      	ldr	r2, [pc, #140]	; (8009fa8 <vTaskStartScheduler+0xc8>)
 8009f1a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f1c:	4b22      	ldr	r3, [pc, #136]	; (8009fa8 <vTaskStartScheduler+0xc8>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d002      	beq.n	8009f2a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f24:	2301      	movs	r3, #1
 8009f26:	617b      	str	r3, [r7, #20]
 8009f28:	e001      	b.n	8009f2e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	d102      	bne.n	8009f3a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009f34:	f001 fa64 	bl	800b400 <xTimerCreateTimerTask>
 8009f38:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	2b01      	cmp	r3, #1
 8009f3e:	d11b      	bne.n	8009f78 <vTaskStartScheduler+0x98>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	613b      	str	r3, [r7, #16]
}
 8009f52:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009f54:	4b15      	ldr	r3, [pc, #84]	; (8009fac <vTaskStartScheduler+0xcc>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	3364      	adds	r3, #100	; 0x64
 8009f5a:	4a15      	ldr	r2, [pc, #84]	; (8009fb0 <vTaskStartScheduler+0xd0>)
 8009f5c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f5e:	4b15      	ldr	r3, [pc, #84]	; (8009fb4 <vTaskStartScheduler+0xd4>)
 8009f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f66:	4b14      	ldr	r3, [pc, #80]	; (8009fb8 <vTaskStartScheduler+0xd8>)
 8009f68:	2201      	movs	r2, #1
 8009f6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009f6c:	4b13      	ldr	r3, [pc, #76]	; (8009fbc <vTaskStartScheduler+0xdc>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f72:	f001 fe1d 	bl	800bbb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f76:	e00e      	b.n	8009f96 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f7e:	d10a      	bne.n	8009f96 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	60fb      	str	r3, [r7, #12]
}
 8009f92:	bf00      	nop
 8009f94:	e7fe      	b.n	8009f94 <vTaskStartScheduler+0xb4>
}
 8009f96:	bf00      	nop
 8009f98:	3718      	adds	r7, #24
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	0800daac 	.word	0x0800daac
 8009fa4:	0800a701 	.word	0x0800a701
 8009fa8:	200010b4 	.word	0x200010b4
 8009fac:	20000bbc 	.word	0x20000bbc
 8009fb0:	2000010c 	.word	0x2000010c
 8009fb4:	200010b0 	.word	0x200010b0
 8009fb8:	2000109c 	.word	0x2000109c
 8009fbc:	20001094 	.word	0x20001094

08009fc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009fc4:	4b04      	ldr	r3, [pc, #16]	; (8009fd8 <vTaskSuspendAll+0x18>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	4a03      	ldr	r2, [pc, #12]	; (8009fd8 <vTaskSuspendAll+0x18>)
 8009fcc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009fce:	bf00      	nop
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd6:	4770      	bx	lr
 8009fd8:	200010b8 	.word	0x200010b8

08009fdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009fea:	4b42      	ldr	r3, [pc, #264]	; (800a0f4 <xTaskResumeAll+0x118>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10a      	bne.n	800a008 <xTaskResumeAll+0x2c>
	__asm volatile
 8009ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	603b      	str	r3, [r7, #0]
}
 800a004:	bf00      	nop
 800a006:	e7fe      	b.n	800a006 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a008:	f001 fe74 	bl	800bcf4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a00c:	4b39      	ldr	r3, [pc, #228]	; (800a0f4 <xTaskResumeAll+0x118>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	3b01      	subs	r3, #1
 800a012:	4a38      	ldr	r2, [pc, #224]	; (800a0f4 <xTaskResumeAll+0x118>)
 800a014:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a016:	4b37      	ldr	r3, [pc, #220]	; (800a0f4 <xTaskResumeAll+0x118>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d162      	bne.n	800a0e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a01e:	4b36      	ldr	r3, [pc, #216]	; (800a0f8 <xTaskResumeAll+0x11c>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d05e      	beq.n	800a0e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a026:	e02f      	b.n	800a088 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a028:	4b34      	ldr	r3, [pc, #208]	; (800a0fc <xTaskResumeAll+0x120>)
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3318      	adds	r3, #24
 800a034:	4618      	mov	r0, r3
 800a036:	f7fe fabf 	bl	80085b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	3304      	adds	r3, #4
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe faba 	bl	80085b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a048:	4b2d      	ldr	r3, [pc, #180]	; (800a100 <xTaskResumeAll+0x124>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d903      	bls.n	800a058 <xTaskResumeAll+0x7c>
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a054:	4a2a      	ldr	r2, [pc, #168]	; (800a100 <xTaskResumeAll+0x124>)
 800a056:	6013      	str	r3, [r2, #0]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a05c:	4613      	mov	r3, r2
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4a27      	ldr	r2, [pc, #156]	; (800a104 <xTaskResumeAll+0x128>)
 800a066:	441a      	add	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	3304      	adds	r3, #4
 800a06c:	4619      	mov	r1, r3
 800a06e:	4610      	mov	r0, r2
 800a070:	f7fe fa45 	bl	80084fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a078:	4b23      	ldr	r3, [pc, #140]	; (800a108 <xTaskResumeAll+0x12c>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07e:	429a      	cmp	r2, r3
 800a080:	d302      	bcc.n	800a088 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a082:	4b22      	ldr	r3, [pc, #136]	; (800a10c <xTaskResumeAll+0x130>)
 800a084:	2201      	movs	r2, #1
 800a086:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a088:	4b1c      	ldr	r3, [pc, #112]	; (800a0fc <xTaskResumeAll+0x120>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d1cb      	bne.n	800a028 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a096:	f000 fcc1 	bl	800aa1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a09a:	4b1d      	ldr	r3, [pc, #116]	; (800a110 <xTaskResumeAll+0x134>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d010      	beq.n	800a0c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a0a6:	f000 f8d5 	bl	800a254 <xTaskIncrementTick>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a0b0:	4b16      	ldr	r3, [pc, #88]	; (800a10c <xTaskResumeAll+0x130>)
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1f1      	bne.n	800a0a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a0c2:	4b13      	ldr	r3, [pc, #76]	; (800a110 <xTaskResumeAll+0x134>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a0c8:	4b10      	ldr	r3, [pc, #64]	; (800a10c <xTaskResumeAll+0x130>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d009      	beq.n	800a0e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a0d4:	4b0f      	ldr	r3, [pc, #60]	; (800a114 <xTaskResumeAll+0x138>)
 800a0d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0da:	601a      	str	r2, [r3, #0]
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0e4:	f001 fe36 	bl	800bd54 <vPortExitCritical>

	return xAlreadyYielded;
 800a0e8:	68bb      	ldr	r3, [r7, #8]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3710      	adds	r7, #16
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	200010b8 	.word	0x200010b8
 800a0f8:	20001090 	.word	0x20001090
 800a0fc:	20001050 	.word	0x20001050
 800a100:	20001098 	.word	0x20001098
 800a104:	20000bc0 	.word	0x20000bc0
 800a108:	20000bbc 	.word	0x20000bbc
 800a10c:	200010a4 	.word	0x200010a4
 800a110:	200010a0 	.word	0x200010a0
 800a114:	e000ed04 	.word	0xe000ed04

0800a118 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a11e:	4b05      	ldr	r3, [pc, #20]	; (800a134 <xTaskGetTickCount+0x1c>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a124:	687b      	ldr	r3, [r7, #4]
}
 800a126:	4618      	mov	r0, r3
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	20001094 	.word	0x20001094

0800a138 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800a144:	2300      	movs	r3, #0
 800a146:	617b      	str	r3, [r7, #20]
 800a148:	2338      	movs	r3, #56	; 0x38
 800a14a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800a14c:	f7ff ff38 	bl	8009fc0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800a150:	4b3a      	ldr	r3, [pc, #232]	; (800a23c <uxTaskGetSystemState+0x104>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	429a      	cmp	r2, r3
 800a158:	d368      	bcc.n	800a22c <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	3b01      	subs	r3, #1
 800a15e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800a160:	697a      	ldr	r2, [r7, #20]
 800a162:	4613      	mov	r3, r2
 800a164:	00db      	lsls	r3, r3, #3
 800a166:	4413      	add	r3, r2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	461a      	mov	r2, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	1898      	adds	r0, r3, r2
 800a170:	693a      	ldr	r2, [r7, #16]
 800a172:	4613      	mov	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	4413      	add	r3, r2
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4a31      	ldr	r2, [pc, #196]	; (800a240 <uxTaskGetSystemState+0x108>)
 800a17c:	4413      	add	r3, r2
 800a17e:	2201      	movs	r2, #1
 800a180:	4619      	mov	r1, r3
 800a182:	f000 fba9 	bl	800a8d8 <prvListTasksWithinSingleList>
 800a186:	4602      	mov	r2, r0
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	4413      	add	r3, r2
 800a18c:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d1e2      	bne.n	800a15a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	4613      	mov	r3, r2
 800a198:	00db      	lsls	r3, r3, #3
 800a19a:	4413      	add	r3, r2
 800a19c:	009b      	lsls	r3, r3, #2
 800a19e:	461a      	mov	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	4a27      	ldr	r2, [pc, #156]	; (800a244 <uxTaskGetSystemState+0x10c>)
 800a1a6:	6811      	ldr	r1, [r2, #0]
 800a1a8:	2202      	movs	r2, #2
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 fb94 	bl	800a8d8 <prvListTasksWithinSingleList>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800a1b8:	697a      	ldr	r2, [r7, #20]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	00db      	lsls	r3, r3, #3
 800a1be:	4413      	add	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	4a1f      	ldr	r2, [pc, #124]	; (800a248 <uxTaskGetSystemState+0x110>)
 800a1ca:	6811      	ldr	r1, [r2, #0]
 800a1cc:	2202      	movs	r2, #2
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 fb82 	bl	800a8d8 <prvListTasksWithinSingleList>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	4413      	add	r3, r2
 800a1da:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800a1dc:	697a      	ldr	r2, [r7, #20]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	00db      	lsls	r3, r3, #3
 800a1e2:	4413      	add	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	2204      	movs	r2, #4
 800a1ee:	4917      	ldr	r1, [pc, #92]	; (800a24c <uxTaskGetSystemState+0x114>)
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f000 fb71 	bl	800a8d8 <prvListTasksWithinSingleList>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	4613      	mov	r3, r2
 800a202:	00db      	lsls	r3, r3, #3
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	461a      	mov	r2, r3
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	4413      	add	r3, r2
 800a20e:	2203      	movs	r2, #3
 800a210:	490f      	ldr	r1, [pc, #60]	; (800a250 <uxTaskGetSystemState+0x118>)
 800a212:	4618      	mov	r0, r3
 800a214:	f000 fb60 	bl	800a8d8 <prvListTasksWithinSingleList>
 800a218:	4602      	mov	r2, r0
 800a21a:	697b      	ldr	r3, [r7, #20]
 800a21c:	4413      	add	r3, r2
 800a21e:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d002      	beq.n	800a22c <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800a22c:	f7ff fed6 	bl	8009fdc <xTaskResumeAll>

		return uxTask;
 800a230:	697b      	ldr	r3, [r7, #20]
	}
 800a232:	4618      	mov	r0, r3
 800a234:	3718      	adds	r7, #24
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
 800a23a:	bf00      	nop
 800a23c:	20001090 	.word	0x20001090
 800a240:	20000bc0 	.word	0x20000bc0
 800a244:	20001048 	.word	0x20001048
 800a248:	2000104c 	.word	0x2000104c
 800a24c:	20001064 	.word	0x20001064
 800a250:	2000107c 	.word	0x2000107c

0800a254 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b086      	sub	sp, #24
 800a258:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a25a:	2300      	movs	r3, #0
 800a25c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a25e:	4b4f      	ldr	r3, [pc, #316]	; (800a39c <xTaskIncrementTick+0x148>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	2b00      	cmp	r3, #0
 800a264:	f040 808f 	bne.w	800a386 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a268:	4b4d      	ldr	r3, [pc, #308]	; (800a3a0 <xTaskIncrementTick+0x14c>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	3301      	adds	r3, #1
 800a26e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a270:	4a4b      	ldr	r2, [pc, #300]	; (800a3a0 <xTaskIncrementTick+0x14c>)
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d120      	bne.n	800a2be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a27c:	4b49      	ldr	r3, [pc, #292]	; (800a3a4 <xTaskIncrementTick+0x150>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00a      	beq.n	800a29c <xTaskIncrementTick+0x48>
	__asm volatile
 800a286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	f3bf 8f6f 	isb	sy
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	603b      	str	r3, [r7, #0]
}
 800a298:	bf00      	nop
 800a29a:	e7fe      	b.n	800a29a <xTaskIncrementTick+0x46>
 800a29c:	4b41      	ldr	r3, [pc, #260]	; (800a3a4 <xTaskIncrementTick+0x150>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	60fb      	str	r3, [r7, #12]
 800a2a2:	4b41      	ldr	r3, [pc, #260]	; (800a3a8 <xTaskIncrementTick+0x154>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a3f      	ldr	r2, [pc, #252]	; (800a3a4 <xTaskIncrementTick+0x150>)
 800a2a8:	6013      	str	r3, [r2, #0]
 800a2aa:	4a3f      	ldr	r2, [pc, #252]	; (800a3a8 <xTaskIncrementTick+0x154>)
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6013      	str	r3, [r2, #0]
 800a2b0:	4b3e      	ldr	r3, [pc, #248]	; (800a3ac <xTaskIncrementTick+0x158>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	3301      	adds	r3, #1
 800a2b6:	4a3d      	ldr	r2, [pc, #244]	; (800a3ac <xTaskIncrementTick+0x158>)
 800a2b8:	6013      	str	r3, [r2, #0]
 800a2ba:	f000 fbaf 	bl	800aa1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a2be:	4b3c      	ldr	r3, [pc, #240]	; (800a3b0 <xTaskIncrementTick+0x15c>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d349      	bcc.n	800a35c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2c8:	4b36      	ldr	r3, [pc, #216]	; (800a3a4 <xTaskIncrementTick+0x150>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d104      	bne.n	800a2dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2d2:	4b37      	ldr	r3, [pc, #220]	; (800a3b0 <xTaskIncrementTick+0x15c>)
 800a2d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2d8:	601a      	str	r2, [r3, #0]
					break;
 800a2da:	e03f      	b.n	800a35c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2dc:	4b31      	ldr	r3, [pc, #196]	; (800a3a4 <xTaskIncrementTick+0x150>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	68db      	ldr	r3, [r3, #12]
 800a2e2:	68db      	ldr	r3, [r3, #12]
 800a2e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a2ec:	693a      	ldr	r2, [r7, #16]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d203      	bcs.n	800a2fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a2f4:	4a2e      	ldr	r2, [pc, #184]	; (800a3b0 <xTaskIncrementTick+0x15c>)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a2fa:	e02f      	b.n	800a35c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	3304      	adds	r3, #4
 800a300:	4618      	mov	r0, r3
 800a302:	f7fe f959 	bl	80085b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d004      	beq.n	800a318 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	3318      	adds	r3, #24
 800a312:	4618      	mov	r0, r3
 800a314:	f7fe f950 	bl	80085b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a31c:	4b25      	ldr	r3, [pc, #148]	; (800a3b4 <xTaskIncrementTick+0x160>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	429a      	cmp	r2, r3
 800a322:	d903      	bls.n	800a32c <xTaskIncrementTick+0xd8>
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a328:	4a22      	ldr	r2, [pc, #136]	; (800a3b4 <xTaskIncrementTick+0x160>)
 800a32a:	6013      	str	r3, [r2, #0]
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a330:	4613      	mov	r3, r2
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	4a1f      	ldr	r2, [pc, #124]	; (800a3b8 <xTaskIncrementTick+0x164>)
 800a33a:	441a      	add	r2, r3
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	3304      	adds	r3, #4
 800a340:	4619      	mov	r1, r3
 800a342:	4610      	mov	r0, r2
 800a344:	f7fe f8db 	bl	80084fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a34c:	4b1b      	ldr	r3, [pc, #108]	; (800a3bc <xTaskIncrementTick+0x168>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a352:	429a      	cmp	r2, r3
 800a354:	d3b8      	bcc.n	800a2c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a356:	2301      	movs	r3, #1
 800a358:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a35a:	e7b5      	b.n	800a2c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a35c:	4b17      	ldr	r3, [pc, #92]	; (800a3bc <xTaskIncrementTick+0x168>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a362:	4915      	ldr	r1, [pc, #84]	; (800a3b8 <xTaskIncrementTick+0x164>)
 800a364:	4613      	mov	r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	4413      	add	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	440b      	add	r3, r1
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b01      	cmp	r3, #1
 800a372:	d901      	bls.n	800a378 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a374:	2301      	movs	r3, #1
 800a376:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a378:	4b11      	ldr	r3, [pc, #68]	; (800a3c0 <xTaskIncrementTick+0x16c>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d007      	beq.n	800a390 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a380:	2301      	movs	r3, #1
 800a382:	617b      	str	r3, [r7, #20]
 800a384:	e004      	b.n	800a390 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a386:	4b0f      	ldr	r3, [pc, #60]	; (800a3c4 <xTaskIncrementTick+0x170>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	3301      	adds	r3, #1
 800a38c:	4a0d      	ldr	r2, [pc, #52]	; (800a3c4 <xTaskIncrementTick+0x170>)
 800a38e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a390:	697b      	ldr	r3, [r7, #20]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	200010b8 	.word	0x200010b8
 800a3a0:	20001094 	.word	0x20001094
 800a3a4:	20001048 	.word	0x20001048
 800a3a8:	2000104c 	.word	0x2000104c
 800a3ac:	200010a8 	.word	0x200010a8
 800a3b0:	200010b0 	.word	0x200010b0
 800a3b4:	20001098 	.word	0x20001098
 800a3b8:	20000bc0 	.word	0x20000bc0
 800a3bc:	20000bbc 	.word	0x20000bbc
 800a3c0:	200010a4 	.word	0x200010a4
 800a3c4:	200010a0 	.word	0x200010a0

0800a3c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a3ce:	4b2a      	ldr	r3, [pc, #168]	; (800a478 <vTaskSwitchContext+0xb0>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d003      	beq.n	800a3de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a3d6:	4b29      	ldr	r3, [pc, #164]	; (800a47c <vTaskSwitchContext+0xb4>)
 800a3d8:	2201      	movs	r2, #1
 800a3da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a3dc:	e046      	b.n	800a46c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a3de:	4b27      	ldr	r3, [pc, #156]	; (800a47c <vTaskSwitchContext+0xb4>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e4:	4b26      	ldr	r3, [pc, #152]	; (800a480 <vTaskSwitchContext+0xb8>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	60fb      	str	r3, [r7, #12]
 800a3ea:	e010      	b.n	800a40e <vTaskSwitchContext+0x46>
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10a      	bne.n	800a408 <vTaskSwitchContext+0x40>
	__asm volatile
 800a3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	607b      	str	r3, [r7, #4]
}
 800a404:	bf00      	nop
 800a406:	e7fe      	b.n	800a406 <vTaskSwitchContext+0x3e>
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3b01      	subs	r3, #1
 800a40c:	60fb      	str	r3, [r7, #12]
 800a40e:	491d      	ldr	r1, [pc, #116]	; (800a484 <vTaskSwitchContext+0xbc>)
 800a410:	68fa      	ldr	r2, [r7, #12]
 800a412:	4613      	mov	r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4413      	add	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	440b      	add	r3, r1
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d0e4      	beq.n	800a3ec <vTaskSwitchContext+0x24>
 800a422:	68fa      	ldr	r2, [r7, #12]
 800a424:	4613      	mov	r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	4413      	add	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4a15      	ldr	r2, [pc, #84]	; (800a484 <vTaskSwitchContext+0xbc>)
 800a42e:	4413      	add	r3, r2
 800a430:	60bb      	str	r3, [r7, #8]
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	685a      	ldr	r2, [r3, #4]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	605a      	str	r2, [r3, #4]
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	685a      	ldr	r2, [r3, #4]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	3308      	adds	r3, #8
 800a444:	429a      	cmp	r2, r3
 800a446:	d104      	bne.n	800a452 <vTaskSwitchContext+0x8a>
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	605a      	str	r2, [r3, #4]
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	4a0b      	ldr	r2, [pc, #44]	; (800a488 <vTaskSwitchContext+0xc0>)
 800a45a:	6013      	str	r3, [r2, #0]
 800a45c:	4a08      	ldr	r2, [pc, #32]	; (800a480 <vTaskSwitchContext+0xb8>)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a462:	4b09      	ldr	r3, [pc, #36]	; (800a488 <vTaskSwitchContext+0xc0>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3364      	adds	r3, #100	; 0x64
 800a468:	4a08      	ldr	r2, [pc, #32]	; (800a48c <vTaskSwitchContext+0xc4>)
 800a46a:	6013      	str	r3, [r2, #0]
}
 800a46c:	bf00      	nop
 800a46e:	3714      	adds	r7, #20
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	200010b8 	.word	0x200010b8
 800a47c:	200010a4 	.word	0x200010a4
 800a480:	20001098 	.word	0x20001098
 800a484:	20000bc0 	.word	0x20000bc0
 800a488:	20000bbc 	.word	0x20000bbc
 800a48c:	2000010c 	.word	0x2000010c

0800a490 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10a      	bne.n	800a4b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	60fb      	str	r3, [r7, #12]
}
 800a4b2:	bf00      	nop
 800a4b4:	e7fe      	b.n	800a4b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a4b6:	4b07      	ldr	r3, [pc, #28]	; (800a4d4 <vTaskPlaceOnEventList+0x44>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	3318      	adds	r3, #24
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f7fe f841 	bl	8008546 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a4c4:	2101      	movs	r1, #1
 800a4c6:	6838      	ldr	r0, [r7, #0]
 800a4c8:	f000 ff46 	bl	800b358 <prvAddCurrentTaskToDelayedList>
}
 800a4cc:	bf00      	nop
 800a4ce:	3710      	adds	r7, #16
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	20000bbc 	.word	0x20000bbc

0800a4d8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b086      	sub	sp, #24
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10a      	bne.n	800a500 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	617b      	str	r3, [r7, #20]
}
 800a4fc:	bf00      	nop
 800a4fe:	e7fe      	b.n	800a4fe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a500:	4b0a      	ldr	r3, [pc, #40]	; (800a52c <vTaskPlaceOnEventListRestricted+0x54>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	3318      	adds	r3, #24
 800a506:	4619      	mov	r1, r3
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f7fd fff8 	bl	80084fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d002      	beq.n	800a51a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a518:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a51a:	6879      	ldr	r1, [r7, #4]
 800a51c:	68b8      	ldr	r0, [r7, #8]
 800a51e:	f000 ff1b 	bl	800b358 <prvAddCurrentTaskToDelayedList>
	}
 800a522:	bf00      	nop
 800a524:	3718      	adds	r7, #24
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	20000bbc 	.word	0x20000bbc

0800a530 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10a      	bne.n	800a55c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54a:	f383 8811 	msr	BASEPRI, r3
 800a54e:	f3bf 8f6f 	isb	sy
 800a552:	f3bf 8f4f 	dsb	sy
 800a556:	60fb      	str	r3, [r7, #12]
}
 800a558:	bf00      	nop
 800a55a:	e7fe      	b.n	800a55a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	3318      	adds	r3, #24
 800a560:	4618      	mov	r0, r3
 800a562:	f7fe f829 	bl	80085b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a566:	4b1e      	ldr	r3, [pc, #120]	; (800a5e0 <xTaskRemoveFromEventList+0xb0>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d11d      	bne.n	800a5aa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	3304      	adds	r3, #4
 800a572:	4618      	mov	r0, r3
 800a574:	f7fe f820 	bl	80085b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57c:	4b19      	ldr	r3, [pc, #100]	; (800a5e4 <xTaskRemoveFromEventList+0xb4>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	429a      	cmp	r2, r3
 800a582:	d903      	bls.n	800a58c <xTaskRemoveFromEventList+0x5c>
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a588:	4a16      	ldr	r2, [pc, #88]	; (800a5e4 <xTaskRemoveFromEventList+0xb4>)
 800a58a:	6013      	str	r3, [r2, #0]
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a590:	4613      	mov	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	4413      	add	r3, r2
 800a596:	009b      	lsls	r3, r3, #2
 800a598:	4a13      	ldr	r2, [pc, #76]	; (800a5e8 <xTaskRemoveFromEventList+0xb8>)
 800a59a:	441a      	add	r2, r3
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	f7fd ffab 	bl	80084fe <vListInsertEnd>
 800a5a8:	e005      	b.n	800a5b6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	3318      	adds	r3, #24
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	480e      	ldr	r0, [pc, #56]	; (800a5ec <xTaskRemoveFromEventList+0xbc>)
 800a5b2:	f7fd ffa4 	bl	80084fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a5b6:	693b      	ldr	r3, [r7, #16]
 800a5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ba:	4b0d      	ldr	r3, [pc, #52]	; (800a5f0 <xTaskRemoveFromEventList+0xc0>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d905      	bls.n	800a5d0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a5c8:	4b0a      	ldr	r3, [pc, #40]	; (800a5f4 <xTaskRemoveFromEventList+0xc4>)
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	601a      	str	r2, [r3, #0]
 800a5ce:	e001      	b.n	800a5d4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a5d4:	697b      	ldr	r3, [r7, #20]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3718      	adds	r7, #24
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	200010b8 	.word	0x200010b8
 800a5e4:	20001098 	.word	0x20001098
 800a5e8:	20000bc0 	.word	0x20000bc0
 800a5ec:	20001050 	.word	0x20001050
 800a5f0:	20000bbc 	.word	0x20000bbc
 800a5f4:	200010a4 	.word	0x200010a4

0800a5f8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b083      	sub	sp, #12
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a600:	4b06      	ldr	r3, [pc, #24]	; (800a61c <vTaskInternalSetTimeOutState+0x24>)
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a608:	4b05      	ldr	r3, [pc, #20]	; (800a620 <vTaskInternalSetTimeOutState+0x28>)
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	605a      	str	r2, [r3, #4]
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr
 800a61c:	200010a8 	.word	0x200010a8
 800a620:	20001094 	.word	0x20001094

0800a624 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b088      	sub	sp, #32
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10a      	bne.n	800a64a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a638:	f383 8811 	msr	BASEPRI, r3
 800a63c:	f3bf 8f6f 	isb	sy
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	613b      	str	r3, [r7, #16]
}
 800a646:	bf00      	nop
 800a648:	e7fe      	b.n	800a648 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10a      	bne.n	800a666 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	60fb      	str	r3, [r7, #12]
}
 800a662:	bf00      	nop
 800a664:	e7fe      	b.n	800a664 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a666:	f001 fb45 	bl	800bcf4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a66a:	4b1d      	ldr	r3, [pc, #116]	; (800a6e0 <xTaskCheckForTimeOut+0xbc>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	69ba      	ldr	r2, [r7, #24]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a682:	d102      	bne.n	800a68a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a684:	2300      	movs	r3, #0
 800a686:	61fb      	str	r3, [r7, #28]
 800a688:	e023      	b.n	800a6d2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	4b15      	ldr	r3, [pc, #84]	; (800a6e4 <xTaskCheckForTimeOut+0xc0>)
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	429a      	cmp	r2, r3
 800a694:	d007      	beq.n	800a6a6 <xTaskCheckForTimeOut+0x82>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	69ba      	ldr	r2, [r7, #24]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d302      	bcc.n	800a6a6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	61fb      	str	r3, [r7, #28]
 800a6a4:	e015      	b.n	800a6d2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d20b      	bcs.n	800a6c8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	1ad2      	subs	r2, r2, r3
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f7ff ff9b 	bl	800a5f8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	61fb      	str	r3, [r7, #28]
 800a6c6:	e004      	b.n	800a6d2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a6d2:	f001 fb3f 	bl	800bd54 <vPortExitCritical>

	return xReturn;
 800a6d6:	69fb      	ldr	r3, [r7, #28]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3720      	adds	r7, #32
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	20001094 	.word	0x20001094
 800a6e4:	200010a8 	.word	0x200010a8

0800a6e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a6ec:	4b03      	ldr	r3, [pc, #12]	; (800a6fc <vTaskMissedYield+0x14>)
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	601a      	str	r2, [r3, #0]
}
 800a6f2:	bf00      	nop
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	200010a4 	.word	0x200010a4

0800a700 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a708:	f000 f852 	bl	800a7b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a70c:	4b06      	ldr	r3, [pc, #24]	; (800a728 <prvIdleTask+0x28>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b01      	cmp	r3, #1
 800a712:	d9f9      	bls.n	800a708 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a714:	4b05      	ldr	r3, [pc, #20]	; (800a72c <prvIdleTask+0x2c>)
 800a716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a71a:	601a      	str	r2, [r3, #0]
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a724:	e7f0      	b.n	800a708 <prvIdleTask+0x8>
 800a726:	bf00      	nop
 800a728:	20000bc0 	.word	0x20000bc0
 800a72c:	e000ed04 	.word	0xe000ed04

0800a730 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a736:	2300      	movs	r3, #0
 800a738:	607b      	str	r3, [r7, #4]
 800a73a:	e00c      	b.n	800a756 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	4613      	mov	r3, r2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	4a12      	ldr	r2, [pc, #72]	; (800a790 <prvInitialiseTaskLists+0x60>)
 800a748:	4413      	add	r3, r2
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fd feaa 	bl	80084a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	3301      	adds	r3, #1
 800a754:	607b      	str	r3, [r7, #4]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2b37      	cmp	r3, #55	; 0x37
 800a75a:	d9ef      	bls.n	800a73c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a75c:	480d      	ldr	r0, [pc, #52]	; (800a794 <prvInitialiseTaskLists+0x64>)
 800a75e:	f7fd fea1 	bl	80084a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a762:	480d      	ldr	r0, [pc, #52]	; (800a798 <prvInitialiseTaskLists+0x68>)
 800a764:	f7fd fe9e 	bl	80084a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a768:	480c      	ldr	r0, [pc, #48]	; (800a79c <prvInitialiseTaskLists+0x6c>)
 800a76a:	f7fd fe9b 	bl	80084a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a76e:	480c      	ldr	r0, [pc, #48]	; (800a7a0 <prvInitialiseTaskLists+0x70>)
 800a770:	f7fd fe98 	bl	80084a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a774:	480b      	ldr	r0, [pc, #44]	; (800a7a4 <prvInitialiseTaskLists+0x74>)
 800a776:	f7fd fe95 	bl	80084a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a77a:	4b0b      	ldr	r3, [pc, #44]	; (800a7a8 <prvInitialiseTaskLists+0x78>)
 800a77c:	4a05      	ldr	r2, [pc, #20]	; (800a794 <prvInitialiseTaskLists+0x64>)
 800a77e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a780:	4b0a      	ldr	r3, [pc, #40]	; (800a7ac <prvInitialiseTaskLists+0x7c>)
 800a782:	4a05      	ldr	r2, [pc, #20]	; (800a798 <prvInitialiseTaskLists+0x68>)
 800a784:	601a      	str	r2, [r3, #0]
}
 800a786:	bf00      	nop
 800a788:	3708      	adds	r7, #8
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}
 800a78e:	bf00      	nop
 800a790:	20000bc0 	.word	0x20000bc0
 800a794:	20001020 	.word	0x20001020
 800a798:	20001034 	.word	0x20001034
 800a79c:	20001050 	.word	0x20001050
 800a7a0:	20001064 	.word	0x20001064
 800a7a4:	2000107c 	.word	0x2000107c
 800a7a8:	20001048 	.word	0x20001048
 800a7ac:	2000104c 	.word	0x2000104c

0800a7b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7b6:	e019      	b.n	800a7ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a7b8:	f001 fa9c 	bl	800bcf4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7bc:	4b10      	ldr	r3, [pc, #64]	; (800a800 <prvCheckTasksWaitingTermination+0x50>)
 800a7be:	68db      	ldr	r3, [r3, #12]
 800a7c0:	68db      	ldr	r3, [r3, #12]
 800a7c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	3304      	adds	r3, #4
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7fd fef5 	bl	80085b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a7ce:	4b0d      	ldr	r3, [pc, #52]	; (800a804 <prvCheckTasksWaitingTermination+0x54>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	4a0b      	ldr	r2, [pc, #44]	; (800a804 <prvCheckTasksWaitingTermination+0x54>)
 800a7d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a7d8:	4b0b      	ldr	r3, [pc, #44]	; (800a808 <prvCheckTasksWaitingTermination+0x58>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	4a0a      	ldr	r2, [pc, #40]	; (800a808 <prvCheckTasksWaitingTermination+0x58>)
 800a7e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a7e2:	f001 fab7 	bl	800bd54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 f8e4 	bl	800a9b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a7ec:	4b06      	ldr	r3, [pc, #24]	; (800a808 <prvCheckTasksWaitingTermination+0x58>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d1e1      	bne.n	800a7b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a7f4:	bf00      	nop
 800a7f6:	bf00      	nop
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	20001064 	.word	0x20001064
 800a804:	20001090 	.word	0x20001090
 800a808:	20001078 	.word	0x20001078

0800a80c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d102      	bne.n	800a826 <vTaskGetInfo+0x1a>
 800a820:	4b2c      	ldr	r3, [pc, #176]	; (800a8d4 <vTaskGetInfo+0xc8>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	e000      	b.n	800a828 <vTaskGetInfo+0x1c>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	697a      	ldr	r2, [r7, #20]
 800a82e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	2200      	movs	r2, #0
 800a85e:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800a860:	78fb      	ldrb	r3, [r7, #3]
 800a862:	2b05      	cmp	r3, #5
 800a864:	d01a      	beq.n	800a89c <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800a866:	4b1b      	ldr	r3, [pc, #108]	; (800a8d4 <vTaskGetInfo+0xc8>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	697a      	ldr	r2, [r7, #20]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d103      	bne.n	800a878 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2200      	movs	r2, #0
 800a874:	731a      	strb	r2, [r3, #12]
 800a876:	e018      	b.n	800a8aa <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	78fa      	ldrb	r2, [r7, #3]
 800a87c:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800a87e:	78fb      	ldrb	r3, [r7, #3]
 800a880:	2b03      	cmp	r3, #3
 800a882:	d112      	bne.n	800a8aa <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800a884:	f7ff fb9c 	bl	8009fc0 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d002      	beq.n	800a896 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	2202      	movs	r2, #2
 800a894:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800a896:	f7ff fba1 	bl	8009fdc <xTaskResumeAll>
 800a89a:	e006      	b.n	800a8aa <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800a89c:	6978      	ldr	r0, [r7, #20]
 800a89e:	f7ff fab9 	bl	8009e14 <eTaskGetState>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d009      	beq.n	800a8c4 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f000 f861 	bl	800a97c <prvTaskCheckFreeStackSpace>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	461a      	mov	r2, r3
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800a8c2:	e002      	b.n	800a8ca <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	841a      	strh	r2, [r3, #32]
	}
 800a8ca:	bf00      	nop
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	20000bbc 	.word	0x20000bbc

0800a8d8 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b08a      	sub	sp, #40	; 0x28
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d03f      	beq.n	800a972 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	623b      	str	r3, [r7, #32]
 800a8f6:	6a3b      	ldr	r3, [r7, #32]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	685a      	ldr	r2, [r3, #4]
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	605a      	str	r2, [r3, #4]
 800a900:	6a3b      	ldr	r3, [r7, #32]
 800a902:	685a      	ldr	r2, [r3, #4]
 800a904:	6a3b      	ldr	r3, [r7, #32]
 800a906:	3308      	adds	r3, #8
 800a908:	429a      	cmp	r2, r3
 800a90a:	d104      	bne.n	800a916 <prvListTasksWithinSingleList+0x3e>
 800a90c:	6a3b      	ldr	r3, [r7, #32]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	685a      	ldr	r2, [r3, #4]
 800a912:	6a3b      	ldr	r3, [r7, #32]
 800a914:	605a      	str	r2, [r3, #4]
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	61bb      	str	r3, [r7, #24]
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	605a      	str	r2, [r3, #4]
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	685a      	ldr	r2, [r3, #4]
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	3308      	adds	r3, #8
 800a934:	429a      	cmp	r2, r3
 800a936:	d104      	bne.n	800a942 <prvListTasksWithinSingleList+0x6a>
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	685a      	ldr	r2, [r3, #4]
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	605a      	str	r2, [r3, #4]
 800a942:	69bb      	ldr	r3, [r7, #24]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800a94a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a94c:	4613      	mov	r3, r2
 800a94e:	00db      	lsls	r3, r3, #3
 800a950:	4413      	add	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	461a      	mov	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	1899      	adds	r1, r3, r2
 800a95a:	79fb      	ldrb	r3, [r7, #7]
 800a95c:	2201      	movs	r2, #1
 800a95e:	6978      	ldr	r0, [r7, #20]
 800a960:	f7ff ff54 	bl	800a80c <vTaskGetInfo>
				uxTask++;
 800a964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a966:	3301      	adds	r3, #1
 800a968:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	69fb      	ldr	r3, [r7, #28]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d1d5      	bne.n	800a91e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a974:	4618      	mov	r0, r3
 800a976:	3728      	adds	r7, #40	; 0x28
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800a97c:	b480      	push	{r7}
 800a97e:	b085      	sub	sp, #20
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800a984:	2300      	movs	r3, #0
 800a986:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a988:	e005      	b.n	800a996 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	3301      	adds	r3, #1
 800a98e:	607b      	str	r3, [r7, #4]
			ulCount++;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	3301      	adds	r3, #1
 800a994:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	2ba5      	cmp	r3, #165	; 0xa5
 800a99c:	d0f5      	beq.n	800a98a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	089b      	lsrs	r3, r3, #2
 800a9a2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	b29b      	uxth	r3, r3
	}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3714      	adds	r7, #20
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	3364      	adds	r3, #100	; 0x64
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f002 fb29 	bl	800d018 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d108      	bne.n	800a9e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f001 fb7b 	bl	800c0d0 <vPortFree>
				vPortFree( pxTCB );
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f001 fb78 	bl	800c0d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a9e0:	e018      	b.n	800aa14 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d103      	bne.n	800a9f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f001 fb6f 	bl	800c0d0 <vPortFree>
	}
 800a9f2:	e00f      	b.n	800aa14 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800a9fa:	2b02      	cmp	r3, #2
 800a9fc:	d00a      	beq.n	800aa14 <prvDeleteTCB+0x60>
	__asm volatile
 800a9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa02:	f383 8811 	msr	BASEPRI, r3
 800aa06:	f3bf 8f6f 	isb	sy
 800aa0a:	f3bf 8f4f 	dsb	sy
 800aa0e:	60fb      	str	r3, [r7, #12]
}
 800aa10:	bf00      	nop
 800aa12:	e7fe      	b.n	800aa12 <prvDeleteTCB+0x5e>
	}
 800aa14:	bf00      	nop
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa22:	4b0c      	ldr	r3, [pc, #48]	; (800aa54 <prvResetNextTaskUnblockTime+0x38>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d104      	bne.n	800aa36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <prvResetNextTaskUnblockTime+0x3c>)
 800aa2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aa34:	e008      	b.n	800aa48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa36:	4b07      	ldr	r3, [pc, #28]	; (800aa54 <prvResetNextTaskUnblockTime+0x38>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	68db      	ldr	r3, [r3, #12]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	4a04      	ldr	r2, [pc, #16]	; (800aa58 <prvResetNextTaskUnblockTime+0x3c>)
 800aa46:	6013      	str	r3, [r2, #0]
}
 800aa48:	bf00      	nop
 800aa4a:	370c      	adds	r7, #12
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	20001048 	.word	0x20001048
 800aa58:	200010b0 	.word	0x200010b0

0800aa5c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800aa62:	4b05      	ldr	r3, [pc, #20]	; (800aa78 <xTaskGetCurrentTaskHandle+0x1c>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	607b      	str	r3, [r7, #4]

		return xReturn;
 800aa68:	687b      	ldr	r3, [r7, #4]
	}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	370c      	adds	r7, #12
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	20000bbc 	.word	0x20000bbc

0800aa7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa82:	4b0b      	ldr	r3, [pc, #44]	; (800aab0 <xTaskGetSchedulerState+0x34>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d102      	bne.n	800aa90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	607b      	str	r3, [r7, #4]
 800aa8e:	e008      	b.n	800aaa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa90:	4b08      	ldr	r3, [pc, #32]	; (800aab4 <xTaskGetSchedulerState+0x38>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d102      	bne.n	800aa9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa98:	2302      	movs	r3, #2
 800aa9a:	607b      	str	r3, [r7, #4]
 800aa9c:	e001      	b.n	800aaa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aaa2:	687b      	ldr	r3, [r7, #4]
	}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr
 800aab0:	2000109c 	.word	0x2000109c
 800aab4:	200010b8 	.word	0x200010b8

0800aab8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800aac4:	2300      	movs	r3, #0
 800aac6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d051      	beq.n	800ab72 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aad2:	4b2a      	ldr	r3, [pc, #168]	; (800ab7c <xTaskPriorityInherit+0xc4>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	429a      	cmp	r2, r3
 800aada:	d241      	bcs.n	800ab60 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	db06      	blt.n	800aaf2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aae4:	4b25      	ldr	r3, [pc, #148]	; (800ab7c <xTaskPriorityInherit+0xc4>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	6959      	ldr	r1, [r3, #20]
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aafa:	4613      	mov	r3, r2
 800aafc:	009b      	lsls	r3, r3, #2
 800aafe:	4413      	add	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4a1f      	ldr	r2, [pc, #124]	; (800ab80 <xTaskPriorityInherit+0xc8>)
 800ab04:	4413      	add	r3, r2
 800ab06:	4299      	cmp	r1, r3
 800ab08:	d122      	bne.n	800ab50 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7fd fd52 	bl	80085b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab14:	4b19      	ldr	r3, [pc, #100]	; (800ab7c <xTaskPriorityInherit+0xc4>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab22:	4b18      	ldr	r3, [pc, #96]	; (800ab84 <xTaskPriorityInherit+0xcc>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d903      	bls.n	800ab32 <xTaskPriorityInherit+0x7a>
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2e:	4a15      	ldr	r2, [pc, #84]	; (800ab84 <xTaskPriorityInherit+0xcc>)
 800ab30:	6013      	str	r3, [r2, #0]
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab36:	4613      	mov	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4a10      	ldr	r2, [pc, #64]	; (800ab80 <xTaskPriorityInherit+0xc8>)
 800ab40:	441a      	add	r2, r3
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	3304      	adds	r3, #4
 800ab46:	4619      	mov	r1, r3
 800ab48:	4610      	mov	r0, r2
 800ab4a:	f7fd fcd8 	bl	80084fe <vListInsertEnd>
 800ab4e:	e004      	b.n	800ab5a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab50:	4b0a      	ldr	r3, [pc, #40]	; (800ab7c <xTaskPriorityInherit+0xc4>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	60fb      	str	r3, [r7, #12]
 800ab5e:	e008      	b.n	800ab72 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ab64:	4b05      	ldr	r3, [pc, #20]	; (800ab7c <xTaskPriorityInherit+0xc4>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d201      	bcs.n	800ab72 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab72:	68fb      	ldr	r3, [r7, #12]
	}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3710      	adds	r7, #16
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	20000bbc 	.word	0x20000bbc
 800ab80:	20000bc0 	.word	0x20000bc0
 800ab84:	20001098 	.word	0x20001098

0800ab88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b086      	sub	sp, #24
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ab94:	2300      	movs	r3, #0
 800ab96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d056      	beq.n	800ac4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ab9e:	4b2e      	ldr	r3, [pc, #184]	; (800ac58 <xTaskPriorityDisinherit+0xd0>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d00a      	beq.n	800abbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800aba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abac:	f383 8811 	msr	BASEPRI, r3
 800abb0:	f3bf 8f6f 	isb	sy
 800abb4:	f3bf 8f4f 	dsb	sy
 800abb8:	60fb      	str	r3, [r7, #12]
}
 800abba:	bf00      	nop
 800abbc:	e7fe      	b.n	800abbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d10a      	bne.n	800abdc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800abc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abca:	f383 8811 	msr	BASEPRI, r3
 800abce:	f3bf 8f6f 	isb	sy
 800abd2:	f3bf 8f4f 	dsb	sy
 800abd6:	60bb      	str	r3, [r7, #8]
}
 800abd8:	bf00      	nop
 800abda:	e7fe      	b.n	800abda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe0:	1e5a      	subs	r2, r3, #1
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800abe6:	693b      	ldr	r3, [r7, #16]
 800abe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abee:	429a      	cmp	r2, r3
 800abf0:	d02c      	beq.n	800ac4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d128      	bne.n	800ac4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	3304      	adds	r3, #4
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7fd fcda 	bl	80085b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac08:	693b      	ldr	r3, [r7, #16]
 800ac0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1c:	4b0f      	ldr	r3, [pc, #60]	; (800ac5c <xTaskPriorityDisinherit+0xd4>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d903      	bls.n	800ac2c <xTaskPriorityDisinherit+0xa4>
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac28:	4a0c      	ldr	r2, [pc, #48]	; (800ac5c <xTaskPriorityDisinherit+0xd4>)
 800ac2a:	6013      	str	r3, [r2, #0]
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac30:	4613      	mov	r3, r2
 800ac32:	009b      	lsls	r3, r3, #2
 800ac34:	4413      	add	r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4a09      	ldr	r2, [pc, #36]	; (800ac60 <xTaskPriorityDisinherit+0xd8>)
 800ac3a:	441a      	add	r2, r3
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	3304      	adds	r3, #4
 800ac40:	4619      	mov	r1, r3
 800ac42:	4610      	mov	r0, r2
 800ac44:	f7fd fc5b 	bl	80084fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac4c:	697b      	ldr	r3, [r7, #20]
	}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3718      	adds	r7, #24
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	20000bbc 	.word	0x20000bbc
 800ac5c:	20001098 	.word	0x20001098
 800ac60:	20000bc0 	.word	0x20000bc0

0800ac64 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ac72:	2301      	movs	r3, #1
 800ac74:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d06a      	beq.n	800ad52 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10a      	bne.n	800ac9a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ac84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	60fb      	str	r3, [r7, #12]
}
 800ac96:	bf00      	nop
 800ac98:	e7fe      	b.n	800ac98 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d902      	bls.n	800acaa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	61fb      	str	r3, [r7, #28]
 800aca8:	e002      	b.n	800acb0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb4:	69fa      	ldr	r2, [r7, #28]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d04b      	beq.n	800ad52 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d146      	bne.n	800ad52 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800acc4:	4b25      	ldr	r3, [pc, #148]	; (800ad5c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	69ba      	ldr	r2, [r7, #24]
 800acca:	429a      	cmp	r2, r3
 800accc:	d10a      	bne.n	800ace4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800acce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd2:	f383 8811 	msr	BASEPRI, r3
 800acd6:	f3bf 8f6f 	isb	sy
 800acda:	f3bf 8f4f 	dsb	sy
 800acde:	60bb      	str	r3, [r7, #8]
}
 800ace0:	bf00      	nop
 800ace2:	e7fe      	b.n	800ace2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	69fa      	ldr	r2, [r7, #28]
 800acee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	699b      	ldr	r3, [r3, #24]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	db04      	blt.n	800ad02 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	6959      	ldr	r1, [r3, #20]
 800ad06:	693a      	ldr	r2, [r7, #16]
 800ad08:	4613      	mov	r3, r2
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	4413      	add	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4a13      	ldr	r2, [pc, #76]	; (800ad60 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ad12:	4413      	add	r3, r2
 800ad14:	4299      	cmp	r1, r3
 800ad16:	d11c      	bne.n	800ad52 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad18:	69bb      	ldr	r3, [r7, #24]
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fd fc4b 	bl	80085b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad26:	4b0f      	ldr	r3, [pc, #60]	; (800ad64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d903      	bls.n	800ad36 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad32:	4a0c      	ldr	r2, [pc, #48]	; (800ad64 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ad34:	6013      	str	r3, [r2, #0]
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	4a07      	ldr	r2, [pc, #28]	; (800ad60 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ad44:	441a      	add	r2, r3
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	3304      	adds	r3, #4
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	4610      	mov	r0, r2
 800ad4e:	f7fd fbd6 	bl	80084fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad52:	bf00      	nop
 800ad54:	3720      	adds	r7, #32
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20000bbc 	.word	0x20000bbc
 800ad60:	20000bc0 	.word	0x20000bc0
 800ad64:	20001098 	.word	0x20001098

0800ad68 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800ad72:	6839      	ldr	r1, [r7, #0]
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f002 f9db 	bl	800d130 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7f5 fa30 	bl	80001e0 <strlen>
 800ad80:	60f8      	str	r0, [r7, #12]
 800ad82:	e007      	b.n	800ad94 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800ad84:	687a      	ldr	r2, [r7, #4]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	4413      	add	r3, r2
 800ad8a:	2220      	movs	r2, #32
 800ad8c:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	3301      	adds	r3, #1
 800ad92:	60fb      	str	r3, [r7, #12]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2b1e      	cmp	r3, #30
 800ad98:	d9f4      	bls.n	800ad84 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4413      	add	r3, r2
 800ada0:	2200      	movs	r2, #0
 800ada2:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	4413      	add	r3, r2
	}
 800adaa:	4618      	mov	r0, r3
 800adac:	3710      	adds	r7, #16
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
	...

0800adb4 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800adb4:	b590      	push	{r4, r7, lr}
 800adb6:	b089      	sub	sp, #36	; 0x24
 800adb8:	af02      	add	r7, sp, #8
 800adba:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800adc2:	4b45      	ldr	r3, [pc, #276]	; (800aed8 <vTaskList+0x124>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800adc8:	4b43      	ldr	r3, [pc, #268]	; (800aed8 <vTaskList+0x124>)
 800adca:	681a      	ldr	r2, [r3, #0]
 800adcc:	4613      	mov	r3, r2
 800adce:	00db      	lsls	r3, r3, #3
 800add0:	4413      	add	r3, r2
 800add2:	009b      	lsls	r3, r3, #2
 800add4:	4618      	mov	r0, r3
 800add6:	f001 f8af 	bl	800bf38 <pvPortMalloc>
 800adda:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d076      	beq.n	800aed0 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800ade2:	2200      	movs	r2, #0
 800ade4:	68f9      	ldr	r1, [r7, #12]
 800ade6:	68b8      	ldr	r0, [r7, #8]
 800ade8:	f7ff f9a6 	bl	800a138 <uxTaskGetSystemState>
 800adec:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800adee:	2300      	movs	r3, #0
 800adf0:	617b      	str	r3, [r7, #20]
 800adf2:	e066      	b.n	800aec2 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	4613      	mov	r3, r2
 800adf8:	00db      	lsls	r3, r3, #3
 800adfa:	4413      	add	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	461a      	mov	r2, r3
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	4413      	add	r3, r2
 800ae04:	7b1b      	ldrb	r3, [r3, #12]
 800ae06:	2b04      	cmp	r3, #4
 800ae08:	d81b      	bhi.n	800ae42 <vTaskList+0x8e>
 800ae0a:	a201      	add	r2, pc, #4	; (adr r2, 800ae10 <vTaskList+0x5c>)
 800ae0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae10:	0800ae25 	.word	0x0800ae25
 800ae14:	0800ae2b 	.word	0x0800ae2b
 800ae18:	0800ae31 	.word	0x0800ae31
 800ae1c:	0800ae37 	.word	0x0800ae37
 800ae20:	0800ae3d 	.word	0x0800ae3d
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800ae24:	2358      	movs	r3, #88	; 0x58
 800ae26:	74fb      	strb	r3, [r7, #19]
										break;
 800ae28:	e00e      	b.n	800ae48 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800ae2a:	2352      	movs	r3, #82	; 0x52
 800ae2c:	74fb      	strb	r3, [r7, #19]
										break;
 800ae2e:	e00b      	b.n	800ae48 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ae30:	2342      	movs	r3, #66	; 0x42
 800ae32:	74fb      	strb	r3, [r7, #19]
										break;
 800ae34:	e008      	b.n	800ae48 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ae36:	2353      	movs	r3, #83	; 0x53
 800ae38:	74fb      	strb	r3, [r7, #19]
										break;
 800ae3a:	e005      	b.n	800ae48 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ae3c:	2344      	movs	r3, #68	; 0x44
 800ae3e:	74fb      	strb	r3, [r7, #19]
										break;
 800ae40:	e002      	b.n	800ae48 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800ae42:	2300      	movs	r3, #0
 800ae44:	74fb      	strb	r3, [r7, #19]
										break;
 800ae46:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ae48:	697a      	ldr	r2, [r7, #20]
 800ae4a:	4613      	mov	r3, r2
 800ae4c:	00db      	lsls	r3, r3, #3
 800ae4e:	4413      	add	r3, r2
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	461a      	mov	r2, r3
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	4413      	add	r3, r2
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f7ff ff83 	bl	800ad68 <prvWriteNameToBuffer>
 800ae62:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800ae64:	7cf9      	ldrb	r1, [r7, #19]
 800ae66:	697a      	ldr	r2, [r7, #20]
 800ae68:	4613      	mov	r3, r2
 800ae6a:	00db      	lsls	r3, r3, #3
 800ae6c:	4413      	add	r3, r2
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	461a      	mov	r2, r3
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	4413      	add	r3, r2
 800ae76:	6918      	ldr	r0, [r3, #16]
 800ae78:	697a      	ldr	r2, [r7, #20]
 800ae7a:	4613      	mov	r3, r2
 800ae7c:	00db      	lsls	r3, r3, #3
 800ae7e:	4413      	add	r3, r2
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	461a      	mov	r2, r3
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	4413      	add	r3, r2
 800ae88:	8c1b      	ldrh	r3, [r3, #32]
 800ae8a:	461c      	mov	r4, r3
 800ae8c:	697a      	ldr	r2, [r7, #20]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	00db      	lsls	r3, r3, #3
 800ae92:	4413      	add	r3, r2
 800ae94:	009b      	lsls	r3, r3, #2
 800ae96:	461a      	mov	r2, r3
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	9301      	str	r3, [sp, #4]
 800aea0:	9400      	str	r4, [sp, #0]
 800aea2:	4603      	mov	r3, r0
 800aea4:	460a      	mov	r2, r1
 800aea6:	490d      	ldr	r1, [pc, #52]	; (800aedc <vTaskList+0x128>)
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f002 f921 	bl	800d0f0 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7f5 f996 	bl	80001e0 <strlen>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4413      	add	r3, r2
 800aeba:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	3301      	adds	r3, #1
 800aec0:	617b      	str	r3, [r7, #20]
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d394      	bcc.n	800adf4 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800aeca:	68b8      	ldr	r0, [r7, #8]
 800aecc:	f001 f900 	bl	800c0d0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aed0:	bf00      	nop
 800aed2:	371c      	adds	r7, #28
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd90      	pop	{r4, r7, pc}
 800aed8:	20001090 	.word	0x20001090
 800aedc:	0800dab4 	.word	0x0800dab4

0800aee0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800aee0:	b480      	push	{r7}
 800aee2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800aee4:	4b07      	ldr	r3, [pc, #28]	; (800af04 <pvTaskIncrementMutexHeldCount+0x24>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d004      	beq.n	800aef6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800aeec:	4b05      	ldr	r3, [pc, #20]	; (800af04 <pvTaskIncrementMutexHeldCount+0x24>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800aef2:	3201      	adds	r2, #1
 800aef4:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 800aef6:	4b03      	ldr	r3, [pc, #12]	; (800af04 <pvTaskIncrementMutexHeldCount+0x24>)
 800aef8:	681b      	ldr	r3, [r3, #0]
	}
 800aefa:	4618      	mov	r0, r3
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr
 800af04:	20000bbc 	.word	0x20000bbc

0800af08 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
 800af14:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800af16:	f000 feed 	bl	800bcf4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800af1a:	4b29      	ldr	r3, [pc, #164]	; (800afc0 <xTaskNotifyWait+0xb8>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800af22:	b2db      	uxtb	r3, r3
 800af24:	2b02      	cmp	r3, #2
 800af26:	d01c      	beq.n	800af62 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800af28:	4b25      	ldr	r3, [pc, #148]	; (800afc0 <xTaskNotifyWait+0xb8>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800af30:	68fa      	ldr	r2, [r7, #12]
 800af32:	43d2      	mvns	r2, r2
 800af34:	400a      	ands	r2, r1
 800af36:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800af3a:	4b21      	ldr	r3, [pc, #132]	; (800afc0 <xTaskNotifyWait+0xb8>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

				if( xTicksToWait > ( TickType_t ) 0 )
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d00b      	beq.n	800af62 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800af4a:	2101      	movs	r1, #1
 800af4c:	6838      	ldr	r0, [r7, #0]
 800af4e:	f000 fa03 	bl	800b358 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800af52:	4b1c      	ldr	r3, [pc, #112]	; (800afc4 <xTaskNotifyWait+0xbc>)
 800af54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af58:	601a      	str	r2, [r3, #0]
 800af5a:	f3bf 8f4f 	dsb	sy
 800af5e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800af62:	f000 fef7 	bl	800bd54 <vPortExitCritical>

		taskENTER_CRITICAL();
 800af66:	f000 fec5 	bl	800bcf4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d005      	beq.n	800af7c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800af70:	4b13      	ldr	r3, [pc, #76]	; (800afc0 <xTaskNotifyWait+0xb8>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800af7c:	4b10      	ldr	r3, [pc, #64]	; (800afc0 <xTaskNotifyWait+0xb8>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800af84:	b2db      	uxtb	r3, r3
 800af86:	2b02      	cmp	r3, #2
 800af88:	d002      	beq.n	800af90 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800af8a:	2300      	movs	r3, #0
 800af8c:	617b      	str	r3, [r7, #20]
 800af8e:	e00a      	b.n	800afa6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800af90:	4b0b      	ldr	r3, [pc, #44]	; (800afc0 <xTaskNotifyWait+0xb8>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800af98:	68ba      	ldr	r2, [r7, #8]
 800af9a:	43d2      	mvns	r2, r2
 800af9c:	400a      	ands	r2, r1
 800af9e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				xReturn = pdTRUE;
 800afa2:	2301      	movs	r3, #1
 800afa4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800afa6:	4b06      	ldr	r3, [pc, #24]	; (800afc0 <xTaskNotifyWait+0xb8>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2200      	movs	r2, #0
 800afac:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		}
		taskEXIT_CRITICAL();
 800afb0:	f000 fed0 	bl	800bd54 <vPortExitCritical>

		return xReturn;
 800afb4:	697b      	ldr	r3, [r7, #20]
	}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3718      	adds	r7, #24
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20000bbc 	.word	0x20000bbc
 800afc4:	e000ed04 	.word	0xe000ed04

0800afc8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b08a      	sub	sp, #40	; 0x28
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	603b      	str	r3, [r7, #0]
 800afd4:	4613      	mov	r3, r2
 800afd6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800afd8:	2301      	movs	r3, #1
 800afda:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10a      	bne.n	800aff8 <xTaskGenericNotify+0x30>
	__asm volatile
 800afe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe6:	f383 8811 	msr	BASEPRI, r3
 800afea:	f3bf 8f6f 	isb	sy
 800afee:	f3bf 8f4f 	dsb	sy
 800aff2:	61bb      	str	r3, [r7, #24]
}
 800aff4:	bf00      	nop
 800aff6:	e7fe      	b.n	800aff6 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800affc:	f000 fe7a 	bl	800bcf4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d004      	beq.n	800b010 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b006:	6a3b      	ldr	r3, [r7, #32]
 800b008:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b010:	6a3b      	ldr	r3, [r7, #32]
 800b012:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800b016:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	2202      	movs	r2, #2
 800b01c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 800b020:	79fb      	ldrb	r3, [r7, #7]
 800b022:	2b04      	cmp	r3, #4
 800b024:	d82d      	bhi.n	800b082 <xTaskGenericNotify+0xba>
 800b026:	a201      	add	r2, pc, #4	; (adr r2, 800b02c <xTaskGenericNotify+0x64>)
 800b028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02c:	0800b0a5 	.word	0x0800b0a5
 800b030:	0800b041 	.word	0x0800b041
 800b034:	0800b053 	.word	0x0800b053
 800b038:	0800b063 	.word	0x0800b063
 800b03c:	0800b06d 	.word	0x0800b06d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b040:	6a3b      	ldr	r3, [r7, #32]
 800b042:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	431a      	orrs	r2, r3
 800b04a:	6a3b      	ldr	r3, [r7, #32]
 800b04c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800b050:	e02b      	b.n	800b0aa <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b052:	6a3b      	ldr	r3, [r7, #32]
 800b054:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b058:	1c5a      	adds	r2, r3, #1
 800b05a:	6a3b      	ldr	r3, [r7, #32]
 800b05c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800b060:	e023      	b.n	800b0aa <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b062:	6a3b      	ldr	r3, [r7, #32]
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800b06a:	e01e      	b.n	800b0aa <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b06c:	7ffb      	ldrb	r3, [r7, #31]
 800b06e:	2b02      	cmp	r3, #2
 800b070:	d004      	beq.n	800b07c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	68ba      	ldr	r2, [r7, #8]
 800b076:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b07a:	e016      	b.n	800b0aa <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800b07c:	2300      	movs	r3, #0
 800b07e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800b080:	e013      	b.n	800b0aa <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b082:	6a3b      	ldr	r3, [r7, #32]
 800b084:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b08c:	d00c      	beq.n	800b0a8 <xTaskGenericNotify+0xe0>
	__asm volatile
 800b08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	617b      	str	r3, [r7, #20]
}
 800b0a0:	bf00      	nop
 800b0a2:	e7fe      	b.n	800b0a2 <xTaskGenericNotify+0xda>
					break;
 800b0a4:	bf00      	nop
 800b0a6:	e000      	b.n	800b0aa <xTaskGenericNotify+0xe2>

					break;
 800b0a8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b0aa:	7ffb      	ldrb	r3, [r7, #31]
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d13a      	bne.n	800b126 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0b0:	6a3b      	ldr	r3, [r7, #32]
 800b0b2:	3304      	adds	r3, #4
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f7fd fa7f 	bl	80085b8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0be:	4b1d      	ldr	r3, [pc, #116]	; (800b134 <xTaskGenericNotify+0x16c>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d903      	bls.n	800b0ce <xTaskGenericNotify+0x106>
 800b0c6:	6a3b      	ldr	r3, [r7, #32]
 800b0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ca:	4a1a      	ldr	r2, [pc, #104]	; (800b134 <xTaskGenericNotify+0x16c>)
 800b0cc:	6013      	str	r3, [r2, #0]
 800b0ce:	6a3b      	ldr	r3, [r7, #32]
 800b0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d2:	4613      	mov	r3, r2
 800b0d4:	009b      	lsls	r3, r3, #2
 800b0d6:	4413      	add	r3, r2
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	4a17      	ldr	r2, [pc, #92]	; (800b138 <xTaskGenericNotify+0x170>)
 800b0dc:	441a      	add	r2, r3
 800b0de:	6a3b      	ldr	r3, [r7, #32]
 800b0e0:	3304      	adds	r3, #4
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	f7fd fa0a 	bl	80084fe <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b0ea:	6a3b      	ldr	r3, [r7, #32]
 800b0ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d00a      	beq.n	800b108 <xTaskGenericNotify+0x140>
	__asm volatile
 800b0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f6:	f383 8811 	msr	BASEPRI, r3
 800b0fa:	f3bf 8f6f 	isb	sy
 800b0fe:	f3bf 8f4f 	dsb	sy
 800b102:	613b      	str	r3, [r7, #16]
}
 800b104:	bf00      	nop
 800b106:	e7fe      	b.n	800b106 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b108:	6a3b      	ldr	r3, [r7, #32]
 800b10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b10c:	4b0b      	ldr	r3, [pc, #44]	; (800b13c <xTaskGenericNotify+0x174>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b112:	429a      	cmp	r2, r3
 800b114:	d907      	bls.n	800b126 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800b116:	4b0a      	ldr	r3, [pc, #40]	; (800b140 <xTaskGenericNotify+0x178>)
 800b118:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b11c:	601a      	str	r2, [r3, #0]
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b126:	f000 fe15 	bl	800bd54 <vPortExitCritical>

		return xReturn;
 800b12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3728      	adds	r7, #40	; 0x28
 800b130:	46bd      	mov	sp, r7
 800b132:	bd80      	pop	{r7, pc}
 800b134:	20001098 	.word	0x20001098
 800b138:	20000bc0 	.word	0x20000bc0
 800b13c:	20000bbc 	.word	0x20000bbc
 800b140:	e000ed04 	.word	0xe000ed04

0800b144 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b144:	b580      	push	{r7, lr}
 800b146:	b08e      	sub	sp, #56	; 0x38
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	603b      	str	r3, [r7, #0]
 800b150:	4613      	mov	r3, r2
 800b152:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800b154:	2301      	movs	r3, #1
 800b156:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10a      	bne.n	800b174 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800b15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b170:	bf00      	nop
 800b172:	e7fe      	b.n	800b172 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b174:	f000 fea0 	bl	800beb8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b17c:	f3ef 8211 	mrs	r2, BASEPRI
 800b180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b184:	f383 8811 	msr	BASEPRI, r3
 800b188:	f3bf 8f6f 	isb	sy
 800b18c:	f3bf 8f4f 	dsb	sy
 800b190:	623a      	str	r2, [r7, #32]
 800b192:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b194:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b196:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d004      	beq.n	800b1a8 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1aa:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800b1ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1b4:	2202      	movs	r2, #2
 800b1b6:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 800b1ba:	79fb      	ldrb	r3, [r7, #7]
 800b1bc:	2b04      	cmp	r3, #4
 800b1be:	d82f      	bhi.n	800b220 <xTaskGenericNotifyFromISR+0xdc>
 800b1c0:	a201      	add	r2, pc, #4	; (adr r2, 800b1c8 <xTaskGenericNotifyFromISR+0x84>)
 800b1c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1c6:	bf00      	nop
 800b1c8:	0800b243 	.word	0x0800b243
 800b1cc:	0800b1dd 	.word	0x0800b1dd
 800b1d0:	0800b1ef 	.word	0x0800b1ef
 800b1d4:	0800b1ff 	.word	0x0800b1ff
 800b1d8:	0800b209 	.word	0x0800b209
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1de:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800b1e2:	68bb      	ldr	r3, [r7, #8]
 800b1e4:	431a      	orrs	r2, r3
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1e8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800b1ec:	e02c      	b.n	800b248 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b1f4:	1c5a      	adds	r2, r3, #1
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800b1fc:	e024      	b.n	800b248 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800b206:	e01f      	b.n	800b248 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b208:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d004      	beq.n	800b21a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b212:	68ba      	ldr	r2, [r7, #8]
 800b214:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b218:	e016      	b.n	800b248 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b21e:	e013      	b.n	800b248 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b222:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b22a:	d00c      	beq.n	800b246 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800b22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b230:	f383 8811 	msr	BASEPRI, r3
 800b234:	f3bf 8f6f 	isb	sy
 800b238:	f3bf 8f4f 	dsb	sy
 800b23c:	61bb      	str	r3, [r7, #24]
}
 800b23e:	bf00      	nop
 800b240:	e7fe      	b.n	800b240 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800b242:	bf00      	nop
 800b244:	e000      	b.n	800b248 <xTaskGenericNotifyFromISR+0x104>
					break;
 800b246:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b248:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d146      	bne.n	800b2de <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b254:	2b00      	cmp	r3, #0
 800b256:	d00a      	beq.n	800b26e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	617b      	str	r3, [r7, #20]
}
 800b26a:	bf00      	nop
 800b26c:	e7fe      	b.n	800b26c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b26e:	4b21      	ldr	r3, [pc, #132]	; (800b2f4 <xTaskGenericNotifyFromISR+0x1b0>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d11d      	bne.n	800b2b2 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b278:	3304      	adds	r3, #4
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fd f99c 	bl	80085b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b284:	4b1c      	ldr	r3, [pc, #112]	; (800b2f8 <xTaskGenericNotifyFromISR+0x1b4>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d903      	bls.n	800b294 <xTaskGenericNotifyFromISR+0x150>
 800b28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b290:	4a19      	ldr	r2, [pc, #100]	; (800b2f8 <xTaskGenericNotifyFromISR+0x1b4>)
 800b292:	6013      	str	r3, [r2, #0]
 800b294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b298:	4613      	mov	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	4413      	add	r3, r2
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	4a16      	ldr	r2, [pc, #88]	; (800b2fc <xTaskGenericNotifyFromISR+0x1b8>)
 800b2a2:	441a      	add	r2, r3
 800b2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a6:	3304      	adds	r3, #4
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	4610      	mov	r0, r2
 800b2ac:	f7fd f927 	bl	80084fe <vListInsertEnd>
 800b2b0:	e005      	b.n	800b2be <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b4:	3318      	adds	r3, #24
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	4811      	ldr	r0, [pc, #68]	; (800b300 <xTaskGenericNotifyFromISR+0x1bc>)
 800b2ba:	f7fd f920 	bl	80084fe <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c2:	4b10      	ldr	r3, [pc, #64]	; (800b304 <xTaskGenericNotifyFromISR+0x1c0>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d908      	bls.n	800b2de <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b2cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d002      	beq.n	800b2d8 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b2d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b2d8:	4b0b      	ldr	r3, [pc, #44]	; (800b308 <xTaskGenericNotifyFromISR+0x1c4>)
 800b2da:	2201      	movs	r2, #1
 800b2dc:	601a      	str	r2, [r3, #0]
 800b2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	f383 8811 	msr	BASEPRI, r3
}
 800b2e8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3738      	adds	r7, #56	; 0x38
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	200010b8 	.word	0x200010b8
 800b2f8:	20001098 	.word	0x20001098
 800b2fc:	20000bc0 	.word	0x20000bc0
 800b300:	20001050 	.word	0x20001050
 800b304:	20000bbc 	.word	0x20000bbc
 800b308:	200010a4 	.word	0x200010a4

0800b30c <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b084      	sub	sp, #16
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d102      	bne.n	800b320 <xTaskNotifyStateClear+0x14>
 800b31a:	4b0e      	ldr	r3, [pc, #56]	; (800b354 <xTaskNotifyStateClear+0x48>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	e000      	b.n	800b322 <xTaskNotifyStateClear+0x16>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800b324:	f000 fce6 	bl	800bcf4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800b32e:	b2db      	uxtb	r3, r3
 800b330:	2b02      	cmp	r3, #2
 800b332:	d106      	bne.n	800b342 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2200      	movs	r2, #0
 800b338:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				xReturn = pdPASS;
 800b33c:	2301      	movs	r3, #1
 800b33e:	60fb      	str	r3, [r7, #12]
 800b340:	e001      	b.n	800b346 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800b342:	2300      	movs	r3, #0
 800b344:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800b346:	f000 fd05 	bl	800bd54 <vPortExitCritical>

		return xReturn;
 800b34a:	68fb      	ldr	r3, [r7, #12]
	}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3710      	adds	r7, #16
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}
 800b354:	20000bbc 	.word	0x20000bbc

0800b358 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b362:	4b21      	ldr	r3, [pc, #132]	; (800b3e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b368:	4b20      	ldr	r3, [pc, #128]	; (800b3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3304      	adds	r3, #4
 800b36e:	4618      	mov	r0, r3
 800b370:	f7fd f922 	bl	80085b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b37a:	d10a      	bne.n	800b392 <prvAddCurrentTaskToDelayedList+0x3a>
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d007      	beq.n	800b392 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b382:	4b1a      	ldr	r3, [pc, #104]	; (800b3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	3304      	adds	r3, #4
 800b388:	4619      	mov	r1, r3
 800b38a:	4819      	ldr	r0, [pc, #100]	; (800b3f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b38c:	f7fd f8b7 	bl	80084fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b390:	e026      	b.n	800b3e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4413      	add	r3, r2
 800b398:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b39a:	4b14      	ldr	r3, [pc, #80]	; (800b3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	68ba      	ldr	r2, [r7, #8]
 800b3a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d209      	bcs.n	800b3be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3aa:	4b12      	ldr	r3, [pc, #72]	; (800b3f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	4b0f      	ldr	r3, [pc, #60]	; (800b3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	3304      	adds	r3, #4
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	4610      	mov	r0, r2
 800b3b8:	f7fd f8c5 	bl	8008546 <vListInsert>
}
 800b3bc:	e010      	b.n	800b3e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3be:	4b0e      	ldr	r3, [pc, #56]	; (800b3f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	4b0a      	ldr	r3, [pc, #40]	; (800b3ec <prvAddCurrentTaskToDelayedList+0x94>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	4610      	mov	r0, r2
 800b3cc:	f7fd f8bb 	bl	8008546 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b3d0:	4b0a      	ldr	r3, [pc, #40]	; (800b3fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68ba      	ldr	r2, [r7, #8]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d202      	bcs.n	800b3e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b3da:	4a08      	ldr	r2, [pc, #32]	; (800b3fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	6013      	str	r3, [r2, #0]
}
 800b3e0:	bf00      	nop
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	20001094 	.word	0x20001094
 800b3ec:	20000bbc 	.word	0x20000bbc
 800b3f0:	2000107c 	.word	0x2000107c
 800b3f4:	2000104c 	.word	0x2000104c
 800b3f8:	20001048 	.word	0x20001048
 800b3fc:	200010b0 	.word	0x200010b0

0800b400 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b08a      	sub	sp, #40	; 0x28
 800b404:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b406:	2300      	movs	r3, #0
 800b408:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b40a:	f000 fb07 	bl	800ba1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b40e:	4b1c      	ldr	r3, [pc, #112]	; (800b480 <xTimerCreateTimerTask+0x80>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d021      	beq.n	800b45a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b416:	2300      	movs	r3, #0
 800b418:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b41a:	2300      	movs	r3, #0
 800b41c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b41e:	1d3a      	adds	r2, r7, #4
 800b420:	f107 0108 	add.w	r1, r7, #8
 800b424:	f107 030c 	add.w	r3, r7, #12
 800b428:	4618      	mov	r0, r3
 800b42a:	f7fd f821 	bl	8008470 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b42e:	6879      	ldr	r1, [r7, #4]
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	68fa      	ldr	r2, [r7, #12]
 800b434:	9202      	str	r2, [sp, #8]
 800b436:	9301      	str	r3, [sp, #4]
 800b438:	2302      	movs	r3, #2
 800b43a:	9300      	str	r3, [sp, #0]
 800b43c:	2300      	movs	r3, #0
 800b43e:	460a      	mov	r2, r1
 800b440:	4910      	ldr	r1, [pc, #64]	; (800b484 <xTimerCreateTimerTask+0x84>)
 800b442:	4811      	ldr	r0, [pc, #68]	; (800b488 <xTimerCreateTimerTask+0x88>)
 800b444:	f7fe fafa 	bl	8009a3c <xTaskCreateStatic>
 800b448:	4603      	mov	r3, r0
 800b44a:	4a10      	ldr	r2, [pc, #64]	; (800b48c <xTimerCreateTimerTask+0x8c>)
 800b44c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b44e:	4b0f      	ldr	r3, [pc, #60]	; (800b48c <xTimerCreateTimerTask+0x8c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d001      	beq.n	800b45a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b456:	2301      	movs	r3, #1
 800b458:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d10a      	bne.n	800b476 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b460:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b464:	f383 8811 	msr	BASEPRI, r3
 800b468:	f3bf 8f6f 	isb	sy
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	613b      	str	r3, [r7, #16]
}
 800b472:	bf00      	nop
 800b474:	e7fe      	b.n	800b474 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b476:	697b      	ldr	r3, [r7, #20]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}
 800b480:	200010ec 	.word	0x200010ec
 800b484:	0800dac4 	.word	0x0800dac4
 800b488:	0800b5c5 	.word	0x0800b5c5
 800b48c:	200010f0 	.word	0x200010f0

0800b490 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b08a      	sub	sp, #40	; 0x28
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
 800b49c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10a      	bne.n	800b4be <xTimerGenericCommand+0x2e>
	__asm volatile
 800b4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ac:	f383 8811 	msr	BASEPRI, r3
 800b4b0:	f3bf 8f6f 	isb	sy
 800b4b4:	f3bf 8f4f 	dsb	sy
 800b4b8:	623b      	str	r3, [r7, #32]
}
 800b4ba:	bf00      	nop
 800b4bc:	e7fe      	b.n	800b4bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b4be:	4b1a      	ldr	r3, [pc, #104]	; (800b528 <xTimerGenericCommand+0x98>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d02a      	beq.n	800b51c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	2b05      	cmp	r3, #5
 800b4d6:	dc18      	bgt.n	800b50a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b4d8:	f7ff fad0 	bl	800aa7c <xTaskGetSchedulerState>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d109      	bne.n	800b4f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b4e2:	4b11      	ldr	r3, [pc, #68]	; (800b528 <xTimerGenericCommand+0x98>)
 800b4e4:	6818      	ldr	r0, [r3, #0]
 800b4e6:	f107 0110 	add.w	r1, r7, #16
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4ee:	f7fd f9cb 	bl	8008888 <xQueueGenericSend>
 800b4f2:	6278      	str	r0, [r7, #36]	; 0x24
 800b4f4:	e012      	b.n	800b51c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b4f6:	4b0c      	ldr	r3, [pc, #48]	; (800b528 <xTimerGenericCommand+0x98>)
 800b4f8:	6818      	ldr	r0, [r3, #0]
 800b4fa:	f107 0110 	add.w	r1, r7, #16
 800b4fe:	2300      	movs	r3, #0
 800b500:	2200      	movs	r2, #0
 800b502:	f7fd f9c1 	bl	8008888 <xQueueGenericSend>
 800b506:	6278      	str	r0, [r7, #36]	; 0x24
 800b508:	e008      	b.n	800b51c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b50a:	4b07      	ldr	r3, [pc, #28]	; (800b528 <xTimerGenericCommand+0x98>)
 800b50c:	6818      	ldr	r0, [r3, #0]
 800b50e:	f107 0110 	add.w	r1, r7, #16
 800b512:	2300      	movs	r3, #0
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	f7fd fab5 	bl	8008a84 <xQueueGenericSendFromISR>
 800b51a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3728      	adds	r7, #40	; 0x28
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	200010ec 	.word	0x200010ec

0800b52c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b088      	sub	sp, #32
 800b530:	af02      	add	r7, sp, #8
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b536:	4b22      	ldr	r3, [pc, #136]	; (800b5c0 <prvProcessExpiredTimer+0x94>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	68db      	ldr	r3, [r3, #12]
 800b53e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	3304      	adds	r3, #4
 800b544:	4618      	mov	r0, r3
 800b546:	f7fd f837 	bl	80085b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b550:	f003 0304 	and.w	r3, r3, #4
 800b554:	2b00      	cmp	r3, #0
 800b556:	d022      	beq.n	800b59e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	699a      	ldr	r2, [r3, #24]
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	18d1      	adds	r1, r2, r3
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	6978      	ldr	r0, [r7, #20]
 800b566:	f000 f8d1 	bl	800b70c <prvInsertTimerInActiveList>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d01f      	beq.n	800b5b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b570:	2300      	movs	r3, #0
 800b572:	9300      	str	r3, [sp, #0]
 800b574:	2300      	movs	r3, #0
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	2100      	movs	r1, #0
 800b57a:	6978      	ldr	r0, [r7, #20]
 800b57c:	f7ff ff88 	bl	800b490 <xTimerGenericCommand>
 800b580:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d113      	bne.n	800b5b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58c:	f383 8811 	msr	BASEPRI, r3
 800b590:	f3bf 8f6f 	isb	sy
 800b594:	f3bf 8f4f 	dsb	sy
 800b598:	60fb      	str	r3, [r7, #12]
}
 800b59a:	bf00      	nop
 800b59c:	e7fe      	b.n	800b59c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5a4:	f023 0301 	bic.w	r3, r3, #1
 800b5a8:	b2da      	uxtb	r2, r3
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	6a1b      	ldr	r3, [r3, #32]
 800b5b4:	6978      	ldr	r0, [r7, #20]
 800b5b6:	4798      	blx	r3
}
 800b5b8:	bf00      	nop
 800b5ba:	3718      	adds	r7, #24
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	200010e4 	.word	0x200010e4

0800b5c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5cc:	f107 0308 	add.w	r3, r7, #8
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	f000 f857 	bl	800b684 <prvGetNextExpireTime>
 800b5d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	4619      	mov	r1, r3
 800b5dc:	68f8      	ldr	r0, [r7, #12]
 800b5de:	f000 f803 	bl	800b5e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b5e2:	f000 f8d5 	bl	800b790 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b5e6:	e7f1      	b.n	800b5cc <prvTimerTask+0x8>

0800b5e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b5f2:	f7fe fce5 	bl	8009fc0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5f6:	f107 0308 	add.w	r3, r7, #8
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 f866 	bl	800b6cc <prvSampleTimeNow>
 800b600:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d130      	bne.n	800b66a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10a      	bne.n	800b624 <prvProcessTimerOrBlockTask+0x3c>
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	429a      	cmp	r2, r3
 800b614:	d806      	bhi.n	800b624 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b616:	f7fe fce1 	bl	8009fdc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b61a:	68f9      	ldr	r1, [r7, #12]
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f7ff ff85 	bl	800b52c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b622:	e024      	b.n	800b66e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d008      	beq.n	800b63c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b62a:	4b13      	ldr	r3, [pc, #76]	; (800b678 <prvProcessTimerOrBlockTask+0x90>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d101      	bne.n	800b638 <prvProcessTimerOrBlockTask+0x50>
 800b634:	2301      	movs	r3, #1
 800b636:	e000      	b.n	800b63a <prvProcessTimerOrBlockTask+0x52>
 800b638:	2300      	movs	r3, #0
 800b63a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b63c:	4b0f      	ldr	r3, [pc, #60]	; (800b67c <prvProcessTimerOrBlockTask+0x94>)
 800b63e:	6818      	ldr	r0, [r3, #0]
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	683a      	ldr	r2, [r7, #0]
 800b648:	4619      	mov	r1, r3
 800b64a:	f7fd fe81 	bl	8009350 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b64e:	f7fe fcc5 	bl	8009fdc <xTaskResumeAll>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d10a      	bne.n	800b66e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b658:	4b09      	ldr	r3, [pc, #36]	; (800b680 <prvProcessTimerOrBlockTask+0x98>)
 800b65a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b65e:	601a      	str	r2, [r3, #0]
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	f3bf 8f6f 	isb	sy
}
 800b668:	e001      	b.n	800b66e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b66a:	f7fe fcb7 	bl	8009fdc <xTaskResumeAll>
}
 800b66e:	bf00      	nop
 800b670:	3710      	adds	r7, #16
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	200010e8 	.word	0x200010e8
 800b67c:	200010ec 	.word	0x200010ec
 800b680:	e000ed04 	.word	0xe000ed04

0800b684 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b68c:	4b0e      	ldr	r3, [pc, #56]	; (800b6c8 <prvGetNextExpireTime+0x44>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d101      	bne.n	800b69a <prvGetNextExpireTime+0x16>
 800b696:	2201      	movs	r2, #1
 800b698:	e000      	b.n	800b69c <prvGetNextExpireTime+0x18>
 800b69a:	2200      	movs	r2, #0
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d105      	bne.n	800b6b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6a8:	4b07      	ldr	r3, [pc, #28]	; (800b6c8 <prvGetNextExpireTime+0x44>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	60fb      	str	r3, [r7, #12]
 800b6b2:	e001      	b.n	800b6b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3714      	adds	r7, #20
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr
 800b6c6:	bf00      	nop
 800b6c8:	200010e4 	.word	0x200010e4

0800b6cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b6d4:	f7fe fd20 	bl	800a118 <xTaskGetTickCount>
 800b6d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b6da:	4b0b      	ldr	r3, [pc, #44]	; (800b708 <prvSampleTimeNow+0x3c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d205      	bcs.n	800b6f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b6e4:	f000 f936 	bl	800b954 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	601a      	str	r2, [r3, #0]
 800b6ee:	e002      	b.n	800b6f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b6f6:	4a04      	ldr	r2, [pc, #16]	; (800b708 <prvSampleTimeNow+0x3c>)
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3710      	adds	r7, #16
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	200010f4 	.word	0x200010f4

0800b70c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
 800b718:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b72a:	68ba      	ldr	r2, [r7, #8]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d812      	bhi.n	800b758 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	1ad2      	subs	r2, r2, r3
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	699b      	ldr	r3, [r3, #24]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d302      	bcc.n	800b746 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b740:	2301      	movs	r3, #1
 800b742:	617b      	str	r3, [r7, #20]
 800b744:	e01b      	b.n	800b77e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b746:	4b10      	ldr	r3, [pc, #64]	; (800b788 <prvInsertTimerInActiveList+0x7c>)
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	3304      	adds	r3, #4
 800b74e:	4619      	mov	r1, r3
 800b750:	4610      	mov	r0, r2
 800b752:	f7fc fef8 	bl	8008546 <vListInsert>
 800b756:	e012      	b.n	800b77e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d206      	bcs.n	800b76e <prvInsertTimerInActiveList+0x62>
 800b760:	68ba      	ldr	r2, [r7, #8]
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	429a      	cmp	r2, r3
 800b766:	d302      	bcc.n	800b76e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b768:	2301      	movs	r3, #1
 800b76a:	617b      	str	r3, [r7, #20]
 800b76c:	e007      	b.n	800b77e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b76e:	4b07      	ldr	r3, [pc, #28]	; (800b78c <prvInsertTimerInActiveList+0x80>)
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	3304      	adds	r3, #4
 800b776:	4619      	mov	r1, r3
 800b778:	4610      	mov	r0, r2
 800b77a:	f7fc fee4 	bl	8008546 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b77e:	697b      	ldr	r3, [r7, #20]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3718      	adds	r7, #24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	200010e8 	.word	0x200010e8
 800b78c:	200010e4 	.word	0x200010e4

0800b790 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b08e      	sub	sp, #56	; 0x38
 800b794:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b796:	e0ca      	b.n	800b92e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	da18      	bge.n	800b7d0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b79e:	1d3b      	adds	r3, r7, #4
 800b7a0:	3304      	adds	r3, #4
 800b7a2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10a      	bne.n	800b7c0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	61fb      	str	r3, [r7, #28]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7c6:	6850      	ldr	r0, [r2, #4]
 800b7c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7ca:	6892      	ldr	r2, [r2, #8]
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f2c0 80aa 	blt.w	800b92c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7de:	695b      	ldr	r3, [r3, #20]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d004      	beq.n	800b7ee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e6:	3304      	adds	r3, #4
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fc fee5 	bl	80085b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7ee:	463b      	mov	r3, r7
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7ff ff6b 	bl	800b6cc <prvSampleTimeNow>
 800b7f6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2b09      	cmp	r3, #9
 800b7fc:	f200 8097 	bhi.w	800b92e <prvProcessReceivedCommands+0x19e>
 800b800:	a201      	add	r2, pc, #4	; (adr r2, 800b808 <prvProcessReceivedCommands+0x78>)
 800b802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b806:	bf00      	nop
 800b808:	0800b831 	.word	0x0800b831
 800b80c:	0800b831 	.word	0x0800b831
 800b810:	0800b831 	.word	0x0800b831
 800b814:	0800b8a5 	.word	0x0800b8a5
 800b818:	0800b8b9 	.word	0x0800b8b9
 800b81c:	0800b903 	.word	0x0800b903
 800b820:	0800b831 	.word	0x0800b831
 800b824:	0800b831 	.word	0x0800b831
 800b828:	0800b8a5 	.word	0x0800b8a5
 800b82c:	0800b8b9 	.word	0x0800b8b9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b836:	f043 0301 	orr.w	r3, r3, #1
 800b83a:	b2da      	uxtb	r2, r3
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b846:	699b      	ldr	r3, [r3, #24]
 800b848:	18d1      	adds	r1, r2, r3
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b84e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b850:	f7ff ff5c 	bl	800b70c <prvInsertTimerInActiveList>
 800b854:	4603      	mov	r3, r0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d069      	beq.n	800b92e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b85c:	6a1b      	ldr	r3, [r3, #32]
 800b85e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b860:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b868:	f003 0304 	and.w	r3, r3, #4
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d05e      	beq.n	800b92e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b874:	699b      	ldr	r3, [r3, #24]
 800b876:	441a      	add	r2, r3
 800b878:	2300      	movs	r3, #0
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	2300      	movs	r3, #0
 800b87e:	2100      	movs	r1, #0
 800b880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b882:	f7ff fe05 	bl	800b490 <xTimerGenericCommand>
 800b886:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b888:	6a3b      	ldr	r3, [r7, #32]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d14f      	bne.n	800b92e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	61bb      	str	r3, [r7, #24]
}
 800b8a0:	bf00      	nop
 800b8a2:	e7fe      	b.n	800b8a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8aa:	f023 0301 	bic.w	r3, r3, #1
 800b8ae:	b2da      	uxtb	r2, r3
 800b8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b8b6:	e03a      	b.n	800b92e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8be:	f043 0301 	orr.w	r3, r3, #1
 800b8c2:	b2da      	uxtb	r2, r3
 800b8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b8ca:	68ba      	ldr	r2, [r7, #8]
 800b8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d2:	699b      	ldr	r3, [r3, #24]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d10a      	bne.n	800b8ee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8dc:	f383 8811 	msr	BASEPRI, r3
 800b8e0:	f3bf 8f6f 	isb	sy
 800b8e4:	f3bf 8f4f 	dsb	sy
 800b8e8:	617b      	str	r3, [r7, #20]
}
 800b8ea:	bf00      	nop
 800b8ec:	e7fe      	b.n	800b8ec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8f0:	699a      	ldr	r2, [r3, #24]
 800b8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f4:	18d1      	adds	r1, r2, r3
 800b8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8fc:	f7ff ff06 	bl	800b70c <prvInsertTimerInActiveList>
					break;
 800b900:	e015      	b.n	800b92e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b904:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b908:	f003 0302 	and.w	r3, r3, #2
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d103      	bne.n	800b918 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b912:	f000 fbdd 	bl	800c0d0 <vPortFree>
 800b916:	e00a      	b.n	800b92e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b91e:	f023 0301 	bic.w	r3, r3, #1
 800b922:	b2da      	uxtb	r2, r3
 800b924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b92a:	e000      	b.n	800b92e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b92c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b92e:	4b08      	ldr	r3, [pc, #32]	; (800b950 <prvProcessReceivedCommands+0x1c0>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	1d39      	adds	r1, r7, #4
 800b934:	2200      	movs	r2, #0
 800b936:	4618      	mov	r0, r3
 800b938:	f7fd f9cc 	bl	8008cd4 <xQueueReceive>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f47f af2a 	bne.w	800b798 <prvProcessReceivedCommands+0x8>
	}
}
 800b944:	bf00      	nop
 800b946:	bf00      	nop
 800b948:	3730      	adds	r7, #48	; 0x30
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	200010ec 	.word	0x200010ec

0800b954 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b088      	sub	sp, #32
 800b958:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b95a:	e048      	b.n	800b9ee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b95c:	4b2d      	ldr	r3, [pc, #180]	; (800ba14 <prvSwitchTimerLists+0xc0>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b966:	4b2b      	ldr	r3, [pc, #172]	; (800ba14 <prvSwitchTimerLists+0xc0>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	3304      	adds	r3, #4
 800b974:	4618      	mov	r0, r3
 800b976:	f7fc fe1f 	bl	80085b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6a1b      	ldr	r3, [r3, #32]
 800b97e:	68f8      	ldr	r0, [r7, #12]
 800b980:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b988:	f003 0304 	and.w	r3, r3, #4
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d02e      	beq.n	800b9ee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	693a      	ldr	r2, [r7, #16]
 800b996:	4413      	add	r3, r2
 800b998:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d90e      	bls.n	800b9c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	68fa      	ldr	r2, [r7, #12]
 800b9ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b9ae:	4b19      	ldr	r3, [pc, #100]	; (800ba14 <prvSwitchTimerLists+0xc0>)
 800b9b0:	681a      	ldr	r2, [r3, #0]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3304      	adds	r3, #4
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	4610      	mov	r0, r2
 800b9ba:	f7fc fdc4 	bl	8008546 <vListInsert>
 800b9be:	e016      	b.n	800b9ee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	9300      	str	r3, [sp, #0]
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	693a      	ldr	r2, [r7, #16]
 800b9c8:	2100      	movs	r1, #0
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f7ff fd60 	bl	800b490 <xTimerGenericCommand>
 800b9d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d10a      	bne.n	800b9ee <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9dc:	f383 8811 	msr	BASEPRI, r3
 800b9e0:	f3bf 8f6f 	isb	sy
 800b9e4:	f3bf 8f4f 	dsb	sy
 800b9e8:	603b      	str	r3, [r7, #0]
}
 800b9ea:	bf00      	nop
 800b9ec:	e7fe      	b.n	800b9ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9ee:	4b09      	ldr	r3, [pc, #36]	; (800ba14 <prvSwitchTimerLists+0xc0>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1b1      	bne.n	800b95c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b9f8:	4b06      	ldr	r3, [pc, #24]	; (800ba14 <prvSwitchTimerLists+0xc0>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b9fe:	4b06      	ldr	r3, [pc, #24]	; (800ba18 <prvSwitchTimerLists+0xc4>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a04      	ldr	r2, [pc, #16]	; (800ba14 <prvSwitchTimerLists+0xc0>)
 800ba04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ba06:	4a04      	ldr	r2, [pc, #16]	; (800ba18 <prvSwitchTimerLists+0xc4>)
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	6013      	str	r3, [r2, #0]
}
 800ba0c:	bf00      	nop
 800ba0e:	3718      	adds	r7, #24
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	200010e4 	.word	0x200010e4
 800ba18:	200010e8 	.word	0x200010e8

0800ba1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b082      	sub	sp, #8
 800ba20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ba22:	f000 f967 	bl	800bcf4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ba26:	4b15      	ldr	r3, [pc, #84]	; (800ba7c <prvCheckForValidListAndQueue+0x60>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d120      	bne.n	800ba70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ba2e:	4814      	ldr	r0, [pc, #80]	; (800ba80 <prvCheckForValidListAndQueue+0x64>)
 800ba30:	f7fc fd38 	bl	80084a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ba34:	4813      	ldr	r0, [pc, #76]	; (800ba84 <prvCheckForValidListAndQueue+0x68>)
 800ba36:	f7fc fd35 	bl	80084a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ba3a:	4b13      	ldr	r3, [pc, #76]	; (800ba88 <prvCheckForValidListAndQueue+0x6c>)
 800ba3c:	4a10      	ldr	r2, [pc, #64]	; (800ba80 <prvCheckForValidListAndQueue+0x64>)
 800ba3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ba40:	4b12      	ldr	r3, [pc, #72]	; (800ba8c <prvCheckForValidListAndQueue+0x70>)
 800ba42:	4a10      	ldr	r2, [pc, #64]	; (800ba84 <prvCheckForValidListAndQueue+0x68>)
 800ba44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ba46:	2300      	movs	r3, #0
 800ba48:	9300      	str	r3, [sp, #0]
 800ba4a:	4b11      	ldr	r3, [pc, #68]	; (800ba90 <prvCheckForValidListAndQueue+0x74>)
 800ba4c:	4a11      	ldr	r2, [pc, #68]	; (800ba94 <prvCheckForValidListAndQueue+0x78>)
 800ba4e:	2110      	movs	r1, #16
 800ba50:	200a      	movs	r0, #10
 800ba52:	f7fc fe43 	bl	80086dc <xQueueGenericCreateStatic>
 800ba56:	4603      	mov	r3, r0
 800ba58:	4a08      	ldr	r2, [pc, #32]	; (800ba7c <prvCheckForValidListAndQueue+0x60>)
 800ba5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ba5c:	4b07      	ldr	r3, [pc, #28]	; (800ba7c <prvCheckForValidListAndQueue+0x60>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d005      	beq.n	800ba70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ba64:	4b05      	ldr	r3, [pc, #20]	; (800ba7c <prvCheckForValidListAndQueue+0x60>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	490b      	ldr	r1, [pc, #44]	; (800ba98 <prvCheckForValidListAndQueue+0x7c>)
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fd fc46 	bl	80092fc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ba70:	f000 f970 	bl	800bd54 <vPortExitCritical>
}
 800ba74:	bf00      	nop
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	200010ec 	.word	0x200010ec
 800ba80:	200010bc 	.word	0x200010bc
 800ba84:	200010d0 	.word	0x200010d0
 800ba88:	200010e4 	.word	0x200010e4
 800ba8c:	200010e8 	.word	0x200010e8
 800ba90:	20001198 	.word	0x20001198
 800ba94:	200010f8 	.word	0x200010f8
 800ba98:	0800dacc 	.word	0x0800dacc

0800ba9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b085      	sub	sp, #20
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	3b04      	subs	r3, #4
 800baac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	3b04      	subs	r3, #4
 800baba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	f023 0201 	bic.w	r2, r3, #1
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	3b04      	subs	r3, #4
 800baca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bacc:	4a0c      	ldr	r2, [pc, #48]	; (800bb00 <pxPortInitialiseStack+0x64>)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	3b14      	subs	r3, #20
 800bad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	3b04      	subs	r3, #4
 800bae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	f06f 0202 	mvn.w	r2, #2
 800baea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	3b20      	subs	r3, #32
 800baf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800baf2:	68fb      	ldr	r3, [r7, #12]
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3714      	adds	r7, #20
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr
 800bb00:	0800bb05 	.word	0x0800bb05

0800bb04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bb0e:	4b12      	ldr	r3, [pc, #72]	; (800bb58 <prvTaskExitError+0x54>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb16:	d00a      	beq.n	800bb2e <prvTaskExitError+0x2a>
	__asm volatile
 800bb18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb1c:	f383 8811 	msr	BASEPRI, r3
 800bb20:	f3bf 8f6f 	isb	sy
 800bb24:	f3bf 8f4f 	dsb	sy
 800bb28:	60fb      	str	r3, [r7, #12]
}
 800bb2a:	bf00      	nop
 800bb2c:	e7fe      	b.n	800bb2c <prvTaskExitError+0x28>
	__asm volatile
 800bb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	60bb      	str	r3, [r7, #8]
}
 800bb40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bb42:	bf00      	nop
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d0fc      	beq.n	800bb44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bb4a:	bf00      	nop
 800bb4c:	bf00      	nop
 800bb4e:	3714      	adds	r7, #20
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr
 800bb58:	200000a4 	.word	0x200000a4
 800bb5c:	00000000 	.word	0x00000000

0800bb60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bb60:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <pxCurrentTCBConst2>)
 800bb62:	6819      	ldr	r1, [r3, #0]
 800bb64:	6808      	ldr	r0, [r1, #0]
 800bb66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6a:	f380 8809 	msr	PSP, r0
 800bb6e:	f3bf 8f6f 	isb	sy
 800bb72:	f04f 0000 	mov.w	r0, #0
 800bb76:	f380 8811 	msr	BASEPRI, r0
 800bb7a:	4770      	bx	lr
 800bb7c:	f3af 8000 	nop.w

0800bb80 <pxCurrentTCBConst2>:
 800bb80:	20000bbc 	.word	0x20000bbc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb84:	bf00      	nop
 800bb86:	bf00      	nop

0800bb88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb88:	4808      	ldr	r0, [pc, #32]	; (800bbac <prvPortStartFirstTask+0x24>)
 800bb8a:	6800      	ldr	r0, [r0, #0]
 800bb8c:	6800      	ldr	r0, [r0, #0]
 800bb8e:	f380 8808 	msr	MSP, r0
 800bb92:	f04f 0000 	mov.w	r0, #0
 800bb96:	f380 8814 	msr	CONTROL, r0
 800bb9a:	b662      	cpsie	i
 800bb9c:	b661      	cpsie	f
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	df00      	svc	0
 800bba8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bbaa:	bf00      	nop
 800bbac:	e000ed08 	.word	0xe000ed08

0800bbb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bbb6:	4b46      	ldr	r3, [pc, #280]	; (800bcd0 <xPortStartScheduler+0x120>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4a46      	ldr	r2, [pc, #280]	; (800bcd4 <xPortStartScheduler+0x124>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d10a      	bne.n	800bbd6 <xPortStartScheduler+0x26>
	__asm volatile
 800bbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	613b      	str	r3, [r7, #16]
}
 800bbd2:	bf00      	nop
 800bbd4:	e7fe      	b.n	800bbd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bbd6:	4b3e      	ldr	r3, [pc, #248]	; (800bcd0 <xPortStartScheduler+0x120>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	4a3f      	ldr	r2, [pc, #252]	; (800bcd8 <xPortStartScheduler+0x128>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d10a      	bne.n	800bbf6 <xPortStartScheduler+0x46>
	__asm volatile
 800bbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe4:	f383 8811 	msr	BASEPRI, r3
 800bbe8:	f3bf 8f6f 	isb	sy
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	60fb      	str	r3, [r7, #12]
}
 800bbf2:	bf00      	nop
 800bbf4:	e7fe      	b.n	800bbf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bbf6:	4b39      	ldr	r3, [pc, #228]	; (800bcdc <xPortStartScheduler+0x12c>)
 800bbf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	22ff      	movs	r2, #255	; 0xff
 800bc06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	b2db      	uxtb	r3, r3
 800bc0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bc10:	78fb      	ldrb	r3, [r7, #3]
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bc18:	b2da      	uxtb	r2, r3
 800bc1a:	4b31      	ldr	r3, [pc, #196]	; (800bce0 <xPortStartScheduler+0x130>)
 800bc1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bc1e:	4b31      	ldr	r3, [pc, #196]	; (800bce4 <xPortStartScheduler+0x134>)
 800bc20:	2207      	movs	r2, #7
 800bc22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc24:	e009      	b.n	800bc3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bc26:	4b2f      	ldr	r3, [pc, #188]	; (800bce4 <xPortStartScheduler+0x134>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	4a2d      	ldr	r2, [pc, #180]	; (800bce4 <xPortStartScheduler+0x134>)
 800bc2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bc30:	78fb      	ldrb	r3, [r7, #3]
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	005b      	lsls	r3, r3, #1
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bc3a:	78fb      	ldrb	r3, [r7, #3]
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc42:	2b80      	cmp	r3, #128	; 0x80
 800bc44:	d0ef      	beq.n	800bc26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bc46:	4b27      	ldr	r3, [pc, #156]	; (800bce4 <xPortStartScheduler+0x134>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f1c3 0307 	rsb	r3, r3, #7
 800bc4e:	2b04      	cmp	r3, #4
 800bc50:	d00a      	beq.n	800bc68 <xPortStartScheduler+0xb8>
	__asm volatile
 800bc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc56:	f383 8811 	msr	BASEPRI, r3
 800bc5a:	f3bf 8f6f 	isb	sy
 800bc5e:	f3bf 8f4f 	dsb	sy
 800bc62:	60bb      	str	r3, [r7, #8]
}
 800bc64:	bf00      	nop
 800bc66:	e7fe      	b.n	800bc66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bc68:	4b1e      	ldr	r3, [pc, #120]	; (800bce4 <xPortStartScheduler+0x134>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	021b      	lsls	r3, r3, #8
 800bc6e:	4a1d      	ldr	r2, [pc, #116]	; (800bce4 <xPortStartScheduler+0x134>)
 800bc70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bc72:	4b1c      	ldr	r3, [pc, #112]	; (800bce4 <xPortStartScheduler+0x134>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bc7a:	4a1a      	ldr	r2, [pc, #104]	; (800bce4 <xPortStartScheduler+0x134>)
 800bc7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	b2da      	uxtb	r2, r3
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc86:	4b18      	ldr	r3, [pc, #96]	; (800bce8 <xPortStartScheduler+0x138>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	4a17      	ldr	r2, [pc, #92]	; (800bce8 <xPortStartScheduler+0x138>)
 800bc8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc92:	4b15      	ldr	r3, [pc, #84]	; (800bce8 <xPortStartScheduler+0x138>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a14      	ldr	r2, [pc, #80]	; (800bce8 <xPortStartScheduler+0x138>)
 800bc98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bc9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc9e:	f000 f8dd 	bl	800be5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bca2:	4b12      	ldr	r3, [pc, #72]	; (800bcec <xPortStartScheduler+0x13c>)
 800bca4:	2200      	movs	r2, #0
 800bca6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bca8:	f000 f8fc 	bl	800bea4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bcac:	4b10      	ldr	r3, [pc, #64]	; (800bcf0 <xPortStartScheduler+0x140>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a0f      	ldr	r2, [pc, #60]	; (800bcf0 <xPortStartScheduler+0x140>)
 800bcb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bcb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bcb8:	f7ff ff66 	bl	800bb88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bcbc:	f7fe fb84 	bl	800a3c8 <vTaskSwitchContext>
	prvTaskExitError();
 800bcc0:	f7ff ff20 	bl	800bb04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bcc4:	2300      	movs	r3, #0
}
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	3718      	adds	r7, #24
 800bcca:	46bd      	mov	sp, r7
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	e000ed00 	.word	0xe000ed00
 800bcd4:	410fc271 	.word	0x410fc271
 800bcd8:	410fc270 	.word	0x410fc270
 800bcdc:	e000e400 	.word	0xe000e400
 800bce0:	200011e8 	.word	0x200011e8
 800bce4:	200011ec 	.word	0x200011ec
 800bce8:	e000ed20 	.word	0xe000ed20
 800bcec:	200000a4 	.word	0x200000a4
 800bcf0:	e000ef34 	.word	0xe000ef34

0800bcf4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
	__asm volatile
 800bcfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcfe:	f383 8811 	msr	BASEPRI, r3
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	f3bf 8f4f 	dsb	sy
 800bd0a:	607b      	str	r3, [r7, #4]
}
 800bd0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bd0e:	4b0f      	ldr	r3, [pc, #60]	; (800bd4c <vPortEnterCritical+0x58>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	3301      	adds	r3, #1
 800bd14:	4a0d      	ldr	r2, [pc, #52]	; (800bd4c <vPortEnterCritical+0x58>)
 800bd16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bd18:	4b0c      	ldr	r3, [pc, #48]	; (800bd4c <vPortEnterCritical+0x58>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d10f      	bne.n	800bd40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bd20:	4b0b      	ldr	r3, [pc, #44]	; (800bd50 <vPortEnterCritical+0x5c>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d00a      	beq.n	800bd40 <vPortEnterCritical+0x4c>
	__asm volatile
 800bd2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd2e:	f383 8811 	msr	BASEPRI, r3
 800bd32:	f3bf 8f6f 	isb	sy
 800bd36:	f3bf 8f4f 	dsb	sy
 800bd3a:	603b      	str	r3, [r7, #0]
}
 800bd3c:	bf00      	nop
 800bd3e:	e7fe      	b.n	800bd3e <vPortEnterCritical+0x4a>
	}
}
 800bd40:	bf00      	nop
 800bd42:	370c      	adds	r7, #12
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr
 800bd4c:	200000a4 	.word	0x200000a4
 800bd50:	e000ed04 	.word	0xe000ed04

0800bd54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bd5a:	4b12      	ldr	r3, [pc, #72]	; (800bda4 <vPortExitCritical+0x50>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d10a      	bne.n	800bd78 <vPortExitCritical+0x24>
	__asm volatile
 800bd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd66:	f383 8811 	msr	BASEPRI, r3
 800bd6a:	f3bf 8f6f 	isb	sy
 800bd6e:	f3bf 8f4f 	dsb	sy
 800bd72:	607b      	str	r3, [r7, #4]
}
 800bd74:	bf00      	nop
 800bd76:	e7fe      	b.n	800bd76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bd78:	4b0a      	ldr	r3, [pc, #40]	; (800bda4 <vPortExitCritical+0x50>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	4a09      	ldr	r2, [pc, #36]	; (800bda4 <vPortExitCritical+0x50>)
 800bd80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd82:	4b08      	ldr	r3, [pc, #32]	; (800bda4 <vPortExitCritical+0x50>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d105      	bne.n	800bd96 <vPortExitCritical+0x42>
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	f383 8811 	msr	BASEPRI, r3
}
 800bd94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd96:	bf00      	nop
 800bd98:	370c      	adds	r7, #12
 800bd9a:	46bd      	mov	sp, r7
 800bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda0:	4770      	bx	lr
 800bda2:	bf00      	nop
 800bda4:	200000a4 	.word	0x200000a4
	...

0800bdb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bdb0:	f3ef 8009 	mrs	r0, PSP
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	4b15      	ldr	r3, [pc, #84]	; (800be10 <pxCurrentTCBConst>)
 800bdba:	681a      	ldr	r2, [r3, #0]
 800bdbc:	f01e 0f10 	tst.w	lr, #16
 800bdc0:	bf08      	it	eq
 800bdc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bdc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdca:	6010      	str	r0, [r2, #0]
 800bdcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bdd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bdd4:	f380 8811 	msr	BASEPRI, r0
 800bdd8:	f3bf 8f4f 	dsb	sy
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	f7fe faf2 	bl	800a3c8 <vTaskSwitchContext>
 800bde4:	f04f 0000 	mov.w	r0, #0
 800bde8:	f380 8811 	msr	BASEPRI, r0
 800bdec:	bc09      	pop	{r0, r3}
 800bdee:	6819      	ldr	r1, [r3, #0]
 800bdf0:	6808      	ldr	r0, [r1, #0]
 800bdf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdf6:	f01e 0f10 	tst.w	lr, #16
 800bdfa:	bf08      	it	eq
 800bdfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800be00:	f380 8809 	msr	PSP, r0
 800be04:	f3bf 8f6f 	isb	sy
 800be08:	4770      	bx	lr
 800be0a:	bf00      	nop
 800be0c:	f3af 8000 	nop.w

0800be10 <pxCurrentTCBConst>:
 800be10:	20000bbc 	.word	0x20000bbc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800be14:	bf00      	nop
 800be16:	bf00      	nop

0800be18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
	__asm volatile
 800be1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	607b      	str	r3, [r7, #4]
}
 800be30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800be32:	f7fe fa0f 	bl	800a254 <xTaskIncrementTick>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d003      	beq.n	800be44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800be3c:	4b06      	ldr	r3, [pc, #24]	; (800be58 <xPortSysTickHandler+0x40>)
 800be3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be42:	601a      	str	r2, [r3, #0]
 800be44:	2300      	movs	r3, #0
 800be46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	f383 8811 	msr	BASEPRI, r3
}
 800be4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800be50:	bf00      	nop
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	e000ed04 	.word	0xe000ed04

0800be5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800be5c:	b480      	push	{r7}
 800be5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800be60:	4b0b      	ldr	r3, [pc, #44]	; (800be90 <vPortSetupTimerInterrupt+0x34>)
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800be66:	4b0b      	ldr	r3, [pc, #44]	; (800be94 <vPortSetupTimerInterrupt+0x38>)
 800be68:	2200      	movs	r2, #0
 800be6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800be6c:	4b0a      	ldr	r3, [pc, #40]	; (800be98 <vPortSetupTimerInterrupt+0x3c>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a0a      	ldr	r2, [pc, #40]	; (800be9c <vPortSetupTimerInterrupt+0x40>)
 800be72:	fba2 2303 	umull	r2, r3, r2, r3
 800be76:	099b      	lsrs	r3, r3, #6
 800be78:	4a09      	ldr	r2, [pc, #36]	; (800bea0 <vPortSetupTimerInterrupt+0x44>)
 800be7a:	3b01      	subs	r3, #1
 800be7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800be7e:	4b04      	ldr	r3, [pc, #16]	; (800be90 <vPortSetupTimerInterrupt+0x34>)
 800be80:	2207      	movs	r2, #7
 800be82:	601a      	str	r2, [r3, #0]
}
 800be84:	bf00      	nop
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	e000e010 	.word	0xe000e010
 800be94:	e000e018 	.word	0xe000e018
 800be98:	2000000c 	.word	0x2000000c
 800be9c:	10624dd3 	.word	0x10624dd3
 800bea0:	e000e014 	.word	0xe000e014

0800bea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bea4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800beb4 <vPortEnableVFP+0x10>
 800bea8:	6801      	ldr	r1, [r0, #0]
 800beaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800beae:	6001      	str	r1, [r0, #0]
 800beb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800beb2:	bf00      	nop
 800beb4:	e000ed88 	.word	0xe000ed88

0800beb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bebe:	f3ef 8305 	mrs	r3, IPSR
 800bec2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2b0f      	cmp	r3, #15
 800bec8:	d914      	bls.n	800bef4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800beca:	4a17      	ldr	r2, [pc, #92]	; (800bf28 <vPortValidateInterruptPriority+0x70>)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	4413      	add	r3, r2
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bed4:	4b15      	ldr	r3, [pc, #84]	; (800bf2c <vPortValidateInterruptPriority+0x74>)
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	7afa      	ldrb	r2, [r7, #11]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d20a      	bcs.n	800bef4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bede:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee2:	f383 8811 	msr	BASEPRI, r3
 800bee6:	f3bf 8f6f 	isb	sy
 800beea:	f3bf 8f4f 	dsb	sy
 800beee:	607b      	str	r3, [r7, #4]
}
 800bef0:	bf00      	nop
 800bef2:	e7fe      	b.n	800bef2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bef4:	4b0e      	ldr	r3, [pc, #56]	; (800bf30 <vPortValidateInterruptPriority+0x78>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800befc:	4b0d      	ldr	r3, [pc, #52]	; (800bf34 <vPortValidateInterruptPriority+0x7c>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d90a      	bls.n	800bf1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bf04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf08:	f383 8811 	msr	BASEPRI, r3
 800bf0c:	f3bf 8f6f 	isb	sy
 800bf10:	f3bf 8f4f 	dsb	sy
 800bf14:	603b      	str	r3, [r7, #0]
}
 800bf16:	bf00      	nop
 800bf18:	e7fe      	b.n	800bf18 <vPortValidateInterruptPriority+0x60>
	}
 800bf1a:	bf00      	nop
 800bf1c:	3714      	adds	r7, #20
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf24:	4770      	bx	lr
 800bf26:	bf00      	nop
 800bf28:	e000e3f0 	.word	0xe000e3f0
 800bf2c:	200011e8 	.word	0x200011e8
 800bf30:	e000ed0c 	.word	0xe000ed0c
 800bf34:	200011ec 	.word	0x200011ec

0800bf38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b08a      	sub	sp, #40	; 0x28
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf40:	2300      	movs	r3, #0
 800bf42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bf44:	f7fe f83c 	bl	8009fc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf48:	4b5b      	ldr	r3, [pc, #364]	; (800c0b8 <pvPortMalloc+0x180>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d101      	bne.n	800bf54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf50:	f000 f920 	bl	800c194 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf54:	4b59      	ldr	r3, [pc, #356]	; (800c0bc <pvPortMalloc+0x184>)
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4013      	ands	r3, r2
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	f040 8093 	bne.w	800c088 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d01d      	beq.n	800bfa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bf68:	2208      	movs	r2, #8
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f003 0307 	and.w	r3, r3, #7
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d014      	beq.n	800bfa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f023 0307 	bic.w	r3, r3, #7
 800bf80:	3308      	adds	r3, #8
 800bf82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f003 0307 	and.w	r3, r3, #7
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d00a      	beq.n	800bfa4 <pvPortMalloc+0x6c>
	__asm volatile
 800bf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	617b      	str	r3, [r7, #20]
}
 800bfa0:	bf00      	nop
 800bfa2:	e7fe      	b.n	800bfa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d06e      	beq.n	800c088 <pvPortMalloc+0x150>
 800bfaa:	4b45      	ldr	r3, [pc, #276]	; (800c0c0 <pvPortMalloc+0x188>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d869      	bhi.n	800c088 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bfb4:	4b43      	ldr	r3, [pc, #268]	; (800c0c4 <pvPortMalloc+0x18c>)
 800bfb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bfb8:	4b42      	ldr	r3, [pc, #264]	; (800c0c4 <pvPortMalloc+0x18c>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfbe:	e004      	b.n	800bfca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d903      	bls.n	800bfdc <pvPortMalloc+0xa4>
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1f1      	bne.n	800bfc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bfdc:	4b36      	ldr	r3, [pc, #216]	; (800c0b8 <pvPortMalloc+0x180>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe2:	429a      	cmp	r2, r3
 800bfe4:	d050      	beq.n	800c088 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bfe6:	6a3b      	ldr	r3, [r7, #32]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2208      	movs	r2, #8
 800bfec:	4413      	add	r3, r2
 800bfee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff2:	681a      	ldr	r2, [r3, #0]
 800bff4:	6a3b      	ldr	r3, [r7, #32]
 800bff6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	685a      	ldr	r2, [r3, #4]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	1ad2      	subs	r2, r2, r3
 800c000:	2308      	movs	r3, #8
 800c002:	005b      	lsls	r3, r3, #1
 800c004:	429a      	cmp	r2, r3
 800c006:	d91f      	bls.n	800c048 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4413      	add	r3, r2
 800c00e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c010:	69bb      	ldr	r3, [r7, #24]
 800c012:	f003 0307 	and.w	r3, r3, #7
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00a      	beq.n	800c030 <pvPortMalloc+0xf8>
	__asm volatile
 800c01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01e:	f383 8811 	msr	BASEPRI, r3
 800c022:	f3bf 8f6f 	isb	sy
 800c026:	f3bf 8f4f 	dsb	sy
 800c02a:	613b      	str	r3, [r7, #16]
}
 800c02c:	bf00      	nop
 800c02e:	e7fe      	b.n	800c02e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c032:	685a      	ldr	r2, [r3, #4]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	1ad2      	subs	r2, r2, r3
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c042:	69b8      	ldr	r0, [r7, #24]
 800c044:	f000 f908 	bl	800c258 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c048:	4b1d      	ldr	r3, [pc, #116]	; (800c0c0 <pvPortMalloc+0x188>)
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	4a1b      	ldr	r2, [pc, #108]	; (800c0c0 <pvPortMalloc+0x188>)
 800c054:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c056:	4b1a      	ldr	r3, [pc, #104]	; (800c0c0 <pvPortMalloc+0x188>)
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	4b1b      	ldr	r3, [pc, #108]	; (800c0c8 <pvPortMalloc+0x190>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d203      	bcs.n	800c06a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c062:	4b17      	ldr	r3, [pc, #92]	; (800c0c0 <pvPortMalloc+0x188>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a18      	ldr	r2, [pc, #96]	; (800c0c8 <pvPortMalloc+0x190>)
 800c068:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06c:	685a      	ldr	r2, [r3, #4]
 800c06e:	4b13      	ldr	r3, [pc, #76]	; (800c0bc <pvPortMalloc+0x184>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	431a      	orrs	r2, r3
 800c074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c076:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07a:	2200      	movs	r2, #0
 800c07c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c07e:	4b13      	ldr	r3, [pc, #76]	; (800c0cc <pvPortMalloc+0x194>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	3301      	adds	r3, #1
 800c084:	4a11      	ldr	r2, [pc, #68]	; (800c0cc <pvPortMalloc+0x194>)
 800c086:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c088:	f7fd ffa8 	bl	8009fdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c08c:	69fb      	ldr	r3, [r7, #28]
 800c08e:	f003 0307 	and.w	r3, r3, #7
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00a      	beq.n	800c0ac <pvPortMalloc+0x174>
	__asm volatile
 800c096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09a:	f383 8811 	msr	BASEPRI, r3
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	60fb      	str	r3, [r7, #12]
}
 800c0a8:	bf00      	nop
 800c0aa:	e7fe      	b.n	800c0aa <pvPortMalloc+0x172>
	return pvReturn;
 800c0ac:	69fb      	ldr	r3, [r7, #28]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3728      	adds	r7, #40	; 0x28
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	200091f8 	.word	0x200091f8
 800c0bc:	2000920c 	.word	0x2000920c
 800c0c0:	200091fc 	.word	0x200091fc
 800c0c4:	200091f0 	.word	0x200091f0
 800c0c8:	20009200 	.word	0x20009200
 800c0cc:	20009204 	.word	0x20009204

0800c0d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d04d      	beq.n	800c17e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c0e2:	2308      	movs	r3, #8
 800c0e4:	425b      	negs	r3, r3
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	685a      	ldr	r2, [r3, #4]
 800c0f4:	4b24      	ldr	r3, [pc, #144]	; (800c188 <vPortFree+0xb8>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4013      	ands	r3, r2
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d10a      	bne.n	800c114 <vPortFree+0x44>
	__asm volatile
 800c0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c102:	f383 8811 	msr	BASEPRI, r3
 800c106:	f3bf 8f6f 	isb	sy
 800c10a:	f3bf 8f4f 	dsb	sy
 800c10e:	60fb      	str	r3, [r7, #12]
}
 800c110:	bf00      	nop
 800c112:	e7fe      	b.n	800c112 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d00a      	beq.n	800c132 <vPortFree+0x62>
	__asm volatile
 800c11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c120:	f383 8811 	msr	BASEPRI, r3
 800c124:	f3bf 8f6f 	isb	sy
 800c128:	f3bf 8f4f 	dsb	sy
 800c12c:	60bb      	str	r3, [r7, #8]
}
 800c12e:	bf00      	nop
 800c130:	e7fe      	b.n	800c130 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	685a      	ldr	r2, [r3, #4]
 800c136:	4b14      	ldr	r3, [pc, #80]	; (800c188 <vPortFree+0xb8>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4013      	ands	r3, r2
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d01e      	beq.n	800c17e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d11a      	bne.n	800c17e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c148:	693b      	ldr	r3, [r7, #16]
 800c14a:	685a      	ldr	r2, [r3, #4]
 800c14c:	4b0e      	ldr	r3, [pc, #56]	; (800c188 <vPortFree+0xb8>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	43db      	mvns	r3, r3
 800c152:	401a      	ands	r2, r3
 800c154:	693b      	ldr	r3, [r7, #16]
 800c156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c158:	f7fd ff32 	bl	8009fc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	685a      	ldr	r2, [r3, #4]
 800c160:	4b0a      	ldr	r3, [pc, #40]	; (800c18c <vPortFree+0xbc>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4413      	add	r3, r2
 800c166:	4a09      	ldr	r2, [pc, #36]	; (800c18c <vPortFree+0xbc>)
 800c168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c16a:	6938      	ldr	r0, [r7, #16]
 800c16c:	f000 f874 	bl	800c258 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c170:	4b07      	ldr	r3, [pc, #28]	; (800c190 <vPortFree+0xc0>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	3301      	adds	r3, #1
 800c176:	4a06      	ldr	r2, [pc, #24]	; (800c190 <vPortFree+0xc0>)
 800c178:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c17a:	f7fd ff2f 	bl	8009fdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c17e:	bf00      	nop
 800c180:	3718      	adds	r7, #24
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	2000920c 	.word	0x2000920c
 800c18c:	200091fc 	.word	0x200091fc
 800c190:	20009208 	.word	0x20009208

0800c194 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c19a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c19e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c1a0:	4b27      	ldr	r3, [pc, #156]	; (800c240 <prvHeapInit+0xac>)
 800c1a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f003 0307 	and.w	r3, r3, #7
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d00c      	beq.n	800c1c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	3307      	adds	r3, #7
 800c1b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f023 0307 	bic.w	r3, r3, #7
 800c1ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	1ad3      	subs	r3, r2, r3
 800c1c2:	4a1f      	ldr	r2, [pc, #124]	; (800c240 <prvHeapInit+0xac>)
 800c1c4:	4413      	add	r3, r2
 800c1c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c1cc:	4a1d      	ldr	r2, [pc, #116]	; (800c244 <prvHeapInit+0xb0>)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c1d2:	4b1c      	ldr	r3, [pc, #112]	; (800c244 <prvHeapInit+0xb0>)
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	68ba      	ldr	r2, [r7, #8]
 800c1dc:	4413      	add	r3, r2
 800c1de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c1e0:	2208      	movs	r2, #8
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	1a9b      	subs	r3, r3, r2
 800c1e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f023 0307 	bic.w	r3, r3, #7
 800c1ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	4a15      	ldr	r2, [pc, #84]	; (800c248 <prvHeapInit+0xb4>)
 800c1f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c1f6:	4b14      	ldr	r3, [pc, #80]	; (800c248 <prvHeapInit+0xb4>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c1fe:	4b12      	ldr	r3, [pc, #72]	; (800c248 <prvHeapInit+0xb4>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	2200      	movs	r2, #0
 800c204:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	1ad2      	subs	r2, r2, r3
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c214:	4b0c      	ldr	r3, [pc, #48]	; (800c248 <prvHeapInit+0xb4>)
 800c216:	681a      	ldr	r2, [r3, #0]
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	4a0a      	ldr	r2, [pc, #40]	; (800c24c <prvHeapInit+0xb8>)
 800c222:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	685b      	ldr	r3, [r3, #4]
 800c228:	4a09      	ldr	r2, [pc, #36]	; (800c250 <prvHeapInit+0xbc>)
 800c22a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c22c:	4b09      	ldr	r3, [pc, #36]	; (800c254 <prvHeapInit+0xc0>)
 800c22e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c232:	601a      	str	r2, [r3, #0]
}
 800c234:	bf00      	nop
 800c236:	3714      	adds	r7, #20
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr
 800c240:	200011f0 	.word	0x200011f0
 800c244:	200091f0 	.word	0x200091f0
 800c248:	200091f8 	.word	0x200091f8
 800c24c:	20009200 	.word	0x20009200
 800c250:	200091fc 	.word	0x200091fc
 800c254:	2000920c 	.word	0x2000920c

0800c258 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c258:	b480      	push	{r7}
 800c25a:	b085      	sub	sp, #20
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c260:	4b28      	ldr	r3, [pc, #160]	; (800c304 <prvInsertBlockIntoFreeList+0xac>)
 800c262:	60fb      	str	r3, [r7, #12]
 800c264:	e002      	b.n	800c26c <prvInsertBlockIntoFreeList+0x14>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	60fb      	str	r3, [r7, #12]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	687a      	ldr	r2, [r7, #4]
 800c272:	429a      	cmp	r2, r3
 800c274:	d8f7      	bhi.n	800c266 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	4413      	add	r3, r2
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	429a      	cmp	r2, r3
 800c286:	d108      	bne.n	800c29a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	685a      	ldr	r2, [r3, #4]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	441a      	add	r2, r3
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	685b      	ldr	r3, [r3, #4]
 800c2a2:	68ba      	ldr	r2, [r7, #8]
 800c2a4:	441a      	add	r2, r3
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d118      	bne.n	800c2e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681a      	ldr	r2, [r3, #0]
 800c2b2:	4b15      	ldr	r3, [pc, #84]	; (800c308 <prvInsertBlockIntoFreeList+0xb0>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d00d      	beq.n	800c2d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	685a      	ldr	r2, [r3, #4]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	441a      	add	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	681a      	ldr	r2, [r3, #0]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	601a      	str	r2, [r3, #0]
 800c2d4:	e008      	b.n	800c2e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c2d6:	4b0c      	ldr	r3, [pc, #48]	; (800c308 <prvInsertBlockIntoFreeList+0xb0>)
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	601a      	str	r2, [r3, #0]
 800c2de:	e003      	b.n	800c2e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	681a      	ldr	r2, [r3, #0]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d002      	beq.n	800c2f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2f6:	bf00      	nop
 800c2f8:	3714      	adds	r7, #20
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	200091f0 	.word	0x200091f0
 800c308:	200091f8 	.word	0x200091f8

0800c30c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c310:	2200      	movs	r2, #0
 800c312:	4912      	ldr	r1, [pc, #72]	; (800c35c <MX_USB_DEVICE_Init+0x50>)
 800c314:	4812      	ldr	r0, [pc, #72]	; (800c360 <MX_USB_DEVICE_Init+0x54>)
 800c316:	f7fa fc8f 	bl	8006c38 <USBD_Init>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d001      	beq.n	800c324 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c320:	f7f4 fd1e 	bl	8000d60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c324:	490f      	ldr	r1, [pc, #60]	; (800c364 <MX_USB_DEVICE_Init+0x58>)
 800c326:	480e      	ldr	r0, [pc, #56]	; (800c360 <MX_USB_DEVICE_Init+0x54>)
 800c328:	f7fa fcb6 	bl	8006c98 <USBD_RegisterClass>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c332:	f7f4 fd15 	bl	8000d60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c336:	490c      	ldr	r1, [pc, #48]	; (800c368 <MX_USB_DEVICE_Init+0x5c>)
 800c338:	4809      	ldr	r0, [pc, #36]	; (800c360 <MX_USB_DEVICE_Init+0x54>)
 800c33a:	f7fa fba7 	bl	8006a8c <USBD_CDC_RegisterInterface>
 800c33e:	4603      	mov	r3, r0
 800c340:	2b00      	cmp	r3, #0
 800c342:	d001      	beq.n	800c348 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c344:	f7f4 fd0c 	bl	8000d60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c348:	4805      	ldr	r0, [pc, #20]	; (800c360 <MX_USB_DEVICE_Init+0x54>)
 800c34a:	f7fa fcdb 	bl	8006d04 <USBD_Start>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d001      	beq.n	800c358 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c354:	f7f4 fd04 	bl	8000d60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c358:	bf00      	nop
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	200000bc 	.word	0x200000bc
 800c360:	20009210 	.word	0x20009210
 800c364:	20000024 	.word	0x20000024
 800c368:	200000a8 	.word	0x200000a8

0800c36c <init_usb_rtos_obj>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

void init_usb_rtos_obj(void){
 800c36c:	b580      	push	{r7, lr}
 800c36e:	af00      	add	r7, sp, #0
	sem_usb_tx = xSemaphoreCreateBinary();
 800c370:	2203      	movs	r2, #3
 800c372:	2100      	movs	r1, #0
 800c374:	2001      	movs	r0, #1
 800c376:	f7fc fa29 	bl	80087cc <xQueueGenericCreate>
 800c37a:	4603      	mov	r3, r0
 800c37c:	4a07      	ldr	r2, [pc, #28]	; (800c39c <init_usb_rtos_obj+0x30>)
 800c37e:	6013      	str	r3, [r2, #0]
	msg_buf_rx = xMessageBufferCreate(768);
 800c380:	2201      	movs	r2, #1
 800c382:	2100      	movs	r1, #0
 800c384:	f44f 7040 	mov.w	r0, #768	; 0x300
 800c388:	f7fd f816 	bl	80093b8 <xStreamBufferGenericCreate>
 800c38c:	4603      	mov	r3, r0
 800c38e:	4a04      	ldr	r2, [pc, #16]	; (800c3a0 <init_usb_rtos_obj+0x34>)
 800c390:	6013      	str	r3, [r2, #0]
	usb_on = 1;
 800c392:	4b04      	ldr	r3, [pc, #16]	; (800c3a4 <init_usb_rtos_obj+0x38>)
 800c394:	2201      	movs	r2, #1
 800c396:	601a      	str	r2, [r3, #0]
}
 800c398:	bf00      	nop
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	2000a4f0 	.word	0x2000a4f0
 800c3a0:	200094ec 	.word	0x200094ec
 800c3a4:	2000a4f4 	.word	0x2000a4f4

0800c3a8 <read_usb_cdc>:
/*
BaseType_t CDC_Receiveq_MS(char *data, TickType_t timeout){
	return xQueueReceive(queue_usb, data, timeout);
}*/

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout){
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
	return xMessageBufferReceive(msg_buf_rx, buffer, buf_len, timeout);
 800c3b4:	4b06      	ldr	r3, [pc, #24]	; (800c3d0 <read_usb_cdc+0x28>)
 800c3b6:	6818      	ldr	r0, [r3, #0]
 800c3b8:	68ba      	ldr	r2, [r7, #8]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	68f9      	ldr	r1, [r7, #12]
 800c3be:	f7fd f937 	bl	8009630 <xStreamBufferReceive>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	b2db      	uxtb	r3, r3
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}
 800c3ce:	bf00      	nop
 800c3d0:	200094ec 	.word	0x200094ec

0800c3d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c3d8:	2200      	movs	r2, #0
 800c3da:	4905      	ldr	r1, [pc, #20]	; (800c3f0 <CDC_Init_FS+0x1c>)
 800c3dc:	4805      	ldr	r0, [pc, #20]	; (800c3f4 <CDC_Init_FS+0x20>)
 800c3de:	f7fa fb6f 	bl	8006ac0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c3e2:	4905      	ldr	r1, [pc, #20]	; (800c3f8 <CDC_Init_FS+0x24>)
 800c3e4:	4803      	ldr	r0, [pc, #12]	; (800c3f4 <CDC_Init_FS+0x20>)
 800c3e6:	f7fa fb8d 	bl	8006b04 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c3ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	bd80      	pop	{r7, pc}
 800c3f0:	20009cf0 	.word	0x20009cf0
 800c3f4:	20009210 	.word	0x20009210
 800c3f8:	200094f0 	.word	0x200094f0

0800c3fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c400:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c402:	4618      	mov	r0, r3
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
 800c412:	4603      	mov	r3, r0
 800c414:	6039      	str	r1, [r7, #0]
 800c416:	71fb      	strb	r3, [r7, #7]
 800c418:	4613      	mov	r3, r2
 800c41a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  portBASE_TYPE yield = pdFALSE;
 800c41c:	2300      	movs	r3, #0
 800c41e:	60fb      	str	r3, [r7, #12]
  char data = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	72fb      	strb	r3, [r7, #11]
  switch(cmd)
 800c424:	79fb      	ldrb	r3, [r7, #7]
 800c426:	2b23      	cmp	r3, #35	; 0x23
 800c428:	d85f      	bhi.n	800c4ea <CDC_Control_FS+0xde>
 800c42a:	a201      	add	r2, pc, #4	; (adr r2, 800c430 <CDC_Control_FS+0x24>)
 800c42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c430:	0800c4eb 	.word	0x0800c4eb
 800c434:	0800c4eb 	.word	0x0800c4eb
 800c438:	0800c4eb 	.word	0x0800c4eb
 800c43c:	0800c4eb 	.word	0x0800c4eb
 800c440:	0800c4eb 	.word	0x0800c4eb
 800c444:	0800c4eb 	.word	0x0800c4eb
 800c448:	0800c4eb 	.word	0x0800c4eb
 800c44c:	0800c4eb 	.word	0x0800c4eb
 800c450:	0800c4eb 	.word	0x0800c4eb
 800c454:	0800c4eb 	.word	0x0800c4eb
 800c458:	0800c4eb 	.word	0x0800c4eb
 800c45c:	0800c4eb 	.word	0x0800c4eb
 800c460:	0800c4eb 	.word	0x0800c4eb
 800c464:	0800c4eb 	.word	0x0800c4eb
 800c468:	0800c4eb 	.word	0x0800c4eb
 800c46c:	0800c4eb 	.word	0x0800c4eb
 800c470:	0800c4eb 	.word	0x0800c4eb
 800c474:	0800c4eb 	.word	0x0800c4eb
 800c478:	0800c4eb 	.word	0x0800c4eb
 800c47c:	0800c4eb 	.word	0x0800c4eb
 800c480:	0800c4eb 	.word	0x0800c4eb
 800c484:	0800c4eb 	.word	0x0800c4eb
 800c488:	0800c4eb 	.word	0x0800c4eb
 800c48c:	0800c4eb 	.word	0x0800c4eb
 800c490:	0800c4eb 	.word	0x0800c4eb
 800c494:	0800c4eb 	.word	0x0800c4eb
 800c498:	0800c4eb 	.word	0x0800c4eb
 800c49c:	0800c4eb 	.word	0x0800c4eb
 800c4a0:	0800c4eb 	.word	0x0800c4eb
 800c4a4:	0800c4eb 	.word	0x0800c4eb
 800c4a8:	0800c4eb 	.word	0x0800c4eb
 800c4ac:	0800c4eb 	.word	0x0800c4eb
 800c4b0:	0800c4eb 	.word	0x0800c4eb
 800c4b4:	0800c4eb 	.word	0x0800c4eb
 800c4b8:	0800c4c1 	.word	0x0800c4c1
 800c4bc:	0800c4eb 	.word	0x0800c4eb
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
  	  xMessageBufferSendFromISR(msg_buf_rx, &data, 1, &yield);
 800c4c0:	4b0e      	ldr	r3, [pc, #56]	; (800c4fc <CDC_Control_FS+0xf0>)
 800c4c2:	6818      	ldr	r0, [r3, #0]
 800c4c4:	f107 030c 	add.w	r3, r7, #12
 800c4c8:	f107 010b 	add.w	r1, r7, #11
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	f7fd f801 	bl	80094d4 <xStreamBufferSendFromISR>
  	  portYIELD_FROM_ISR(yield);
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00a      	beq.n	800c4ee <CDC_Control_FS+0xe2>
 800c4d8:	4b09      	ldr	r3, [pc, #36]	; (800c500 <CDC_Control_FS+0xf4>)
 800c4da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4de:	601a      	str	r2, [r3, #0]
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	f3bf 8f6f 	isb	sy

    break;
 800c4e8:	e001      	b.n	800c4ee <CDC_Control_FS+0xe2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c4ea:	bf00      	nop
 800c4ec:	e000      	b.n	800c4f0 <CDC_Control_FS+0xe4>
    break;
 800c4ee:	bf00      	nop
  }

  return (USBD_OK);
 800c4f0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	200094ec 	.word	0x200094ec
 800c500:	e000ed04 	.word	0xe000ed04

0800c504 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	portBASE_TYPE yield = pdFALSE;
 800c50e:	2300      	movs	r3, #0
 800c510:	60fb      	str	r3, [r7, #12]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c512:	6879      	ldr	r1, [r7, #4]
 800c514:	480f      	ldr	r0, [pc, #60]	; (800c554 <CDC_Receive_FS+0x50>)
 800c516:	f7fa faf5 	bl	8006b04 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c51a:	480e      	ldr	r0, [pc, #56]	; (800c554 <CDC_Receive_FS+0x50>)
 800c51c:	f7fa fb56 	bl	8006bcc <USBD_CDC_ReceivePacket>

	  xMessageBufferSendFromISR(msg_buf_rx, Buf, *Len, &yield);
 800c520:	4b0d      	ldr	r3, [pc, #52]	; (800c558 <CDC_Receive_FS+0x54>)
 800c522:	6818      	ldr	r0, [r3, #0]
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	f107 030c 	add.w	r3, r7, #12
 800c52c:	6879      	ldr	r1, [r7, #4]
 800c52e:	f7fc ffd1 	bl	80094d4 <xStreamBufferSendFromISR>
	  portYIELD_FROM_ISR(yield);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d007      	beq.n	800c548 <CDC_Receive_FS+0x44>
 800c538:	4b08      	ldr	r3, [pc, #32]	; (800c55c <CDC_Receive_FS+0x58>)
 800c53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c53e:	601a      	str	r2, [r3, #0]
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	f3bf 8f6f 	isb	sy

	return (USBD_OK);
 800c548:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	3710      	adds	r7, #16
 800c54e:	46bd      	mov	sp, r7
 800c550:	bd80      	pop	{r7, pc}
 800c552:	bf00      	nop
 800c554:	20009210 	.word	0x20009210
 800c558:	200094ec 	.word	0x200094ec
 800c55c:	e000ed04 	.word	0xe000ed04

0800c560 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	460b      	mov	r3, r1
 800c56a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c56c:	2300      	movs	r3, #0
 800c56e:	73fb      	strb	r3, [r7, #15]
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
	  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
	  xSemaphoreGive(mutex_usb);
  }*/
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c570:	4b10      	ldr	r3, [pc, #64]	; (800c5b4 <CDC_Transmit_FS+0x54>)
 800c572:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c576:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d001      	beq.n	800c586 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c582:	2301      	movs	r3, #1
 800c584:	e012      	b.n	800c5ac <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c586:	887b      	ldrh	r3, [r7, #2]
 800c588:	461a      	mov	r2, r3
 800c58a:	6879      	ldr	r1, [r7, #4]
 800c58c:	4809      	ldr	r0, [pc, #36]	; (800c5b4 <CDC_Transmit_FS+0x54>)
 800c58e:	f7fa fa97 	bl	8006ac0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c592:	4808      	ldr	r0, [pc, #32]	; (800c5b4 <CDC_Transmit_FS+0x54>)
 800c594:	f7fa fad4 	bl	8006b40 <USBD_CDC_TransmitPacket>
 800c598:	4603      	mov	r3, r0
 800c59a:	73fb      	strb	r3, [r7, #15]
  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 800c59c:	4b06      	ldr	r3, [pc, #24]	; (800c5b8 <CDC_Transmit_FS+0x58>)
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f7fc fc75 	bl	8008e94 <xQueueSemaphoreTake>
  /* USER CODE END 7 */
  return result;
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3710      	adds	r7, #16
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	20009210 	.word	0x20009210
 800c5b8:	2000a4f0 	.word	0x2000a4f0

0800c5bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b086      	sub	sp, #24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 800c5d2:	4b0b      	ldr	r3, [pc, #44]	; (800c600 <CDC_TransmitCplt_FS+0x44>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f107 0210 	add.w	r2, r7, #16
 800c5da:	4611      	mov	r1, r2
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fc faec 	bl	8008bba <xQueueGiveFromISR>
  portYIELD_FROM_ISR(&tmp);
 800c5e2:	4b08      	ldr	r3, [pc, #32]	; (800c604 <CDC_TransmitCplt_FS+0x48>)
 800c5e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5e8:	601a      	str	r2, [r3, #0]
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 800c5f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3718      	adds	r7, #24
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	2000a4f0 	.word	0x2000a4f0
 800c604:	e000ed04 	.word	0xe000ed04

0800c608 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	4603      	mov	r3, r0
 800c610:	6039      	str	r1, [r7, #0]
 800c612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	2212      	movs	r2, #18
 800c618:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c61a:	4b03      	ldr	r3, [pc, #12]	; (800c628 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr
 800c628:	200000d8 	.word	0x200000d8

0800c62c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
 800c632:	4603      	mov	r3, r0
 800c634:	6039      	str	r1, [r7, #0]
 800c636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	2204      	movs	r2, #4
 800c63c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c63e:	4b03      	ldr	r3, [pc, #12]	; (800c64c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c640:	4618      	mov	r0, r3
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64a:	4770      	bx	lr
 800c64c:	200000ec 	.word	0x200000ec

0800c650 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	4603      	mov	r3, r0
 800c658:	6039      	str	r1, [r7, #0]
 800c65a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c65c:	79fb      	ldrb	r3, [r7, #7]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d105      	bne.n	800c66e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c662:	683a      	ldr	r2, [r7, #0]
 800c664:	4907      	ldr	r1, [pc, #28]	; (800c684 <USBD_FS_ProductStrDescriptor+0x34>)
 800c666:	4808      	ldr	r0, [pc, #32]	; (800c688 <USBD_FS_ProductStrDescriptor+0x38>)
 800c668:	f7fb fcf8 	bl	800805c <USBD_GetString>
 800c66c:	e004      	b.n	800c678 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c66e:	683a      	ldr	r2, [r7, #0]
 800c670:	4904      	ldr	r1, [pc, #16]	; (800c684 <USBD_FS_ProductStrDescriptor+0x34>)
 800c672:	4805      	ldr	r0, [pc, #20]	; (800c688 <USBD_FS_ProductStrDescriptor+0x38>)
 800c674:	f7fb fcf2 	bl	800805c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c678:	4b02      	ldr	r3, [pc, #8]	; (800c684 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3708      	adds	r7, #8
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	2000a4f8 	.word	0x2000a4f8
 800c688:	0800dad4 	.word	0x0800dad4

0800c68c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	4603      	mov	r3, r0
 800c694:	6039      	str	r1, [r7, #0]
 800c696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c698:	683a      	ldr	r2, [r7, #0]
 800c69a:	4904      	ldr	r1, [pc, #16]	; (800c6ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c69c:	4804      	ldr	r0, [pc, #16]	; (800c6b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c69e:	f7fb fcdd 	bl	800805c <USBD_GetString>
  return USBD_StrDesc;
 800c6a2:	4b02      	ldr	r3, [pc, #8]	; (800c6ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3708      	adds	r7, #8
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}
 800c6ac:	2000a4f8 	.word	0x2000a4f8
 800c6b0:	0800daec 	.word	0x0800daec

0800c6b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	6039      	str	r1, [r7, #0]
 800c6be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	221a      	movs	r2, #26
 800c6c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c6c6:	f000 f843 	bl	800c750 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c6ca:	4b02      	ldr	r3, [pc, #8]	; (800c6d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3708      	adds	r7, #8
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	200000f0 	.word	0x200000f0

0800c6d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	4603      	mov	r3, r0
 800c6e0:	6039      	str	r1, [r7, #0]
 800c6e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c6e4:	79fb      	ldrb	r3, [r7, #7]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d105      	bne.n	800c6f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	4907      	ldr	r1, [pc, #28]	; (800c70c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6ee:	4808      	ldr	r0, [pc, #32]	; (800c710 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6f0:	f7fb fcb4 	bl	800805c <USBD_GetString>
 800c6f4:	e004      	b.n	800c700 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	4904      	ldr	r1, [pc, #16]	; (800c70c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c6fa:	4805      	ldr	r0, [pc, #20]	; (800c710 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c6fc:	f7fb fcae 	bl	800805c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c700:	4b02      	ldr	r3, [pc, #8]	; (800c70c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c702:	4618      	mov	r0, r3
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
 800c70a:	bf00      	nop
 800c70c:	2000a4f8 	.word	0x2000a4f8
 800c710:	0800db00 	.word	0x0800db00

0800c714 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	4603      	mov	r3, r0
 800c71c:	6039      	str	r1, [r7, #0]
 800c71e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c720:	79fb      	ldrb	r3, [r7, #7]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d105      	bne.n	800c732 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c726:	683a      	ldr	r2, [r7, #0]
 800c728:	4907      	ldr	r1, [pc, #28]	; (800c748 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c72a:	4808      	ldr	r0, [pc, #32]	; (800c74c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c72c:	f7fb fc96 	bl	800805c <USBD_GetString>
 800c730:	e004      	b.n	800c73c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c732:	683a      	ldr	r2, [r7, #0]
 800c734:	4904      	ldr	r1, [pc, #16]	; (800c748 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c736:	4805      	ldr	r0, [pc, #20]	; (800c74c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c738:	f7fb fc90 	bl	800805c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c73c:	4b02      	ldr	r3, [pc, #8]	; (800c748 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	2000a4f8 	.word	0x2000a4f8
 800c74c:	0800db0c 	.word	0x0800db0c

0800c750 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c756:	4b0f      	ldr	r3, [pc, #60]	; (800c794 <Get_SerialNum+0x44>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c75c:	4b0e      	ldr	r3, [pc, #56]	; (800c798 <Get_SerialNum+0x48>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c762:	4b0e      	ldr	r3, [pc, #56]	; (800c79c <Get_SerialNum+0x4c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4413      	add	r3, r2
 800c76e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d009      	beq.n	800c78a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c776:	2208      	movs	r2, #8
 800c778:	4909      	ldr	r1, [pc, #36]	; (800c7a0 <Get_SerialNum+0x50>)
 800c77a:	68f8      	ldr	r0, [r7, #12]
 800c77c:	f000 f814 	bl	800c7a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c780:	2204      	movs	r2, #4
 800c782:	4908      	ldr	r1, [pc, #32]	; (800c7a4 <Get_SerialNum+0x54>)
 800c784:	68b8      	ldr	r0, [r7, #8]
 800c786:	f000 f80f 	bl	800c7a8 <IntToUnicode>
  }
}
 800c78a:	bf00      	nop
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	1fff7a10 	.word	0x1fff7a10
 800c798:	1fff7a14 	.word	0x1fff7a14
 800c79c:	1fff7a18 	.word	0x1fff7a18
 800c7a0:	200000f2 	.word	0x200000f2
 800c7a4:	20000102 	.word	0x20000102

0800c7a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b087      	sub	sp, #28
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	75fb      	strb	r3, [r7, #23]
 800c7be:	e027      	b.n	800c810 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	0f1b      	lsrs	r3, r3, #28
 800c7c4:	2b09      	cmp	r3, #9
 800c7c6:	d80b      	bhi.n	800c7e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	0f1b      	lsrs	r3, r3, #28
 800c7cc:	b2da      	uxtb	r2, r3
 800c7ce:	7dfb      	ldrb	r3, [r7, #23]
 800c7d0:	005b      	lsls	r3, r3, #1
 800c7d2:	4619      	mov	r1, r3
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	440b      	add	r3, r1
 800c7d8:	3230      	adds	r2, #48	; 0x30
 800c7da:	b2d2      	uxtb	r2, r2
 800c7dc:	701a      	strb	r2, [r3, #0]
 800c7de:	e00a      	b.n	800c7f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	0f1b      	lsrs	r3, r3, #28
 800c7e4:	b2da      	uxtb	r2, r3
 800c7e6:	7dfb      	ldrb	r3, [r7, #23]
 800c7e8:	005b      	lsls	r3, r3, #1
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	440b      	add	r3, r1
 800c7f0:	3237      	adds	r2, #55	; 0x37
 800c7f2:	b2d2      	uxtb	r2, r2
 800c7f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	011b      	lsls	r3, r3, #4
 800c7fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c7fc:	7dfb      	ldrb	r3, [r7, #23]
 800c7fe:	005b      	lsls	r3, r3, #1
 800c800:	3301      	adds	r3, #1
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	4413      	add	r3, r2
 800c806:	2200      	movs	r2, #0
 800c808:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c80a:	7dfb      	ldrb	r3, [r7, #23]
 800c80c:	3301      	adds	r3, #1
 800c80e:	75fb      	strb	r3, [r7, #23]
 800c810:	7dfa      	ldrb	r2, [r7, #23]
 800c812:	79fb      	ldrb	r3, [r7, #7]
 800c814:	429a      	cmp	r2, r3
 800c816:	d3d3      	bcc.n	800c7c0 <IntToUnicode+0x18>
  }
}
 800c818:	bf00      	nop
 800c81a:	bf00      	nop
 800c81c:	371c      	adds	r7, #28
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
	...

0800c828 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b08a      	sub	sp, #40	; 0x28
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c830:	f107 0314 	add.w	r3, r7, #20
 800c834:	2200      	movs	r2, #0
 800c836:	601a      	str	r2, [r3, #0]
 800c838:	605a      	str	r2, [r3, #4]
 800c83a:	609a      	str	r2, [r3, #8]
 800c83c:	60da      	str	r2, [r3, #12]
 800c83e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c848:	d13a      	bne.n	800c8c0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c84a:	2300      	movs	r3, #0
 800c84c:	613b      	str	r3, [r7, #16]
 800c84e:	4b1e      	ldr	r3, [pc, #120]	; (800c8c8 <HAL_PCD_MspInit+0xa0>)
 800c850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c852:	4a1d      	ldr	r2, [pc, #116]	; (800c8c8 <HAL_PCD_MspInit+0xa0>)
 800c854:	f043 0301 	orr.w	r3, r3, #1
 800c858:	6313      	str	r3, [r2, #48]	; 0x30
 800c85a:	4b1b      	ldr	r3, [pc, #108]	; (800c8c8 <HAL_PCD_MspInit+0xa0>)
 800c85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c85e:	f003 0301 	and.w	r3, r3, #1
 800c862:	613b      	str	r3, [r7, #16]
 800c864:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c866:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800c86a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c86c:	2302      	movs	r3, #2
 800c86e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c870:	2300      	movs	r3, #0
 800c872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c874:	2303      	movs	r3, #3
 800c876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c878:	230a      	movs	r3, #10
 800c87a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c87c:	f107 0314 	add.w	r3, r7, #20
 800c880:	4619      	mov	r1, r3
 800c882:	4812      	ldr	r0, [pc, #72]	; (800c8cc <HAL_PCD_MspInit+0xa4>)
 800c884:	f7f5 fb0a 	bl	8001e9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c888:	4b0f      	ldr	r3, [pc, #60]	; (800c8c8 <HAL_PCD_MspInit+0xa0>)
 800c88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c88c:	4a0e      	ldr	r2, [pc, #56]	; (800c8c8 <HAL_PCD_MspInit+0xa0>)
 800c88e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c892:	6353      	str	r3, [r2, #52]	; 0x34
 800c894:	2300      	movs	r3, #0
 800c896:	60fb      	str	r3, [r7, #12]
 800c898:	4b0b      	ldr	r3, [pc, #44]	; (800c8c8 <HAL_PCD_MspInit+0xa0>)
 800c89a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c89c:	4a0a      	ldr	r2, [pc, #40]	; (800c8c8 <HAL_PCD_MspInit+0xa0>)
 800c89e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c8a2:	6453      	str	r3, [r2, #68]	; 0x44
 800c8a4:	4b08      	ldr	r3, [pc, #32]	; (800c8c8 <HAL_PCD_MspInit+0xa0>)
 800c8a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c8ac:	60fb      	str	r3, [r7, #12]
 800c8ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	2105      	movs	r1, #5
 800c8b4:	2043      	movs	r0, #67	; 0x43
 800c8b6:	f7f4 ffd0 	bl	800185a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c8ba:	2043      	movs	r0, #67	; 0x43
 800c8bc:	f7f4 ffe9 	bl	8001892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c8c0:	bf00      	nop
 800c8c2:	3728      	adds	r7, #40	; 0x28
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	40023800 	.word	0x40023800
 800c8cc:	40020000 	.word	0x40020000

0800c8d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b082      	sub	sp, #8
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	4610      	mov	r0, r2
 800c8e8:	f7fa fa59 	bl	8006d9e <USBD_LL_SetupStage>
}
 800c8ec:	bf00      	nop
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}

0800c8f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c906:	78fa      	ldrb	r2, [r7, #3]
 800c908:	6879      	ldr	r1, [r7, #4]
 800c90a:	4613      	mov	r3, r2
 800c90c:	00db      	lsls	r3, r3, #3
 800c90e:	4413      	add	r3, r2
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	440b      	add	r3, r1
 800c914:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	78fb      	ldrb	r3, [r7, #3]
 800c91c:	4619      	mov	r1, r3
 800c91e:	f7fa fa93 	bl	8006e48 <USBD_LL_DataOutStage>
}
 800c922:	bf00      	nop
 800c924:	3708      	adds	r7, #8
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b082      	sub	sp, #8
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
 800c932:	460b      	mov	r3, r1
 800c934:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c93c:	78fa      	ldrb	r2, [r7, #3]
 800c93e:	6879      	ldr	r1, [r7, #4]
 800c940:	4613      	mov	r3, r2
 800c942:	00db      	lsls	r3, r3, #3
 800c944:	4413      	add	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	440b      	add	r3, r1
 800c94a:	334c      	adds	r3, #76	; 0x4c
 800c94c:	681a      	ldr	r2, [r3, #0]
 800c94e:	78fb      	ldrb	r3, [r7, #3]
 800c950:	4619      	mov	r1, r3
 800c952:	f7fa fb2c 	bl	8006fae <USBD_LL_DataInStage>
}
 800c956:	bf00      	nop
 800c958:	3708      	adds	r7, #8
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b082      	sub	sp, #8
 800c962:	af00      	add	r7, sp, #0
 800c964:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fa fc60 	bl	8007232 <USBD_LL_SOF>
}
 800c972:	bf00      	nop
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b084      	sub	sp, #16
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c982:	2301      	movs	r3, #1
 800c984:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d102      	bne.n	800c994 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c98e:	2300      	movs	r3, #0
 800c990:	73fb      	strb	r3, [r7, #15]
 800c992:	e008      	b.n	800c9a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68db      	ldr	r3, [r3, #12]
 800c998:	2b02      	cmp	r3, #2
 800c99a:	d102      	bne.n	800c9a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c99c:	2301      	movs	r3, #1
 800c99e:	73fb      	strb	r3, [r7, #15]
 800c9a0:	e001      	b.n	800c9a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c9a2:	f7f4 f9dd 	bl	8000d60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9ac:	7bfa      	ldrb	r2, [r7, #15]
 800c9ae:	4611      	mov	r1, r2
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f7fa fc00 	bl	80071b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f7fa fba8 	bl	8007112 <USBD_LL_Reset>
}
 800c9c2:	bf00      	nop
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
	...

0800c9cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b082      	sub	sp, #8
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7fa fbfb 	bl	80071d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	6812      	ldr	r2, [r2, #0]
 800c9ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c9f2:	f043 0301 	orr.w	r3, r3, #1
 800c9f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6a1b      	ldr	r3, [r3, #32]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d005      	beq.n	800ca0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca00:	4b04      	ldr	r3, [pc, #16]	; (800ca14 <HAL_PCD_SuspendCallback+0x48>)
 800ca02:	691b      	ldr	r3, [r3, #16]
 800ca04:	4a03      	ldr	r2, [pc, #12]	; (800ca14 <HAL_PCD_SuspendCallback+0x48>)
 800ca06:	f043 0306 	orr.w	r3, r3, #6
 800ca0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca0c:	bf00      	nop
 800ca0e:	3708      	adds	r7, #8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	e000ed00 	.word	0xe000ed00

0800ca18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b082      	sub	sp, #8
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7fa fbeb 	bl	8007202 <USBD_LL_Resume>
}
 800ca2c:	bf00      	nop
 800ca2e:	3708      	adds	r7, #8
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b082      	sub	sp, #8
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	460b      	mov	r3, r1
 800ca3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca46:	78fa      	ldrb	r2, [r7, #3]
 800ca48:	4611      	mov	r1, r2
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fa fc43 	bl	80072d6 <USBD_LL_IsoOUTIncomplete>
}
 800ca50:	bf00      	nop
 800ca52:	3708      	adds	r7, #8
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	460b      	mov	r3, r1
 800ca62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca6a:	78fa      	ldrb	r2, [r7, #3]
 800ca6c:	4611      	mov	r1, r2
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f7fa fbff 	bl	8007272 <USBD_LL_IsoINIncomplete>
}
 800ca74:	bf00      	nop
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7fa fc55 	bl	800733a <USBD_LL_DevConnected>
}
 800ca90:	bf00      	nop
 800ca92:	3708      	adds	r7, #8
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800caa6:	4618      	mov	r0, r3
 800caa8:	f7fa fc52 	bl	8007350 <USBD_LL_DevDisconnected>
}
 800caac:	bf00      	nop
 800caae:	3708      	adds	r7, #8
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d13c      	bne.n	800cb3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800cac4:	4a20      	ldr	r2, [pc, #128]	; (800cb48 <USBD_LL_Init+0x94>)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	4a1e      	ldr	r2, [pc, #120]	; (800cb48 <USBD_LL_Init+0x94>)
 800cad0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cad4:	4b1c      	ldr	r3, [pc, #112]	; (800cb48 <USBD_LL_Init+0x94>)
 800cad6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800cada:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800cadc:	4b1a      	ldr	r3, [pc, #104]	; (800cb48 <USBD_LL_Init+0x94>)
 800cade:	2204      	movs	r2, #4
 800cae0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800cae2:	4b19      	ldr	r3, [pc, #100]	; (800cb48 <USBD_LL_Init+0x94>)
 800cae4:	2202      	movs	r2, #2
 800cae6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cae8:	4b17      	ldr	r3, [pc, #92]	; (800cb48 <USBD_LL_Init+0x94>)
 800caea:	2200      	movs	r2, #0
 800caec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800caee:	4b16      	ldr	r3, [pc, #88]	; (800cb48 <USBD_LL_Init+0x94>)
 800caf0:	2202      	movs	r2, #2
 800caf2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800caf4:	4b14      	ldr	r3, [pc, #80]	; (800cb48 <USBD_LL_Init+0x94>)
 800caf6:	2200      	movs	r2, #0
 800caf8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800cafa:	4b13      	ldr	r3, [pc, #76]	; (800cb48 <USBD_LL_Init+0x94>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800cb00:	4b11      	ldr	r3, [pc, #68]	; (800cb48 <USBD_LL_Init+0x94>)
 800cb02:	2200      	movs	r2, #0
 800cb04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800cb06:	4b10      	ldr	r3, [pc, #64]	; (800cb48 <USBD_LL_Init+0x94>)
 800cb08:	2200      	movs	r2, #0
 800cb0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800cb0c:	4b0e      	ldr	r3, [pc, #56]	; (800cb48 <USBD_LL_Init+0x94>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800cb12:	480d      	ldr	r0, [pc, #52]	; (800cb48 <USBD_LL_Init+0x94>)
 800cb14:	f7f5 fb79 	bl	800220a <HAL_PCD_Init>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d001      	beq.n	800cb22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800cb1e:	f7f4 f91f 	bl	8000d60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800cb22:	2180      	movs	r1, #128	; 0x80
 800cb24:	4808      	ldr	r0, [pc, #32]	; (800cb48 <USBD_LL_Init+0x94>)
 800cb26:	f7f6 fdd0 	bl	80036ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800cb2a:	2240      	movs	r2, #64	; 0x40
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	4806      	ldr	r0, [pc, #24]	; (800cb48 <USBD_LL_Init+0x94>)
 800cb30:	f7f6 fd84 	bl	800363c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800cb34:	2280      	movs	r2, #128	; 0x80
 800cb36:	2101      	movs	r1, #1
 800cb38:	4803      	ldr	r0, [pc, #12]	; (800cb48 <USBD_LL_Init+0x94>)
 800cb3a:	f7f6 fd7f 	bl	800363c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800cb3e:	2300      	movs	r3, #0
}
 800cb40:	4618      	mov	r0, r3
 800cb42:	3708      	adds	r7, #8
 800cb44:	46bd      	mov	sp, r7
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	2000a6f8 	.word	0x2000a6f8

0800cb4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb54:	2300      	movs	r3, #0
 800cb56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7f5 fc6e 	bl	8002444 <HAL_PCD_Start>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb6c:	7bfb      	ldrb	r3, [r7, #15]
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f000 f942 	bl	800cdf8 <USBD_Get_USB_Status>
 800cb74:	4603      	mov	r3, r0
 800cb76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb78:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b084      	sub	sp, #16
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
 800cb8a:	4608      	mov	r0, r1
 800cb8c:	4611      	mov	r1, r2
 800cb8e:	461a      	mov	r2, r3
 800cb90:	4603      	mov	r3, r0
 800cb92:	70fb      	strb	r3, [r7, #3]
 800cb94:	460b      	mov	r3, r1
 800cb96:	70bb      	strb	r3, [r7, #2]
 800cb98:	4613      	mov	r3, r2
 800cb9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cba0:	2300      	movs	r3, #0
 800cba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cbaa:	78bb      	ldrb	r3, [r7, #2]
 800cbac:	883a      	ldrh	r2, [r7, #0]
 800cbae:	78f9      	ldrb	r1, [r7, #3]
 800cbb0:	f7f6 f93f 	bl	8002e32 <HAL_PCD_EP_Open>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbb8:	7bfb      	ldrb	r3, [r7, #15]
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f000 f91c 	bl	800cdf8 <USBD_Get_USB_Status>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3710      	adds	r7, #16
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b084      	sub	sp, #16
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbe8:	78fa      	ldrb	r2, [r7, #3]
 800cbea:	4611      	mov	r1, r2
 800cbec:	4618      	mov	r0, r3
 800cbee:	f7f6 f988 	bl	8002f02 <HAL_PCD_EP_Close>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbf6:	7bfb      	ldrb	r3, [r7, #15]
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f000 f8fd 	bl	800cdf8 <USBD_Get_USB_Status>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc02:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3710      	adds	r7, #16
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b084      	sub	sp, #16
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	460b      	mov	r3, r1
 800cc16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc18:	2300      	movs	r3, #0
 800cc1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc26:	78fa      	ldrb	r2, [r7, #3]
 800cc28:	4611      	mov	r1, r2
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7f6 fa60 	bl	80030f0 <HAL_PCD_EP_SetStall>
 800cc30:	4603      	mov	r3, r0
 800cc32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc34:	7bfb      	ldrb	r3, [r7, #15]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f000 f8de 	bl	800cdf8 <USBD_Get_USB_Status>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc40:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3710      	adds	r7, #16
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b084      	sub	sp, #16
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
 800cc52:	460b      	mov	r3, r1
 800cc54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc56:	2300      	movs	r3, #0
 800cc58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc64:	78fa      	ldrb	r2, [r7, #3]
 800cc66:	4611      	mov	r1, r2
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f7f6 faa5 	bl	80031b8 <HAL_PCD_EP_ClrStall>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc72:	7bfb      	ldrb	r3, [r7, #15]
 800cc74:	4618      	mov	r0, r3
 800cc76:	f000 f8bf 	bl	800cdf8 <USBD_Get_USB_Status>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3710      	adds	r7, #16
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	460b      	mov	r3, r1
 800cc92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cc9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cc9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	da0b      	bge.n	800ccbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cca4:	78fb      	ldrb	r3, [r7, #3]
 800cca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccaa:	68f9      	ldr	r1, [r7, #12]
 800ccac:	4613      	mov	r3, r2
 800ccae:	00db      	lsls	r3, r3, #3
 800ccb0:	4413      	add	r3, r2
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	440b      	add	r3, r1
 800ccb6:	333e      	adds	r3, #62	; 0x3e
 800ccb8:	781b      	ldrb	r3, [r3, #0]
 800ccba:	e00b      	b.n	800ccd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ccbc:	78fb      	ldrb	r3, [r7, #3]
 800ccbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccc2:	68f9      	ldr	r1, [r7, #12]
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	00db      	lsls	r3, r3, #3
 800ccc8:	4413      	add	r3, r2
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	440b      	add	r3, r1
 800ccce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ccd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3714      	adds	r7, #20
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	460b      	mov	r3, r1
 800ccea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ccec:	2300      	movs	r3, #0
 800ccee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ccfa:	78fa      	ldrb	r2, [r7, #3]
 800ccfc:	4611      	mov	r1, r2
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f7f6 f872 	bl	8002de8 <HAL_PCD_SetAddress>
 800cd04:	4603      	mov	r3, r0
 800cd06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f000 f874 	bl	800cdf8 <USBD_Get_USB_Status>
 800cd10:	4603      	mov	r3, r0
 800cd12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd14:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd1e:	b580      	push	{r7, lr}
 800cd20:	b086      	sub	sp, #24
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	60f8      	str	r0, [r7, #12]
 800cd26:	607a      	str	r2, [r7, #4]
 800cd28:	603b      	str	r3, [r7, #0]
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd32:	2300      	movs	r3, #0
 800cd34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cd3c:	7af9      	ldrb	r1, [r7, #11]
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	f7f6 f98b 	bl	800305c <HAL_PCD_EP_Transmit>
 800cd46:	4603      	mov	r3, r0
 800cd48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd4a:	7dfb      	ldrb	r3, [r7, #23]
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f000 f853 	bl	800cdf8 <USBD_Get_USB_Status>
 800cd52:	4603      	mov	r3, r0
 800cd54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd56:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3718      	adds	r7, #24
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	607a      	str	r2, [r7, #4]
 800cd6a:	603b      	str	r3, [r7, #0]
 800cd6c:	460b      	mov	r3, r1
 800cd6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd74:	2300      	movs	r3, #0
 800cd76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cd7e:	7af9      	ldrb	r1, [r7, #11]
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	f7f6 f907 	bl	8002f96 <HAL_PCD_EP_Receive>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd8c:	7dfb      	ldrb	r3, [r7, #23]
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f000 f832 	bl	800cdf8 <USBD_Get_USB_Status>
 800cd94:	4603      	mov	r3, r0
 800cd96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cd98:	7dbb      	ldrb	r3, [r7, #22]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3718      	adds	r7, #24
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}

0800cda2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cda2:	b580      	push	{r7, lr}
 800cda4:	b082      	sub	sp, #8
 800cda6:	af00      	add	r7, sp, #0
 800cda8:	6078      	str	r0, [r7, #4]
 800cdaa:	460b      	mov	r3, r1
 800cdac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cdb4:	78fa      	ldrb	r2, [r7, #3]
 800cdb6:	4611      	mov	r1, r2
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7f6 f937 	bl	800302c <HAL_PCD_EP_GetRxCount>
 800cdbe:	4603      	mov	r3, r0
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b083      	sub	sp, #12
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cdd0:	4b03      	ldr	r3, [pc, #12]	; (800cde0 <USBD_static_malloc+0x18>)
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	2000ac04 	.word	0x2000ac04

0800cde4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cde4:	b480      	push	{r7}
 800cde6:	b083      	sub	sp, #12
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]

}
 800cdec:	bf00      	nop
 800cdee:	370c      	adds	r7, #12
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf6:	4770      	bx	lr

0800cdf8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b085      	sub	sp, #20
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	4603      	mov	r3, r0
 800ce00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce02:	2300      	movs	r3, #0
 800ce04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ce06:	79fb      	ldrb	r3, [r7, #7]
 800ce08:	2b03      	cmp	r3, #3
 800ce0a:	d817      	bhi.n	800ce3c <USBD_Get_USB_Status+0x44>
 800ce0c:	a201      	add	r2, pc, #4	; (adr r2, 800ce14 <USBD_Get_USB_Status+0x1c>)
 800ce0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce12:	bf00      	nop
 800ce14:	0800ce25 	.word	0x0800ce25
 800ce18:	0800ce2b 	.word	0x0800ce2b
 800ce1c:	0800ce31 	.word	0x0800ce31
 800ce20:	0800ce37 	.word	0x0800ce37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ce24:	2300      	movs	r3, #0
 800ce26:	73fb      	strb	r3, [r7, #15]
    break;
 800ce28:	e00b      	b.n	800ce42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ce2e:	e008      	b.n	800ce42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ce30:	2301      	movs	r3, #1
 800ce32:	73fb      	strb	r3, [r7, #15]
    break;
 800ce34:	e005      	b.n	800ce42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ce36:	2303      	movs	r3, #3
 800ce38:	73fb      	strb	r3, [r7, #15]
    break;
 800ce3a:	e002      	b.n	800ce42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ce3c:	2303      	movs	r3, #3
 800ce3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ce40:	bf00      	nop
  }
  return usb_status;
 800ce42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3714      	adds	r7, #20
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4e:	4770      	bx	lr

0800ce50 <__errno>:
 800ce50:	4b01      	ldr	r3, [pc, #4]	; (800ce58 <__errno+0x8>)
 800ce52:	6818      	ldr	r0, [r3, #0]
 800ce54:	4770      	bx	lr
 800ce56:	bf00      	nop
 800ce58:	2000010c 	.word	0x2000010c

0800ce5c <__libc_init_array>:
 800ce5c:	b570      	push	{r4, r5, r6, lr}
 800ce5e:	4d0d      	ldr	r5, [pc, #52]	; (800ce94 <__libc_init_array+0x38>)
 800ce60:	4c0d      	ldr	r4, [pc, #52]	; (800ce98 <__libc_init_array+0x3c>)
 800ce62:	1b64      	subs	r4, r4, r5
 800ce64:	10a4      	asrs	r4, r4, #2
 800ce66:	2600      	movs	r6, #0
 800ce68:	42a6      	cmp	r6, r4
 800ce6a:	d109      	bne.n	800ce80 <__libc_init_array+0x24>
 800ce6c:	4d0b      	ldr	r5, [pc, #44]	; (800ce9c <__libc_init_array+0x40>)
 800ce6e:	4c0c      	ldr	r4, [pc, #48]	; (800cea0 <__libc_init_array+0x44>)
 800ce70:	f000 fd28 	bl	800d8c4 <_init>
 800ce74:	1b64      	subs	r4, r4, r5
 800ce76:	10a4      	asrs	r4, r4, #2
 800ce78:	2600      	movs	r6, #0
 800ce7a:	42a6      	cmp	r6, r4
 800ce7c:	d105      	bne.n	800ce8a <__libc_init_array+0x2e>
 800ce7e:	bd70      	pop	{r4, r5, r6, pc}
 800ce80:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce84:	4798      	blx	r3
 800ce86:	3601      	adds	r6, #1
 800ce88:	e7ee      	b.n	800ce68 <__libc_init_array+0xc>
 800ce8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce8e:	4798      	blx	r3
 800ce90:	3601      	adds	r6, #1
 800ce92:	e7f2      	b.n	800ce7a <__libc_init_array+0x1e>
 800ce94:	0800dc24 	.word	0x0800dc24
 800ce98:	0800dc24 	.word	0x0800dc24
 800ce9c:	0800dc24 	.word	0x0800dc24
 800cea0:	0800dc28 	.word	0x0800dc28

0800cea4 <__retarget_lock_acquire_recursive>:
 800cea4:	4770      	bx	lr

0800cea6 <__retarget_lock_release_recursive>:
 800cea6:	4770      	bx	lr

0800cea8 <memcpy>:
 800cea8:	440a      	add	r2, r1
 800ceaa:	4291      	cmp	r1, r2
 800ceac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ceb0:	d100      	bne.n	800ceb4 <memcpy+0xc>
 800ceb2:	4770      	bx	lr
 800ceb4:	b510      	push	{r4, lr}
 800ceb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ceba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cebe:	4291      	cmp	r1, r2
 800cec0:	d1f9      	bne.n	800ceb6 <memcpy+0xe>
 800cec2:	bd10      	pop	{r4, pc}

0800cec4 <memset>:
 800cec4:	4402      	add	r2, r0
 800cec6:	4603      	mov	r3, r0
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d100      	bne.n	800cece <memset+0xa>
 800cecc:	4770      	bx	lr
 800cece:	f803 1b01 	strb.w	r1, [r3], #1
 800ced2:	e7f9      	b.n	800cec8 <memset+0x4>

0800ced4 <sbrk_aligned>:
 800ced4:	b570      	push	{r4, r5, r6, lr}
 800ced6:	4e0e      	ldr	r6, [pc, #56]	; (800cf10 <sbrk_aligned+0x3c>)
 800ced8:	460c      	mov	r4, r1
 800ceda:	6831      	ldr	r1, [r6, #0]
 800cedc:	4605      	mov	r5, r0
 800cede:	b911      	cbnz	r1, 800cee6 <sbrk_aligned+0x12>
 800cee0:	f000 f8f6 	bl	800d0d0 <_sbrk_r>
 800cee4:	6030      	str	r0, [r6, #0]
 800cee6:	4621      	mov	r1, r4
 800cee8:	4628      	mov	r0, r5
 800ceea:	f000 f8f1 	bl	800d0d0 <_sbrk_r>
 800ceee:	1c43      	adds	r3, r0, #1
 800cef0:	d00a      	beq.n	800cf08 <sbrk_aligned+0x34>
 800cef2:	1cc4      	adds	r4, r0, #3
 800cef4:	f024 0403 	bic.w	r4, r4, #3
 800cef8:	42a0      	cmp	r0, r4
 800cefa:	d007      	beq.n	800cf0c <sbrk_aligned+0x38>
 800cefc:	1a21      	subs	r1, r4, r0
 800cefe:	4628      	mov	r0, r5
 800cf00:	f000 f8e6 	bl	800d0d0 <_sbrk_r>
 800cf04:	3001      	adds	r0, #1
 800cf06:	d101      	bne.n	800cf0c <sbrk_aligned+0x38>
 800cf08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cf0c:	4620      	mov	r0, r4
 800cf0e:	bd70      	pop	{r4, r5, r6, pc}
 800cf10:	2000ae2c 	.word	0x2000ae2c

0800cf14 <_malloc_r>:
 800cf14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf18:	1ccd      	adds	r5, r1, #3
 800cf1a:	f025 0503 	bic.w	r5, r5, #3
 800cf1e:	3508      	adds	r5, #8
 800cf20:	2d0c      	cmp	r5, #12
 800cf22:	bf38      	it	cc
 800cf24:	250c      	movcc	r5, #12
 800cf26:	2d00      	cmp	r5, #0
 800cf28:	4607      	mov	r7, r0
 800cf2a:	db01      	blt.n	800cf30 <_malloc_r+0x1c>
 800cf2c:	42a9      	cmp	r1, r5
 800cf2e:	d905      	bls.n	800cf3c <_malloc_r+0x28>
 800cf30:	230c      	movs	r3, #12
 800cf32:	603b      	str	r3, [r7, #0]
 800cf34:	2600      	movs	r6, #0
 800cf36:	4630      	mov	r0, r6
 800cf38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf3c:	4e2e      	ldr	r6, [pc, #184]	; (800cff8 <_malloc_r+0xe4>)
 800cf3e:	f000 f927 	bl	800d190 <__malloc_lock>
 800cf42:	6833      	ldr	r3, [r6, #0]
 800cf44:	461c      	mov	r4, r3
 800cf46:	bb34      	cbnz	r4, 800cf96 <_malloc_r+0x82>
 800cf48:	4629      	mov	r1, r5
 800cf4a:	4638      	mov	r0, r7
 800cf4c:	f7ff ffc2 	bl	800ced4 <sbrk_aligned>
 800cf50:	1c43      	adds	r3, r0, #1
 800cf52:	4604      	mov	r4, r0
 800cf54:	d14d      	bne.n	800cff2 <_malloc_r+0xde>
 800cf56:	6834      	ldr	r4, [r6, #0]
 800cf58:	4626      	mov	r6, r4
 800cf5a:	2e00      	cmp	r6, #0
 800cf5c:	d140      	bne.n	800cfe0 <_malloc_r+0xcc>
 800cf5e:	6823      	ldr	r3, [r4, #0]
 800cf60:	4631      	mov	r1, r6
 800cf62:	4638      	mov	r0, r7
 800cf64:	eb04 0803 	add.w	r8, r4, r3
 800cf68:	f000 f8b2 	bl	800d0d0 <_sbrk_r>
 800cf6c:	4580      	cmp	r8, r0
 800cf6e:	d13a      	bne.n	800cfe6 <_malloc_r+0xd2>
 800cf70:	6821      	ldr	r1, [r4, #0]
 800cf72:	3503      	adds	r5, #3
 800cf74:	1a6d      	subs	r5, r5, r1
 800cf76:	f025 0503 	bic.w	r5, r5, #3
 800cf7a:	3508      	adds	r5, #8
 800cf7c:	2d0c      	cmp	r5, #12
 800cf7e:	bf38      	it	cc
 800cf80:	250c      	movcc	r5, #12
 800cf82:	4629      	mov	r1, r5
 800cf84:	4638      	mov	r0, r7
 800cf86:	f7ff ffa5 	bl	800ced4 <sbrk_aligned>
 800cf8a:	3001      	adds	r0, #1
 800cf8c:	d02b      	beq.n	800cfe6 <_malloc_r+0xd2>
 800cf8e:	6823      	ldr	r3, [r4, #0]
 800cf90:	442b      	add	r3, r5
 800cf92:	6023      	str	r3, [r4, #0]
 800cf94:	e00e      	b.n	800cfb4 <_malloc_r+0xa0>
 800cf96:	6822      	ldr	r2, [r4, #0]
 800cf98:	1b52      	subs	r2, r2, r5
 800cf9a:	d41e      	bmi.n	800cfda <_malloc_r+0xc6>
 800cf9c:	2a0b      	cmp	r2, #11
 800cf9e:	d916      	bls.n	800cfce <_malloc_r+0xba>
 800cfa0:	1961      	adds	r1, r4, r5
 800cfa2:	42a3      	cmp	r3, r4
 800cfa4:	6025      	str	r5, [r4, #0]
 800cfa6:	bf18      	it	ne
 800cfa8:	6059      	strne	r1, [r3, #4]
 800cfaa:	6863      	ldr	r3, [r4, #4]
 800cfac:	bf08      	it	eq
 800cfae:	6031      	streq	r1, [r6, #0]
 800cfb0:	5162      	str	r2, [r4, r5]
 800cfb2:	604b      	str	r3, [r1, #4]
 800cfb4:	4638      	mov	r0, r7
 800cfb6:	f104 060b 	add.w	r6, r4, #11
 800cfba:	f000 f8ef 	bl	800d19c <__malloc_unlock>
 800cfbe:	f026 0607 	bic.w	r6, r6, #7
 800cfc2:	1d23      	adds	r3, r4, #4
 800cfc4:	1af2      	subs	r2, r6, r3
 800cfc6:	d0b6      	beq.n	800cf36 <_malloc_r+0x22>
 800cfc8:	1b9b      	subs	r3, r3, r6
 800cfca:	50a3      	str	r3, [r4, r2]
 800cfcc:	e7b3      	b.n	800cf36 <_malloc_r+0x22>
 800cfce:	6862      	ldr	r2, [r4, #4]
 800cfd0:	42a3      	cmp	r3, r4
 800cfd2:	bf0c      	ite	eq
 800cfd4:	6032      	streq	r2, [r6, #0]
 800cfd6:	605a      	strne	r2, [r3, #4]
 800cfd8:	e7ec      	b.n	800cfb4 <_malloc_r+0xa0>
 800cfda:	4623      	mov	r3, r4
 800cfdc:	6864      	ldr	r4, [r4, #4]
 800cfde:	e7b2      	b.n	800cf46 <_malloc_r+0x32>
 800cfe0:	4634      	mov	r4, r6
 800cfe2:	6876      	ldr	r6, [r6, #4]
 800cfe4:	e7b9      	b.n	800cf5a <_malloc_r+0x46>
 800cfe6:	230c      	movs	r3, #12
 800cfe8:	603b      	str	r3, [r7, #0]
 800cfea:	4638      	mov	r0, r7
 800cfec:	f000 f8d6 	bl	800d19c <__malloc_unlock>
 800cff0:	e7a1      	b.n	800cf36 <_malloc_r+0x22>
 800cff2:	6025      	str	r5, [r4, #0]
 800cff4:	e7de      	b.n	800cfb4 <_malloc_r+0xa0>
 800cff6:	bf00      	nop
 800cff8:	2000ae28 	.word	0x2000ae28

0800cffc <cleanup_glue>:
 800cffc:	b538      	push	{r3, r4, r5, lr}
 800cffe:	460c      	mov	r4, r1
 800d000:	6809      	ldr	r1, [r1, #0]
 800d002:	4605      	mov	r5, r0
 800d004:	b109      	cbz	r1, 800d00a <cleanup_glue+0xe>
 800d006:	f7ff fff9 	bl	800cffc <cleanup_glue>
 800d00a:	4621      	mov	r1, r4
 800d00c:	4628      	mov	r0, r5
 800d00e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d012:	f000 b8c9 	b.w	800d1a8 <_free_r>
	...

0800d018 <_reclaim_reent>:
 800d018:	4b2c      	ldr	r3, [pc, #176]	; (800d0cc <_reclaim_reent+0xb4>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4283      	cmp	r3, r0
 800d01e:	b570      	push	{r4, r5, r6, lr}
 800d020:	4604      	mov	r4, r0
 800d022:	d051      	beq.n	800d0c8 <_reclaim_reent+0xb0>
 800d024:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d026:	b143      	cbz	r3, 800d03a <_reclaim_reent+0x22>
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d14a      	bne.n	800d0c4 <_reclaim_reent+0xac>
 800d02e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d030:	6819      	ldr	r1, [r3, #0]
 800d032:	b111      	cbz	r1, 800d03a <_reclaim_reent+0x22>
 800d034:	4620      	mov	r0, r4
 800d036:	f000 f8b7 	bl	800d1a8 <_free_r>
 800d03a:	6961      	ldr	r1, [r4, #20]
 800d03c:	b111      	cbz	r1, 800d044 <_reclaim_reent+0x2c>
 800d03e:	4620      	mov	r0, r4
 800d040:	f000 f8b2 	bl	800d1a8 <_free_r>
 800d044:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d046:	b111      	cbz	r1, 800d04e <_reclaim_reent+0x36>
 800d048:	4620      	mov	r0, r4
 800d04a:	f000 f8ad 	bl	800d1a8 <_free_r>
 800d04e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d050:	b111      	cbz	r1, 800d058 <_reclaim_reent+0x40>
 800d052:	4620      	mov	r0, r4
 800d054:	f000 f8a8 	bl	800d1a8 <_free_r>
 800d058:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d05a:	b111      	cbz	r1, 800d062 <_reclaim_reent+0x4a>
 800d05c:	4620      	mov	r0, r4
 800d05e:	f000 f8a3 	bl	800d1a8 <_free_r>
 800d062:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d064:	b111      	cbz	r1, 800d06c <_reclaim_reent+0x54>
 800d066:	4620      	mov	r0, r4
 800d068:	f000 f89e 	bl	800d1a8 <_free_r>
 800d06c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d06e:	b111      	cbz	r1, 800d076 <_reclaim_reent+0x5e>
 800d070:	4620      	mov	r0, r4
 800d072:	f000 f899 	bl	800d1a8 <_free_r>
 800d076:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d078:	b111      	cbz	r1, 800d080 <_reclaim_reent+0x68>
 800d07a:	4620      	mov	r0, r4
 800d07c:	f000 f894 	bl	800d1a8 <_free_r>
 800d080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d082:	b111      	cbz	r1, 800d08a <_reclaim_reent+0x72>
 800d084:	4620      	mov	r0, r4
 800d086:	f000 f88f 	bl	800d1a8 <_free_r>
 800d08a:	69a3      	ldr	r3, [r4, #24]
 800d08c:	b1e3      	cbz	r3, 800d0c8 <_reclaim_reent+0xb0>
 800d08e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d090:	4620      	mov	r0, r4
 800d092:	4798      	blx	r3
 800d094:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d096:	b1b9      	cbz	r1, 800d0c8 <_reclaim_reent+0xb0>
 800d098:	4620      	mov	r0, r4
 800d09a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d09e:	f7ff bfad 	b.w	800cffc <cleanup_glue>
 800d0a2:	5949      	ldr	r1, [r1, r5]
 800d0a4:	b941      	cbnz	r1, 800d0b8 <_reclaim_reent+0xa0>
 800d0a6:	3504      	adds	r5, #4
 800d0a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d0aa:	2d80      	cmp	r5, #128	; 0x80
 800d0ac:	68d9      	ldr	r1, [r3, #12]
 800d0ae:	d1f8      	bne.n	800d0a2 <_reclaim_reent+0x8a>
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f000 f879 	bl	800d1a8 <_free_r>
 800d0b6:	e7ba      	b.n	800d02e <_reclaim_reent+0x16>
 800d0b8:	680e      	ldr	r6, [r1, #0]
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f000 f874 	bl	800d1a8 <_free_r>
 800d0c0:	4631      	mov	r1, r6
 800d0c2:	e7ef      	b.n	800d0a4 <_reclaim_reent+0x8c>
 800d0c4:	2500      	movs	r5, #0
 800d0c6:	e7ef      	b.n	800d0a8 <_reclaim_reent+0x90>
 800d0c8:	bd70      	pop	{r4, r5, r6, pc}
 800d0ca:	bf00      	nop
 800d0cc:	2000010c 	.word	0x2000010c

0800d0d0 <_sbrk_r>:
 800d0d0:	b538      	push	{r3, r4, r5, lr}
 800d0d2:	4d06      	ldr	r5, [pc, #24]	; (800d0ec <_sbrk_r+0x1c>)
 800d0d4:	2300      	movs	r3, #0
 800d0d6:	4604      	mov	r4, r0
 800d0d8:	4608      	mov	r0, r1
 800d0da:	602b      	str	r3, [r5, #0]
 800d0dc:	f7f3 ff78 	bl	8000fd0 <_sbrk>
 800d0e0:	1c43      	adds	r3, r0, #1
 800d0e2:	d102      	bne.n	800d0ea <_sbrk_r+0x1a>
 800d0e4:	682b      	ldr	r3, [r5, #0]
 800d0e6:	b103      	cbz	r3, 800d0ea <_sbrk_r+0x1a>
 800d0e8:	6023      	str	r3, [r4, #0]
 800d0ea:	bd38      	pop	{r3, r4, r5, pc}
 800d0ec:	2000ae30 	.word	0x2000ae30

0800d0f0 <siprintf>:
 800d0f0:	b40e      	push	{r1, r2, r3}
 800d0f2:	b500      	push	{lr}
 800d0f4:	b09c      	sub	sp, #112	; 0x70
 800d0f6:	ab1d      	add	r3, sp, #116	; 0x74
 800d0f8:	9002      	str	r0, [sp, #8]
 800d0fa:	9006      	str	r0, [sp, #24]
 800d0fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d100:	4809      	ldr	r0, [pc, #36]	; (800d128 <siprintf+0x38>)
 800d102:	9107      	str	r1, [sp, #28]
 800d104:	9104      	str	r1, [sp, #16]
 800d106:	4909      	ldr	r1, [pc, #36]	; (800d12c <siprintf+0x3c>)
 800d108:	f853 2b04 	ldr.w	r2, [r3], #4
 800d10c:	9105      	str	r1, [sp, #20]
 800d10e:	6800      	ldr	r0, [r0, #0]
 800d110:	9301      	str	r3, [sp, #4]
 800d112:	a902      	add	r1, sp, #8
 800d114:	f000 f8f0 	bl	800d2f8 <_svfiprintf_r>
 800d118:	9b02      	ldr	r3, [sp, #8]
 800d11a:	2200      	movs	r2, #0
 800d11c:	701a      	strb	r2, [r3, #0]
 800d11e:	b01c      	add	sp, #112	; 0x70
 800d120:	f85d eb04 	ldr.w	lr, [sp], #4
 800d124:	b003      	add	sp, #12
 800d126:	4770      	bx	lr
 800d128:	2000010c 	.word	0x2000010c
 800d12c:	ffff0208 	.word	0xffff0208

0800d130 <strcpy>:
 800d130:	4603      	mov	r3, r0
 800d132:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d136:	f803 2b01 	strb.w	r2, [r3], #1
 800d13a:	2a00      	cmp	r2, #0
 800d13c:	d1f9      	bne.n	800d132 <strcpy+0x2>
 800d13e:	4770      	bx	lr

0800d140 <strncmp>:
 800d140:	b510      	push	{r4, lr}
 800d142:	b17a      	cbz	r2, 800d164 <strncmp+0x24>
 800d144:	4603      	mov	r3, r0
 800d146:	3901      	subs	r1, #1
 800d148:	1884      	adds	r4, r0, r2
 800d14a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d14e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d152:	4290      	cmp	r0, r2
 800d154:	d101      	bne.n	800d15a <strncmp+0x1a>
 800d156:	42a3      	cmp	r3, r4
 800d158:	d101      	bne.n	800d15e <strncmp+0x1e>
 800d15a:	1a80      	subs	r0, r0, r2
 800d15c:	bd10      	pop	{r4, pc}
 800d15e:	2800      	cmp	r0, #0
 800d160:	d1f3      	bne.n	800d14a <strncmp+0xa>
 800d162:	e7fa      	b.n	800d15a <strncmp+0x1a>
 800d164:	4610      	mov	r0, r2
 800d166:	e7f9      	b.n	800d15c <strncmp+0x1c>

0800d168 <strncpy>:
 800d168:	b510      	push	{r4, lr}
 800d16a:	3901      	subs	r1, #1
 800d16c:	4603      	mov	r3, r0
 800d16e:	b132      	cbz	r2, 800d17e <strncpy+0x16>
 800d170:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d174:	f803 4b01 	strb.w	r4, [r3], #1
 800d178:	3a01      	subs	r2, #1
 800d17a:	2c00      	cmp	r4, #0
 800d17c:	d1f7      	bne.n	800d16e <strncpy+0x6>
 800d17e:	441a      	add	r2, r3
 800d180:	2100      	movs	r1, #0
 800d182:	4293      	cmp	r3, r2
 800d184:	d100      	bne.n	800d188 <strncpy+0x20>
 800d186:	bd10      	pop	{r4, pc}
 800d188:	f803 1b01 	strb.w	r1, [r3], #1
 800d18c:	e7f9      	b.n	800d182 <strncpy+0x1a>
	...

0800d190 <__malloc_lock>:
 800d190:	4801      	ldr	r0, [pc, #4]	; (800d198 <__malloc_lock+0x8>)
 800d192:	f7ff be87 	b.w	800cea4 <__retarget_lock_acquire_recursive>
 800d196:	bf00      	nop
 800d198:	2000ae24 	.word	0x2000ae24

0800d19c <__malloc_unlock>:
 800d19c:	4801      	ldr	r0, [pc, #4]	; (800d1a4 <__malloc_unlock+0x8>)
 800d19e:	f7ff be82 	b.w	800cea6 <__retarget_lock_release_recursive>
 800d1a2:	bf00      	nop
 800d1a4:	2000ae24 	.word	0x2000ae24

0800d1a8 <_free_r>:
 800d1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1aa:	2900      	cmp	r1, #0
 800d1ac:	d044      	beq.n	800d238 <_free_r+0x90>
 800d1ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1b2:	9001      	str	r0, [sp, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f1a1 0404 	sub.w	r4, r1, #4
 800d1ba:	bfb8      	it	lt
 800d1bc:	18e4      	addlt	r4, r4, r3
 800d1be:	f7ff ffe7 	bl	800d190 <__malloc_lock>
 800d1c2:	4a1e      	ldr	r2, [pc, #120]	; (800d23c <_free_r+0x94>)
 800d1c4:	9801      	ldr	r0, [sp, #4]
 800d1c6:	6813      	ldr	r3, [r2, #0]
 800d1c8:	b933      	cbnz	r3, 800d1d8 <_free_r+0x30>
 800d1ca:	6063      	str	r3, [r4, #4]
 800d1cc:	6014      	str	r4, [r2, #0]
 800d1ce:	b003      	add	sp, #12
 800d1d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1d4:	f7ff bfe2 	b.w	800d19c <__malloc_unlock>
 800d1d8:	42a3      	cmp	r3, r4
 800d1da:	d908      	bls.n	800d1ee <_free_r+0x46>
 800d1dc:	6825      	ldr	r5, [r4, #0]
 800d1de:	1961      	adds	r1, r4, r5
 800d1e0:	428b      	cmp	r3, r1
 800d1e2:	bf01      	itttt	eq
 800d1e4:	6819      	ldreq	r1, [r3, #0]
 800d1e6:	685b      	ldreq	r3, [r3, #4]
 800d1e8:	1949      	addeq	r1, r1, r5
 800d1ea:	6021      	streq	r1, [r4, #0]
 800d1ec:	e7ed      	b.n	800d1ca <_free_r+0x22>
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	b10b      	cbz	r3, 800d1f8 <_free_r+0x50>
 800d1f4:	42a3      	cmp	r3, r4
 800d1f6:	d9fa      	bls.n	800d1ee <_free_r+0x46>
 800d1f8:	6811      	ldr	r1, [r2, #0]
 800d1fa:	1855      	adds	r5, r2, r1
 800d1fc:	42a5      	cmp	r5, r4
 800d1fe:	d10b      	bne.n	800d218 <_free_r+0x70>
 800d200:	6824      	ldr	r4, [r4, #0]
 800d202:	4421      	add	r1, r4
 800d204:	1854      	adds	r4, r2, r1
 800d206:	42a3      	cmp	r3, r4
 800d208:	6011      	str	r1, [r2, #0]
 800d20a:	d1e0      	bne.n	800d1ce <_free_r+0x26>
 800d20c:	681c      	ldr	r4, [r3, #0]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	6053      	str	r3, [r2, #4]
 800d212:	4421      	add	r1, r4
 800d214:	6011      	str	r1, [r2, #0]
 800d216:	e7da      	b.n	800d1ce <_free_r+0x26>
 800d218:	d902      	bls.n	800d220 <_free_r+0x78>
 800d21a:	230c      	movs	r3, #12
 800d21c:	6003      	str	r3, [r0, #0]
 800d21e:	e7d6      	b.n	800d1ce <_free_r+0x26>
 800d220:	6825      	ldr	r5, [r4, #0]
 800d222:	1961      	adds	r1, r4, r5
 800d224:	428b      	cmp	r3, r1
 800d226:	bf04      	itt	eq
 800d228:	6819      	ldreq	r1, [r3, #0]
 800d22a:	685b      	ldreq	r3, [r3, #4]
 800d22c:	6063      	str	r3, [r4, #4]
 800d22e:	bf04      	itt	eq
 800d230:	1949      	addeq	r1, r1, r5
 800d232:	6021      	streq	r1, [r4, #0]
 800d234:	6054      	str	r4, [r2, #4]
 800d236:	e7ca      	b.n	800d1ce <_free_r+0x26>
 800d238:	b003      	add	sp, #12
 800d23a:	bd30      	pop	{r4, r5, pc}
 800d23c:	2000ae28 	.word	0x2000ae28

0800d240 <__ssputs_r>:
 800d240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d244:	688e      	ldr	r6, [r1, #8]
 800d246:	429e      	cmp	r6, r3
 800d248:	4682      	mov	sl, r0
 800d24a:	460c      	mov	r4, r1
 800d24c:	4690      	mov	r8, r2
 800d24e:	461f      	mov	r7, r3
 800d250:	d838      	bhi.n	800d2c4 <__ssputs_r+0x84>
 800d252:	898a      	ldrh	r2, [r1, #12]
 800d254:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d258:	d032      	beq.n	800d2c0 <__ssputs_r+0x80>
 800d25a:	6825      	ldr	r5, [r4, #0]
 800d25c:	6909      	ldr	r1, [r1, #16]
 800d25e:	eba5 0901 	sub.w	r9, r5, r1
 800d262:	6965      	ldr	r5, [r4, #20]
 800d264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d268:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d26c:	3301      	adds	r3, #1
 800d26e:	444b      	add	r3, r9
 800d270:	106d      	asrs	r5, r5, #1
 800d272:	429d      	cmp	r5, r3
 800d274:	bf38      	it	cc
 800d276:	461d      	movcc	r5, r3
 800d278:	0553      	lsls	r3, r2, #21
 800d27a:	d531      	bpl.n	800d2e0 <__ssputs_r+0xa0>
 800d27c:	4629      	mov	r1, r5
 800d27e:	f7ff fe49 	bl	800cf14 <_malloc_r>
 800d282:	4606      	mov	r6, r0
 800d284:	b950      	cbnz	r0, 800d29c <__ssputs_r+0x5c>
 800d286:	230c      	movs	r3, #12
 800d288:	f8ca 3000 	str.w	r3, [sl]
 800d28c:	89a3      	ldrh	r3, [r4, #12]
 800d28e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d292:	81a3      	strh	r3, [r4, #12]
 800d294:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d29c:	6921      	ldr	r1, [r4, #16]
 800d29e:	464a      	mov	r2, r9
 800d2a0:	f7ff fe02 	bl	800cea8 <memcpy>
 800d2a4:	89a3      	ldrh	r3, [r4, #12]
 800d2a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2ae:	81a3      	strh	r3, [r4, #12]
 800d2b0:	6126      	str	r6, [r4, #16]
 800d2b2:	6165      	str	r5, [r4, #20]
 800d2b4:	444e      	add	r6, r9
 800d2b6:	eba5 0509 	sub.w	r5, r5, r9
 800d2ba:	6026      	str	r6, [r4, #0]
 800d2bc:	60a5      	str	r5, [r4, #8]
 800d2be:	463e      	mov	r6, r7
 800d2c0:	42be      	cmp	r6, r7
 800d2c2:	d900      	bls.n	800d2c6 <__ssputs_r+0x86>
 800d2c4:	463e      	mov	r6, r7
 800d2c6:	6820      	ldr	r0, [r4, #0]
 800d2c8:	4632      	mov	r2, r6
 800d2ca:	4641      	mov	r1, r8
 800d2cc:	f000 faa8 	bl	800d820 <memmove>
 800d2d0:	68a3      	ldr	r3, [r4, #8]
 800d2d2:	1b9b      	subs	r3, r3, r6
 800d2d4:	60a3      	str	r3, [r4, #8]
 800d2d6:	6823      	ldr	r3, [r4, #0]
 800d2d8:	4433      	add	r3, r6
 800d2da:	6023      	str	r3, [r4, #0]
 800d2dc:	2000      	movs	r0, #0
 800d2de:	e7db      	b.n	800d298 <__ssputs_r+0x58>
 800d2e0:	462a      	mov	r2, r5
 800d2e2:	f000 fab7 	bl	800d854 <_realloc_r>
 800d2e6:	4606      	mov	r6, r0
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	d1e1      	bne.n	800d2b0 <__ssputs_r+0x70>
 800d2ec:	6921      	ldr	r1, [r4, #16]
 800d2ee:	4650      	mov	r0, sl
 800d2f0:	f7ff ff5a 	bl	800d1a8 <_free_r>
 800d2f4:	e7c7      	b.n	800d286 <__ssputs_r+0x46>
	...

0800d2f8 <_svfiprintf_r>:
 800d2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2fc:	4698      	mov	r8, r3
 800d2fe:	898b      	ldrh	r3, [r1, #12]
 800d300:	061b      	lsls	r3, r3, #24
 800d302:	b09d      	sub	sp, #116	; 0x74
 800d304:	4607      	mov	r7, r0
 800d306:	460d      	mov	r5, r1
 800d308:	4614      	mov	r4, r2
 800d30a:	d50e      	bpl.n	800d32a <_svfiprintf_r+0x32>
 800d30c:	690b      	ldr	r3, [r1, #16]
 800d30e:	b963      	cbnz	r3, 800d32a <_svfiprintf_r+0x32>
 800d310:	2140      	movs	r1, #64	; 0x40
 800d312:	f7ff fdff 	bl	800cf14 <_malloc_r>
 800d316:	6028      	str	r0, [r5, #0]
 800d318:	6128      	str	r0, [r5, #16]
 800d31a:	b920      	cbnz	r0, 800d326 <_svfiprintf_r+0x2e>
 800d31c:	230c      	movs	r3, #12
 800d31e:	603b      	str	r3, [r7, #0]
 800d320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d324:	e0d1      	b.n	800d4ca <_svfiprintf_r+0x1d2>
 800d326:	2340      	movs	r3, #64	; 0x40
 800d328:	616b      	str	r3, [r5, #20]
 800d32a:	2300      	movs	r3, #0
 800d32c:	9309      	str	r3, [sp, #36]	; 0x24
 800d32e:	2320      	movs	r3, #32
 800d330:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d334:	f8cd 800c 	str.w	r8, [sp, #12]
 800d338:	2330      	movs	r3, #48	; 0x30
 800d33a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d4e4 <_svfiprintf_r+0x1ec>
 800d33e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d342:	f04f 0901 	mov.w	r9, #1
 800d346:	4623      	mov	r3, r4
 800d348:	469a      	mov	sl, r3
 800d34a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d34e:	b10a      	cbz	r2, 800d354 <_svfiprintf_r+0x5c>
 800d350:	2a25      	cmp	r2, #37	; 0x25
 800d352:	d1f9      	bne.n	800d348 <_svfiprintf_r+0x50>
 800d354:	ebba 0b04 	subs.w	fp, sl, r4
 800d358:	d00b      	beq.n	800d372 <_svfiprintf_r+0x7a>
 800d35a:	465b      	mov	r3, fp
 800d35c:	4622      	mov	r2, r4
 800d35e:	4629      	mov	r1, r5
 800d360:	4638      	mov	r0, r7
 800d362:	f7ff ff6d 	bl	800d240 <__ssputs_r>
 800d366:	3001      	adds	r0, #1
 800d368:	f000 80aa 	beq.w	800d4c0 <_svfiprintf_r+0x1c8>
 800d36c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d36e:	445a      	add	r2, fp
 800d370:	9209      	str	r2, [sp, #36]	; 0x24
 800d372:	f89a 3000 	ldrb.w	r3, [sl]
 800d376:	2b00      	cmp	r3, #0
 800d378:	f000 80a2 	beq.w	800d4c0 <_svfiprintf_r+0x1c8>
 800d37c:	2300      	movs	r3, #0
 800d37e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d382:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d386:	f10a 0a01 	add.w	sl, sl, #1
 800d38a:	9304      	str	r3, [sp, #16]
 800d38c:	9307      	str	r3, [sp, #28]
 800d38e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d392:	931a      	str	r3, [sp, #104]	; 0x68
 800d394:	4654      	mov	r4, sl
 800d396:	2205      	movs	r2, #5
 800d398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d39c:	4851      	ldr	r0, [pc, #324]	; (800d4e4 <_svfiprintf_r+0x1ec>)
 800d39e:	f7f2 ff27 	bl	80001f0 <memchr>
 800d3a2:	9a04      	ldr	r2, [sp, #16]
 800d3a4:	b9d8      	cbnz	r0, 800d3de <_svfiprintf_r+0xe6>
 800d3a6:	06d0      	lsls	r0, r2, #27
 800d3a8:	bf44      	itt	mi
 800d3aa:	2320      	movmi	r3, #32
 800d3ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3b0:	0711      	lsls	r1, r2, #28
 800d3b2:	bf44      	itt	mi
 800d3b4:	232b      	movmi	r3, #43	; 0x2b
 800d3b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d3ba:	f89a 3000 	ldrb.w	r3, [sl]
 800d3be:	2b2a      	cmp	r3, #42	; 0x2a
 800d3c0:	d015      	beq.n	800d3ee <_svfiprintf_r+0xf6>
 800d3c2:	9a07      	ldr	r2, [sp, #28]
 800d3c4:	4654      	mov	r4, sl
 800d3c6:	2000      	movs	r0, #0
 800d3c8:	f04f 0c0a 	mov.w	ip, #10
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3d2:	3b30      	subs	r3, #48	; 0x30
 800d3d4:	2b09      	cmp	r3, #9
 800d3d6:	d94e      	bls.n	800d476 <_svfiprintf_r+0x17e>
 800d3d8:	b1b0      	cbz	r0, 800d408 <_svfiprintf_r+0x110>
 800d3da:	9207      	str	r2, [sp, #28]
 800d3dc:	e014      	b.n	800d408 <_svfiprintf_r+0x110>
 800d3de:	eba0 0308 	sub.w	r3, r0, r8
 800d3e2:	fa09 f303 	lsl.w	r3, r9, r3
 800d3e6:	4313      	orrs	r3, r2
 800d3e8:	9304      	str	r3, [sp, #16]
 800d3ea:	46a2      	mov	sl, r4
 800d3ec:	e7d2      	b.n	800d394 <_svfiprintf_r+0x9c>
 800d3ee:	9b03      	ldr	r3, [sp, #12]
 800d3f0:	1d19      	adds	r1, r3, #4
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	9103      	str	r1, [sp, #12]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	bfbb      	ittet	lt
 800d3fa:	425b      	neglt	r3, r3
 800d3fc:	f042 0202 	orrlt.w	r2, r2, #2
 800d400:	9307      	strge	r3, [sp, #28]
 800d402:	9307      	strlt	r3, [sp, #28]
 800d404:	bfb8      	it	lt
 800d406:	9204      	strlt	r2, [sp, #16]
 800d408:	7823      	ldrb	r3, [r4, #0]
 800d40a:	2b2e      	cmp	r3, #46	; 0x2e
 800d40c:	d10c      	bne.n	800d428 <_svfiprintf_r+0x130>
 800d40e:	7863      	ldrb	r3, [r4, #1]
 800d410:	2b2a      	cmp	r3, #42	; 0x2a
 800d412:	d135      	bne.n	800d480 <_svfiprintf_r+0x188>
 800d414:	9b03      	ldr	r3, [sp, #12]
 800d416:	1d1a      	adds	r2, r3, #4
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	9203      	str	r2, [sp, #12]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	bfb8      	it	lt
 800d420:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d424:	3402      	adds	r4, #2
 800d426:	9305      	str	r3, [sp, #20]
 800d428:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d4f4 <_svfiprintf_r+0x1fc>
 800d42c:	7821      	ldrb	r1, [r4, #0]
 800d42e:	2203      	movs	r2, #3
 800d430:	4650      	mov	r0, sl
 800d432:	f7f2 fedd 	bl	80001f0 <memchr>
 800d436:	b140      	cbz	r0, 800d44a <_svfiprintf_r+0x152>
 800d438:	2340      	movs	r3, #64	; 0x40
 800d43a:	eba0 000a 	sub.w	r0, r0, sl
 800d43e:	fa03 f000 	lsl.w	r0, r3, r0
 800d442:	9b04      	ldr	r3, [sp, #16]
 800d444:	4303      	orrs	r3, r0
 800d446:	3401      	adds	r4, #1
 800d448:	9304      	str	r3, [sp, #16]
 800d44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d44e:	4826      	ldr	r0, [pc, #152]	; (800d4e8 <_svfiprintf_r+0x1f0>)
 800d450:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d454:	2206      	movs	r2, #6
 800d456:	f7f2 fecb 	bl	80001f0 <memchr>
 800d45a:	2800      	cmp	r0, #0
 800d45c:	d038      	beq.n	800d4d0 <_svfiprintf_r+0x1d8>
 800d45e:	4b23      	ldr	r3, [pc, #140]	; (800d4ec <_svfiprintf_r+0x1f4>)
 800d460:	bb1b      	cbnz	r3, 800d4aa <_svfiprintf_r+0x1b2>
 800d462:	9b03      	ldr	r3, [sp, #12]
 800d464:	3307      	adds	r3, #7
 800d466:	f023 0307 	bic.w	r3, r3, #7
 800d46a:	3308      	adds	r3, #8
 800d46c:	9303      	str	r3, [sp, #12]
 800d46e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d470:	4433      	add	r3, r6
 800d472:	9309      	str	r3, [sp, #36]	; 0x24
 800d474:	e767      	b.n	800d346 <_svfiprintf_r+0x4e>
 800d476:	fb0c 3202 	mla	r2, ip, r2, r3
 800d47a:	460c      	mov	r4, r1
 800d47c:	2001      	movs	r0, #1
 800d47e:	e7a5      	b.n	800d3cc <_svfiprintf_r+0xd4>
 800d480:	2300      	movs	r3, #0
 800d482:	3401      	adds	r4, #1
 800d484:	9305      	str	r3, [sp, #20]
 800d486:	4619      	mov	r1, r3
 800d488:	f04f 0c0a 	mov.w	ip, #10
 800d48c:	4620      	mov	r0, r4
 800d48e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d492:	3a30      	subs	r2, #48	; 0x30
 800d494:	2a09      	cmp	r2, #9
 800d496:	d903      	bls.n	800d4a0 <_svfiprintf_r+0x1a8>
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d0c5      	beq.n	800d428 <_svfiprintf_r+0x130>
 800d49c:	9105      	str	r1, [sp, #20]
 800d49e:	e7c3      	b.n	800d428 <_svfiprintf_r+0x130>
 800d4a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e7f0      	b.n	800d48c <_svfiprintf_r+0x194>
 800d4aa:	ab03      	add	r3, sp, #12
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	462a      	mov	r2, r5
 800d4b0:	4b0f      	ldr	r3, [pc, #60]	; (800d4f0 <_svfiprintf_r+0x1f8>)
 800d4b2:	a904      	add	r1, sp, #16
 800d4b4:	4638      	mov	r0, r7
 800d4b6:	f3af 8000 	nop.w
 800d4ba:	1c42      	adds	r2, r0, #1
 800d4bc:	4606      	mov	r6, r0
 800d4be:	d1d6      	bne.n	800d46e <_svfiprintf_r+0x176>
 800d4c0:	89ab      	ldrh	r3, [r5, #12]
 800d4c2:	065b      	lsls	r3, r3, #25
 800d4c4:	f53f af2c 	bmi.w	800d320 <_svfiprintf_r+0x28>
 800d4c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4ca:	b01d      	add	sp, #116	; 0x74
 800d4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4d0:	ab03      	add	r3, sp, #12
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	462a      	mov	r2, r5
 800d4d6:	4b06      	ldr	r3, [pc, #24]	; (800d4f0 <_svfiprintf_r+0x1f8>)
 800d4d8:	a904      	add	r1, sp, #16
 800d4da:	4638      	mov	r0, r7
 800d4dc:	f000 f87a 	bl	800d5d4 <_printf_i>
 800d4e0:	e7eb      	b.n	800d4ba <_svfiprintf_r+0x1c2>
 800d4e2:	bf00      	nop
 800d4e4:	0800dbe8 	.word	0x0800dbe8
 800d4e8:	0800dbf2 	.word	0x0800dbf2
 800d4ec:	00000000 	.word	0x00000000
 800d4f0:	0800d241 	.word	0x0800d241
 800d4f4:	0800dbee 	.word	0x0800dbee

0800d4f8 <_printf_common>:
 800d4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4fc:	4616      	mov	r6, r2
 800d4fe:	4699      	mov	r9, r3
 800d500:	688a      	ldr	r2, [r1, #8]
 800d502:	690b      	ldr	r3, [r1, #16]
 800d504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d508:	4293      	cmp	r3, r2
 800d50a:	bfb8      	it	lt
 800d50c:	4613      	movlt	r3, r2
 800d50e:	6033      	str	r3, [r6, #0]
 800d510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d514:	4607      	mov	r7, r0
 800d516:	460c      	mov	r4, r1
 800d518:	b10a      	cbz	r2, 800d51e <_printf_common+0x26>
 800d51a:	3301      	adds	r3, #1
 800d51c:	6033      	str	r3, [r6, #0]
 800d51e:	6823      	ldr	r3, [r4, #0]
 800d520:	0699      	lsls	r1, r3, #26
 800d522:	bf42      	ittt	mi
 800d524:	6833      	ldrmi	r3, [r6, #0]
 800d526:	3302      	addmi	r3, #2
 800d528:	6033      	strmi	r3, [r6, #0]
 800d52a:	6825      	ldr	r5, [r4, #0]
 800d52c:	f015 0506 	ands.w	r5, r5, #6
 800d530:	d106      	bne.n	800d540 <_printf_common+0x48>
 800d532:	f104 0a19 	add.w	sl, r4, #25
 800d536:	68e3      	ldr	r3, [r4, #12]
 800d538:	6832      	ldr	r2, [r6, #0]
 800d53a:	1a9b      	subs	r3, r3, r2
 800d53c:	42ab      	cmp	r3, r5
 800d53e:	dc26      	bgt.n	800d58e <_printf_common+0x96>
 800d540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d544:	1e13      	subs	r3, r2, #0
 800d546:	6822      	ldr	r2, [r4, #0]
 800d548:	bf18      	it	ne
 800d54a:	2301      	movne	r3, #1
 800d54c:	0692      	lsls	r2, r2, #26
 800d54e:	d42b      	bmi.n	800d5a8 <_printf_common+0xb0>
 800d550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d554:	4649      	mov	r1, r9
 800d556:	4638      	mov	r0, r7
 800d558:	47c0      	blx	r8
 800d55a:	3001      	adds	r0, #1
 800d55c:	d01e      	beq.n	800d59c <_printf_common+0xa4>
 800d55e:	6823      	ldr	r3, [r4, #0]
 800d560:	68e5      	ldr	r5, [r4, #12]
 800d562:	6832      	ldr	r2, [r6, #0]
 800d564:	f003 0306 	and.w	r3, r3, #6
 800d568:	2b04      	cmp	r3, #4
 800d56a:	bf08      	it	eq
 800d56c:	1aad      	subeq	r5, r5, r2
 800d56e:	68a3      	ldr	r3, [r4, #8]
 800d570:	6922      	ldr	r2, [r4, #16]
 800d572:	bf0c      	ite	eq
 800d574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d578:	2500      	movne	r5, #0
 800d57a:	4293      	cmp	r3, r2
 800d57c:	bfc4      	itt	gt
 800d57e:	1a9b      	subgt	r3, r3, r2
 800d580:	18ed      	addgt	r5, r5, r3
 800d582:	2600      	movs	r6, #0
 800d584:	341a      	adds	r4, #26
 800d586:	42b5      	cmp	r5, r6
 800d588:	d11a      	bne.n	800d5c0 <_printf_common+0xc8>
 800d58a:	2000      	movs	r0, #0
 800d58c:	e008      	b.n	800d5a0 <_printf_common+0xa8>
 800d58e:	2301      	movs	r3, #1
 800d590:	4652      	mov	r2, sl
 800d592:	4649      	mov	r1, r9
 800d594:	4638      	mov	r0, r7
 800d596:	47c0      	blx	r8
 800d598:	3001      	adds	r0, #1
 800d59a:	d103      	bne.n	800d5a4 <_printf_common+0xac>
 800d59c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5a4:	3501      	adds	r5, #1
 800d5a6:	e7c6      	b.n	800d536 <_printf_common+0x3e>
 800d5a8:	18e1      	adds	r1, r4, r3
 800d5aa:	1c5a      	adds	r2, r3, #1
 800d5ac:	2030      	movs	r0, #48	; 0x30
 800d5ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d5b2:	4422      	add	r2, r4
 800d5b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5bc:	3302      	adds	r3, #2
 800d5be:	e7c7      	b.n	800d550 <_printf_common+0x58>
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	4622      	mov	r2, r4
 800d5c4:	4649      	mov	r1, r9
 800d5c6:	4638      	mov	r0, r7
 800d5c8:	47c0      	blx	r8
 800d5ca:	3001      	adds	r0, #1
 800d5cc:	d0e6      	beq.n	800d59c <_printf_common+0xa4>
 800d5ce:	3601      	adds	r6, #1
 800d5d0:	e7d9      	b.n	800d586 <_printf_common+0x8e>
	...

0800d5d4 <_printf_i>:
 800d5d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5d8:	7e0f      	ldrb	r7, [r1, #24]
 800d5da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d5dc:	2f78      	cmp	r7, #120	; 0x78
 800d5de:	4691      	mov	r9, r2
 800d5e0:	4680      	mov	r8, r0
 800d5e2:	460c      	mov	r4, r1
 800d5e4:	469a      	mov	sl, r3
 800d5e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d5ea:	d807      	bhi.n	800d5fc <_printf_i+0x28>
 800d5ec:	2f62      	cmp	r7, #98	; 0x62
 800d5ee:	d80a      	bhi.n	800d606 <_printf_i+0x32>
 800d5f0:	2f00      	cmp	r7, #0
 800d5f2:	f000 80d8 	beq.w	800d7a6 <_printf_i+0x1d2>
 800d5f6:	2f58      	cmp	r7, #88	; 0x58
 800d5f8:	f000 80a3 	beq.w	800d742 <_printf_i+0x16e>
 800d5fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d604:	e03a      	b.n	800d67c <_printf_i+0xa8>
 800d606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d60a:	2b15      	cmp	r3, #21
 800d60c:	d8f6      	bhi.n	800d5fc <_printf_i+0x28>
 800d60e:	a101      	add	r1, pc, #4	; (adr r1, 800d614 <_printf_i+0x40>)
 800d610:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d614:	0800d66d 	.word	0x0800d66d
 800d618:	0800d681 	.word	0x0800d681
 800d61c:	0800d5fd 	.word	0x0800d5fd
 800d620:	0800d5fd 	.word	0x0800d5fd
 800d624:	0800d5fd 	.word	0x0800d5fd
 800d628:	0800d5fd 	.word	0x0800d5fd
 800d62c:	0800d681 	.word	0x0800d681
 800d630:	0800d5fd 	.word	0x0800d5fd
 800d634:	0800d5fd 	.word	0x0800d5fd
 800d638:	0800d5fd 	.word	0x0800d5fd
 800d63c:	0800d5fd 	.word	0x0800d5fd
 800d640:	0800d78d 	.word	0x0800d78d
 800d644:	0800d6b1 	.word	0x0800d6b1
 800d648:	0800d76f 	.word	0x0800d76f
 800d64c:	0800d5fd 	.word	0x0800d5fd
 800d650:	0800d5fd 	.word	0x0800d5fd
 800d654:	0800d7af 	.word	0x0800d7af
 800d658:	0800d5fd 	.word	0x0800d5fd
 800d65c:	0800d6b1 	.word	0x0800d6b1
 800d660:	0800d5fd 	.word	0x0800d5fd
 800d664:	0800d5fd 	.word	0x0800d5fd
 800d668:	0800d777 	.word	0x0800d777
 800d66c:	682b      	ldr	r3, [r5, #0]
 800d66e:	1d1a      	adds	r2, r3, #4
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	602a      	str	r2, [r5, #0]
 800d674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d67c:	2301      	movs	r3, #1
 800d67e:	e0a3      	b.n	800d7c8 <_printf_i+0x1f4>
 800d680:	6820      	ldr	r0, [r4, #0]
 800d682:	6829      	ldr	r1, [r5, #0]
 800d684:	0606      	lsls	r6, r0, #24
 800d686:	f101 0304 	add.w	r3, r1, #4
 800d68a:	d50a      	bpl.n	800d6a2 <_printf_i+0xce>
 800d68c:	680e      	ldr	r6, [r1, #0]
 800d68e:	602b      	str	r3, [r5, #0]
 800d690:	2e00      	cmp	r6, #0
 800d692:	da03      	bge.n	800d69c <_printf_i+0xc8>
 800d694:	232d      	movs	r3, #45	; 0x2d
 800d696:	4276      	negs	r6, r6
 800d698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d69c:	485e      	ldr	r0, [pc, #376]	; (800d818 <_printf_i+0x244>)
 800d69e:	230a      	movs	r3, #10
 800d6a0:	e019      	b.n	800d6d6 <_printf_i+0x102>
 800d6a2:	680e      	ldr	r6, [r1, #0]
 800d6a4:	602b      	str	r3, [r5, #0]
 800d6a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d6aa:	bf18      	it	ne
 800d6ac:	b236      	sxthne	r6, r6
 800d6ae:	e7ef      	b.n	800d690 <_printf_i+0xbc>
 800d6b0:	682b      	ldr	r3, [r5, #0]
 800d6b2:	6820      	ldr	r0, [r4, #0]
 800d6b4:	1d19      	adds	r1, r3, #4
 800d6b6:	6029      	str	r1, [r5, #0]
 800d6b8:	0601      	lsls	r1, r0, #24
 800d6ba:	d501      	bpl.n	800d6c0 <_printf_i+0xec>
 800d6bc:	681e      	ldr	r6, [r3, #0]
 800d6be:	e002      	b.n	800d6c6 <_printf_i+0xf2>
 800d6c0:	0646      	lsls	r6, r0, #25
 800d6c2:	d5fb      	bpl.n	800d6bc <_printf_i+0xe8>
 800d6c4:	881e      	ldrh	r6, [r3, #0]
 800d6c6:	4854      	ldr	r0, [pc, #336]	; (800d818 <_printf_i+0x244>)
 800d6c8:	2f6f      	cmp	r7, #111	; 0x6f
 800d6ca:	bf0c      	ite	eq
 800d6cc:	2308      	moveq	r3, #8
 800d6ce:	230a      	movne	r3, #10
 800d6d0:	2100      	movs	r1, #0
 800d6d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6d6:	6865      	ldr	r5, [r4, #4]
 800d6d8:	60a5      	str	r5, [r4, #8]
 800d6da:	2d00      	cmp	r5, #0
 800d6dc:	bfa2      	ittt	ge
 800d6de:	6821      	ldrge	r1, [r4, #0]
 800d6e0:	f021 0104 	bicge.w	r1, r1, #4
 800d6e4:	6021      	strge	r1, [r4, #0]
 800d6e6:	b90e      	cbnz	r6, 800d6ec <_printf_i+0x118>
 800d6e8:	2d00      	cmp	r5, #0
 800d6ea:	d04d      	beq.n	800d788 <_printf_i+0x1b4>
 800d6ec:	4615      	mov	r5, r2
 800d6ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800d6f2:	fb03 6711 	mls	r7, r3, r1, r6
 800d6f6:	5dc7      	ldrb	r7, [r0, r7]
 800d6f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d6fc:	4637      	mov	r7, r6
 800d6fe:	42bb      	cmp	r3, r7
 800d700:	460e      	mov	r6, r1
 800d702:	d9f4      	bls.n	800d6ee <_printf_i+0x11a>
 800d704:	2b08      	cmp	r3, #8
 800d706:	d10b      	bne.n	800d720 <_printf_i+0x14c>
 800d708:	6823      	ldr	r3, [r4, #0]
 800d70a:	07de      	lsls	r6, r3, #31
 800d70c:	d508      	bpl.n	800d720 <_printf_i+0x14c>
 800d70e:	6923      	ldr	r3, [r4, #16]
 800d710:	6861      	ldr	r1, [r4, #4]
 800d712:	4299      	cmp	r1, r3
 800d714:	bfde      	ittt	le
 800d716:	2330      	movle	r3, #48	; 0x30
 800d718:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d71c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d720:	1b52      	subs	r2, r2, r5
 800d722:	6122      	str	r2, [r4, #16]
 800d724:	f8cd a000 	str.w	sl, [sp]
 800d728:	464b      	mov	r3, r9
 800d72a:	aa03      	add	r2, sp, #12
 800d72c:	4621      	mov	r1, r4
 800d72e:	4640      	mov	r0, r8
 800d730:	f7ff fee2 	bl	800d4f8 <_printf_common>
 800d734:	3001      	adds	r0, #1
 800d736:	d14c      	bne.n	800d7d2 <_printf_i+0x1fe>
 800d738:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d73c:	b004      	add	sp, #16
 800d73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d742:	4835      	ldr	r0, [pc, #212]	; (800d818 <_printf_i+0x244>)
 800d744:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d748:	6829      	ldr	r1, [r5, #0]
 800d74a:	6823      	ldr	r3, [r4, #0]
 800d74c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d750:	6029      	str	r1, [r5, #0]
 800d752:	061d      	lsls	r5, r3, #24
 800d754:	d514      	bpl.n	800d780 <_printf_i+0x1ac>
 800d756:	07df      	lsls	r7, r3, #31
 800d758:	bf44      	itt	mi
 800d75a:	f043 0320 	orrmi.w	r3, r3, #32
 800d75e:	6023      	strmi	r3, [r4, #0]
 800d760:	b91e      	cbnz	r6, 800d76a <_printf_i+0x196>
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	f023 0320 	bic.w	r3, r3, #32
 800d768:	6023      	str	r3, [r4, #0]
 800d76a:	2310      	movs	r3, #16
 800d76c:	e7b0      	b.n	800d6d0 <_printf_i+0xfc>
 800d76e:	6823      	ldr	r3, [r4, #0]
 800d770:	f043 0320 	orr.w	r3, r3, #32
 800d774:	6023      	str	r3, [r4, #0]
 800d776:	2378      	movs	r3, #120	; 0x78
 800d778:	4828      	ldr	r0, [pc, #160]	; (800d81c <_printf_i+0x248>)
 800d77a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d77e:	e7e3      	b.n	800d748 <_printf_i+0x174>
 800d780:	0659      	lsls	r1, r3, #25
 800d782:	bf48      	it	mi
 800d784:	b2b6      	uxthmi	r6, r6
 800d786:	e7e6      	b.n	800d756 <_printf_i+0x182>
 800d788:	4615      	mov	r5, r2
 800d78a:	e7bb      	b.n	800d704 <_printf_i+0x130>
 800d78c:	682b      	ldr	r3, [r5, #0]
 800d78e:	6826      	ldr	r6, [r4, #0]
 800d790:	6961      	ldr	r1, [r4, #20]
 800d792:	1d18      	adds	r0, r3, #4
 800d794:	6028      	str	r0, [r5, #0]
 800d796:	0635      	lsls	r5, r6, #24
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	d501      	bpl.n	800d7a0 <_printf_i+0x1cc>
 800d79c:	6019      	str	r1, [r3, #0]
 800d79e:	e002      	b.n	800d7a6 <_printf_i+0x1d2>
 800d7a0:	0670      	lsls	r0, r6, #25
 800d7a2:	d5fb      	bpl.n	800d79c <_printf_i+0x1c8>
 800d7a4:	8019      	strh	r1, [r3, #0]
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	6123      	str	r3, [r4, #16]
 800d7aa:	4615      	mov	r5, r2
 800d7ac:	e7ba      	b.n	800d724 <_printf_i+0x150>
 800d7ae:	682b      	ldr	r3, [r5, #0]
 800d7b0:	1d1a      	adds	r2, r3, #4
 800d7b2:	602a      	str	r2, [r5, #0]
 800d7b4:	681d      	ldr	r5, [r3, #0]
 800d7b6:	6862      	ldr	r2, [r4, #4]
 800d7b8:	2100      	movs	r1, #0
 800d7ba:	4628      	mov	r0, r5
 800d7bc:	f7f2 fd18 	bl	80001f0 <memchr>
 800d7c0:	b108      	cbz	r0, 800d7c6 <_printf_i+0x1f2>
 800d7c2:	1b40      	subs	r0, r0, r5
 800d7c4:	6060      	str	r0, [r4, #4]
 800d7c6:	6863      	ldr	r3, [r4, #4]
 800d7c8:	6123      	str	r3, [r4, #16]
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7d0:	e7a8      	b.n	800d724 <_printf_i+0x150>
 800d7d2:	6923      	ldr	r3, [r4, #16]
 800d7d4:	462a      	mov	r2, r5
 800d7d6:	4649      	mov	r1, r9
 800d7d8:	4640      	mov	r0, r8
 800d7da:	47d0      	blx	sl
 800d7dc:	3001      	adds	r0, #1
 800d7de:	d0ab      	beq.n	800d738 <_printf_i+0x164>
 800d7e0:	6823      	ldr	r3, [r4, #0]
 800d7e2:	079b      	lsls	r3, r3, #30
 800d7e4:	d413      	bmi.n	800d80e <_printf_i+0x23a>
 800d7e6:	68e0      	ldr	r0, [r4, #12]
 800d7e8:	9b03      	ldr	r3, [sp, #12]
 800d7ea:	4298      	cmp	r0, r3
 800d7ec:	bfb8      	it	lt
 800d7ee:	4618      	movlt	r0, r3
 800d7f0:	e7a4      	b.n	800d73c <_printf_i+0x168>
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	4632      	mov	r2, r6
 800d7f6:	4649      	mov	r1, r9
 800d7f8:	4640      	mov	r0, r8
 800d7fa:	47d0      	blx	sl
 800d7fc:	3001      	adds	r0, #1
 800d7fe:	d09b      	beq.n	800d738 <_printf_i+0x164>
 800d800:	3501      	adds	r5, #1
 800d802:	68e3      	ldr	r3, [r4, #12]
 800d804:	9903      	ldr	r1, [sp, #12]
 800d806:	1a5b      	subs	r3, r3, r1
 800d808:	42ab      	cmp	r3, r5
 800d80a:	dcf2      	bgt.n	800d7f2 <_printf_i+0x21e>
 800d80c:	e7eb      	b.n	800d7e6 <_printf_i+0x212>
 800d80e:	2500      	movs	r5, #0
 800d810:	f104 0619 	add.w	r6, r4, #25
 800d814:	e7f5      	b.n	800d802 <_printf_i+0x22e>
 800d816:	bf00      	nop
 800d818:	0800dbf9 	.word	0x0800dbf9
 800d81c:	0800dc0a 	.word	0x0800dc0a

0800d820 <memmove>:
 800d820:	4288      	cmp	r0, r1
 800d822:	b510      	push	{r4, lr}
 800d824:	eb01 0402 	add.w	r4, r1, r2
 800d828:	d902      	bls.n	800d830 <memmove+0x10>
 800d82a:	4284      	cmp	r4, r0
 800d82c:	4623      	mov	r3, r4
 800d82e:	d807      	bhi.n	800d840 <memmove+0x20>
 800d830:	1e43      	subs	r3, r0, #1
 800d832:	42a1      	cmp	r1, r4
 800d834:	d008      	beq.n	800d848 <memmove+0x28>
 800d836:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d83a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d83e:	e7f8      	b.n	800d832 <memmove+0x12>
 800d840:	4402      	add	r2, r0
 800d842:	4601      	mov	r1, r0
 800d844:	428a      	cmp	r2, r1
 800d846:	d100      	bne.n	800d84a <memmove+0x2a>
 800d848:	bd10      	pop	{r4, pc}
 800d84a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d84e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d852:	e7f7      	b.n	800d844 <memmove+0x24>

0800d854 <_realloc_r>:
 800d854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d858:	4680      	mov	r8, r0
 800d85a:	4614      	mov	r4, r2
 800d85c:	460e      	mov	r6, r1
 800d85e:	b921      	cbnz	r1, 800d86a <_realloc_r+0x16>
 800d860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d864:	4611      	mov	r1, r2
 800d866:	f7ff bb55 	b.w	800cf14 <_malloc_r>
 800d86a:	b92a      	cbnz	r2, 800d878 <_realloc_r+0x24>
 800d86c:	f7ff fc9c 	bl	800d1a8 <_free_r>
 800d870:	4625      	mov	r5, r4
 800d872:	4628      	mov	r0, r5
 800d874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d878:	f000 f81b 	bl	800d8b2 <_malloc_usable_size_r>
 800d87c:	4284      	cmp	r4, r0
 800d87e:	4607      	mov	r7, r0
 800d880:	d802      	bhi.n	800d888 <_realloc_r+0x34>
 800d882:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d886:	d812      	bhi.n	800d8ae <_realloc_r+0x5a>
 800d888:	4621      	mov	r1, r4
 800d88a:	4640      	mov	r0, r8
 800d88c:	f7ff fb42 	bl	800cf14 <_malloc_r>
 800d890:	4605      	mov	r5, r0
 800d892:	2800      	cmp	r0, #0
 800d894:	d0ed      	beq.n	800d872 <_realloc_r+0x1e>
 800d896:	42bc      	cmp	r4, r7
 800d898:	4622      	mov	r2, r4
 800d89a:	4631      	mov	r1, r6
 800d89c:	bf28      	it	cs
 800d89e:	463a      	movcs	r2, r7
 800d8a0:	f7ff fb02 	bl	800cea8 <memcpy>
 800d8a4:	4631      	mov	r1, r6
 800d8a6:	4640      	mov	r0, r8
 800d8a8:	f7ff fc7e 	bl	800d1a8 <_free_r>
 800d8ac:	e7e1      	b.n	800d872 <_realloc_r+0x1e>
 800d8ae:	4635      	mov	r5, r6
 800d8b0:	e7df      	b.n	800d872 <_realloc_r+0x1e>

0800d8b2 <_malloc_usable_size_r>:
 800d8b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8b6:	1f18      	subs	r0, r3, #4
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	bfbc      	itt	lt
 800d8bc:	580b      	ldrlt	r3, [r1, r0]
 800d8be:	18c0      	addlt	r0, r0, r3
 800d8c0:	4770      	bx	lr
	...

0800d8c4 <_init>:
 800d8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8c6:	bf00      	nop
 800d8c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8ca:	bc08      	pop	{r3}
 800d8cc:	469e      	mov	lr, r3
 800d8ce:	4770      	bx	lr

0800d8d0 <_fini>:
 800d8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8d2:	bf00      	nop
 800d8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8d6:	bc08      	pop	{r3}
 800d8d8:	469e      	mov	lr, r3
 800d8da:	4770      	bx	lr
