
testertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a830  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800a9d0  0800a9d0  0001a9d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab14  0800ab14  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab14  0800ab14  0001ab14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab1c  0800ab1c  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab1c  0800ab1c  0001ab1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab20  0800ab20  0001ab20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800ab24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000abc8  20000164  0800ac88  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ad2c  0800ac88  0002ad2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b017  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000434a  00000000  00000000  0003b1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0003f4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  00040948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006247  00000000  00000000  00041be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017bf5  00000000  00000000  00047e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009271d  00000000  00000000  0005fa1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2139  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000564c  00000000  00000000  000f218c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a9b8 	.word	0x0800a9b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	0800a9b8 	.word	0x0800a9b8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <task_led>:
	int timeout;
}led_t;

led_t green_led;

void task_led(void *param){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *)param;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(led->port,led->pin);
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	889b      	ldrh	r3, [r3, #4]
 8000508:	4619      	mov	r1, r3
 800050a:	4610      	mov	r0, r2
 800050c:	f000 fd63 	bl	8000fd6 <HAL_GPIO_TogglePin>
		vTaskDelay(led->timeout);
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	689b      	ldr	r3, [r3, #8]
 8000514:	4618      	mov	r0, r3
 8000516:	f007 fc55 	bl	8007dc4 <vTaskDelay>
		HAL_GPIO_TogglePin(led->port,led->pin);
 800051a:	e7f1      	b.n	8000500 <task_led+0xc>

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f000 fa13 	bl	800094c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f833 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 f89d 	bl	8000668 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052e:	f006 f863 	bl	80065f8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000532:	4a10      	ldr	r2, [pc, #64]	; (8000574 <main+0x58>)
 8000534:	2100      	movs	r1, #0
 8000536:	4810      	ldr	r0, [pc, #64]	; (8000578 <main+0x5c>)
 8000538:	f006 f8a8 	bl	800668c <osThreadNew>
 800053c:	4603      	mov	r3, r0
 800053e:	4a0f      	ldr	r2, [pc, #60]	; (800057c <main+0x60>)
 8000540:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  green_led.timeout = 500;
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <main+0x64>)
 8000544:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000548:	609a      	str	r2, [r3, #8]
  green_led.port = LED_GPIO_Port;
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <main+0x64>)
 800054c:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <main+0x68>)
 800054e:	601a      	str	r2, [r3, #0]
  green_led.pin = LED_Pin;
 8000550:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <main+0x64>)
 8000552:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000556:	809a      	strh	r2, [r3, #4]
  xTaskCreate(task_led,"Tarefa Led",256, &green_led, 1, NULL);
 8000558:	2300      	movs	r3, #0
 800055a:	9301      	str	r3, [sp, #4]
 800055c:	2301      	movs	r3, #1
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <main+0x64>)
 8000562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000566:	4908      	ldr	r1, [pc, #32]	; (8000588 <main+0x6c>)
 8000568:	4808      	ldr	r0, [pc, #32]	; (800058c <main+0x70>)
 800056a:	f007 facf 	bl	8007b0c <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800056e:	f006 f867 	bl	8006640 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000572:	e7fe      	b.n	8000572 <main+0x56>
 8000574:	0800aa80 	.word	0x0800aa80
 8000578:	0800070d 	.word	0x0800070d
 800057c:	20000180 	.word	0x20000180
 8000580:	20000184 	.word	0x20000184
 8000584:	40020800 	.word	0x40020800
 8000588:	0800a9f0 	.word	0x0800a9f0
 800058c:	080004f5 	.word	0x080004f5

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f00a f940 	bl	800a824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b29      	ldr	r3, [pc, #164]	; (8000660 <SystemClock_Config+0xd0>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a28      	ldr	r2, [pc, #160]	; (8000660 <SystemClock_Config+0xd0>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b26      	ldr	r3, [pc, #152]	; (8000660 <SystemClock_Config+0xd0>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <SystemClock_Config+0xd4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <SystemClock_Config+0xd4>)
 80005de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <SystemClock_Config+0xd4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000604:	2319      	movs	r3, #25
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000608:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800060c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060e:	2304      	movs	r3, #4
 8000610:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000612:	2307      	movs	r3, #7
 8000614:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	4618      	mov	r0, r3
 800061c:	f001 ff72 	bl	8002504 <HAL_RCC_OscConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000626:	f000 f8f5 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2102      	movs	r1, #2
 8000646:	4618      	mov	r0, r3
 8000648:	f002 f9d4 	bl	80029f4 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000652:	f000 f8df 	bl	8000814 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b20      	ldr	r3, [pc, #128]	; (8000704 <MX_GPIO_Init+0x9c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a1f      	ldr	r2, [pc, #124]	; (8000704 <MX_GPIO_Init+0x9c>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b1d      	ldr	r3, [pc, #116]	; (8000704 <MX_GPIO_Init+0x9c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <MX_GPIO_Init+0x9c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a18      	ldr	r2, [pc, #96]	; (8000704 <MX_GPIO_Init+0x9c>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <MX_GPIO_Init+0x9c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_GPIO_Init+0x9c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a11      	ldr	r2, [pc, #68]	; (8000704 <MX_GPIO_Init+0x9c>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_GPIO_Init+0x9c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	480b      	ldr	r0, [pc, #44]	; (8000708 <MX_GPIO_Init+0xa0>)
 80006da:	f000 fc63 	bl	8000fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	4619      	mov	r1, r3
 80006f6:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_GPIO_Init+0xa0>)
 80006f8:	f000 fad0 	bl	8000c9c <HAL_GPIO_Init>

}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40023800 	.word	0x40023800
 8000708:	40020800 	.word	0x40020800

0800070c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08e      	sub	sp, #56	; 0x38
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000714:	f009 faa2 	bl	8009c5c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 8000718:	f009 fad0 	bl	8009cbc <init_usb_rtos_obj>
  /* Infinite loop */
  uint8_t cRxedChar, buffer[32], cInputIndex = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  BaseType_t xMoreDataToFollow = pdFALSE;
 8000722:	2300      	movs	r3, #0
 8000724:	633b      	str	r3, [r7, #48]	; 0x30
	   * Inicio para Controle de entrada USB de informacoes
	   */

		 /* This implementation reads a single character at a time.  Wait in the
		 Blocked state until a character is received. */
		(void)read_usb_cdc((char *) buffer, 32, portMAX_DELAY);
 8000726:	f107 030c 	add.w	r3, r7, #12
 800072a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800072e:	2120      	movs	r1, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f009 fae9 	bl	8009d08 <read_usb_cdc>
		cRxedChar = buffer[0];
 8000736:	7b3b      	ldrb	r3, [r7, #12]
 8000738:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		 if( cRxedChar == '\r' )
 800073c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000740:	2b0d      	cmp	r3, #13
 8000742:	d11c      	bne.n	800077e <StartDefaultTask+0x72>
		 {
			 /* A newline character was received, so the input command string is
			 complete and can be processed.  Transmit a line separator, just to
			 make the output easier to read. */
			 CDC_Transmit_FS((uint8_t*)"\n\r", 2);
 8000744:	2102      	movs	r1, #2
 8000746:	482e      	ldr	r0, [pc, #184]	; (8000800 <StartDefaultTask+0xf4>)
 8000748:	f009 fba6 	bl	8009e98 <CDC_Transmit_FS>
			 exaplanation of why this is. */
			 do
			 {
				 /* Write the output generated by the command interpreter to the
				 console. */
				 CDC_Transmit_FS((uint8_t*) pcOutputString,(uint16_t ) strlen( (const char *) pcOutputString ) );
 800074c:	482d      	ldr	r0, [pc, #180]	; (8000804 <StartDefaultTask+0xf8>)
 800074e:	f7ff fd47 	bl	80001e0 <strlen>
 8000752:	4603      	mov	r3, r0
 8000754:	b29b      	uxth	r3, r3
 8000756:	4619      	mov	r1, r3
 8000758:	482a      	ldr	r0, [pc, #168]	; (8000804 <StartDefaultTask+0xf8>)
 800075a:	f009 fb9d 	bl	8009e98 <CDC_Transmit_FS>

			 } while( xMoreDataToFollow != pdFALSE );
 800075e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000760:	2b00      	cmp	r3, #0
 8000762:	d1f3      	bne.n	800074c <StartDefaultTask+0x40>

			 /* All the strings generated by the input command have been sent.
			 Processing of the command is complete.  Clear the input string ready
			 to receive the next command. */
			 cInputIndex = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			 memset( pcInputString, 0x00, MAX_INPUT_LENGTH );
 800076a:	2240      	movs	r2, #64	; 0x40
 800076c:	2100      	movs	r1, #0
 800076e:	4826      	ldr	r0, [pc, #152]	; (8000808 <StartDefaultTask+0xfc>)
 8000770:	f00a f858 	bl	800a824 <memset>
			 CDC_Transmit_FS((uint8_t*) ">>", 2);
 8000774:	2102      	movs	r1, #2
 8000776:	4825      	ldr	r0, [pc, #148]	; (800080c <StartDefaultTask+0x100>)
 8000778:	f009 fb8e 	bl	8009e98 <CDC_Transmit_FS>
 800077c:	e7d3      	b.n	8000726 <StartDefaultTask+0x1a>
		 {
			 /* The if() clause performs the processing after a newline character
			 is received.  This else clause performs the processing if any other
			 character is received. */

			 if( cRxedChar == '\n' )
 800077e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000782:	2b0a      	cmp	r3, #10
 8000784:	d0cf      	beq.n	8000726 <StartDefaultTask+0x1a>
			 {
				 /* Ignore carriage returns. */
			 }
			 else if( cRxedChar == 0x7F )
 8000786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800078a:	2b7f      	cmp	r3, #127	; 0x7f
 800078c:	d114      	bne.n	80007b8 <StartDefaultTask+0xac>
			 {
				 /* Backspace was pressed.  Erase the last character in the input
				 buffer - if there are any. */
				 if( cInputIndex > 0 )
 800078e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0c7      	beq.n	8000726 <StartDefaultTask+0x1a>
				 {
					 CDC_Transmit_FS( &cRxedChar, 1);
 8000796:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f009 fb7b 	bl	8009e98 <CDC_Transmit_FS>
					 cInputIndex--;
 80007a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007a6:	3b01      	subs	r3, #1
 80007a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					 pcInputString[ cInputIndex ] = '\0';
 80007ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007b0:	4a15      	ldr	r2, [pc, #84]	; (8000808 <StartDefaultTask+0xfc>)
 80007b2:	2100      	movs	r1, #0
 80007b4:	54d1      	strb	r1, [r2, r3]
 80007b6:	e7b6      	b.n	8000726 <StartDefaultTask+0x1a>
				 }
			 }
			 else if( cRxedChar == '\0' )
 80007b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d104      	bne.n	80007ca <StartDefaultTask+0xbe>
			 {
				 CDC_Transmit_FS((uint8_t*) "Welcome to FreeRTOS\n\r\n\r>>", strlen("Welcome to FreeRTOS\n\r\n\r>>"));
 80007c0:	2119      	movs	r1, #25
 80007c2:	4813      	ldr	r0, [pc, #76]	; (8000810 <StartDefaultTask+0x104>)
 80007c4:	f009 fb68 	bl	8009e98 <CDC_Transmit_FS>
 80007c8:	e7ad      	b.n	8000726 <StartDefaultTask+0x1a>
			 }
			 else if( cRxedChar == '\e' )
 80007ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007ce:	2b1b      	cmp	r3, #27
 80007d0:	d0a9      	beq.n	8000726 <StartDefaultTask+0x1a>
			 {
				 /* A character was entered.  It was not a new line, backspace
				 or carriage return, so it is accepted as part of the input and
				 placed into the input buffer.  When a n is entered the complete
				 string will be passed to the command interpreter. */
				 if( cInputIndex < MAX_INPUT_LENGTH )
 80007d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007d6:	2b3f      	cmp	r3, #63	; 0x3f
 80007d8:	d8a5      	bhi.n	8000726 <StartDefaultTask+0x1a>
				 {
					 CDC_Transmit_FS( &cRxedChar, 1);
 80007da:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80007de:	2101      	movs	r1, #1
 80007e0:	4618      	mov	r0, r3
 80007e2:	f009 fb59 	bl	8009e98 <CDC_Transmit_FS>
					 pcInputString[ cInputIndex ] = cRxedChar;
 80007e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007ea:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 80007ee:	4a06      	ldr	r2, [pc, #24]	; (8000808 <StartDefaultTask+0xfc>)
 80007f0:	54d1      	strb	r1, [r2, r3]
					 cInputIndex++;
 80007f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80007f6:	3301      	adds	r3, #1
 80007f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		(void)read_usb_cdc((char *) buffer, 32, portMAX_DELAY);
 80007fc:	e793      	b.n	8000726 <StartDefaultTask+0x1a>
 80007fe:	bf00      	nop
 8000800:	0800a9fc 	.word	0x0800a9fc
 8000804:	20000190 	.word	0x20000190
 8000808:	20000290 	.word	0x20000290
 800080c:	0800aa00 	.word	0x0800aa00
 8000810:	0800aa04 	.word	0x0800aa04

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b12      	ldr	r3, [pc, #72]	; (8000874 <HAL_MspInit+0x54>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	4a11      	ldr	r2, [pc, #68]	; (8000874 <HAL_MspInit+0x54>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000834:	6453      	str	r3, [r2, #68]	; 0x44
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_MspInit+0x54>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_MspInit+0x54>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <HAL_MspInit+0x54>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_MspInit+0x54>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	210f      	movs	r1, #15
 8000862:	f06f 0001 	mvn.w	r0, #1
 8000866:	f000 f9e2 	bl	8000c2e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800087c:	e7fe      	b.n	800087c <NMI_Handler+0x4>

0800087e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <HardFault_Handler+0x4>

08000884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <MemManage_Handler+0x4>

0800088a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <UsageFault_Handler+0x4>

08000896 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089a:	bf00      	nop
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a8:	f000 f8a2 	bl	80009f0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008ac:	f007 ff2a 	bl	8008704 <xTaskGetSchedulerState>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d001      	beq.n	80008ba <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008b6:	f008 ff57 	bl	8009768 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008c4:	4802      	ldr	r0, [pc, #8]	; (80008d0 <OTG_FS_IRQHandler+0x10>)
 80008c6:	f000 fcf0 	bl	80012aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000a5f8 	.word	0x2000a5f8

080008d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <SystemInit+0x20>)
 80008da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008de:	4a05      	ldr	r2, [pc, #20]	; (80008f4 <SystemInit+0x20>)
 80008e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000930 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008fc:	480d      	ldr	r0, [pc, #52]	; (8000934 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008fe:	490e      	ldr	r1, [pc, #56]	; (8000938 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0b      	ldr	r2, [pc, #44]	; (8000940 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000914:	4c0b      	ldr	r4, [pc, #44]	; (8000944 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000922:	f7ff ffd7 	bl	80008d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000926:	f009 ff49 	bl	800a7bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800092a:	f7ff fdf7 	bl	800051c <main>
  bx  lr    
 800092e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000930:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 800093c:	0800ab24 	.word	0x0800ab24
  ldr r2, =_sbss
 8000940:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000944:	2000ad2c 	.word	0x2000ad2c

08000948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC_IRQHandler>
	...

0800094c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <HAL_Init+0x40>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <HAL_Init+0x40>)
 8000956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800095a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800095c:	4b0b      	ldr	r3, [pc, #44]	; (800098c <HAL_Init+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a0a      	ldr	r2, [pc, #40]	; (800098c <HAL_Init+0x40>)
 8000962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_Init+0x40>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <HAL_Init+0x40>)
 800096e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000974:	2003      	movs	r0, #3
 8000976:	f000 f94f 	bl	8000c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097a:	200f      	movs	r0, #15
 800097c:	f000 f808 	bl	8000990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000980:	f7ff ff4e 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000984:	2300      	movs	r3, #0
}
 8000986:	4618      	mov	r0, r3
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023c00 	.word	0x40023c00

08000990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x54>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_InitTick+0x58>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f967 	bl	8000c82 <HAL_SYSTICK_Config>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e00e      	b.n	80009dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d80a      	bhi.n	80009da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c4:	2200      	movs	r2, #0
 80009c6:	6879      	ldr	r1, [r7, #4]
 80009c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009cc:	f000 f92f 	bl	8000c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d0:	4a06      	ldr	r2, [pc, #24]	; (80009ec <HAL_InitTick+0x5c>)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d6:	2300      	movs	r3, #0
 80009d8:	e000      	b.n	80009dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000004 	.word	0x20000004

080009f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x20>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_IncTick+0x24>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <HAL_IncTick+0x24>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008
 8000a14:	200002d0 	.word	0x200002d0

08000a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200002d0 	.word	0x200002d0

08000a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a38:	f7ff ffee 	bl	8000a18 <HAL_GetTick>
 8000a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a48:	d005      	beq.n	8000a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a4a:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <HAL_Delay+0x44>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4413      	add	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a56:	bf00      	nop
 8000a58:	f7ff ffde 	bl	8000a18 <HAL_GetTick>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	68bb      	ldr	r3, [r7, #8]
 8000a60:	1ad3      	subs	r3, r2, r3
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d8f7      	bhi.n	8000a58 <HAL_Delay+0x28>
  {
  }
}
 8000a68:	bf00      	nop
 8000a6a:	bf00      	nop
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db0b      	blt.n	8000b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 021f 	and.w	r2, r3, #31
 8000af4:	4907      	ldr	r1, [pc, #28]	; (8000b14 <__NVIC_EnableIRQ+0x38>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	2001      	movs	r0, #1
 8000afe:	fa00 f202 	lsl.w	r2, r0, r2
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	e000e100 	.word	0xe000e100

08000b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	6039      	str	r1, [r7, #0]
 8000b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	db0a      	blt.n	8000b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	490c      	ldr	r1, [pc, #48]	; (8000b64 <__NVIC_SetPriority+0x4c>)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	0112      	lsls	r2, r2, #4
 8000b38:	b2d2      	uxtb	r2, r2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b40:	e00a      	b.n	8000b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4908      	ldr	r1, [pc, #32]	; (8000b68 <__NVIC_SetPriority+0x50>)
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	3b04      	subs	r3, #4
 8000b50:	0112      	lsls	r2, r2, #4
 8000b52:	b2d2      	uxtb	r2, r2
 8000b54:	440b      	add	r3, r1
 8000b56:	761a      	strb	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000e100 	.word	0xe000e100
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b089      	sub	sp, #36	; 0x24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f003 0307 	and.w	r3, r3, #7
 8000b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	f1c3 0307 	rsb	r3, r3, #7
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	bf28      	it	cs
 8000b8a:	2304      	movcs	r3, #4
 8000b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3304      	adds	r3, #4
 8000b92:	2b06      	cmp	r3, #6
 8000b94:	d902      	bls.n	8000b9c <NVIC_EncodePriority+0x30>
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	3b03      	subs	r3, #3
 8000b9a:	e000      	b.n	8000b9e <NVIC_EncodePriority+0x32>
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8000baa:	43da      	mvns	r2, r3
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	401a      	ands	r2, r3
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbe:	43d9      	mvns	r1, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	4313      	orrs	r3, r2
         );
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3724      	adds	r7, #36	; 0x24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be4:	d301      	bcc.n	8000bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be6:	2301      	movs	r3, #1
 8000be8:	e00f      	b.n	8000c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bea:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <SysTick_Config+0x40>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf2:	210f      	movs	r1, #15
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf8:	f7ff ff8e 	bl	8000b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <SysTick_Config+0x40>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c02:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <SysTick_Config+0x40>)
 8000c04:	2207      	movs	r2, #7
 8000c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	e000e010 	.word	0xe000e010

08000c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff ff29 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b086      	sub	sp, #24
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4603      	mov	r3, r0
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
 8000c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c40:	f7ff ff3e 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	6978      	ldr	r0, [r7, #20]
 8000c4c:	f7ff ff8e 	bl	8000b6c <NVIC_EncodePriority>
 8000c50:	4602      	mov	r2, r0
 8000c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c56:	4611      	mov	r1, r2
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff ff5d 	bl	8000b18 <__NVIC_SetPriority>
}
 8000c5e:	bf00      	nop
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff31 	bl	8000adc <__NVIC_EnableIRQ>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffa2 	bl	8000bd4 <SysTick_Config>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	e159      	b.n	8000f6c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	697a      	ldr	r2, [r7, #20]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f040 8148 	bne.w	8000f66 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 0303 	and.w	r3, r3, #3
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d005      	beq.n	8000cee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d130      	bne.n	8000d50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	4013      	ands	r3, r2
 8000d04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	68da      	ldr	r2, [r3, #12]
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	69ba      	ldr	r2, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d24:	2201      	movs	r2, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	091b      	lsrs	r3, r3, #4
 8000d3a:	f003 0201 	and.w	r2, r3, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0303 	and.w	r3, r3, #3
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d017      	beq.n	8000d8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	2203      	movs	r2, #3
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	69ba      	ldr	r2, [r7, #24]
 8000d70:	4013      	ands	r3, r2
 8000d72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d123      	bne.n	8000de0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	08da      	lsrs	r2, r3, #3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3208      	adds	r2, #8
 8000da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	f003 0307 	and.w	r3, r3, #7
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	220f      	movs	r2, #15
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4013      	ands	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	08da      	lsrs	r2, r3, #3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3208      	adds	r2, #8
 8000dda:	69b9      	ldr	r1, [r7, #24]
 8000ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	f003 0203 	and.w	r2, r3, #3
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 80a2 	beq.w	8000f66 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b57      	ldr	r3, [pc, #348]	; (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	4a56      	ldr	r2, [pc, #344]	; (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b54      	ldr	r3, [pc, #336]	; (8000f84 <HAL_GPIO_Init+0x2e8>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3e:	4a52      	ldr	r2, [pc, #328]	; (8000f88 <HAL_GPIO_Init+0x2ec>)
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a49      	ldr	r2, [pc, #292]	; (8000f8c <HAL_GPIO_Init+0x2f0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d019      	beq.n	8000e9e <HAL_GPIO_Init+0x202>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a48      	ldr	r2, [pc, #288]	; (8000f90 <HAL_GPIO_Init+0x2f4>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x1fe>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a47      	ldr	r2, [pc, #284]	; (8000f94 <HAL_GPIO_Init+0x2f8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_GPIO_Init+0x1fa>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a46      	ldr	r2, [pc, #280]	; (8000f98 <HAL_GPIO_Init+0x2fc>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x1f6>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a45      	ldr	r2, [pc, #276]	; (8000f9c <HAL_GPIO_Init+0x300>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_GPIO_Init+0x1f2>
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	e008      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e8e:	2307      	movs	r3, #7
 8000e90:	e006      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e92:	2303      	movs	r3, #3
 8000e94:	e004      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e96:	2302      	movs	r3, #2
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <HAL_GPIO_Init+0x204>
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	69fa      	ldr	r2, [r7, #28]
 8000ea2:	f002 0203 	and.w	r2, r2, #3
 8000ea6:	0092      	lsls	r2, r2, #2
 8000ea8:	4093      	lsls	r3, r2
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb0:	4935      	ldr	r1, [pc, #212]	; (8000f88 <HAL_GPIO_Init+0x2ec>)
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ebe:	4b38      	ldr	r3, [pc, #224]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d003      	beq.n	8000f0c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f0c:	4a24      	ldr	r2, [pc, #144]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f12:	4b23      	ldr	r3, [pc, #140]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	43db      	mvns	r3, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4013      	ands	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f36:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d003      	beq.n	8000f60 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f60:	4a0f      	ldr	r2, [pc, #60]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	2b0f      	cmp	r3, #15
 8000f70:	f67f aea2 	bls.w	8000cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40013800 	.word	0x40013800
 8000f8c:	40020000 	.word	0x40020000
 8000f90:	40020400 	.word	0x40020400
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020c00 	.word	0x40020c00
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40013c00 	.word	0x40013c00

08000fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb4:	787b      	ldrb	r3, [r7, #1]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fc0:	e003      	b.n	8000fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	041a      	lsls	r2, r3, #16
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	619a      	str	r2, [r3, #24]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b085      	sub	sp, #20
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fe8:	887a      	ldrh	r2, [r7, #2]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4013      	ands	r3, r2
 8000fee:	041a      	lsls	r2, r3, #16
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43d9      	mvns	r1, r3
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	400b      	ands	r3, r1
 8000ff8:	431a      	orrs	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]
}
 8000ffe:	bf00      	nop
 8001000:	3714      	adds	r7, #20
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800100a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800100c:	b08f      	sub	sp, #60	; 0x3c
 800100e:	af0a      	add	r7, sp, #40	; 0x28
 8001010:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e10f      	b.n	800123c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001028:	b2db      	uxtb	r3, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	d106      	bne.n	800103c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2200      	movs	r2, #0
 8001032:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f009 f8ac 	bl	800a194 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2203      	movs	r2, #3
 8001040:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800104c:	2b00      	cmp	r3, #0
 800104e:	d102      	bne.n	8001056 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4618      	mov	r0, r3
 800105c:	f001 ff97 	bl	8002f8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	687e      	ldr	r6, [r7, #4]
 8001068:	466d      	mov	r5, sp
 800106a:	f106 0410 	add.w	r4, r6, #16
 800106e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001072:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001074:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001076:	e894 0003 	ldmia.w	r4, {r0, r1}
 800107a:	e885 0003 	stmia.w	r5, {r0, r1}
 800107e:	1d33      	adds	r3, r6, #4
 8001080:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001082:	6838      	ldr	r0, [r7, #0]
 8001084:	f001 fe6e 	bl	8002d64 <USB_CoreInit>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2202      	movs	r2, #2
 8001092:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e0d0      	b.n	800123c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f001 ff85 	bl	8002fb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	e04a      	b.n	8001142 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	440b      	add	r3, r1
 80010ba:	333d      	adds	r3, #61	; 0x3d
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010c0:	7bfa      	ldrb	r2, [r7, #15]
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4413      	add	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	440b      	add	r3, r1
 80010ce:	333c      	adds	r3, #60	; 0x3c
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	b298      	uxth	r0, r3
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	4613      	mov	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	4413      	add	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	440b      	add	r3, r1
 80010e6:	3344      	adds	r3, #68	; 0x44
 80010e8:	4602      	mov	r2, r0
 80010ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	00db      	lsls	r3, r3, #3
 80010f4:	4413      	add	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	440b      	add	r3, r1
 80010fa:	3340      	adds	r3, #64	; 0x40
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	440b      	add	r3, r1
 800110e:	3348      	adds	r3, #72	; 0x48
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	440b      	add	r3, r1
 8001122:	334c      	adds	r3, #76	; 0x4c
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4413      	add	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	3354      	adds	r3, #84	; 0x54
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	3301      	adds	r3, #1
 8001140:	73fb      	strb	r3, [r7, #15]
 8001142:	7bfa      	ldrb	r2, [r7, #15]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	429a      	cmp	r2, r3
 800114a:	d3af      	bcc.n	80010ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e044      	b.n	80011dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	4413      	add	r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	4613      	mov	r3, r2
 800116e:	00db      	lsls	r3, r3, #3
 8001170:	4413      	add	r3, r2
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	440b      	add	r3, r1
 8001176:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800117e:	7bfa      	ldrb	r2, [r7, #15]
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	00db      	lsls	r3, r3, #3
 80011b2:	4413      	add	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	440b      	add	r3, r1
 80011b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	4613      	mov	r3, r2
 80011c6:	00db      	lsls	r3, r3, #3
 80011c8:	4413      	add	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	440b      	add	r3, r1
 80011ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d6:	7bfb      	ldrb	r3, [r7, #15]
 80011d8:	3301      	adds	r3, #1
 80011da:	73fb      	strb	r3, [r7, #15]
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d3b5      	bcc.n	8001152 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	687e      	ldr	r6, [r7, #4]
 80011ee:	466d      	mov	r5, sp
 80011f0:	f106 0410 	add.w	r4, r6, #16
 80011f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001200:	e885 0003 	stmia.w	r5, {r0, r1}
 8001204:	1d33      	adds	r3, r6, #4
 8001206:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001208:	6838      	ldr	r0, [r7, #0]
 800120a:	f001 ff1d 	bl	8003048 <USB_DevInit>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d005      	beq.n	8001220 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2202      	movs	r2, #2
 8001218:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e00d      	b.n	800123c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2201      	movs	r2, #1
 800122c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f003 f86c 	bl	8004312 <USB_DevDisconnect>

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3714      	adds	r7, #20
 8001240:	46bd      	mov	sp, r7
 8001242:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001244 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_PCD_Start+0x1c>
 800125c:	2302      	movs	r3, #2
 800125e:	e020      	b.n	80012a2 <HAL_PCD_Start+0x5e>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126c:	2b01      	cmp	r3, #1
 800126e:	d109      	bne.n	8001284 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001274:	2b01      	cmp	r3, #1
 8001276:	d005      	beq.n	8001284 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f001 fe6f 	bl	8002f6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f003 f81c 	bl	80042d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012aa:	b590      	push	{r4, r7, lr}
 80012ac:	b08d      	sub	sp, #52	; 0x34
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012b8:	6a3b      	ldr	r3, [r7, #32]
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f003 f8da 	bl	800447a <USB_GetMode>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f040 848a 	bne.w	8001be2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 f83e 	bl	8004354 <USB_ReadInterrupts>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 8480 	beq.w	8001be0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f003 f82b 	bl	8004354 <USB_ReadInterrupts>
 80012fe:	4603      	mov	r3, r0
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b02      	cmp	r3, #2
 8001306:	d107      	bne.n	8001318 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	695a      	ldr	r2, [r3, #20]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f002 0202 	and.w	r2, r2, #2
 8001316:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f003 f819 	bl	8004354 <USB_ReadInterrupts>
 8001322:	4603      	mov	r3, r0
 8001324:	f003 0310 	and.w	r3, r3, #16
 8001328:	2b10      	cmp	r3, #16
 800132a:	d161      	bne.n	80013f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699a      	ldr	r2, [r3, #24]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 0210 	bic.w	r2, r2, #16
 800133a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	f003 020f 	and.w	r2, r3, #15
 8001348:	4613      	mov	r3, r2
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4413      	add	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	3304      	adds	r3, #4
 800135a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	0c5b      	lsrs	r3, r3, #17
 8001360:	f003 030f 	and.w	r3, r3, #15
 8001364:	2b02      	cmp	r3, #2
 8001366:	d124      	bne.n	80013b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800136e:	4013      	ands	r3, r2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d035      	beq.n	80013e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800137e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001382:	b29b      	uxth	r3, r3
 8001384:	461a      	mov	r2, r3
 8001386:	6a38      	ldr	r0, [r7, #32]
 8001388:	f002 fe50 	bl	800402c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001398:	441a      	add	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	6a1a      	ldr	r2, [r3, #32]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013aa:	441a      	add	r2, r3
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	621a      	str	r2, [r3, #32]
 80013b0:	e016      	b.n	80013e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	0c5b      	lsrs	r3, r3, #17
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	2b06      	cmp	r3, #6
 80013bc:	d110      	bne.n	80013e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013c4:	2208      	movs	r2, #8
 80013c6:	4619      	mov	r1, r3
 80013c8:	6a38      	ldr	r0, [r7, #32]
 80013ca:	f002 fe2f 	bl	800402c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	6a1a      	ldr	r2, [r3, #32]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	091b      	lsrs	r3, r3, #4
 80013d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013da:	441a      	add	r2, r3
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	699a      	ldr	r2, [r3, #24]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0210 	orr.w	r2, r2, #16
 80013ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f002 ffad 	bl	8004354 <USB_ReadInterrupts>
 80013fa:	4603      	mov	r3, r0
 80013fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001400:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001404:	f040 80a7 	bne.w	8001556 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f002 ffb2 	bl	800437a <USB_ReadDevAllOutEpInterrupt>
 8001416:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001418:	e099      	b.n	800154e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	f000 808e 	beq.w	8001542 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	4611      	mov	r1, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f002 ffd6 	bl	80043e2 <USB_ReadDevOutEPInterrupt>
 8001436:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00c      	beq.n	800145c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	015a      	lsls	r2, r3, #5
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800144e:	461a      	mov	r2, r3
 8001450:	2301      	movs	r3, #1
 8001452:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001454:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 fec2 	bl	80021e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00c      	beq.n	8001480 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	015a      	lsls	r2, r3, #5
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	4413      	add	r3, r2
 800146e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001472:	461a      	mov	r2, r3
 8001474:	2308      	movs	r3, #8
 8001476:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 ff98 	bl	80023b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f003 0310 	and.w	r3, r3, #16
 8001486:	2b00      	cmp	r3, #0
 8001488:	d008      	beq.n	800149c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	015a      	lsls	r2, r3, #5
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	4413      	add	r3, r2
 8001492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001496:	461a      	mov	r2, r3
 8001498:	2310      	movs	r3, #16
 800149a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d030      	beq.n	8001508 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014a6:	6a3b      	ldr	r3, [r7, #32]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	2b80      	cmp	r3, #128	; 0x80
 80014b0:	d109      	bne.n	80014c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	4413      	add	r3, r2
 80014d8:	3304      	adds	r3, #4
 80014da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	78db      	ldrb	r3, [r3, #3]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d108      	bne.n	80014f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	2200      	movs	r2, #0
 80014e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4619      	mov	r1, r3
 80014f0:	6878      	ldr	r0, [r7, #4]
 80014f2:	f008 ff55 	bl	800a3a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	015a      	lsls	r2, r3, #5
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	4413      	add	r3, r2
 80014fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001502:	461a      	mov	r2, r3
 8001504:	2302      	movs	r3, #2
 8001506:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	f003 0320 	and.w	r3, r3, #32
 800150e:	2b00      	cmp	r3, #0
 8001510:	d008      	beq.n	8001524 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	015a      	lsls	r2, r3, #5
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	4413      	add	r3, r2
 800151a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800151e:	461a      	mov	r2, r3
 8001520:	2320      	movs	r3, #32
 8001522:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d009      	beq.n	8001542 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	015a      	lsls	r2, r3, #5
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	4413      	add	r3, r2
 8001536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800153a:	461a      	mov	r2, r3
 800153c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001540:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	3301      	adds	r3, #1
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154a:	085b      	lsrs	r3, r3, #1
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	f47f af62 	bne.w	800141a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fefa 	bl	8004354 <USB_ReadInterrupts>
 8001560:	4603      	mov	r3, r0
 8001562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001566:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800156a:	f040 80db 	bne.w	8001724 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f002 ff1b 	bl	80043ae <USB_ReadDevAllInEpInterrupt>
 8001578:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800157e:	e0cd      	b.n	800171c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 80c2 	beq.w	8001710 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	4611      	mov	r1, r2
 8001596:	4618      	mov	r0, r3
 8001598:	f002 ff41 	bl	800441e <USB_ReadDevInEPInterrupt>
 800159c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d057      	beq.n	8001658 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	2201      	movs	r2, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69f9      	ldr	r1, [r7, #28]
 80015c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015c8:	4013      	ands	r3, r2
 80015ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	015a      	lsls	r2, r3, #5
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	4413      	add	r3, r2
 80015d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d8:	461a      	mov	r2, r3
 80015da:	2301      	movs	r3, #1
 80015dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d132      	bne.n	800164c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	334c      	adds	r3, #76	; 0x4c
 80015f6:	6819      	ldr	r1, [r3, #0]
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	4413      	add	r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4403      	add	r3, r0
 8001606:	3348      	adds	r3, #72	; 0x48
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4419      	add	r1, r3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001610:	4613      	mov	r3, r2
 8001612:	00db      	lsls	r3, r3, #3
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4403      	add	r3, r0
 800161a:	334c      	adds	r3, #76	; 0x4c
 800161c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	2b00      	cmp	r3, #0
 8001622:	d113      	bne.n	800164c <HAL_PCD_IRQHandler+0x3a2>
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001628:	4613      	mov	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	4413      	add	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	440b      	add	r3, r1
 8001632:	3354      	adds	r3, #84	; 0x54
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d108      	bne.n	800164c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001644:	461a      	mov	r2, r3
 8001646:	2101      	movs	r1, #1
 8001648:	f002 ff48 	bl	80044dc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800164c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164e:	b2db      	uxtb	r3, r3
 8001650:	4619      	mov	r1, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f008 fe1f 	bl	800a296 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	2b00      	cmp	r3, #0
 8001660:	d008      	beq.n	8001674 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	015a      	lsls	r2, r3, #5
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	4413      	add	r3, r2
 800166a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800166e:	461a      	mov	r2, r3
 8001670:	2308      	movs	r3, #8
 8001672:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	2b00      	cmp	r3, #0
 800167c:	d008      	beq.n	8001690 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	015a      	lsls	r2, r3, #5
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4413      	add	r3, r2
 8001686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800168a:	461a      	mov	r2, r3
 800168c:	2310      	movs	r3, #16
 800168e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001696:	2b00      	cmp	r3, #0
 8001698:	d008      	beq.n	80016ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	015a      	lsls	r2, r3, #5
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	4413      	add	r3, r2
 80016a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016a6:	461a      	mov	r2, r3
 80016a8:	2340      	movs	r3, #64	; 0x40
 80016aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d023      	beq.n	80016fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016b8:	6a38      	ldr	r0, [r7, #32]
 80016ba:	f001 fe29 	bl	8003310 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c0:	4613      	mov	r3, r2
 80016c2:	00db      	lsls	r3, r3, #3
 80016c4:	4413      	add	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	3338      	adds	r3, #56	; 0x38
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	3304      	adds	r3, #4
 80016d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	78db      	ldrb	r3, [r3, #3]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d108      	bne.n	80016ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2200      	movs	r2, #0
 80016de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	4619      	mov	r1, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f008 fe6c 	bl	800a3c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	015a      	lsls	r2, r3, #5
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4413      	add	r3, r2
 80016f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f8:	461a      	mov	r2, r3
 80016fa:	2302      	movs	r3, #2
 80016fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001704:	2b00      	cmp	r3, #0
 8001706:	d003      	beq.n	8001710 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 fcdb 	bl	80020c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	3301      	adds	r3, #1
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001718:	085b      	lsrs	r3, r3, #1
 800171a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800171c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171e:	2b00      	cmp	r3, #0
 8001720:	f47f af2e 	bne.w	8001580 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f002 fe13 	bl	8004354 <USB_ReadInterrupts>
 800172e:	4603      	mov	r3, r0
 8001730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001738:	d122      	bne.n	8001780 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001754:	2b01      	cmp	r3, #1
 8001756:	d108      	bne.n	800176a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001760:	2100      	movs	r1, #0
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 fec2 	bl	80024ec <HAL_PCDEx_LPM_Callback>
 8001768:	e002      	b.n	8001770 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f008 fe0a 	bl	800a384 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800177e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f002 fde5 	bl	8004354 <USB_ReadInterrupts>
 800178a:	4603      	mov	r3, r0
 800178c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001790:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001794:	d112      	bne.n	80017bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d102      	bne.n	80017ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f008 fdc6 	bl	800a338 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017ba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fdc7 	bl	8004354 <USB_ReadInterrupts>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017d0:	f040 80b7 	bne.w	8001942 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2110      	movs	r1, #16
 80017ee:	4618      	mov	r0, r3
 80017f0:	f001 fd8e 	bl	8003310 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f8:	e046      	b.n	8001888 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fc:	015a      	lsls	r2, r3, #5
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	4413      	add	r3, r2
 8001802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001806:	461a      	mov	r2, r3
 8001808:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800180c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800180e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001810:	015a      	lsls	r2, r3, #5
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	4413      	add	r3, r2
 8001816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800181e:	0151      	lsls	r1, r2, #5
 8001820:	69fa      	ldr	r2, [r7, #28]
 8001822:	440a      	add	r2, r1
 8001824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001828:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800182c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001830:	015a      	lsls	r2, r3, #5
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	4413      	add	r3, r2
 8001836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800183a:	461a      	mov	r2, r3
 800183c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001840:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4413      	add	r3, r2
 800184a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001852:	0151      	lsls	r1, r2, #5
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	440a      	add	r2, r1
 8001858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800185c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001860:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	015a      	lsls	r2, r3, #5
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	4413      	add	r3, r2
 800186a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001872:	0151      	lsls	r1, r2, #5
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	440a      	add	r2, r1
 8001878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800187c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001880:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001884:	3301      	adds	r3, #1
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800188e:	429a      	cmp	r2, r3
 8001890:	d3b3      	bcc.n	80017fa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018a4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d016      	beq.n	80018dc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018b8:	69fa      	ldr	r2, [r7, #28]
 80018ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018be:	f043 030b 	orr.w	r3, r3, #11
 80018c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d4:	f043 030b 	orr.w	r3, r3, #11
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	e015      	b.n	8001908 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018ee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018f2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001902:	f043 030b 	orr.w	r3, r3, #11
 8001906:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001916:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800191a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800192c:	461a      	mov	r2, r3
 800192e:	f002 fdd5 	bl	80044dc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695a      	ldr	r2, [r3, #20]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001940:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4618      	mov	r0, r3
 8001948:	f002 fd04 	bl	8004354 <USB_ReadInterrupts>
 800194c:	4603      	mov	r3, r0
 800194e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001956:	d124      	bne.n	80019a2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4618      	mov	r0, r3
 800195e:	f002 fd9a 	bl	8004496 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f001 fd4f 	bl	800340a <USB_GetDevSpeed>
 800196c:	4603      	mov	r3, r0
 800196e:	461a      	mov	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681c      	ldr	r4, [r3, #0]
 8001978:	f001 f9e8 	bl	8002d4c <HAL_RCC_GetHCLKFreq>
 800197c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	4620      	mov	r0, r4
 8001988:	f001 fa4e 	bl	8002e28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f008 fcaa 	bl	800a2e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695a      	ldr	r2, [r3, #20]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80019a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f002 fcd4 	bl	8004354 <USB_ReadInterrupts>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d10a      	bne.n	80019cc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f008 fc87 	bl	800a2ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f002 0208 	and.w	r2, r2, #8
 80019ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 fcbf 	bl	8004354 <USB_ReadInterrupts>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019dc:	2b80      	cmp	r3, #128	; 0x80
 80019de:	d122      	bne.n	8001a26 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019e0:	6a3b      	ldr	r3, [r7, #32]
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019ec:	2301      	movs	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
 80019f0:	e014      	b.n	8001a1c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f6:	4613      	mov	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	4413      	add	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	440b      	add	r3, r1
 8001a00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d105      	bne.n	8001a16 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fb27 	bl	8002064 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	3301      	adds	r3, #1
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d3e5      	bcc.n	80019f2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f002 fc92 	bl	8004354 <USB_ReadInterrupts>
 8001a30:	4603      	mov	r3, r0
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a3a:	d13b      	bne.n	8001ab4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a40:	e02b      	b.n	8001a9a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a44:	015a      	lsls	r2, r3, #5
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	4413      	add	r3, r2
 8001a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a56:	4613      	mov	r3, r2
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	440b      	add	r3, r1
 8001a60:	3340      	adds	r3, #64	; 0x40
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d115      	bne.n	8001a94 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	da12      	bge.n	8001a94 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a72:	4613      	mov	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4413      	add	r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	333f      	adds	r3, #63	; 0x3f
 8001a7e:	2201      	movs	r2, #1
 8001a80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 fae8 	bl	8002064 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	3301      	adds	r3, #1
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d3ce      	bcc.n	8001a42 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f002 fc4b 	bl	8004354 <USB_ReadInterrupts>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ac8:	d155      	bne.n	8001b76 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aca:	2301      	movs	r3, #1
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ace:	e045      	b.n	8001b5c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	015a      	lsls	r2, r3, #5
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ae0:	6879      	ldr	r1, [r7, #4]
 8001ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d12e      	bne.n	8001b56 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001af8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	da2b      	bge.n	8001b56 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b0a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d121      	bne.n	8001b56 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b16:	4613      	mov	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	440b      	add	r3, r1
 8001b20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b24:	2201      	movs	r2, #1
 8001b26:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b34:	6a3b      	ldr	r3, [r7, #32]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10a      	bne.n	8001b56 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b52:	6053      	str	r3, [r2, #4]
            break;
 8001b54:	e007      	b.n	8001b66 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	3301      	adds	r3, #1
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d3b4      	bcc.n	8001ad0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fbea 	bl	8004354 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b8a:	d10a      	bne.n	8001ba2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f008 fc2b 	bl	800a3e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695a      	ldr	r2, [r3, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f002 fbd4 	bl	8004354 <USB_ReadInterrupts>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d115      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f008 fc1b 	bl	800a404 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6859      	ldr	r1, [r3, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	e000      	b.n	8001be2 <HAL_PCD_IRQHandler+0x938>
      return;
 8001be0:	bf00      	nop
    }
  }
}
 8001be2:	3734      	adds	r7, #52	; 0x34
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd90      	pop	{r4, r7, pc}

08001be8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_PCD_SetAddress+0x1a>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e013      	b.n	8001c2a <HAL_PCD_SetAddress+0x42>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	78fa      	ldrb	r2, [r7, #3]
 8001c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f002 fb32 	bl	8004284 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b084      	sub	sp, #16
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	4608      	mov	r0, r1
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4603      	mov	r3, r0
 8001c42:	70fb      	strb	r3, [r7, #3]
 8001c44:	460b      	mov	r3, r1
 8001c46:	803b      	strh	r3, [r7, #0]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	da0f      	bge.n	8001c78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	f003 020f 	and.w	r2, r3, #15
 8001c5e:	4613      	mov	r3, r2
 8001c60:	00db      	lsls	r3, r3, #3
 8001c62:	4413      	add	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	3338      	adds	r3, #56	; 0x38
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2201      	movs	r2, #1
 8001c74:	705a      	strb	r2, [r3, #1]
 8001c76:	e00f      	b.n	8001c98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	f003 020f 	and.w	r2, r3, #15
 8001c7e:	4613      	mov	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3304      	adds	r3, #4
 8001c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ca4:	883a      	ldrh	r2, [r7, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	78ba      	ldrb	r2, [r7, #2]
 8001cae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	785b      	ldrb	r3, [r3, #1]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cc2:	78bb      	ldrb	r3, [r7, #2]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d102      	bne.n	8001cce <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_PCD_EP_Open+0xaa>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e00e      	b.n	8001cfa <HAL_PCD_EP_Open+0xc8>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 fbb2 	bl	8003454 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001cf8:	7afb      	ldrb	r3, [r7, #11]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b084      	sub	sp, #16
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	da0f      	bge.n	8001d36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	f003 020f 	and.w	r2, r3, #15
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4413      	add	r3, r2
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	3338      	adds	r3, #56	; 0x38
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	4413      	add	r3, r2
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	705a      	strb	r2, [r3, #1]
 8001d34:	e00f      	b.n	8001d56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	f003 020f 	and.w	r2, r3, #15
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	3304      	adds	r3, #4
 8001d4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d56:	78fb      	ldrb	r3, [r7, #3]
 8001d58:	f003 030f 	and.w	r3, r3, #15
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_PCD_EP_Close+0x6e>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e00e      	b.n	8001d8e <HAL_PCD_EP_Close+0x8c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68f9      	ldr	r1, [r7, #12]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f001 fbf0 	bl	8003564 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b086      	sub	sp, #24
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	607a      	str	r2, [r7, #4]
 8001da0:	603b      	str	r3, [r7, #0]
 8001da2:	460b      	mov	r3, r1
 8001da4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001da6:	7afb      	ldrb	r3, [r7, #11]
 8001da8:	f003 020f 	and.w	r2, r3, #15
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd8:	7afb      	ldrb	r3, [r7, #11]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d102      	bne.n	8001df2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001df2:	7afb      	ldrb	r3, [r7, #11]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d109      	bne.n	8001e10 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	461a      	mov	r2, r3
 8001e08:	6979      	ldr	r1, [r7, #20]
 8001e0a:	f001 fecf 	bl	8003bac <USB_EP0StartXfer>
 8001e0e:	e008      	b.n	8001e22 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6818      	ldr	r0, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	6979      	ldr	r1, [r7, #20]
 8001e1e:	f001 fc7d 	bl	800371c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3718      	adds	r7, #24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e38:	78fb      	ldrb	r3, [r7, #3]
 8001e3a:	f003 020f 	and.w	r2, r3, #15
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e6c:	7afb      	ldrb	r3, [r7, #11]
 8001e6e:	f003 020f 	and.w	r2, r3, #15
 8001e72:	4613      	mov	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	3338      	adds	r3, #56	; 0x38
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4413      	add	r3, r2
 8001e80:	3304      	adds	r3, #4
 8001e82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2200      	movs	r2, #0
 8001e94:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e9c:	7afb      	ldrb	r3, [r7, #11]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d102      	bne.n	8001eb6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eb6:	7afb      	ldrb	r3, [r7, #11]
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	6979      	ldr	r1, [r7, #20]
 8001ece:	f001 fe6d 	bl	8003bac <USB_EP0StartXfer>
 8001ed2:	e008      	b.n	8001ee6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	6979      	ldr	r1, [r7, #20]
 8001ee2:	f001 fc1b 	bl	800371c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	f003 020f 	and.w	r2, r3, #15
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d901      	bls.n	8001f0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e050      	b.n	8001fb0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	da0f      	bge.n	8001f36 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	f003 020f 	and.w	r2, r3, #15
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	3338      	adds	r3, #56	; 0x38
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	705a      	strb	r2, [r3, #1]
 8001f34:	e00d      	b.n	8001f52 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f36:	78fa      	ldrb	r2, [r7, #3]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	3304      	adds	r3, #4
 8001f4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2201      	movs	r2, #1
 8001f56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d101      	bne.n	8001f72 <HAL_PCD_EP_SetStall+0x82>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e01e      	b.n	8001fb0 <HAL_PCD_EP_SetStall+0xc0>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68f9      	ldr	r1, [r7, #12]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f002 f8ab 	bl	80040dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10a      	bne.n	8001fa6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	b2d9      	uxtb	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	f002 fa9b 	bl	80044dc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	f003 020f 	and.w	r2, r3, #15
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d901      	bls.n	8001fd6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e042      	b.n	800205c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	da0f      	bge.n	8001ffe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	f003 020f 	and.w	r2, r3, #15
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	3338      	adds	r3, #56	; 0x38
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	705a      	strb	r2, [r3, #1]
 8001ffc:	e00f      	b.n	800201e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ffe:	78fb      	ldrb	r3, [r7, #3]
 8002000:	f003 020f 	and.w	r2, r3, #15
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	3304      	adds	r3, #4
 8002016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002024:	78fb      	ldrb	r3, [r7, #3]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	b2da      	uxtb	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002036:	2b01      	cmp	r3, #1
 8002038:	d101      	bne.n	800203e <HAL_PCD_EP_ClrStall+0x86>
 800203a:	2302      	movs	r3, #2
 800203c:	e00e      	b.n	800205c <HAL_PCD_EP_ClrStall+0xa4>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68f9      	ldr	r1, [r7, #12]
 800204c:	4618      	mov	r0, r3
 800204e:	f002 f8b3 	bl	80041b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002074:	2b00      	cmp	r3, #0
 8002076:	da0c      	bge.n	8002092 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 020f 	and.w	r2, r3, #15
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	3338      	adds	r3, #56	; 0x38
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	4413      	add	r3, r2
 800208c:	3304      	adds	r3, #4
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	e00c      	b.n	80020ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f003 020f 	and.w	r2, r3, #15
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	3304      	adds	r3, #4
 80020aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68f9      	ldr	r1, [r7, #12]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f001 fed2 	bl	8003e5c <USB_EPStopXfer>
 80020b8:	4603      	mov	r3, r0
 80020ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020bc:	7afb      	ldrb	r3, [r7, #11]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b08a      	sub	sp, #40	; 0x28
 80020ca:	af02      	add	r7, sp, #8
 80020cc:	6078      	str	r0, [r7, #4]
 80020ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	4413      	add	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	3338      	adds	r3, #56	; 0x38
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	3304      	adds	r3, #4
 80020ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6a1a      	ldr	r2, [r3, #32]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d901      	bls.n	80020fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e06c      	b.n	80021d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	699a      	ldr	r2, [r3, #24]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	69fa      	ldr	r2, [r7, #28]
 8002110:	429a      	cmp	r2, r3
 8002112:	d902      	bls.n	800211a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3303      	adds	r3, #3
 800211e:	089b      	lsrs	r3, r3, #2
 8002120:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002122:	e02b      	b.n	800217c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	699a      	ldr	r2, [r3, #24]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	429a      	cmp	r2, r3
 8002138:	d902      	bls.n	8002140 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	3303      	adds	r3, #3
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6919      	ldr	r1, [r3, #16]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002158:	b2db      	uxtb	r3, r3
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	4603      	mov	r3, r0
 800215e:	6978      	ldr	r0, [r7, #20]
 8002160:	f001 ff26 	bl	8003fb0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	441a      	add	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a1a      	ldr	r2, [r3, #32]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	441a      	add	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	b29b      	uxth	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	429a      	cmp	r2, r3
 8002190:	d809      	bhi.n	80021a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6a1a      	ldr	r2, [r3, #32]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800219a:	429a      	cmp	r2, r3
 800219c:	d203      	bcs.n	80021a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1be      	bne.n	8002124 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d811      	bhi.n	80021d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	2201      	movs	r2, #1
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	6939      	ldr	r1, [r7, #16]
 80021ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021d2:	4013      	ands	r3, r2
 80021d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3720      	adds	r7, #32
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	333c      	adds	r3, #60	; 0x3c
 80021f8:	3304      	adds	r3, #4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	015a      	lsls	r2, r3, #5
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	4413      	add	r3, r2
 8002206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d17b      	bne.n	800230e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d015      	beq.n	800224c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	4a61      	ldr	r2, [pc, #388]	; (80023a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002224:	4293      	cmp	r3, r2
 8002226:	f240 80b9 	bls.w	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 80b3 	beq.w	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	015a      	lsls	r2, r3, #5
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	4413      	add	r3, r2
 800223e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002242:	461a      	mov	r2, r3
 8002244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002248:	6093      	str	r3, [r2, #8]
 800224a:	e0a7      	b.n	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f003 0320 	and.w	r3, r3, #32
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002262:	461a      	mov	r2, r3
 8002264:	2320      	movs	r3, #32
 8002266:	6093      	str	r3, [r2, #8]
 8002268:	e098      	b.n	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	f040 8093 	bne.w	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	4a4b      	ldr	r2, [pc, #300]	; (80023a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d90f      	bls.n	800229e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	4413      	add	r3, r2
 8002290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002294:	461a      	mov	r2, r3
 8002296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800229a:	6093      	str	r3, [r2, #8]
 800229c:	e07e      	b.n	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	3304      	adds	r3, #4
 80022b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	69da      	ldr	r2, [r3, #28]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	0159      	lsls	r1, r3, #5
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	440b      	add	r3, r1
 80022c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ca:	1ad2      	subs	r2, r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d114      	bne.n	8002300 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d109      	bne.n	80022f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6818      	ldr	r0, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022e8:	461a      	mov	r2, r3
 80022ea:	2101      	movs	r1, #1
 80022ec:	f002 f8f6 	bl	80044dc <USB_EP0_OutStart>
 80022f0:	e006      	b.n	8002300 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	441a      	add	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	4619      	mov	r1, r3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f007 ffaa 	bl	800a260 <HAL_PCD_DataOutStageCallback>
 800230c:	e046      	b.n	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	4a26      	ldr	r2, [pc, #152]	; (80023ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d124      	bne.n	8002360 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232c:	461a      	mov	r2, r3
 800232e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002332:	6093      	str	r3, [r2, #8]
 8002334:	e032      	b.n	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	4413      	add	r3, r2
 8002348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234c:	461a      	mov	r2, r3
 800234e:	2320      	movs	r3, #32
 8002350:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	4619      	mov	r1, r3
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f007 ff81 	bl	800a260 <HAL_PCD_DataOutStageCallback>
 800235e:	e01d      	b.n	800239c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d114      	bne.n	8002390 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d108      	bne.n	8002390 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002388:	461a      	mov	r2, r3
 800238a:	2100      	movs	r1, #0
 800238c:	f002 f8a6 	bl	80044dc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	4619      	mov	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f007 ff62 	bl	800a260 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	4f54300a 	.word	0x4f54300a
 80023ac:	4f54310a 	.word	0x4f54310a

080023b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	333c      	adds	r3, #60	; 0x3c
 80023c8:	3304      	adds	r3, #4
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4a15      	ldr	r2, [pc, #84]	; (8002438 <PCD_EP_OutSetupPacket_int+0x88>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d90e      	bls.n	8002404 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d009      	beq.n	8002404 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	015a      	lsls	r2, r3, #5
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	4413      	add	r3, r2
 80023f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023fc:	461a      	mov	r2, r3
 80023fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002402:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f007 ff19 	bl	800a23c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <PCD_EP_OutSetupPacket_int+0x88>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d90c      	bls.n	800242c <PCD_EP_OutSetupPacket_int+0x7c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d108      	bne.n	800242c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002424:	461a      	mov	r2, r3
 8002426:	2101      	movs	r1, #1
 8002428:	f002 f858 	bl	80044dc <USB_EP0_OutStart>
  }

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	4f54300a 	.word	0x4f54300a

0800243c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	460b      	mov	r3, r1
 8002446:	70fb      	strb	r3, [r7, #3]
 8002448:	4613      	mov	r3, r2
 800244a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d107      	bne.n	800246a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800245a:	883b      	ldrh	r3, [r7, #0]
 800245c:	0419      	lsls	r1, r3, #16
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	430a      	orrs	r2, r1
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
 8002468:	e028      	b.n	80024bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	0c1b      	lsrs	r3, r3, #16
 8002472:	68ba      	ldr	r2, [r7, #8]
 8002474:	4413      	add	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002478:	2300      	movs	r3, #0
 800247a:	73fb      	strb	r3, [r7, #15]
 800247c:	e00d      	b.n	800249a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	3340      	adds	r3, #64	; 0x40
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	4413      	add	r3, r2
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	0c1b      	lsrs	r3, r3, #16
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	4413      	add	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	3301      	adds	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
 800249a:	7bfa      	ldrb	r2, [r7, #15]
 800249c:	78fb      	ldrb	r3, [r7, #3]
 800249e:	3b01      	subs	r3, #1
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d3ec      	bcc.n	800247e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024a4:	883b      	ldrh	r3, [r7, #0]
 80024a6:	0418      	lsls	r0, r3, #16
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6819      	ldr	r1, [r3, #0]
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	4302      	orrs	r2, r0
 80024b4:	3340      	adds	r3, #64	; 0x40
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3714      	adds	r7, #20
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr

080024ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024ca:	b480      	push	{r7}
 80024cc:	b083      	sub	sp, #12
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	460b      	mov	r3, r1
 80024d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	887a      	ldrh	r2, [r7, #2]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e267      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d075      	beq.n	800260e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002522:	4b88      	ldr	r3, [pc, #544]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	2b04      	cmp	r3, #4
 800252c:	d00c      	beq.n	8002548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252e:	4b85      	ldr	r3, [pc, #532]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002536:	2b08      	cmp	r3, #8
 8002538:	d112      	bne.n	8002560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800253a:	4b82      	ldr	r3, [pc, #520]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002546:	d10b      	bne.n	8002560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	4b7e      	ldr	r3, [pc, #504]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d05b      	beq.n	800260c <HAL_RCC_OscConfig+0x108>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d157      	bne.n	800260c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e242      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002568:	d106      	bne.n	8002578 <HAL_RCC_OscConfig+0x74>
 800256a:	4b76      	ldr	r3, [pc, #472]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a75      	ldr	r2, [pc, #468]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e01d      	b.n	80025b4 <HAL_RCC_OscConfig+0xb0>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002580:	d10c      	bne.n	800259c <HAL_RCC_OscConfig+0x98>
 8002582:	4b70      	ldr	r3, [pc, #448]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a6f      	ldr	r2, [pc, #444]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	4b6d      	ldr	r3, [pc, #436]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a6c      	ldr	r2, [pc, #432]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	e00b      	b.n	80025b4 <HAL_RCC_OscConfig+0xb0>
 800259c:	4b69      	ldr	r3, [pc, #420]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a68      	ldr	r2, [pc, #416]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b66      	ldr	r3, [pc, #408]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a65      	ldr	r2, [pc, #404]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 80025ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d013      	beq.n	80025e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fa2c 	bl	8000a18 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fa28 	bl	8000a18 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e207      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d6:	4b5b      	ldr	r3, [pc, #364]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f0      	beq.n	80025c4 <HAL_RCC_OscConfig+0xc0>
 80025e2:	e014      	b.n	800260e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e4:	f7fe fa18 	bl	8000a18 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fa14 	bl	8000a18 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e1f3      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fe:	4b51      	ldr	r3, [pc, #324]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1f0      	bne.n	80025ec <HAL_RCC_OscConfig+0xe8>
 800260a:	e000      	b.n	800260e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d063      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800261a:	4b4a      	ldr	r3, [pc, #296]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00b      	beq.n	800263e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002626:	4b47      	ldr	r3, [pc, #284]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262e:	2b08      	cmp	r3, #8
 8002630:	d11c      	bne.n	800266c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002632:	4b44      	ldr	r3, [pc, #272]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d116      	bne.n	800266c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263e:	4b41      	ldr	r3, [pc, #260]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x152>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d001      	beq.n	8002656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e1c7      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002656:	4b3b      	ldr	r3, [pc, #236]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4937      	ldr	r1, [pc, #220]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	e03a      	b.n	80026e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d020      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002674:	4b34      	ldr	r3, [pc, #208]	; (8002748 <HAL_RCC_OscConfig+0x244>)
 8002676:	2201      	movs	r2, #1
 8002678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe f9cd 	bl	8000a18 <HAL_GetTick>
 800267e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002680:	e008      	b.n	8002694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002682:	f7fe f9c9 	bl	8000a18 <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e1a8      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d0f0      	beq.n	8002682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4b28      	ldr	r3, [pc, #160]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	4925      	ldr	r1, [pc, #148]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
 80026b4:	e015      	b.n	80026e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b6:	4b24      	ldr	r3, [pc, #144]	; (8002748 <HAL_RCC_OscConfig+0x244>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026bc:	f7fe f9ac 	bl	8000a18 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c4:	f7fe f9a8 	bl	8000a18 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e187      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d6:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0308 	and.w	r3, r3, #8
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d036      	beq.n	800275c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d016      	beq.n	8002724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f6:	4b15      	ldr	r3, [pc, #84]	; (800274c <HAL_RCC_OscConfig+0x248>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7fe f98c 	bl	8000a18 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002704:	f7fe f988 	bl	8000a18 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e167      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCC_OscConfig+0x240>)
 8002718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0x200>
 8002722:	e01b      	b.n	800275c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <HAL_RCC_OscConfig+0x248>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272a:	f7fe f975 	bl	8000a18 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002730:	e00e      	b.n	8002750 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002732:	f7fe f971 	bl	8000a18 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d907      	bls.n	8002750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e150      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
 8002744:	40023800 	.word	0x40023800
 8002748:	42470000 	.word	0x42470000
 800274c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002750:	4b88      	ldr	r3, [pc, #544]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 8002752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ea      	bne.n	8002732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8097 	beq.w	8002898 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276a:	2300      	movs	r3, #0
 800276c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276e:	4b81      	ldr	r3, [pc, #516]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10f      	bne.n	800279a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	4b7d      	ldr	r3, [pc, #500]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a7c      	ldr	r2, [pc, #496]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b7a      	ldr	r3, [pc, #488]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b77      	ldr	r3, [pc, #476]	; (8002978 <HAL_RCC_OscConfig+0x474>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d118      	bne.n	80027d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a6:	4b74      	ldr	r3, [pc, #464]	; (8002978 <HAL_RCC_OscConfig+0x474>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a73      	ldr	r2, [pc, #460]	; (8002978 <HAL_RCC_OscConfig+0x474>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b2:	f7fe f931 	bl	8000a18 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ba:	f7fe f92d 	bl	8000a18 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e10c      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	4b6a      	ldr	r3, [pc, #424]	; (8002978 <HAL_RCC_OscConfig+0x474>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x2ea>
 80027e0:	4b64      	ldr	r3, [pc, #400]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	4a63      	ldr	r2, [pc, #396]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6713      	str	r3, [r2, #112]	; 0x70
 80027ec:	e01c      	b.n	8002828 <HAL_RCC_OscConfig+0x324>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b05      	cmp	r3, #5
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x30c>
 80027f6:	4b5f      	ldr	r3, [pc, #380]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	4a5e      	ldr	r2, [pc, #376]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	6713      	str	r3, [r2, #112]	; 0x70
 8002802:	4b5c      	ldr	r3, [pc, #368]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	4a5b      	ldr	r2, [pc, #364]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	6713      	str	r3, [r2, #112]	; 0x70
 800280e:	e00b      	b.n	8002828 <HAL_RCC_OscConfig+0x324>
 8002810:	4b58      	ldr	r3, [pc, #352]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	4a57      	ldr	r2, [pc, #348]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 8002816:	f023 0301 	bic.w	r3, r3, #1
 800281a:	6713      	str	r3, [r2, #112]	; 0x70
 800281c:	4b55      	ldr	r3, [pc, #340]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a54      	ldr	r2, [pc, #336]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 8002822:	f023 0304 	bic.w	r3, r3, #4
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d015      	beq.n	800285c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002830:	f7fe f8f2 	bl	8000a18 <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002836:	e00a      	b.n	800284e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002838:	f7fe f8ee 	bl	8000a18 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	; 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e0cb      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284e:	4b49      	ldr	r3, [pc, #292]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0ee      	beq.n	8002838 <HAL_RCC_OscConfig+0x334>
 800285a:	e014      	b.n	8002886 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285c:	f7fe f8dc 	bl	8000a18 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002862:	e00a      	b.n	800287a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002864:	f7fe f8d8 	bl	8000a18 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e0b5      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287a:	4b3e      	ldr	r3, [pc, #248]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1ee      	bne.n	8002864 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002886:	7dfb      	ldrb	r3, [r7, #23]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288c:	4b39      	ldr	r3, [pc, #228]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	4a38      	ldr	r2, [pc, #224]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 8002892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002896:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 80a1 	beq.w	80029e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028a2:	4b34      	ldr	r3, [pc, #208]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d05c      	beq.n	8002968 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d141      	bne.n	800293a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b6:	4b31      	ldr	r3, [pc, #196]	; (800297c <HAL_RCC_OscConfig+0x478>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe f8ac 	bl	8000a18 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe f8a8 	bl	8000a18 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e087      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f0      	bne.n	80028c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69da      	ldr	r2, [r3, #28]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	019b      	lsls	r3, r3, #6
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f8:	085b      	lsrs	r3, r3, #1
 80028fa:	3b01      	subs	r3, #1
 80028fc:	041b      	lsls	r3, r3, #16
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	061b      	lsls	r3, r3, #24
 8002906:	491b      	ldr	r1, [pc, #108]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 8002908:	4313      	orrs	r3, r2
 800290a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800290c:	4b1b      	ldr	r3, [pc, #108]	; (800297c <HAL_RCC_OscConfig+0x478>)
 800290e:	2201      	movs	r2, #1
 8002910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002912:	f7fe f881 	bl	8000a18 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291a:	f7fe f87d 	bl	8000a18 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e05c      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0f0      	beq.n	800291a <HAL_RCC_OscConfig+0x416>
 8002938:	e054      	b.n	80029e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293a:	4b10      	ldr	r3, [pc, #64]	; (800297c <HAL_RCC_OscConfig+0x478>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002940:	f7fe f86a 	bl	8000a18 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002948:	f7fe f866 	bl	8000a18 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e045      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295a:	4b06      	ldr	r3, [pc, #24]	; (8002974 <HAL_RCC_OscConfig+0x470>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f0      	bne.n	8002948 <HAL_RCC_OscConfig+0x444>
 8002966:	e03d      	b.n	80029e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d107      	bne.n	8002980 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e038      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
 8002974:	40023800 	.word	0x40023800
 8002978:	40007000 	.word	0x40007000
 800297c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002980:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <HAL_RCC_OscConfig+0x4ec>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d028      	beq.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d121      	bne.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d11a      	bne.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029b0:	4013      	ands	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d111      	bne.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	3b01      	subs	r3, #1
 80029ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d107      	bne.n	80029e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d001      	beq.n	80029e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3718      	adds	r7, #24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800

080029f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0cc      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a08:	4b68      	ldr	r3, [pc, #416]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d90c      	bls.n	8002a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b65      	ldr	r3, [pc, #404]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b63      	ldr	r3, [pc, #396]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0b8      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0302 	and.w	r3, r3, #2
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d020      	beq.n	8002a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a48:	4b59      	ldr	r3, [pc, #356]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	4a58      	ldr	r2, [pc, #352]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a60:	4b53      	ldr	r3, [pc, #332]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	4a52      	ldr	r2, [pc, #328]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a6c:	4b50      	ldr	r3, [pc, #320]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	494d      	ldr	r1, [pc, #308]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d044      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d107      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a92:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d119      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e07f      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d003      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d107      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab2:	4b3f      	ldr	r3, [pc, #252]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d109      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e06f      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac2:	4b3b      	ldr	r3, [pc, #236]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e067      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad2:	4b37      	ldr	r3, [pc, #220]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f023 0203 	bic.w	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4934      	ldr	r1, [pc, #208]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae4:	f7fd ff98 	bl	8000a18 <HAL_GetTick>
 8002ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aec:	f7fd ff94 	bl	8000a18 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e04f      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b02:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 020c 	and.w	r2, r3, #12
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d1eb      	bne.n	8002aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b14:	4b25      	ldr	r3, [pc, #148]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d20c      	bcs.n	8002b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b22      	ldr	r3, [pc, #136]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	4b20      	ldr	r3, [pc, #128]	; (8002bac <HAL_RCC_ClockConfig+0x1b8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d001      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e032      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b48:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	4916      	ldr	r1, [pc, #88]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0308 	and.w	r3, r3, #8
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d009      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b66:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	490e      	ldr	r1, [pc, #56]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b7a:	f000 f821 	bl	8002bc0 <HAL_RCC_GetSysClockFreq>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	091b      	lsrs	r3, r3, #4
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	490a      	ldr	r1, [pc, #40]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8002b8c:	5ccb      	ldrb	r3, [r1, r3]
 8002b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b92:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b96:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_RCC_ClockConfig+0x1c8>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fd fef8 	bl	8000990 <HAL_InitTick>

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40023c00 	.word	0x40023c00
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	0800aaa4 	.word	0x0800aaa4
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	20000004 	.word	0x20000004

08002bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc4:	b090      	sub	sp, #64	; 0x40
 8002bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	637b      	str	r3, [r7, #52]	; 0x34
 8002bcc:	2300      	movs	r3, #0
 8002bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd8:	4b59      	ldr	r3, [pc, #356]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 030c 	and.w	r3, r3, #12
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d00d      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x40>
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	f200 80a1 	bhi.w	8002d2c <HAL_RCC_GetSysClockFreq+0x16c>
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d003      	beq.n	8002bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8002bf2:	e09b      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf4:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bf6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002bf8:	e09b      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bfa:	4b53      	ldr	r3, [pc, #332]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bfe:	e098      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c00:	4b4f      	ldr	r3, [pc, #316]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c08:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c0a:	4b4d      	ldr	r3, [pc, #308]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d028      	beq.n	8002c68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c16:	4b4a      	ldr	r3, [pc, #296]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	099b      	lsrs	r3, r3, #6
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	623b      	str	r3, [r7, #32]
 8002c20:	627a      	str	r2, [r7, #36]	; 0x24
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4b47      	ldr	r3, [pc, #284]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c2c:	fb03 f201 	mul.w	r2, r3, r1
 8002c30:	2300      	movs	r3, #0
 8002c32:	fb00 f303 	mul.w	r3, r0, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	4a43      	ldr	r2, [pc, #268]	; (8002d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c3a:	fba0 1202 	umull	r1, r2, r0, r2
 8002c3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c40:	460a      	mov	r2, r1
 8002c42:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c46:	4413      	add	r3, r2
 8002c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	61bb      	str	r3, [r7, #24]
 8002c50:	61fa      	str	r2, [r7, #28]
 8002c52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c5a:	f7fd fac9 	bl	80001f0 <__aeabi_uldivmod>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4613      	mov	r3, r2
 8002c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c66:	e053      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c68:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	099b      	lsrs	r3, r3, #6
 8002c6e:	2200      	movs	r2, #0
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	617a      	str	r2, [r7, #20]
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c7a:	f04f 0b00 	mov.w	fp, #0
 8002c7e:	4652      	mov	r2, sl
 8002c80:	465b      	mov	r3, fp
 8002c82:	f04f 0000 	mov.w	r0, #0
 8002c86:	f04f 0100 	mov.w	r1, #0
 8002c8a:	0159      	lsls	r1, r3, #5
 8002c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c90:	0150      	lsls	r0, r2, #5
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	ebb2 080a 	subs.w	r8, r2, sl
 8002c9a:	eb63 090b 	sbc.w	r9, r3, fp
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002caa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cb2:	ebb2 0408 	subs.w	r4, r2, r8
 8002cb6:	eb63 0509 	sbc.w	r5, r3, r9
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	00eb      	lsls	r3, r5, #3
 8002cc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cc8:	00e2      	lsls	r2, r4, #3
 8002cca:	4614      	mov	r4, r2
 8002ccc:	461d      	mov	r5, r3
 8002cce:	eb14 030a 	adds.w	r3, r4, sl
 8002cd2:	603b      	str	r3, [r7, #0]
 8002cd4:	eb45 030b 	adc.w	r3, r5, fp
 8002cd8:	607b      	str	r3, [r7, #4]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	028b      	lsls	r3, r1, #10
 8002cea:	4621      	mov	r1, r4
 8002cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	028a      	lsls	r2, r1, #10
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	60fa      	str	r2, [r7, #12]
 8002d00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d04:	f7fd fa74 	bl	80001f0 <__aeabi_uldivmod>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	0c1b      	lsrs	r3, r3, #16
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d2a:	e002      	b.n	8002d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3740      	adds	r7, #64	; 0x40
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800
 8002d44:	00f42400 	.word	0x00f42400
 8002d48:	017d7840 	.word	0x017d7840

08002d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d50:	4b03      	ldr	r3, [pc, #12]	; (8002d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d52:	681b      	ldr	r3, [r3, #0]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	20000000 	.word	0x20000000

08002d64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d64:	b084      	sub	sp, #16
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	f107 001c 	add.w	r0, r7, #28
 8002d72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d122      	bne.n	8002dc2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002da4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d105      	bne.n	8002db6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f001 fbee 	bl	8004598 <USB_CoreReset>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	73fb      	strb	r3, [r7, #15]
 8002dc0:	e01a      	b.n	8002df8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f001 fbe2 	bl	8004598 <USB_CoreReset>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	639a      	str	r2, [r3, #56]	; 0x38
 8002dea:	e005      	b.n	8002df8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d10b      	bne.n	8002e16 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f043 0206 	orr.w	r2, r3, #6
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f043 0220 	orr.w	r2, r3, #32
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e22:	b004      	add	sp, #16
 8002e24:	4770      	bx	lr
	...

08002e28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	4613      	mov	r3, r2
 8002e34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d165      	bne.n	8002f08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	4a41      	ldr	r2, [pc, #260]	; (8002f44 <USB_SetTurnaroundTime+0x11c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d906      	bls.n	8002e52 <USB_SetTurnaroundTime+0x2a>
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	4a40      	ldr	r2, [pc, #256]	; (8002f48 <USB_SetTurnaroundTime+0x120>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d202      	bcs.n	8002e52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002e4c:	230f      	movs	r3, #15
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	e062      	b.n	8002f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4a3c      	ldr	r2, [pc, #240]	; (8002f48 <USB_SetTurnaroundTime+0x120>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d306      	bcc.n	8002e68 <USB_SetTurnaroundTime+0x40>
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4a3b      	ldr	r2, [pc, #236]	; (8002f4c <USB_SetTurnaroundTime+0x124>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d202      	bcs.n	8002e68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e62:	230e      	movs	r3, #14
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e057      	b.n	8002f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	4a38      	ldr	r2, [pc, #224]	; (8002f4c <USB_SetTurnaroundTime+0x124>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d306      	bcc.n	8002e7e <USB_SetTurnaroundTime+0x56>
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4a37      	ldr	r2, [pc, #220]	; (8002f50 <USB_SetTurnaroundTime+0x128>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d202      	bcs.n	8002e7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e78:	230d      	movs	r3, #13
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	e04c      	b.n	8002f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	4a33      	ldr	r2, [pc, #204]	; (8002f50 <USB_SetTurnaroundTime+0x128>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d306      	bcc.n	8002e94 <USB_SetTurnaroundTime+0x6c>
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	4a32      	ldr	r2, [pc, #200]	; (8002f54 <USB_SetTurnaroundTime+0x12c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d802      	bhi.n	8002e94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e8e:	230c      	movs	r3, #12
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e041      	b.n	8002f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	4a2f      	ldr	r2, [pc, #188]	; (8002f54 <USB_SetTurnaroundTime+0x12c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d906      	bls.n	8002eaa <USB_SetTurnaroundTime+0x82>
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	4a2e      	ldr	r2, [pc, #184]	; (8002f58 <USB_SetTurnaroundTime+0x130>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d802      	bhi.n	8002eaa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002ea4:	230b      	movs	r3, #11
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	e036      	b.n	8002f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4a2a      	ldr	r2, [pc, #168]	; (8002f58 <USB_SetTurnaroundTime+0x130>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d906      	bls.n	8002ec0 <USB_SetTurnaroundTime+0x98>
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4a29      	ldr	r2, [pc, #164]	; (8002f5c <USB_SetTurnaroundTime+0x134>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d802      	bhi.n	8002ec0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002eba:	230a      	movs	r3, #10
 8002ebc:	617b      	str	r3, [r7, #20]
 8002ebe:	e02b      	b.n	8002f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <USB_SetTurnaroundTime+0x134>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d906      	bls.n	8002ed6 <USB_SetTurnaroundTime+0xae>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4a25      	ldr	r2, [pc, #148]	; (8002f60 <USB_SetTurnaroundTime+0x138>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d202      	bcs.n	8002ed6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002ed0:	2309      	movs	r3, #9
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	e020      	b.n	8002f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <USB_SetTurnaroundTime+0x138>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d306      	bcc.n	8002eec <USB_SetTurnaroundTime+0xc4>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4a20      	ldr	r2, [pc, #128]	; (8002f64 <USB_SetTurnaroundTime+0x13c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d802      	bhi.n	8002eec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002ee6:	2308      	movs	r3, #8
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	e015      	b.n	8002f18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <USB_SetTurnaroundTime+0x13c>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d906      	bls.n	8002f02 <USB_SetTurnaroundTime+0xda>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <USB_SetTurnaroundTime+0x140>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d202      	bcs.n	8002f02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002efc:	2307      	movs	r3, #7
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	e00a      	b.n	8002f18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002f02:	2306      	movs	r3, #6
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	e007      	b.n	8002f18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d102      	bne.n	8002f14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002f0e:	2309      	movs	r3, #9
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	e001      	b.n	8002f18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002f14:	2309      	movs	r3, #9
 8002f16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	029b      	lsls	r3, r3, #10
 8002f2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	00d8acbf 	.word	0x00d8acbf
 8002f48:	00e4e1c0 	.word	0x00e4e1c0
 8002f4c:	00f42400 	.word	0x00f42400
 8002f50:	01067380 	.word	0x01067380
 8002f54:	011a499f 	.word	0x011a499f
 8002f58:	01312cff 	.word	0x01312cff
 8002f5c:	014ca43f 	.word	0x014ca43f
 8002f60:	016e3600 	.word	0x016e3600
 8002f64:	01a6ab1f 	.word	0x01a6ab1f
 8002f68:	01e84800 	.word	0x01e84800

08002f6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f023 0201 	bic.w	r2, r3, #1
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d115      	bne.n	8002ffe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f7fd fd26 	bl	8000a30 <HAL_Delay>
      ms++;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f001 fa45 	bl	800447a <USB_GetMode>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d01e      	beq.n	8003034 <USB_SetCurrentMode+0x84>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b31      	cmp	r3, #49	; 0x31
 8002ffa:	d9f0      	bls.n	8002fde <USB_SetCurrentMode+0x2e>
 8002ffc:	e01a      	b.n	8003034 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d115      	bne.n	8003030 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003010:	2001      	movs	r0, #1
 8003012:	f7fd fd0d 	bl	8000a30 <HAL_Delay>
      ms++;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3301      	adds	r3, #1
 800301a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f001 fa2c 	bl	800447a <USB_GetMode>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <USB_SetCurrentMode+0x84>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b31      	cmp	r3, #49	; 0x31
 800302c:	d9f0      	bls.n	8003010 <USB_SetCurrentMode+0x60>
 800302e:	e001      	b.n	8003034 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e005      	b.n	8003040 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b32      	cmp	r3, #50	; 0x32
 8003038:	d101      	bne.n	800303e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003048:	b084      	sub	sp, #16
 800304a:	b580      	push	{r7, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
 8003052:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003056:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
 8003066:	e009      	b.n	800307c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	3340      	adds	r3, #64	; 0x40
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	4413      	add	r3, r2
 8003072:	2200      	movs	r2, #0
 8003074:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	3301      	adds	r3, #1
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b0e      	cmp	r3, #14
 8003080:	d9f2      	bls.n	8003068 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003084:	2b00      	cmp	r3, #0
 8003086:	d11c      	bne.n	80030c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003096:	f043 0302 	orr.w	r3, r3, #2
 800309a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	639a      	str	r2, [r3, #56]	; 0x38
 80030c0:	e00b      	b.n	80030da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80030e0:	461a      	mov	r2, r3
 80030e2:	2300      	movs	r3, #0
 80030e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ec:	4619      	mov	r1, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f4:	461a      	mov	r2, r3
 80030f6:	680b      	ldr	r3, [r1, #0]
 80030f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d10c      	bne.n	800311a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003102:	2b00      	cmp	r3, #0
 8003104:	d104      	bne.n	8003110 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003106:	2100      	movs	r1, #0
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f965 	bl	80033d8 <USB_SetDevSpeed>
 800310e:	e008      	b.n	8003122 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003110:	2101      	movs	r1, #1
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f960 	bl	80033d8 <USB_SetDevSpeed>
 8003118:	e003      	b.n	8003122 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800311a:	2103      	movs	r1, #3
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f95b 	bl	80033d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003122:	2110      	movs	r1, #16
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f8f3 	bl	8003310 <USB_FlushTxFifo>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 f91f 	bl	8003378 <USB_FlushRxFifo>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800314a:	461a      	mov	r2, r3
 800314c:	2300      	movs	r3, #0
 800314e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003156:	461a      	mov	r2, r3
 8003158:	2300      	movs	r3, #0
 800315a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003162:	461a      	mov	r2, r3
 8003164:	2300      	movs	r3, #0
 8003166:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	e043      	b.n	80031f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003180:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003184:	d118      	bne.n	80031b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10a      	bne.n	80031a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003198:	461a      	mov	r2, r3
 800319a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	e013      	b.n	80031ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ae:	461a      	mov	r2, r3
 80031b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	e008      	b.n	80031ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	015a      	lsls	r2, r3, #5
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c4:	461a      	mov	r2, r3
 80031c6:	2300      	movs	r3, #0
 80031c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d6:	461a      	mov	r2, r3
 80031d8:	2300      	movs	r3, #0
 80031da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	461a      	mov	r2, r3
 80031ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	3301      	adds	r3, #1
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d3b7      	bcc.n	800316e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031fe:	2300      	movs	r3, #0
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	e043      	b.n	800328c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003216:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800321a:	d118      	bne.n	800324e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10a      	bne.n	8003238 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322e:	461a      	mov	r2, r3
 8003230:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	e013      	b.n	8003260 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003244:	461a      	mov	r2, r3
 8003246:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800324a:	6013      	str	r3, [r2, #0]
 800324c:	e008      	b.n	8003260 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325a:	461a      	mov	r2, r3
 800325c:	2300      	movs	r3, #0
 800325e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	015a      	lsls	r2, r3, #5
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4413      	add	r3, r2
 8003268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326c:	461a      	mov	r2, r3
 800326e:	2300      	movs	r3, #0
 8003270:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327e:	461a      	mov	r2, r3
 8003280:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003284:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	3301      	adds	r3, #1
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	429a      	cmp	r2, r3
 8003292:	d3b7      	bcc.n	8003204 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80032b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80032b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d105      	bne.n	80032c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f043 0210 	orr.w	r2, r3, #16
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	4b0f      	ldr	r3, [pc, #60]	; (800330c <USB_DevInit+0x2c4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80032d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d005      	beq.n	80032e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f043 0208 	orr.w	r2, r3, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80032e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d107      	bne.n	80032fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699b      	ldr	r3, [r3, #24]
 80032f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032f4:	f043 0304 	orr.w	r3, r3, #4
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003308:	b004      	add	sp, #16
 800330a:	4770      	bx	lr
 800330c:	803c3800 	.word	0x803c3800

08003310 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	3301      	adds	r3, #1
 8003322:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a13      	ldr	r2, [pc, #76]	; (8003374 <USB_FlushTxFifo+0x64>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d901      	bls.n	8003330 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e01b      	b.n	8003368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	daf2      	bge.n	800331e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	019b      	lsls	r3, r3, #6
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3301      	adds	r3, #1
 800334c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4a08      	ldr	r2, [pc, #32]	; (8003374 <USB_FlushTxFifo+0x64>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e006      	b.n	8003368 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f003 0320 	and.w	r3, r3, #32
 8003362:	2b20      	cmp	r3, #32
 8003364:	d0f0      	beq.n	8003348 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3714      	adds	r7, #20
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	00030d40 	.word	0x00030d40

08003378 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	3301      	adds	r3, #1
 8003388:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <USB_FlushRxFifo+0x5c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d901      	bls.n	8003396 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e018      	b.n	80033c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	daf2      	bge.n	8003384 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2210      	movs	r2, #16
 80033a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3301      	adds	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4a08      	ldr	r2, [pc, #32]	; (80033d4 <USB_FlushRxFifo+0x5c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e006      	b.n	80033c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	2b10      	cmp	r3, #16
 80033c4:	d0f0      	beq.n	80033a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	00030d40 	.word	0x00030d40

080033d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	460b      	mov	r3, r1
 80033e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	68f9      	ldr	r1, [r7, #12]
 80033f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033f8:	4313      	orrs	r3, r2
 80033fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr

0800340a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800340a:	b480      	push	{r7}
 800340c:	b087      	sub	sp, #28
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0306 	and.w	r3, r3, #6
 8003422:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d102      	bne.n	8003430 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]
 800342e:	e00a      	b.n	8003446 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d002      	beq.n	800343c <USB_GetDevSpeed+0x32>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b06      	cmp	r3, #6
 800343a:	d102      	bne.n	8003442 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800343c:	2302      	movs	r3, #2
 800343e:	75fb      	strb	r3, [r7, #23]
 8003440:	e001      	b.n	8003446 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003442:	230f      	movs	r3, #15
 8003444:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003446:	7dfb      	ldrb	r3, [r7, #23]
}
 8003448:	4618      	mov	r0, r3
 800344a:	371c      	adds	r7, #28
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	785b      	ldrb	r3, [r3, #1]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d13a      	bne.n	80034e6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003476:	69da      	ldr	r2, [r3, #28]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	2101      	movs	r1, #1
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	b29b      	uxth	r3, r3
 8003488:	68f9      	ldr	r1, [r7, #12]
 800348a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800348e:	4313      	orrs	r3, r2
 8003490:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	015a      	lsls	r2, r3, #5
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4413      	add	r3, r2
 800349a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d155      	bne.n	8003554 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	015a      	lsls	r2, r3, #5
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4413      	add	r3, r2
 80034b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	791b      	ldrb	r3, [r3, #4]
 80034c2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034c4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	059b      	lsls	r3, r3, #22
 80034ca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034cc:	4313      	orrs	r3, r2
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	0151      	lsls	r1, r2, #5
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	440a      	add	r2, r1
 80034d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	e036      	b.n	8003554 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ec:	69da      	ldr	r2, [r3, #28]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	2101      	movs	r1, #1
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	68f9      	ldr	r1, [r7, #12]
 8003500:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003504:	4313      	orrs	r3, r2
 8003506:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d11a      	bne.n	8003554 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	791b      	ldrb	r3, [r3, #4]
 8003538:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800353a:	430b      	orrs	r3, r1
 800353c:	4313      	orrs	r3, r2
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	0151      	lsls	r1, r2, #5
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	440a      	add	r2, r1
 8003546:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800354a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003552:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
	...

08003564 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	785b      	ldrb	r3, [r3, #1]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d161      	bne.n	8003644 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003592:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003596:	d11f      	bne.n	80035d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	0151      	lsls	r1, r2, #5
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	440a      	add	r2, r1
 80035ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80035b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	0151      	lsls	r1, r2, #5
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	440a      	add	r2, r1
 80035ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	2101      	movs	r1, #1
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	68f9      	ldr	r1, [r7, #12]
 80035f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035f8:	4013      	ands	r3, r2
 80035fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003602:	69da      	ldr	r2, [r3, #28]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	f003 030f 	and.w	r3, r3, #15
 800360c:	2101      	movs	r1, #1
 800360e:	fa01 f303 	lsl.w	r3, r1, r3
 8003612:	b29b      	uxth	r3, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	68f9      	ldr	r1, [r7, #12]
 8003618:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800361c:	4013      	ands	r3, r2
 800361e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4413      	add	r3, r2
 8003628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	0159      	lsls	r1, r3, #5
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	440b      	add	r3, r1
 8003636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363a:	4619      	mov	r1, r3
 800363c:	4b35      	ldr	r3, [pc, #212]	; (8003714 <USB_DeactivateEndpoint+0x1b0>)
 800363e:	4013      	ands	r3, r2
 8003640:	600b      	str	r3, [r1, #0]
 8003642:	e060      	b.n	8003706 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003656:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800365a:	d11f      	bne.n	800369c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	0151      	lsls	r1, r2, #5
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	440a      	add	r2, r1
 8003672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003676:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800367a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	0151      	lsls	r1, r2, #5
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	440a      	add	r2, r1
 8003692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003696:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800369a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	041b      	lsls	r3, r3, #16
 80036b4:	43db      	mvns	r3, r3
 80036b6:	68f9      	ldr	r1, [r7, #12]
 80036b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036bc:	4013      	ands	r3, r2
 80036be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c6:	69da      	ldr	r2, [r3, #28]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	f003 030f 	and.w	r3, r3, #15
 80036d0:	2101      	movs	r1, #1
 80036d2:	fa01 f303 	lsl.w	r3, r1, r3
 80036d6:	041b      	lsls	r3, r3, #16
 80036d8:	43db      	mvns	r3, r3
 80036da:	68f9      	ldr	r1, [r7, #12]
 80036dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036e0:	4013      	ands	r3, r2
 80036e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	0159      	lsls	r1, r3, #5
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	440b      	add	r3, r1
 80036fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fe:	4619      	mov	r1, r3
 8003700:	4b05      	ldr	r3, [pc, #20]	; (8003718 <USB_DeactivateEndpoint+0x1b4>)
 8003702:	4013      	ands	r3, r2
 8003704:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	ec337800 	.word	0xec337800
 8003718:	eff37800 	.word	0xeff37800

0800371c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b08a      	sub	sp, #40	; 0x28
 8003720:	af02      	add	r7, sp, #8
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	4613      	mov	r3, r2
 8003728:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	785b      	ldrb	r3, [r3, #1]
 8003738:	2b01      	cmp	r3, #1
 800373a:	f040 815c 	bne.w	80039f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d132      	bne.n	80037ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	440a      	add	r2, r1
 800375c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003760:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003764:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003768:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	015a      	lsls	r2, r3, #5
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	4413      	add	r3, r2
 8003772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	0151      	lsls	r1, r2, #5
 800377c:	69fa      	ldr	r2, [r7, #28]
 800377e:	440a      	add	r2, r1
 8003780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003784:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003788:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	015a      	lsls	r2, r3, #5
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	4413      	add	r3, r2
 8003792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	0151      	lsls	r1, r2, #5
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	440a      	add	r2, r1
 80037a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037a4:	0cdb      	lsrs	r3, r3, #19
 80037a6:	04db      	lsls	r3, r3, #19
 80037a8:	6113      	str	r3, [r2, #16]
 80037aa:	e074      	b.n	8003896 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	0151      	lsls	r1, r2, #5
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	440a      	add	r2, r1
 80037c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037c6:	0cdb      	lsrs	r3, r3, #19
 80037c8:	04db      	lsls	r3, r3, #19
 80037ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	0151      	lsls	r1, r2, #5
 80037de:	69fa      	ldr	r2, [r7, #28]
 80037e0:	440a      	add	r2, r1
 80037e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	6999      	ldr	r1, [r3, #24]
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	440b      	add	r3, r1
 8003808:	1e59      	subs	r1, r3, #1
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003812:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003814:	4b9d      	ldr	r3, [pc, #628]	; (8003a8c <USB_EPStartXfer+0x370>)
 8003816:	400b      	ands	r3, r1
 8003818:	69b9      	ldr	r1, [r7, #24]
 800381a:	0148      	lsls	r0, r1, #5
 800381c:	69f9      	ldr	r1, [r7, #28]
 800381e:	4401      	add	r1, r0
 8003820:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003824:	4313      	orrs	r3, r2
 8003826:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003834:	691a      	ldr	r2, [r3, #16]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383e:	69b9      	ldr	r1, [r7, #24]
 8003840:	0148      	lsls	r0, r1, #5
 8003842:	69f9      	ldr	r1, [r7, #28]
 8003844:	4401      	add	r1, r0
 8003846:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800384a:	4313      	orrs	r3, r2
 800384c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	791b      	ldrb	r3, [r3, #4]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d11f      	bne.n	8003896 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	0151      	lsls	r1, r2, #5
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	440a      	add	r2, r1
 800386c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003870:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003874:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	0151      	lsls	r1, r2, #5
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	440a      	add	r2, r1
 800388c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003890:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003894:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d14b      	bne.n	8003934 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d009      	beq.n	80038b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b0:	461a      	mov	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	791b      	ldrb	r3, [r3, #4]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d128      	bne.n	8003912 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d110      	bne.n	80038f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	0151      	lsls	r1, r2, #5
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	440a      	add	r2, r1
 80038e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038ee:	6013      	str	r3, [r2, #0]
 80038f0:	e00f      	b.n	8003912 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	0151      	lsls	r1, r2, #5
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	440a      	add	r2, r1
 8003908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800390c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003910:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	0151      	lsls	r1, r2, #5
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	440a      	add	r2, r1
 8003928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800392c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e133      	b.n	8003b9c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	4413      	add	r3, r2
 800393c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	0151      	lsls	r1, r2, #5
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	440a      	add	r2, r1
 800394a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800394e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003952:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	791b      	ldrb	r3, [r3, #4]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d015      	beq.n	8003988 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 811b 	beq.w	8003b9c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	2101      	movs	r1, #1
 8003978:	fa01 f303 	lsl.w	r3, r1, r3
 800397c:	69f9      	ldr	r1, [r7, #28]
 800397e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003982:	4313      	orrs	r3, r2
 8003984:	634b      	str	r3, [r1, #52]	; 0x34
 8003986:	e109      	b.n	8003b9c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d110      	bne.n	80039ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	e00f      	b.n	80039da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	0151      	lsls	r1, r2, #5
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	440a      	add	r2, r1
 80039d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	6919      	ldr	r1, [r3, #16]
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	781a      	ldrb	r2, [r3, #0]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	b298      	uxth	r0, r3
 80039e8:	79fb      	ldrb	r3, [r7, #7]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	4603      	mov	r3, r0
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 fade 	bl	8003fb0 <USB_WritePacket>
 80039f4:	e0d2      	b.n	8003b9c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	0151      	lsls	r1, r2, #5
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	440a      	add	r2, r1
 8003a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a10:	0cdb      	lsrs	r3, r3, #19
 8003a12:	04db      	lsls	r3, r3, #19
 8003a14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	0151      	lsls	r1, r2, #5
 8003a28:	69fa      	ldr	r2, [r7, #28]
 8003a2a:	440a      	add	r2, r1
 8003a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d126      	bne.n	8003a90 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a58:	69b9      	ldr	r1, [r7, #24]
 8003a5a:	0148      	lsls	r0, r1, #5
 8003a5c:	69f9      	ldr	r1, [r7, #28]
 8003a5e:	4401      	add	r1, r0
 8003a60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a64:	4313      	orrs	r3, r2
 8003a66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	0151      	lsls	r1, r2, #5
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	440a      	add	r2, r1
 8003a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a86:	6113      	str	r3, [r2, #16]
 8003a88:	e03a      	b.n	8003b00 <USB_EPStartXfer+0x3e4>
 8003a8a:	bf00      	nop
 8003a8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	699a      	ldr	r2, [r3, #24]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4413      	add	r3, r2
 8003a9a:	1e5a      	subs	r2, r3, #1
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	8afa      	ldrh	r2, [r7, #22]
 8003aac:	fb03 f202 	mul.w	r2, r3, r2
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	8afb      	ldrh	r3, [r7, #22]
 8003ac4:	04d9      	lsls	r1, r3, #19
 8003ac6:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <USB_EPStartXfer+0x48c>)
 8003ac8:	400b      	ands	r3, r1
 8003aca:	69b9      	ldr	r1, [r7, #24]
 8003acc:	0148      	lsls	r0, r1, #5
 8003ace:	69f9      	ldr	r1, [r7, #28]
 8003ad0:	4401      	add	r1, r0
 8003ad2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af0:	69b9      	ldr	r1, [r7, #24]
 8003af2:	0148      	lsls	r0, r1, #5
 8003af4:	69f9      	ldr	r1, [r7, #28]
 8003af6:	4401      	add	r1, r0
 8003af8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003afc:	4313      	orrs	r3, r2
 8003afe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d10d      	bne.n	8003b22 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	6919      	ldr	r1, [r3, #16]
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1e:	460a      	mov	r2, r1
 8003b20:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	791b      	ldrb	r3, [r3, #4]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d128      	bne.n	8003b7c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d110      	bne.n	8003b5c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	0151      	lsls	r1, r2, #5
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	440a      	add	r2, r1
 8003b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e00f      	b.n	8003b7c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	1ff80000 	.word	0x1ff80000

08003bac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	785b      	ldrb	r3, [r3, #1]
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	f040 80ce 	bne.w	8003d6a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d132      	bne.n	8003c3c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	0151      	lsls	r1, r2, #5
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	440a      	add	r2, r1
 8003bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bf0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bf4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	0151      	lsls	r1, r2, #5
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	440a      	add	r2, r1
 8003c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	015a      	lsls	r2, r3, #5
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	4413      	add	r3, r2
 8003c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	0151      	lsls	r1, r2, #5
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	440a      	add	r2, r1
 8003c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c34:	0cdb      	lsrs	r3, r3, #19
 8003c36:	04db      	lsls	r3, r3, #19
 8003c38:	6113      	str	r3, [r2, #16]
 8003c3a:	e04e      	b.n	8003cda <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	015a      	lsls	r2, r3, #5
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	4413      	add	r3, r2
 8003c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	0151      	lsls	r1, r2, #5
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	440a      	add	r2, r1
 8003c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c56:	0cdb      	lsrs	r3, r3, #19
 8003c58:	04db      	lsls	r3, r3, #19
 8003c5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	0151      	lsls	r1, r2, #5
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	440a      	add	r2, r1
 8003c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c7e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	699a      	ldr	r2, [r3, #24]
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d903      	bls.n	8003c94 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	0151      	lsls	r1, r2, #5
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	440a      	add	r2, r1
 8003caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cca:	6939      	ldr	r1, [r7, #16]
 8003ccc:	0148      	lsls	r0, r1, #5
 8003cce:	6979      	ldr	r1, [r7, #20]
 8003cd0:	4401      	add	r1, r0
 8003cd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003cda:	79fb      	ldrb	r3, [r7, #7]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d11e      	bne.n	8003d1e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d009      	beq.n	8003cfc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	015a      	lsls	r2, r3, #5
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	4413      	add	r3, r2
 8003d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	0151      	lsls	r1, r2, #5
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	440a      	add	r2, r1
 8003d12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	e097      	b.n	8003e4e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	0151      	lsls	r1, r2, #5
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	440a      	add	r2, r1
 8003d34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d3c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 8083 	beq.w	8003e4e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	2101      	movs	r1, #1
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	6979      	ldr	r1, [r7, #20]
 8003d60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d64:	4313      	orrs	r3, r2
 8003d66:	634b      	str	r3, [r1, #52]	; 0x34
 8003d68:	e071      	b.n	8003e4e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	0151      	lsls	r1, r2, #5
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	440a      	add	r2, r1
 8003d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d84:	0cdb      	lsrs	r3, r3, #19
 8003d86:	04db      	lsls	r3, r3, #19
 8003d88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	0151      	lsls	r1, r2, #5
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	440a      	add	r2, r1
 8003da0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003da4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003da8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003dac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	0151      	lsls	r1, r2, #5
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	440a      	add	r2, r1
 8003ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003de0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003de4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfc:	6939      	ldr	r1, [r7, #16]
 8003dfe:	0148      	lsls	r0, r1, #5
 8003e00:	6979      	ldr	r1, [r7, #20]
 8003e02:	4401      	add	r1, r0
 8003e04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d10d      	bne.n	8003e2e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d009      	beq.n	8003e2e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	6919      	ldr	r1, [r3, #16]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2a:	460a      	mov	r2, r1
 8003e2c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	0151      	lsls	r1, r2, #5
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	440a      	add	r2, r1
 8003e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	785b      	ldrb	r3, [r3, #1]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d14a      	bne.n	8003f10 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e92:	f040 8086 	bne.w	8003fa2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	7812      	ldrb	r2, [r2, #0]
 8003eaa:	0151      	lsls	r1, r2, #5
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	440a      	add	r2, r1
 8003eb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003eb8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	015a      	lsls	r2, r3, #5
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	7812      	ldrb	r2, [r2, #0]
 8003ece:	0151      	lsls	r1, r2, #5
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	440a      	add	r2, r1
 8003ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ed8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003edc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f242 7210 	movw	r2, #10000	; 0x2710
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d902      	bls.n	8003ef4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	75fb      	strb	r3, [r7, #23]
          break;
 8003ef2:	e056      	b.n	8003fa2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f0c:	d0e7      	beq.n	8003ede <USB_EPStopXfer+0x82>
 8003f0e:	e048      	b.n	8003fa2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f28:	d13b      	bne.n	8003fa2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	7812      	ldrb	r2, [r2, #0]
 8003f3e:	0151      	lsls	r1, r2, #5
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	440a      	add	r2, r1
 8003f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f4c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	7812      	ldrb	r2, [r2, #0]
 8003f62:	0151      	lsls	r1, r2, #5
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	440a      	add	r2, r1
 8003f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	3301      	adds	r3, #1
 8003f76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d902      	bls.n	8003f88 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	75fb      	strb	r3, [r7, #23]
          break;
 8003f86:	e00c      	b.n	8003fa2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	015a      	lsls	r2, r3, #5
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4413      	add	r3, r2
 8003f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fa0:	d0e7      	beq.n	8003f72 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	371c      	adds	r7, #28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b089      	sub	sp, #36	; 0x24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	4611      	mov	r1, r2
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	71fb      	strb	r3, [r7, #7]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003fce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d123      	bne.n	800401e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003fd6:	88bb      	ldrh	r3, [r7, #4]
 8003fd8:	3303      	adds	r3, #3
 8003fda:	089b      	lsrs	r3, r3, #2
 8003fdc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	e018      	b.n	8004016 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	031a      	lsls	r2, r3, #12
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	3301      	adds	r3, #1
 8004002:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	3301      	adds	r3, #1
 8004008:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3301      	adds	r3, #1
 800400e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	3301      	adds	r3, #1
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	429a      	cmp	r2, r3
 800401c:	d3e2      	bcc.n	8003fe4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3724      	adds	r7, #36	; 0x24
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800402c:	b480      	push	{r7}
 800402e:	b08b      	sub	sp, #44	; 0x2c
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	4613      	mov	r3, r2
 8004038:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004042:	88fb      	ldrh	r3, [r7, #6]
 8004044:	089b      	lsrs	r3, r3, #2
 8004046:	b29b      	uxth	r3, r3
 8004048:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004052:	2300      	movs	r3, #0
 8004054:	623b      	str	r3, [r7, #32]
 8004056:	e014      	b.n	8004082 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	601a      	str	r2, [r3, #0]
    pDest++;
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	3301      	adds	r3, #1
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	3301      	adds	r3, #1
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	3301      	adds	r3, #1
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	3301      	adds	r3, #1
 800407a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	3301      	adds	r3, #1
 8004080:	623b      	str	r3, [r7, #32]
 8004082:	6a3a      	ldr	r2, [r7, #32]
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	429a      	cmp	r2, r3
 8004088:	d3e6      	bcc.n	8004058 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800408a:	8bfb      	ldrh	r3, [r7, #30]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01e      	beq.n	80040ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409a:	461a      	mov	r2, r3
 800409c:	f107 0310 	add.w	r3, r7, #16
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	701a      	strb	r2, [r3, #0]
      i++;
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	3301      	adds	r3, #1
 80040ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80040bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040be:	3301      	adds	r3, #1
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80040c2:	8bfb      	ldrh	r3, [r7, #30]
 80040c4:	3b01      	subs	r3, #1
 80040c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80040c8:	8bfb      	ldrh	r3, [r7, #30]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1ea      	bne.n	80040a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	372c      	adds	r7, #44	; 0x2c
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	785b      	ldrb	r3, [r3, #1]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d12c      	bne.n	8004152 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	db12      	blt.n	8004130 <USB_EPSetStall+0x54>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00f      	beq.n	8004130 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	015a      	lsls	r2, r3, #5
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4413      	add	r3, r2
 8004118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	0151      	lsls	r1, r2, #5
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	440a      	add	r2, r1
 8004126:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800412e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68ba      	ldr	r2, [r7, #8]
 8004140:	0151      	lsls	r1, r2, #5
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	440a      	add	r2, r1
 8004146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	e02b      	b.n	80041aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	db12      	blt.n	800418a <USB_EPSetStall+0xae>
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00f      	beq.n	800418a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	0151      	lsls	r1, r2, #5
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	440a      	add	r2, r1
 8004180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004184:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004188:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68ba      	ldr	r2, [r7, #8]
 800419a:	0151      	lsls	r1, r2, #5
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	440a      	add	r2, r1
 80041a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	785b      	ldrb	r3, [r3, #1]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d128      	bne.n	8004226 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	0151      	lsls	r1, r2, #5
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	440a      	add	r2, r1
 80041ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	791b      	ldrb	r3, [r3, #4]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d003      	beq.n	8004204 <USB_EPClearStall+0x4c>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	791b      	ldrb	r3, [r3, #4]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d138      	bne.n	8004276 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	015a      	lsls	r2, r3, #5
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	0151      	lsls	r1, r2, #5
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	440a      	add	r2, r1
 800421a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800421e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	e027      	b.n	8004276 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	0151      	lsls	r1, r2, #5
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	440a      	add	r2, r1
 800423c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004240:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004244:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	791b      	ldrb	r3, [r3, #4]
 800424a:	2b03      	cmp	r3, #3
 800424c:	d003      	beq.n	8004256 <USB_EPClearStall+0x9e>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	791b      	ldrb	r3, [r3, #4]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d10f      	bne.n	8004276 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	440a      	add	r2, r1
 800426c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004274:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80042b8:	68f9      	ldr	r1, [r7, #12]
 80042ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3714      	adds	r7, #20
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042ea:	f023 0303 	bic.w	r3, r3, #3
 80042ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042fe:	f023 0302 	bic.w	r3, r3, #2
 8004302:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004312:	b480      	push	{r7}
 8004314:	b085      	sub	sp, #20
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800432c:	f023 0303 	bic.w	r3, r3, #3
 8004330:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004340:	f043 0302 	orr.w	r3, r3, #2
 8004344:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	695b      	ldr	r3, [r3, #20]
 8004360:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4013      	ands	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800436c:	68fb      	ldr	r3, [r7, #12]
}
 800436e:	4618      	mov	r0, r3
 8004370:	3714      	adds	r7, #20
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800437a:	b480      	push	{r7}
 800437c:	b085      	sub	sp, #20
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438c:	699b      	ldr	r3, [r3, #24]
 800438e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	4013      	ands	r3, r2
 800439c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	0c1b      	lsrs	r3, r3, #16
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	4013      	ands	r3, r2
 80043d0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	b29b      	uxth	r3, r3
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b085      	sub	sp, #20
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	460b      	mov	r3, r1
 80043ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80043f2:	78fb      	ldrb	r3, [r7, #3]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	4013      	ands	r3, r2
 800440e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004410:	68bb      	ldr	r3, [r7, #8]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800441e:	b480      	push	{r7}
 8004420:	b087      	sub	sp, #28
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	460b      	mov	r3, r1
 8004428:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004440:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	f003 030f 	and.w	r3, r3, #15
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	fa22 f303 	lsr.w	r3, r2, r3
 800444e:	01db      	lsls	r3, r3, #7
 8004450:	b2db      	uxtb	r3, r3
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004458:	78fb      	ldrb	r3, [r7, #3]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4013      	ands	r3, r2
 800446a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800446c:	68bb      	ldr	r3, [r7, #8]
}
 800446e:	4618      	mov	r0, r3
 8004470:	371c      	adds	r7, #28
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0301 	and.w	r3, r3, #1
}
 800448a:	4618      	mov	r0, r3
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004496:	b480      	push	{r7}
 8004498:	b085      	sub	sp, #20
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044b4:	f023 0307 	bic.w	r3, r3, #7
 80044b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80044dc:	b480      	push	{r7}
 80044de:	b087      	sub	sp, #28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	460b      	mov	r3, r1
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	333c      	adds	r3, #60	; 0x3c
 80044f2:	3304      	adds	r3, #4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	4a26      	ldr	r2, [pc, #152]	; (8004594 <USB_EP0_OutStart+0xb8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d90a      	bls.n	8004516 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800450c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004510:	d101      	bne.n	8004516 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	e037      	b.n	8004586 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451c:	461a      	mov	r2, r3
 800451e:	2300      	movs	r3, #0
 8004520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004530:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004534:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004544:	f043 0318 	orr.w	r3, r3, #24
 8004548:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004558:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800455c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800455e:	7afb      	ldrb	r3, [r7, #11]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d10f      	bne.n	8004584 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456a:	461a      	mov	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	697a      	ldr	r2, [r7, #20]
 800457a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800457e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004582:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	371c      	adds	r7, #28
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	4f54300a 	.word	0x4f54300a

08004598 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045a0:	2300      	movs	r3, #0
 80045a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3301      	adds	r3, #1
 80045a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	4a13      	ldr	r2, [pc, #76]	; (80045fc <USB_CoreReset+0x64>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e01b      	b.n	80045ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	daf2      	bge.n	80045a4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045be:	2300      	movs	r3, #0
 80045c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f043 0201 	orr.w	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	3301      	adds	r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	4a09      	ldr	r2, [pc, #36]	; (80045fc <USB_CoreReset+0x64>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e006      	b.n	80045ee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d0f0      	beq.n	80045ce <USB_CoreReset+0x36>

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	00030d40 	.word	0x00030d40

08004600 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	460b      	mov	r3, r1
 800460a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800460c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004610:	f006 f890 	bl	800a734 <USBD_static_malloc>
 8004614:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d109      	bne.n	8004630 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	32b0      	adds	r2, #176	; 0xb0
 8004626:	2100      	movs	r1, #0
 8004628:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800462c:	2302      	movs	r3, #2
 800462e:	e0d4      	b.n	80047da <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004630:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004634:	2100      	movs	r1, #0
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f006 f8f4 	bl	800a824 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	32b0      	adds	r2, #176	; 0xb0
 8004646:	68f9      	ldr	r1, [r7, #12]
 8004648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	32b0      	adds	r2, #176	; 0xb0
 8004656:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	7c1b      	ldrb	r3, [r3, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d138      	bne.n	80046da <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004668:	4b5e      	ldr	r3, [pc, #376]	; (80047e4 <USBD_CDC_Init+0x1e4>)
 800466a:	7819      	ldrb	r1, [r3, #0]
 800466c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004670:	2202      	movs	r2, #2
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f005 ff3b 	bl	800a4ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004678:	4b5a      	ldr	r3, [pc, #360]	; (80047e4 <USBD_CDC_Init+0x1e4>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	f003 020f 	and.w	r2, r3, #15
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	440b      	add	r3, r1
 800468c:	3324      	adds	r3, #36	; 0x24
 800468e:	2201      	movs	r2, #1
 8004690:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004692:	4b55      	ldr	r3, [pc, #340]	; (80047e8 <USBD_CDC_Init+0x1e8>)
 8004694:	7819      	ldrb	r1, [r3, #0]
 8004696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800469a:	2202      	movs	r2, #2
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f005 ff26 	bl	800a4ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80046a2:	4b51      	ldr	r3, [pc, #324]	; (80047e8 <USBD_CDC_Init+0x1e8>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	f003 020f 	and.w	r2, r3, #15
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80046ba:	2201      	movs	r2, #1
 80046bc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80046be:	4b4b      	ldr	r3, [pc, #300]	; (80047ec <USBD_CDC_Init+0x1ec>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	f003 020f 	and.w	r2, r3, #15
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	3326      	adds	r3, #38	; 0x26
 80046d4:	2210      	movs	r2, #16
 80046d6:	801a      	strh	r2, [r3, #0]
 80046d8:	e035      	b.n	8004746 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80046da:	4b42      	ldr	r3, [pc, #264]	; (80047e4 <USBD_CDC_Init+0x1e4>)
 80046dc:	7819      	ldrb	r1, [r3, #0]
 80046de:	2340      	movs	r3, #64	; 0x40
 80046e0:	2202      	movs	r2, #2
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f005 ff03 	bl	800a4ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80046e8:	4b3e      	ldr	r3, [pc, #248]	; (80047e4 <USBD_CDC_Init+0x1e4>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	f003 020f 	and.w	r2, r3, #15
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	3324      	adds	r3, #36	; 0x24
 80046fe:	2201      	movs	r2, #1
 8004700:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004702:	4b39      	ldr	r3, [pc, #228]	; (80047e8 <USBD_CDC_Init+0x1e8>)
 8004704:	7819      	ldrb	r1, [r3, #0]
 8004706:	2340      	movs	r3, #64	; 0x40
 8004708:	2202      	movs	r2, #2
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f005 feef 	bl	800a4ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004710:	4b35      	ldr	r3, [pc, #212]	; (80047e8 <USBD_CDC_Init+0x1e8>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	f003 020f 	and.w	r2, r3, #15
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004728:	2201      	movs	r2, #1
 800472a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800472c:	4b2f      	ldr	r3, [pc, #188]	; (80047ec <USBD_CDC_Init+0x1ec>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	f003 020f 	and.w	r2, r3, #15
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	3326      	adds	r3, #38	; 0x26
 8004742:	2210      	movs	r2, #16
 8004744:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004746:	4b29      	ldr	r3, [pc, #164]	; (80047ec <USBD_CDC_Init+0x1ec>)
 8004748:	7819      	ldrb	r1, [r3, #0]
 800474a:	2308      	movs	r3, #8
 800474c:	2203      	movs	r2, #3
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f005 fecd 	bl	800a4ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004754:	4b25      	ldr	r3, [pc, #148]	; (80047ec <USBD_CDC_Init+0x1ec>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	f003 020f 	and.w	r2, r3, #15
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	440b      	add	r3, r1
 8004768:	3324      	adds	r3, #36	; 0x24
 800476a:	2201      	movs	r2, #1
 800476c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	33b0      	adds	r3, #176	; 0xb0
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	4413      	add	r3, r2
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80047a4:	2302      	movs	r3, #2
 80047a6:	e018      	b.n	80047da <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	7c1b      	ldrb	r3, [r3, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10a      	bne.n	80047c6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80047b0:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <USBD_CDC_Init+0x1e8>)
 80047b2:	7819      	ldrb	r1, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f005 ff84 	bl	800a6cc <USBD_LL_PrepareReceive>
 80047c4:	e008      	b.n	80047d8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80047c6:	4b08      	ldr	r3, [pc, #32]	; (80047e8 <USBD_CDC_Init+0x1e8>)
 80047c8:	7819      	ldrb	r1, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80047d0:	2340      	movs	r3, #64	; 0x40
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f005 ff7a 	bl	800a6cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000093 	.word	0x20000093
 80047e8:	20000094 	.word	0x20000094
 80047ec:	20000095 	.word	0x20000095

080047f0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	460b      	mov	r3, r1
 80047fa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80047fc:	4b3a      	ldr	r3, [pc, #232]	; (80048e8 <USBD_CDC_DeInit+0xf8>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	4619      	mov	r1, r3
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f005 fe99 	bl	800a53a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004808:	4b37      	ldr	r3, [pc, #220]	; (80048e8 <USBD_CDC_DeInit+0xf8>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f003 020f 	and.w	r2, r3, #15
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	3324      	adds	r3, #36	; 0x24
 800481e:	2200      	movs	r2, #0
 8004820:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004822:	4b32      	ldr	r3, [pc, #200]	; (80048ec <USBD_CDC_DeInit+0xfc>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	4619      	mov	r1, r3
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f005 fe86 	bl	800a53a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800482e:	4b2f      	ldr	r3, [pc, #188]	; (80048ec <USBD_CDC_DeInit+0xfc>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	f003 020f 	and.w	r2, r3, #15
 8004836:	6879      	ldr	r1, [r7, #4]
 8004838:	4613      	mov	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004846:	2200      	movs	r2, #0
 8004848:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800484a:	4b29      	ldr	r3, [pc, #164]	; (80048f0 <USBD_CDC_DeInit+0x100>)
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	4619      	mov	r1, r3
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f005 fe72 	bl	800a53a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004856:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <USBD_CDC_DeInit+0x100>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	f003 020f 	and.w	r2, r3, #15
 800485e:	6879      	ldr	r1, [r7, #4]
 8004860:	4613      	mov	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	4413      	add	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	440b      	add	r3, r1
 800486a:	3324      	adds	r3, #36	; 0x24
 800486c:	2200      	movs	r2, #0
 800486e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004870:	4b1f      	ldr	r3, [pc, #124]	; (80048f0 <USBD_CDC_DeInit+0x100>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	f003 020f 	and.w	r2, r3, #15
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	3326      	adds	r3, #38	; 0x26
 8004886:	2200      	movs	r2, #0
 8004888:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	32b0      	adds	r2, #176	; 0xb0
 8004894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01f      	beq.n	80048dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	33b0      	adds	r3, #176	; 0xb0
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	32b0      	adds	r2, #176	; 0xb0
 80048ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048be:	4618      	mov	r0, r3
 80048c0:	f005 ff46 	bl	800a750 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	32b0      	adds	r2, #176	; 0xb0
 80048ce:	2100      	movs	r1, #0
 80048d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000093 	.word	0x20000093
 80048ec:	20000094 	.word	0x20000094
 80048f0:	20000095 	.word	0x20000095

080048f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	32b0      	adds	r2, #176	; 0xb0
 8004908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800490c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004920:	2303      	movs	r3, #3
 8004922:	e0bf      	b.n	8004aa4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800492c:	2b00      	cmp	r3, #0
 800492e:	d050      	beq.n	80049d2 <USBD_CDC_Setup+0xde>
 8004930:	2b20      	cmp	r3, #32
 8004932:	f040 80af 	bne.w	8004a94 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	88db      	ldrh	r3, [r3, #6]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d03a      	beq.n	80049b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	b25b      	sxtb	r3, r3
 8004944:	2b00      	cmp	r3, #0
 8004946:	da1b      	bge.n	8004980 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	33b0      	adds	r3, #176	; 0xb0
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800495e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	88d2      	ldrh	r2, [r2, #6]
 8004964:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	88db      	ldrh	r3, [r3, #6]
 800496a:	2b07      	cmp	r3, #7
 800496c:	bf28      	it	cs
 800496e:	2307      	movcs	r3, #7
 8004970:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	89fa      	ldrh	r2, [r7, #14]
 8004976:	4619      	mov	r1, r3
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f001 fd89 	bl	8006490 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800497e:	e090      	b.n	8004aa2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	785a      	ldrb	r2, [r3, #1]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	88db      	ldrh	r3, [r3, #6]
 800498e:	2b3f      	cmp	r3, #63	; 0x3f
 8004990:	d803      	bhi.n	800499a <USBD_CDC_Setup+0xa6>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	88db      	ldrh	r3, [r3, #6]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	e000      	b.n	800499c <USBD_CDC_Setup+0xa8>
 800499a:	2240      	movs	r2, #64	; 0x40
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80049a2:	6939      	ldr	r1, [r7, #16]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80049aa:	461a      	mov	r2, r3
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f001 fd9b 	bl	80064e8 <USBD_CtlPrepareRx>
      break;
 80049b2:	e076      	b.n	8004aa2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	33b0      	adds	r3, #176	; 0xb0
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	7850      	ldrb	r0, [r2, #1]
 80049ca:	2200      	movs	r2, #0
 80049cc:	6839      	ldr	r1, [r7, #0]
 80049ce:	4798      	blx	r3
      break;
 80049d0:	e067      	b.n	8004aa2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	785b      	ldrb	r3, [r3, #1]
 80049d6:	2b0b      	cmp	r3, #11
 80049d8:	d851      	bhi.n	8004a7e <USBD_CDC_Setup+0x18a>
 80049da:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <USBD_CDC_Setup+0xec>)
 80049dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e0:	08004a11 	.word	0x08004a11
 80049e4:	08004a8d 	.word	0x08004a8d
 80049e8:	08004a7f 	.word	0x08004a7f
 80049ec:	08004a7f 	.word	0x08004a7f
 80049f0:	08004a7f 	.word	0x08004a7f
 80049f4:	08004a7f 	.word	0x08004a7f
 80049f8:	08004a7f 	.word	0x08004a7f
 80049fc:	08004a7f 	.word	0x08004a7f
 8004a00:	08004a7f 	.word	0x08004a7f
 8004a04:	08004a7f 	.word	0x08004a7f
 8004a08:	08004a3b 	.word	0x08004a3b
 8004a0c:	08004a65 	.word	0x08004a65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b03      	cmp	r3, #3
 8004a1a:	d107      	bne.n	8004a2c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004a1c:	f107 030a 	add.w	r3, r7, #10
 8004a20:	2202      	movs	r2, #2
 8004a22:	4619      	mov	r1, r3
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f001 fd33 	bl	8006490 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a2a:	e032      	b.n	8004a92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004a2c:	6839      	ldr	r1, [r7, #0]
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f001 fcbd 	bl	80063ae <USBD_CtlError>
            ret = USBD_FAIL;
 8004a34:	2303      	movs	r3, #3
 8004a36:	75fb      	strb	r3, [r7, #23]
          break;
 8004a38:	e02b      	b.n	8004a92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d107      	bne.n	8004a56 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004a46:	f107 030d 	add.w	r3, r7, #13
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f001 fd1e 	bl	8006490 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004a54:	e01d      	b.n	8004a92 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004a56:	6839      	ldr	r1, [r7, #0]
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f001 fca8 	bl	80063ae <USBD_CtlError>
            ret = USBD_FAIL;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	75fb      	strb	r3, [r7, #23]
          break;
 8004a62:	e016      	b.n	8004a92 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	d00f      	beq.n	8004a90 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004a70:	6839      	ldr	r1, [r7, #0]
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f001 fc9b 	bl	80063ae <USBD_CtlError>
            ret = USBD_FAIL;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004a7c:	e008      	b.n	8004a90 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004a7e:	6839      	ldr	r1, [r7, #0]
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f001 fc94 	bl	80063ae <USBD_CtlError>
          ret = USBD_FAIL;
 8004a86:	2303      	movs	r3, #3
 8004a88:	75fb      	strb	r3, [r7, #23]
          break;
 8004a8a:	e002      	b.n	8004a92 <USBD_CDC_Setup+0x19e>
          break;
 8004a8c:	bf00      	nop
 8004a8e:	e008      	b.n	8004aa2 <USBD_CDC_Setup+0x1ae>
          break;
 8004a90:	bf00      	nop
      }
      break;
 8004a92:	e006      	b.n	8004aa2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004a94:	6839      	ldr	r1, [r7, #0]
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f001 fc89 	bl	80063ae <USBD_CtlError>
      ret = USBD_FAIL;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004aa0:	bf00      	nop
  }

  return (uint8_t)ret;
 8004aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004abe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	32b0      	adds	r2, #176	; 0xb0
 8004aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e065      	b.n	8004ba2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	32b0      	adds	r2, #176	; 0xb0
 8004ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ae4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	f003 020f 	and.w	r2, r3, #15
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	3318      	adds	r3, #24
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d02f      	beq.n	8004b60 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	f003 020f 	and.w	r2, r3, #15
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	440b      	add	r3, r1
 8004b12:	3318      	adds	r3, #24
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	f003 010f 	and.w	r1, r3, #15
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	440b      	add	r3, r1
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4403      	add	r3, r0
 8004b28:	3348      	adds	r3, #72	; 0x48
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d112      	bne.n	8004b60 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004b3a:	78fb      	ldrb	r3, [r7, #3]
 8004b3c:	f003 020f 	and.w	r2, r3, #15
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3318      	adds	r3, #24
 8004b4e:	2200      	movs	r2, #0
 8004b50:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004b52:	78f9      	ldrb	r1, [r7, #3]
 8004b54:	2300      	movs	r3, #0
 8004b56:	2200      	movs	r2, #0
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f005 fd96 	bl	800a68a <USBD_LL_Transmit>
 8004b5e:	e01f      	b.n	8004ba0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	33b0      	adds	r3, #176	; 0xb0
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d010      	beq.n	8004ba0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	33b0      	adds	r3, #176	; 0xb0
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004b9c:	78fa      	ldrb	r2, [r7, #3]
 8004b9e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	32b0      	adds	r2, #176	; 0xb0
 8004bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	32b0      	adds	r2, #176	; 0xb0
 8004bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e01a      	b.n	8004c12 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f005 fd94 	bl	800a70e <USBD_LL_GetRxDataSize>
 8004be6:	4602      	mov	r2, r0
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	33b0      	adds	r3, #176	; 0xb0
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3710      	adds	r7, #16
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b084      	sub	sp, #16
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	32b0      	adds	r2, #176	; 0xb0
 8004c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c30:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d101      	bne.n	8004c3c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e025      	b.n	8004c88 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	33b0      	adds	r3, #176	; 0xb0
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01a      	beq.n	8004c86 <USBD_CDC_EP0_RxReady+0x6c>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004c56:	2bff      	cmp	r3, #255	; 0xff
 8004c58:	d015      	beq.n	8004c86 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	33b0      	adds	r3, #176	; 0xb0
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004c72:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004c7a:	b292      	uxth	r2, r2
 8004c7c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	22ff      	movs	r2, #255	; 0xff
 8004c82:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c98:	2182      	movs	r1, #130	; 0x82
 8004c9a:	4818      	ldr	r0, [pc, #96]	; (8004cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c9c:	f000 fd4f 	bl	800573e <USBD_GetEpDesc>
 8004ca0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	4815      	ldr	r0, [pc, #84]	; (8004cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004ca6:	f000 fd4a 	bl	800573e <USBD_GetEpDesc>
 8004caa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004cac:	2181      	movs	r1, #129	; 0x81
 8004cae:	4813      	ldr	r0, [pc, #76]	; (8004cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004cb0:	f000 fd45 	bl	800573e <USBD_GetEpDesc>
 8004cb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2210      	movs	r2, #16
 8004cc0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d006      	beq.n	8004cd6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cd0:	711a      	strb	r2, [r3, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d006      	beq.n	8004cea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce4:	711a      	strb	r2, [r3, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2243      	movs	r2, #67	; 0x43
 8004cee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004cf0:	4b02      	ldr	r3, [pc, #8]	; (8004cfc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000050 	.word	0x20000050

08004d00 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004d08:	2182      	movs	r1, #130	; 0x82
 8004d0a:	4818      	ldr	r0, [pc, #96]	; (8004d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004d0c:	f000 fd17 	bl	800573e <USBD_GetEpDesc>
 8004d10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004d12:	2101      	movs	r1, #1
 8004d14:	4815      	ldr	r0, [pc, #84]	; (8004d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004d16:	f000 fd12 	bl	800573e <USBD_GetEpDesc>
 8004d1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004d1c:	2181      	movs	r1, #129	; 0x81
 8004d1e:	4813      	ldr	r0, [pc, #76]	; (8004d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004d20:	f000 fd0d 	bl	800573e <USBD_GetEpDesc>
 8004d24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	2210      	movs	r2, #16
 8004d30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d006      	beq.n	8004d46 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	711a      	strb	r2, [r3, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f042 0202 	orr.w	r2, r2, #2
 8004d44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d006      	beq.n	8004d5a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	711a      	strb	r2, [r3, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f042 0202 	orr.w	r2, r2, #2
 8004d58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2243      	movs	r2, #67	; 0x43
 8004d5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004d60:	4b02      	ldr	r3, [pc, #8]	; (8004d6c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	20000050 	.word	0x20000050

08004d70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004d78:	2182      	movs	r1, #130	; 0x82
 8004d7a:	4818      	ldr	r0, [pc, #96]	; (8004ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004d7c:	f000 fcdf 	bl	800573e <USBD_GetEpDesc>
 8004d80:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004d82:	2101      	movs	r1, #1
 8004d84:	4815      	ldr	r0, [pc, #84]	; (8004ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004d86:	f000 fcda 	bl	800573e <USBD_GetEpDesc>
 8004d8a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004d8c:	2181      	movs	r1, #129	; 0x81
 8004d8e:	4813      	ldr	r0, [pc, #76]	; (8004ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004d90:	f000 fcd5 	bl	800573e <USBD_GetEpDesc>
 8004d94:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d002      	beq.n	8004da2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2210      	movs	r2, #16
 8004da0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d006      	beq.n	8004db6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db0:	711a      	strb	r2, [r3, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d006      	beq.n	8004dca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dc4:	711a      	strb	r2, [r3, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2243      	movs	r2, #67	; 0x43
 8004dce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004dd0:	4b02      	ldr	r3, [pc, #8]	; (8004ddc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20000050 	.word	0x20000050

08004de0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	220a      	movs	r2, #10
 8004dec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004dee:	4b03      	ldr	r3, [pc, #12]	; (8004dfc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	2000000c 	.word	0x2000000c

08004e00 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e009      	b.n	8004e28 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	33b0      	adds	r3, #176	; 0xb0
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b087      	sub	sp, #28
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	32b0      	adds	r2, #176	; 0xb0
 8004e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e4e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e008      	b.n	8004e6c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	32b0      	adds	r2, #176	; 0xb0
 8004e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e90:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e004      	b.n	8004ea6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
	...

08004eb4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	32b0      	adds	r2, #176	; 0xb0
 8004ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	32b0      	adds	r2, #176	; 0xb0
 8004eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e025      	b.n	8004f32 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d11f      	bne.n	8004f30 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004ef8:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <USBD_CDC_TransmitPacket+0x88>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	f003 020f 	and.w	r2, r3, #15
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4403      	add	r3, r0
 8004f12:	3318      	adds	r3, #24
 8004f14:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004f16:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <USBD_CDC_TransmitPacket+0x88>)
 8004f18:	7819      	ldrb	r1, [r3, #0]
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f005 fbaf 	bl	800a68a <USBD_LL_Transmit>

    ret = USBD_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	20000093 	.word	0x20000093

08004f40 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	32b0      	adds	r2, #176	; 0xb0
 8004f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f56:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	32b0      	adds	r2, #176	; 0xb0
 8004f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e018      	b.n	8004fa0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	7c1b      	ldrb	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10a      	bne.n	8004f8c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f76:	4b0c      	ldr	r3, [pc, #48]	; (8004fa8 <USBD_CDC_ReceivePacket+0x68>)
 8004f78:	7819      	ldrb	r1, [r3, #0]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f005 fba1 	bl	800a6cc <USBD_LL_PrepareReceive>
 8004f8a:	e008      	b.n	8004f9e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004f8c:	4b06      	ldr	r3, [pc, #24]	; (8004fa8 <USBD_CDC_ReceivePacket+0x68>)
 8004f8e:	7819      	ldrb	r1, [r3, #0]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f96:	2340      	movs	r3, #64	; 0x40
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f005 fb97 	bl	800a6cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000094 	.word	0x20000094

08004fac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e01f      	b.n	8005004 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	79fa      	ldrb	r2, [r7, #7]
 8004ff6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f005 fa11 	bl	800a420 <USBD_LL_Init>
 8004ffe:	4603      	mov	r3, r0
 8005000:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005002:	7dfb      	ldrb	r3, [r7, #23]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005016:	2300      	movs	r3, #0
 8005018:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005020:	2303      	movs	r3, #3
 8005022:	e025      	b.n	8005070 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	32ae      	adds	r2, #174	; 0xae
 8005036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00f      	beq.n	8005060 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	32ae      	adds	r2, #174	; 0xae
 800504a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	f107 020e 	add.w	r2, r7, #14
 8005054:	4610      	mov	r0, r2
 8005056:	4798      	blx	r3
 8005058:	4602      	mov	r2, r0
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f005 fa19 	bl	800a4b8 <USBD_LL_Start>
 8005086:	4603      	mov	r3, r0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3708      	adds	r7, #8
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005098:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b084      	sub	sp, #16
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d009      	beq.n	80050d4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	78fa      	ldrb	r2, [r7, #3]
 80050ca:	4611      	mov	r1, r2
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	4798      	blx	r3
 80050d0:	4603      	mov	r3, r0
 80050d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	460b      	mov	r3, r1
 80050e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80050ea:	2300      	movs	r3, #0
 80050ec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	78fa      	ldrb	r2, [r7, #3]
 80050f8:	4611      	mov	r1, r2
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	4798      	blx	r3
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005104:	2303      	movs	r3, #3
 8005106:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	4618      	mov	r0, r3
 8005126:	f001 f908 	bl	800633a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005138:	461a      	mov	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005146:	f003 031f 	and.w	r3, r3, #31
 800514a:	2b02      	cmp	r3, #2
 800514c:	d01a      	beq.n	8005184 <USBD_LL_SetupStage+0x72>
 800514e:	2b02      	cmp	r3, #2
 8005150:	d822      	bhi.n	8005198 <USBD_LL_SetupStage+0x86>
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <USBD_LL_SetupStage+0x4a>
 8005156:	2b01      	cmp	r3, #1
 8005158:	d00a      	beq.n	8005170 <USBD_LL_SetupStage+0x5e>
 800515a:	e01d      	b.n	8005198 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 fb5f 	bl	8005828 <USBD_StdDevReq>
 800516a:	4603      	mov	r3, r0
 800516c:	73fb      	strb	r3, [r7, #15]
      break;
 800516e:	e020      	b.n	80051b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005176:	4619      	mov	r1, r3
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 fbc7 	bl	800590c <USBD_StdItfReq>
 800517e:	4603      	mov	r3, r0
 8005180:	73fb      	strb	r3, [r7, #15]
      break;
 8005182:	e016      	b.n	80051b2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fc29 	bl	80059e4 <USBD_StdEPReq>
 8005192:	4603      	mov	r3, r0
 8005194:	73fb      	strb	r3, [r7, #15]
      break;
 8005196:	e00c      	b.n	80051b2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800519e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f005 f9e6 	bl	800a578 <USBD_LL_StallEP>
 80051ac:	4603      	mov	r3, r0
 80051ae:	73fb      	strb	r3, [r7, #15]
      break;
 80051b0:	bf00      	nop
  }

  return ret;
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	460b      	mov	r3, r1
 80051c6:	607a      	str	r2, [r7, #4]
 80051c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80051ce:	7afb      	ldrb	r3, [r7, #11]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d16e      	bne.n	80052b2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80051da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	f040 8098 	bne.w	8005318 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d913      	bls.n	800521c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	689a      	ldr	r2, [r3, #8]
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	1ad2      	subs	r2, r2, r3
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	4293      	cmp	r3, r2
 800520c:	bf28      	it	cs
 800520e:	4613      	movcs	r3, r2
 8005210:	461a      	mov	r2, r3
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f001 f984 	bl	8006522 <USBD_CtlContinueRx>
 800521a:	e07d      	b.n	8005318 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	2b02      	cmp	r3, #2
 8005228:	d014      	beq.n	8005254 <USBD_LL_DataOutStage+0x98>
 800522a:	2b02      	cmp	r3, #2
 800522c:	d81d      	bhi.n	800526a <USBD_LL_DataOutStage+0xae>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d002      	beq.n	8005238 <USBD_LL_DataOutStage+0x7c>
 8005232:	2b01      	cmp	r3, #1
 8005234:	d003      	beq.n	800523e <USBD_LL_DataOutStage+0x82>
 8005236:	e018      	b.n	800526a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005238:	2300      	movs	r3, #0
 800523a:	75bb      	strb	r3, [r7, #22]
            break;
 800523c:	e018      	b.n	8005270 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005244:	b2db      	uxtb	r3, r3
 8005246:	4619      	mov	r1, r3
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 fa5e 	bl	800570a <USBD_CoreFindIF>
 800524e:	4603      	mov	r3, r0
 8005250:	75bb      	strb	r3, [r7, #22]
            break;
 8005252:	e00d      	b.n	8005270 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800525a:	b2db      	uxtb	r3, r3
 800525c:	4619      	mov	r1, r3
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 fa60 	bl	8005724 <USBD_CoreFindEP>
 8005264:	4603      	mov	r3, r0
 8005266:	75bb      	strb	r3, [r7, #22]
            break;
 8005268:	e002      	b.n	8005270 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800526a:	2300      	movs	r3, #0
 800526c:	75bb      	strb	r3, [r7, #22]
            break;
 800526e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005270:	7dbb      	ldrb	r3, [r7, #22]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d119      	bne.n	80052aa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b03      	cmp	r3, #3
 8005280:	d113      	bne.n	80052aa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005282:	7dba      	ldrb	r2, [r7, #22]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	32ae      	adds	r2, #174	; 0xae
 8005288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00b      	beq.n	80052aa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005292:	7dba      	ldrb	r2, [r7, #22]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800529a:	7dba      	ldrb	r2, [r7, #22]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	32ae      	adds	r2, #174	; 0xae
 80052a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f001 f94a 	bl	8006544 <USBD_CtlSendStatus>
 80052b0:	e032      	b.n	8005318 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80052b2:	7afb      	ldrb	r3, [r7, #11]
 80052b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	4619      	mov	r1, r3
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 fa31 	bl	8005724 <USBD_CoreFindEP>
 80052c2:	4603      	mov	r3, r0
 80052c4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80052c6:	7dbb      	ldrb	r3, [r7, #22]
 80052c8:	2bff      	cmp	r3, #255	; 0xff
 80052ca:	d025      	beq.n	8005318 <USBD_LL_DataOutStage+0x15c>
 80052cc:	7dbb      	ldrb	r3, [r7, #22]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d122      	bne.n	8005318 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d117      	bne.n	800530e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80052de:	7dba      	ldrb	r2, [r7, #22]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	32ae      	adds	r2, #174	; 0xae
 80052e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00f      	beq.n	800530e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80052ee:	7dba      	ldrb	r2, [r7, #22]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80052f6:	7dba      	ldrb	r2, [r7, #22]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	32ae      	adds	r2, #174	; 0xae
 80052fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	7afa      	ldrb	r2, [r7, #11]
 8005304:	4611      	mov	r1, r2
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	4798      	blx	r3
 800530a:	4603      	mov	r3, r0
 800530c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005314:	7dfb      	ldrb	r3, [r7, #23]
 8005316:	e000      	b.n	800531a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}

08005322 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b086      	sub	sp, #24
 8005326:	af00      	add	r7, sp, #0
 8005328:	60f8      	str	r0, [r7, #12]
 800532a:	460b      	mov	r3, r1
 800532c:	607a      	str	r2, [r7, #4]
 800532e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005330:	7afb      	ldrb	r3, [r7, #11]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d16f      	bne.n	8005416 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3314      	adds	r3, #20
 800533a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005342:	2b02      	cmp	r3, #2
 8005344:	d15a      	bne.n	80053fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	429a      	cmp	r2, r3
 8005350:	d914      	bls.n	800537c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	1ad2      	subs	r2, r2, r3
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	461a      	mov	r2, r3
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f001 f8ac 	bl	80064c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800536e:	2300      	movs	r3, #0
 8005370:	2200      	movs	r2, #0
 8005372:	2100      	movs	r1, #0
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f005 f9a9 	bl	800a6cc <USBD_LL_PrepareReceive>
 800537a:	e03f      	b.n	80053fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	68da      	ldr	r2, [r3, #12]
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	429a      	cmp	r2, r3
 8005386:	d11c      	bne.n	80053c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005390:	429a      	cmp	r2, r3
 8005392:	d316      	bcc.n	80053c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800539e:	429a      	cmp	r2, r3
 80053a0:	d20f      	bcs.n	80053c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80053a2:	2200      	movs	r2, #0
 80053a4:	2100      	movs	r1, #0
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f001 f88d 	bl	80064c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80053b4:	2300      	movs	r3, #0
 80053b6:	2200      	movs	r2, #0
 80053b8:	2100      	movs	r1, #0
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f005 f986 	bl	800a6cc <USBD_LL_PrepareReceive>
 80053c0:	e01c      	b.n	80053fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d10f      	bne.n	80053ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d009      	beq.n	80053ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80053ee:	2180      	movs	r1, #128	; 0x80
 80053f0:	68f8      	ldr	r0, [r7, #12]
 80053f2:	f005 f8c1 	bl	800a578 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f001 f8b7 	bl	800656a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d03a      	beq.n	800547c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f7ff fe42 	bl	8005090 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005414:	e032      	b.n	800547c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005416:	7afb      	ldrb	r3, [r7, #11]
 8005418:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800541c:	b2db      	uxtb	r3, r3
 800541e:	4619      	mov	r1, r3
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f97f 	bl	8005724 <USBD_CoreFindEP>
 8005426:	4603      	mov	r3, r0
 8005428:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800542a:	7dfb      	ldrb	r3, [r7, #23]
 800542c:	2bff      	cmp	r3, #255	; 0xff
 800542e:	d025      	beq.n	800547c <USBD_LL_DataInStage+0x15a>
 8005430:	7dfb      	ldrb	r3, [r7, #23]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d122      	bne.n	800547c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b03      	cmp	r3, #3
 8005440:	d11c      	bne.n	800547c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005442:	7dfa      	ldrb	r2, [r7, #23]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	32ae      	adds	r2, #174	; 0xae
 8005448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d014      	beq.n	800547c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005452:	7dfa      	ldrb	r2, [r7, #23]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800545a:	7dfa      	ldrb	r2, [r7, #23]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	32ae      	adds	r2, #174	; 0xae
 8005460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	7afa      	ldrb	r2, [r7, #11]
 8005468:	4611      	mov	r1, r2
 800546a:	68f8      	ldr	r0, [r7, #12]
 800546c:	4798      	blx	r3
 800546e:	4603      	mov	r3, r0
 8005470:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005472:	7dbb      	ldrb	r3, [r7, #22]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005478:	7dbb      	ldrb	r3, [r7, #22]
 800547a:	e000      	b.n	800547e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b084      	sub	sp, #16
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d014      	beq.n	80054ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00e      	beq.n	80054ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6852      	ldr	r2, [r2, #4]
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	4611      	mov	r1, r2
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	4798      	blx	r3
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80054e8:	2303      	movs	r3, #3
 80054ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80054ec:	2340      	movs	r3, #64	; 0x40
 80054ee:	2200      	movs	r2, #0
 80054f0:	2100      	movs	r1, #0
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f004 fffb 	bl	800a4ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2240      	movs	r2, #64	; 0x40
 8005504:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005508:	2340      	movs	r3, #64	; 0x40
 800550a:	2200      	movs	r2, #0
 800550c:	2180      	movs	r1, #128	; 0x80
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f004 ffed 	bl	800a4ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2240      	movs	r2, #64	; 0x40
 800551e:	621a      	str	r2, [r3, #32]

  return ret;
 8005520:	7bfb      	ldrb	r3, [r7, #15]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	460b      	mov	r3, r1
 8005534:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	78fa      	ldrb	r2, [r7, #3]
 800553a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800554a:	b480      	push	{r7}
 800554c:	b083      	sub	sp, #12
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005558:	b2da      	uxtb	r2, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2204      	movs	r2, #4
 8005564:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005568:	2300      	movs	r3, #0
}
 800556a:	4618      	mov	r0, r3
 800556c:	370c      	adds	r7, #12
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005576:	b480      	push	{r7}
 8005578:	b083      	sub	sp, #12
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b04      	cmp	r3, #4
 8005588:	d106      	bne.n	8005598 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005590:	b2da      	uxtb	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b082      	sub	sp, #8
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d110      	bne.n	80055dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00b      	beq.n	80055dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ca:	69db      	ldr	r3, [r3, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d005      	beq.n	80055dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b082      	sub	sp, #8
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
 80055ee:	460b      	mov	r3, r1
 80055f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	32ae      	adds	r2, #174	; 0xae
 80055fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005604:	2303      	movs	r3, #3
 8005606:	e01c      	b.n	8005642 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b03      	cmp	r3, #3
 8005612:	d115      	bne.n	8005640 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	32ae      	adds	r2, #174	; 0xae
 800561e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005622:	6a1b      	ldr	r3, [r3, #32]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	32ae      	adds	r2, #174	; 0xae
 8005632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	78fa      	ldrb	r2, [r7, #3]
 800563a:	4611      	mov	r1, r2
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3708      	adds	r7, #8
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800564a:	b580      	push	{r7, lr}
 800564c:	b082      	sub	sp, #8
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
 8005652:	460b      	mov	r3, r1
 8005654:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	32ae      	adds	r2, #174	; 0xae
 8005660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005668:	2303      	movs	r3, #3
 800566a:	e01c      	b.n	80056a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b03      	cmp	r3, #3
 8005676:	d115      	bne.n	80056a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	32ae      	adds	r2, #174	; 0xae
 8005682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00b      	beq.n	80056a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	32ae      	adds	r2, #174	; 0xae
 8005696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	78fa      	ldrb	r2, [r7, #3]
 800569e:	4611      	mov	r1, r2
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80056ae:	b480      	push	{r7}
 80056b0:	b083      	sub	sp, #12
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00e      	beq.n	8005700 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	6852      	ldr	r2, [r2, #4]
 80056ee:	b2d2      	uxtb	r2, r2
 80056f0:	4611      	mov	r1, r2
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	4798      	blx	r3
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80056fc:	2303      	movs	r3, #3
 80056fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005700:	7bfb      	ldrb	r3, [r7, #15]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3710      	adds	r7, #16
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800570a:	b480      	push	{r7}
 800570c:	b083      	sub	sp, #12
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	460b      	mov	r3, r1
 8005714:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005716:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005718:	4618      	mov	r0, r3
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	460b      	mov	r3, r1
 800572e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005730:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005732:	4618      	mov	r0, r3
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b086      	sub	sp, #24
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	460b      	mov	r3, r1
 8005748:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	885b      	ldrh	r3, [r3, #2]
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	b29b      	uxth	r3, r3
 8005762:	429a      	cmp	r2, r3
 8005764:	d920      	bls.n	80057a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	b29b      	uxth	r3, r3
 800576c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800576e:	e013      	b.n	8005798 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005770:	f107 030a 	add.w	r3, r7, #10
 8005774:	4619      	mov	r1, r3
 8005776:	6978      	ldr	r0, [r7, #20]
 8005778:	f000 f81b 	bl	80057b2 <USBD_GetNextDesc>
 800577c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	785b      	ldrb	r3, [r3, #1]
 8005782:	2b05      	cmp	r3, #5
 8005784:	d108      	bne.n	8005798 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	789b      	ldrb	r3, [r3, #2]
 800578e:	78fa      	ldrb	r2, [r7, #3]
 8005790:	429a      	cmp	r2, r3
 8005792:	d008      	beq.n	80057a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005794:	2300      	movs	r3, #0
 8005796:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	885b      	ldrh	r3, [r3, #2]
 800579c:	b29a      	uxth	r2, r3
 800579e:	897b      	ldrh	r3, [r7, #10]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d8e5      	bhi.n	8005770 <USBD_GetEpDesc+0x32>
 80057a4:	e000      	b.n	80057a8 <USBD_GetEpDesc+0x6a>
          break;
 80057a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80057a8:	693b      	ldr	r3, [r7, #16]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b085      	sub	sp, #20
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	881a      	ldrh	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	4413      	add	r3, r2
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4413      	add	r3, r2
 80057dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80057de:	68fb      	ldr	r3, [r7, #12]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	3301      	adds	r3, #1
 8005802:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800580a:	8a3b      	ldrh	r3, [r7, #16]
 800580c:	021b      	lsls	r3, r3, #8
 800580e:	b21a      	sxth	r2, r3
 8005810:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005814:	4313      	orrs	r3, r2
 8005816:	b21b      	sxth	r3, r3
 8005818:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800581a:	89fb      	ldrh	r3, [r7, #14]
}
 800581c:	4618      	mov	r0, r3
 800581e:	371c      	adds	r7, #28
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d005      	beq.n	800584e <USBD_StdDevReq+0x26>
 8005842:	2b40      	cmp	r3, #64	; 0x40
 8005844:	d857      	bhi.n	80058f6 <USBD_StdDevReq+0xce>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00f      	beq.n	800586a <USBD_StdDevReq+0x42>
 800584a:	2b20      	cmp	r3, #32
 800584c:	d153      	bne.n	80058f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	32ae      	adds	r2, #174	; 0xae
 8005858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	4798      	blx	r3
 8005864:	4603      	mov	r3, r0
 8005866:	73fb      	strb	r3, [r7, #15]
      break;
 8005868:	e04a      	b.n	8005900 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	785b      	ldrb	r3, [r3, #1]
 800586e:	2b09      	cmp	r3, #9
 8005870:	d83b      	bhi.n	80058ea <USBD_StdDevReq+0xc2>
 8005872:	a201      	add	r2, pc, #4	; (adr r2, 8005878 <USBD_StdDevReq+0x50>)
 8005874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005878:	080058cd 	.word	0x080058cd
 800587c:	080058e1 	.word	0x080058e1
 8005880:	080058eb 	.word	0x080058eb
 8005884:	080058d7 	.word	0x080058d7
 8005888:	080058eb 	.word	0x080058eb
 800588c:	080058ab 	.word	0x080058ab
 8005890:	080058a1 	.word	0x080058a1
 8005894:	080058eb 	.word	0x080058eb
 8005898:	080058c3 	.word	0x080058c3
 800589c:	080058b5 	.word	0x080058b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa3c 	bl	8005d20 <USBD_GetDescriptor>
          break;
 80058a8:	e024      	b.n	80058f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80058aa:	6839      	ldr	r1, [r7, #0]
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fba1 	bl	8005ff4 <USBD_SetAddress>
          break;
 80058b2:	e01f      	b.n	80058f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 fbe0 	bl	800607c <USBD_SetConfig>
 80058bc:	4603      	mov	r3, r0
 80058be:	73fb      	strb	r3, [r7, #15]
          break;
 80058c0:	e018      	b.n	80058f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80058c2:	6839      	ldr	r1, [r7, #0]
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fc83 	bl	80061d0 <USBD_GetConfig>
          break;
 80058ca:	e013      	b.n	80058f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 fcb4 	bl	800623c <USBD_GetStatus>
          break;
 80058d4:	e00e      	b.n	80058f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fce3 	bl	80062a4 <USBD_SetFeature>
          break;
 80058de:	e009      	b.n	80058f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fd07 	bl	80062f6 <USBD_ClrFeature>
          break;
 80058e8:	e004      	b.n	80058f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80058ea:	6839      	ldr	r1, [r7, #0]
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fd5e 	bl	80063ae <USBD_CtlError>
          break;
 80058f2:	bf00      	nop
      }
      break;
 80058f4:	e004      	b.n	8005900 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fd58 	bl	80063ae <USBD_CtlError>
      break;
 80058fe:	bf00      	nop
  }

  return ret;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop

0800590c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005922:	2b40      	cmp	r3, #64	; 0x40
 8005924:	d005      	beq.n	8005932 <USBD_StdItfReq+0x26>
 8005926:	2b40      	cmp	r3, #64	; 0x40
 8005928:	d852      	bhi.n	80059d0 <USBD_StdItfReq+0xc4>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <USBD_StdItfReq+0x26>
 800592e:	2b20      	cmp	r3, #32
 8005930:	d14e      	bne.n	80059d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005938:	b2db      	uxtb	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	2b02      	cmp	r3, #2
 800593e:	d840      	bhi.n	80059c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	889b      	ldrh	r3, [r3, #4]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b01      	cmp	r3, #1
 8005948:	d836      	bhi.n	80059b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	889b      	ldrh	r3, [r3, #4]
 800594e:	b2db      	uxtb	r3, r3
 8005950:	4619      	mov	r1, r3
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff fed9 	bl	800570a <USBD_CoreFindIF>
 8005958:	4603      	mov	r3, r0
 800595a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800595c:	7bbb      	ldrb	r3, [r7, #14]
 800595e:	2bff      	cmp	r3, #255	; 0xff
 8005960:	d01d      	beq.n	800599e <USBD_StdItfReq+0x92>
 8005962:	7bbb      	ldrb	r3, [r7, #14]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d11a      	bne.n	800599e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005968:	7bba      	ldrb	r2, [r7, #14]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	32ae      	adds	r2, #174	; 0xae
 800596e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00f      	beq.n	8005998 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005978:	7bba      	ldrb	r2, [r7, #14]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005980:	7bba      	ldrb	r2, [r7, #14]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	32ae      	adds	r2, #174	; 0xae
 8005986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	6839      	ldr	r1, [r7, #0]
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	4798      	blx	r3
 8005992:	4603      	mov	r3, r0
 8005994:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005996:	e004      	b.n	80059a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005998:	2303      	movs	r3, #3
 800599a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800599c:	e001      	b.n	80059a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800599e:	2303      	movs	r3, #3
 80059a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	88db      	ldrh	r3, [r3, #6]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d110      	bne.n	80059cc <USBD_StdItfReq+0xc0>
 80059aa:	7bfb      	ldrb	r3, [r7, #15]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10d      	bne.n	80059cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fdc7 	bl	8006544 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80059b6:	e009      	b.n	80059cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80059b8:	6839      	ldr	r1, [r7, #0]
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fcf7 	bl	80063ae <USBD_CtlError>
          break;
 80059c0:	e004      	b.n	80059cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80059c2:	6839      	ldr	r1, [r7, #0]
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fcf2 	bl	80063ae <USBD_CtlError>
          break;
 80059ca:	e000      	b.n	80059ce <USBD_StdItfReq+0xc2>
          break;
 80059cc:	bf00      	nop
      }
      break;
 80059ce:	e004      	b.n	80059da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80059d0:	6839      	ldr	r1, [r7, #0]
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 fceb 	bl	80063ae <USBD_CtlError>
      break;
 80059d8:	bf00      	nop
  }

  return ret;
 80059da:	7bfb      	ldrb	r3, [r7, #15]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	889b      	ldrh	r3, [r3, #4]
 80059f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a00:	2b40      	cmp	r3, #64	; 0x40
 8005a02:	d007      	beq.n	8005a14 <USBD_StdEPReq+0x30>
 8005a04:	2b40      	cmp	r3, #64	; 0x40
 8005a06:	f200 817f 	bhi.w	8005d08 <USBD_StdEPReq+0x324>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d02a      	beq.n	8005a64 <USBD_StdEPReq+0x80>
 8005a0e:	2b20      	cmp	r3, #32
 8005a10:	f040 817a 	bne.w	8005d08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005a14:	7bbb      	ldrb	r3, [r7, #14]
 8005a16:	4619      	mov	r1, r3
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff fe83 	bl	8005724 <USBD_CoreFindEP>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a22:	7b7b      	ldrb	r3, [r7, #13]
 8005a24:	2bff      	cmp	r3, #255	; 0xff
 8005a26:	f000 8174 	beq.w	8005d12 <USBD_StdEPReq+0x32e>
 8005a2a:	7b7b      	ldrb	r3, [r7, #13]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f040 8170 	bne.w	8005d12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005a32:	7b7a      	ldrb	r2, [r7, #13]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005a3a:	7b7a      	ldrb	r2, [r7, #13]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	32ae      	adds	r2, #174	; 0xae
 8005a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 8163 	beq.w	8005d12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005a4c:	7b7a      	ldrb	r2, [r7, #13]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	32ae      	adds	r2, #174	; 0xae
 8005a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	6839      	ldr	r1, [r7, #0]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	4798      	blx	r3
 8005a5e:	4603      	mov	r3, r0
 8005a60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a62:	e156      	b.n	8005d12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	785b      	ldrb	r3, [r3, #1]
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d008      	beq.n	8005a7e <USBD_StdEPReq+0x9a>
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	f300 8145 	bgt.w	8005cfc <USBD_StdEPReq+0x318>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f000 809b 	beq.w	8005bae <USBD_StdEPReq+0x1ca>
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d03c      	beq.n	8005af6 <USBD_StdEPReq+0x112>
 8005a7c:	e13e      	b.n	8005cfc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d002      	beq.n	8005a90 <USBD_StdEPReq+0xac>
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	d016      	beq.n	8005abc <USBD_StdEPReq+0xd8>
 8005a8e:	e02c      	b.n	8005aea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a90:	7bbb      	ldrb	r3, [r7, #14]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00d      	beq.n	8005ab2 <USBD_StdEPReq+0xce>
 8005a96:	7bbb      	ldrb	r3, [r7, #14]
 8005a98:	2b80      	cmp	r3, #128	; 0x80
 8005a9a:	d00a      	beq.n	8005ab2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a9c:	7bbb      	ldrb	r3, [r7, #14]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f004 fd69 	bl	800a578 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005aa6:	2180      	movs	r1, #128	; 0x80
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f004 fd65 	bl	800a578 <USBD_LL_StallEP>
 8005aae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ab0:	e020      	b.n	8005af4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005ab2:	6839      	ldr	r1, [r7, #0]
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fc7a 	bl	80063ae <USBD_CtlError>
              break;
 8005aba:	e01b      	b.n	8005af4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	885b      	ldrh	r3, [r3, #2]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10e      	bne.n	8005ae2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ac4:	7bbb      	ldrb	r3, [r7, #14]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00b      	beq.n	8005ae2 <USBD_StdEPReq+0xfe>
 8005aca:	7bbb      	ldrb	r3, [r7, #14]
 8005acc:	2b80      	cmp	r3, #128	; 0x80
 8005ace:	d008      	beq.n	8005ae2 <USBD_StdEPReq+0xfe>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	88db      	ldrh	r3, [r3, #6]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d104      	bne.n	8005ae2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	4619      	mov	r1, r3
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f004 fd4b 	bl	800a578 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fd2e 	bl	8006544 <USBD_CtlSendStatus>

              break;
 8005ae8:	e004      	b.n	8005af4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fc5e 	bl	80063ae <USBD_CtlError>
              break;
 8005af2:	bf00      	nop
          }
          break;
 8005af4:	e107      	b.n	8005d06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d002      	beq.n	8005b08 <USBD_StdEPReq+0x124>
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d016      	beq.n	8005b34 <USBD_StdEPReq+0x150>
 8005b06:	e04b      	b.n	8005ba0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b08:	7bbb      	ldrb	r3, [r7, #14]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00d      	beq.n	8005b2a <USBD_StdEPReq+0x146>
 8005b0e:	7bbb      	ldrb	r3, [r7, #14]
 8005b10:	2b80      	cmp	r3, #128	; 0x80
 8005b12:	d00a      	beq.n	8005b2a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b14:	7bbb      	ldrb	r3, [r7, #14]
 8005b16:	4619      	mov	r1, r3
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f004 fd2d 	bl	800a578 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b1e:	2180      	movs	r1, #128	; 0x80
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f004 fd29 	bl	800a578 <USBD_LL_StallEP>
 8005b26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b28:	e040      	b.n	8005bac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005b2a:	6839      	ldr	r1, [r7, #0]
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fc3e 	bl	80063ae <USBD_CtlError>
              break;
 8005b32:	e03b      	b.n	8005bac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	885b      	ldrh	r3, [r3, #2]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d136      	bne.n	8005baa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005b3c:	7bbb      	ldrb	r3, [r7, #14]
 8005b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d004      	beq.n	8005b50 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005b46:	7bbb      	ldrb	r3, [r7, #14]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f004 fd33 	bl	800a5b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fcf7 	bl	8006544 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005b56:	7bbb      	ldrb	r3, [r7, #14]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7ff fde2 	bl	8005724 <USBD_CoreFindEP>
 8005b60:	4603      	mov	r3, r0
 8005b62:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b64:	7b7b      	ldrb	r3, [r7, #13]
 8005b66:	2bff      	cmp	r3, #255	; 0xff
 8005b68:	d01f      	beq.n	8005baa <USBD_StdEPReq+0x1c6>
 8005b6a:	7b7b      	ldrb	r3, [r7, #13]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d11c      	bne.n	8005baa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005b70:	7b7a      	ldrb	r2, [r7, #13]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005b78:	7b7a      	ldrb	r2, [r7, #13]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	32ae      	adds	r2, #174	; 0xae
 8005b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d010      	beq.n	8005baa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005b88:	7b7a      	ldrb	r2, [r7, #13]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	32ae      	adds	r2, #174	; 0xae
 8005b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	6839      	ldr	r1, [r7, #0]
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	4798      	blx	r3
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005b9e:	e004      	b.n	8005baa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005ba0:	6839      	ldr	r1, [r7, #0]
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fc03 	bl	80063ae <USBD_CtlError>
              break;
 8005ba8:	e000      	b.n	8005bac <USBD_StdEPReq+0x1c8>
              break;
 8005baa:	bf00      	nop
          }
          break;
 8005bac:	e0ab      	b.n	8005d06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b02      	cmp	r3, #2
 8005bb8:	d002      	beq.n	8005bc0 <USBD_StdEPReq+0x1dc>
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d032      	beq.n	8005c24 <USBD_StdEPReq+0x240>
 8005bbe:	e097      	b.n	8005cf0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bc0:	7bbb      	ldrb	r3, [r7, #14]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d007      	beq.n	8005bd6 <USBD_StdEPReq+0x1f2>
 8005bc6:	7bbb      	ldrb	r3, [r7, #14]
 8005bc8:	2b80      	cmp	r3, #128	; 0x80
 8005bca:	d004      	beq.n	8005bd6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fbed 	bl	80063ae <USBD_CtlError>
                break;
 8005bd4:	e091      	b.n	8005cfa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	da0b      	bge.n	8005bf6 <USBD_StdEPReq+0x212>
 8005bde:	7bbb      	ldrb	r3, [r7, #14]
 8005be0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005be4:	4613      	mov	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	3310      	adds	r3, #16
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	e00b      	b.n	8005c0e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005bf6:	7bbb      	ldrb	r3, [r7, #14]
 8005bf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 fc37 	bl	8006490 <USBD_CtlSendData>
              break;
 8005c22:	e06a      	b.n	8005cfa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005c24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	da11      	bge.n	8005c50 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005c2c:	7bbb      	ldrb	r3, [r7, #14]
 8005c2e:	f003 020f 	and.w	r2, r3, #15
 8005c32:	6879      	ldr	r1, [r7, #4]
 8005c34:	4613      	mov	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3324      	adds	r3, #36	; 0x24
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d117      	bne.n	8005c76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fbb0 	bl	80063ae <USBD_CtlError>
                  break;
 8005c4e:	e054      	b.n	8005cfa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005c50:	7bbb      	ldrb	r3, [r7, #14]
 8005c52:	f003 020f 	and.w	r2, r3, #15
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	440b      	add	r3, r1
 8005c62:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d104      	bne.n	8005c76 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005c6c:	6839      	ldr	r1, [r7, #0]
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fb9d 	bl	80063ae <USBD_CtlError>
                  break;
 8005c74:	e041      	b.n	8005cfa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	da0b      	bge.n	8005c96 <USBD_StdEPReq+0x2b2>
 8005c7e:	7bbb      	ldrb	r3, [r7, #14]
 8005c80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c84:	4613      	mov	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	3310      	adds	r3, #16
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	4413      	add	r3, r2
 8005c92:	3304      	adds	r3, #4
 8005c94:	e00b      	b.n	8005cae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c96:	7bbb      	ldrb	r3, [r7, #14]
 8005c98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	4413      	add	r3, r2
 8005cac:	3304      	adds	r3, #4
 8005cae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005cb0:	7bbb      	ldrb	r3, [r7, #14]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <USBD_StdEPReq+0x2d8>
 8005cb6:	7bbb      	ldrb	r3, [r7, #14]
 8005cb8:	2b80      	cmp	r3, #128	; 0x80
 8005cba:	d103      	bne.n	8005cc4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
 8005cc2:	e00e      	b.n	8005ce2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005cc4:	7bbb      	ldrb	r3, [r7, #14]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f004 fc93 	bl	800a5f4 <USBD_LL_IsStallEP>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d003      	beq.n	8005cdc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	e002      	b.n	8005ce2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fbd1 	bl	8006490 <USBD_CtlSendData>
              break;
 8005cee:	e004      	b.n	8005cfa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fb5b 	bl	80063ae <USBD_CtlError>
              break;
 8005cf8:	bf00      	nop
          }
          break;
 8005cfa:	e004      	b.n	8005d06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005cfc:	6839      	ldr	r1, [r7, #0]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fb55 	bl	80063ae <USBD_CtlError>
          break;
 8005d04:	bf00      	nop
      }
      break;
 8005d06:	e005      	b.n	8005d14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fb4f 	bl	80063ae <USBD_CtlError>
      break;
 8005d10:	e000      	b.n	8005d14 <USBD_StdEPReq+0x330>
      break;
 8005d12:	bf00      	nop
  }

  return ret;
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3710      	adds	r7, #16
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
	...

08005d20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	885b      	ldrh	r3, [r3, #2]
 8005d3a:	0a1b      	lsrs	r3, r3, #8
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	2b06      	cmp	r3, #6
 8005d42:	f200 8128 	bhi.w	8005f96 <USBD_GetDescriptor+0x276>
 8005d46:	a201      	add	r2, pc, #4	; (adr r2, 8005d4c <USBD_GetDescriptor+0x2c>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005d69 	.word	0x08005d69
 8005d50:	08005d81 	.word	0x08005d81
 8005d54:	08005dc1 	.word	0x08005dc1
 8005d58:	08005f97 	.word	0x08005f97
 8005d5c:	08005f97 	.word	0x08005f97
 8005d60:	08005f37 	.word	0x08005f37
 8005d64:	08005f63 	.word	0x08005f63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	7c12      	ldrb	r2, [r2, #16]
 8005d74:	f107 0108 	add.w	r1, r7, #8
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4798      	blx	r3
 8005d7c:	60f8      	str	r0, [r7, #12]
      break;
 8005d7e:	e112      	b.n	8005fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	7c1b      	ldrb	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d10d      	bne.n	8005da4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d90:	f107 0208 	add.w	r2, r7, #8
 8005d94:	4610      	mov	r0, r2
 8005d96:	4798      	blx	r3
 8005d98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	2202      	movs	r2, #2
 8005da0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005da2:	e100      	b.n	8005fa6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	f107 0208 	add.w	r2, r7, #8
 8005db0:	4610      	mov	r0, r2
 8005db2:	4798      	blx	r3
 8005db4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	3301      	adds	r3, #1
 8005dba:	2202      	movs	r2, #2
 8005dbc:	701a      	strb	r2, [r3, #0]
      break;
 8005dbe:	e0f2      	b.n	8005fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	885b      	ldrh	r3, [r3, #2]
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b05      	cmp	r3, #5
 8005dc8:	f200 80ac 	bhi.w	8005f24 <USBD_GetDescriptor+0x204>
 8005dcc:	a201      	add	r2, pc, #4	; (adr r2, 8005dd4 <USBD_GetDescriptor+0xb4>)
 8005dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd2:	bf00      	nop
 8005dd4:	08005ded 	.word	0x08005ded
 8005dd8:	08005e21 	.word	0x08005e21
 8005ddc:	08005e55 	.word	0x08005e55
 8005de0:	08005e89 	.word	0x08005e89
 8005de4:	08005ebd 	.word	0x08005ebd
 8005de8:	08005ef1 	.word	0x08005ef1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00b      	beq.n	8005e10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	7c12      	ldrb	r2, [r2, #16]
 8005e04:	f107 0108 	add.w	r1, r7, #8
 8005e08:	4610      	mov	r0, r2
 8005e0a:	4798      	blx	r3
 8005e0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e0e:	e091      	b.n	8005f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 facb 	bl	80063ae <USBD_CtlError>
            err++;
 8005e18:	7afb      	ldrb	r3, [r7, #11]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e1e:	e089      	b.n	8005f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00b      	beq.n	8005e44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	7c12      	ldrb	r2, [r2, #16]
 8005e38:	f107 0108 	add.w	r1, r7, #8
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	4798      	blx	r3
 8005e40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e42:	e077      	b.n	8005f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e44:	6839      	ldr	r1, [r7, #0]
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fab1 	bl	80063ae <USBD_CtlError>
            err++;
 8005e4c:	7afb      	ldrb	r3, [r7, #11]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	72fb      	strb	r3, [r7, #11]
          break;
 8005e52:	e06f      	b.n	8005f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00b      	beq.n	8005e78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	7c12      	ldrb	r2, [r2, #16]
 8005e6c:	f107 0108 	add.w	r1, r7, #8
 8005e70:	4610      	mov	r0, r2
 8005e72:	4798      	blx	r3
 8005e74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e76:	e05d      	b.n	8005f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e78:	6839      	ldr	r1, [r7, #0]
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 fa97 	bl	80063ae <USBD_CtlError>
            err++;
 8005e80:	7afb      	ldrb	r3, [r7, #11]
 8005e82:	3301      	adds	r3, #1
 8005e84:	72fb      	strb	r3, [r7, #11]
          break;
 8005e86:	e055      	b.n	8005f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e9a:	691b      	ldr	r3, [r3, #16]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	7c12      	ldrb	r2, [r2, #16]
 8005ea0:	f107 0108 	add.w	r1, r7, #8
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	4798      	blx	r3
 8005ea8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005eaa:	e043      	b.n	8005f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005eac:	6839      	ldr	r1, [r7, #0]
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa7d 	bl	80063ae <USBD_CtlError>
            err++;
 8005eb4:	7afb      	ldrb	r3, [r7, #11]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	72fb      	strb	r3, [r7, #11]
          break;
 8005eba:	e03b      	b.n	8005f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00b      	beq.n	8005ee0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	7c12      	ldrb	r2, [r2, #16]
 8005ed4:	f107 0108 	add.w	r1, r7, #8
 8005ed8:	4610      	mov	r0, r2
 8005eda:	4798      	blx	r3
 8005edc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ede:	e029      	b.n	8005f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa63 	bl	80063ae <USBD_CtlError>
            err++;
 8005ee8:	7afb      	ldrb	r3, [r7, #11]
 8005eea:	3301      	adds	r3, #1
 8005eec:	72fb      	strb	r3, [r7, #11]
          break;
 8005eee:	e021      	b.n	8005f34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00b      	beq.n	8005f14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	7c12      	ldrb	r2, [r2, #16]
 8005f08:	f107 0108 	add.w	r1, r7, #8
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	4798      	blx	r3
 8005f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f12:	e00f      	b.n	8005f34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f14:	6839      	ldr	r1, [r7, #0]
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fa49 	bl	80063ae <USBD_CtlError>
            err++;
 8005f1c:	7afb      	ldrb	r3, [r7, #11]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	72fb      	strb	r3, [r7, #11]
          break;
 8005f22:	e007      	b.n	8005f34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fa41 	bl	80063ae <USBD_CtlError>
          err++;
 8005f2c:	7afb      	ldrb	r3, [r7, #11]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005f32:	bf00      	nop
      }
      break;
 8005f34:	e037      	b.n	8005fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	7c1b      	ldrb	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f46:	f107 0208 	add.w	r2, r7, #8
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	4798      	blx	r3
 8005f4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f50:	e029      	b.n	8005fa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 fa2a 	bl	80063ae <USBD_CtlError>
        err++;
 8005f5a:	7afb      	ldrb	r3, [r7, #11]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	72fb      	strb	r3, [r7, #11]
      break;
 8005f60:	e021      	b.n	8005fa6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	7c1b      	ldrb	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10d      	bne.n	8005f86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	f107 0208 	add.w	r2, r7, #8
 8005f76:	4610      	mov	r0, r2
 8005f78:	4798      	blx	r3
 8005f7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	2207      	movs	r2, #7
 8005f82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f84:	e00f      	b.n	8005fa6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005f86:	6839      	ldr	r1, [r7, #0]
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fa10 	bl	80063ae <USBD_CtlError>
        err++;
 8005f8e:	7afb      	ldrb	r3, [r7, #11]
 8005f90:	3301      	adds	r3, #1
 8005f92:	72fb      	strb	r3, [r7, #11]
      break;
 8005f94:	e007      	b.n	8005fa6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005f96:	6839      	ldr	r1, [r7, #0]
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fa08 	bl	80063ae <USBD_CtlError>
      err++;
 8005f9e:	7afb      	ldrb	r3, [r7, #11]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	72fb      	strb	r3, [r7, #11]
      break;
 8005fa4:	bf00      	nop
  }

  if (err != 0U)
 8005fa6:	7afb      	ldrb	r3, [r7, #11]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d11e      	bne.n	8005fea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	88db      	ldrh	r3, [r3, #6]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d016      	beq.n	8005fe2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005fb4:	893b      	ldrh	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00e      	beq.n	8005fd8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	88da      	ldrh	r2, [r3, #6]
 8005fbe:	893b      	ldrh	r3, [r7, #8]
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	bf28      	it	cs
 8005fc4:	4613      	movcs	r3, r2
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005fca:	893b      	ldrh	r3, [r7, #8]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	68f9      	ldr	r1, [r7, #12]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fa5d 	bl	8006490 <USBD_CtlSendData>
 8005fd6:	e009      	b.n	8005fec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f9e7 	bl	80063ae <USBD_CtlError>
 8005fe0:	e004      	b.n	8005fec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 faae 	bl	8006544 <USBD_CtlSendStatus>
 8005fe8:	e000      	b.n	8005fec <USBD_GetDescriptor+0x2cc>
    return;
 8005fea:	bf00      	nop
  }
}
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop

08005ff4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	889b      	ldrh	r3, [r3, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d131      	bne.n	800606a <USBD_SetAddress+0x76>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	88db      	ldrh	r3, [r3, #6]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d12d      	bne.n	800606a <USBD_SetAddress+0x76>
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	885b      	ldrh	r3, [r3, #2]
 8006012:	2b7f      	cmp	r3, #127	; 0x7f
 8006014:	d829      	bhi.n	800606a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	885b      	ldrh	r3, [r3, #2]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006020:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b03      	cmp	r3, #3
 800602c:	d104      	bne.n	8006038 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800602e:	6839      	ldr	r1, [r7, #0]
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f9bc 	bl	80063ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006036:	e01d      	b.n	8006074 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	7bfa      	ldrb	r2, [r7, #15]
 800603c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f004 fb01 	bl	800a64c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa7a 	bl	8006544 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d004      	beq.n	8006060 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2202      	movs	r2, #2
 800605a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800605e:	e009      	b.n	8006074 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006068:	e004      	b.n	8006074 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800606a:	6839      	ldr	r1, [r7, #0]
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f99e 	bl	80063ae <USBD_CtlError>
  }
}
 8006072:	bf00      	nop
 8006074:	bf00      	nop
 8006076:	3710      	adds	r7, #16
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	885b      	ldrh	r3, [r3, #2]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	4b4e      	ldr	r3, [pc, #312]	; (80061cc <USBD_SetConfig+0x150>)
 8006092:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006094:	4b4d      	ldr	r3, [pc, #308]	; (80061cc <USBD_SetConfig+0x150>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d905      	bls.n	80060a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f985 	bl	80063ae <USBD_CtlError>
    return USBD_FAIL;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e08c      	b.n	80061c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d002      	beq.n	80060ba <USBD_SetConfig+0x3e>
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d029      	beq.n	800610c <USBD_SetConfig+0x90>
 80060b8:	e075      	b.n	80061a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80060ba:	4b44      	ldr	r3, [pc, #272]	; (80061cc <USBD_SetConfig+0x150>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d020      	beq.n	8006104 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80060c2:	4b42      	ldr	r3, [pc, #264]	; (80061cc <USBD_SetConfig+0x150>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80060cc:	4b3f      	ldr	r3, [pc, #252]	; (80061cc <USBD_SetConfig+0x150>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	4619      	mov	r1, r3
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7fe ffe7 	bl	80050a6 <USBD_SetClassConfig>
 80060d8:	4603      	mov	r3, r0
 80060da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d008      	beq.n	80060f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 f962 	bl	80063ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2202      	movs	r2, #2
 80060ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80060f2:	e065      	b.n	80061c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fa25 	bl	8006544 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2203      	movs	r2, #3
 80060fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006102:	e05d      	b.n	80061c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fa1d 	bl	8006544 <USBD_CtlSendStatus>
      break;
 800610a:	e059      	b.n	80061c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800610c:	4b2f      	ldr	r3, [pc, #188]	; (80061cc <USBD_SetConfig+0x150>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d112      	bne.n	800613a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800611c:	4b2b      	ldr	r3, [pc, #172]	; (80061cc <USBD_SetConfig+0x150>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006126:	4b29      	ldr	r3, [pc, #164]	; (80061cc <USBD_SetConfig+0x150>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	4619      	mov	r1, r3
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7fe ffd6 	bl	80050de <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 fa06 	bl	8006544 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006138:	e042      	b.n	80061c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800613a:	4b24      	ldr	r3, [pc, #144]	; (80061cc <USBD_SetConfig+0x150>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d02a      	beq.n	800619e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	4619      	mov	r1, r3
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7fe ffc4 	bl	80050de <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006156:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <USBD_SetConfig+0x150>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006160:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <USBD_SetConfig+0x150>)
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	4619      	mov	r1, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fe ff9d 	bl	80050a6 <USBD_SetClassConfig>
 800616c:	4603      	mov	r3, r0
 800616e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d00f      	beq.n	8006196 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006176:	6839      	ldr	r1, [r7, #0]
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f918 	bl	80063ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	b2db      	uxtb	r3, r3
 8006184:	4619      	mov	r1, r3
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7fe ffa9 	bl	80050de <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006194:	e014      	b.n	80061c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f9d4 	bl	8006544 <USBD_CtlSendStatus>
      break;
 800619c:	e010      	b.n	80061c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f9d0 	bl	8006544 <USBD_CtlSendStatus>
      break;
 80061a4:	e00c      	b.n	80061c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80061a6:	6839      	ldr	r1, [r7, #0]
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f900 	bl	80063ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80061ae:	4b07      	ldr	r3, [pc, #28]	; (80061cc <USBD_SetConfig+0x150>)
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	4619      	mov	r1, r3
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7fe ff92 	bl	80050de <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80061ba:	2303      	movs	r3, #3
 80061bc:	73fb      	strb	r3, [r7, #15]
      break;
 80061be:	bf00      	nop
  }

  return ret;
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	200002d4 	.word	0x200002d4

080061d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	88db      	ldrh	r3, [r3, #6]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d004      	beq.n	80061ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80061e2:	6839      	ldr	r1, [r7, #0]
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 f8e2 	bl	80063ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80061ea:	e023      	b.n	8006234 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	dc02      	bgt.n	80061fe <USBD_GetConfig+0x2e>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	dc03      	bgt.n	8006204 <USBD_GetConfig+0x34>
 80061fc:	e015      	b.n	800622a <USBD_GetConfig+0x5a>
 80061fe:	2b03      	cmp	r3, #3
 8006200:	d00b      	beq.n	800621a <USBD_GetConfig+0x4a>
 8006202:	e012      	b.n	800622a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3308      	adds	r3, #8
 800620e:	2201      	movs	r2, #1
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f93c 	bl	8006490 <USBD_CtlSendData>
        break;
 8006218:	e00c      	b.n	8006234 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	3304      	adds	r3, #4
 800621e:	2201      	movs	r2, #1
 8006220:	4619      	mov	r1, r3
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f934 	bl	8006490 <USBD_CtlSendData>
        break;
 8006228:	e004      	b.n	8006234 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f8be 	bl	80063ae <USBD_CtlError>
        break;
 8006232:	bf00      	nop
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800624c:	b2db      	uxtb	r3, r3
 800624e:	3b01      	subs	r3, #1
 8006250:	2b02      	cmp	r3, #2
 8006252:	d81e      	bhi.n	8006292 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	88db      	ldrh	r3, [r3, #6]
 8006258:	2b02      	cmp	r3, #2
 800625a:	d004      	beq.n	8006266 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f8a5 	bl	80063ae <USBD_CtlError>
        break;
 8006264:	e01a      	b.n	800629c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f043 0202 	orr.w	r2, r3, #2
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	330c      	adds	r3, #12
 8006286:	2202      	movs	r2, #2
 8006288:	4619      	mov	r1, r3
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f900 	bl	8006490 <USBD_CtlSendData>
      break;
 8006290:	e004      	b.n	800629c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f88a 	bl	80063ae <USBD_CtlError>
      break;
 800629a:	bf00      	nop
  }
}
 800629c:	bf00      	nop
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	885b      	ldrh	r3, [r3, #2]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d107      	bne.n	80062c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f940 	bl	8006544 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80062c4:	e013      	b.n	80062ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	885b      	ldrh	r3, [r3, #2]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d10b      	bne.n	80062e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	889b      	ldrh	r3, [r3, #4]
 80062d2:	0a1b      	lsrs	r3, r3, #8
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 f930 	bl	8006544 <USBD_CtlSendStatus>
}
 80062e4:	e003      	b.n	80062ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80062e6:	6839      	ldr	r1, [r7, #0]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 f860 	bl	80063ae <USBD_CtlError>
}
 80062ee:	bf00      	nop
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b082      	sub	sp, #8
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006306:	b2db      	uxtb	r3, r3
 8006308:	3b01      	subs	r3, #1
 800630a:	2b02      	cmp	r3, #2
 800630c:	d80b      	bhi.n	8006326 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	885b      	ldrh	r3, [r3, #2]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d10c      	bne.n	8006330 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f910 	bl	8006544 <USBD_CtlSendStatus>
      }
      break;
 8006324:	e004      	b.n	8006330 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f840 	bl	80063ae <USBD_CtlError>
      break;
 800632e:	e000      	b.n	8006332 <USBD_ClrFeature+0x3c>
      break;
 8006330:	bf00      	nop
  }
}
 8006332:	bf00      	nop
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b084      	sub	sp, #16
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	781a      	ldrb	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	3301      	adds	r3, #1
 8006354:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	781a      	ldrb	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3301      	adds	r3, #1
 8006362:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	f7ff fa41 	bl	80057ec <SWAPBYTE>
 800636a:	4603      	mov	r3, r0
 800636c:	461a      	mov	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	3301      	adds	r3, #1
 8006376:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3301      	adds	r3, #1
 800637c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f7ff fa34 	bl	80057ec <SWAPBYTE>
 8006384:	4603      	mov	r3, r0
 8006386:	461a      	mov	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3301      	adds	r3, #1
 8006390:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3301      	adds	r3, #1
 8006396:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7ff fa27 	bl	80057ec <SWAPBYTE>
 800639e:	4603      	mov	r3, r0
 80063a0:	461a      	mov	r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	80da      	strh	r2, [r3, #6]
}
 80063a6:	bf00      	nop
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b082      	sub	sp, #8
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80063b8:	2180      	movs	r1, #128	; 0x80
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f004 f8dc 	bl	800a578 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80063c0:	2100      	movs	r1, #0
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f004 f8d8 	bl	800a578 <USBD_LL_StallEP>
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d036      	beq.n	8006454 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80063ea:	6938      	ldr	r0, [r7, #16]
 80063ec:	f000 f836 	bl	800645c <USBD_GetLen>
 80063f0:	4603      	mov	r3, r0
 80063f2:	3301      	adds	r3, #1
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80063fe:	7dfb      	ldrb	r3, [r7, #23]
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	4413      	add	r3, r2
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	7812      	ldrb	r2, [r2, #0]
 8006408:	701a      	strb	r2, [r3, #0]
  idx++;
 800640a:	7dfb      	ldrb	r3, [r7, #23]
 800640c:	3301      	adds	r3, #1
 800640e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	68ba      	ldr	r2, [r7, #8]
 8006414:	4413      	add	r3, r2
 8006416:	2203      	movs	r2, #3
 8006418:	701a      	strb	r2, [r3, #0]
  idx++;
 800641a:	7dfb      	ldrb	r3, [r7, #23]
 800641c:	3301      	adds	r3, #1
 800641e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006420:	e013      	b.n	800644a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006422:	7dfb      	ldrb	r3, [r7, #23]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	4413      	add	r3, r2
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	7812      	ldrb	r2, [r2, #0]
 800642c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	3301      	adds	r3, #1
 8006432:	613b      	str	r3, [r7, #16]
    idx++;
 8006434:	7dfb      	ldrb	r3, [r7, #23]
 8006436:	3301      	adds	r3, #1
 8006438:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	4413      	add	r3, r2
 8006440:	2200      	movs	r2, #0
 8006442:	701a      	strb	r2, [r3, #0]
    idx++;
 8006444:	7dfb      	ldrb	r3, [r7, #23]
 8006446:	3301      	adds	r3, #1
 8006448:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1e7      	bne.n	8006422 <USBD_GetString+0x52>
 8006452:	e000      	b.n	8006456 <USBD_GetString+0x86>
    return;
 8006454:	bf00      	nop
  }
}
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800646c:	e005      	b.n	800647a <USBD_GetLen+0x1e>
  {
    len++;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	3301      	adds	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	3301      	adds	r3, #1
 8006478:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f5      	bne.n	800646e <USBD_GetLen+0x12>
  }

  return len;
 8006482:	7bfb      	ldrb	r3, [r7, #15]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2202      	movs	r2, #2
 80064a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	2100      	movs	r1, #0
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f004 f8e7 	bl	800a68a <USBD_LL_Transmit>

  return USBD_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	60f8      	str	r0, [r7, #12]
 80064ce:	60b9      	str	r1, [r7, #8]
 80064d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	2100      	movs	r1, #0
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f004 f8d6 	bl	800a68a <USBD_LL_Transmit>

  return USBD_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3710      	adds	r7, #16
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2203      	movs	r2, #3
 80064f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	2100      	movs	r1, #0
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f004 f8da 	bl	800a6cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b084      	sub	sp, #16
 8006526:	af00      	add	r7, sp, #0
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	2100      	movs	r1, #0
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f004 f8c9 	bl	800a6cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3710      	adds	r7, #16
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2204      	movs	r2, #4
 8006550:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006554:	2300      	movs	r3, #0
 8006556:	2200      	movs	r2, #0
 8006558:	2100      	movs	r1, #0
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f004 f895 	bl	800a68a <USBD_LL_Transmit>

  return USBD_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b082      	sub	sp, #8
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2205      	movs	r2, #5
 8006576:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800657a:	2300      	movs	r3, #0
 800657c:	2200      	movs	r2, #0
 800657e:	2100      	movs	r1, #0
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f004 f8a3 	bl	800a6cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <__NVIC_SetPriority>:
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	4603      	mov	r3, r0
 8006598:	6039      	str	r1, [r7, #0]
 800659a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800659c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	db0a      	blt.n	80065ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	490c      	ldr	r1, [pc, #48]	; (80065dc <__NVIC_SetPriority+0x4c>)
 80065aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065ae:	0112      	lsls	r2, r2, #4
 80065b0:	b2d2      	uxtb	r2, r2
 80065b2:	440b      	add	r3, r1
 80065b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80065b8:	e00a      	b.n	80065d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	4908      	ldr	r1, [pc, #32]	; (80065e0 <__NVIC_SetPriority+0x50>)
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	3b04      	subs	r3, #4
 80065c8:	0112      	lsls	r2, r2, #4
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	440b      	add	r3, r1
 80065ce:	761a      	strb	r2, [r3, #24]
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	e000e100 	.word	0xe000e100
 80065e0:	e000ed00 	.word	0xe000ed00

080065e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80065e8:	2100      	movs	r1, #0
 80065ea:	f06f 0004 	mvn.w	r0, #4
 80065ee:	f7ff ffcf 	bl	8006590 <__NVIC_SetPriority>
#endif
}
 80065f2:	bf00      	nop
 80065f4:	bd80      	pop	{r7, pc}
	...

080065f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80065f8:	b480      	push	{r7}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065fe:	f3ef 8305 	mrs	r3, IPSR
 8006602:	603b      	str	r3, [r7, #0]
  return(result);
 8006604:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800660a:	f06f 0305 	mvn.w	r3, #5
 800660e:	607b      	str	r3, [r7, #4]
 8006610:	e00c      	b.n	800662c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006612:	4b0a      	ldr	r3, [pc, #40]	; (800663c <osKernelInitialize+0x44>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d105      	bne.n	8006626 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800661a:	4b08      	ldr	r3, [pc, #32]	; (800663c <osKernelInitialize+0x44>)
 800661c:	2201      	movs	r2, #1
 800661e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006620:	2300      	movs	r3, #0
 8006622:	607b      	str	r3, [r7, #4]
 8006624:	e002      	b.n	800662c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800662a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800662c:	687b      	ldr	r3, [r7, #4]
}
 800662e:	4618      	mov	r0, r3
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	200002d8 	.word	0x200002d8

08006640 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006646:	f3ef 8305 	mrs	r3, IPSR
 800664a:	603b      	str	r3, [r7, #0]
  return(result);
 800664c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800664e:	2b00      	cmp	r3, #0
 8006650:	d003      	beq.n	800665a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006652:	f06f 0305 	mvn.w	r3, #5
 8006656:	607b      	str	r3, [r7, #4]
 8006658:	e010      	b.n	800667c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800665a:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <osKernelStart+0x48>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d109      	bne.n	8006676 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006662:	f7ff ffbf 	bl	80065e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006666:	4b08      	ldr	r3, [pc, #32]	; (8006688 <osKernelStart+0x48>)
 8006668:	2202      	movs	r2, #2
 800666a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800666c:	f001 fbde 	bl	8007e2c <vTaskStartScheduler>
      stat = osOK;
 8006670:	2300      	movs	r3, #0
 8006672:	607b      	str	r3, [r7, #4]
 8006674:	e002      	b.n	800667c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006676:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800667a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800667c:	687b      	ldr	r3, [r7, #4]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3708      	adds	r7, #8
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	200002d8 	.word	0x200002d8

0800668c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800668c:	b580      	push	{r7, lr}
 800668e:	b08e      	sub	sp, #56	; 0x38
 8006690:	af04      	add	r7, sp, #16
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006698:	2300      	movs	r3, #0
 800669a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800669c:	f3ef 8305 	mrs	r3, IPSR
 80066a0:	617b      	str	r3, [r7, #20]
  return(result);
 80066a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d17e      	bne.n	80067a6 <osThreadNew+0x11a>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d07b      	beq.n	80067a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80066ae:	2380      	movs	r3, #128	; 0x80
 80066b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80066b2:	2318      	movs	r3, #24
 80066b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80066ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d045      	beq.n	8006752 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d002      	beq.n	80066d4 <osThreadNew+0x48>
        name = attr->name;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	699b      	ldr	r3, [r3, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d008      	beq.n	80066fa <osThreadNew+0x6e>
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	2b38      	cmp	r3, #56	; 0x38
 80066ec:	d805      	bhi.n	80066fa <osThreadNew+0x6e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <osThreadNew+0x72>
        return (NULL);
 80066fa:	2300      	movs	r3, #0
 80066fc:	e054      	b.n	80067a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	089b      	lsrs	r3, r3, #2
 800670c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00e      	beq.n	8006734 <osThreadNew+0xa8>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	2bcb      	cmp	r3, #203	; 0xcb
 800671c:	d90a      	bls.n	8006734 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006722:	2b00      	cmp	r3, #0
 8006724:	d006      	beq.n	8006734 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <osThreadNew+0xa8>
        mem = 1;
 800672e:	2301      	movs	r3, #1
 8006730:	61bb      	str	r3, [r7, #24]
 8006732:	e010      	b.n	8006756 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10c      	bne.n	8006756 <osThreadNew+0xca>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68db      	ldr	r3, [r3, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d108      	bne.n	8006756 <osThreadNew+0xca>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d104      	bne.n	8006756 <osThreadNew+0xca>
          mem = 0;
 800674c:	2300      	movs	r3, #0
 800674e:	61bb      	str	r3, [r7, #24]
 8006750:	e001      	b.n	8006756 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006752:	2300      	movs	r3, #0
 8006754:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d110      	bne.n	800677e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006764:	9202      	str	r2, [sp, #8]
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6a3a      	ldr	r2, [r7, #32]
 8006770:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f001 f96d 	bl	8007a52 <xTaskCreateStatic>
 8006778:	4603      	mov	r3, r0
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	e013      	b.n	80067a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d110      	bne.n	80067a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	b29a      	uxth	r2, r3
 8006788:	f107 0310 	add.w	r3, r7, #16
 800678c:	9301      	str	r3, [sp, #4]
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	9300      	str	r3, [sp, #0]
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f001 f9b8 	bl	8007b0c <xTaskCreate>
 800679c:	4603      	mov	r3, r0
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d001      	beq.n	80067a6 <osThreadNew+0x11a>
            hTask = NULL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80067a6:	693b      	ldr	r3, [r7, #16]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3728      	adds	r7, #40	; 0x28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4a07      	ldr	r2, [pc, #28]	; (80067dc <vApplicationGetIdleTaskMemory+0x2c>)
 80067c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	4a06      	ldr	r2, [pc, #24]	; (80067e0 <vApplicationGetIdleTaskMemory+0x30>)
 80067c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2280      	movs	r2, #128	; 0x80
 80067cc:	601a      	str	r2, [r3, #0]
}
 80067ce:	bf00      	nop
 80067d0:	3714      	adds	r7, #20
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	200002dc 	.word	0x200002dc
 80067e0:	200003a8 	.word	0x200003a8

080067e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4a07      	ldr	r2, [pc, #28]	; (8006810 <vApplicationGetTimerTaskMemory+0x2c>)
 80067f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	4a06      	ldr	r2, [pc, #24]	; (8006814 <vApplicationGetTimerTaskMemory+0x30>)
 80067fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006802:	601a      	str	r2, [r3, #0]
}
 8006804:	bf00      	nop
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr
 8006810:	200005a8 	.word	0x200005a8
 8006814:	20000674 	.word	0x20000674

08006818 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f103 0208 	add.w	r2, r3, #8
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006830:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f103 0208 	add.w	r2, r3, #8
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f103 0208 	add.w	r2, r3, #8
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006866:	bf00      	nop
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	601a      	str	r2, [r3, #0]
}
 80068ae:	bf00      	nop
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr

080068ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068ba:	b480      	push	{r7}
 80068bc:	b085      	sub	sp, #20
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068d0:	d103      	bne.n	80068da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	60fb      	str	r3, [r7, #12]
 80068d8:	e00c      	b.n	80068f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	3308      	adds	r3, #8
 80068de:	60fb      	str	r3, [r7, #12]
 80068e0:	e002      	b.n	80068e8 <vListInsert+0x2e>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d2f6      	bcs.n	80068e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	1c5a      	adds	r2, r3, #1
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	601a      	str	r2, [r3, #0]
}
 8006920:	bf00      	nop
 8006922:	3714      	adds	r7, #20
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6892      	ldr	r2, [r2, #8]
 8006942:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	6852      	ldr	r2, [r2, #4]
 800694c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	429a      	cmp	r2, r3
 8006956:	d103      	bne.n	8006960 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	1e5a      	subs	r2, r3, #1
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80069aa:	f002 fe4b 	bl	8009644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b6:	68f9      	ldr	r1, [r7, #12]
 80069b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069ba:	fb01 f303 	mul.w	r3, r1, r3
 80069be:	441a      	add	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069da:	3b01      	subs	r3, #1
 80069dc:	68f9      	ldr	r1, [r7, #12]
 80069de:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069e0:	fb01 f303 	mul.w	r3, r1, r3
 80069e4:	441a      	add	r2, r3
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	22ff      	movs	r2, #255	; 0xff
 80069ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	22ff      	movs	r2, #255	; 0xff
 80069f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d114      	bne.n	8006a2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d01a      	beq.n	8006a3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	3310      	adds	r3, #16
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f001 fca7 	bl	8008360 <xTaskRemoveFromEventList>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d012      	beq.n	8006a3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <xQueueGenericReset+0xcc>)
 8006a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	f3bf 8f4f 	dsb	sy
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	e009      	b.n	8006a3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3310      	adds	r3, #16
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff fef2 	bl	8006818 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3324      	adds	r3, #36	; 0x24
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff feed 	bl	8006818 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a3e:	f002 fe31 	bl	80096a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a42:	2301      	movs	r3, #1
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	e000ed04 	.word	0xe000ed04

08006a50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08e      	sub	sp, #56	; 0x38
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10a      	bne.n	8006a7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a76:	bf00      	nop
 8006a78:	e7fe      	b.n	8006a78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a92:	bf00      	nop
 8006a94:	e7fe      	b.n	8006a94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <xQueueGenericCreateStatic+0x52>
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <xQueueGenericCreateStatic+0x56>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <xQueueGenericCreateStatic+0x58>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	623b      	str	r3, [r7, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d102      	bne.n	8006ace <xQueueGenericCreateStatic+0x7e>
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <xQueueGenericCreateStatic+0x82>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <xQueueGenericCreateStatic+0x84>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10a      	bne.n	8006aee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006adc:	f383 8811 	msr	BASEPRI, r3
 8006ae0:	f3bf 8f6f 	isb	sy
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	61fb      	str	r3, [r7, #28]
}
 8006aea:	bf00      	nop
 8006aec:	e7fe      	b.n	8006aec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006aee:	2350      	movs	r3, #80	; 0x50
 8006af0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b50      	cmp	r3, #80	; 0x50
 8006af6:	d00a      	beq.n	8006b0e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	61bb      	str	r3, [r7, #24]
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00d      	beq.n	8006b36 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f83f 	bl	8006bb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3730      	adds	r7, #48	; 0x30
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08a      	sub	sp, #40	; 0x28
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	613b      	str	r3, [r7, #16]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	fb02 f303 	mul.w	r3, r2, r3
 8006b72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	3350      	adds	r3, #80	; 0x50
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f002 fe85 	bl	8009888 <pvPortMalloc>
 8006b7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d011      	beq.n	8006baa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	3350      	adds	r3, #80	; 0x50
 8006b8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b98:	79fa      	ldrb	r2, [r7, #7]
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	68b9      	ldr	r1, [r7, #8]
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 f805 	bl	8006bb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006baa:	69bb      	ldr	r3, [r7, #24]
	}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3720      	adds	r7, #32
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d103      	bne.n	8006bd0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e002      	b.n	8006bd6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006be2:	2101      	movs	r1, #1
 8006be4:	69b8      	ldr	r0, [r7, #24]
 8006be6:	f7ff fecb 	bl	8006980 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006bf2:	bf00      	nop
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00e      	beq.n	8006c26 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2100      	movs	r1, #0
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f81d 	bl	8006c60 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b086      	sub	sp, #24
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	4603      	mov	r3, r0
 8006c36:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	617b      	str	r3, [r7, #20]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006c40:	79fb      	ldrb	r3, [r7, #7]
 8006c42:	461a      	mov	r2, r3
 8006c44:	6939      	ldr	r1, [r7, #16]
 8006c46:	6978      	ldr	r0, [r7, #20]
 8006c48:	f7ff ff7a 	bl	8006b40 <xQueueGenericCreate>
 8006c4c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f7ff ffd3 	bl	8006bfa <prvInitialiseMutex>

		return xNewQueue;
 8006c54:	68fb      	ldr	r3, [r7, #12]
	}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
	...

08006c60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08e      	sub	sp, #56	; 0x38
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10a      	bne.n	8006c92 <xQueueGenericSend+0x32>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c8e:	bf00      	nop
 8006c90:	e7fe      	b.n	8006c90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d103      	bne.n	8006ca0 <xQueueGenericSend+0x40>
 8006c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <xQueueGenericSend+0x44>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e000      	b.n	8006ca6 <xQueueGenericSend+0x46>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10a      	bne.n	8006cc0 <xQueueGenericSend+0x60>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d103      	bne.n	8006cce <xQueueGenericSend+0x6e>
 8006cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <xQueueGenericSend+0x72>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e000      	b.n	8006cd4 <xQueueGenericSend+0x74>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10a      	bne.n	8006cee <xQueueGenericSend+0x8e>
	__asm volatile
 8006cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	623b      	str	r3, [r7, #32]
}
 8006cea:	bf00      	nop
 8006cec:	e7fe      	b.n	8006cec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cee:	f001 fd09 	bl	8008704 <xTaskGetSchedulerState>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d102      	bne.n	8006cfe <xQueueGenericSend+0x9e>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <xQueueGenericSend+0xa2>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e000      	b.n	8006d04 <xQueueGenericSend+0xa4>
 8006d02:	2300      	movs	r3, #0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10a      	bne.n	8006d1e <xQueueGenericSend+0xbe>
	__asm volatile
 8006d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0c:	f383 8811 	msr	BASEPRI, r3
 8006d10:	f3bf 8f6f 	isb	sy
 8006d14:	f3bf 8f4f 	dsb	sy
 8006d18:	61fb      	str	r3, [r7, #28]
}
 8006d1a:	bf00      	nop
 8006d1c:	e7fe      	b.n	8006d1c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d1e:	f002 fc91 	bl	8009644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d302      	bcc.n	8006d34 <xQueueGenericSend+0xd4>
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d129      	bne.n	8006d88 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d34:	683a      	ldr	r2, [r7, #0]
 8006d36:	68b9      	ldr	r1, [r7, #8]
 8006d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d3a:	f000 fbbb 	bl	80074b4 <prvCopyDataToQueue>
 8006d3e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d010      	beq.n	8006d6a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	3324      	adds	r3, #36	; 0x24
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f001 fb07 	bl	8008360 <xTaskRemoveFromEventList>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d013      	beq.n	8006d80 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d58:	4b3f      	ldr	r3, [pc, #252]	; (8006e58 <xQueueGenericSend+0x1f8>)
 8006d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	e00a      	b.n	8006d80 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d007      	beq.n	8006d80 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d70:	4b39      	ldr	r3, [pc, #228]	; (8006e58 <xQueueGenericSend+0x1f8>)
 8006d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d80:	f002 fc90 	bl	80096a4 <vPortExitCritical>
				return pdPASS;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e063      	b.n	8006e50 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d103      	bne.n	8006d96 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d8e:	f002 fc89 	bl	80096a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e05c      	b.n	8006e50 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d106      	bne.n	8006daa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d9c:	f107 0314 	add.w	r3, r7, #20
 8006da0:	4618      	mov	r0, r3
 8006da2:	f001 fb41 	bl	8008428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006da6:	2301      	movs	r3, #1
 8006da8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006daa:	f002 fc7b 	bl	80096a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dae:	f001 f8ad 	bl	8007f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006db2:	f002 fc47 	bl	8009644 <vPortEnterCritical>
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dbc:	b25b      	sxtb	r3, r3
 8006dbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dc2:	d103      	bne.n	8006dcc <xQueueGenericSend+0x16c>
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dd2:	b25b      	sxtb	r3, r3
 8006dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dd8:	d103      	bne.n	8006de2 <xQueueGenericSend+0x182>
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006de2:	f002 fc5f 	bl	80096a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006de6:	1d3a      	adds	r2, r7, #4
 8006de8:	f107 0314 	add.w	r3, r7, #20
 8006dec:	4611      	mov	r1, r2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f001 fb30 	bl	8008454 <xTaskCheckForTimeOut>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d124      	bne.n	8006e44 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006dfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dfc:	f000 fc52 	bl	80076a4 <prvIsQueueFull>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d018      	beq.n	8006e38 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	3310      	adds	r3, #16
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f001 fa56 	bl	80082c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e16:	f000 fbdd 	bl	80075d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e1a:	f001 f885 	bl	8007f28 <xTaskResumeAll>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f47f af7c 	bne.w	8006d1e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006e26:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <xQueueGenericSend+0x1f8>)
 8006e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	e772      	b.n	8006d1e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e3a:	f000 fbcb 	bl	80075d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e3e:	f001 f873 	bl	8007f28 <xTaskResumeAll>
 8006e42:	e76c      	b.n	8006d1e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006e46:	f000 fbc5 	bl	80075d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e4a:	f001 f86d 	bl	8007f28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e4e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3738      	adds	r7, #56	; 0x38
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	e000ed04 	.word	0xe000ed04

08006e5c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b090      	sub	sp, #64	; 0x40
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10a      	bne.n	8006e8a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d103      	bne.n	8006e98 <xQueueGenericSendFromISR+0x3c>
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <xQueueGenericSendFromISR+0x40>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e000      	b.n	8006e9e <xQueueGenericSendFromISR+0x42>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d10a      	bne.n	8006eb8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea6:	f383 8811 	msr	BASEPRI, r3
 8006eaa:	f3bf 8f6f 	isb	sy
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006eb4:	bf00      	nop
 8006eb6:	e7fe      	b.n	8006eb6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d103      	bne.n	8006ec6 <xQueueGenericSendFromISR+0x6a>
 8006ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d101      	bne.n	8006eca <xQueueGenericSendFromISR+0x6e>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <xQueueGenericSendFromISR+0x70>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10a      	bne.n	8006ee6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	623b      	str	r3, [r7, #32]
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ee6:	f002 fc8f 	bl	8009808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006eea:	f3ef 8211 	mrs	r2, BASEPRI
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	61fa      	str	r2, [r7, #28]
 8006f00:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f02:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f04:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d302      	bcc.n	8006f18 <xQueueGenericSendFromISR+0xbc>
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d12f      	bne.n	8006f78 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f26:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f2e:	f000 fac1 	bl	80074b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f32:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f3a:	d112      	bne.n	8006f62 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d016      	beq.n	8006f72 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	3324      	adds	r3, #36	; 0x24
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 fa09 	bl	8008360 <xTaskRemoveFromEventList>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00e      	beq.n	8006f72 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00b      	beq.n	8006f72 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	e007      	b.n	8006f72 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f66:	3301      	adds	r3, #1
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	b25a      	sxtb	r2, r3
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006f72:	2301      	movs	r3, #1
 8006f74:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006f76:	e001      	b.n	8006f7c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f86:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3740      	adds	r7, #64	; 0x40
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b08e      	sub	sp, #56	; 0x38
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
 8006f9a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10a      	bne.n	8006fbc <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	623b      	str	r3, [r7, #32]
}
 8006fb8:	bf00      	nop
 8006fba:	e7fe      	b.n	8006fba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d00a      	beq.n	8006fda <xQueueGiveFromISR+0x48>
	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	61fb      	str	r3, [r7, #28]
}
 8006fd6:	bf00      	nop
 8006fd8:	e7fe      	b.n	8006fd8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d103      	bne.n	8006fea <xQueueGiveFromISR+0x58>
 8006fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d101      	bne.n	8006fee <xQueueGiveFromISR+0x5c>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <xQueueGiveFromISR+0x5e>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10a      	bne.n	800700a <xQueueGiveFromISR+0x78>
	__asm volatile
 8006ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff8:	f383 8811 	msr	BASEPRI, r3
 8006ffc:	f3bf 8f6f 	isb	sy
 8007000:	f3bf 8f4f 	dsb	sy
 8007004:	61bb      	str	r3, [r7, #24]
}
 8007006:	bf00      	nop
 8007008:	e7fe      	b.n	8007008 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800700a:	f002 fbfd 	bl	8009808 <vPortValidateInterruptPriority>
	__asm volatile
 800700e:	f3ef 8211 	mrs	r2, BASEPRI
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	617a      	str	r2, [r7, #20]
 8007024:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007026:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007036:	429a      	cmp	r2, r3
 8007038:	d22b      	bcs.n	8007092 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800704c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007054:	d112      	bne.n	800707c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	2b00      	cmp	r3, #0
 800705c:	d016      	beq.n	800708c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007060:	3324      	adds	r3, #36	; 0x24
 8007062:	4618      	mov	r0, r3
 8007064:	f001 f97c 	bl	8008360 <xTaskRemoveFromEventList>
 8007068:	4603      	mov	r3, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00e      	beq.n	800708c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	2201      	movs	r2, #1
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	e007      	b.n	800708c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800707c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007080:	3301      	adds	r3, #1
 8007082:	b2db      	uxtb	r3, r3
 8007084:	b25a      	sxtb	r2, r3
 8007086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007088:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800708c:	2301      	movs	r3, #1
 800708e:	637b      	str	r3, [r7, #52]	; 0x34
 8007090:	e001      	b.n	8007096 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007092:	2300      	movs	r3, #0
 8007094:	637b      	str	r3, [r7, #52]	; 0x34
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f383 8811 	msr	BASEPRI, r3
}
 80070a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80070a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3738      	adds	r7, #56	; 0x38
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08c      	sub	sp, #48	; 0x30
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80070b8:	2300      	movs	r3, #0
 80070ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10a      	bne.n	80070dc <xQueueReceive+0x30>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	623b      	str	r3, [r7, #32]
}
 80070d8:	bf00      	nop
 80070da:	e7fe      	b.n	80070da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d103      	bne.n	80070ea <xQueueReceive+0x3e>
 80070e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <xQueueReceive+0x42>
 80070ea:	2301      	movs	r3, #1
 80070ec:	e000      	b.n	80070f0 <xQueueReceive+0x44>
 80070ee:	2300      	movs	r3, #0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d10a      	bne.n	800710a <xQueueReceive+0x5e>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	61fb      	str	r3, [r7, #28]
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800710a:	f001 fafb 	bl	8008704 <xTaskGetSchedulerState>
 800710e:	4603      	mov	r3, r0
 8007110:	2b00      	cmp	r3, #0
 8007112:	d102      	bne.n	800711a <xQueueReceive+0x6e>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <xQueueReceive+0x72>
 800711a:	2301      	movs	r3, #1
 800711c:	e000      	b.n	8007120 <xQueueReceive+0x74>
 800711e:	2300      	movs	r3, #0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10a      	bne.n	800713a <xQueueReceive+0x8e>
	__asm volatile
 8007124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007128:	f383 8811 	msr	BASEPRI, r3
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	61bb      	str	r3, [r7, #24]
}
 8007136:	bf00      	nop
 8007138:	e7fe      	b.n	8007138 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800713a:	f002 fa83 	bl	8009644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007142:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	2b00      	cmp	r3, #0
 8007148:	d01f      	beq.n	800718a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800714a:	68b9      	ldr	r1, [r7, #8]
 800714c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800714e:	f000 fa1b 	bl	8007588 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	1e5a      	subs	r2, r3, #1
 8007156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007158:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00f      	beq.n	8007182 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007164:	3310      	adds	r3, #16
 8007166:	4618      	mov	r0, r3
 8007168:	f001 f8fa 	bl	8008360 <xTaskRemoveFromEventList>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d007      	beq.n	8007182 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007172:	4b3d      	ldr	r3, [pc, #244]	; (8007268 <xQueueReceive+0x1bc>)
 8007174:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007178:	601a      	str	r2, [r3, #0]
 800717a:	f3bf 8f4f 	dsb	sy
 800717e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007182:	f002 fa8f 	bl	80096a4 <vPortExitCritical>
				return pdPASS;
 8007186:	2301      	movs	r3, #1
 8007188:	e069      	b.n	800725e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d103      	bne.n	8007198 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007190:	f002 fa88 	bl	80096a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007194:	2300      	movs	r3, #0
 8007196:	e062      	b.n	800725e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719a:	2b00      	cmp	r3, #0
 800719c:	d106      	bne.n	80071ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800719e:	f107 0310 	add.w	r3, r7, #16
 80071a2:	4618      	mov	r0, r3
 80071a4:	f001 f940 	bl	8008428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80071a8:	2301      	movs	r3, #1
 80071aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80071ac:	f002 fa7a 	bl	80096a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80071b0:	f000 feac 	bl	8007f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80071b4:	f002 fa46 	bl	8009644 <vPortEnterCritical>
 80071b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071be:	b25b      	sxtb	r3, r3
 80071c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071c4:	d103      	bne.n	80071ce <xQueueReceive+0x122>
 80071c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071d4:	b25b      	sxtb	r3, r3
 80071d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071da:	d103      	bne.n	80071e4 <xQueueReceive+0x138>
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071e4:	f002 fa5e 	bl	80096a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071e8:	1d3a      	adds	r2, r7, #4
 80071ea:	f107 0310 	add.w	r3, r7, #16
 80071ee:	4611      	mov	r1, r2
 80071f0:	4618      	mov	r0, r3
 80071f2:	f001 f92f 	bl	8008454 <xTaskCheckForTimeOut>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d123      	bne.n	8007244 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071fe:	f000 fa3b 	bl	8007678 <prvIsQueueEmpty>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d017      	beq.n	8007238 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	3324      	adds	r3, #36	; 0x24
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	4611      	mov	r1, r2
 8007210:	4618      	mov	r0, r3
 8007212:	f001 f855 	bl	80082c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007216:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007218:	f000 f9dc 	bl	80075d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800721c:	f000 fe84 	bl	8007f28 <xTaskResumeAll>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d189      	bne.n	800713a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007226:	4b10      	ldr	r3, [pc, #64]	; (8007268 <xQueueReceive+0x1bc>)
 8007228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	f3bf 8f6f 	isb	sy
 8007236:	e780      	b.n	800713a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007238:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800723a:	f000 f9cb 	bl	80075d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800723e:	f000 fe73 	bl	8007f28 <xTaskResumeAll>
 8007242:	e77a      	b.n	800713a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007246:	f000 f9c5 	bl	80075d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800724a:	f000 fe6d 	bl	8007f28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800724e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007250:	f000 fa12 	bl	8007678 <prvIsQueueEmpty>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	f43f af6f 	beq.w	800713a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800725c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800725e:	4618      	mov	r0, r3
 8007260:	3730      	adds	r7, #48	; 0x30
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
 8007266:	bf00      	nop
 8007268:	e000ed04 	.word	0xe000ed04

0800726c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800726c:	b580      	push	{r7, lr}
 800726e:	b08e      	sub	sp, #56	; 0x38
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007276:	2300      	movs	r3, #0
 8007278:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800727e:	2300      	movs	r3, #0
 8007280:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728c:	f383 8811 	msr	BASEPRI, r3
 8007290:	f3bf 8f6f 	isb	sy
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	623b      	str	r3, [r7, #32]
}
 800729a:	bf00      	nop
 800729c:	e7fe      	b.n	800729c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800729e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00a      	beq.n	80072bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	61fb      	str	r3, [r7, #28]
}
 80072b8:	bf00      	nop
 80072ba:	e7fe      	b.n	80072ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072bc:	f001 fa22 	bl	8008704 <xTaskGetSchedulerState>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d102      	bne.n	80072cc <xQueueSemaphoreTake+0x60>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <xQueueSemaphoreTake+0x64>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e000      	b.n	80072d2 <xQueueSemaphoreTake+0x66>
 80072d0:	2300      	movs	r3, #0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	61bb      	str	r3, [r7, #24]
}
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072ec:	f002 f9aa 	bl	8009644 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80072f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d024      	beq.n	8007346 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80072fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fe:	1e5a      	subs	r2, r3, #1
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d104      	bne.n	8007316 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800730c:	f001 fb70 	bl	80089f0 <pvTaskIncrementMutexHeldCount>
 8007310:	4602      	mov	r2, r0
 8007312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007314:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00f      	beq.n	800733e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	3310      	adds	r3, #16
 8007322:	4618      	mov	r0, r3
 8007324:	f001 f81c 	bl	8008360 <xTaskRemoveFromEventList>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d007      	beq.n	800733e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800732e:	4b54      	ldr	r3, [pc, #336]	; (8007480 <xQueueSemaphoreTake+0x214>)
 8007330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800733e:	f002 f9b1 	bl	80096a4 <vPortExitCritical>
				return pdPASS;
 8007342:	2301      	movs	r3, #1
 8007344:	e097      	b.n	8007476 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d111      	bne.n	8007370 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00a      	beq.n	8007368 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	617b      	str	r3, [r7, #20]
}
 8007364:	bf00      	nop
 8007366:	e7fe      	b.n	8007366 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007368:	f002 f99c 	bl	80096a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800736c:	2300      	movs	r3, #0
 800736e:	e082      	b.n	8007476 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007372:	2b00      	cmp	r3, #0
 8007374:	d106      	bne.n	8007384 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007376:	f107 030c 	add.w	r3, r7, #12
 800737a:	4618      	mov	r0, r3
 800737c:	f001 f854 	bl	8008428 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007380:	2301      	movs	r3, #1
 8007382:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007384:	f002 f98e 	bl	80096a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007388:	f000 fdc0 	bl	8007f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800738c:	f002 f95a 	bl	8009644 <vPortEnterCritical>
 8007390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007396:	b25b      	sxtb	r3, r3
 8007398:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800739c:	d103      	bne.n	80073a6 <xQueueSemaphoreTake+0x13a>
 800739e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ac:	b25b      	sxtb	r3, r3
 80073ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073b2:	d103      	bne.n	80073bc <xQueueSemaphoreTake+0x150>
 80073b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073bc:	f002 f972 	bl	80096a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073c0:	463a      	mov	r2, r7
 80073c2:	f107 030c 	add.w	r3, r7, #12
 80073c6:	4611      	mov	r1, r2
 80073c8:	4618      	mov	r0, r3
 80073ca:	f001 f843 	bl	8008454 <xTaskCheckForTimeOut>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d132      	bne.n	800743a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80073d6:	f000 f94f 	bl	8007678 <prvIsQueueEmpty>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d026      	beq.n	800742e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d109      	bne.n	80073fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80073e8:	f002 f92c 	bl	8009644 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80073ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f001 f9a5 	bl	8008740 <xTaskPriorityInherit>
 80073f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80073f8:	f002 f954 	bl	80096a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fe:	3324      	adds	r3, #36	; 0x24
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	4611      	mov	r1, r2
 8007404:	4618      	mov	r0, r3
 8007406:	f000 ff5b 	bl	80082c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800740a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800740c:	f000 f8e2 	bl	80075d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007410:	f000 fd8a 	bl	8007f28 <xTaskResumeAll>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	f47f af68 	bne.w	80072ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800741c:	4b18      	ldr	r3, [pc, #96]	; (8007480 <xQueueSemaphoreTake+0x214>)
 800741e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	f3bf 8f4f 	dsb	sy
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	e75e      	b.n	80072ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800742e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007430:	f000 f8d0 	bl	80075d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007434:	f000 fd78 	bl	8007f28 <xTaskResumeAll>
 8007438:	e758      	b.n	80072ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800743a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800743c:	f000 f8ca 	bl	80075d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007440:	f000 fd72 	bl	8007f28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007446:	f000 f917 	bl	8007678 <prvIsQueueEmpty>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	f43f af4d 	beq.w	80072ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00d      	beq.n	8007474 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007458:	f002 f8f4 	bl	8009644 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800745c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800745e:	f000 f811 	bl	8007484 <prvGetDisinheritPriorityAfterTimeout>
 8007462:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800746a:	4618      	mov	r0, r3
 800746c:	f001 fa3e 	bl	80088ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007470:	f002 f918 	bl	80096a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007474:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007476:	4618      	mov	r0, r3
 8007478:	3738      	adds	r7, #56	; 0x38
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	e000ed04 	.word	0xe000ed04

08007484 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007490:	2b00      	cmp	r3, #0
 8007492:	d006      	beq.n	80074a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e001      	b.n	80074a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80074a6:	68fb      	ldr	r3, [r7, #12]
	}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3714      	adds	r7, #20
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10d      	bne.n	80074ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d14d      	bne.n	8007576 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	4618      	mov	r0, r3
 80074e0:	f001 f996 	bl	8008810 <xTaskPriorityDisinherit>
 80074e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	609a      	str	r2, [r3, #8]
 80074ec:	e043      	b.n	8007576 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d119      	bne.n	8007528 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6858      	ldr	r0, [r3, #4]
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fc:	461a      	mov	r2, r3
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	f003 f982 	bl	800a808 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	685a      	ldr	r2, [r3, #4]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750c:	441a      	add	r2, r3
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	685a      	ldr	r2, [r3, #4]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	429a      	cmp	r2, r3
 800751c:	d32b      	bcc.n	8007576 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	605a      	str	r2, [r3, #4]
 8007526:	e026      	b.n	8007576 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	68d8      	ldr	r0, [r3, #12]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007530:	461a      	mov	r2, r3
 8007532:	68b9      	ldr	r1, [r7, #8]
 8007534:	f003 f968 	bl	800a808 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	68da      	ldr	r2, [r3, #12]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007540:	425b      	negs	r3, r3
 8007542:	441a      	add	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d207      	bcs.n	8007564 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755c:	425b      	negs	r3, r3
 800755e:	441a      	add	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2b02      	cmp	r3, #2
 8007568:	d105      	bne.n	8007576 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d002      	beq.n	8007576 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	3b01      	subs	r3, #1
 8007574:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	1c5a      	adds	r2, r3, #1
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800757e:	697b      	ldr	r3, [r7, #20]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3718      	adds	r7, #24
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007596:	2b00      	cmp	r3, #0
 8007598:	d018      	beq.n	80075cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	68da      	ldr	r2, [r3, #12]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	441a      	add	r2, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68da      	ldr	r2, [r3, #12]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d303      	bcc.n	80075bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68d9      	ldr	r1, [r3, #12]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c4:	461a      	mov	r2, r3
 80075c6:	6838      	ldr	r0, [r7, #0]
 80075c8:	f003 f91e 	bl	800a808 <memcpy>
	}
}
 80075cc:	bf00      	nop
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80075dc:	f002 f832 	bl	8009644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80075e8:	e011      	b.n	800760e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d012      	beq.n	8007618 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	3324      	adds	r3, #36	; 0x24
 80075f6:	4618      	mov	r0, r3
 80075f8:	f000 feb2 	bl	8008360 <xTaskRemoveFromEventList>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007602:	f000 ff89 	bl	8008518 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007606:	7bfb      	ldrb	r3, [r7, #15]
 8007608:	3b01      	subs	r3, #1
 800760a:	b2db      	uxtb	r3, r3
 800760c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800760e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007612:	2b00      	cmp	r3, #0
 8007614:	dce9      	bgt.n	80075ea <prvUnlockQueue+0x16>
 8007616:	e000      	b.n	800761a <prvUnlockQueue+0x46>
					break;
 8007618:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	22ff      	movs	r2, #255	; 0xff
 800761e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007622:	f002 f83f 	bl	80096a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007626:	f002 f80d 	bl	8009644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007630:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007632:	e011      	b.n	8007658 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d012      	beq.n	8007662 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3310      	adds	r3, #16
 8007640:	4618      	mov	r0, r3
 8007642:	f000 fe8d 	bl	8008360 <xTaskRemoveFromEventList>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800764c:	f000 ff64 	bl	8008518 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007650:	7bbb      	ldrb	r3, [r7, #14]
 8007652:	3b01      	subs	r3, #1
 8007654:	b2db      	uxtb	r3, r3
 8007656:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800765c:	2b00      	cmp	r3, #0
 800765e:	dce9      	bgt.n	8007634 <prvUnlockQueue+0x60>
 8007660:	e000      	b.n	8007664 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007662:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	22ff      	movs	r2, #255	; 0xff
 8007668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800766c:	f002 f81a 	bl	80096a4 <vPortExitCritical>
}
 8007670:	bf00      	nop
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007680:	f001 ffe0 	bl	8009644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007688:	2b00      	cmp	r3, #0
 800768a:	d102      	bne.n	8007692 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800768c:	2301      	movs	r3, #1
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	e001      	b.n	8007696 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007692:	2300      	movs	r3, #0
 8007694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007696:	f002 f805 	bl	80096a4 <vPortExitCritical>

	return xReturn;
 800769a:	68fb      	ldr	r3, [r7, #12]
}
 800769c:	4618      	mov	r0, r3
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}

080076a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b084      	sub	sp, #16
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076ac:	f001 ffca 	bl	8009644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d102      	bne.n	80076c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80076bc:	2301      	movs	r3, #1
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	e001      	b.n	80076c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80076c2:	2300      	movs	r3, #0
 80076c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80076c6:	f001 ffed 	bl	80096a4 <vPortExitCritical>

	return xReturn;
 80076ca:	68fb      	ldr	r3, [r7, #12]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80076de:	2300      	movs	r3, #0
 80076e0:	60fb      	str	r3, [r7, #12]
 80076e2:	e014      	b.n	800770e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80076e4:	4a0f      	ldr	r2, [pc, #60]	; (8007724 <vQueueAddToRegistry+0x50>)
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10b      	bne.n	8007708 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80076f0:	490c      	ldr	r1, [pc, #48]	; (8007724 <vQueueAddToRegistry+0x50>)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	683a      	ldr	r2, [r7, #0]
 80076f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80076fa:	4a0a      	ldr	r2, [pc, #40]	; (8007724 <vQueueAddToRegistry+0x50>)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	00db      	lsls	r3, r3, #3
 8007700:	4413      	add	r3, r2
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007706:	e006      	b.n	8007716 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3301      	adds	r3, #1
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b07      	cmp	r3, #7
 8007712:	d9e7      	bls.n	80076e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007714:	bf00      	nop
 8007716:	bf00      	nop
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20000a74 	.word	0x20000a74

08007728 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007738:	f001 ff84 	bl	8009644 <vPortEnterCritical>
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007742:	b25b      	sxtb	r3, r3
 8007744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007748:	d103      	bne.n	8007752 <vQueueWaitForMessageRestricted+0x2a>
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007758:	b25b      	sxtb	r3, r3
 800775a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800775e:	d103      	bne.n	8007768 <vQueueWaitForMessageRestricted+0x40>
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007768:	f001 ff9c 	bl	80096a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	2b00      	cmp	r3, #0
 8007772:	d106      	bne.n	8007782 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	3324      	adds	r3, #36	; 0x24
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	68b9      	ldr	r1, [r7, #8]
 800777c:	4618      	mov	r0, r3
 800777e:	f000 fdc3 	bl	8008308 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007782:	6978      	ldr	r0, [r7, #20]
 8007784:	f7ff ff26 	bl	80075d4 <prvUnlockQueue>
	}
 8007788:	bf00      	nop
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08e      	sub	sp, #56	; 0x38
 8007794:	af02      	add	r7, sp, #8
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80077a2:	2300      	movs	r3, #0
 80077a4:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d10a      	bne.n	80077c2 <xStreamBufferReceive+0x32>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	61fb      	str	r3, [r7, #28]
}
 80077be:	bf00      	nop
 80077c0:	e7fe      	b.n	80077c0 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <xStreamBufferReceive+0x4e>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	61bb      	str	r3, [r7, #24]
}
 80077da:	bf00      	nop
 80077dc:	e7fe      	b.n	80077dc <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	7f1b      	ldrb	r3, [r3, #28]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d002      	beq.n	80077f0 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80077ea:	2304      	movs	r3, #4
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
 80077ee:	e001      	b.n	80077f4 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d034      	beq.n	8007864 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80077fa:	f001 ff23 	bl	8009644 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80077fe:	6a38      	ldr	r0, [r7, #32]
 8007800:	f000 f907 	bl	8007a12 <prvBytesInBuffer>
 8007804:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8007806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780a:	429a      	cmp	r2, r3
 800780c:	d816      	bhi.n	800783c <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800780e:	2000      	movs	r0, #0
 8007810:	f001 fa20 	bl	8008c54 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	691b      	ldr	r3, [r3, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00a      	beq.n	8007832 <xStreamBufferReceive+0xa2>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	617b      	str	r3, [r7, #20]
}
 800782e:	bf00      	nop
 8007830:	e7fe      	b.n	8007830 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8007832:	f000 ff57 	bl	80086e4 <xTaskGetCurrentTaskHandle>
 8007836:	4602      	mov	r2, r0
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800783c:	f001 ff32 	bl	80096a4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8007840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	429a      	cmp	r2, r3
 8007846:	d811      	bhi.n	800786c <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	2200      	movs	r2, #0
 800784c:	2100      	movs	r1, #0
 800784e:	2000      	movs	r0, #0
 8007850:	f001 f8e2 	bl	8008a18 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	2200      	movs	r2, #0
 8007858:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800785a:	6a38      	ldr	r0, [r7, #32]
 800785c:	f000 f8d9 	bl	8007a12 <prvBytesInBuffer>
 8007860:	62b8      	str	r0, [r7, #40]	; 0x28
 8007862:	e003      	b.n	800786c <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8007864:	6a38      	ldr	r0, [r7, #32]
 8007866:	f000 f8d4 	bl	8007a12 <prvBytesInBuffer>
 800786a:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800786c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007870:	429a      	cmp	r2, r3
 8007872:	d91d      	bls.n	80078b0 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	9300      	str	r3, [sp, #0]
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	68b9      	ldr	r1, [r7, #8]
 800787e:	6a38      	ldr	r0, [r7, #32]
 8007880:	f000 f81b 	bl	80078ba <prvReadMessageFromBuffer>
 8007884:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d011      	beq.n	80078b0 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800788c:	f000 fb3e 	bl	8007f0c <vTaskSuspendAll>
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d009      	beq.n	80078ac <xStreamBufferReceive+0x11c>
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	6958      	ldr	r0, [r3, #20]
 800789c:	2300      	movs	r3, #0
 800789e:	2200      	movs	r2, #0
 80078a0:	2100      	movs	r1, #0
 80078a2:	f001 f919 	bl	8008ad8 <xTaskGenericNotify>
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	2200      	movs	r2, #0
 80078aa:	615a      	str	r2, [r3, #20]
 80078ac:	f000 fb3c 	bl	8007f28 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80078b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3730      	adds	r7, #48	; 0x30
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b088      	sub	sp, #32
 80078be:	af00      	add	r7, sp, #0
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	607a      	str	r2, [r7, #4]
 80078c6:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d019      	beq.n	8007902 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80078d4:	f107 0110 	add.w	r1, r7, #16
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 f81e 	bl	800791e <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80078ee:	69fa      	ldr	r2, [r7, #28]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d907      	bls.n	8007906 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	69ba      	ldr	r2, [r7, #24]
 80078fa:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80078fc:	2300      	movs	r3, #0
 80078fe:	61fb      	str	r3, [r7, #28]
 8007900:	e001      	b.n	8007906 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	69fa      	ldr	r2, [r7, #28]
 800790a:	68b9      	ldr	r1, [r7, #8]
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f806 	bl	800791e <prvReadBytesFromBuffer>
 8007912:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8007914:	697b      	ldr	r3, [r7, #20]
}
 8007916:	4618      	mov	r0, r3
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <prvReadBytesFromBuffer>:
	return xCount;
}
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b08a      	sub	sp, #40	; 0x28
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	607a      	str	r2, [r7, #4]
 800792a:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	4293      	cmp	r3, r2
 8007932:	bf28      	it	cs
 8007934:	4613      	movcs	r3, r2
 8007936:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d064      	beq.n	8007a08 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	689a      	ldr	r2, [r3, #8]
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	6a3a      	ldr	r2, [r7, #32]
 800794e:	4293      	cmp	r3, r2
 8007950:	bf28      	it	cs
 8007952:	4613      	movcs	r3, r2
 8007954:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8007956:	69fa      	ldr	r2, [r7, #28]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	429a      	cmp	r2, r3
 800795c:	d90a      	bls.n	8007974 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	61bb      	str	r3, [r7, #24]
}
 8007970:	bf00      	nop
 8007972:	e7fe      	b.n	8007972 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8007974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	441a      	add	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	429a      	cmp	r2, r3
 8007980:	d90a      	bls.n	8007998 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	617b      	str	r3, [r7, #20]
}
 8007994:	bf00      	nop
 8007996:	e7fe      	b.n	8007996 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	699a      	ldr	r2, [r3, #24]
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	4413      	add	r3, r2
 80079a0:	69fa      	ldr	r2, [r7, #28]
 80079a2:	4619      	mov	r1, r3
 80079a4:	68b8      	ldr	r0, [r7, #8]
 80079a6:	f002 ff2f 	bl	800a808 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80079aa:	6a3a      	ldr	r2, [r7, #32]
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d919      	bls.n	80079e6 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80079b2:	6a3a      	ldr	r2, [r7, #32]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d90a      	bls.n	80079d0 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	613b      	str	r3, [r7, #16]
}
 80079cc:	bf00      	nop
 80079ce:	e7fe      	b.n	80079ce <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80079d0:	68ba      	ldr	r2, [r7, #8]
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	18d0      	adds	r0, r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6999      	ldr	r1, [r3, #24]
 80079da:	6a3a      	ldr	r2, [r7, #32]
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	1ad3      	subs	r3, r2, r3
 80079e0:	461a      	mov	r2, r3
 80079e2:	f002 ff11 	bl	800a808 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80079e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079e8:	6a3b      	ldr	r3, [r7, #32]
 80079ea:	4413      	add	r3, r2
 80079ec:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d304      	bcc.n	8007a02 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a06:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8007a08:	6a3b      	ldr	r3, [r7, #32]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3728      	adds	r7, #40	; 0x28
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8007a12:	b480      	push	{r7}
 8007a14:	b085      	sub	sp, #20
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	4413      	add	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d304      	bcc.n	8007a44 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	1ad3      	subs	r3, r2, r3
 8007a42:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8007a44:	68fb      	ldr	r3, [r7, #12]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b08e      	sub	sp, #56	; 0x38
 8007a56:	af04      	add	r7, sp, #16
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	607a      	str	r2, [r7, #4]
 8007a5e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d10a      	bne.n	8007a7c <xTaskCreateStatic+0x2a>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	623b      	str	r3, [r7, #32]
}
 8007a78:	bf00      	nop
 8007a7a:	e7fe      	b.n	8007a7a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <xTaskCreateStatic+0x46>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	61fb      	str	r3, [r7, #28]
}
 8007a94:	bf00      	nop
 8007a96:	e7fe      	b.n	8007a96 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a98:	23cc      	movs	r3, #204	; 0xcc
 8007a9a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	2bcc      	cmp	r3, #204	; 0xcc
 8007aa0:	d00a      	beq.n	8007ab8 <xTaskCreateStatic+0x66>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	61bb      	str	r3, [r7, #24]
}
 8007ab4:	bf00      	nop
 8007ab6:	e7fe      	b.n	8007ab6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007ab8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01e      	beq.n	8007afe <xTaskCreateStatic+0xac>
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d01b      	beq.n	8007afe <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ace:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9303      	str	r3, [sp, #12]
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	9302      	str	r3, [sp, #8]
 8007ae0:	f107 0314 	add.w	r3, r7, #20
 8007ae4:	9301      	str	r3, [sp, #4]
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f000 f851 	bl	8007b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007af8:	f000 f8f4 	bl	8007ce4 <prvAddNewTaskToReadyList>
 8007afc:	e001      	b.n	8007b02 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007b02:	697b      	ldr	r3, [r7, #20]
	}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3728      	adds	r7, #40	; 0x28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b08c      	sub	sp, #48	; 0x30
 8007b10:	af04      	add	r7, sp, #16
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	603b      	str	r3, [r7, #0]
 8007b18:	4613      	mov	r3, r2
 8007b1a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007b1c:	88fb      	ldrh	r3, [r7, #6]
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4618      	mov	r0, r3
 8007b22:	f001 feb1 	bl	8009888 <pvPortMalloc>
 8007b26:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00e      	beq.n	8007b4c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007b2e:	20cc      	movs	r0, #204	; 0xcc
 8007b30:	f001 feaa 	bl	8009888 <pvPortMalloc>
 8007b34:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	697a      	ldr	r2, [r7, #20]
 8007b40:	631a      	str	r2, [r3, #48]	; 0x30
 8007b42:	e005      	b.n	8007b50 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007b44:	6978      	ldr	r0, [r7, #20]
 8007b46:	f001 ff6b 	bl	8009a20 <vPortFree>
 8007b4a:	e001      	b.n	8007b50 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d017      	beq.n	8007b86 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007b5e:	88fa      	ldrh	r2, [r7, #6]
 8007b60:	2300      	movs	r3, #0
 8007b62:	9303      	str	r3, [sp, #12]
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	9302      	str	r3, [sp, #8]
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	9301      	str	r3, [sp, #4]
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6e:	9300      	str	r3, [sp, #0]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	68b9      	ldr	r1, [r7, #8]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f80f 	bl	8007b98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b7a:	69f8      	ldr	r0, [r7, #28]
 8007b7c:	f000 f8b2 	bl	8007ce4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b80:	2301      	movs	r3, #1
 8007b82:	61bb      	str	r3, [r7, #24]
 8007b84:	e002      	b.n	8007b8c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b8c:	69bb      	ldr	r3, [r7, #24]
	}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3720      	adds	r7, #32
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
	...

08007b98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b088      	sub	sp, #32
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	461a      	mov	r2, r3
 8007bb0:	21a5      	movs	r1, #165	; 0xa5
 8007bb2:	f002 fe37 	bl	800a824 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	4413      	add	r3, r2
 8007bc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	f023 0307 	bic.w	r3, r3, #7
 8007bce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	617b      	str	r3, [r7, #20]
}
 8007bec:	bf00      	nop
 8007bee:	e7fe      	b.n	8007bee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d01f      	beq.n	8007c36 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	61fb      	str	r3, [r7, #28]
 8007bfa:	e012      	b.n	8007c22 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007bfc:	68ba      	ldr	r2, [r7, #8]
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	4413      	add	r3, r2
 8007c02:	7819      	ldrb	r1, [r3, #0]
 8007c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	4413      	add	r3, r2
 8007c0a:	3334      	adds	r3, #52	; 0x34
 8007c0c:	460a      	mov	r2, r1
 8007c0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	4413      	add	r3, r2
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d006      	beq.n	8007c2a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	61fb      	str	r3, [r7, #28]
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	2b1f      	cmp	r3, #31
 8007c26:	d9e9      	bls.n	8007bfc <prvInitialiseNewTask+0x64>
 8007c28:	e000      	b.n	8007c2c <prvInitialiseNewTask+0x94>
			{
				break;
 8007c2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007c34:	e003      	b.n	8007c3e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c40:	2b37      	cmp	r3, #55	; 0x37
 8007c42:	d901      	bls.n	8007c48 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007c44:	2337      	movs	r3, #55	; 0x37
 8007c46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c52:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8007c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c56:	2200      	movs	r2, #0
 8007c58:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c5c:	3304      	adds	r3, #4
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fe fdfa 	bl	8006858 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	3318      	adds	r3, #24
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fe fdf5 	bl	8006858 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c76:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	2200      	movs	r2, #0
 8007c88:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c96:	3364      	adds	r3, #100	; 0x64
 8007c98:	2260      	movs	r2, #96	; 0x60
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f002 fdc1 	bl	800a824 <memset>
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	4a0c      	ldr	r2, [pc, #48]	; (8007cd8 <prvInitialiseNewTask+0x140>)
 8007ca6:	669a      	str	r2, [r3, #104]	; 0x68
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007caa:	4a0c      	ldr	r2, [pc, #48]	; (8007cdc <prvInitialiseNewTask+0x144>)
 8007cac:	66da      	str	r2, [r3, #108]	; 0x6c
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	4a0b      	ldr	r2, [pc, #44]	; (8007ce0 <prvInitialiseNewTask+0x148>)
 8007cb2:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007cb4:	683a      	ldr	r2, [r7, #0]
 8007cb6:	68f9      	ldr	r1, [r7, #12]
 8007cb8:	69b8      	ldr	r0, [r7, #24]
 8007cba:	f001 fb93 	bl	80093e4 <pxPortInitialiseStack>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cd0:	bf00      	nop
 8007cd2:	3720      	adds	r7, #32
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	0800aad4 	.word	0x0800aad4
 8007cdc:	0800aaf4 	.word	0x0800aaf4
 8007ce0:	0800aab4 	.word	0x0800aab4

08007ce4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007cec:	f001 fcaa 	bl	8009644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007cf0:	4b2d      	ldr	r3, [pc, #180]	; (8007da8 <prvAddNewTaskToReadyList+0xc4>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	3301      	adds	r3, #1
 8007cf6:	4a2c      	ldr	r2, [pc, #176]	; (8007da8 <prvAddNewTaskToReadyList+0xc4>)
 8007cf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007cfa:	4b2c      	ldr	r3, [pc, #176]	; (8007dac <prvAddNewTaskToReadyList+0xc8>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d109      	bne.n	8007d16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d02:	4a2a      	ldr	r2, [pc, #168]	; (8007dac <prvAddNewTaskToReadyList+0xc8>)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d08:	4b27      	ldr	r3, [pc, #156]	; (8007da8 <prvAddNewTaskToReadyList+0xc4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d110      	bne.n	8007d32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d10:	f000 fc26 	bl	8008560 <prvInitialiseTaskLists>
 8007d14:	e00d      	b.n	8007d32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007d16:	4b26      	ldr	r3, [pc, #152]	; (8007db0 <prvAddNewTaskToReadyList+0xcc>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d109      	bne.n	8007d32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007d1e:	4b23      	ldr	r3, [pc, #140]	; (8007dac <prvAddNewTaskToReadyList+0xc8>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d802      	bhi.n	8007d32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007d2c:	4a1f      	ldr	r2, [pc, #124]	; (8007dac <prvAddNewTaskToReadyList+0xc8>)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007d32:	4b20      	ldr	r3, [pc, #128]	; (8007db4 <prvAddNewTaskToReadyList+0xd0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3301      	adds	r3, #1
 8007d38:	4a1e      	ldr	r2, [pc, #120]	; (8007db4 <prvAddNewTaskToReadyList+0xd0>)
 8007d3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007d3c:	4b1d      	ldr	r3, [pc, #116]	; (8007db4 <prvAddNewTaskToReadyList+0xd0>)
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d48:	4b1b      	ldr	r3, [pc, #108]	; (8007db8 <prvAddNewTaskToReadyList+0xd4>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d903      	bls.n	8007d58 <prvAddNewTaskToReadyList+0x74>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	4a18      	ldr	r2, [pc, #96]	; (8007db8 <prvAddNewTaskToReadyList+0xd4>)
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5c:	4613      	mov	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4a15      	ldr	r2, [pc, #84]	; (8007dbc <prvAddNewTaskToReadyList+0xd8>)
 8007d66:	441a      	add	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4610      	mov	r0, r2
 8007d70:	f7fe fd7f 	bl	8006872 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007d74:	f001 fc96 	bl	80096a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007d78:	4b0d      	ldr	r3, [pc, #52]	; (8007db0 <prvAddNewTaskToReadyList+0xcc>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00e      	beq.n	8007d9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <prvAddNewTaskToReadyList+0xc8>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d207      	bcs.n	8007d9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007d8e:	4b0c      	ldr	r3, [pc, #48]	; (8007dc0 <prvAddNewTaskToReadyList+0xdc>)
 8007d90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d94:	601a      	str	r2, [r3, #0]
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d9e:	bf00      	nop
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20000f88 	.word	0x20000f88
 8007dac:	20000ab4 	.word	0x20000ab4
 8007db0:	20000f94 	.word	0x20000f94
 8007db4:	20000fa4 	.word	0x20000fa4
 8007db8:	20000f90 	.word	0x20000f90
 8007dbc:	20000ab8 	.word	0x20000ab8
 8007dc0:	e000ed04 	.word	0xe000ed04

08007dc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b084      	sub	sp, #16
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d017      	beq.n	8007e06 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007dd6:	4b13      	ldr	r3, [pc, #76]	; (8007e24 <vTaskDelay+0x60>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00a      	beq.n	8007df4 <vTaskDelay+0x30>
	__asm volatile
 8007dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de2:	f383 8811 	msr	BASEPRI, r3
 8007de6:	f3bf 8f6f 	isb	sy
 8007dea:	f3bf 8f4f 	dsb	sy
 8007dee:	60bb      	str	r3, [r7, #8]
}
 8007df0:	bf00      	nop
 8007df2:	e7fe      	b.n	8007df2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007df4:	f000 f88a 	bl	8007f0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007df8:	2100      	movs	r1, #0
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 ff50 	bl	8008ca0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e00:	f000 f892 	bl	8007f28 <xTaskResumeAll>
 8007e04:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d107      	bne.n	8007e1c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e0c:	4b06      	ldr	r3, [pc, #24]	; (8007e28 <vTaskDelay+0x64>)
 8007e0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	f3bf 8f4f 	dsb	sy
 8007e18:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e1c:	bf00      	nop
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	20000fb0 	.word	0x20000fb0
 8007e28:	e000ed04 	.word	0xe000ed04

08007e2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08a      	sub	sp, #40	; 0x28
 8007e30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007e3a:	463a      	mov	r2, r7
 8007e3c:	1d39      	adds	r1, r7, #4
 8007e3e:	f107 0308 	add.w	r3, r7, #8
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fe fcb4 	bl	80067b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68ba      	ldr	r2, [r7, #8]
 8007e4e:	9202      	str	r2, [sp, #8]
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	2300      	movs	r3, #0
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	2300      	movs	r3, #0
 8007e58:	460a      	mov	r2, r1
 8007e5a:	4924      	ldr	r1, [pc, #144]	; (8007eec <vTaskStartScheduler+0xc0>)
 8007e5c:	4824      	ldr	r0, [pc, #144]	; (8007ef0 <vTaskStartScheduler+0xc4>)
 8007e5e:	f7ff fdf8 	bl	8007a52 <xTaskCreateStatic>
 8007e62:	4603      	mov	r3, r0
 8007e64:	4a23      	ldr	r2, [pc, #140]	; (8007ef4 <vTaskStartScheduler+0xc8>)
 8007e66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007e68:	4b22      	ldr	r3, [pc, #136]	; (8007ef4 <vTaskStartScheduler+0xc8>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d002      	beq.n	8007e76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007e70:	2301      	movs	r3, #1
 8007e72:	617b      	str	r3, [r7, #20]
 8007e74:	e001      	b.n	8007e7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007e76:	2300      	movs	r3, #0
 8007e78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d102      	bne.n	8007e86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007e80:	f000 ff62 	bl	8008d48 <xTimerCreateTimerTask>
 8007e84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d11b      	bne.n	8007ec4 <vTaskStartScheduler+0x98>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	613b      	str	r3, [r7, #16]
}
 8007e9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ea0:	4b15      	ldr	r3, [pc, #84]	; (8007ef8 <vTaskStartScheduler+0xcc>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3364      	adds	r3, #100	; 0x64
 8007ea6:	4a15      	ldr	r2, [pc, #84]	; (8007efc <vTaskStartScheduler+0xd0>)
 8007ea8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007eaa:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <vTaskStartScheduler+0xd4>)
 8007eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007eb2:	4b14      	ldr	r3, [pc, #80]	; (8007f04 <vTaskStartScheduler+0xd8>)
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007eb8:	4b13      	ldr	r3, [pc, #76]	; (8007f08 <vTaskStartScheduler+0xdc>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ebe:	f001 fb1f 	bl	8009500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ec2:	e00e      	b.n	8007ee2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eca:	d10a      	bne.n	8007ee2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed0:	f383 8811 	msr	BASEPRI, r3
 8007ed4:	f3bf 8f6f 	isb	sy
 8007ed8:	f3bf 8f4f 	dsb	sy
 8007edc:	60fb      	str	r3, [r7, #12]
}
 8007ede:	bf00      	nop
 8007ee0:	e7fe      	b.n	8007ee0 <vTaskStartScheduler+0xb4>
}
 8007ee2:	bf00      	nop
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	0800aa20 	.word	0x0800aa20
 8007ef0:	08008531 	.word	0x08008531
 8007ef4:	20000fac 	.word	0x20000fac
 8007ef8:	20000ab4 	.word	0x20000ab4
 8007efc:	20000100 	.word	0x20000100
 8007f00:	20000fa8 	.word	0x20000fa8
 8007f04:	20000f94 	.word	0x20000f94
 8007f08:	20000f8c 	.word	0x20000f8c

08007f0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f10:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <vTaskSuspendAll+0x18>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	3301      	adds	r3, #1
 8007f16:	4a03      	ldr	r2, [pc, #12]	; (8007f24 <vTaskSuspendAll+0x18>)
 8007f18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f1a:	bf00      	nop
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	20000fb0 	.word	0x20000fb0

08007f28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f32:	2300      	movs	r3, #0
 8007f34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f36:	4b42      	ldr	r3, [pc, #264]	; (8008040 <xTaskResumeAll+0x118>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <xTaskResumeAll+0x2c>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	603b      	str	r3, [r7, #0]
}
 8007f50:	bf00      	nop
 8007f52:	e7fe      	b.n	8007f52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007f54:	f001 fb76 	bl	8009644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007f58:	4b39      	ldr	r3, [pc, #228]	; (8008040 <xTaskResumeAll+0x118>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	4a38      	ldr	r2, [pc, #224]	; (8008040 <xTaskResumeAll+0x118>)
 8007f60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f62:	4b37      	ldr	r3, [pc, #220]	; (8008040 <xTaskResumeAll+0x118>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d162      	bne.n	8008030 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007f6a:	4b36      	ldr	r3, [pc, #216]	; (8008044 <xTaskResumeAll+0x11c>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d05e      	beq.n	8008030 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f72:	e02f      	b.n	8007fd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f74:	4b34      	ldr	r3, [pc, #208]	; (8008048 <xTaskResumeAll+0x120>)
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	3318      	adds	r3, #24
 8007f80:	4618      	mov	r0, r3
 8007f82:	f7fe fcd3 	bl	800692c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fcce 	bl	800692c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f94:	4b2d      	ldr	r3, [pc, #180]	; (800804c <xTaskResumeAll+0x124>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d903      	bls.n	8007fa4 <xTaskResumeAll+0x7c>
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa0:	4a2a      	ldr	r2, [pc, #168]	; (800804c <xTaskResumeAll+0x124>)
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa8:	4613      	mov	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	4a27      	ldr	r2, [pc, #156]	; (8008050 <xTaskResumeAll+0x128>)
 8007fb2:	441a      	add	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	f7fe fc59 	bl	8006872 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc4:	4b23      	ldr	r3, [pc, #140]	; (8008054 <xTaskResumeAll+0x12c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d302      	bcc.n	8007fd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007fce:	4b22      	ldr	r3, [pc, #136]	; (8008058 <xTaskResumeAll+0x130>)
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fd4:	4b1c      	ldr	r3, [pc, #112]	; (8008048 <xTaskResumeAll+0x120>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1cb      	bne.n	8007f74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d001      	beq.n	8007fe6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007fe2:	f000 fb5f 	bl	80086a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007fe6:	4b1d      	ldr	r3, [pc, #116]	; (800805c <xTaskResumeAll+0x134>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d010      	beq.n	8008014 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007ff2:	f000 f847 	bl	8008084 <xTaskIncrementTick>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007ffc:	4b16      	ldr	r3, [pc, #88]	; (8008058 <xTaskResumeAll+0x130>)
 8007ffe:	2201      	movs	r2, #1
 8008000:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	3b01      	subs	r3, #1
 8008006:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1f1      	bne.n	8007ff2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800800e:	4b13      	ldr	r3, [pc, #76]	; (800805c <xTaskResumeAll+0x134>)
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008014:	4b10      	ldr	r3, [pc, #64]	; (8008058 <xTaskResumeAll+0x130>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d009      	beq.n	8008030 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800801c:	2301      	movs	r3, #1
 800801e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008020:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <xTaskResumeAll+0x138>)
 8008022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008026:	601a      	str	r2, [r3, #0]
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008030:	f001 fb38 	bl	80096a4 <vPortExitCritical>

	return xAlreadyYielded;
 8008034:	68bb      	ldr	r3, [r7, #8]
}
 8008036:	4618      	mov	r0, r3
 8008038:	3710      	adds	r7, #16
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20000fb0 	.word	0x20000fb0
 8008044:	20000f88 	.word	0x20000f88
 8008048:	20000f48 	.word	0x20000f48
 800804c:	20000f90 	.word	0x20000f90
 8008050:	20000ab8 	.word	0x20000ab8
 8008054:	20000ab4 	.word	0x20000ab4
 8008058:	20000f9c 	.word	0x20000f9c
 800805c:	20000f98 	.word	0x20000f98
 8008060:	e000ed04 	.word	0xe000ed04

08008064 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800806a:	4b05      	ldr	r3, [pc, #20]	; (8008080 <xTaskGetTickCount+0x1c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008070:	687b      	ldr	r3, [r7, #4]
}
 8008072:	4618      	mov	r0, r3
 8008074:	370c      	adds	r7, #12
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	20000f8c 	.word	0x20000f8c

08008084 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800808a:	2300      	movs	r3, #0
 800808c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800808e:	4b4f      	ldr	r3, [pc, #316]	; (80081cc <xTaskIncrementTick+0x148>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	f040 808f 	bne.w	80081b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008098:	4b4d      	ldr	r3, [pc, #308]	; (80081d0 <xTaskIncrementTick+0x14c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3301      	adds	r3, #1
 800809e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080a0:	4a4b      	ldr	r2, [pc, #300]	; (80081d0 <xTaskIncrementTick+0x14c>)
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d120      	bne.n	80080ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80080ac:	4b49      	ldr	r3, [pc, #292]	; (80081d4 <xTaskIncrementTick+0x150>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00a      	beq.n	80080cc <xTaskIncrementTick+0x48>
	__asm volatile
 80080b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ba:	f383 8811 	msr	BASEPRI, r3
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	603b      	str	r3, [r7, #0]
}
 80080c8:	bf00      	nop
 80080ca:	e7fe      	b.n	80080ca <xTaskIncrementTick+0x46>
 80080cc:	4b41      	ldr	r3, [pc, #260]	; (80081d4 <xTaskIncrementTick+0x150>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	4b41      	ldr	r3, [pc, #260]	; (80081d8 <xTaskIncrementTick+0x154>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a3f      	ldr	r2, [pc, #252]	; (80081d4 <xTaskIncrementTick+0x150>)
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	4a3f      	ldr	r2, [pc, #252]	; (80081d8 <xTaskIncrementTick+0x154>)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	4b3e      	ldr	r3, [pc, #248]	; (80081dc <xTaskIncrementTick+0x158>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3301      	adds	r3, #1
 80080e6:	4a3d      	ldr	r2, [pc, #244]	; (80081dc <xTaskIncrementTick+0x158>)
 80080e8:	6013      	str	r3, [r2, #0]
 80080ea:	f000 fadb 	bl	80086a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80080ee:	4b3c      	ldr	r3, [pc, #240]	; (80081e0 <xTaskIncrementTick+0x15c>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d349      	bcc.n	800818c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080f8:	4b36      	ldr	r3, [pc, #216]	; (80081d4 <xTaskIncrementTick+0x150>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d104      	bne.n	800810c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008102:	4b37      	ldr	r3, [pc, #220]	; (80081e0 <xTaskIncrementTick+0x15c>)
 8008104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008108:	601a      	str	r2, [r3, #0]
					break;
 800810a:	e03f      	b.n	800818c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800810c:	4b31      	ldr	r3, [pc, #196]	; (80081d4 <xTaskIncrementTick+0x150>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	429a      	cmp	r2, r3
 8008122:	d203      	bcs.n	800812c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008124:	4a2e      	ldr	r2, [pc, #184]	; (80081e0 <xTaskIncrementTick+0x15c>)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800812a:	e02f      	b.n	800818c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	3304      	adds	r3, #4
 8008130:	4618      	mov	r0, r3
 8008132:	f7fe fbfb 	bl	800692c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813a:	2b00      	cmp	r3, #0
 800813c:	d004      	beq.n	8008148 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	3318      	adds	r3, #24
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fbf2 	bl	800692c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800814c:	4b25      	ldr	r3, [pc, #148]	; (80081e4 <xTaskIncrementTick+0x160>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	429a      	cmp	r2, r3
 8008152:	d903      	bls.n	800815c <xTaskIncrementTick+0xd8>
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008158:	4a22      	ldr	r2, [pc, #136]	; (80081e4 <xTaskIncrementTick+0x160>)
 800815a:	6013      	str	r3, [r2, #0]
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008160:	4613      	mov	r3, r2
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	009b      	lsls	r3, r3, #2
 8008168:	4a1f      	ldr	r2, [pc, #124]	; (80081e8 <xTaskIncrementTick+0x164>)
 800816a:	441a      	add	r2, r3
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	3304      	adds	r3, #4
 8008170:	4619      	mov	r1, r3
 8008172:	4610      	mov	r0, r2
 8008174:	f7fe fb7d 	bl	8006872 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800817c:	4b1b      	ldr	r3, [pc, #108]	; (80081ec <xTaskIncrementTick+0x168>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	429a      	cmp	r2, r3
 8008184:	d3b8      	bcc.n	80080f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008186:	2301      	movs	r3, #1
 8008188:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800818a:	e7b5      	b.n	80080f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800818c:	4b17      	ldr	r3, [pc, #92]	; (80081ec <xTaskIncrementTick+0x168>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008192:	4915      	ldr	r1, [pc, #84]	; (80081e8 <xTaskIncrementTick+0x164>)
 8008194:	4613      	mov	r3, r2
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	4413      	add	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	440b      	add	r3, r1
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d901      	bls.n	80081a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80081a4:	2301      	movs	r3, #1
 80081a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80081a8:	4b11      	ldr	r3, [pc, #68]	; (80081f0 <xTaskIncrementTick+0x16c>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80081b0:	2301      	movs	r3, #1
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	e004      	b.n	80081c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80081b6:	4b0f      	ldr	r3, [pc, #60]	; (80081f4 <xTaskIncrementTick+0x170>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	3301      	adds	r3, #1
 80081bc:	4a0d      	ldr	r2, [pc, #52]	; (80081f4 <xTaskIncrementTick+0x170>)
 80081be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80081c0:	697b      	ldr	r3, [r7, #20]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20000fb0 	.word	0x20000fb0
 80081d0:	20000f8c 	.word	0x20000f8c
 80081d4:	20000f40 	.word	0x20000f40
 80081d8:	20000f44 	.word	0x20000f44
 80081dc:	20000fa0 	.word	0x20000fa0
 80081e0:	20000fa8 	.word	0x20000fa8
 80081e4:	20000f90 	.word	0x20000f90
 80081e8:	20000ab8 	.word	0x20000ab8
 80081ec:	20000ab4 	.word	0x20000ab4
 80081f0:	20000f9c 	.word	0x20000f9c
 80081f4:	20000f98 	.word	0x20000f98

080081f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80081fe:	4b2a      	ldr	r3, [pc, #168]	; (80082a8 <vTaskSwitchContext+0xb0>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d003      	beq.n	800820e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008206:	4b29      	ldr	r3, [pc, #164]	; (80082ac <vTaskSwitchContext+0xb4>)
 8008208:	2201      	movs	r2, #1
 800820a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800820c:	e046      	b.n	800829c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800820e:	4b27      	ldr	r3, [pc, #156]	; (80082ac <vTaskSwitchContext+0xb4>)
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008214:	4b26      	ldr	r3, [pc, #152]	; (80082b0 <vTaskSwitchContext+0xb8>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	60fb      	str	r3, [r7, #12]
 800821a:	e010      	b.n	800823e <vTaskSwitchContext+0x46>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10a      	bne.n	8008238 <vTaskSwitchContext+0x40>
	__asm volatile
 8008222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	f3bf 8f6f 	isb	sy
 800822e:	f3bf 8f4f 	dsb	sy
 8008232:	607b      	str	r3, [r7, #4]
}
 8008234:	bf00      	nop
 8008236:	e7fe      	b.n	8008236 <vTaskSwitchContext+0x3e>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3b01      	subs	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	491d      	ldr	r1, [pc, #116]	; (80082b4 <vTaskSwitchContext+0xbc>)
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	4613      	mov	r3, r2
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	440b      	add	r3, r1
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d0e4      	beq.n	800821c <vTaskSwitchContext+0x24>
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	4613      	mov	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	4413      	add	r3, r2
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	4a15      	ldr	r2, [pc, #84]	; (80082b4 <vTaskSwitchContext+0xbc>)
 800825e:	4413      	add	r3, r2
 8008260:	60bb      	str	r3, [r7, #8]
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	685a      	ldr	r2, [r3, #4]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	605a      	str	r2, [r3, #4]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	3308      	adds	r3, #8
 8008274:	429a      	cmp	r2, r3
 8008276:	d104      	bne.n	8008282 <vTaskSwitchContext+0x8a>
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	685a      	ldr	r2, [r3, #4]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	605a      	str	r2, [r3, #4]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	68db      	ldr	r3, [r3, #12]
 8008288:	4a0b      	ldr	r2, [pc, #44]	; (80082b8 <vTaskSwitchContext+0xc0>)
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	4a08      	ldr	r2, [pc, #32]	; (80082b0 <vTaskSwitchContext+0xb8>)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008292:	4b09      	ldr	r3, [pc, #36]	; (80082b8 <vTaskSwitchContext+0xc0>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3364      	adds	r3, #100	; 0x64
 8008298:	4a08      	ldr	r2, [pc, #32]	; (80082bc <vTaskSwitchContext+0xc4>)
 800829a:	6013      	str	r3, [r2, #0]
}
 800829c:	bf00      	nop
 800829e:	3714      	adds	r7, #20
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	20000fb0 	.word	0x20000fb0
 80082ac:	20000f9c 	.word	0x20000f9c
 80082b0:	20000f90 	.word	0x20000f90
 80082b4:	20000ab8 	.word	0x20000ab8
 80082b8:	20000ab4 	.word	0x20000ab4
 80082bc:	20000100 	.word	0x20000100

080082c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10a      	bne.n	80082e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	60fb      	str	r3, [r7, #12]
}
 80082e2:	bf00      	nop
 80082e4:	e7fe      	b.n	80082e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80082e6:	4b07      	ldr	r3, [pc, #28]	; (8008304 <vTaskPlaceOnEventList+0x44>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3318      	adds	r3, #24
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fe fae3 	bl	80068ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80082f4:	2101      	movs	r1, #1
 80082f6:	6838      	ldr	r0, [r7, #0]
 80082f8:	f000 fcd2 	bl	8008ca0 <prvAddCurrentTaskToDelayedList>
}
 80082fc:	bf00      	nop
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	20000ab4 	.word	0x20000ab4

08008308 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10a      	bne.n	8008330 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	617b      	str	r3, [r7, #20]
}
 800832c:	bf00      	nop
 800832e:	e7fe      	b.n	800832e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008330:	4b0a      	ldr	r3, [pc, #40]	; (800835c <vTaskPlaceOnEventListRestricted+0x54>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	3318      	adds	r3, #24
 8008336:	4619      	mov	r1, r3
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f7fe fa9a 	bl	8006872 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008348:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	68b8      	ldr	r0, [r7, #8]
 800834e:	f000 fca7 	bl	8008ca0 <prvAddCurrentTaskToDelayedList>
	}
 8008352:	bf00      	nop
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000ab4 	.word	0x20000ab4

08008360 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b086      	sub	sp, #24
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10a      	bne.n	800838c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	60fb      	str	r3, [r7, #12]
}
 8008388:	bf00      	nop
 800838a:	e7fe      	b.n	800838a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	3318      	adds	r3, #24
 8008390:	4618      	mov	r0, r3
 8008392:	f7fe facb 	bl	800692c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008396:	4b1e      	ldr	r3, [pc, #120]	; (8008410 <xTaskRemoveFromEventList+0xb0>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d11d      	bne.n	80083da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	3304      	adds	r3, #4
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fe fac2 	bl	800692c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ac:	4b19      	ldr	r3, [pc, #100]	; (8008414 <xTaskRemoveFromEventList+0xb4>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d903      	bls.n	80083bc <xTaskRemoveFromEventList+0x5c>
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	4a16      	ldr	r2, [pc, #88]	; (8008414 <xTaskRemoveFromEventList+0xb4>)
 80083ba:	6013      	str	r3, [r2, #0]
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c0:	4613      	mov	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4a13      	ldr	r2, [pc, #76]	; (8008418 <xTaskRemoveFromEventList+0xb8>)
 80083ca:	441a      	add	r2, r3
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	3304      	adds	r3, #4
 80083d0:	4619      	mov	r1, r3
 80083d2:	4610      	mov	r0, r2
 80083d4:	f7fe fa4d 	bl	8006872 <vListInsertEnd>
 80083d8:	e005      	b.n	80083e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	3318      	adds	r3, #24
 80083de:	4619      	mov	r1, r3
 80083e0:	480e      	ldr	r0, [pc, #56]	; (800841c <xTaskRemoveFromEventList+0xbc>)
 80083e2:	f7fe fa46 	bl	8006872 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ea:	4b0d      	ldr	r3, [pc, #52]	; (8008420 <xTaskRemoveFromEventList+0xc0>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d905      	bls.n	8008400 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80083f4:	2301      	movs	r3, #1
 80083f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80083f8:	4b0a      	ldr	r3, [pc, #40]	; (8008424 <xTaskRemoveFromEventList+0xc4>)
 80083fa:	2201      	movs	r2, #1
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	e001      	b.n	8008404 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008400:	2300      	movs	r3, #0
 8008402:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008404:	697b      	ldr	r3, [r7, #20]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	20000fb0 	.word	0x20000fb0
 8008414:	20000f90 	.word	0x20000f90
 8008418:	20000ab8 	.word	0x20000ab8
 800841c:	20000f48 	.word	0x20000f48
 8008420:	20000ab4 	.word	0x20000ab4
 8008424:	20000f9c 	.word	0x20000f9c

08008428 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008430:	4b06      	ldr	r3, [pc, #24]	; (800844c <vTaskInternalSetTimeOutState+0x24>)
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008438:	4b05      	ldr	r3, [pc, #20]	; (8008450 <vTaskInternalSetTimeOutState+0x28>)
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	605a      	str	r2, [r3, #4]
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	20000fa0 	.word	0x20000fa0
 8008450:	20000f8c 	.word	0x20000f8c

08008454 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10a      	bne.n	800847a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	613b      	str	r3, [r7, #16]
}
 8008476:	bf00      	nop
 8008478:	e7fe      	b.n	8008478 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10a      	bne.n	8008496 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	60fb      	str	r3, [r7, #12]
}
 8008492:	bf00      	nop
 8008494:	e7fe      	b.n	8008494 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008496:	f001 f8d5 	bl	8009644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800849a:	4b1d      	ldr	r3, [pc, #116]	; (8008510 <xTaskCheckForTimeOut+0xbc>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	69ba      	ldr	r2, [r7, #24]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084b2:	d102      	bne.n	80084ba <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80084b4:	2300      	movs	r3, #0
 80084b6:	61fb      	str	r3, [r7, #28]
 80084b8:	e023      	b.n	8008502 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	4b15      	ldr	r3, [pc, #84]	; (8008514 <xTaskCheckForTimeOut+0xc0>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d007      	beq.n	80084d6 <xTaskCheckForTimeOut+0x82>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	69ba      	ldr	r2, [r7, #24]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d302      	bcc.n	80084d6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80084d0:	2301      	movs	r3, #1
 80084d2:	61fb      	str	r3, [r7, #28]
 80084d4:	e015      	b.n	8008502 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	697a      	ldr	r2, [r7, #20]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d20b      	bcs.n	80084f8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	1ad2      	subs	r2, r2, r3
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7ff ff9b 	bl	8008428 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80084f2:	2300      	movs	r3, #0
 80084f4:	61fb      	str	r3, [r7, #28]
 80084f6:	e004      	b.n	8008502 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80084fe:	2301      	movs	r3, #1
 8008500:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008502:	f001 f8cf 	bl	80096a4 <vPortExitCritical>

	return xReturn;
 8008506:	69fb      	ldr	r3, [r7, #28]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3720      	adds	r7, #32
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	20000f8c 	.word	0x20000f8c
 8008514:	20000fa0 	.word	0x20000fa0

08008518 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008518:	b480      	push	{r7}
 800851a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800851c:	4b03      	ldr	r3, [pc, #12]	; (800852c <vTaskMissedYield+0x14>)
 800851e:	2201      	movs	r2, #1
 8008520:	601a      	str	r2, [r3, #0]
}
 8008522:	bf00      	nop
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	20000f9c 	.word	0x20000f9c

08008530 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008538:	f000 f852 	bl	80085e0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800853c:	4b06      	ldr	r3, [pc, #24]	; (8008558 <prvIdleTask+0x28>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d9f9      	bls.n	8008538 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008544:	4b05      	ldr	r3, [pc, #20]	; (800855c <prvIdleTask+0x2c>)
 8008546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800854a:	601a      	str	r2, [r3, #0]
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008554:	e7f0      	b.n	8008538 <prvIdleTask+0x8>
 8008556:	bf00      	nop
 8008558:	20000ab8 	.word	0x20000ab8
 800855c:	e000ed04 	.word	0xe000ed04

08008560 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008566:	2300      	movs	r3, #0
 8008568:	607b      	str	r3, [r7, #4]
 800856a:	e00c      	b.n	8008586 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	4613      	mov	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4413      	add	r3, r2
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4a12      	ldr	r2, [pc, #72]	; (80085c0 <prvInitialiseTaskLists+0x60>)
 8008578:	4413      	add	r3, r2
 800857a:	4618      	mov	r0, r3
 800857c:	f7fe f94c 	bl	8006818 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3301      	adds	r3, #1
 8008584:	607b      	str	r3, [r7, #4]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b37      	cmp	r3, #55	; 0x37
 800858a:	d9ef      	bls.n	800856c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800858c:	480d      	ldr	r0, [pc, #52]	; (80085c4 <prvInitialiseTaskLists+0x64>)
 800858e:	f7fe f943 	bl	8006818 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008592:	480d      	ldr	r0, [pc, #52]	; (80085c8 <prvInitialiseTaskLists+0x68>)
 8008594:	f7fe f940 	bl	8006818 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008598:	480c      	ldr	r0, [pc, #48]	; (80085cc <prvInitialiseTaskLists+0x6c>)
 800859a:	f7fe f93d 	bl	8006818 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800859e:	480c      	ldr	r0, [pc, #48]	; (80085d0 <prvInitialiseTaskLists+0x70>)
 80085a0:	f7fe f93a 	bl	8006818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085a4:	480b      	ldr	r0, [pc, #44]	; (80085d4 <prvInitialiseTaskLists+0x74>)
 80085a6:	f7fe f937 	bl	8006818 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085aa:	4b0b      	ldr	r3, [pc, #44]	; (80085d8 <prvInitialiseTaskLists+0x78>)
 80085ac:	4a05      	ldr	r2, [pc, #20]	; (80085c4 <prvInitialiseTaskLists+0x64>)
 80085ae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085b0:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <prvInitialiseTaskLists+0x7c>)
 80085b2:	4a05      	ldr	r2, [pc, #20]	; (80085c8 <prvInitialiseTaskLists+0x68>)
 80085b4:	601a      	str	r2, [r3, #0]
}
 80085b6:	bf00      	nop
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20000ab8 	.word	0x20000ab8
 80085c4:	20000f18 	.word	0x20000f18
 80085c8:	20000f2c 	.word	0x20000f2c
 80085cc:	20000f48 	.word	0x20000f48
 80085d0:	20000f5c 	.word	0x20000f5c
 80085d4:	20000f74 	.word	0x20000f74
 80085d8:	20000f40 	.word	0x20000f40
 80085dc:	20000f44 	.word	0x20000f44

080085e0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80085e6:	e019      	b.n	800861c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80085e8:	f001 f82c 	bl	8009644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ec:	4b10      	ldr	r3, [pc, #64]	; (8008630 <prvCheckTasksWaitingTermination+0x50>)
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3304      	adds	r3, #4
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fe f997 	bl	800692c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80085fe:	4b0d      	ldr	r3, [pc, #52]	; (8008634 <prvCheckTasksWaitingTermination+0x54>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3b01      	subs	r3, #1
 8008604:	4a0b      	ldr	r2, [pc, #44]	; (8008634 <prvCheckTasksWaitingTermination+0x54>)
 8008606:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008608:	4b0b      	ldr	r3, [pc, #44]	; (8008638 <prvCheckTasksWaitingTermination+0x58>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3b01      	subs	r3, #1
 800860e:	4a0a      	ldr	r2, [pc, #40]	; (8008638 <prvCheckTasksWaitingTermination+0x58>)
 8008610:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008612:	f001 f847 	bl	80096a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f810 	bl	800863c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <prvCheckTasksWaitingTermination+0x58>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1e1      	bne.n	80085e8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008624:	bf00      	nop
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20000f5c 	.word	0x20000f5c
 8008634:	20000f88 	.word	0x20000f88
 8008638:	20000f70 	.word	0x20000f70

0800863c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	3364      	adds	r3, #100	; 0x64
 8008648:	4618      	mov	r0, r3
 800864a:	f002 f901 	bl	800a850 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8008654:	2b00      	cmp	r3, #0
 8008656:	d108      	bne.n	800866a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865c:	4618      	mov	r0, r3
 800865e:	f001 f9df 	bl	8009a20 <vPortFree>
				vPortFree( pxTCB );
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f001 f9dc 	bl	8009a20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008668:	e018      	b.n	800869c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8008670:	2b01      	cmp	r3, #1
 8008672:	d103      	bne.n	800867c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 f9d3 	bl	8009a20 <vPortFree>
	}
 800867a:	e00f      	b.n	800869c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8008682:	2b02      	cmp	r3, #2
 8008684:	d00a      	beq.n	800869c <prvDeleteTCB+0x60>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	f383 8811 	msr	BASEPRI, r3
 800868e:	f3bf 8f6f 	isb	sy
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	60fb      	str	r3, [r7, #12]
}
 8008698:	bf00      	nop
 800869a:	e7fe      	b.n	800869a <prvDeleteTCB+0x5e>
	}
 800869c:	bf00      	nop
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086aa:	4b0c      	ldr	r3, [pc, #48]	; (80086dc <prvResetNextTaskUnblockTime+0x38>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d104      	bne.n	80086be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086b4:	4b0a      	ldr	r3, [pc, #40]	; (80086e0 <prvResetNextTaskUnblockTime+0x3c>)
 80086b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086bc:	e008      	b.n	80086d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086be:	4b07      	ldr	r3, [pc, #28]	; (80086dc <prvResetNextTaskUnblockTime+0x38>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	4a04      	ldr	r2, [pc, #16]	; (80086e0 <prvResetNextTaskUnblockTime+0x3c>)
 80086ce:	6013      	str	r3, [r2, #0]
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	20000f40 	.word	0x20000f40
 80086e0:	20000fa8 	.word	0x20000fa8

080086e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80086ea:	4b05      	ldr	r3, [pc, #20]	; (8008700 <xTaskGetCurrentTaskHandle+0x1c>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	607b      	str	r3, [r7, #4]

		return xReturn;
 80086f0:	687b      	ldr	r3, [r7, #4]
	}
 80086f2:	4618      	mov	r0, r3
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	20000ab4 	.word	0x20000ab4

08008704 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800870a:	4b0b      	ldr	r3, [pc, #44]	; (8008738 <xTaskGetSchedulerState+0x34>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d102      	bne.n	8008718 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008712:	2301      	movs	r3, #1
 8008714:	607b      	str	r3, [r7, #4]
 8008716:	e008      	b.n	800872a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008718:	4b08      	ldr	r3, [pc, #32]	; (800873c <xTaskGetSchedulerState+0x38>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d102      	bne.n	8008726 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008720:	2302      	movs	r3, #2
 8008722:	607b      	str	r3, [r7, #4]
 8008724:	e001      	b.n	800872a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008726:	2300      	movs	r3, #0
 8008728:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800872a:	687b      	ldr	r3, [r7, #4]
	}
 800872c:	4618      	mov	r0, r3
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	20000f94 	.word	0x20000f94
 800873c:	20000fb0 	.word	0x20000fb0

08008740 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d051      	beq.n	80087fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875a:	4b2a      	ldr	r3, [pc, #168]	; (8008804 <xTaskPriorityInherit+0xc4>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008760:	429a      	cmp	r2, r3
 8008762:	d241      	bcs.n	80087e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	db06      	blt.n	800877a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800876c:	4b25      	ldr	r3, [pc, #148]	; (8008804 <xTaskPriorityInherit+0xc4>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	6959      	ldr	r1, [r3, #20]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008782:	4613      	mov	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	4413      	add	r3, r2
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4a1f      	ldr	r2, [pc, #124]	; (8008808 <xTaskPriorityInherit+0xc8>)
 800878c:	4413      	add	r3, r2
 800878e:	4299      	cmp	r1, r3
 8008790:	d122      	bne.n	80087d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	3304      	adds	r3, #4
 8008796:	4618      	mov	r0, r3
 8008798:	f7fe f8c8 	bl	800692c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800879c:	4b19      	ldr	r3, [pc, #100]	; (8008804 <xTaskPriorityInherit+0xc4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087aa:	4b18      	ldr	r3, [pc, #96]	; (800880c <xTaskPriorityInherit+0xcc>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d903      	bls.n	80087ba <xTaskPriorityInherit+0x7a>
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b6:	4a15      	ldr	r2, [pc, #84]	; (800880c <xTaskPriorityInherit+0xcc>)
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4a10      	ldr	r2, [pc, #64]	; (8008808 <xTaskPriorityInherit+0xc8>)
 80087c8:	441a      	add	r2, r3
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	3304      	adds	r3, #4
 80087ce:	4619      	mov	r1, r3
 80087d0:	4610      	mov	r0, r2
 80087d2:	f7fe f84e 	bl	8006872 <vListInsertEnd>
 80087d6:	e004      	b.n	80087e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80087d8:	4b0a      	ldr	r3, [pc, #40]	; (8008804 <xTaskPriorityInherit+0xc4>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80087e2:	2301      	movs	r3, #1
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	e008      	b.n	80087fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087ec:	4b05      	ldr	r3, [pc, #20]	; (8008804 <xTaskPriorityInherit+0xc4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d201      	bcs.n	80087fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80087f6:	2301      	movs	r3, #1
 80087f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80087fa:	68fb      	ldr	r3, [r7, #12]
	}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	20000ab4 	.word	0x20000ab4
 8008808:	20000ab8 	.word	0x20000ab8
 800880c:	20000f90 	.word	0x20000f90

08008810 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800881c:	2300      	movs	r3, #0
 800881e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d056      	beq.n	80088d4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008826:	4b2e      	ldr	r3, [pc, #184]	; (80088e0 <xTaskPriorityDisinherit+0xd0>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	429a      	cmp	r2, r3
 800882e:	d00a      	beq.n	8008846 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008834:	f383 8811 	msr	BASEPRI, r3
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	f3bf 8f4f 	dsb	sy
 8008840:	60fb      	str	r3, [r7, #12]
}
 8008842:	bf00      	nop
 8008844:	e7fe      	b.n	8008844 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800884a:	2b00      	cmp	r3, #0
 800884c:	d10a      	bne.n	8008864 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	60bb      	str	r3, [r7, #8]
}
 8008860:	bf00      	nop
 8008862:	e7fe      	b.n	8008862 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008868:	1e5a      	subs	r2, r3, #1
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008876:	429a      	cmp	r2, r3
 8008878:	d02c      	beq.n	80088d4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800887e:	2b00      	cmp	r3, #0
 8008880:	d128      	bne.n	80088d4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	3304      	adds	r3, #4
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe f850 	bl	800692c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008898:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a4:	4b0f      	ldr	r3, [pc, #60]	; (80088e4 <xTaskPriorityDisinherit+0xd4>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d903      	bls.n	80088b4 <xTaskPriorityDisinherit+0xa4>
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	4a0c      	ldr	r2, [pc, #48]	; (80088e4 <xTaskPriorityDisinherit+0xd4>)
 80088b2:	6013      	str	r3, [r2, #0]
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b8:	4613      	mov	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	4a09      	ldr	r2, [pc, #36]	; (80088e8 <xTaskPriorityDisinherit+0xd8>)
 80088c2:	441a      	add	r2, r3
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	3304      	adds	r3, #4
 80088c8:	4619      	mov	r1, r3
 80088ca:	4610      	mov	r0, r2
 80088cc:	f7fd ffd1 	bl	8006872 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80088d0:	2301      	movs	r3, #1
 80088d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088d4:	697b      	ldr	r3, [r7, #20]
	}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3718      	adds	r7, #24
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	20000ab4 	.word	0x20000ab4
 80088e4:	20000f90 	.word	0x20000f90
 80088e8:	20000ab8 	.word	0x20000ab8

080088ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b088      	sub	sp, #32
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80088fa:	2301      	movs	r3, #1
 80088fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d06a      	beq.n	80089da <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10a      	bne.n	8008922 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	60fb      	str	r3, [r7, #12]
}
 800891e:	bf00      	nop
 8008920:	e7fe      	b.n	8008920 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008922:	69bb      	ldr	r3, [r7, #24]
 8008924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008926:	683a      	ldr	r2, [r7, #0]
 8008928:	429a      	cmp	r2, r3
 800892a:	d902      	bls.n	8008932 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	61fb      	str	r3, [r7, #28]
 8008930:	e002      	b.n	8008938 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008936:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	69fa      	ldr	r2, [r7, #28]
 800893e:	429a      	cmp	r2, r3
 8008940:	d04b      	beq.n	80089da <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	429a      	cmp	r2, r3
 800894a:	d146      	bne.n	80089da <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800894c:	4b25      	ldr	r3, [pc, #148]	; (80089e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	429a      	cmp	r2, r3
 8008954:	d10a      	bne.n	800896c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	60bb      	str	r3, [r7, #8]
}
 8008968:	bf00      	nop
 800896a:	e7fe      	b.n	800896a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008970:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	69fa      	ldr	r2, [r7, #28]
 8008976:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	2b00      	cmp	r3, #0
 800897e:	db04      	blt.n	800898a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	6959      	ldr	r1, [r3, #20]
 800898e:	693a      	ldr	r2, [r7, #16]
 8008990:	4613      	mov	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	4a13      	ldr	r2, [pc, #76]	; (80089e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800899a:	4413      	add	r3, r2
 800899c:	4299      	cmp	r1, r3
 800899e:	d11c      	bne.n	80089da <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	3304      	adds	r3, #4
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fd ffc1 	bl	800692c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ae:	4b0f      	ldr	r3, [pc, #60]	; (80089ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d903      	bls.n	80089be <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ba:	4a0c      	ldr	r2, [pc, #48]	; (80089ec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80089bc:	6013      	str	r3, [r2, #0]
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089c2:	4613      	mov	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4413      	add	r3, r2
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	4a07      	ldr	r2, [pc, #28]	; (80089e8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80089cc:	441a      	add	r2, r3
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	3304      	adds	r3, #4
 80089d2:	4619      	mov	r1, r3
 80089d4:	4610      	mov	r0, r2
 80089d6:	f7fd ff4c 	bl	8006872 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80089da:	bf00      	nop
 80089dc:	3720      	adds	r7, #32
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	20000ab4 	.word	0x20000ab4
 80089e8:	20000ab8 	.word	0x20000ab8
 80089ec:	20000f90 	.word	0x20000f90

080089f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80089f4:	4b07      	ldr	r3, [pc, #28]	; (8008a14 <pvTaskIncrementMutexHeldCount+0x24>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d004      	beq.n	8008a06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80089fc:	4b05      	ldr	r3, [pc, #20]	; (8008a14 <pvTaskIncrementMutexHeldCount+0x24>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008a02:	3201      	adds	r2, #1
 8008a04:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 8008a06:	4b03      	ldr	r3, [pc, #12]	; (8008a14 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a08:	681b      	ldr	r3, [r3, #0]
	}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	20000ab4 	.word	0x20000ab4

08008a18 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b086      	sub	sp, #24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	60f8      	str	r0, [r7, #12]
 8008a20:	60b9      	str	r1, [r7, #8]
 8008a22:	607a      	str	r2, [r7, #4]
 8008a24:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8008a26:	f000 fe0d 	bl	8009644 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008a2a:	4b29      	ldr	r3, [pc, #164]	; (8008ad0 <xTaskNotifyWait+0xb8>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d01c      	beq.n	8008a72 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8008a38:	4b25      	ldr	r3, [pc, #148]	; (8008ad0 <xTaskNotifyWait+0xb8>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	43d2      	mvns	r2, r2
 8008a44:	400a      	ands	r2, r1
 8008a46:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008a4a:	4b21      	ldr	r3, [pc, #132]	; (8008ad0 <xTaskNotifyWait+0xb8>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

				if( xTicksToWait > ( TickType_t ) 0 )
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00b      	beq.n	8008a72 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	6838      	ldr	r0, [r7, #0]
 8008a5e:	f000 f91f 	bl	8008ca0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008a62:	4b1c      	ldr	r3, [pc, #112]	; (8008ad4 <xTaskNotifyWait+0xbc>)
 8008a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a68:	601a      	str	r2, [r3, #0]
 8008a6a:	f3bf 8f4f 	dsb	sy
 8008a6e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008a72:	f000 fe17 	bl	80096a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008a76:	f000 fde5 	bl	8009644 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d005      	beq.n	8008a8c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8008a80:	4b13      	ldr	r3, [pc, #76]	; (8008ad0 <xTaskNotifyWait+0xb8>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8008a8c:	4b10      	ldr	r3, [pc, #64]	; (8008ad0 <xTaskNotifyWait+0xb8>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d002      	beq.n	8008aa0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	617b      	str	r3, [r7, #20]
 8008a9e:	e00a      	b.n	8008ab6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8008aa0:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <xTaskNotifyWait+0xb8>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8008aa8:	68ba      	ldr	r2, [r7, #8]
 8008aaa:	43d2      	mvns	r2, r2
 8008aac:	400a      	ands	r2, r1
 8008aae:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				xReturn = pdTRUE;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ab6:	4b06      	ldr	r3, [pc, #24]	; (8008ad0 <xTaskNotifyWait+0xb8>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		}
		taskEXIT_CRITICAL();
 8008ac0:	f000 fdf0 	bl	80096a4 <vPortExitCritical>

		return xReturn;
 8008ac4:	697b      	ldr	r3, [r7, #20]
	}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3718      	adds	r7, #24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	20000ab4 	.word	0x20000ab4
 8008ad4:	e000ed04 	.word	0xe000ed04

08008ad8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08a      	sub	sp, #40	; 0x28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	603b      	str	r3, [r7, #0]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008ae8:	2301      	movs	r3, #1
 8008aea:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d10a      	bne.n	8008b08 <xTaskGenericNotify+0x30>
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	61bb      	str	r3, [r7, #24]
}
 8008b04:	bf00      	nop
 8008b06:	e7fe      	b.n	8008b06 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008b0c:	f000 fd9a 	bl	8009644 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d004      	beq.n	8008b20 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008b20:	6a3b      	ldr	r3, [r7, #32]
 8008b22:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8008b26:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d82d      	bhi.n	8008b92 <xTaskGenericNotify+0xba>
 8008b36:	a201      	add	r2, pc, #4	; (adr r2, 8008b3c <xTaskGenericNotify+0x64>)
 8008b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3c:	08008bb5 	.word	0x08008bb5
 8008b40:	08008b51 	.word	0x08008b51
 8008b44:	08008b63 	.word	0x08008b63
 8008b48:	08008b73 	.word	0x08008b73
 8008b4c:	08008b7d 	.word	0x08008b7d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	431a      	orrs	r2, r3
 8008b5a:	6a3b      	ldr	r3, [r7, #32]
 8008b5c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8008b60:	e02b      	b.n	8008bba <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8008b62:	6a3b      	ldr	r3, [r7, #32]
 8008b64:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008b68:	1c5a      	adds	r2, r3, #1
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8008b70:	e023      	b.n	8008bba <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8008b7a:	e01e      	b.n	8008bba <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8008b7c:	7ffb      	ldrb	r3, [r7, #31]
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d004      	beq.n	8008b8c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8008b82:	6a3b      	ldr	r3, [r7, #32]
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8008b8a:	e016      	b.n	8008bba <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8008b90:	e013      	b.n	8008bba <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8008b92:	6a3b      	ldr	r3, [r7, #32]
 8008b94:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8008b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b9c:	d00c      	beq.n	8008bb8 <xTaskGenericNotify+0xe0>
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	617b      	str	r3, [r7, #20]
}
 8008bb0:	bf00      	nop
 8008bb2:	e7fe      	b.n	8008bb2 <xTaskGenericNotify+0xda>
					break;
 8008bb4:	bf00      	nop
 8008bb6:	e000      	b.n	8008bba <xTaskGenericNotify+0xe2>

					break;
 8008bb8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008bba:	7ffb      	ldrb	r3, [r7, #31]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d13a      	bne.n	8008c36 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fd feb1 	bl	800692c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bce:	4b1d      	ldr	r3, [pc, #116]	; (8008c44 <xTaskGenericNotify+0x16c>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d903      	bls.n	8008bde <xTaskGenericNotify+0x106>
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bda:	4a1a      	ldr	r2, [pc, #104]	; (8008c44 <xTaskGenericNotify+0x16c>)
 8008bdc:	6013      	str	r3, [r2, #0]
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be2:	4613      	mov	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	4a17      	ldr	r2, [pc, #92]	; (8008c48 <xTaskGenericNotify+0x170>)
 8008bec:	441a      	add	r2, r3
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	f7fd fe3c 	bl	8006872 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00a      	beq.n	8008c18 <xTaskGenericNotify+0x140>
	__asm volatile
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	613b      	str	r3, [r7, #16]
}
 8008c14:	bf00      	nop
 8008c16:	e7fe      	b.n	8008c16 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c1c:	4b0b      	ldr	r3, [pc, #44]	; (8008c4c <xTaskGenericNotify+0x174>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d907      	bls.n	8008c36 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8008c26:	4b0a      	ldr	r3, [pc, #40]	; (8008c50 <xTaskGenericNotify+0x178>)
 8008c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c2c:	601a      	str	r2, [r3, #0]
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008c36:	f000 fd35 	bl	80096a4 <vPortExitCritical>

		return xReturn;
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3728      	adds	r7, #40	; 0x28
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20000f90 	.word	0x20000f90
 8008c48:	20000ab8 	.word	0x20000ab8
 8008c4c:	20000ab4 	.word	0x20000ab4
 8008c50:	e000ed04 	.word	0xe000ed04

08008c54 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d102      	bne.n	8008c68 <xTaskNotifyStateClear+0x14>
 8008c62:	4b0e      	ldr	r3, [pc, #56]	; (8008c9c <xTaskNotifyStateClear+0x48>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	e000      	b.n	8008c6a <xTaskNotifyStateClear+0x16>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8008c6c:	f000 fcea 	bl	8009644 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	2b02      	cmp	r3, #2
 8008c7a:	d106      	bne.n	8008c8a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				xReturn = pdPASS;
 8008c84:	2301      	movs	r3, #1
 8008c86:	60fb      	str	r3, [r7, #12]
 8008c88:	e001      	b.n	8008c8e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8008c8e:	f000 fd09 	bl	80096a4 <vPortExitCritical>

		return xReturn;
 8008c92:	68fb      	ldr	r3, [r7, #12]
	}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3710      	adds	r7, #16
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	20000ab4 	.word	0x20000ab4

08008ca0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008caa:	4b21      	ldr	r3, [pc, #132]	; (8008d30 <prvAddCurrentTaskToDelayedList+0x90>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cb0:	4b20      	ldr	r3, [pc, #128]	; (8008d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fd fe38 	bl	800692c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cc2:	d10a      	bne.n	8008cda <prvAddCurrentTaskToDelayedList+0x3a>
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d007      	beq.n	8008cda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cca:	4b1a      	ldr	r3, [pc, #104]	; (8008d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3304      	adds	r3, #4
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	4819      	ldr	r0, [pc, #100]	; (8008d38 <prvAddCurrentTaskToDelayedList+0x98>)
 8008cd4:	f7fd fdcd 	bl	8006872 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cd8:	e026      	b.n	8008d28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4413      	add	r3, r2
 8008ce0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ce2:	4b14      	ldr	r3, [pc, #80]	; (8008d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d209      	bcs.n	8008d06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cf2:	4b12      	ldr	r3, [pc, #72]	; (8008d3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	4b0f      	ldr	r3, [pc, #60]	; (8008d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4610      	mov	r0, r2
 8008d00:	f7fd fddb 	bl	80068ba <vListInsert>
}
 8008d04:	e010      	b.n	8008d28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d06:	4b0e      	ldr	r3, [pc, #56]	; (8008d40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	4b0a      	ldr	r3, [pc, #40]	; (8008d34 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	4619      	mov	r1, r3
 8008d12:	4610      	mov	r0, r2
 8008d14:	f7fd fdd1 	bl	80068ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d18:	4b0a      	ldr	r3, [pc, #40]	; (8008d44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d202      	bcs.n	8008d28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d22:	4a08      	ldr	r2, [pc, #32]	; (8008d44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	6013      	str	r3, [r2, #0]
}
 8008d28:	bf00      	nop
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	20000f8c 	.word	0x20000f8c
 8008d34:	20000ab4 	.word	0x20000ab4
 8008d38:	20000f74 	.word	0x20000f74
 8008d3c:	20000f44 	.word	0x20000f44
 8008d40:	20000f40 	.word	0x20000f40
 8008d44:	20000fa8 	.word	0x20000fa8

08008d48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08a      	sub	sp, #40	; 0x28
 8008d4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d52:	f000 fb07 	bl	8009364 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d56:	4b1c      	ldr	r3, [pc, #112]	; (8008dc8 <xTimerCreateTimerTask+0x80>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d021      	beq.n	8008da2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d66:	1d3a      	adds	r2, r7, #4
 8008d68:	f107 0108 	add.w	r1, r7, #8
 8008d6c:	f107 030c 	add.w	r3, r7, #12
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fd fd37 	bl	80067e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d76:	6879      	ldr	r1, [r7, #4]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	68fa      	ldr	r2, [r7, #12]
 8008d7c:	9202      	str	r2, [sp, #8]
 8008d7e:	9301      	str	r3, [sp, #4]
 8008d80:	2302      	movs	r3, #2
 8008d82:	9300      	str	r3, [sp, #0]
 8008d84:	2300      	movs	r3, #0
 8008d86:	460a      	mov	r2, r1
 8008d88:	4910      	ldr	r1, [pc, #64]	; (8008dcc <xTimerCreateTimerTask+0x84>)
 8008d8a:	4811      	ldr	r0, [pc, #68]	; (8008dd0 <xTimerCreateTimerTask+0x88>)
 8008d8c:	f7fe fe61 	bl	8007a52 <xTaskCreateStatic>
 8008d90:	4603      	mov	r3, r0
 8008d92:	4a10      	ldr	r2, [pc, #64]	; (8008dd4 <xTimerCreateTimerTask+0x8c>)
 8008d94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008d96:	4b0f      	ldr	r3, [pc, #60]	; (8008dd4 <xTimerCreateTimerTask+0x8c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d001      	beq.n	8008da2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10a      	bne.n	8008dbe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	613b      	str	r3, [r7, #16]
}
 8008dba:	bf00      	nop
 8008dbc:	e7fe      	b.n	8008dbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008dbe:	697b      	ldr	r3, [r7, #20]
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3718      	adds	r7, #24
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	20000fe4 	.word	0x20000fe4
 8008dcc:	0800aa28 	.word	0x0800aa28
 8008dd0:	08008f0d 	.word	0x08008f0d
 8008dd4:	20000fe8 	.word	0x20000fe8

08008dd8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08a      	sub	sp, #40	; 0x28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
 8008de4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	623b      	str	r3, [r7, #32]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e06:	4b1a      	ldr	r3, [pc, #104]	; (8008e70 <xTimerGenericCommand+0x98>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d02a      	beq.n	8008e64 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2b05      	cmp	r3, #5
 8008e1e:	dc18      	bgt.n	8008e52 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e20:	f7ff fc70 	bl	8008704 <xTaskGetSchedulerState>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d109      	bne.n	8008e3e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e2a:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <xTimerGenericCommand+0x98>)
 8008e2c:	6818      	ldr	r0, [r3, #0]
 8008e2e:	f107 0110 	add.w	r1, r7, #16
 8008e32:	2300      	movs	r3, #0
 8008e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e36:	f7fd ff13 	bl	8006c60 <xQueueGenericSend>
 8008e3a:	6278      	str	r0, [r7, #36]	; 0x24
 8008e3c:	e012      	b.n	8008e64 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e3e:	4b0c      	ldr	r3, [pc, #48]	; (8008e70 <xTimerGenericCommand+0x98>)
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	f107 0110 	add.w	r1, r7, #16
 8008e46:	2300      	movs	r3, #0
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f7fd ff09 	bl	8006c60 <xQueueGenericSend>
 8008e4e:	6278      	str	r0, [r7, #36]	; 0x24
 8008e50:	e008      	b.n	8008e64 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e52:	4b07      	ldr	r3, [pc, #28]	; (8008e70 <xTimerGenericCommand+0x98>)
 8008e54:	6818      	ldr	r0, [r3, #0]
 8008e56:	f107 0110 	add.w	r1, r7, #16
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	683a      	ldr	r2, [r7, #0]
 8008e5e:	f7fd fffd 	bl	8006e5c <xQueueGenericSendFromISR>
 8008e62:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3728      	adds	r7, #40	; 0x28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	20000fe4 	.word	0x20000fe4

08008e74 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b088      	sub	sp, #32
 8008e78:	af02      	add	r7, sp, #8
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e7e:	4b22      	ldr	r3, [pc, #136]	; (8008f08 <prvProcessExpiredTimer+0x94>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fd fd4d 	bl	800692c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e98:	f003 0304 	and.w	r3, r3, #4
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d022      	beq.n	8008ee6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	699a      	ldr	r2, [r3, #24]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	18d1      	adds	r1, r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	6978      	ldr	r0, [r7, #20]
 8008eae:	f000 f8d1 	bl	8009054 <prvInsertTimerInActiveList>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d01f      	beq.n	8008ef8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008eb8:	2300      	movs	r3, #0
 8008eba:	9300      	str	r3, [sp, #0]
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	6978      	ldr	r0, [r7, #20]
 8008ec4:	f7ff ff88 	bl	8008dd8 <xTimerGenericCommand>
 8008ec8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d113      	bne.n	8008ef8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	f383 8811 	msr	BASEPRI, r3
 8008ed8:	f3bf 8f6f 	isb	sy
 8008edc:	f3bf 8f4f 	dsb	sy
 8008ee0:	60fb      	str	r3, [r7, #12]
}
 8008ee2:	bf00      	nop
 8008ee4:	e7fe      	b.n	8008ee4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008eec:	f023 0301 	bic.w	r3, r3, #1
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	6978      	ldr	r0, [r7, #20]
 8008efe:	4798      	blx	r3
}
 8008f00:	bf00      	nop
 8008f02:	3718      	adds	r7, #24
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	20000fdc 	.word	0x20000fdc

08008f0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f14:	f107 0308 	add.w	r3, r7, #8
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f000 f857 	bl	8008fcc <prvGetNextExpireTime>
 8008f1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	4619      	mov	r1, r3
 8008f24:	68f8      	ldr	r0, [r7, #12]
 8008f26:	f000 f803 	bl	8008f30 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f2a:	f000 f8d5 	bl	80090d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f2e:	e7f1      	b.n	8008f14 <prvTimerTask+0x8>

08008f30 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f3a:	f7fe ffe7 	bl	8007f0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f3e:	f107 0308 	add.w	r3, r7, #8
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 f866 	bl	8009014 <prvSampleTimeNow>
 8008f48:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d130      	bne.n	8008fb2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d10a      	bne.n	8008f6c <prvProcessTimerOrBlockTask+0x3c>
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d806      	bhi.n	8008f6c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f5e:	f7fe ffe3 	bl	8007f28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f62:	68f9      	ldr	r1, [r7, #12]
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f7ff ff85 	bl	8008e74 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f6a:	e024      	b.n	8008fb6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d008      	beq.n	8008f84 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008f72:	4b13      	ldr	r3, [pc, #76]	; (8008fc0 <prvProcessTimerOrBlockTask+0x90>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <prvProcessTimerOrBlockTask+0x50>
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e000      	b.n	8008f82 <prvProcessTimerOrBlockTask+0x52>
 8008f80:	2300      	movs	r3, #0
 8008f82:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008f84:	4b0f      	ldr	r3, [pc, #60]	; (8008fc4 <prvProcessTimerOrBlockTask+0x94>)
 8008f86:	6818      	ldr	r0, [r3, #0]
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	683a      	ldr	r2, [r7, #0]
 8008f90:	4619      	mov	r1, r3
 8008f92:	f7fe fbc9 	bl	8007728 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008f96:	f7fe ffc7 	bl	8007f28 <xTaskResumeAll>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10a      	bne.n	8008fb6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fa0:	4b09      	ldr	r3, [pc, #36]	; (8008fc8 <prvProcessTimerOrBlockTask+0x98>)
 8008fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa6:	601a      	str	r2, [r3, #0]
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	f3bf 8f6f 	isb	sy
}
 8008fb0:	e001      	b.n	8008fb6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fb2:	f7fe ffb9 	bl	8007f28 <xTaskResumeAll>
}
 8008fb6:	bf00      	nop
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
 8008fbe:	bf00      	nop
 8008fc0:	20000fe0 	.word	0x20000fe0
 8008fc4:	20000fe4 	.word	0x20000fe4
 8008fc8:	e000ed04 	.word	0xe000ed04

08008fcc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008fd4:	4b0e      	ldr	r3, [pc, #56]	; (8009010 <prvGetNextExpireTime+0x44>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <prvGetNextExpireTime+0x16>
 8008fde:	2201      	movs	r2, #1
 8008fe0:	e000      	b.n	8008fe4 <prvGetNextExpireTime+0x18>
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d105      	bne.n	8008ffc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ff0:	4b07      	ldr	r3, [pc, #28]	; (8009010 <prvGetNextExpireTime+0x44>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	60fb      	str	r3, [r7, #12]
 8008ffa:	e001      	b.n	8009000 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009000:	68fb      	ldr	r3, [r7, #12]
}
 8009002:	4618      	mov	r0, r3
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	20000fdc 	.word	0x20000fdc

08009014 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800901c:	f7ff f822 	bl	8008064 <xTaskGetTickCount>
 8009020:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009022:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <prvSampleTimeNow+0x3c>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	429a      	cmp	r2, r3
 800902a:	d205      	bcs.n	8009038 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800902c:	f000 f936 	bl	800929c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2201      	movs	r2, #1
 8009034:	601a      	str	r2, [r3, #0]
 8009036:	e002      	b.n	800903e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2200      	movs	r2, #0
 800903c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800903e:	4a04      	ldr	r2, [pc, #16]	; (8009050 <prvSampleTimeNow+0x3c>)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009044:	68fb      	ldr	r3, [r7, #12]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20000fec 	.word	0x20000fec

08009054 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	60b9      	str	r1, [r7, #8]
 800905e:	607a      	str	r2, [r7, #4]
 8009060:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009062:	2300      	movs	r3, #0
 8009064:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	68fa      	ldr	r2, [r7, #12]
 8009070:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	429a      	cmp	r2, r3
 8009078:	d812      	bhi.n	80090a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	1ad2      	subs	r2, r2, r3
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	429a      	cmp	r2, r3
 8009086:	d302      	bcc.n	800908e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009088:	2301      	movs	r3, #1
 800908a:	617b      	str	r3, [r7, #20]
 800908c:	e01b      	b.n	80090c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800908e:	4b10      	ldr	r3, [pc, #64]	; (80090d0 <prvInsertTimerInActiveList+0x7c>)
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	3304      	adds	r3, #4
 8009096:	4619      	mov	r1, r3
 8009098:	4610      	mov	r0, r2
 800909a:	f7fd fc0e 	bl	80068ba <vListInsert>
 800909e:	e012      	b.n	80090c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d206      	bcs.n	80090b6 <prvInsertTimerInActiveList+0x62>
 80090a8:	68ba      	ldr	r2, [r7, #8]
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d302      	bcc.n	80090b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090b0:	2301      	movs	r3, #1
 80090b2:	617b      	str	r3, [r7, #20]
 80090b4:	e007      	b.n	80090c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090b6:	4b07      	ldr	r3, [pc, #28]	; (80090d4 <prvInsertTimerInActiveList+0x80>)
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3304      	adds	r3, #4
 80090be:	4619      	mov	r1, r3
 80090c0:	4610      	mov	r0, r2
 80090c2:	f7fd fbfa 	bl	80068ba <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090c6:	697b      	ldr	r3, [r7, #20]
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}
 80090d0:	20000fe0 	.word	0x20000fe0
 80090d4:	20000fdc 	.word	0x20000fdc

080090d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08e      	sub	sp, #56	; 0x38
 80090dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090de:	e0ca      	b.n	8009276 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	da18      	bge.n	8009118 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80090e6:	1d3b      	adds	r3, r7, #4
 80090e8:	3304      	adds	r3, #4
 80090ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80090ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d10a      	bne.n	8009108 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	61fb      	str	r3, [r7, #28]
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800910e:	6850      	ldr	r0, [r2, #4]
 8009110:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009112:	6892      	ldr	r2, [r2, #8]
 8009114:	4611      	mov	r1, r2
 8009116:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	f2c0 80aa 	blt.w	8009274 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d004      	beq.n	8009136 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	3304      	adds	r3, #4
 8009130:	4618      	mov	r0, r3
 8009132:	f7fd fbfb 	bl	800692c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009136:	463b      	mov	r3, r7
 8009138:	4618      	mov	r0, r3
 800913a:	f7ff ff6b 	bl	8009014 <prvSampleTimeNow>
 800913e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b09      	cmp	r3, #9
 8009144:	f200 8097 	bhi.w	8009276 <prvProcessReceivedCommands+0x19e>
 8009148:	a201      	add	r2, pc, #4	; (adr r2, 8009150 <prvProcessReceivedCommands+0x78>)
 800914a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914e:	bf00      	nop
 8009150:	08009179 	.word	0x08009179
 8009154:	08009179 	.word	0x08009179
 8009158:	08009179 	.word	0x08009179
 800915c:	080091ed 	.word	0x080091ed
 8009160:	08009201 	.word	0x08009201
 8009164:	0800924b 	.word	0x0800924b
 8009168:	08009179 	.word	0x08009179
 800916c:	08009179 	.word	0x08009179
 8009170:	080091ed 	.word	0x080091ed
 8009174:	08009201 	.word	0x08009201
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800917a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800917e:	f043 0301 	orr.w	r3, r3, #1
 8009182:	b2da      	uxtb	r2, r3
 8009184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009186:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800918a:	68ba      	ldr	r2, [r7, #8]
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	699b      	ldr	r3, [r3, #24]
 8009190:	18d1      	adds	r1, r2, r3
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009196:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009198:	f7ff ff5c 	bl	8009054 <prvInsertTimerInActiveList>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d069      	beq.n	8009276 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d05e      	beq.n	8009276 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	441a      	add	r2, r3
 80091c0:	2300      	movs	r3, #0
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	2300      	movs	r3, #0
 80091c6:	2100      	movs	r1, #0
 80091c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091ca:	f7ff fe05 	bl	8008dd8 <xTimerGenericCommand>
 80091ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d14f      	bne.n	8009276 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	61bb      	str	r3, [r7, #24]
}
 80091e8:	bf00      	nop
 80091ea:	e7fe      	b.n	80091ea <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091f2:	f023 0301 	bic.w	r3, r3, #1
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80091fe:	e03a      	b.n	8009276 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009206:	f043 0301 	orr.w	r3, r3, #1
 800920a:	b2da      	uxtb	r2, r3
 800920c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009212:	68ba      	ldr	r2, [r7, #8]
 8009214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009216:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10a      	bne.n	8009236 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009224:	f383 8811 	msr	BASEPRI, r3
 8009228:	f3bf 8f6f 	isb	sy
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	617b      	str	r3, [r7, #20]
}
 8009232:	bf00      	nop
 8009234:	e7fe      	b.n	8009234 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009238:	699a      	ldr	r2, [r3, #24]
 800923a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800923c:	18d1      	adds	r1, r2, r3
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009242:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009244:	f7ff ff06 	bl	8009054 <prvInsertTimerInActiveList>
					break;
 8009248:	e015      	b.n	8009276 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009250:	f003 0302 	and.w	r3, r3, #2
 8009254:	2b00      	cmp	r3, #0
 8009256:	d103      	bne.n	8009260 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009258:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800925a:	f000 fbe1 	bl	8009a20 <vPortFree>
 800925e:	e00a      	b.n	8009276 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009262:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009266:	f023 0301 	bic.w	r3, r3, #1
 800926a:	b2da      	uxtb	r2, r3
 800926c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800926e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009272:	e000      	b.n	8009276 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009274:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009276:	4b08      	ldr	r3, [pc, #32]	; (8009298 <prvProcessReceivedCommands+0x1c0>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	1d39      	adds	r1, r7, #4
 800927c:	2200      	movs	r2, #0
 800927e:	4618      	mov	r0, r3
 8009280:	f7fd ff14 	bl	80070ac <xQueueReceive>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	f47f af2a 	bne.w	80090e0 <prvProcessReceivedCommands+0x8>
	}
}
 800928c:	bf00      	nop
 800928e:	bf00      	nop
 8009290:	3730      	adds	r7, #48	; 0x30
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20000fe4 	.word	0x20000fe4

0800929c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092a2:	e048      	b.n	8009336 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092a4:	4b2d      	ldr	r3, [pc, #180]	; (800935c <prvSwitchTimerLists+0xc0>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ae:	4b2b      	ldr	r3, [pc, #172]	; (800935c <prvSwitchTimerLists+0xc0>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68db      	ldr	r3, [r3, #12]
 80092b4:	68db      	ldr	r3, [r3, #12]
 80092b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	3304      	adds	r3, #4
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fd fb35 	bl	800692c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092d0:	f003 0304 	and.w	r3, r3, #4
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d02e      	beq.n	8009336 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	4413      	add	r3, r2
 80092e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80092e2:	68ba      	ldr	r2, [r7, #8]
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d90e      	bls.n	8009308 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	68ba      	ldr	r2, [r7, #8]
 80092ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80092f6:	4b19      	ldr	r3, [pc, #100]	; (800935c <prvSwitchTimerLists+0xc0>)
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	3304      	adds	r3, #4
 80092fe:	4619      	mov	r1, r3
 8009300:	4610      	mov	r0, r2
 8009302:	f7fd fada 	bl	80068ba <vListInsert>
 8009306:	e016      	b.n	8009336 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009308:	2300      	movs	r3, #0
 800930a:	9300      	str	r3, [sp, #0]
 800930c:	2300      	movs	r3, #0
 800930e:	693a      	ldr	r2, [r7, #16]
 8009310:	2100      	movs	r1, #0
 8009312:	68f8      	ldr	r0, [r7, #12]
 8009314:	f7ff fd60 	bl	8008dd8 <xTimerGenericCommand>
 8009318:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10a      	bne.n	8009336 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	603b      	str	r3, [r7, #0]
}
 8009332:	bf00      	nop
 8009334:	e7fe      	b.n	8009334 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009336:	4b09      	ldr	r3, [pc, #36]	; (800935c <prvSwitchTimerLists+0xc0>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1b1      	bne.n	80092a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009340:	4b06      	ldr	r3, [pc, #24]	; (800935c <prvSwitchTimerLists+0xc0>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009346:	4b06      	ldr	r3, [pc, #24]	; (8009360 <prvSwitchTimerLists+0xc4>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a04      	ldr	r2, [pc, #16]	; (800935c <prvSwitchTimerLists+0xc0>)
 800934c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800934e:	4a04      	ldr	r2, [pc, #16]	; (8009360 <prvSwitchTimerLists+0xc4>)
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	6013      	str	r3, [r2, #0]
}
 8009354:	bf00      	nop
 8009356:	3718      	adds	r7, #24
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	20000fdc 	.word	0x20000fdc
 8009360:	20000fe0 	.word	0x20000fe0

08009364 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800936a:	f000 f96b 	bl	8009644 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800936e:	4b15      	ldr	r3, [pc, #84]	; (80093c4 <prvCheckForValidListAndQueue+0x60>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d120      	bne.n	80093b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009376:	4814      	ldr	r0, [pc, #80]	; (80093c8 <prvCheckForValidListAndQueue+0x64>)
 8009378:	f7fd fa4e 	bl	8006818 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800937c:	4813      	ldr	r0, [pc, #76]	; (80093cc <prvCheckForValidListAndQueue+0x68>)
 800937e:	f7fd fa4b 	bl	8006818 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009382:	4b13      	ldr	r3, [pc, #76]	; (80093d0 <prvCheckForValidListAndQueue+0x6c>)
 8009384:	4a10      	ldr	r2, [pc, #64]	; (80093c8 <prvCheckForValidListAndQueue+0x64>)
 8009386:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009388:	4b12      	ldr	r3, [pc, #72]	; (80093d4 <prvCheckForValidListAndQueue+0x70>)
 800938a:	4a10      	ldr	r2, [pc, #64]	; (80093cc <prvCheckForValidListAndQueue+0x68>)
 800938c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800938e:	2300      	movs	r3, #0
 8009390:	9300      	str	r3, [sp, #0]
 8009392:	4b11      	ldr	r3, [pc, #68]	; (80093d8 <prvCheckForValidListAndQueue+0x74>)
 8009394:	4a11      	ldr	r2, [pc, #68]	; (80093dc <prvCheckForValidListAndQueue+0x78>)
 8009396:	2110      	movs	r1, #16
 8009398:	200a      	movs	r0, #10
 800939a:	f7fd fb59 	bl	8006a50 <xQueueGenericCreateStatic>
 800939e:	4603      	mov	r3, r0
 80093a0:	4a08      	ldr	r2, [pc, #32]	; (80093c4 <prvCheckForValidListAndQueue+0x60>)
 80093a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093a4:	4b07      	ldr	r3, [pc, #28]	; (80093c4 <prvCheckForValidListAndQueue+0x60>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d005      	beq.n	80093b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093ac:	4b05      	ldr	r3, [pc, #20]	; (80093c4 <prvCheckForValidListAndQueue+0x60>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	490b      	ldr	r1, [pc, #44]	; (80093e0 <prvCheckForValidListAndQueue+0x7c>)
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe f98e 	bl	80076d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093b8:	f000 f974 	bl	80096a4 <vPortExitCritical>
}
 80093bc:	bf00      	nop
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20000fe4 	.word	0x20000fe4
 80093c8:	20000fb4 	.word	0x20000fb4
 80093cc:	20000fc8 	.word	0x20000fc8
 80093d0:	20000fdc 	.word	0x20000fdc
 80093d4:	20000fe0 	.word	0x20000fe0
 80093d8:	20001090 	.word	0x20001090
 80093dc:	20000ff0 	.word	0x20000ff0
 80093e0:	0800aa30 	.word	0x0800aa30

080093e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80093e4:	b480      	push	{r7}
 80093e6:	b085      	sub	sp, #20
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	3b04      	subs	r3, #4
 80093f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80093fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	3b04      	subs	r3, #4
 8009402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f023 0201 	bic.w	r2, r3, #1
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	3b04      	subs	r3, #4
 8009412:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009414:	4a0c      	ldr	r2, [pc, #48]	; (8009448 <pxPortInitialiseStack+0x64>)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	3b14      	subs	r3, #20
 800941e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	3b04      	subs	r3, #4
 800942a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f06f 0202 	mvn.w	r2, #2
 8009432:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	3b20      	subs	r3, #32
 8009438:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800943a:	68fb      	ldr	r3, [r7, #12]
}
 800943c:	4618      	mov	r0, r3
 800943e:	3714      	adds	r7, #20
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	0800944d 	.word	0x0800944d

0800944c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009456:	4b12      	ldr	r3, [pc, #72]	; (80094a0 <prvTaskExitError+0x54>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800945e:	d00a      	beq.n	8009476 <prvTaskExitError+0x2a>
	__asm volatile
 8009460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009464:	f383 8811 	msr	BASEPRI, r3
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	f3bf 8f4f 	dsb	sy
 8009470:	60fb      	str	r3, [r7, #12]
}
 8009472:	bf00      	nop
 8009474:	e7fe      	b.n	8009474 <prvTaskExitError+0x28>
	__asm volatile
 8009476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	60bb      	str	r3, [r7, #8]
}
 8009488:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800948a:	bf00      	nop
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d0fc      	beq.n	800948c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009492:	bf00      	nop
 8009494:	bf00      	nop
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	20000098 	.word	0x20000098
	...

080094b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094b0:	4b07      	ldr	r3, [pc, #28]	; (80094d0 <pxCurrentTCBConst2>)
 80094b2:	6819      	ldr	r1, [r3, #0]
 80094b4:	6808      	ldr	r0, [r1, #0]
 80094b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094ba:	f380 8809 	msr	PSP, r0
 80094be:	f3bf 8f6f 	isb	sy
 80094c2:	f04f 0000 	mov.w	r0, #0
 80094c6:	f380 8811 	msr	BASEPRI, r0
 80094ca:	4770      	bx	lr
 80094cc:	f3af 8000 	nop.w

080094d0 <pxCurrentTCBConst2>:
 80094d0:	20000ab4 	.word	0x20000ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094d4:	bf00      	nop
 80094d6:	bf00      	nop

080094d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80094d8:	4808      	ldr	r0, [pc, #32]	; (80094fc <prvPortStartFirstTask+0x24>)
 80094da:	6800      	ldr	r0, [r0, #0]
 80094dc:	6800      	ldr	r0, [r0, #0]
 80094de:	f380 8808 	msr	MSP, r0
 80094e2:	f04f 0000 	mov.w	r0, #0
 80094e6:	f380 8814 	msr	CONTROL, r0
 80094ea:	b662      	cpsie	i
 80094ec:	b661      	cpsie	f
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	f3bf 8f6f 	isb	sy
 80094f6:	df00      	svc	0
 80094f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80094fa:	bf00      	nop
 80094fc:	e000ed08 	.word	0xe000ed08

08009500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b086      	sub	sp, #24
 8009504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009506:	4b46      	ldr	r3, [pc, #280]	; (8009620 <xPortStartScheduler+0x120>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a46      	ldr	r2, [pc, #280]	; (8009624 <xPortStartScheduler+0x124>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d10a      	bne.n	8009526 <xPortStartScheduler+0x26>
	__asm volatile
 8009510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009514:	f383 8811 	msr	BASEPRI, r3
 8009518:	f3bf 8f6f 	isb	sy
 800951c:	f3bf 8f4f 	dsb	sy
 8009520:	613b      	str	r3, [r7, #16]
}
 8009522:	bf00      	nop
 8009524:	e7fe      	b.n	8009524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009526:	4b3e      	ldr	r3, [pc, #248]	; (8009620 <xPortStartScheduler+0x120>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a3f      	ldr	r2, [pc, #252]	; (8009628 <xPortStartScheduler+0x128>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d10a      	bne.n	8009546 <xPortStartScheduler+0x46>
	__asm volatile
 8009530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	60fb      	str	r3, [r7, #12]
}
 8009542:	bf00      	nop
 8009544:	e7fe      	b.n	8009544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009546:	4b39      	ldr	r3, [pc, #228]	; (800962c <xPortStartScheduler+0x12c>)
 8009548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	b2db      	uxtb	r3, r3
 8009550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	22ff      	movs	r2, #255	; 0xff
 8009556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	b2db      	uxtb	r3, r3
 800955e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009560:	78fb      	ldrb	r3, [r7, #3]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009568:	b2da      	uxtb	r2, r3
 800956a:	4b31      	ldr	r3, [pc, #196]	; (8009630 <xPortStartScheduler+0x130>)
 800956c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800956e:	4b31      	ldr	r3, [pc, #196]	; (8009634 <xPortStartScheduler+0x134>)
 8009570:	2207      	movs	r2, #7
 8009572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009574:	e009      	b.n	800958a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009576:	4b2f      	ldr	r3, [pc, #188]	; (8009634 <xPortStartScheduler+0x134>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3b01      	subs	r3, #1
 800957c:	4a2d      	ldr	r2, [pc, #180]	; (8009634 <xPortStartScheduler+0x134>)
 800957e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	b2db      	uxtb	r3, r3
 8009584:	005b      	lsls	r3, r3, #1
 8009586:	b2db      	uxtb	r3, r3
 8009588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800958a:	78fb      	ldrb	r3, [r7, #3]
 800958c:	b2db      	uxtb	r3, r3
 800958e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009592:	2b80      	cmp	r3, #128	; 0x80
 8009594:	d0ef      	beq.n	8009576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009596:	4b27      	ldr	r3, [pc, #156]	; (8009634 <xPortStartScheduler+0x134>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f1c3 0307 	rsb	r3, r3, #7
 800959e:	2b04      	cmp	r3, #4
 80095a0:	d00a      	beq.n	80095b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80095a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	60bb      	str	r3, [r7, #8]
}
 80095b4:	bf00      	nop
 80095b6:	e7fe      	b.n	80095b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095b8:	4b1e      	ldr	r3, [pc, #120]	; (8009634 <xPortStartScheduler+0x134>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	021b      	lsls	r3, r3, #8
 80095be:	4a1d      	ldr	r2, [pc, #116]	; (8009634 <xPortStartScheduler+0x134>)
 80095c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095c2:	4b1c      	ldr	r3, [pc, #112]	; (8009634 <xPortStartScheduler+0x134>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095ca:	4a1a      	ldr	r2, [pc, #104]	; (8009634 <xPortStartScheduler+0x134>)
 80095cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095d6:	4b18      	ldr	r3, [pc, #96]	; (8009638 <xPortStartScheduler+0x138>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a17      	ldr	r2, [pc, #92]	; (8009638 <xPortStartScheduler+0x138>)
 80095dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095e2:	4b15      	ldr	r3, [pc, #84]	; (8009638 <xPortStartScheduler+0x138>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4a14      	ldr	r2, [pc, #80]	; (8009638 <xPortStartScheduler+0x138>)
 80095e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80095ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095ee:	f000 f8dd 	bl	80097ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095f2:	4b12      	ldr	r3, [pc, #72]	; (800963c <xPortStartScheduler+0x13c>)
 80095f4:	2200      	movs	r2, #0
 80095f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80095f8:	f000 f8fc 	bl	80097f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80095fc:	4b10      	ldr	r3, [pc, #64]	; (8009640 <xPortStartScheduler+0x140>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a0f      	ldr	r2, [pc, #60]	; (8009640 <xPortStartScheduler+0x140>)
 8009602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009608:	f7ff ff66 	bl	80094d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800960c:	f7fe fdf4 	bl	80081f8 <vTaskSwitchContext>
	prvTaskExitError();
 8009610:	f7ff ff1c 	bl	800944c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3718      	adds	r7, #24
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	e000ed00 	.word	0xe000ed00
 8009624:	410fc271 	.word	0x410fc271
 8009628:	410fc270 	.word	0x410fc270
 800962c:	e000e400 	.word	0xe000e400
 8009630:	200010e0 	.word	0x200010e0
 8009634:	200010e4 	.word	0x200010e4
 8009638:	e000ed20 	.word	0xe000ed20
 800963c:	20000098 	.word	0x20000098
 8009640:	e000ef34 	.word	0xe000ef34

08009644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	607b      	str	r3, [r7, #4]
}
 800965c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800965e:	4b0f      	ldr	r3, [pc, #60]	; (800969c <vPortEnterCritical+0x58>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3301      	adds	r3, #1
 8009664:	4a0d      	ldr	r2, [pc, #52]	; (800969c <vPortEnterCritical+0x58>)
 8009666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009668:	4b0c      	ldr	r3, [pc, #48]	; (800969c <vPortEnterCritical+0x58>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d10f      	bne.n	8009690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009670:	4b0b      	ldr	r3, [pc, #44]	; (80096a0 <vPortEnterCritical+0x5c>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00a      	beq.n	8009690 <vPortEnterCritical+0x4c>
	__asm volatile
 800967a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	603b      	str	r3, [r7, #0]
}
 800968c:	bf00      	nop
 800968e:	e7fe      	b.n	800968e <vPortEnterCritical+0x4a>
	}
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr
 800969c:	20000098 	.word	0x20000098
 80096a0:	e000ed04 	.word	0xe000ed04

080096a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096aa:	4b12      	ldr	r3, [pc, #72]	; (80096f4 <vPortExitCritical+0x50>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10a      	bne.n	80096c8 <vPortExitCritical+0x24>
	__asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	607b      	str	r3, [r7, #4]
}
 80096c4:	bf00      	nop
 80096c6:	e7fe      	b.n	80096c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80096c8:	4b0a      	ldr	r3, [pc, #40]	; (80096f4 <vPortExitCritical+0x50>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	3b01      	subs	r3, #1
 80096ce:	4a09      	ldr	r2, [pc, #36]	; (80096f4 <vPortExitCritical+0x50>)
 80096d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096d2:	4b08      	ldr	r3, [pc, #32]	; (80096f4 <vPortExitCritical+0x50>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d105      	bne.n	80096e6 <vPortExitCritical+0x42>
 80096da:	2300      	movs	r3, #0
 80096dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	f383 8811 	msr	BASEPRI, r3
}
 80096e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80096e6:	bf00      	nop
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	20000098 	.word	0x20000098
	...

08009700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009700:	f3ef 8009 	mrs	r0, PSP
 8009704:	f3bf 8f6f 	isb	sy
 8009708:	4b15      	ldr	r3, [pc, #84]	; (8009760 <pxCurrentTCBConst>)
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	f01e 0f10 	tst.w	lr, #16
 8009710:	bf08      	it	eq
 8009712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971a:	6010      	str	r0, [r2, #0]
 800971c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009724:	f380 8811 	msr	BASEPRI, r0
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f7fe fd62 	bl	80081f8 <vTaskSwitchContext>
 8009734:	f04f 0000 	mov.w	r0, #0
 8009738:	f380 8811 	msr	BASEPRI, r0
 800973c:	bc09      	pop	{r0, r3}
 800973e:	6819      	ldr	r1, [r3, #0]
 8009740:	6808      	ldr	r0, [r1, #0]
 8009742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009746:	f01e 0f10 	tst.w	lr, #16
 800974a:	bf08      	it	eq
 800974c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009750:	f380 8809 	msr	PSP, r0
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	f3af 8000 	nop.w

08009760 <pxCurrentTCBConst>:
 8009760:	20000ab4 	.word	0x20000ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009764:	bf00      	nop
 8009766:	bf00      	nop

08009768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af00      	add	r7, sp, #0
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	607b      	str	r3, [r7, #4]
}
 8009780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009782:	f7fe fc7f 	bl	8008084 <xTaskIncrementTick>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d003      	beq.n	8009794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800978c:	4b06      	ldr	r3, [pc, #24]	; (80097a8 <xPortSysTickHandler+0x40>)
 800978e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	2300      	movs	r3, #0
 8009796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	f383 8811 	msr	BASEPRI, r3
}
 800979e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097a0:	bf00      	nop
 80097a2:	3708      	adds	r7, #8
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	e000ed04 	.word	0xe000ed04

080097ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097ac:	b480      	push	{r7}
 80097ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097b0:	4b0b      	ldr	r3, [pc, #44]	; (80097e0 <vPortSetupTimerInterrupt+0x34>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097b6:	4b0b      	ldr	r3, [pc, #44]	; (80097e4 <vPortSetupTimerInterrupt+0x38>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097bc:	4b0a      	ldr	r3, [pc, #40]	; (80097e8 <vPortSetupTimerInterrupt+0x3c>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a0a      	ldr	r2, [pc, #40]	; (80097ec <vPortSetupTimerInterrupt+0x40>)
 80097c2:	fba2 2303 	umull	r2, r3, r2, r3
 80097c6:	099b      	lsrs	r3, r3, #6
 80097c8:	4a09      	ldr	r2, [pc, #36]	; (80097f0 <vPortSetupTimerInterrupt+0x44>)
 80097ca:	3b01      	subs	r3, #1
 80097cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80097ce:	4b04      	ldr	r3, [pc, #16]	; (80097e0 <vPortSetupTimerInterrupt+0x34>)
 80097d0:	2207      	movs	r2, #7
 80097d2:	601a      	str	r2, [r3, #0]
}
 80097d4:	bf00      	nop
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	e000e010 	.word	0xe000e010
 80097e4:	e000e018 	.word	0xe000e018
 80097e8:	20000000 	.word	0x20000000
 80097ec:	10624dd3 	.word	0x10624dd3
 80097f0:	e000e014 	.word	0xe000e014

080097f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009804 <vPortEnableVFP+0x10>
 80097f8:	6801      	ldr	r1, [r0, #0]
 80097fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80097fe:	6001      	str	r1, [r0, #0]
 8009800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009802:	bf00      	nop
 8009804:	e000ed88 	.word	0xe000ed88

08009808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800980e:	f3ef 8305 	mrs	r3, IPSR
 8009812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	2b0f      	cmp	r3, #15
 8009818:	d914      	bls.n	8009844 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800981a:	4a17      	ldr	r2, [pc, #92]	; (8009878 <vPortValidateInterruptPriority+0x70>)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	4413      	add	r3, r2
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009824:	4b15      	ldr	r3, [pc, #84]	; (800987c <vPortValidateInterruptPriority+0x74>)
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	7afa      	ldrb	r2, [r7, #11]
 800982a:	429a      	cmp	r2, r3
 800982c:	d20a      	bcs.n	8009844 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	607b      	str	r3, [r7, #4]
}
 8009840:	bf00      	nop
 8009842:	e7fe      	b.n	8009842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009844:	4b0e      	ldr	r3, [pc, #56]	; (8009880 <vPortValidateInterruptPriority+0x78>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800984c:	4b0d      	ldr	r3, [pc, #52]	; (8009884 <vPortValidateInterruptPriority+0x7c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	429a      	cmp	r2, r3
 8009852:	d90a      	bls.n	800986a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	603b      	str	r3, [r7, #0]
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <vPortValidateInterruptPriority+0x60>
	}
 800986a:	bf00      	nop
 800986c:	3714      	adds	r7, #20
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	e000e3f0 	.word	0xe000e3f0
 800987c:	200010e0 	.word	0x200010e0
 8009880:	e000ed0c 	.word	0xe000ed0c
 8009884:	200010e4 	.word	0x200010e4

08009888 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08a      	sub	sp, #40	; 0x28
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009890:	2300      	movs	r3, #0
 8009892:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009894:	f7fe fb3a 	bl	8007f0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009898:	4b5b      	ldr	r3, [pc, #364]	; (8009a08 <pvPortMalloc+0x180>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098a0:	f000 f920 	bl	8009ae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098a4:	4b59      	ldr	r3, [pc, #356]	; (8009a0c <pvPortMalloc+0x184>)
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4013      	ands	r3, r2
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f040 8093 	bne.w	80099d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d01d      	beq.n	80098f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80098b8:	2208      	movs	r2, #8
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4413      	add	r3, r2
 80098be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f003 0307 	and.w	r3, r3, #7
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d014      	beq.n	80098f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f023 0307 	bic.w	r3, r3, #7
 80098d0:	3308      	adds	r3, #8
 80098d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f003 0307 	and.w	r3, r3, #7
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <pvPortMalloc+0x6c>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	617b      	str	r3, [r7, #20]
}
 80098f0:	bf00      	nop
 80098f2:	e7fe      	b.n	80098f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d06e      	beq.n	80099d8 <pvPortMalloc+0x150>
 80098fa:	4b45      	ldr	r3, [pc, #276]	; (8009a10 <pvPortMalloc+0x188>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	429a      	cmp	r2, r3
 8009902:	d869      	bhi.n	80099d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009904:	4b43      	ldr	r3, [pc, #268]	; (8009a14 <pvPortMalloc+0x18c>)
 8009906:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009908:	4b42      	ldr	r3, [pc, #264]	; (8009a14 <pvPortMalloc+0x18c>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800990e:	e004      	b.n	800991a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009912:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	429a      	cmp	r2, r3
 8009922:	d903      	bls.n	800992c <pvPortMalloc+0xa4>
 8009924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d1f1      	bne.n	8009910 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800992c:	4b36      	ldr	r3, [pc, #216]	; (8009a08 <pvPortMalloc+0x180>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009932:	429a      	cmp	r2, r3
 8009934:	d050      	beq.n	80099d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009936:	6a3b      	ldr	r3, [r7, #32]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2208      	movs	r2, #8
 800993c:	4413      	add	r3, r2
 800993e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994a:	685a      	ldr	r2, [r3, #4]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	1ad2      	subs	r2, r2, r3
 8009950:	2308      	movs	r3, #8
 8009952:	005b      	lsls	r3, r3, #1
 8009954:	429a      	cmp	r2, r3
 8009956:	d91f      	bls.n	8009998 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4413      	add	r3, r2
 800995e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009960:	69bb      	ldr	r3, [r7, #24]
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	2b00      	cmp	r3, #0
 8009968:	d00a      	beq.n	8009980 <pvPortMalloc+0xf8>
	__asm volatile
 800996a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996e:	f383 8811 	msr	BASEPRI, r3
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	f3bf 8f4f 	dsb	sy
 800997a:	613b      	str	r3, [r7, #16]
}
 800997c:	bf00      	nop
 800997e:	e7fe      	b.n	800997e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009982:	685a      	ldr	r2, [r3, #4]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	1ad2      	subs	r2, r2, r3
 8009988:	69bb      	ldr	r3, [r7, #24]
 800998a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009992:	69b8      	ldr	r0, [r7, #24]
 8009994:	f000 f908 	bl	8009ba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009998:	4b1d      	ldr	r3, [pc, #116]	; (8009a10 <pvPortMalloc+0x188>)
 800999a:	681a      	ldr	r2, [r3, #0]
 800999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	4a1b      	ldr	r2, [pc, #108]	; (8009a10 <pvPortMalloc+0x188>)
 80099a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099a6:	4b1a      	ldr	r3, [pc, #104]	; (8009a10 <pvPortMalloc+0x188>)
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	4b1b      	ldr	r3, [pc, #108]	; (8009a18 <pvPortMalloc+0x190>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d203      	bcs.n	80099ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099b2:	4b17      	ldr	r3, [pc, #92]	; (8009a10 <pvPortMalloc+0x188>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a18      	ldr	r2, [pc, #96]	; (8009a18 <pvPortMalloc+0x190>)
 80099b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	685a      	ldr	r2, [r3, #4]
 80099be:	4b13      	ldr	r3, [pc, #76]	; (8009a0c <pvPortMalloc+0x184>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	431a      	orrs	r2, r3
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80099c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ca:	2200      	movs	r2, #0
 80099cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80099ce:	4b13      	ldr	r3, [pc, #76]	; (8009a1c <pvPortMalloc+0x194>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	3301      	adds	r3, #1
 80099d4:	4a11      	ldr	r2, [pc, #68]	; (8009a1c <pvPortMalloc+0x194>)
 80099d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80099d8:	f7fe faa6 	bl	8007f28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	f003 0307 	and.w	r3, r3, #7
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00a      	beq.n	80099fc <pvPortMalloc+0x174>
	__asm volatile
 80099e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ea:	f383 8811 	msr	BASEPRI, r3
 80099ee:	f3bf 8f6f 	isb	sy
 80099f2:	f3bf 8f4f 	dsb	sy
 80099f6:	60fb      	str	r3, [r7, #12]
}
 80099f8:	bf00      	nop
 80099fa:	e7fe      	b.n	80099fa <pvPortMalloc+0x172>
	return pvReturn;
 80099fc:	69fb      	ldr	r3, [r7, #28]
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3728      	adds	r7, #40	; 0x28
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	200090f0 	.word	0x200090f0
 8009a0c:	20009104 	.word	0x20009104
 8009a10:	200090f4 	.word	0x200090f4
 8009a14:	200090e8 	.word	0x200090e8
 8009a18:	200090f8 	.word	0x200090f8
 8009a1c:	200090fc 	.word	0x200090fc

08009a20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b086      	sub	sp, #24
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d04d      	beq.n	8009ace <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a32:	2308      	movs	r3, #8
 8009a34:	425b      	negs	r3, r3
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	4413      	add	r3, r2
 8009a3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	4b24      	ldr	r3, [pc, #144]	; (8009ad8 <vPortFree+0xb8>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4013      	ands	r3, r2
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d10a      	bne.n	8009a64 <vPortFree+0x44>
	__asm volatile
 8009a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a52:	f383 8811 	msr	BASEPRI, r3
 8009a56:	f3bf 8f6f 	isb	sy
 8009a5a:	f3bf 8f4f 	dsb	sy
 8009a5e:	60fb      	str	r3, [r7, #12]
}
 8009a60:	bf00      	nop
 8009a62:	e7fe      	b.n	8009a62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00a      	beq.n	8009a82 <vPortFree+0x62>
	__asm volatile
 8009a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a70:	f383 8811 	msr	BASEPRI, r3
 8009a74:	f3bf 8f6f 	isb	sy
 8009a78:	f3bf 8f4f 	dsb	sy
 8009a7c:	60bb      	str	r3, [r7, #8]
}
 8009a7e:	bf00      	nop
 8009a80:	e7fe      	b.n	8009a80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	685a      	ldr	r2, [r3, #4]
 8009a86:	4b14      	ldr	r3, [pc, #80]	; (8009ad8 <vPortFree+0xb8>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4013      	ands	r3, r2
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d01e      	beq.n	8009ace <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d11a      	bne.n	8009ace <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	685a      	ldr	r2, [r3, #4]
 8009a9c:	4b0e      	ldr	r3, [pc, #56]	; (8009ad8 <vPortFree+0xb8>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	43db      	mvns	r3, r3
 8009aa2:	401a      	ands	r2, r3
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009aa8:	f7fe fa30 	bl	8007f0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	4b0a      	ldr	r3, [pc, #40]	; (8009adc <vPortFree+0xbc>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	4a09      	ldr	r2, [pc, #36]	; (8009adc <vPortFree+0xbc>)
 8009ab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009aba:	6938      	ldr	r0, [r7, #16]
 8009abc:	f000 f874 	bl	8009ba8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ac0:	4b07      	ldr	r3, [pc, #28]	; (8009ae0 <vPortFree+0xc0>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	4a06      	ldr	r2, [pc, #24]	; (8009ae0 <vPortFree+0xc0>)
 8009ac8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009aca:	f7fe fa2d 	bl	8007f28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ace:	bf00      	nop
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	20009104 	.word	0x20009104
 8009adc:	200090f4 	.word	0x200090f4
 8009ae0:	20009100 	.word	0x20009100

08009ae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009af0:	4b27      	ldr	r3, [pc, #156]	; (8009b90 <prvHeapInit+0xac>)
 8009af2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00c      	beq.n	8009b18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3307      	adds	r3, #7
 8009b02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f023 0307 	bic.w	r3, r3, #7
 8009b0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	4a1f      	ldr	r2, [pc, #124]	; (8009b90 <prvHeapInit+0xac>)
 8009b14:	4413      	add	r3, r2
 8009b16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b1c:	4a1d      	ldr	r2, [pc, #116]	; (8009b94 <prvHeapInit+0xb0>)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b22:	4b1c      	ldr	r3, [pc, #112]	; (8009b94 <prvHeapInit+0xb0>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b30:	2208      	movs	r2, #8
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	1a9b      	subs	r3, r3, r2
 8009b36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f023 0307 	bic.w	r3, r3, #7
 8009b3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	4a15      	ldr	r2, [pc, #84]	; (8009b98 <prvHeapInit+0xb4>)
 8009b44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b46:	4b14      	ldr	r3, [pc, #80]	; (8009b98 <prvHeapInit+0xb4>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b4e:	4b12      	ldr	r3, [pc, #72]	; (8009b98 <prvHeapInit+0xb4>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	1ad2      	subs	r2, r2, r3
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b64:	4b0c      	ldr	r3, [pc, #48]	; (8009b98 <prvHeapInit+0xb4>)
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	4a0a      	ldr	r2, [pc, #40]	; (8009b9c <prvHeapInit+0xb8>)
 8009b72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	4a09      	ldr	r2, [pc, #36]	; (8009ba0 <prvHeapInit+0xbc>)
 8009b7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b7c:	4b09      	ldr	r3, [pc, #36]	; (8009ba4 <prvHeapInit+0xc0>)
 8009b7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b82:	601a      	str	r2, [r3, #0]
}
 8009b84:	bf00      	nop
 8009b86:	3714      	adds	r7, #20
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	200010e8 	.word	0x200010e8
 8009b94:	200090e8 	.word	0x200090e8
 8009b98:	200090f0 	.word	0x200090f0
 8009b9c:	200090f8 	.word	0x200090f8
 8009ba0:	200090f4 	.word	0x200090f4
 8009ba4:	20009104 	.word	0x20009104

08009ba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bb0:	4b28      	ldr	r3, [pc, #160]	; (8009c54 <prvInsertBlockIntoFreeList+0xac>)
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	e002      	b.n	8009bbc <prvInsertBlockIntoFreeList+0x14>
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	60fb      	str	r3, [r7, #12]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	429a      	cmp	r2, r3
 8009bc4:	d8f7      	bhi.n	8009bb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	68ba      	ldr	r2, [r7, #8]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d108      	bne.n	8009bea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685b      	ldr	r3, [r3, #4]
 8009be0:	441a      	add	r2, r3
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	68ba      	ldr	r2, [r7, #8]
 8009bf4:	441a      	add	r2, r3
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d118      	bne.n	8009c30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	4b15      	ldr	r3, [pc, #84]	; (8009c58 <prvInsertBlockIntoFreeList+0xb0>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	429a      	cmp	r2, r3
 8009c08:	d00d      	beq.n	8009c26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685a      	ldr	r2, [r3, #4]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	441a      	add	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	601a      	str	r2, [r3, #0]
 8009c24:	e008      	b.n	8009c38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c26:	4b0c      	ldr	r3, [pc, #48]	; (8009c58 <prvInsertBlockIntoFreeList+0xb0>)
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	601a      	str	r2, [r3, #0]
 8009c2e:	e003      	b.n	8009c38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d002      	beq.n	8009c46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c46:	bf00      	nop
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	200090e8 	.word	0x200090e8
 8009c58:	200090f0 	.word	0x200090f0

08009c5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009c60:	2200      	movs	r2, #0
 8009c62:	4912      	ldr	r1, [pc, #72]	; (8009cac <MX_USB_DEVICE_Init+0x50>)
 8009c64:	4812      	ldr	r0, [pc, #72]	; (8009cb0 <MX_USB_DEVICE_Init+0x54>)
 8009c66:	f7fb f9a1 	bl	8004fac <USBD_Init>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d001      	beq.n	8009c74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009c70:	f7f6 fdd0 	bl	8000814 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009c74:	490f      	ldr	r1, [pc, #60]	; (8009cb4 <MX_USB_DEVICE_Init+0x58>)
 8009c76:	480e      	ldr	r0, [pc, #56]	; (8009cb0 <MX_USB_DEVICE_Init+0x54>)
 8009c78:	f7fb f9c8 	bl	800500c <USBD_RegisterClass>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009c82:	f7f6 fdc7 	bl	8000814 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009c86:	490c      	ldr	r1, [pc, #48]	; (8009cb8 <MX_USB_DEVICE_Init+0x5c>)
 8009c88:	4809      	ldr	r0, [pc, #36]	; (8009cb0 <MX_USB_DEVICE_Init+0x54>)
 8009c8a:	f7fb f8b9 	bl	8004e00 <USBD_CDC_RegisterInterface>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d001      	beq.n	8009c98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009c94:	f7f6 fdbe 	bl	8000814 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009c98:	4805      	ldr	r0, [pc, #20]	; (8009cb0 <MX_USB_DEVICE_Init+0x54>)
 8009c9a:	f7fb f9ed 	bl	8005078 <USBD_Start>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d001      	beq.n	8009ca8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009ca4:	f7f6 fdb6 	bl	8000814 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009ca8:	bf00      	nop
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	200000b0 	.word	0x200000b0
 8009cb0:	20009108 	.word	0x20009108
 8009cb4:	20000018 	.word	0x20000018
 8009cb8:	2000009c 	.word	0x2000009c

08009cbc <init_usb_rtos_obj>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

void init_usb_rtos_obj(void){
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	af00      	add	r7, sp, #0
	sem_usb_tx = xSemaphoreCreateBinary();
 8009cc0:	2203      	movs	r2, #3
 8009cc2:	2100      	movs	r1, #0
 8009cc4:	2001      	movs	r0, #1
 8009cc6:	f7fc ff3b 	bl	8006b40 <xQueueGenericCreate>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	4a0a      	ldr	r2, [pc, #40]	; (8009cf8 <init_usb_rtos_obj+0x3c>)
 8009cce:	6013      	str	r3, [r2, #0]
	mutex_usb = xSemaphoreCreateMutex();
 8009cd0:	2001      	movs	r0, #1
 8009cd2:	f7fc ffac 	bl	8006c2e <xQueueCreateMutex>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	4a08      	ldr	r2, [pc, #32]	; (8009cfc <init_usb_rtos_obj+0x40>)
 8009cda:	6013      	str	r3, [r2, #0]
	queue_usb = xQueueCreate(768,sizeof(char)); //Consegue receber 768 caracteres sem descartar nada
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2101      	movs	r1, #1
 8009ce0:	f44f 7040 	mov.w	r0, #768	; 0x300
 8009ce4:	f7fc ff2c 	bl	8006b40 <xQueueGenericCreate>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	4a05      	ldr	r2, [pc, #20]	; (8009d00 <init_usb_rtos_obj+0x44>)
 8009cec:	6013      	str	r3, [r2, #0]
	usb_on = 1;
 8009cee:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <init_usb_rtos_obj+0x48>)
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]
}
 8009cf4:	bf00      	nop
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	2000a3e8 	.word	0x2000a3e8
 8009cfc:	2000a3ec 	.word	0x2000a3ec
 8009d00:	2000a3f0 	.word	0x2000a3f0
 8009d04:	2000a3f4 	.word	0x2000a3f4

08009d08 <read_usb_cdc>:

BaseType_t CDC_Receiveq_MS(char *data, TickType_t timeout){
	return xQueueReceive(queue_usb, data, timeout);
}

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout){
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
	return xMessageBufferReceive(msg_buf_rx, buffer, buf_len, timeout);
 8009d14:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <read_usb_cdc+0x28>)
 8009d16:	6818      	ldr	r0, [r3, #0]
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	68f9      	ldr	r1, [r7, #12]
 8009d1e:	f7fd fd37 	bl	8007790 <xStreamBufferReceive>
 8009d22:	4603      	mov	r3, r0
 8009d24:	b2db      	uxtb	r3, r3
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	200093e4 	.word	0x200093e4

08009d34 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009d38:	2200      	movs	r2, #0
 8009d3a:	4905      	ldr	r1, [pc, #20]	; (8009d50 <CDC_Init_FS+0x1c>)
 8009d3c:	4805      	ldr	r0, [pc, #20]	; (8009d54 <CDC_Init_FS+0x20>)
 8009d3e:	f7fb f879 	bl	8004e34 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009d42:	4905      	ldr	r1, [pc, #20]	; (8009d58 <CDC_Init_FS+0x24>)
 8009d44:	4803      	ldr	r0, [pc, #12]	; (8009d54 <CDC_Init_FS+0x20>)
 8009d46:	f7fb f897 	bl	8004e78 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009d4a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	20009be8 	.word	0x20009be8
 8009d54:	20009108 	.word	0x20009108
 8009d58:	200093e8 	.word	0x200093e8

08009d5c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009d60:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	4603      	mov	r3, r0
 8009d74:	6039      	str	r1, [r7, #0]
 8009d76:	71fb      	strb	r3, [r7, #7]
 8009d78:	4613      	mov	r3, r2
 8009d7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009d7c:	79fb      	ldrb	r3, [r7, #7]
 8009d7e:	2b23      	cmp	r3, #35	; 0x23
 8009d80:	d84a      	bhi.n	8009e18 <CDC_Control_FS+0xac>
 8009d82:	a201      	add	r2, pc, #4	; (adr r2, 8009d88 <CDC_Control_FS+0x1c>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009e19 	.word	0x08009e19
 8009d8c:	08009e19 	.word	0x08009e19
 8009d90:	08009e19 	.word	0x08009e19
 8009d94:	08009e19 	.word	0x08009e19
 8009d98:	08009e19 	.word	0x08009e19
 8009d9c:	08009e19 	.word	0x08009e19
 8009da0:	08009e19 	.word	0x08009e19
 8009da4:	08009e19 	.word	0x08009e19
 8009da8:	08009e19 	.word	0x08009e19
 8009dac:	08009e19 	.word	0x08009e19
 8009db0:	08009e19 	.word	0x08009e19
 8009db4:	08009e19 	.word	0x08009e19
 8009db8:	08009e19 	.word	0x08009e19
 8009dbc:	08009e19 	.word	0x08009e19
 8009dc0:	08009e19 	.word	0x08009e19
 8009dc4:	08009e19 	.word	0x08009e19
 8009dc8:	08009e19 	.word	0x08009e19
 8009dcc:	08009e19 	.word	0x08009e19
 8009dd0:	08009e19 	.word	0x08009e19
 8009dd4:	08009e19 	.word	0x08009e19
 8009dd8:	08009e19 	.word	0x08009e19
 8009ddc:	08009e19 	.word	0x08009e19
 8009de0:	08009e19 	.word	0x08009e19
 8009de4:	08009e19 	.word	0x08009e19
 8009de8:	08009e19 	.word	0x08009e19
 8009dec:	08009e19 	.word	0x08009e19
 8009df0:	08009e19 	.word	0x08009e19
 8009df4:	08009e19 	.word	0x08009e19
 8009df8:	08009e19 	.word	0x08009e19
 8009dfc:	08009e19 	.word	0x08009e19
 8009e00:	08009e19 	.word	0x08009e19
 8009e04:	08009e19 	.word	0x08009e19
 8009e08:	08009e19 	.word	0x08009e19
 8009e0c:	08009e19 	.word	0x08009e19
 8009e10:	08009e19 	.word	0x08009e19
 8009e14:	08009e19 	.word	0x08009e19
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009e18:	bf00      	nop
  }

  return (USBD_OK);
 8009e1a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	portBASE_TYPE yield = pdFALSE;
 8009e32:	2300      	movs	r3, #0
 8009e34:	60bb      	str	r3, [r7, #8]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009e36:	6879      	ldr	r1, [r7, #4]
 8009e38:	4814      	ldr	r0, [pc, #80]	; (8009e8c <CDC_Receive_FS+0x64>)
 8009e3a:	f7fb f81d 	bl	8004e78 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009e3e:	4813      	ldr	r0, [pc, #76]	; (8009e8c <CDC_Receive_FS+0x64>)
 8009e40:	f7fb f87e 	bl	8004f40 <USBD_CDC_ReceivePacket>

	uint32_t len = *Len;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	60fb      	str	r3, [r7, #12]
	while(len){
 8009e4a:	e00c      	b.n	8009e66 <CDC_Receive_FS+0x3e>
		xQueueSendFromISR(queue_usb, Buf++, &yield);
 8009e4c:	4b10      	ldr	r3, [pc, #64]	; (8009e90 <CDC_Receive_FS+0x68>)
 8009e4e:	6818      	ldr	r0, [r3, #0]
 8009e50:	6879      	ldr	r1, [r7, #4]
 8009e52:	1c4b      	adds	r3, r1, #1
 8009e54:	607b      	str	r3, [r7, #4]
 8009e56:	f107 0208 	add.w	r2, r7, #8
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	f7fc fffe 	bl	8006e5c <xQueueGenericSendFromISR>
		len--;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	3b01      	subs	r3, #1
 8009e64:	60fb      	str	r3, [r7, #12]
	while(len){
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1ef      	bne.n	8009e4c <CDC_Receive_FS+0x24>
	}
	portYIELD_FROM_ISR(yield);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d007      	beq.n	8009e82 <CDC_Receive_FS+0x5a>
 8009e72:	4b08      	ldr	r3, [pc, #32]	; (8009e94 <CDC_Receive_FS+0x6c>)
 8009e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e78:	601a      	str	r2, [r3, #0]
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	f3bf 8f6f 	isb	sy

	return (USBD_OK);
 8009e82:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}
 8009e8c:	20009108 	.word	0x20009108
 8009e90:	2000a3f0 	.word	0x2000a3f0
 8009e94:	e000ed04 	.word	0xe000ed04

08009e98 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  if(xSemaphoreTake(mutex_usb, portMAX_DELAY) == pdTRUE){
 8009ea8:	4b1c      	ldr	r3, [pc, #112]	; (8009f1c <CDC_Transmit_FS+0x84>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fd f9db 	bl	800726c <xQueueSemaphoreTake>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d12a      	bne.n	8009f12 <CDC_Transmit_FS+0x7a>
	  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009ebc:	4b18      	ldr	r3, [pc, #96]	; (8009f20 <CDC_Transmit_FS+0x88>)
 8009ebe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ec2:	60bb      	str	r3, [r7, #8]
	  if (hcdc->TxState != 0){
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d008      	beq.n	8009ee0 <CDC_Transmit_FS+0x48>
		xSemaphoreGive(mutex_usb);
 8009ece:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <CDC_Transmit_FS+0x84>)
 8009ed0:	6818      	ldr	r0, [r3, #0]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	f7fc fec2 	bl	8006c60 <xQueueGenericSend>
		return USBD_BUSY;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e019      	b.n	8009f14 <CDC_Transmit_FS+0x7c>
	  }
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009ee0:	887b      	ldrh	r3, [r7, #2]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	6879      	ldr	r1, [r7, #4]
 8009ee6:	480e      	ldr	r0, [pc, #56]	; (8009f20 <CDC_Transmit_FS+0x88>)
 8009ee8:	f7fa ffa4 	bl	8004e34 <USBD_CDC_SetTxBuffer>
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009eec:	480c      	ldr	r0, [pc, #48]	; (8009f20 <CDC_Transmit_FS+0x88>)
 8009eee:	f7fa ffe1 	bl	8004eb4 <USBD_CDC_TransmitPacket>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	73fb      	strb	r3, [r7, #15]
	  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 8009ef6:	4b0b      	ldr	r3, [pc, #44]	; (8009f24 <CDC_Transmit_FS+0x8c>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7fd f9b4 	bl	800726c <xQueueSemaphoreTake>
	  xSemaphoreGive(mutex_usb);
 8009f04:	4b05      	ldr	r3, [pc, #20]	; (8009f1c <CDC_Transmit_FS+0x84>)
 8009f06:	6818      	ldr	r0, [r3, #0]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	f7fc fea7 	bl	8006c60 <xQueueGenericSend>
  }
  /* USER CODE END 7 */
  return result;
 8009f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	2000a3ec 	.word	0x2000a3ec
 8009f20:	20009108 	.word	0x20009108
 8009f24:	2000a3e8 	.word	0x2000a3e8

08009f28 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	60f8      	str	r0, [r7, #12]
 8009f30:	60b9      	str	r1, [r7, #8]
 8009f32:	4613      	mov	r3, r2
 8009f34:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009f36:	2300      	movs	r3, #0
 8009f38:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 8009f3e:	4b0b      	ldr	r3, [pc, #44]	; (8009f6c <CDC_TransmitCplt_FS+0x44>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f107 0210 	add.w	r2, r7, #16
 8009f46:	4611      	mov	r1, r2
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fd f822 	bl	8006f92 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(&tmp);
 8009f4e:	4b08      	ldr	r3, [pc, #32]	; (8009f70 <CDC_TransmitCplt_FS+0x48>)
 8009f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f54:	601a      	str	r2, [r3, #0]
 8009f56:	f3bf 8f4f 	dsb	sy
 8009f5a:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 8009f5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3718      	adds	r7, #24
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	2000a3e8 	.word	0x2000a3e8
 8009f70:	e000ed04 	.word	0xe000ed04

08009f74 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	6039      	str	r1, [r7, #0]
 8009f7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	2212      	movs	r2, #18
 8009f84:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009f86:	4b03      	ldr	r3, [pc, #12]	; (8009f94 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009f88:	4618      	mov	r0, r3
 8009f8a:	370c      	adds	r7, #12
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	200000cc 	.word	0x200000cc

08009f98 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	6039      	str	r1, [r7, #0]
 8009fa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	2204      	movs	r2, #4
 8009fa8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009faa:	4b03      	ldr	r3, [pc, #12]	; (8009fb8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr
 8009fb8:	200000e0 	.word	0x200000e0

08009fbc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	6039      	str	r1, [r7, #0]
 8009fc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d105      	bne.n	8009fda <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	4907      	ldr	r1, [pc, #28]	; (8009ff0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009fd2:	4808      	ldr	r0, [pc, #32]	; (8009ff4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009fd4:	f7fc f9fc 	bl	80063d0 <USBD_GetString>
 8009fd8:	e004      	b.n	8009fe4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	4904      	ldr	r1, [pc, #16]	; (8009ff0 <USBD_FS_ProductStrDescriptor+0x34>)
 8009fde:	4805      	ldr	r0, [pc, #20]	; (8009ff4 <USBD_FS_ProductStrDescriptor+0x38>)
 8009fe0:	f7fc f9f6 	bl	80063d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009fe4:	4b02      	ldr	r3, [pc, #8]	; (8009ff0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	2000a3f8 	.word	0x2000a3f8
 8009ff4:	0800aa38 	.word	0x0800aa38

08009ff8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	4603      	mov	r3, r0
 800a000:	6039      	str	r1, [r7, #0]
 800a002:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a004:	683a      	ldr	r2, [r7, #0]
 800a006:	4904      	ldr	r1, [pc, #16]	; (800a018 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a008:	4804      	ldr	r0, [pc, #16]	; (800a01c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a00a:	f7fc f9e1 	bl	80063d0 <USBD_GetString>
  return USBD_StrDesc;
 800a00e:	4b02      	ldr	r3, [pc, #8]	; (800a018 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	2000a3f8 	.word	0x2000a3f8
 800a01c:	0800aa50 	.word	0x0800aa50

0800a020 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	6039      	str	r1, [r7, #0]
 800a02a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	221a      	movs	r2, #26
 800a030:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a032:	f000 f843 	bl	800a0bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a036:	4b02      	ldr	r3, [pc, #8]	; (800a040 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	200000e4 	.word	0x200000e4

0800a044 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b082      	sub	sp, #8
 800a048:	af00      	add	r7, sp, #0
 800a04a:	4603      	mov	r3, r0
 800a04c:	6039      	str	r1, [r7, #0]
 800a04e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a050:	79fb      	ldrb	r3, [r7, #7]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d105      	bne.n	800a062 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	4907      	ldr	r1, [pc, #28]	; (800a078 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a05a:	4808      	ldr	r0, [pc, #32]	; (800a07c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a05c:	f7fc f9b8 	bl	80063d0 <USBD_GetString>
 800a060:	e004      	b.n	800a06c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a062:	683a      	ldr	r2, [r7, #0]
 800a064:	4904      	ldr	r1, [pc, #16]	; (800a078 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a066:	4805      	ldr	r0, [pc, #20]	; (800a07c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a068:	f7fc f9b2 	bl	80063d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a06c:	4b02      	ldr	r3, [pc, #8]	; (800a078 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3708      	adds	r7, #8
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	2000a3f8 	.word	0x2000a3f8
 800a07c:	0800aa64 	.word	0x0800aa64

0800a080 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	4603      	mov	r3, r0
 800a088:	6039      	str	r1, [r7, #0]
 800a08a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a08c:	79fb      	ldrb	r3, [r7, #7]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d105      	bne.n	800a09e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	4907      	ldr	r1, [pc, #28]	; (800a0b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a096:	4808      	ldr	r0, [pc, #32]	; (800a0b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a098:	f7fc f99a 	bl	80063d0 <USBD_GetString>
 800a09c:	e004      	b.n	800a0a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	4904      	ldr	r1, [pc, #16]	; (800a0b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a0a2:	4805      	ldr	r0, [pc, #20]	; (800a0b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a0a4:	f7fc f994 	bl	80063d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0a8:	4b02      	ldr	r3, [pc, #8]	; (800a0b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3708      	adds	r7, #8
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	2000a3f8 	.word	0x2000a3f8
 800a0b8:	0800aa70 	.word	0x0800aa70

0800a0bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a0c2:	4b0f      	ldr	r3, [pc, #60]	; (800a100 <Get_SerialNum+0x44>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a0c8:	4b0e      	ldr	r3, [pc, #56]	; (800a104 <Get_SerialNum+0x48>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a0ce:	4b0e      	ldr	r3, [pc, #56]	; (800a108 <Get_SerialNum+0x4c>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	4413      	add	r3, r2
 800a0da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d009      	beq.n	800a0f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a0e2:	2208      	movs	r2, #8
 800a0e4:	4909      	ldr	r1, [pc, #36]	; (800a10c <Get_SerialNum+0x50>)
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f000 f814 	bl	800a114 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a0ec:	2204      	movs	r2, #4
 800a0ee:	4908      	ldr	r1, [pc, #32]	; (800a110 <Get_SerialNum+0x54>)
 800a0f0:	68b8      	ldr	r0, [r7, #8]
 800a0f2:	f000 f80f 	bl	800a114 <IntToUnicode>
  }
}
 800a0f6:	bf00      	nop
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	1fff7a10 	.word	0x1fff7a10
 800a104:	1fff7a14 	.word	0x1fff7a14
 800a108:	1fff7a18 	.word	0x1fff7a18
 800a10c:	200000e6 	.word	0x200000e6
 800a110:	200000f6 	.word	0x200000f6

0800a114 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a114:	b480      	push	{r7}
 800a116:	b087      	sub	sp, #28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	4613      	mov	r3, r2
 800a120:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a122:	2300      	movs	r3, #0
 800a124:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a126:	2300      	movs	r3, #0
 800a128:	75fb      	strb	r3, [r7, #23]
 800a12a:	e027      	b.n	800a17c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	0f1b      	lsrs	r3, r3, #28
 800a130:	2b09      	cmp	r3, #9
 800a132:	d80b      	bhi.n	800a14c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	0f1b      	lsrs	r3, r3, #28
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	7dfb      	ldrb	r3, [r7, #23]
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	4619      	mov	r1, r3
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	440b      	add	r3, r1
 800a144:	3230      	adds	r2, #48	; 0x30
 800a146:	b2d2      	uxtb	r2, r2
 800a148:	701a      	strb	r2, [r3, #0]
 800a14a:	e00a      	b.n	800a162 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	0f1b      	lsrs	r3, r3, #28
 800a150:	b2da      	uxtb	r2, r3
 800a152:	7dfb      	ldrb	r3, [r7, #23]
 800a154:	005b      	lsls	r3, r3, #1
 800a156:	4619      	mov	r1, r3
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	440b      	add	r3, r1
 800a15c:	3237      	adds	r2, #55	; 0x37
 800a15e:	b2d2      	uxtb	r2, r2
 800a160:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	011b      	lsls	r3, r3, #4
 800a166:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a168:	7dfb      	ldrb	r3, [r7, #23]
 800a16a:	005b      	lsls	r3, r3, #1
 800a16c:	3301      	adds	r3, #1
 800a16e:	68ba      	ldr	r2, [r7, #8]
 800a170:	4413      	add	r3, r2
 800a172:	2200      	movs	r2, #0
 800a174:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a176:	7dfb      	ldrb	r3, [r7, #23]
 800a178:	3301      	adds	r3, #1
 800a17a:	75fb      	strb	r3, [r7, #23]
 800a17c:	7dfa      	ldrb	r2, [r7, #23]
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	429a      	cmp	r2, r3
 800a182:	d3d3      	bcc.n	800a12c <IntToUnicode+0x18>
  }
}
 800a184:	bf00      	nop
 800a186:	bf00      	nop
 800a188:	371c      	adds	r7, #28
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
	...

0800a194 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b08a      	sub	sp, #40	; 0x28
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a19c:	f107 0314 	add.w	r3, r7, #20
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	605a      	str	r2, [r3, #4]
 800a1a6:	609a      	str	r2, [r3, #8]
 800a1a8:	60da      	str	r2, [r3, #12]
 800a1aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1b4:	d13a      	bne.n	800a22c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	613b      	str	r3, [r7, #16]
 800a1ba:	4b1e      	ldr	r3, [pc, #120]	; (800a234 <HAL_PCD_MspInit+0xa0>)
 800a1bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1be:	4a1d      	ldr	r2, [pc, #116]	; (800a234 <HAL_PCD_MspInit+0xa0>)
 800a1c0:	f043 0301 	orr.w	r3, r3, #1
 800a1c4:	6313      	str	r3, [r2, #48]	; 0x30
 800a1c6:	4b1b      	ldr	r3, [pc, #108]	; (800a234 <HAL_PCD_MspInit+0xa0>)
 800a1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ca:	f003 0301 	and.w	r3, r3, #1
 800a1ce:	613b      	str	r3, [r7, #16]
 800a1d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a1d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a1d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1d8:	2302      	movs	r3, #2
 800a1da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a1e4:	230a      	movs	r3, #10
 800a1e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a1e8:	f107 0314 	add.w	r3, r7, #20
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	4812      	ldr	r0, [pc, #72]	; (800a238 <HAL_PCD_MspInit+0xa4>)
 800a1f0:	f7f6 fd54 	bl	8000c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a1f4:	4b0f      	ldr	r3, [pc, #60]	; (800a234 <HAL_PCD_MspInit+0xa0>)
 800a1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f8:	4a0e      	ldr	r2, [pc, #56]	; (800a234 <HAL_PCD_MspInit+0xa0>)
 800a1fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1fe:	6353      	str	r3, [r2, #52]	; 0x34
 800a200:	2300      	movs	r3, #0
 800a202:	60fb      	str	r3, [r7, #12]
 800a204:	4b0b      	ldr	r3, [pc, #44]	; (800a234 <HAL_PCD_MspInit+0xa0>)
 800a206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a208:	4a0a      	ldr	r2, [pc, #40]	; (800a234 <HAL_PCD_MspInit+0xa0>)
 800a20a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a20e:	6453      	str	r3, [r2, #68]	; 0x44
 800a210:	4b08      	ldr	r3, [pc, #32]	; (800a234 <HAL_PCD_MspInit+0xa0>)
 800a212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a218:	60fb      	str	r3, [r7, #12]
 800a21a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800a21c:	2200      	movs	r2, #0
 800a21e:	2105      	movs	r1, #5
 800a220:	2043      	movs	r0, #67	; 0x43
 800a222:	f7f6 fd04 	bl	8000c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a226:	2043      	movs	r0, #67	; 0x43
 800a228:	f7f6 fd1d 	bl	8000c66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a22c:	bf00      	nop
 800a22e:	3728      	adds	r7, #40	; 0x28
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	40023800 	.word	0x40023800
 800a238:	40020000 	.word	0x40020000

0800a23c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b082      	sub	sp, #8
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a250:	4619      	mov	r1, r3
 800a252:	4610      	mov	r0, r2
 800a254:	f7fa ff5d 	bl	8005112 <USBD_LL_SetupStage>
}
 800a258:	bf00      	nop
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	460b      	mov	r3, r1
 800a26a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a272:	78fa      	ldrb	r2, [r7, #3]
 800a274:	6879      	ldr	r1, [r7, #4]
 800a276:	4613      	mov	r3, r2
 800a278:	00db      	lsls	r3, r3, #3
 800a27a:	4413      	add	r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	440b      	add	r3, r1
 800a280:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	78fb      	ldrb	r3, [r7, #3]
 800a288:	4619      	mov	r1, r3
 800a28a:	f7fa ff97 	bl	80051bc <USBD_LL_DataOutStage>
}
 800a28e:	bf00      	nop
 800a290:	3708      	adds	r7, #8
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b082      	sub	sp, #8
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
 800a29e:	460b      	mov	r3, r1
 800a2a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a2a8:	78fa      	ldrb	r2, [r7, #3]
 800a2aa:	6879      	ldr	r1, [r7, #4]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	00db      	lsls	r3, r3, #3
 800a2b0:	4413      	add	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	440b      	add	r3, r1
 800a2b6:	334c      	adds	r3, #76	; 0x4c
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	78fb      	ldrb	r3, [r7, #3]
 800a2bc:	4619      	mov	r1, r3
 800a2be:	f7fb f830 	bl	8005322 <USBD_LL_DataInStage>
}
 800a2c2:	bf00      	nop
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b082      	sub	sp, #8
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7fb f964 	bl	80055a6 <USBD_LL_SOF>
}
 800a2de:	bf00      	nop
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b084      	sub	sp, #16
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d102      	bne.n	800a300 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	73fb      	strb	r3, [r7, #15]
 800a2fe:	e008      	b.n	800a312 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	2b02      	cmp	r3, #2
 800a306:	d102      	bne.n	800a30e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a308:	2301      	movs	r3, #1
 800a30a:	73fb      	strb	r3, [r7, #15]
 800a30c:	e001      	b.n	800a312 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a30e:	f7f6 fa81 	bl	8000814 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a318:	7bfa      	ldrb	r2, [r7, #15]
 800a31a:	4611      	mov	r1, r2
 800a31c:	4618      	mov	r0, r3
 800a31e:	f7fb f904 	bl	800552a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fb f8ac 	bl	8005486 <USBD_LL_Reset>
}
 800a32e:	bf00      	nop
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a346:	4618      	mov	r0, r3
 800a348:	f7fb f8ff 	bl	800554a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	6812      	ldr	r2, [r2, #0]
 800a35a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a35e:	f043 0301 	orr.w	r3, r3, #1
 800a362:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a1b      	ldr	r3, [r3, #32]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d005      	beq.n	800a378 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a36c:	4b04      	ldr	r3, [pc, #16]	; (800a380 <HAL_PCD_SuspendCallback+0x48>)
 800a36e:	691b      	ldr	r3, [r3, #16]
 800a370:	4a03      	ldr	r2, [pc, #12]	; (800a380 <HAL_PCD_SuspendCallback+0x48>)
 800a372:	f043 0306 	orr.w	r3, r3, #6
 800a376:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a378:	bf00      	nop
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	e000ed00 	.word	0xe000ed00

0800a384 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a392:	4618      	mov	r0, r3
 800a394:	f7fb f8ef 	bl	8005576 <USBD_LL_Resume>
}
 800a398:	bf00      	nop
 800a39a:	3708      	adds	r7, #8
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b082      	sub	sp, #8
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3b2:	78fa      	ldrb	r2, [r7, #3]
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f7fb f947 	bl	800564a <USBD_LL_IsoOUTIncomplete>
}
 800a3bc:	bf00      	nop
 800a3be:	3708      	adds	r7, #8
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b082      	sub	sp, #8
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3d6:	78fa      	ldrb	r2, [r7, #3]
 800a3d8:	4611      	mov	r1, r2
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f7fb f903 	bl	80055e6 <USBD_LL_IsoINIncomplete>
}
 800a3e0:	bf00      	nop
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b082      	sub	sp, #8
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fb f959 	bl	80056ae <USBD_LL_DevConnected>
}
 800a3fc:	bf00      	nop
 800a3fe:	3708      	adds	r7, #8
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a412:	4618      	mov	r0, r3
 800a414:	f7fb f956 	bl	80056c4 <USBD_LL_DevDisconnected>
}
 800a418:	bf00      	nop
 800a41a:	3708      	adds	r7, #8
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	781b      	ldrb	r3, [r3, #0]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d13c      	bne.n	800a4aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a430:	4a20      	ldr	r2, [pc, #128]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	4a1e      	ldr	r2, [pc, #120]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a43c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a440:	4b1c      	ldr	r3, [pc, #112]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a442:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a446:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a448:	4b1a      	ldr	r3, [pc, #104]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a44a:	2204      	movs	r2, #4
 800a44c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a44e:	4b19      	ldr	r3, [pc, #100]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a450:	2202      	movs	r2, #2
 800a452:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a454:	4b17      	ldr	r3, [pc, #92]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a456:	2200      	movs	r2, #0
 800a458:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a45a:	4b16      	ldr	r3, [pc, #88]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a45c:	2202      	movs	r2, #2
 800a45e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a460:	4b14      	ldr	r3, [pc, #80]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a462:	2200      	movs	r2, #0
 800a464:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a466:	4b13      	ldr	r3, [pc, #76]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a468:	2200      	movs	r2, #0
 800a46a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a46c:	4b11      	ldr	r3, [pc, #68]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a46e:	2200      	movs	r2, #0
 800a470:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a472:	4b10      	ldr	r3, [pc, #64]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a474:	2200      	movs	r2, #0
 800a476:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a478:	4b0e      	ldr	r3, [pc, #56]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a47a:	2200      	movs	r2, #0
 800a47c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a47e:	480d      	ldr	r0, [pc, #52]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a480:	f7f6 fdc3 	bl	800100a <HAL_PCD_Init>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a48a:	f7f6 f9c3 	bl	8000814 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a48e:	2180      	movs	r1, #128	; 0x80
 800a490:	4808      	ldr	r0, [pc, #32]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a492:	f7f8 f81a 	bl	80024ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a496:	2240      	movs	r2, #64	; 0x40
 800a498:	2100      	movs	r1, #0
 800a49a:	4806      	ldr	r0, [pc, #24]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a49c:	f7f7 ffce 	bl	800243c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a4a0:	2280      	movs	r2, #128	; 0x80
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	4803      	ldr	r0, [pc, #12]	; (800a4b4 <USBD_LL_Init+0x94>)
 800a4a6:	f7f7 ffc9 	bl	800243c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	2000a5f8 	.word	0x2000a5f8

0800a4b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7f6 feb8 	bl	8001244 <HAL_PCD_Start>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f000 f942 	bl	800a764 <USBD_Get_USB_Status>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a4e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3710      	adds	r7, #16
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b084      	sub	sp, #16
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	4608      	mov	r0, r1
 800a4f8:	4611      	mov	r1, r2
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	70fb      	strb	r3, [r7, #3]
 800a500:	460b      	mov	r3, r1
 800a502:	70bb      	strb	r3, [r7, #2]
 800a504:	4613      	mov	r3, r2
 800a506:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a508:	2300      	movs	r3, #0
 800a50a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a516:	78bb      	ldrb	r3, [r7, #2]
 800a518:	883a      	ldrh	r2, [r7, #0]
 800a51a:	78f9      	ldrb	r1, [r7, #3]
 800a51c:	f7f7 fb89 	bl	8001c32 <HAL_PCD_EP_Open>
 800a520:	4603      	mov	r3, r0
 800a522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a524:	7bfb      	ldrb	r3, [r7, #15]
 800a526:	4618      	mov	r0, r3
 800a528:	f000 f91c 	bl	800a764 <USBD_Get_USB_Status>
 800a52c:	4603      	mov	r3, r0
 800a52e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a530:	7bbb      	ldrb	r3, [r7, #14]
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}

0800a53a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b084      	sub	sp, #16
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
 800a542:	460b      	mov	r3, r1
 800a544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a554:	78fa      	ldrb	r2, [r7, #3]
 800a556:	4611      	mov	r1, r2
 800a558:	4618      	mov	r0, r3
 800a55a:	f7f7 fbd2 	bl	8001d02 <HAL_PCD_EP_Close>
 800a55e:	4603      	mov	r3, r0
 800a560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	4618      	mov	r0, r3
 800a566:	f000 f8fd 	bl	800a764 <USBD_Get_USB_Status>
 800a56a:	4603      	mov	r3, r0
 800a56c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a56e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	460b      	mov	r3, r1
 800a582:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a592:	78fa      	ldrb	r2, [r7, #3]
 800a594:	4611      	mov	r1, r2
 800a596:	4618      	mov	r0, r3
 800a598:	f7f7 fcaa 	bl	8001ef0 <HAL_PCD_EP_SetStall>
 800a59c:	4603      	mov	r3, r0
 800a59e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f000 f8de 	bl	800a764 <USBD_Get_USB_Status>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3710      	adds	r7, #16
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}

0800a5b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b084      	sub	sp, #16
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
 800a5be:	460b      	mov	r3, r1
 800a5c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5d0:	78fa      	ldrb	r2, [r7, #3]
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7f7 fcef 	bl	8001fb8 <HAL_PCD_EP_ClrStall>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5de:	7bfb      	ldrb	r3, [r7, #15]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 f8bf 	bl	800a764 <USBD_Get_USB_Status>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3710      	adds	r7, #16
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a606:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	da0b      	bge.n	800a628 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a610:	78fb      	ldrb	r3, [r7, #3]
 800a612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a616:	68f9      	ldr	r1, [r7, #12]
 800a618:	4613      	mov	r3, r2
 800a61a:	00db      	lsls	r3, r3, #3
 800a61c:	4413      	add	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	440b      	add	r3, r1
 800a622:	333e      	adds	r3, #62	; 0x3e
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	e00b      	b.n	800a640 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a628:	78fb      	ldrb	r3, [r7, #3]
 800a62a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a62e:	68f9      	ldr	r1, [r7, #12]
 800a630:	4613      	mov	r3, r2
 800a632:	00db      	lsls	r3, r3, #3
 800a634:	4413      	add	r3, r2
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	440b      	add	r3, r1
 800a63a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a63e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a640:	4618      	mov	r0, r3
 800a642:	3714      	adds	r7, #20
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a666:	78fa      	ldrb	r2, [r7, #3]
 800a668:	4611      	mov	r1, r2
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7f7 fabc 	bl	8001be8 <HAL_PCD_SetAddress>
 800a670:	4603      	mov	r3, r0
 800a672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a674:	7bfb      	ldrb	r3, [r7, #15]
 800a676:	4618      	mov	r0, r3
 800a678:	f000 f874 	bl	800a764 <USBD_Get_USB_Status>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a680:	7bbb      	ldrb	r3, [r7, #14]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}

0800a68a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a68a:	b580      	push	{r7, lr}
 800a68c:	b086      	sub	sp, #24
 800a68e:	af00      	add	r7, sp, #0
 800a690:	60f8      	str	r0, [r7, #12]
 800a692:	607a      	str	r2, [r7, #4]
 800a694:	603b      	str	r3, [r7, #0]
 800a696:	460b      	mov	r3, r1
 800a698:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a69a:	2300      	movs	r3, #0
 800a69c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a6a8:	7af9      	ldrb	r1, [r7, #11]
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	f7f7 fbd5 	bl	8001e5c <HAL_PCD_EP_Transmit>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6b6:	7dfb      	ldrb	r3, [r7, #23]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f000 f853 	bl	800a764 <USBD_Get_USB_Status>
 800a6be:	4603      	mov	r3, r0
 800a6c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a6c2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3718      	adds	r7, #24
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}

0800a6cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	607a      	str	r2, [r7, #4]
 800a6d6:	603b      	str	r3, [r7, #0]
 800a6d8:	460b      	mov	r3, r1
 800a6da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a6ea:	7af9      	ldrb	r1, [r7, #11]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	f7f7 fb51 	bl	8001d96 <HAL_PCD_EP_Receive>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6f8:	7dfb      	ldrb	r3, [r7, #23]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 f832 	bl	800a764 <USBD_Get_USB_Status>
 800a700:	4603      	mov	r3, r0
 800a702:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a704:	7dbb      	ldrb	r3, [r7, #22]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a70e:	b580      	push	{r7, lr}
 800a710:	b082      	sub	sp, #8
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
 800a716:	460b      	mov	r3, r1
 800a718:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a720:	78fa      	ldrb	r2, [r7, #3]
 800a722:	4611      	mov	r1, r2
 800a724:	4618      	mov	r0, r3
 800a726:	f7f7 fb81 	bl	8001e2c <HAL_PCD_EP_GetRxCount>
 800a72a:	4603      	mov	r3, r0
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3708      	adds	r7, #8
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a73c:	4b03      	ldr	r3, [pc, #12]	; (800a74c <USBD_static_malloc+0x18>)
}
 800a73e:	4618      	mov	r0, r3
 800a740:	370c      	adds	r7, #12
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr
 800a74a:	bf00      	nop
 800a74c:	2000ab04 	.word	0x2000ab04

0800a750 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]

}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	4603      	mov	r3, r0
 800a76c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a76e:	2300      	movs	r3, #0
 800a770:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a772:	79fb      	ldrb	r3, [r7, #7]
 800a774:	2b03      	cmp	r3, #3
 800a776:	d817      	bhi.n	800a7a8 <USBD_Get_USB_Status+0x44>
 800a778:	a201      	add	r2, pc, #4	; (adr r2, 800a780 <USBD_Get_USB_Status+0x1c>)
 800a77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a77e:	bf00      	nop
 800a780:	0800a791 	.word	0x0800a791
 800a784:	0800a797 	.word	0x0800a797
 800a788:	0800a79d 	.word	0x0800a79d
 800a78c:	0800a7a3 	.word	0x0800a7a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a790:	2300      	movs	r3, #0
 800a792:	73fb      	strb	r3, [r7, #15]
    break;
 800a794:	e00b      	b.n	800a7ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a796:	2303      	movs	r3, #3
 800a798:	73fb      	strb	r3, [r7, #15]
    break;
 800a79a:	e008      	b.n	800a7ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a79c:	2301      	movs	r3, #1
 800a79e:	73fb      	strb	r3, [r7, #15]
    break;
 800a7a0:	e005      	b.n	800a7ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a7a2:	2303      	movs	r3, #3
 800a7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a7a6:	e002      	b.n	800a7ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a7a8:	2303      	movs	r3, #3
 800a7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a7ac:	bf00      	nop
  }
  return usb_status;
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3714      	adds	r7, #20
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr

0800a7bc <__libc_init_array>:
 800a7bc:	b570      	push	{r4, r5, r6, lr}
 800a7be:	4d0d      	ldr	r5, [pc, #52]	; (800a7f4 <__libc_init_array+0x38>)
 800a7c0:	4c0d      	ldr	r4, [pc, #52]	; (800a7f8 <__libc_init_array+0x3c>)
 800a7c2:	1b64      	subs	r4, r4, r5
 800a7c4:	10a4      	asrs	r4, r4, #2
 800a7c6:	2600      	movs	r6, #0
 800a7c8:	42a6      	cmp	r6, r4
 800a7ca:	d109      	bne.n	800a7e0 <__libc_init_array+0x24>
 800a7cc:	4d0b      	ldr	r5, [pc, #44]	; (800a7fc <__libc_init_array+0x40>)
 800a7ce:	4c0c      	ldr	r4, [pc, #48]	; (800a800 <__libc_init_array+0x44>)
 800a7d0:	f000 f8f2 	bl	800a9b8 <_init>
 800a7d4:	1b64      	subs	r4, r4, r5
 800a7d6:	10a4      	asrs	r4, r4, #2
 800a7d8:	2600      	movs	r6, #0
 800a7da:	42a6      	cmp	r6, r4
 800a7dc:	d105      	bne.n	800a7ea <__libc_init_array+0x2e>
 800a7de:	bd70      	pop	{r4, r5, r6, pc}
 800a7e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7e4:	4798      	blx	r3
 800a7e6:	3601      	adds	r6, #1
 800a7e8:	e7ee      	b.n	800a7c8 <__libc_init_array+0xc>
 800a7ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7ee:	4798      	blx	r3
 800a7f0:	3601      	adds	r6, #1
 800a7f2:	e7f2      	b.n	800a7da <__libc_init_array+0x1e>
 800a7f4:	0800ab1c 	.word	0x0800ab1c
 800a7f8:	0800ab1c 	.word	0x0800ab1c
 800a7fc:	0800ab1c 	.word	0x0800ab1c
 800a800:	0800ab20 	.word	0x0800ab20

0800a804 <__retarget_lock_acquire_recursive>:
 800a804:	4770      	bx	lr

0800a806 <__retarget_lock_release_recursive>:
 800a806:	4770      	bx	lr

0800a808 <memcpy>:
 800a808:	440a      	add	r2, r1
 800a80a:	4291      	cmp	r1, r2
 800a80c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a810:	d100      	bne.n	800a814 <memcpy+0xc>
 800a812:	4770      	bx	lr
 800a814:	b510      	push	{r4, lr}
 800a816:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a81a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a81e:	4291      	cmp	r1, r2
 800a820:	d1f9      	bne.n	800a816 <memcpy+0xe>
 800a822:	bd10      	pop	{r4, pc}

0800a824 <memset>:
 800a824:	4402      	add	r2, r0
 800a826:	4603      	mov	r3, r0
 800a828:	4293      	cmp	r3, r2
 800a82a:	d100      	bne.n	800a82e <memset+0xa>
 800a82c:	4770      	bx	lr
 800a82e:	f803 1b01 	strb.w	r1, [r3], #1
 800a832:	e7f9      	b.n	800a828 <memset+0x4>

0800a834 <cleanup_glue>:
 800a834:	b538      	push	{r3, r4, r5, lr}
 800a836:	460c      	mov	r4, r1
 800a838:	6809      	ldr	r1, [r1, #0]
 800a83a:	4605      	mov	r5, r0
 800a83c:	b109      	cbz	r1, 800a842 <cleanup_glue+0xe>
 800a83e:	f7ff fff9 	bl	800a834 <cleanup_glue>
 800a842:	4621      	mov	r1, r4
 800a844:	4628      	mov	r0, r5
 800a846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a84a:	f000 b869 	b.w	800a920 <_free_r>
	...

0800a850 <_reclaim_reent>:
 800a850:	4b2c      	ldr	r3, [pc, #176]	; (800a904 <_reclaim_reent+0xb4>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4283      	cmp	r3, r0
 800a856:	b570      	push	{r4, r5, r6, lr}
 800a858:	4604      	mov	r4, r0
 800a85a:	d051      	beq.n	800a900 <_reclaim_reent+0xb0>
 800a85c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a85e:	b143      	cbz	r3, 800a872 <_reclaim_reent+0x22>
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d14a      	bne.n	800a8fc <_reclaim_reent+0xac>
 800a866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a868:	6819      	ldr	r1, [r3, #0]
 800a86a:	b111      	cbz	r1, 800a872 <_reclaim_reent+0x22>
 800a86c:	4620      	mov	r0, r4
 800a86e:	f000 f857 	bl	800a920 <_free_r>
 800a872:	6961      	ldr	r1, [r4, #20]
 800a874:	b111      	cbz	r1, 800a87c <_reclaim_reent+0x2c>
 800a876:	4620      	mov	r0, r4
 800a878:	f000 f852 	bl	800a920 <_free_r>
 800a87c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a87e:	b111      	cbz	r1, 800a886 <_reclaim_reent+0x36>
 800a880:	4620      	mov	r0, r4
 800a882:	f000 f84d 	bl	800a920 <_free_r>
 800a886:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a888:	b111      	cbz	r1, 800a890 <_reclaim_reent+0x40>
 800a88a:	4620      	mov	r0, r4
 800a88c:	f000 f848 	bl	800a920 <_free_r>
 800a890:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a892:	b111      	cbz	r1, 800a89a <_reclaim_reent+0x4a>
 800a894:	4620      	mov	r0, r4
 800a896:	f000 f843 	bl	800a920 <_free_r>
 800a89a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a89c:	b111      	cbz	r1, 800a8a4 <_reclaim_reent+0x54>
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f000 f83e 	bl	800a920 <_free_r>
 800a8a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a8a6:	b111      	cbz	r1, 800a8ae <_reclaim_reent+0x5e>
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 f839 	bl	800a920 <_free_r>
 800a8ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a8b0:	b111      	cbz	r1, 800a8b8 <_reclaim_reent+0x68>
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 f834 	bl	800a920 <_free_r>
 800a8b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8ba:	b111      	cbz	r1, 800a8c2 <_reclaim_reent+0x72>
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f000 f82f 	bl	800a920 <_free_r>
 800a8c2:	69a3      	ldr	r3, [r4, #24]
 800a8c4:	b1e3      	cbz	r3, 800a900 <_reclaim_reent+0xb0>
 800a8c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	4798      	blx	r3
 800a8cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a8ce:	b1b9      	cbz	r1, 800a900 <_reclaim_reent+0xb0>
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8d6:	f7ff bfad 	b.w	800a834 <cleanup_glue>
 800a8da:	5949      	ldr	r1, [r1, r5]
 800a8dc:	b941      	cbnz	r1, 800a8f0 <_reclaim_reent+0xa0>
 800a8de:	3504      	adds	r5, #4
 800a8e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8e2:	2d80      	cmp	r5, #128	; 0x80
 800a8e4:	68d9      	ldr	r1, [r3, #12]
 800a8e6:	d1f8      	bne.n	800a8da <_reclaim_reent+0x8a>
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 f819 	bl	800a920 <_free_r>
 800a8ee:	e7ba      	b.n	800a866 <_reclaim_reent+0x16>
 800a8f0:	680e      	ldr	r6, [r1, #0]
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f000 f814 	bl	800a920 <_free_r>
 800a8f8:	4631      	mov	r1, r6
 800a8fa:	e7ef      	b.n	800a8dc <_reclaim_reent+0x8c>
 800a8fc:	2500      	movs	r5, #0
 800a8fe:	e7ef      	b.n	800a8e0 <_reclaim_reent+0x90>
 800a900:	bd70      	pop	{r4, r5, r6, pc}
 800a902:	bf00      	nop
 800a904:	20000100 	.word	0x20000100

0800a908 <__malloc_lock>:
 800a908:	4801      	ldr	r0, [pc, #4]	; (800a910 <__malloc_lock+0x8>)
 800a90a:	f7ff bf7b 	b.w	800a804 <__retarget_lock_acquire_recursive>
 800a90e:	bf00      	nop
 800a910:	2000ad24 	.word	0x2000ad24

0800a914 <__malloc_unlock>:
 800a914:	4801      	ldr	r0, [pc, #4]	; (800a91c <__malloc_unlock+0x8>)
 800a916:	f7ff bf76 	b.w	800a806 <__retarget_lock_release_recursive>
 800a91a:	bf00      	nop
 800a91c:	2000ad24 	.word	0x2000ad24

0800a920 <_free_r>:
 800a920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a922:	2900      	cmp	r1, #0
 800a924:	d044      	beq.n	800a9b0 <_free_r+0x90>
 800a926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a92a:	9001      	str	r0, [sp, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f1a1 0404 	sub.w	r4, r1, #4
 800a932:	bfb8      	it	lt
 800a934:	18e4      	addlt	r4, r4, r3
 800a936:	f7ff ffe7 	bl	800a908 <__malloc_lock>
 800a93a:	4a1e      	ldr	r2, [pc, #120]	; (800a9b4 <_free_r+0x94>)
 800a93c:	9801      	ldr	r0, [sp, #4]
 800a93e:	6813      	ldr	r3, [r2, #0]
 800a940:	b933      	cbnz	r3, 800a950 <_free_r+0x30>
 800a942:	6063      	str	r3, [r4, #4]
 800a944:	6014      	str	r4, [r2, #0]
 800a946:	b003      	add	sp, #12
 800a948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a94c:	f7ff bfe2 	b.w	800a914 <__malloc_unlock>
 800a950:	42a3      	cmp	r3, r4
 800a952:	d908      	bls.n	800a966 <_free_r+0x46>
 800a954:	6825      	ldr	r5, [r4, #0]
 800a956:	1961      	adds	r1, r4, r5
 800a958:	428b      	cmp	r3, r1
 800a95a:	bf01      	itttt	eq
 800a95c:	6819      	ldreq	r1, [r3, #0]
 800a95e:	685b      	ldreq	r3, [r3, #4]
 800a960:	1949      	addeq	r1, r1, r5
 800a962:	6021      	streq	r1, [r4, #0]
 800a964:	e7ed      	b.n	800a942 <_free_r+0x22>
 800a966:	461a      	mov	r2, r3
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	b10b      	cbz	r3, 800a970 <_free_r+0x50>
 800a96c:	42a3      	cmp	r3, r4
 800a96e:	d9fa      	bls.n	800a966 <_free_r+0x46>
 800a970:	6811      	ldr	r1, [r2, #0]
 800a972:	1855      	adds	r5, r2, r1
 800a974:	42a5      	cmp	r5, r4
 800a976:	d10b      	bne.n	800a990 <_free_r+0x70>
 800a978:	6824      	ldr	r4, [r4, #0]
 800a97a:	4421      	add	r1, r4
 800a97c:	1854      	adds	r4, r2, r1
 800a97e:	42a3      	cmp	r3, r4
 800a980:	6011      	str	r1, [r2, #0]
 800a982:	d1e0      	bne.n	800a946 <_free_r+0x26>
 800a984:	681c      	ldr	r4, [r3, #0]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	6053      	str	r3, [r2, #4]
 800a98a:	4421      	add	r1, r4
 800a98c:	6011      	str	r1, [r2, #0]
 800a98e:	e7da      	b.n	800a946 <_free_r+0x26>
 800a990:	d902      	bls.n	800a998 <_free_r+0x78>
 800a992:	230c      	movs	r3, #12
 800a994:	6003      	str	r3, [r0, #0]
 800a996:	e7d6      	b.n	800a946 <_free_r+0x26>
 800a998:	6825      	ldr	r5, [r4, #0]
 800a99a:	1961      	adds	r1, r4, r5
 800a99c:	428b      	cmp	r3, r1
 800a99e:	bf04      	itt	eq
 800a9a0:	6819      	ldreq	r1, [r3, #0]
 800a9a2:	685b      	ldreq	r3, [r3, #4]
 800a9a4:	6063      	str	r3, [r4, #4]
 800a9a6:	bf04      	itt	eq
 800a9a8:	1949      	addeq	r1, r1, r5
 800a9aa:	6021      	streq	r1, [r4, #0]
 800a9ac:	6054      	str	r4, [r2, #4]
 800a9ae:	e7ca      	b.n	800a946 <_free_r+0x26>
 800a9b0:	b003      	add	sp, #12
 800a9b2:	bd30      	pop	{r4, r5, pc}
 800a9b4:	2000ad28 	.word	0x2000ad28

0800a9b8 <_init>:
 800a9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ba:	bf00      	nop
 800a9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9be:	bc08      	pop	{r3}
 800a9c0:	469e      	mov	lr, r3
 800a9c2:	4770      	bx	lr

0800a9c4 <_fini>:
 800a9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9c6:	bf00      	nop
 800a9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9ca:	bc08      	pop	{r3}
 800a9cc:	469e      	mov	lr, r3
 800a9ce:	4770      	bx	lr
