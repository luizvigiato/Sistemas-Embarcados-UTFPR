
testertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001091c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001250  08010abc  08010abc  00020abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011d0c  08011d0c  00030170  2**0
                  CONTENTS
  4 .ARM          00000008  08011d0c  08011d0c  00021d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011d14  08011d14  00030170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011d14  08011d14  00021d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011d18  08011d18  00021d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08011d1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b9dc  20000170  08011e8c  00030170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000bb4c  08011e8c  0003bb4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025672  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055e6  00000000  00000000  00055812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce0  00000000  00000000  0005adf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af8  00000000  00000000  0005cad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000096a3  00000000  00000000  0005e5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021e84  00000000  00000000  00067c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9542  00000000  00000000  00089af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00133039  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fd0  00000000  00000000  001330fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002316  00000000  00000000  0013b0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000170 	.word	0x20000170
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010aa4 	.word	0x08010aa4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000174 	.word	0x20000174
 80001dc:	08010aa4 	.word	0x08010aa4

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <strlen>:
 80002b4:	4603      	mov	r3, r0
 80002b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d1fb      	bne.n	80002b6 <strlen+0x2>
 80002be:	1a18      	subs	r0, r3, r0
 80002c0:	3801      	subs	r0, #1
 80002c2:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468e      	mov	lr, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14d      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4694      	mov	ip, r2
 8000bee:	d969      	bls.n	8000cc4 <__udivmoddi4+0xe8>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b152      	cbz	r2, 8000c0c <__udivmoddi4+0x30>
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	f1c2 0120 	rsb	r1, r2, #32
 8000bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000c02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c06:	ea41 0e03 	orr.w	lr, r1, r3
 8000c0a:	4094      	lsls	r4, r2
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	0c21      	lsrs	r1, r4, #16
 8000c12:	fbbe f6f8 	udiv	r6, lr, r8
 8000c16:	fa1f f78c 	uxth.w	r7, ip
 8000c1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c22:	fb06 f107 	mul.w	r1, r6, r7
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c32:	f080 811f 	bcs.w	8000e74 <__udivmoddi4+0x298>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 811c 	bls.w	8000e74 <__udivmoddi4+0x298>
 8000c3c:	3e02      	subs	r6, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x92>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c60:	f080 810a 	bcs.w	8000e78 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8107 	bls.w	8000e78 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c72:	1be4      	subs	r4, r4, r7
 8000c74:	2600      	movs	r6, #0
 8000c76:	b11d      	cbz	r5, 8000c80 <__udivmoddi4+0xa4>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xc2>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80ef 	beq.w	8000e6e <__udivmoddi4+0x292>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x160>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd4>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80f9 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	469e      	mov	lr, r3
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa4>
 8000cbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xec>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 8092 	bne.w	8000df6 <__udivmoddi4+0x21a>
 8000cd2:	eba1 010c 	sub.w	r1, r1, ip
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb0e f003 	mul.w	r0, lr, r3
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x12c>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x12a>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2c0>
 8000d06:	4643      	mov	r3, r8
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d10:	fb07 1110 	mls	r1, r7, r0, r1
 8000d14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x156>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x154>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2ca>
 8000d30:	4608      	mov	r0, r1
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3a:	e79c      	b.n	8000c76 <__udivmoddi4+0x9a>
 8000d3c:	f1c6 0720 	rsb	r7, r6, #32
 8000d40:	40b3      	lsls	r3, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	431c      	orrs	r4, r3
 8000d54:	40f9      	lsrs	r1, r7
 8000d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d62:	0c20      	lsrs	r0, r4, #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	fb08 f00e 	mul.w	r0, r8, lr
 8000d74:	4288      	cmp	r0, r1
 8000d76:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b8>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2bc>
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2bc>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000da0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	458e      	cmp	lr, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1e2>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2b4>
 8000db6:	458e      	cmp	lr, r1
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2b4>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc6:	eba1 010e 	sub.w	r1, r1, lr
 8000dca:	42a1      	cmp	r1, r4
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46a6      	mov	lr, r4
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x2a4>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x2a0>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x212>
 8000dd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dda:	eb61 010e 	sbc.w	r1, r1, lr
 8000dde:	fa01 f707 	lsl.w	r7, r1, r7
 8000de2:	fa22 f306 	lsr.w	r3, r2, r6
 8000de6:	40f1      	lsrs	r1, r6
 8000de8:	431f      	orrs	r7, r3
 8000dea:	e9c5 7100 	strd	r7, r1, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	40d8      	lsrs	r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa21 f303 	lsr.w	r3, r1, r3
 8000e04:	4091      	lsls	r1, r2
 8000e06:	4301      	orrs	r1, r0
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e14:	fb07 3610 	mls	r6, r7, r0, r3
 8000e18:	0c0b      	lsrs	r3, r1, #16
 8000e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e22:	429e      	cmp	r6, r3
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x260>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b8>
 8000e34:	429e      	cmp	r6, r3
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b8>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1b9b      	subs	r3, r3, r6
 8000e3e:	b289      	uxth	r1, r1
 8000e40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e44:	fb07 3316 	mls	r3, r7, r6, r3
 8000e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x28a>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e62:	3e02      	subs	r6, #2
 8000e64:	4461      	add	r1, ip
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0x104>
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e705      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e3      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6f8      	b.n	8000c6e <__udivmoddi4+0x92>
 8000e7c:	454b      	cmp	r3, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x28a>
 8000e90:	4620      	mov	r0, r4
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1e2>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b8>
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x12c>
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	e709      	b.n	8000cba <__udivmoddi4+0xde>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x156>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10a      	bne.n	8000ed8 <FreeRTOS_CLIRegisterCommand+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec6:	f383 8811 	msr	BASEPRI, r3
 8000eca:	f3bf 8f6f 	isb	sy
 8000ece:	f3bf 8f4f 	dsb	sy
 8000ed2:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ed4:	bf00      	nop
 8000ed6:	e7fe      	b.n	8000ed6 <FreeRTOS_CLIRegisterCommand+0x26>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8000ed8:	2008      	movs	r0, #8
 8000eda:	f00c fe3d 	bl	800db58 <pvPortMalloc>
 8000ede:	6138      	str	r0, [r7, #16]
	configASSERT( pxNewListItem );
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10a      	bne.n	8000efc <FreeRTOS_CLIRegisterCommand+0x4c>
	__asm volatile
 8000ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eea:	f383 8811 	msr	BASEPRI, r3
 8000eee:	f3bf 8f6f 	isb	sy
 8000ef2:	f3bf 8f4f 	dsb	sy
 8000ef6:	60bb      	str	r3, [r7, #8]
}
 8000ef8:	bf00      	nop
 8000efa:	e7fe      	b.n	8000efa <FreeRTOS_CLIRegisterCommand+0x4a>

	if( pxNewListItem != NULL )
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d012      	beq.n	8000f28 <FreeRTOS_CLIRegisterCommand+0x78>
	{
		taskENTER_CRITICAL();
 8000f02:	f00c fd07 	bl	800d914 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <FreeRTOS_CLIRegisterCommand+0x84>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 8000f1a:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <FreeRTOS_CLIRegisterCommand+0x84>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 8000f20:	f00c fd28 	bl	800d974 <vPortExitCritical>

		xReturn = pdPASS;
 8000f24:	2301      	movs	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8000f28:	697b      	ldr	r3, [r7, #20]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008

08000f38 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 8000f48:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d141      	bne.n	8000fd4 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000f50:	4b38      	ldr	r3, [pc, #224]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f52:	4a39      	ldr	r2, [pc, #228]	; (8001038 <FreeRTOS_CLIProcessCommand+0x100>)
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	e037      	b.n	8000fc8 <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8000f58:	4b36      	ldr	r3, [pc, #216]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8000f62:	69b8      	ldr	r0, [r7, #24]
 8000f64:	f7ff f9a6 	bl	80002b4 <strlen>
 8000f68:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	69b9      	ldr	r1, [r7, #24]
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f00e ffaa 	bl	800fec8 <strncmp>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d121      	bne.n	8000fbe <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b20      	cmp	r3, #32
 8000f84:	d005      	beq.n	8000f92 <FreeRTOS_CLIProcessCommand+0x5a>
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d115      	bne.n	8000fbe <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8000f92:	4b28      	ldr	r3, [pc, #160]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db18      	blt.n	8000fd2 <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f000 f8d7 	bl	8001154 <prvGetNumberOfParameters>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d00c      	beq.n	8000fd2 <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8000fbc:	e009      	b.n	8000fd2 <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1c3      	bne.n	8000f58 <FreeRTOS_CLIProcessCommand+0x20>
 8000fd0:	e000      	b.n	8000fd4 <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 8000fd2:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00b      	beq.n	8000ff4 <FreeRTOS_CLIProcessCommand+0xbc>
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d108      	bne.n	8000ff4 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4915      	ldr	r1, [pc, #84]	; (800103c <FreeRTOS_CLIProcessCommand+0x104>)
 8000fe6:	68b8      	ldr	r0, [r7, #8]
 8000fe8:	f00e ff82 	bl	800fef0 <strncpy>
		pxCommand = NULL;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	e01a      	b.n	800102a <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00f      	beq.n	800101c <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	4798      	blx	r3
 800100c:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10a      	bne.n	800102a <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e006      	b.n	800102a <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <FreeRTOS_CLIProcessCommand+0x108>)
 8001020:	68b8      	ldr	r0, [r7, #8]
 8001022:	f00e ff65 	bl	800fef0 <strncpy>
		xReturn = pdFALSE;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 800102a:	69fb      	ldr	r3, [r7, #28]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000018c 	.word	0x2000018c
 8001038:	20000000 	.word	0x20000000
 800103c:	08010af4 	.word	0x08010af4
 8001040:	08010b4c 	.word	0x08010b4c

08001044 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 800105e:	e03b      	b.n	80010d8 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3301      	adds	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <FreeRTOS_CLIGetParameter+0x3a>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b20      	cmp	r3, #32
 8001074:	d1f4      	bne.n	8001060 <FreeRTOS_CLIGetParameter+0x1c>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001076:	e002      	b.n	800107e <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3301      	adds	r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <FreeRTOS_CLIGetParameter+0x4a>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b20      	cmp	r3, #32
 800108c:	d0f4      	beq.n	8001078 <FreeRTOS_CLIGetParameter+0x34>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d025      	beq.n	80010e2 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d119      	bne.n	80010d8 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80010a8:	e007      	b.n	80010ba <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <FreeRTOS_CLIGetParameter+0x86>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b20      	cmp	r3, #32
 80010c8:	d1ef      	bne.n	80010aa <FreeRTOS_CLIGetParameter+0x66>
				}

				if( *pxParameterStringLength == 0 )
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
				}

				break;
 80010d6:	e006      	b.n	80010e6 <FreeRTOS_CLIGetParameter+0xa2>
	while( uxParametersFound < uxWantedParameter )
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3c2      	bcc.n	8001066 <FreeRTOS_CLIGetParameter+0x22>
 80010e0:	e002      	b.n	80010e8 <FreeRTOS_CLIGetParameter+0xa4>
			}
		}
		else
		{
			break;
 80010e2:	bf00      	nop
 80010e4:	e000      	b.n	80010e8 <FreeRTOS_CLIGetParameter+0xa4>
				break;
 80010e6:	bf00      	nop
		}
	}

	return pcReturn;
 80010e8:	693b      	ldr	r3, [r7, #16]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <prvHelpCommand+0x54>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <prvHelpCommand+0x54>)
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <prvHelpCommand+0x58>)
 8001110:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <prvHelpCommand+0x54>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	4619      	mov	r1, r3
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f00e fee6 	bl	800fef0 <strncpy>
	pxCommand = pxCommand->pxNext;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <prvHelpCommand+0x54>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <prvHelpCommand+0x54>)
 800112c:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <prvHelpCommand+0x54>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e001      	b.n	8001140 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001140:	697b      	ldr	r3, [r7, #20]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000190 	.word	0x20000190
 8001150:	20000000 	.word	0x20000000

08001154 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8001164:	e014      	b.n	8001190 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b20      	cmp	r3, #32
 800116c:	d10b      	bne.n	8001186 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d00a      	beq.n	800118a <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8001174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	3301      	adds	r3, #1
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8001180:	2301      	movs	r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	e001      	b.n	800118a <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3301      	adds	r3, #1
 800118e:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e6      	bne.n	8001166 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d105      	bne.n	80011aa <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	3b01      	subs	r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <task_led>:
float mod[256];
float fase;

TaskHandle_t task_handle_RGB = NULL;

void task_led(void *param){
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *)param;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(led->port,led->pin);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	889b      	ldrh	r3, [r3, #4]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4610      	mov	r0, r2
 80011d2:	f002 fbae 	bl	8003932 <HAL_GPIO_TogglePin>
		vTaskDelay(led->timeout);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	4618      	mov	r0, r3
 80011dc:	f00a faec 	bl	800b7b8 <vTaskDelay>
		HAL_GPIO_TogglePin(led->port,led->pin);
 80011e0:	e7f1      	b.n	80011c6 <task_led+0xc>
 80011e2:	0000      	movs	r0, r0
 80011e4:	0000      	movs	r0, r0
	...

080011e8 <task_adc>:
	}
}

void task_adc(void *param){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuffer, 256);
 80011f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f4:	4940      	ldr	r1, [pc, #256]	; (80012f8 <task_adc+0x110>)
 80011f6:	4841      	ldr	r0, [pc, #260]	; (80012fc <task_adc+0x114>)
 80011f8:	f001 f9ce 	bl	8002598 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 80011fc:	4840      	ldr	r0, [pc, #256]	; (8001300 <task_adc+0x118>)
 80011fe:	f004 faaf 	bl	8005760 <HAL_TIM_Base_Start>
	while(1){
		int k = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 256; i++){
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	e02a      	b.n	8001262 <task_adc+0x7a>
			ReIm[k] = (float) adcBuffer[i] * 0.0007326007;
 800120c:	4a3a      	ldr	r2, [pc, #232]	; (80012f8 <task_adc+0x110>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff fa0a 	bl	8000638 <__aeabi_f2d>
 8001224:	a330      	add	r3, pc, #192	; (adr r3, 80012e8 <task_adc+0x100>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff fa5d 	bl	80006e8 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fc69 	bl	8000b0c <__aeabi_d2f>
 800123a:	4602      	mov	r2, r0
 800123c:	4931      	ldr	r1, [pc, #196]	; (8001304 <task_adc+0x11c>)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	601a      	str	r2, [r3, #0]
			ReIm[k+1] = 0.0;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	4a2e      	ldr	r2, [pc, #184]	; (8001304 <task_adc+0x11c>)
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
			k += 2;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3302      	adds	r3, #2
 800125a:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 256; i++){
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	3301      	adds	r3, #1
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	2bff      	cmp	r3, #255	; 0xff
 8001266:	ddd1      	ble.n	800120c <task_adc+0x24>
		}

		arm_cfft_f32(&arm_cfft_sR_f32_len256,ReIm,0,1);
 8001268:	2301      	movs	r3, #1
 800126a:	2200      	movs	r2, #0
 800126c:	4925      	ldr	r1, [pc, #148]	; (8001304 <task_adc+0x11c>)
 800126e:	4826      	ldr	r0, [pc, #152]	; (8001308 <task_adc+0x120>)
 8001270:	f00e f834 	bl	800f2dc <arm_cfft_f32>
		arm_cmplx_mag_f32(ReIm,mod,256);
 8001274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001278:	4924      	ldr	r1, [pc, #144]	; (800130c <task_adc+0x124>)
 800127a:	4822      	ldr	r0, [pc, #136]	; (8001304 <task_adc+0x11c>)
 800127c:	f00e f8a8 	bl	800f3d0 <arm_cmplx_mag_f32>
		arm_scale_f32(mod, 0.0078125, mod, 128); /* vertor, por quem quero multiplicar, vetor final, quantos pontos */
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	4922      	ldr	r1, [pc, #136]	; (800130c <task_adc+0x124>)
 8001284:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001310 <task_adc+0x128>
 8001288:	4820      	ldr	r0, [pc, #128]	; (800130c <task_adc+0x124>)
 800128a:	f00e f989 	bl	800f5a0 <arm_scale_f32>

		volatile float fund_phase = atan2f(ReIm[3],ReIm[2])*180/M_PI;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <task_adc+0x11c>)
 8001290:	edd3 7a03 	vldr	s15, [r3, #12]
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <task_adc+0x11c>)
 8001296:	ed93 7a02 	vldr	s14, [r3, #8]
 800129a:	eef0 0a47 	vmov.f32	s1, s14
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	f00f fa5e 	bl	8010762 <atan2f>
 80012a6:	eef0 7a40 	vmov.f32	s15, s0
 80012aa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001314 <task_adc+0x12c>
 80012ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b2:	ee17 0a90 	vmov	r0, s15
 80012b6:	f7ff f9bf 	bl	8000638 <__aeabi_f2d>
 80012ba:	a30d      	add	r3, pc, #52	; (adr r3, 80012f0 <task_adc+0x108>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff fb3c 	bl	800093c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fc1e 	bl	8000b0c <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	60fb      	str	r3, [r7, #12]
		fase = fund_phase;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4a10      	ldr	r2, [pc, #64]	; (8001318 <task_adc+0x130>)
 80012d8:	6013      	str	r3, [r2, #0]
		vTaskDelay(5);
 80012da:	2005      	movs	r0, #5
 80012dc:	f00a fa6c 	bl	800b7b8 <vTaskDelay>
	while(1){
 80012e0:	e78f      	b.n	8001202 <task_adc+0x1a>
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	06155aeb 	.word	0x06155aeb
 80012ec:	3f480180 	.word	0x3f480180
 80012f0:	54442d18 	.word	0x54442d18
 80012f4:	400921fb 	.word	0x400921fb
 80012f8:	200002e0 	.word	0x200002e0
 80012fc:	20000194 	.word	0x20000194
 8001300:	2000023c 	.word	0x2000023c
 8001304:	200004e0 	.word	0x200004e0
 8001308:	08010fc0 	.word	0x08010fc0
 800130c:	20000ce0 	.word	0x20000ce0
 8001310:	3c000000 	.word	0x3c000000
 8001314:	43340000 	.word	0x43340000
 8001318:	200010e0 	.word	0x200010e0

0800131c <task_RGB>:
	}
}

void task_RGB(void *param){
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	uint8_t r,g,b;
	uint8_t ts;
	r = g = b = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	737b      	strb	r3, [r7, #13]
 8001328:	7b7b      	ldrb	r3, [r7, #13]
 800132a:	73bb      	strb	r3, [r7, #14]
 800132c:	7bbb      	ldrb	r3, [r7, #14]
 800132e:	73fb      	strb	r3, [r7, #15]
	ts = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	733b      	strb	r3, [r7, #12]
	vTaskSuspend(NULL);
 8001334:	2000      	movs	r0, #0
 8001336:	f00a fad9 	bl	800b8ec <vTaskSuspend>
	while(1){
		//TIM3->CCR1 =
		if(ts == 0){//Crescendo RGB colorido
 800133a:	7b3b      	ldrb	r3, [r7, #12]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d129      	bne.n	8001394 <task_RGB+0x78>
			if(r < MAX_RGB){
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	2bfd      	cmp	r3, #253	; 0xfd
 8001344:	d809      	bhi.n	800135a <task_RGB+0x3e>
				TIM3->CCR1 = r * 257;
 8001346:	7bfa      	ldrb	r2, [r7, #15]
 8001348:	4613      	mov	r3, r2
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	441a      	add	r2, r3
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <task_RGB+0xd4>)
 8001350:	635a      	str	r2, [r3, #52]	; 0x34
				r++;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	3301      	adds	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e045      	b.n	80013e6 <task_RGB+0xca>
			} else if(g < MAX_RGB){
 800135a:	7bbb      	ldrb	r3, [r7, #14]
 800135c:	2bfd      	cmp	r3, #253	; 0xfd
 800135e:	d809      	bhi.n	8001374 <task_RGB+0x58>
				TIM3->CCR2 = g * 257;
 8001360:	7bba      	ldrb	r2, [r7, #14]
 8001362:	4613      	mov	r3, r2
 8001364:	021b      	lsls	r3, r3, #8
 8001366:	441a      	add	r2, r3
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <task_RGB+0xd4>)
 800136a:	639a      	str	r2, [r3, #56]	; 0x38
				g++;
 800136c:	7bbb      	ldrb	r3, [r7, #14]
 800136e:	3301      	adds	r3, #1
 8001370:	73bb      	strb	r3, [r7, #14]
 8001372:	e038      	b.n	80013e6 <task_RGB+0xca>
			} else if(b < MAX_RGB){
 8001374:	7b7b      	ldrb	r3, [r7, #13]
 8001376:	2bfd      	cmp	r3, #253	; 0xfd
 8001378:	d809      	bhi.n	800138e <task_RGB+0x72>
				TIM3->CCR3 = b * 257;
 800137a:	7b7a      	ldrb	r2, [r7, #13]
 800137c:	4613      	mov	r3, r2
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	441a      	add	r2, r3
 8001382:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <task_RGB+0xd4>)
 8001384:	63da      	str	r2, [r3, #60]	; 0x3c
				b++;
 8001386:	7b7b      	ldrb	r3, [r7, #13]
 8001388:	3301      	adds	r3, #1
 800138a:	737b      	strb	r3, [r7, #13]
 800138c:	e02b      	b.n	80013e6 <task_RGB+0xca>
			}else{
				ts = 1;
 800138e:	2301      	movs	r3, #1
 8001390:	733b      	strb	r3, [r7, #12]
 8001392:	e028      	b.n	80013e6 <task_RGB+0xca>
			}
		} else {
			if(r > 1){
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d909      	bls.n	80013ae <task_RGB+0x92>
				TIM3->CCR1 = r * 257;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	4613      	mov	r3, r2
 800139e:	021b      	lsls	r3, r3, #8
 80013a0:	441a      	add	r2, r3
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <task_RGB+0xd4>)
 80013a4:	635a      	str	r2, [r3, #52]	; 0x34
				r--;
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e01b      	b.n	80013e6 <task_RGB+0xca>
			} else if( g > 1){
 80013ae:	7bbb      	ldrb	r3, [r7, #14]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d909      	bls.n	80013c8 <task_RGB+0xac>
				TIM3->CCR2 = g * 257;
 80013b4:	7bba      	ldrb	r2, [r7, #14]
 80013b6:	4613      	mov	r3, r2
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	441a      	add	r2, r3
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <task_RGB+0xd4>)
 80013be:	639a      	str	r2, [r3, #56]	; 0x38
				g--;
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	73bb      	strb	r3, [r7, #14]
 80013c6:	e00e      	b.n	80013e6 <task_RGB+0xca>
			} else if( b > 0){
 80013c8:	7b7b      	ldrb	r3, [r7, #13]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <task_RGB+0xc6>
				TIM3->CCR3 = b * 257;
 80013ce:	7b7a      	ldrb	r2, [r7, #13]
 80013d0:	4613      	mov	r3, r2
 80013d2:	021b      	lsls	r3, r3, #8
 80013d4:	441a      	add	r2, r3
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <task_RGB+0xd4>)
 80013d8:	63da      	str	r2, [r3, #60]	; 0x3c
				b--;
 80013da:	7b7b      	ldrb	r3, [r7, #13]
 80013dc:	3b01      	subs	r3, #1
 80013de:	737b      	strb	r3, [r7, #13]
 80013e0:	e001      	b.n	80013e6 <task_RGB+0xca>
			} else {
				ts = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	733b      	strb	r3, [r7, #12]
			}
		}

		vTaskDelay(1);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f00a f9e6 	bl	800b7b8 <vTaskDelay>
		if(ts == 0){//Crescendo RGB colorido
 80013ec:	e7a5      	b.n	800133a <task_RGB+0x1e>
 80013ee:	bf00      	nop
 80013f0:	40000400 	.word	0x40000400

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fa:	f000 fff3 	bl	80023e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fe:	f000 f877 	bl	80014f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001402:	f000 fa33 	bl	800186c <MX_GPIO_Init>
  MX_DMA_Init();
 8001406:	f000 fa11 	bl	800182c <MX_DMA_Init>
  MX_ADC1_Init();
 800140a:	f000 f8dd 	bl	80015c8 <MX_ADC1_Init>
  MX_TIM2_Init();
 800140e:	f000 f92d 	bl	800166c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001412:	f000 f977 	bl	8001704 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001416:	2100      	movs	r1, #0
 8001418:	4827      	ldr	r0, [pc, #156]	; (80014b8 <main+0xc4>)
 800141a:	f004 fa7b 	bl	8005914 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800141e:	2104      	movs	r1, #4
 8001420:	4825      	ldr	r0, [pc, #148]	; (80014b8 <main+0xc4>)
 8001422:	f004 fa77 	bl	8005914 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001426:	2108      	movs	r1, #8
 8001428:	4823      	ldr	r0, [pc, #140]	; (80014b8 <main+0xc4>)
 800142a:	f004 fa73 	bl	8005914 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800142e:	f008 fc2f 	bl	8009c90 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001432:	4a22      	ldr	r2, [pc, #136]	; (80014bc <main+0xc8>)
 8001434:	2100      	movs	r1, #0
 8001436:	4822      	ldr	r0, [pc, #136]	; (80014c0 <main+0xcc>)
 8001438:	f008 fc74 	bl	8009d24 <osThreadNew>
 800143c:	4603      	mov	r3, r0
 800143e:	4a21      	ldr	r2, [pc, #132]	; (80014c4 <main+0xd0>)
 8001440:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  green_led.timeout = 500;
 8001442:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <main+0xd4>)
 8001444:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001448:	609a      	str	r2, [r3, #8]
  green_led.port = LED_GPIO_Port;
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <main+0xd4>)
 800144c:	4a1f      	ldr	r2, [pc, #124]	; (80014cc <main+0xd8>)
 800144e:	601a      	str	r2, [r3, #0]
  green_led.pin = LED_Pin;
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <main+0xd4>)
 8001452:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001456:	809a      	strh	r2, [r3, #4]
  rgb.red = 200;
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <main+0xdc>)
 800145a:	22c8      	movs	r2, #200	; 0xc8
 800145c:	705a      	strb	r2, [r3, #1]
  rgb.green = 200;
 800145e:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <main+0xdc>)
 8001460:	22c8      	movs	r2, #200	; 0xc8
 8001462:	709a      	strb	r2, [r3, #2]
  rgb.blue = 200;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <main+0xdc>)
 8001466:	22c8      	movs	r2, #200	; 0xc8
 8001468:	70da      	strb	r2, [r3, #3]
  rgb.brilho = 200;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <main+0xdc>)
 800146c:	22c8      	movs	r2, #200	; 0xc8
 800146e:	701a      	strb	r2, [r3, #0]
  xTaskCreate(task_led,"Tarefa Led",256, &green_led, 1, NULL);
 8001470:	2300      	movs	r3, #0
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	2301      	movs	r3, #1
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <main+0xd4>)
 800147a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800147e:	4915      	ldr	r1, [pc, #84]	; (80014d4 <main+0xe0>)
 8001480:	4815      	ldr	r0, [pc, #84]	; (80014d8 <main+0xe4>)
 8001482:	f00a f83e 	bl	800b502 <xTaskCreate>
  xTaskCreate(task_adc,"Tarefa ADC",256, NULL, 5, NULL);
 8001486:	2300      	movs	r3, #0
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	2305      	movs	r3, #5
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001494:	4911      	ldr	r1, [pc, #68]	; (80014dc <main+0xe8>)
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <main+0xec>)
 8001498:	f00a f833 	bl	800b502 <xTaskCreate>
  xTaskCreate(task_RGB,"Tarefa RGB",256, NULL, 2, &task_handle_RGB);
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <main+0xf0>)
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	2302      	movs	r3, #2
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2300      	movs	r3, #0
 80014a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014aa:	490f      	ldr	r1, [pc, #60]	; (80014e8 <main+0xf4>)
 80014ac:	480f      	ldr	r0, [pc, #60]	; (80014ec <main+0xf8>)
 80014ae:	f00a f828 	bl	800b502 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014b2:	f008 fc11 	bl	8009cd8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <main+0xc2>
 80014b8:	20000284 	.word	0x20000284
 80014bc:	08010f44 	.word	0x08010f44
 80014c0:	08001fd5 	.word	0x08001fd5
 80014c4:	200002cc 	.word	0x200002cc
 80014c8:	200002d0 	.word	0x200002d0
 80014cc:	40020800 	.word	0x40020800
 80014d0:	200002dc 	.word	0x200002dc
 80014d4:	08010ba8 	.word	0x08010ba8
 80014d8:	080011bb 	.word	0x080011bb
 80014dc:	08010bb4 	.word	0x08010bb4
 80014e0:	080011e9 	.word	0x080011e9
 80014e4:	200010e4 	.word	0x200010e4
 80014e8:	08010bc0 	.word	0x08010bc0
 80014ec:	0800131d 	.word	0x0800131d

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	; 0x50
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 0320 	add.w	r3, r7, #32
 80014fa:	2230      	movs	r2, #48	; 0x30
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f00e fba4 	bl	800fc4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <SystemClock_Config+0xd0>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a28      	ldr	r2, [pc, #160]	; (80015c0 <SystemClock_Config+0xd0>)
 800151e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001522:	6413      	str	r3, [r2, #64]	; 0x40
 8001524:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <SystemClock_Config+0xd0>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001530:	2300      	movs	r3, #0
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	4b23      	ldr	r3, [pc, #140]	; (80015c4 <SystemClock_Config+0xd4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800153c:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <SystemClock_Config+0xd4>)
 800153e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <SystemClock_Config+0xd4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001550:	2301      	movs	r3, #1
 8001552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155a:	2302      	movs	r3, #2
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800155e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001564:	2319      	movs	r3, #25
 8001566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001568:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800156c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800156e:	2304      	movs	r3, #4
 8001570:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001572:	2307      	movs	r3, #7
 8001574:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001576:	f107 0320 	add.w	r3, r7, #32
 800157a:	4618      	mov	r0, r3
 800157c:	f003 fc70 	bl	8004e60 <HAL_RCC_OscConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001586:	f000 fd49 	bl	800201c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158a:	230f      	movs	r3, #15
 800158c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158e:	2302      	movs	r3, #2
 8001590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001596:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2102      	movs	r1, #2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f003 fed2 	bl	8005350 <HAL_RCC_ClockConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80015b2:	f000 fd33 	bl	800201c <Error_Handler>
  }
}
 80015b6:	bf00      	nop
 80015b8:	3750      	adds	r7, #80	; 0x50
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40007000 	.word	0x40007000

080015c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ce:	463b      	mov	r3, r7
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <MX_ADC1_Init+0x9c>)
 80015dc:	4a22      	ldr	r2, [pc, #136]	; (8001668 <MX_ADC1_Init+0xa0>)
 80015de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015e0:	4b20      	ldr	r3, [pc, #128]	; (8001664 <MX_ADC1_Init+0x9c>)
 80015e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <MX_ADC1_Init+0x9c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_ADC1_Init+0x9c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <MX_ADC1_Init+0x9c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_ADC1_Init+0x9c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_ADC1_Init+0x9c>)
 8001604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_ADC1_Init+0x9c>)
 800160c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001610:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_ADC1_Init+0x9c>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <MX_ADC1_Init+0x9c>)
 800161a:	2201      	movs	r2, #1
 800161c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800161e:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_ADC1_Init+0x9c>)
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001626:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_ADC1_Init+0x9c>)
 8001628:	2201      	movs	r2, #1
 800162a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_ADC1_Init+0x9c>)
 800162e:	f000 ff6f 	bl	8002510 <HAL_ADC_Init>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001638:	f000 fcf0 	bl	800201c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800163c:	2300      	movs	r3, #0
 800163e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001640:	2301      	movs	r3, #1
 8001642:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	4619      	mov	r1, r3
 800164c:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_ADC1_Init+0x9c>)
 800164e:	f001 f8b1 	bl	80027b4 <HAL_ADC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001658:	f000 fce0 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800165c:	bf00      	nop
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000194 	.word	0x20000194
 8001668:	40012000 	.word	0x40012000

0800166c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	463b      	mov	r3, r7
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001688:	4b1d      	ldr	r3, [pc, #116]	; (8001700 <MX_TIM2_Init+0x94>)
 800168a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_TIM2_Init+0x94>)
 8001692:	2200      	movs	r2, #0
 8001694:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_TIM2_Init+0x94>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 949;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_TIM2_Init+0x94>)
 800169e:	f240 32b5 	movw	r2, #949	; 0x3b5
 80016a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <MX_TIM2_Init+0x94>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016aa:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_TIM2_Init+0x94>)
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016b0:	4813      	ldr	r0, [pc, #76]	; (8001700 <MX_TIM2_Init+0x94>)
 80016b2:	f004 f805 	bl	80056c0 <HAL_TIM_Base_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016bc:	f000 fcae 	bl	800201c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4619      	mov	r1, r3
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <MX_TIM2_Init+0x94>)
 80016ce:	f004 fa93 	bl	8005bf8 <HAL_TIM_ConfigClockSource>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80016d8:	f000 fca0 	bl	800201c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016dc:	2320      	movs	r3, #32
 80016de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_TIM2_Init+0x94>)
 80016ea:	f004 fe19 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016f4:	f000 fc92 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000023c 	.word	0x2000023c

08001704 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08e      	sub	sp, #56	; 0x38
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001718:	f107 0320 	add.w	r3, r7, #32
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
 8001730:	615a      	str	r2, [r3, #20]
 8001732:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001734:	4b3b      	ldr	r3, [pc, #236]	; (8001824 <MX_TIM3_Init+0x120>)
 8001736:	4a3c      	ldr	r2, [pc, #240]	; (8001828 <MX_TIM3_Init+0x124>)
 8001738:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 800173a:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <MX_TIM3_Init+0x120>)
 800173c:	2214      	movs	r2, #20
 800173e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001740:	4b38      	ldr	r3, [pc, #224]	; (8001824 <MX_TIM3_Init+0x120>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001746:	4b37      	ldr	r3, [pc, #220]	; (8001824 <MX_TIM3_Init+0x120>)
 8001748:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800174c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800174e:	4b35      	ldr	r3, [pc, #212]	; (8001824 <MX_TIM3_Init+0x120>)
 8001750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001754:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001756:	4b33      	ldr	r3, [pc, #204]	; (8001824 <MX_TIM3_Init+0x120>)
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800175c:	4831      	ldr	r0, [pc, #196]	; (8001824 <MX_TIM3_Init+0x120>)
 800175e:	f003 ffaf 	bl	80056c0 <HAL_TIM_Base_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001768:	f000 fc58 	bl	800201c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001772:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001776:	4619      	mov	r1, r3
 8001778:	482a      	ldr	r0, [pc, #168]	; (8001824 <MX_TIM3_Init+0x120>)
 800177a:	f004 fa3d 	bl	8005bf8 <HAL_TIM_ConfigClockSource>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001784:	f000 fc4a 	bl	800201c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001788:	4826      	ldr	r0, [pc, #152]	; (8001824 <MX_TIM3_Init+0x120>)
 800178a:	f004 f86a 	bl	8005862 <HAL_TIM_PWM_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001794:	f000 fc42 	bl	800201c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	4619      	mov	r1, r3
 80017a6:	481f      	ldr	r0, [pc, #124]	; (8001824 <MX_TIM3_Init+0x120>)
 80017a8:	f004 fdba 	bl	8006320 <HAL_TIMEx_MasterConfigSynchronization>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80017b2:	f000 fc33 	bl	800201c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b6:	2360      	movs	r3, #96	; 0x60
 80017b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50000;
 80017ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80017be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	2200      	movs	r2, #0
 80017cc:	4619      	mov	r1, r3
 80017ce:	4815      	ldr	r0, [pc, #84]	; (8001824 <MX_TIM3_Init+0x120>)
 80017d0:	f004 f950 	bl	8005a74 <HAL_TIM_PWM_ConfigChannel>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80017da:	f000 fc1f 	bl	800201c <Error_Handler>
  }
  sConfigOC.Pulse = 32700;
 80017de:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80017e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	2204      	movs	r2, #4
 80017e8:	4619      	mov	r1, r3
 80017ea:	480e      	ldr	r0, [pc, #56]	; (8001824 <MX_TIM3_Init+0x120>)
 80017ec:	f004 f942 	bl	8005a74 <HAL_TIM_PWM_ConfigChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 80017f6:	f000 fc11 	bl	800201c <Error_Handler>
  }
  sConfigOC.Pulse = 20000;
 80017fa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80017fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2208      	movs	r2, #8
 8001804:	4619      	mov	r1, r3
 8001806:	4807      	ldr	r0, [pc, #28]	; (8001824 <MX_TIM3_Init+0x120>)
 8001808:	f004 f934 	bl	8005a74 <HAL_TIM_PWM_ConfigChannel>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 8001812:	f000 fc03 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001816:	4803      	ldr	r0, [pc, #12]	; (8001824 <MX_TIM3_Init+0x120>)
 8001818:	f000 fce0 	bl	80021dc <HAL_TIM_MspPostInit>

}
 800181c:	bf00      	nop
 800181e:	3738      	adds	r7, #56	; 0x38
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000284 	.word	0x20000284
 8001828:	40000400 	.word	0x40000400

0800182c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_DMA_Init+0x3c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a0b      	ldr	r2, [pc, #44]	; (8001868 <MX_DMA_Init+0x3c>)
 800183c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_DMA_Init+0x3c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2105      	movs	r1, #5
 8001852:	2038      	movs	r0, #56	; 0x38
 8001854:	f001 fb29 	bl	8002eaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001858:	2038      	movs	r0, #56	; 0x38
 800185a:	f001 fb42 	bl	8002ee2 <HAL_NVIC_EnableIRQ>

}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	4b27      	ldr	r3, [pc, #156]	; (8001924 <MX_GPIO_Init+0xb8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a26      	ldr	r2, [pc, #152]	; (8001924 <MX_GPIO_Init+0xb8>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <MX_GPIO_Init+0xb8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	4b20      	ldr	r3, [pc, #128]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a1f      	ldr	r2, [pc, #124]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	4b19      	ldr	r3, [pc, #100]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a18      	ldr	r2, [pc, #96]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a11      	ldr	r2, [pc, #68]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <MX_GPIO_Init+0xb8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f8:	480b      	ldr	r0, [pc, #44]	; (8001928 <MX_GPIO_Init+0xbc>)
 80018fa:	f002 f801 	bl	8003900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80018fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	4619      	mov	r1, r3
 8001916:	4804      	ldr	r0, [pc, #16]	; (8001928 <MX_GPIO_Init+0xbc>)
 8001918:	f001 fe6e 	bl	80035f8 <HAL_GPIO_Init>

}
 800191c:	bf00      	nop
 800191e:	3728      	adds	r7, #40	; 0x28
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	40020800 	.word	0x40020800

0800192c <prvTaskStatsCommand>:
//uint8_t buffer[128];
uint32_t len;

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout);

static BaseType_t prvTaskStatsCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]


        /* For simplicity, this function assumes the output buffer is large enough
        to hold all the text generated by executing the vTaskList() API function,
        so the xWriteBufferLen parameter is not used. */
        char *head = "Name\t\t\t\tState  Priority  Stack  Number\n\r";
 8001938:	4b09      	ldr	r3, [pc, #36]	; (8001960 <prvTaskStatsCommand+0x34>)
 800193a:	617b      	str	r3, [r7, #20]
        ( void ) xWriteBufferLen;

        /* pcWriteBuffer is used directly as the vTaskList() parameter, so the table
        generated by executing vTaskList() is written directly into the output
        buffer. */
        strcpy(pcWriteBuffer, head);
 800193c:	6979      	ldr	r1, [r7, #20]
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f00e faba 	bl	800feb8 <strcpy>
        vTaskList( pcWriteBuffer + strlen(head));
 8001944:	6978      	ldr	r0, [r7, #20]
 8001946:	f7fe fcb5 	bl	80002b4 <strlen>
 800194a:	4602      	mov	r2, r0
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f00b f83b 	bl	800c9cc <vTaskList>

        /* The entire table was written directly to the output buffer.  Execution
        of this command is complete, so return pdFALSE. */
        return pdFALSE;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	08010bcc 	.word	0x08010bcc

08001964 <prvTaskStatsTexto>:

static BaseType_t prvTaskStatsTexto( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8001964:	b4b0      	push	{r4, r5, r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]

	strcpy(pcWriteBuffer,(char*)"Este e um texto teste\r\n");
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4a08      	ldr	r2, [pc, #32]	; (8001994 <prvTaskStatsTexto+0x30>)
 8001974:	461d      	mov	r5, r3
 8001976:	4614      	mov	r4, r2
 8001978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197a:	6028      	str	r0, [r5, #0]
 800197c:	6069      	str	r1, [r5, #4]
 800197e:	60aa      	str	r2, [r5, #8]
 8001980:	60eb      	str	r3, [r5, #12]
 8001982:	cc03      	ldmia	r4!, {r0, r1}
 8001984:	6128      	str	r0, [r5, #16]
 8001986:	6169      	str	r1, [r5, #20]
	return pdFALSE;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bcb0      	pop	{r4, r5, r7}
 8001992:	4770      	bx	lr
 8001994:	08010bf8 	.word	0x08010bf8

08001998 <prvTaskStatsRGB>:

static BaseType_t prvTaskStatsRGB( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	const char *pcParameterAux;
	BaseType_t xParameter1StringLength;
	char comando1[7];
	int16_t brilho;
	int16_t red,green,blue;
	comando1[0] = '\0';
 80019a4:	2300      	movs	r3, #0
 80019a6:	753b      	strb	r3, [r7, #20]
	pcParameter1 = FreeRTOS_CLIGetParameter
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	461a      	mov	r2, r3
 80019ae:	2101      	movs	r1, #1
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fb47 	bl	8001044 <FreeRTOS_CLIGetParameter>
 80019b6:	62f8      	str	r0, [r7, #44]	; 0x2c
	                          1,
	                          /* Store the parameter string length. */
	                          &xParameter1StringLength
	                        );

	strncpy(comando1,pcParameter1,xParameter1StringLength);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	461a      	mov	r2, r3
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019c2:	4618      	mov	r0, r3
 80019c4:	f00e fa94 	bl	800fef0 <strncpy>
	comando1[xParameter1StringLength] = '\0';
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	3330      	adds	r3, #48	; 0x30
 80019cc:	443b      	add	r3, r7
 80019ce:	2200      	movs	r2, #0
 80019d0:	f803 2c1c 	strb.w	r2, [r3, #-28]
	if(strcmp(comando1,(const char *)"on") == (int)0){
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	499f      	ldr	r1, [pc, #636]	; (8001c58 <prvTaskStatsRGB+0x2c0>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f7fe fc60 	bl	80002a0 <strcmp>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10d      	bne.n	8001a02 <prvTaskStatsRGB+0x6a>
//		Habilitar o led RGB
//		Basicamente iniciar o TIM3
		HAL_TIM_Base_Start(&htim3);
 80019e6:	489d      	ldr	r0, [pc, #628]	; (8001c5c <prvTaskStatsRGB+0x2c4>)
 80019e8:	f003 feba 	bl	8005760 <HAL_TIM_Base_Start>
		strcpy(pcWriteBuffer,"Led Ligado \n\r");
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4a9c      	ldr	r2, [pc, #624]	; (8001c60 <prvTaskStatsRGB+0x2c8>)
 80019f0:	461c      	mov	r4, r3
 80019f2:	4613      	mov	r3, r2
 80019f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80019f6:	6020      	str	r0, [r4, #0]
 80019f8:	6061      	str	r1, [r4, #4]
 80019fa:	60a2      	str	r2, [r4, #8]
 80019fc:	881b      	ldrh	r3, [r3, #0]
 80019fe:	81a3      	strh	r3, [r4, #12]
 8001a00:	e10a      	b.n	8001c18 <prvTaskStatsRGB+0x280>
	} else if(strcmp(comando1,(const char *)"off") == 0){
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4997      	ldr	r1, [pc, #604]	; (8001c64 <prvTaskStatsRGB+0x2cc>)
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fc49 	bl	80002a0 <strcmp>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d116      	bne.n	8001a42 <prvTaskStatsRGB+0xaa>
//		Desabilitar o led RGB
//		Basicamente parar o TIM3
		HAL_TIM_Base_Stop(&htim3);
 8001a14:	4891      	ldr	r0, [pc, #580]	; (8001c5c <prvTaskStatsRGB+0x2c4>)
 8001a16:	f003 fefd 	bl	8005814 <HAL_TIM_Base_Stop>
		vTaskSuspend(task_handle_RGB);
 8001a1a:	4b93      	ldr	r3, [pc, #588]	; (8001c68 <prvTaskStatsRGB+0x2d0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f009 ff64 	bl	800b8ec <vTaskSuspend>
		rgb.brilho=0;
 8001a24:	4b91      	ldr	r3, [pc, #580]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
		strcpy(pcWriteBuffer,"Led Desligado \n\r");
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4a90      	ldr	r2, [pc, #576]	; (8001c70 <prvTaskStatsRGB+0x2d8>)
 8001a2e:	461d      	mov	r5, r3
 8001a30:	4614      	mov	r4, r2
 8001a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a34:	6028      	str	r0, [r5, #0]
 8001a36:	6069      	str	r1, [r5, #4]
 8001a38:	60aa      	str	r2, [r5, #8]
 8001a3a:	60eb      	str	r3, [r5, #12]
 8001a3c:	7823      	ldrb	r3, [r4, #0]
 8001a3e:	742b      	strb	r3, [r5, #16]
 8001a40:	e0ea      	b.n	8001c18 <prvTaskStatsRGB+0x280>
	} else if(strcmp(comando1,(const char *)"brilho") == 0){
 8001a42:	f107 0314 	add.w	r3, r7, #20
 8001a46:	498b      	ldr	r1, [pc, #556]	; (8001c74 <prvTaskStatsRGB+0x2dc>)
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fc29 	bl	80002a0 <strcmp>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d13c      	bne.n	8001ace <prvTaskStatsRGB+0x136>
//		calculo do brilho do led RGB

		pcParameterAux = FreeRTOS_CLIGetParameter
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	461a      	mov	r2, r3
 8001a5a:	2102      	movs	r1, #2
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff faf1 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001a62:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          2,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f00e fa3e 	bl	800fef0 <strncpy>
		brilho = atoi(comando1);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f00e f8a9 	bl	800fbd0 <atoi>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	843b      	strh	r3, [r7, #32]
		if(brilho >= 0 && brilho < 256){
 8001a82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db15      	blt.n	8001ab6 <prvTaskStatsRGB+0x11e>
 8001a8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001a8e:	2bff      	cmp	r3, #255	; 0xff
 8001a90:	dc11      	bgt.n	8001ab6 <prvTaskStatsRGB+0x11e>
			rgb.brilho = brilho;
 8001a92:	8c3b      	ldrh	r3, [r7, #32]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b75      	ldr	r3, [pc, #468]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001a98:	701a      	strb	r2, [r3, #0]
			strcpy(pcWriteBuffer,"Brilho redefinido \n\r");
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4a76      	ldr	r2, [pc, #472]	; (8001c78 <prvTaskStatsRGB+0x2e0>)
 8001a9e:	461d      	mov	r5, r3
 8001aa0:	4614      	mov	r4, r2
 8001aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa4:	6028      	str	r0, [r5, #0]
 8001aa6:	6069      	str	r1, [r5, #4]
 8001aa8:	60aa      	str	r2, [r5, #8]
 8001aaa:	60eb      	str	r3, [r5, #12]
 8001aac:	6820      	ldr	r0, [r4, #0]
 8001aae:	6128      	str	r0, [r5, #16]
 8001ab0:	7923      	ldrb	r3, [r4, #4]
 8001ab2:	752b      	strb	r3, [r5, #20]
 8001ab4:	e0b0      	b.n	8001c18 <prvTaskStatsRGB+0x280>
		} else {
			strcpy(pcWriteBuffer,"Valor invalido \n\r");
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4a70      	ldr	r2, [pc, #448]	; (8001c7c <prvTaskStatsRGB+0x2e4>)
 8001aba:	461d      	mov	r5, r3
 8001abc:	4614      	mov	r4, r2
 8001abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac0:	6028      	str	r0, [r5, #0]
 8001ac2:	6069      	str	r1, [r5, #4]
 8001ac4:	60aa      	str	r2, [r5, #8]
 8001ac6:	60eb      	str	r3, [r5, #12]
 8001ac8:	8823      	ldrh	r3, [r4, #0]
 8001aca:	822b      	strh	r3, [r5, #16]
 8001acc:	e0a4      	b.n	8001c18 <prvTaskStatsRGB+0x280>
		}

	} else if(strcmp(comando1,(const char *)"color") == 0){
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	496b      	ldr	r1, [pc, #428]	; (8001c80 <prvTaskStatsRGB+0x2e8>)
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fbe3 	bl	80002a0 <strcmp>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f040 8081 	bne.w	8001be4 <prvTaskStatsRGB+0x24c>
		pcParameterAux = FreeRTOS_CLIGetParameter
 8001ae2:	f107 031c 	add.w	r3, r7, #28
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	2102      	movs	r1, #2
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff faaa 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001af0:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          2,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	461a      	mov	r2, r3
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001afc:	4618      	mov	r0, r3
 8001afe:	f00e f9f7 	bl	800fef0 <strncpy>
		red = atoi(comando1);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4618      	mov	r0, r3
 8001b08:	f00e f862 	bl	800fbd0 <atoi>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	84fb      	strh	r3, [r7, #38]	; 0x26
		pcParameterAux = FreeRTOS_CLIGetParameter
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	461a      	mov	r2, r3
 8001b16:	2103      	movs	r1, #3
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fa93 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001b1e:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          3,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	461a      	mov	r2, r3
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f00e f9e0 	bl	800fef0 <strncpy>
		green = atoi(comando1);
 8001b30:	f107 0314 	add.w	r3, r7, #20
 8001b34:	4618      	mov	r0, r3
 8001b36:	f00e f84b 	bl	800fbd0 <atoi>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	84bb      	strh	r3, [r7, #36]	; 0x24
		pcParameterAux = FreeRTOS_CLIGetParameter
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	461a      	mov	r2, r3
 8001b44:	2104      	movs	r1, #4
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fa7c 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001b4c:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          4,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	461a      	mov	r2, r3
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f00e f9c9 	bl	800fef0 <strncpy>
		blue = atoi(comando1);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4618      	mov	r0, r3
 8001b64:	f00e f834 	bl	800fbd0 <atoi>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	847b      	strh	r3, [r7, #34]	; 0x22
		if(blue >= 0 && blue < 256 && red >= 0 && red < 256 && blue >=0 && blue < 256){
 8001b6c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	db2b      	blt.n	8001bcc <prvTaskStatsRGB+0x234>
 8001b74:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b78:	2bff      	cmp	r3, #255	; 0xff
 8001b7a:	dc27      	bgt.n	8001bcc <prvTaskStatsRGB+0x234>
 8001b7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db23      	blt.n	8001bcc <prvTaskStatsRGB+0x234>
 8001b84:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001b88:	2bff      	cmp	r3, #255	; 0xff
 8001b8a:	dc1f      	bgt.n	8001bcc <prvTaskStatsRGB+0x234>
 8001b8c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db1b      	blt.n	8001bcc <prvTaskStatsRGB+0x234>
 8001b94:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b98:	2bff      	cmp	r3, #255	; 0xff
 8001b9a:	dc17      	bgt.n	8001bcc <prvTaskStatsRGB+0x234>
			rgb.blue = blue;
 8001b9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	4b32      	ldr	r3, [pc, #200]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001ba2:	70da      	strb	r2, [r3, #3]
			rgb.red = red;
 8001ba4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001baa:	705a      	strb	r2, [r3, #1]
			rgb.green = green;
 8001bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001bb2:	709a      	strb	r2, [r3, #2]
			strcpy(pcWriteBuffer,"Cor redefinido \n\r");
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4a33      	ldr	r2, [pc, #204]	; (8001c84 <prvTaskStatsRGB+0x2ec>)
 8001bb8:	461d      	mov	r5, r3
 8001bba:	4614      	mov	r4, r2
 8001bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bbe:	6028      	str	r0, [r5, #0]
 8001bc0:	6069      	str	r1, [r5, #4]
 8001bc2:	60aa      	str	r2, [r5, #8]
 8001bc4:	60eb      	str	r3, [r5, #12]
 8001bc6:	8823      	ldrh	r3, [r4, #0]
 8001bc8:	822b      	strh	r3, [r5, #16]
 8001bca:	e025      	b.n	8001c18 <prvTaskStatsRGB+0x280>
		} else {
			strcpy(pcWriteBuffer,"Valor invalido \n\r");
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	4a2b      	ldr	r2, [pc, #172]	; (8001c7c <prvTaskStatsRGB+0x2e4>)
 8001bd0:	461d      	mov	r5, r3
 8001bd2:	4614      	mov	r4, r2
 8001bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd6:	6028      	str	r0, [r5, #0]
 8001bd8:	6069      	str	r1, [r5, #4]
 8001bda:	60aa      	str	r2, [r5, #8]
 8001bdc:	60eb      	str	r3, [r5, #12]
 8001bde:	8823      	ldrh	r3, [r4, #0]
 8001be0:	822b      	strh	r3, [r5, #16]
 8001be2:	e019      	b.n	8001c18 <prvTaskStatsRGB+0x280>
		}
	} else if(strcmp(comando1,(const char *)"rgb") == 0){
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4927      	ldr	r1, [pc, #156]	; (8001c88 <prvTaskStatsRGB+0x2f0>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7fe fb58 	bl	80002a0 <strcmp>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d110      	bne.n	8001c18 <prvTaskStatsRGB+0x280>

		HAL_TIM_Base_Start(&htim3);
 8001bf6:	4819      	ldr	r0, [pc, #100]	; (8001c5c <prvTaskStatsRGB+0x2c4>)
 8001bf8:	f003 fdb2 	bl	8005760 <HAL_TIM_Base_Start>
		vTaskResume(task_handle_RGB);
 8001bfc:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <prvTaskStatsRGB+0x2d0>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f009 ff1b 	bl	800ba3c <vTaskResume>
		rgb.blue = 0;
 8001c06:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	70da      	strb	r2, [r3, #3]
		rgb.red = 0;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	705a      	strb	r2, [r3, #1]
		rgb.green = 0;
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	709a      	strb	r2, [r3, #2]
	}
//	strcpy(pcWriteBuffer,valor);

	TIM3->CCR1 = rgb.brilho*rgb.red;
 8001c18:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c20:	785b      	ldrb	r3, [r3, #1]
 8001c22:	fb03 f202 	mul.w	r2, r3, r2
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <prvTaskStatsRGB+0x2f4>)
 8001c28:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = rgb.brilho*rgb.green;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c32:	789b      	ldrb	r3, [r3, #2]
 8001c34:	fb03 f202 	mul.w	r2, r3, r2
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <prvTaskStatsRGB+0x2f4>)
 8001c3a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = rgb.brilho*rgb.blue;
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <prvTaskStatsRGB+0x2d4>)
 8001c44:	78db      	ldrb	r3, [r3, #3]
 8001c46:	fb03 f202 	mul.w	r2, r3, r2
 8001c4a:	4b10      	ldr	r3, [pc, #64]	; (8001c8c <prvTaskStatsRGB+0x2f4>)
 8001c4c:	63da      	str	r2, [r3, #60]	; 0x3c
	return pdFALSE;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3730      	adds	r7, #48	; 0x30
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bdb0      	pop	{r4, r5, r7, pc}
 8001c58:	08010c10 	.word	0x08010c10
 8001c5c:	20000284 	.word	0x20000284
 8001c60:	08010c14 	.word	0x08010c14
 8001c64:	08010c24 	.word	0x08010c24
 8001c68:	200010e4 	.word	0x200010e4
 8001c6c:	200002dc 	.word	0x200002dc
 8001c70:	08010c28 	.word	0x08010c28
 8001c74:	08010c3c 	.word	0x08010c3c
 8001c78:	08010c44 	.word	0x08010c44
 8001c7c:	08010c5c 	.word	0x08010c5c
 8001c80:	08010c70 	.word	0x08010c70
 8001c84:	08010c78 	.word	0x08010c78
 8001c88:	08010c8c 	.word	0x08010c8c
 8001c8c:	40000400 	.word	0x40000400

08001c90 <prvTaskStatsHarmonica>:


static BaseType_t prvTaskStatsHarmonica( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8001c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c92:	b093      	sub	sp, #76	; 0x4c
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
	const char *pcParameterAux;
	BaseType_t xParameter1StringLength;
	char comando1[5];
	char restorno[6];
	uint8_t valor1,valor2;
	comando1[0] = '\0';
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	773b      	strb	r3, [r7, #28]
	pcParameter1 = FreeRTOS_CLIGetParameter
 8001ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff f9cb 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001cae:	6438      	str	r0, [r7, #64]	; 0x40
	                          1,
	                          /* Store the parameter string length. */
	                          &xParameter1StringLength
	                        );

	strncpy(comando1,pcParameter1,xParameter1StringLength);
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f00e f918 	bl	800fef0 <strncpy>
	comando1[xParameter1StringLength] = '\0';
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	3348      	adds	r3, #72	; 0x48
 8001cc4:	443b      	add	r3, r7
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f803 2c2c 	strb.w	r2, [r3, #-44]
	if(strcmp(comando1,(const char *)"cc") == (int)0){
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	49bb      	ldr	r1, [pc, #748]	; (8001fc0 <prvTaskStatsHarmonica+0x330>)
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe fae4 	bl	80002a0 <strcmp>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d176      	bne.n	8001dcc <prvTaskStatsHarmonica+0x13c>
		strcpy(pcWriteBuffer,(char*)"Este e o nivel CC do sinal: ");
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4ab8      	ldr	r2, [pc, #736]	; (8001fc4 <prvTaskStatsHarmonica+0x334>)
 8001ce2:	461d      	mov	r5, r3
 8001ce4:	4614      	mov	r4, r2
 8001ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce8:	6028      	str	r0, [r5, #0]
 8001cea:	6069      	str	r1, [r5, #4]
 8001cec:	60aa      	str	r2, [r5, #8]
 8001cee:	60eb      	str	r3, [r5, #12]
 8001cf0:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001cf2:	6128      	str	r0, [r5, #16]
 8001cf4:	6169      	str	r1, [r5, #20]
 8001cf6:	61aa      	str	r2, [r5, #24]
 8001cf8:	7823      	ldrb	r3, [r4, #0]
 8001cfa:	772b      	strb	r3, [r5, #28]
		float auxf;
		auxf = (mod[0]*0.5);
 8001cfc:	4bb2      	ldr	r3, [pc, #712]	; (8001fc8 <prvTaskStatsHarmonica+0x338>)
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d0a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		valor1 = (uint8_t) auxf;
 8001d0e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d16:	edc7 7a00 	vstr	s15, [r7]
 8001d1a:	783b      	ldrb	r3, [r7, #0]
 8001d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		valor2 = (uint8_t) ((auxf-valor1)*10);
 8001d20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d34:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d40:	edc7 7a00 	vstr	s15, [r7]
 8001d44:	783b      	ldrb	r3, [r7, #0]
 8001d46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		restorno[0] = 48+valor1;
 8001d4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d4e:	3330      	adds	r3, #48	; 0x30
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	753b      	strb	r3, [r7, #20]
		restorno[1] = '.';
 8001d54:	232e      	movs	r3, #46	; 0x2e
 8001d56:	757b      	strb	r3, [r7, #21]
		restorno[2] = 48+valor2;
 8001d58:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d5c:	3330      	adds	r3, #48	; 0x30
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	75bb      	strb	r3, [r7, #22]
		valor2 = (uint8_t) ((((auxf-valor1)*10)-valor2)*10 );
 8001d62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d66:	ee07 3a90 	vmov	s15, r3
 8001d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d6e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d76:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d7e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d9a:	edc7 7a00 	vstr	s15, [r7]
 8001d9e:	783b      	ldrb	r3, [r7, #0]
 8001da0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		restorno[3] = 48+valor2;
 8001da4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001da8:	3330      	adds	r3, #48	; 0x30
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	75fb      	strb	r3, [r7, #23]
		restorno[4] = '\0';
 8001dae:	2300      	movs	r3, #0
 8001db0:	763b      	strb	r3, [r7, #24]
		strcpy(pcWriteBuffer + strlen(pcWriteBuffer),(char*)restorno);
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	f7fe fa7e 	bl	80002b4 <strlen>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	f107 0214 	add.w	r2, r7, #20
 8001dc2:	4611      	mov	r1, r2
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f00e f877 	bl	800feb8 <strcpy>
 8001dca:	e0f4      	b.n	8001fb6 <prvTaskStatsHarmonica+0x326>
	} else {
		uint8_t harm;
		harm = atoi(comando1);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f00d fefd 	bl	800fbd0 <atoi>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(harm > 0 && harm < 255){
 8001ddc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80e8 	beq.w	8001fb6 <prvTaskStatsHarmonica+0x326>
 8001de6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001dea:	2bff      	cmp	r3, #255	; 0xff
 8001dec:	f000 80e3 	beq.w	8001fb6 <prvTaskStatsHarmonica+0x326>
			uint8_t i, qnt;
			strcpy(pcWriteBuffer,(char*)"Este e a hamornica iniciada com ");
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	4a76      	ldr	r2, [pc, #472]	; (8001fcc <prvTaskStatsHarmonica+0x33c>)
 8001df4:	4614      	mov	r4, r2
 8001df6:	469c      	mov	ip, r3
 8001df8:	f104 0e20 	add.w	lr, r4, #32
 8001dfc:	4665      	mov	r5, ip
 8001dfe:	4626      	mov	r6, r4
 8001e00:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e02:	6028      	str	r0, [r5, #0]
 8001e04:	6069      	str	r1, [r5, #4]
 8001e06:	60aa      	str	r2, [r5, #8]
 8001e08:	60eb      	str	r3, [r5, #12]
 8001e0a:	3410      	adds	r4, #16
 8001e0c:	f10c 0c10 	add.w	ip, ip, #16
 8001e10:	4574      	cmp	r4, lr
 8001e12:	d1f3      	bne.n	8001dfc <prvTaskStatsHarmonica+0x16c>
 8001e14:	4663      	mov	r3, ip
 8001e16:	4622      	mov	r2, r4
 8001e18:	7812      	ldrb	r2, [r2, #0]
 8001e1a:	701a      	strb	r2, [r3, #0]
			strcpy(pcWriteBuffer + strlen(pcWriteBuffer),comando1);
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f7fe fa49 	bl	80002b4 <strlen>
 8001e22:	4602      	mov	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4413      	add	r3, r2
 8001e28:	f107 021c 	add.w	r2, r7, #28
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f00e f842 	bl	800feb8 <strcpy>
			strcpy(pcWriteBuffer + strlen(pcWriteBuffer),(char*)": ");
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f7fe fa3d 	bl	80002b4 <strlen>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	4413      	add	r3, r2
 8001e40:	4a63      	ldr	r2, [pc, #396]	; (8001fd0 <prvTaskStatsHarmonica+0x340>)
 8001e42:	8811      	ldrh	r1, [r2, #0]
 8001e44:	7892      	ldrb	r2, [r2, #2]
 8001e46:	8019      	strh	r1, [r3, #0]
 8001e48:	709a      	strb	r2, [r3, #2]
			comando1[0] = '\0';
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	773b      	strb	r3, [r7, #28]
			pcParameterAux = FreeRTOS_CLIGetParameter
 8001e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e52:	461a      	mov	r2, r3
 8001e54:	2102      	movs	r1, #2
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff f8f4 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001e5c:	63b8      	str	r0, [r7, #56]	; 0x38
				                          2,
				                          /* Store the parameter string length. */
				                          &xParameter1StringLength
				                        );

			strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	461a      	mov	r2, r3
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f00e f841 	bl	800fef0 <strncpy>
			comando1[xParameter1StringLength] = '\0';
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	3348      	adds	r3, #72	; 0x48
 8001e72:	443b      	add	r3, r7
 8001e74:	2200      	movs	r2, #0
 8001e76:	f803 2c2c 	strb.w	r2, [r3, #-44]
			qnt = atoi(pcParameterAux);
 8001e7a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e7c:	f00d fea8 	bl	800fbd0 <atoi>
 8001e80:	4603      	mov	r3, r0
 8001e82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if(qnt > 0 && qnt < 128){
 8001e86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 8093 	beq.w	8001fb6 <prvTaskStatsHarmonica+0x326>
 8001e90:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f2c0 808e 	blt.w	8001fb6 <prvTaskStatsHarmonica+0x326>
				float auxf;
				for(i = harm; i < (harm+qnt);i++){
 8001e9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001e9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001ea2:	e07e      	b.n	8001fa2 <prvTaskStatsHarmonica+0x312>
					auxf = (mod[i]*0.5);
 8001ea4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ea8:	4a47      	ldr	r2, [pc, #284]	; (8001fc8 <prvTaskStatsHarmonica+0x338>)
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	4413      	add	r3, r2
 8001eae:	edd3 7a00 	vldr	s15, [r3]
 8001eb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
					valor1 = (uint8_t) auxf;
 8001ebe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ec2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ec6:	edc7 7a00 	vstr	s15, [r7]
 8001eca:	783b      	ldrb	r3, [r7, #0]
 8001ecc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					valor2 = (uint8_t) ((auxf-valor1)*10);
 8001ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ed4:	ee07 3a90 	vmov	s15, r3
 8001ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001edc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ef0:	edc7 7a00 	vstr	s15, [r7]
 8001ef4:	783b      	ldrb	r3, [r7, #0]
 8001ef6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					restorno[0] = 48+valor1;
 8001efa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001efe:	3330      	adds	r3, #48	; 0x30
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	753b      	strb	r3, [r7, #20]
					restorno[1] = '.';
 8001f04:	232e      	movs	r3, #46	; 0x2e
 8001f06:	757b      	strb	r3, [r7, #21]
					restorno[2] = 48+valor2;
 8001f08:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f0c:	3330      	adds	r3, #48	; 0x30
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	75bb      	strb	r3, [r7, #22]
					valor2 = (uint8_t) ((((auxf-valor1)*10)-valor2)*10 );
 8001f12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f16:	ee07 3a90 	vmov	s15, r3
 8001f1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f1e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f26:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f4a:	edc7 7a00 	vstr	s15, [r7]
 8001f4e:	783b      	ldrb	r3, [r7, #0]
 8001f50:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					restorno[3] = 48+valor2;
 8001f54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001f58:	3330      	adds	r3, #48	; 0x30
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	75fb      	strb	r3, [r7, #23]
					if(i < (harm+qnt-1)){
 8001f5e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001f62:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001f66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3b01      	subs	r3, #1
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	da04      	bge.n	8001f7c <prvTaskStatsHarmonica+0x2ec>
						restorno[4] = ',';
 8001f72:	232c      	movs	r3, #44	; 0x2c
 8001f74:	763b      	strb	r3, [r7, #24]
						restorno[5] = ' ';
 8001f76:	2320      	movs	r3, #32
 8001f78:	767b      	strb	r3, [r7, #25]
 8001f7a:	e001      	b.n	8001f80 <prvTaskStatsHarmonica+0x2f0>
					} else {
						restorno[4] = '\0';
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	763b      	strb	r3, [r7, #24]
					}
					strcpy(pcWriteBuffer + strlen(pcWriteBuffer),(char*)restorno);
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f7fe f997 	bl	80002b4 <strlen>
 8001f86:	4602      	mov	r2, r0
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f107 0214 	add.w	r2, r7, #20
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f00d ff90 	bl	800feb8 <strcpy>
				for(i = harm; i < (harm+qnt);i++){
 8001f98:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8001fa2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001fa6:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8001faa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001fae:	440b      	add	r3, r1
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	f6ff af77 	blt.w	8001ea4 <prvTaskStatsHarmonica+0x214>
	char valor[15];
	int positivo = (int) fase*100;
	itoa(positivo,valor,10);
	strcpy(pcWriteBuffer + strlen(pcWriteBuffer),comando1);
	*/
	return pdFALSE;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	374c      	adds	r7, #76	; 0x4c
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc0:	08010c90 	.word	0x08010c90
 8001fc4:	08010c94 	.word	0x08010c94
 8001fc8:	20000ce0 	.word	0x20000ce0
 8001fcc:	08010cb4 	.word	0x08010cb4
 8001fd0:	08010cd8 	.word	0x08010cd8

08001fd4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b0a2      	sub	sp, #136	; 0x88
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001fdc:	f00b ffa6 	bl	800df2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 8001fe0:	f00b ffd4 	bl	800df8c <init_usb_rtos_obj>

//  static uint8_t pcOutputString[ MAX_OUTPUT_LENGTH ], pcInputString[ MAX_INPUT_LENGTH ];

  FreeRTOS_CLIRegisterCommand( &xTasksCommand );
 8001fe4:	4809      	ldr	r0, [pc, #36]	; (800200c <StartDefaultTask+0x38>)
 8001fe6:	f7fe ff63 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xTasksTexto );
 8001fea:	4809      	ldr	r0, [pc, #36]	; (8002010 <StartDefaultTask+0x3c>)
 8001fec:	f7fe ff60 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xTasksRGB );
 8001ff0:	4808      	ldr	r0, [pc, #32]	; (8002014 <StartDefaultTask+0x40>)
 8001ff2:	f7fe ff5d 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xTasksHarmonica );
 8001ff6:	4808      	ldr	r0, [pc, #32]	; (8002018 <StartDefaultTask+0x44>)
 8001ff8:	f7fe ff5a 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>

  char data[128];
  /* Infinite loop */
  for(;;)
  {
	  queue_print(data,1);
 8001ffc:	f107 0308 	add.w	r3, r7, #8
 8002000:	2101      	movs	r1, #1
 8002002:	4618      	mov	r0, r3
 8002004:	f00c f810 	bl	800e028 <queue_print>
 8002008:	e7f8      	b.n	8001ffc <StartDefaultTask+0x28>
 800200a:	bf00      	nop
 800200c:	08010f68 	.word	0x08010f68
 8002010:	08010f78 	.word	0x08010f78
 8002014:	08010f88 	.word	0x08010f88
 8002018:	08010f98 	.word	0x08010f98

0800201c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002020:	b672      	cpsid	i
}
 8002022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002024:	e7fe      	b.n	8002024 <Error_Handler+0x8>
	...

08002028 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4b12      	ldr	r3, [pc, #72]	; (800207c <HAL_MspInit+0x54>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a11      	ldr	r2, [pc, #68]	; (800207c <HAL_MspInit+0x54>)
 8002038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_MspInit+0x54>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_MspInit+0x54>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a0a      	ldr	r2, [pc, #40]	; (800207c <HAL_MspInit+0x54>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_MspInit+0x54>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	210f      	movs	r1, #15
 800206a:	f06f 0001 	mvn.w	r0, #1
 800206e:	f000 ff1c 	bl	8002eaa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800

08002080 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08a      	sub	sp, #40	; 0x28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 0314 	add.w	r3, r7, #20
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a2f      	ldr	r2, [pc, #188]	; (800215c <HAL_ADC_MspInit+0xdc>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d157      	bne.n	8002152 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	4b2e      	ldr	r3, [pc, #184]	; (8002160 <HAL_ADC_MspInit+0xe0>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	4a2d      	ldr	r2, [pc, #180]	; (8002160 <HAL_ADC_MspInit+0xe0>)
 80020ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b0:	6453      	str	r3, [r2, #68]	; 0x44
 80020b2:	4b2b      	ldr	r3, [pc, #172]	; (8002160 <HAL_ADC_MspInit+0xe0>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_ADC_MspInit+0xe0>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a26      	ldr	r2, [pc, #152]	; (8002160 <HAL_ADC_MspInit+0xe0>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_ADC_MspInit+0xe0>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_Pin;
 80020da:	2301      	movs	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020de:	2303      	movs	r3, #3
 80020e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC1_GPIO_Port, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	481d      	ldr	r0, [pc, #116]	; (8002164 <HAL_ADC_MspInit+0xe4>)
 80020ee:	f001 fa83 	bl	80035f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80020f2:	4b1d      	ldr	r3, [pc, #116]	; (8002168 <HAL_ADC_MspInit+0xe8>)
 80020f4:	4a1d      	ldr	r2, [pc, #116]	; (800216c <HAL_ADC_MspInit+0xec>)
 80020f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_ADC_MspInit+0xe8>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020fe:	4b1a      	ldr	r3, [pc, #104]	; (8002168 <HAL_ADC_MspInit+0xe8>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002104:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_ADC_MspInit+0xe8>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800210a:	4b17      	ldr	r3, [pc, #92]	; (8002168 <HAL_ADC_MspInit+0xe8>)
 800210c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002110:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_ADC_MspInit+0xe8>)
 8002114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002118:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800211a:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_ADC_MspInit+0xe8>)
 800211c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002120:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_ADC_MspInit+0xe8>)
 8002124:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002128:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_ADC_MspInit+0xe8>)
 800212c:	2200      	movs	r2, #0
 800212e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002130:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <HAL_ADC_MspInit+0xe8>)
 8002132:	2200      	movs	r2, #0
 8002134:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002136:	480c      	ldr	r0, [pc, #48]	; (8002168 <HAL_ADC_MspInit+0xe8>)
 8002138:	f000 feee 	bl	8002f18 <HAL_DMA_Init>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002142:	f7ff ff6b 	bl	800201c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a07      	ldr	r2, [pc, #28]	; (8002168 <HAL_ADC_MspInit+0xe8>)
 800214a:	639a      	str	r2, [r3, #56]	; 0x38
 800214c:	4a06      	ldr	r2, [pc, #24]	; (8002168 <HAL_ADC_MspInit+0xe8>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002152:	bf00      	nop
 8002154:	3728      	adds	r7, #40	; 0x28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40012000 	.word	0x40012000
 8002160:	40023800 	.word	0x40023800
 8002164:	40020000 	.word	0x40020000
 8002168:	200001dc 	.word	0x200001dc
 800216c:	40026410 	.word	0x40026410

08002170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002180:	d10e      	bne.n	80021a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HAL_TIM_Base_MspInit+0x64>)
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <HAL_TIM_Base_MspInit+0x64>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6413      	str	r3, [r2, #64]	; 0x40
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <HAL_TIM_Base_MspInit+0x64>)
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800219e:	e012      	b.n	80021c6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <HAL_TIM_Base_MspInit+0x68>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10d      	bne.n	80021c6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_TIM_Base_MspInit+0x64>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_TIM_Base_MspInit+0x64>)
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_TIM_Base_MspInit+0x64>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40000400 	.word	0x40000400

080021dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a21      	ldr	r2, [pc, #132]	; (8002280 <HAL_TIM_MspPostInit+0xa4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d13b      	bne.n	8002276 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_TIM_MspPostInit+0xa8>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	4a1f      	ldr	r2, [pc, #124]	; (8002284 <HAL_TIM_MspPostInit+0xa8>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6313      	str	r3, [r2, #48]	; 0x30
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_TIM_MspPostInit+0xa8>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b19      	ldr	r3, [pc, #100]	; (8002284 <HAL_TIM_MspPostInit+0xa8>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	4a18      	ldr	r2, [pc, #96]	; (8002284 <HAL_TIM_MspPostInit+0xa8>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	6313      	str	r3, [r2, #48]	; 0x30
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_TIM_MspPostInit+0xa8>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin;
 8002236:	23c0      	movs	r3, #192	; 0xc0
 8002238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800223a:	2302      	movs	r3, #2
 800223c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002242:	2300      	movs	r3, #0
 8002244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002246:	2302      	movs	r3, #2
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	4619      	mov	r1, r3
 8002250:	480d      	ldr	r0, [pc, #52]	; (8002288 <HAL_TIM_MspPostInit+0xac>)
 8002252:	f001 f9d1 	bl	80035f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUE_Pin;
 8002256:	2301      	movs	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002266:	2302      	movs	r3, #2
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4619      	mov	r1, r3
 8002270:	4806      	ldr	r0, [pc, #24]	; (800228c <HAL_TIM_MspPostInit+0xb0>)
 8002272:	f001 f9c1 	bl	80035f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002276:	bf00      	nop
 8002278:	3728      	adds	r7, #40	; 0x28
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40000400 	.word	0x40000400
 8002284:	40023800 	.word	0x40023800
 8002288:	40020000 	.word	0x40020000
 800228c:	40020400 	.word	0x40020400

08002290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002294:	e7fe      	b.n	8002294 <NMI_Handler+0x4>

08002296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002296:	b480      	push	{r7}
 8002298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800229a:	e7fe      	b.n	800229a <HardFault_Handler+0x4>

0800229c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <MemManage_Handler+0x4>

080022a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a6:	e7fe      	b.n	80022a6 <BusFault_Handler+0x4>

080022a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <UsageFault_Handler+0x4>

080022ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c0:	f000 f8e2 	bl	8002488 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022c4:	f00a f9e6 	bl	800c694 <xTaskGetSchedulerState>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d001      	beq.n	80022d2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80022ce:	f00b fbb3 	bl	800da38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <DMA2_Stream0_IRQHandler+0x10>)
 80022de:	f000 ff21 	bl	8003124 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200001dc 	.word	0x200001dc

080022ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022f0:	4802      	ldr	r0, [pc, #8]	; (80022fc <OTG_FS_IRQHandler+0x10>)
 80022f2:	f001 fc88 	bl	8003c06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000b410 	.word	0x2000b410

08002300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002308:	4a14      	ldr	r2, [pc, #80]	; (800235c <_sbrk+0x5c>)
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <_sbrk+0x60>)
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002314:	4b13      	ldr	r3, [pc, #76]	; (8002364 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <_sbrk+0x64>)
 800231e:	4a12      	ldr	r2, [pc, #72]	; (8002368 <_sbrk+0x68>)
 8002320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <_sbrk+0x64>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4413      	add	r3, r2
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	429a      	cmp	r2, r3
 800232e:	d207      	bcs.n	8002340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002330:	f00d fc52 	bl	800fbd8 <__errno>
 8002334:	4603      	mov	r3, r0
 8002336:	220c      	movs	r2, #12
 8002338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800233a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800233e:	e009      	b.n	8002354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002340:	4b08      	ldr	r3, [pc, #32]	; (8002364 <_sbrk+0x64>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <_sbrk+0x64>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4413      	add	r3, r2
 800234e:	4a05      	ldr	r2, [pc, #20]	; (8002364 <_sbrk+0x64>)
 8002350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002352:	68fb      	ldr	r3, [r7, #12]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20018000 	.word	0x20018000
 8002360:	00000400 	.word	0x00000400
 8002364:	200010e8 	.word	0x200010e8
 8002368:	2000bb50 	.word	0x2000bb50

0800236c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <SystemInit+0x20>)
 8002372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002376:	4a05      	ldr	r2, [pc, #20]	; (800238c <SystemInit+0x20>)
 8002378:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800237c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002380:	bf00      	nop
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002394:	480d      	ldr	r0, [pc, #52]	; (80023cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002396:	490e      	ldr	r1, [pc, #56]	; (80023d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002398:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800239c:	e002      	b.n	80023a4 <LoopCopyDataInit>

0800239e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a2:	3304      	adds	r3, #4

080023a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a8:	d3f9      	bcc.n	800239e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023aa:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023ac:	4c0b      	ldr	r4, [pc, #44]	; (80023dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b0:	e001      	b.n	80023b6 <LoopFillZerobss>

080023b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b4:	3204      	adds	r2, #4

080023b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b8:	d3fb      	bcc.n	80023b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023ba:	f7ff ffd7 	bl	800236c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023be:	f00d fc11 	bl	800fbe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023c2:	f7ff f817 	bl	80013f4 <main>
  bx  lr    
 80023c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80023cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023d0:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 80023d4:	08011d1c 	.word	0x08011d1c
  ldr r2, =_sbss
 80023d8:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 80023dc:	2000bb4c 	.word	0x2000bb4c

080023e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023e0:	e7fe      	b.n	80023e0 <ADC_IRQHandler>
	...

080023e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023e8:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <HAL_Init+0x40>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <HAL_Init+0x40>)
 80023ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <HAL_Init+0x40>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <HAL_Init+0x40>)
 80023fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002400:	4b08      	ldr	r3, [pc, #32]	; (8002424 <HAL_Init+0x40>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a07      	ldr	r2, [pc, #28]	; (8002424 <HAL_Init+0x40>)
 8002406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800240c:	2003      	movs	r0, #3
 800240e:	f000 fd41 	bl	8002e94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002412:	200f      	movs	r0, #15
 8002414:	f000 f808 	bl	8002428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002418:	f7ff fe06 	bl	8002028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023c00 	.word	0x40023c00

08002428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <HAL_InitTick+0x54>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <HAL_InitTick+0x58>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	4619      	mov	r1, r3
 800243a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800243e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002442:	fbb2 f3f3 	udiv	r3, r2, r3
 8002446:	4618      	mov	r0, r3
 8002448:	f000 fd59 	bl	8002efe <HAL_SYSTICK_Config>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e00e      	b.n	8002474 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b0f      	cmp	r3, #15
 800245a:	d80a      	bhi.n	8002472 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800245c:	2200      	movs	r2, #0
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002464:	f000 fd21 	bl	8002eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002468:	4a06      	ldr	r2, [pc, #24]	; (8002484 <HAL_InitTick+0x5c>)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	e000      	b.n	8002474 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	2000000c 	.word	0x2000000c
 8002480:	20000014 	.word	0x20000014
 8002484:	20000010 	.word	0x20000010

08002488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_IncTick+0x20>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	461a      	mov	r2, r3
 8002492:	4b06      	ldr	r3, [pc, #24]	; (80024ac <HAL_IncTick+0x24>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4413      	add	r3, r2
 8002498:	4a04      	ldr	r2, [pc, #16]	; (80024ac <HAL_IncTick+0x24>)
 800249a:	6013      	str	r3, [r2, #0]
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000014 	.word	0x20000014
 80024ac:	200010ec 	.word	0x200010ec

080024b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  return uwTick;
 80024b4:	4b03      	ldr	r3, [pc, #12]	; (80024c4 <HAL_GetTick+0x14>)
 80024b6:	681b      	ldr	r3, [r3, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	200010ec 	.word	0x200010ec

080024c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d0:	f7ff ffee 	bl	80024b0 <HAL_GetTick>
 80024d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024e0:	d005      	beq.n	80024ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024e2:	4b0a      	ldr	r3, [pc, #40]	; (800250c <HAL_Delay+0x44>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4413      	add	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024ee:	bf00      	nop
 80024f0:	f7ff ffde 	bl	80024b0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d8f7      	bhi.n	80024f0 <HAL_Delay+0x28>
  {
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000014 	.word	0x20000014

08002510 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e033      	b.n	800258e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff fda6 	bl	8002080 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b00      	cmp	r3, #0
 800254c:	d118      	bne.n	8002580 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002556:	f023 0302 	bic.w	r3, r3, #2
 800255a:	f043 0202 	orr.w	r2, r3, #2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fa48 	bl	80029f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f023 0303 	bic.w	r3, r3, #3
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
 800257e:	e001      	b.n	8002584 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
	...

08002598 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_Start_DMA+0x1e>
 80025b2:	2302      	movs	r3, #2
 80025b4:	e0ce      	b.n	8002754 <HAL_ADC_Start_DMA+0x1bc>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d018      	beq.n	80025fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80025dc:	4b5f      	ldr	r3, [pc, #380]	; (800275c <HAL_ADC_Start_DMA+0x1c4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a5f      	ldr	r2, [pc, #380]	; (8002760 <HAL_ADC_Start_DMA+0x1c8>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	0c9a      	lsrs	r2, r3, #18
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025f0:	e002      	b.n	80025f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	3b01      	subs	r3, #1
 80025f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f9      	bne.n	80025f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260c:	d107      	bne.n	800261e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800261c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b01      	cmp	r3, #1
 800262a:	f040 8086 	bne.w	800273a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002658:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266c:	d106      	bne.n	800267c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f023 0206 	bic.w	r2, r3, #6
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
 800267a:	e002      	b.n	8002682 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <HAL_ADC_Start_DMA+0x1cc>)
 800268c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	4a35      	ldr	r2, [pc, #212]	; (8002768 <HAL_ADC_Start_DMA+0x1d0>)
 8002694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269a:	4a34      	ldr	r2, [pc, #208]	; (800276c <HAL_ADC_Start_DMA+0x1d4>)
 800269c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	4a33      	ldr	r2, [pc, #204]	; (8002770 <HAL_ADC_Start_DMA+0x1d8>)
 80026a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80026be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	334c      	adds	r3, #76	; 0x4c
 80026da:	4619      	mov	r1, r3
 80026dc:	68ba      	ldr	r2, [r7, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f000 fcc8 	bl	8003074 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10f      	bne.n	8002710 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d129      	bne.n	8002752 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	e020      	b.n	8002752 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a17      	ldr	r2, [pc, #92]	; (8002774 <HAL_ADC_Start_DMA+0x1dc>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d11b      	bne.n	8002752 <HAL_ADC_Start_DMA+0x1ba>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d114      	bne.n	8002752 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	e00b      	b.n	8002752 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f043 0210 	orr.w	r2, r3, #16
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	2000000c 	.word	0x2000000c
 8002760:	431bde83 	.word	0x431bde83
 8002764:	40012300 	.word	0x40012300
 8002768:	08002bf1 	.word	0x08002bf1
 800276c:	08002cab 	.word	0x08002cab
 8002770:	08002cc7 	.word	0x08002cc7
 8002774:	40012000 	.word	0x40012000

08002778 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1c>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e105      	b.n	80029dc <HAL_ADC_ConfigChannel+0x228>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b09      	cmp	r3, #9
 80027de:	d925      	bls.n	800282c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68d9      	ldr	r1, [r3, #12]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	3b1e      	subs	r3, #30
 80027f6:	2207      	movs	r2, #7
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43da      	mvns	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	400a      	ands	r2, r1
 8002804:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68d9      	ldr	r1, [r3, #12]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	4618      	mov	r0, r3
 8002818:	4603      	mov	r3, r0
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4403      	add	r3, r0
 800281e:	3b1e      	subs	r3, #30
 8002820:	409a      	lsls	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	e022      	b.n	8002872 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6919      	ldr	r1, [r3, #16]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	2207      	movs	r2, #7
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	400a      	ands	r2, r1
 800284e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6919      	ldr	r1, [r3, #16]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	4618      	mov	r0, r3
 8002862:	4603      	mov	r3, r0
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4403      	add	r3, r0
 8002868:	409a      	lsls	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b06      	cmp	r3, #6
 8002878:	d824      	bhi.n	80028c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	3b05      	subs	r3, #5
 800288c:	221f      	movs	r2, #31
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	400a      	ands	r2, r1
 800289a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	4618      	mov	r0, r3
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	3b05      	subs	r3, #5
 80028b6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	635a      	str	r2, [r3, #52]	; 0x34
 80028c2:	e04c      	b.n	800295e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	d824      	bhi.n	8002916 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	3b23      	subs	r3, #35	; 0x23
 80028de:	221f      	movs	r2, #31
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43da      	mvns	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	400a      	ands	r2, r1
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	3b23      	subs	r3, #35	; 0x23
 8002908:	fa00 f203 	lsl.w	r2, r0, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	631a      	str	r2, [r3, #48]	; 0x30
 8002914:	e023      	b.n	800295e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	3b41      	subs	r3, #65	; 0x41
 8002928:	221f      	movs	r2, #31
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	400a      	ands	r2, r1
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	4618      	mov	r0, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b41      	subs	r3, #65	; 0x41
 8002952:	fa00 f203 	lsl.w	r2, r0, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800295e:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <HAL_ADC_ConfigChannel+0x234>)
 8002960:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a21      	ldr	r2, [pc, #132]	; (80029ec <HAL_ADC_ConfigChannel+0x238>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d109      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1cc>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b12      	cmp	r3, #18
 8002972:	d105      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a19      	ldr	r2, [pc, #100]	; (80029ec <HAL_ADC_ConfigChannel+0x238>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d123      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x21e>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b10      	cmp	r3, #16
 8002990:	d003      	beq.n	800299a <HAL_ADC_ConfigChannel+0x1e6>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b11      	cmp	r3, #17
 8002998:	d11b      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	d111      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ae:	4b10      	ldr	r3, [pc, #64]	; (80029f0 <HAL_ADC_ConfigChannel+0x23c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a10      	ldr	r2, [pc, #64]	; (80029f4 <HAL_ADC_ConfigChannel+0x240>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	0c9a      	lsrs	r2, r3, #18
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029c4:	e002      	b.n	80029cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f9      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40012300 	.word	0x40012300
 80029ec:	40012000 	.word	0x40012000
 80029f0:	2000000c 	.word	0x2000000c
 80029f4:	431bde83 	.word	0x431bde83

080029f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a00:	4b79      	ldr	r3, [pc, #484]	; (8002be8 <ADC_Init+0x1f0>)
 8002a02:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	021a      	lsls	r2, r3, #8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6899      	ldr	r1, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	4a58      	ldr	r2, [pc, #352]	; (8002bec <ADC_Init+0x1f4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d022      	beq.n	8002ad6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6899      	ldr	r1, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ac0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6899      	ldr	r1, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	e00f      	b.n	8002af6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002af4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0202 	bic.w	r2, r2, #2
 8002b04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6899      	ldr	r1, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	7e1b      	ldrb	r3, [r3, #24]
 8002b10:	005a      	lsls	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01b      	beq.n	8002b5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b32:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002b42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	035a      	lsls	r2, r3, #13
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	e007      	b.n	8002b6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b6a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	051a      	lsls	r2, r3, #20
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ba0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6899      	ldr	r1, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002bae:	025a      	lsls	r2, r3, #9
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6899      	ldr	r1, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	029a      	lsls	r2, r3, #10
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	609a      	str	r2, [r3, #8]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	40012300 	.word	0x40012300
 8002bec:	0f000001 	.word	0x0f000001

08002bf0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d13c      	bne.n	8002c84 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d12b      	bne.n	8002c7c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d127      	bne.n	8002c7c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c32:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d006      	beq.n	8002c48 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d119      	bne.n	8002c7c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0220 	bic.w	r2, r2, #32
 8002c56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff fd7b 	bl	8002778 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c82:	e00e      	b.n	8002ca2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f7ff fd85 	bl	80027a0 <HAL_ADC_ErrorCallback>
}
 8002c96:	e004      	b.n	8002ca2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
}
 8002ca2:	bf00      	nop
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b084      	sub	sp, #16
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f7ff fd67 	bl	800278c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2240      	movs	r2, #64	; 0x40
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f043 0204 	orr.w	r2, r3, #4
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ce6:	68f8      	ldr	r0, [r7, #12]
 8002ce8:	f7ff fd5a 	bl	80027a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cec:	bf00      	nop
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <__NVIC_SetPriorityGrouping+0x44>)
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0a:	68ba      	ldr	r2, [r7, #8]
 8002d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d10:	4013      	ands	r3, r2
 8002d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d26:	4a04      	ldr	r2, [pc, #16]	; (8002d38 <__NVIC_SetPriorityGrouping+0x44>)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	60d3      	str	r3, [r2, #12]
}
 8002d2c:	bf00      	nop
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000ed00 	.word	0xe000ed00

08002d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d40:	4b04      	ldr	r3, [pc, #16]	; (8002d54 <__NVIC_GetPriorityGrouping+0x18>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	0a1b      	lsrs	r3, r3, #8
 8002d46:	f003 0307 	and.w	r3, r3, #7
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	db0b      	blt.n	8002d82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	f003 021f 	and.w	r2, r3, #31
 8002d70:	4907      	ldr	r1, [pc, #28]	; (8002d90 <__NVIC_EnableIRQ+0x38>)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	2001      	movs	r0, #1
 8002d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000e100 	.word	0xe000e100

08002d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db0a      	blt.n	8002dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	490c      	ldr	r1, [pc, #48]	; (8002de0 <__NVIC_SetPriority+0x4c>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	0112      	lsls	r2, r2, #4
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	440b      	add	r3, r1
 8002db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dbc:	e00a      	b.n	8002dd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4908      	ldr	r1, [pc, #32]	; (8002de4 <__NVIC_SetPriority+0x50>)
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	3b04      	subs	r3, #4
 8002dcc:	0112      	lsls	r2, r2, #4
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	761a      	strb	r2, [r3, #24]
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	e000e100 	.word	0xe000e100
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f1c3 0307 	rsb	r3, r3, #7
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	bf28      	it	cs
 8002e06:	2304      	movcs	r3, #4
 8002e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3304      	adds	r3, #4
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d902      	bls.n	8002e18 <NVIC_EncodePriority+0x30>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3b03      	subs	r3, #3
 8002e16:	e000      	b.n	8002e1a <NVIC_EncodePriority+0x32>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	43d9      	mvns	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	4313      	orrs	r3, r2
         );
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
	...

08002e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e60:	d301      	bcc.n	8002e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e62:	2301      	movs	r3, #1
 8002e64:	e00f      	b.n	8002e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e66:	4a0a      	ldr	r2, [pc, #40]	; (8002e90 <SysTick_Config+0x40>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e6e:	210f      	movs	r1, #15
 8002e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e74:	f7ff ff8e 	bl	8002d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e78:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <SysTick_Config+0x40>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7e:	4b04      	ldr	r3, [pc, #16]	; (8002e90 <SysTick_Config+0x40>)
 8002e80:	2207      	movs	r2, #7
 8002e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	e000e010 	.word	0xe000e010

08002e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff ff29 	bl	8002cf4 <__NVIC_SetPriorityGrouping>
}
 8002ea2:	bf00      	nop
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ebc:	f7ff ff3e 	bl	8002d3c <__NVIC_GetPriorityGrouping>
 8002ec0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68b9      	ldr	r1, [r7, #8]
 8002ec6:	6978      	ldr	r0, [r7, #20]
 8002ec8:	f7ff ff8e 	bl	8002de8 <NVIC_EncodePriority>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7ff ff5d 	bl	8002d94 <__NVIC_SetPriority>
}
 8002eda:	bf00      	nop
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	4603      	mov	r3, r0
 8002eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff ff31 	bl	8002d58 <__NVIC_EnableIRQ>
}
 8002ef6:	bf00      	nop
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b082      	sub	sp, #8
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7ff ffa2 	bl	8002e50 <SysTick_Config>
 8002f0c:	4603      	mov	r3, r0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f24:	f7ff fac4 	bl	80024b0 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d101      	bne.n	8002f34 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e099      	b.n	8003068 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0201 	bic.w	r2, r2, #1
 8002f52:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f54:	e00f      	b.n	8002f76 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f56:	f7ff faab 	bl	80024b0 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b05      	cmp	r3, #5
 8002f62:	d908      	bls.n	8002f76 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2220      	movs	r2, #32
 8002f68:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e078      	b.n	8003068 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e8      	bne.n	8002f56 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	4b38      	ldr	r3, [pc, #224]	; (8003070 <HAL_DMA_Init+0x158>)
 8002f90:	4013      	ands	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d107      	bne.n	8002fe0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	697a      	ldr	r2, [r7, #20]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f023 0307 	bic.w	r3, r3, #7
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	2b04      	cmp	r3, #4
 8003008:	d117      	bne.n	800303a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00e      	beq.n	800303a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 fa6f 	bl	8003500 <DMA_CheckFifoParam>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d008      	beq.n	800303a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2240      	movs	r2, #64	; 0x40
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003036:	2301      	movs	r3, #1
 8003038:	e016      	b.n	8003068 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fa26 	bl	8003494 <DMA_CalcBaseAndBitshift>
 8003048:	4603      	mov	r3, r0
 800304a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003050:	223f      	movs	r2, #63	; 0x3f
 8003052:	409a      	lsls	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	f010803f 	.word	0xf010803f

08003074 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
 8003080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003082:	2300      	movs	r3, #0
 8003084:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_DMA_Start_IT+0x26>
 8003096:	2302      	movs	r3, #2
 8003098:	e040      	b.n	800311c <HAL_DMA_Start_IT+0xa8>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d12f      	bne.n	800310e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2202      	movs	r2, #2
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f9b8 	bl	8003438 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	223f      	movs	r2, #63	; 0x3f
 80030ce:	409a      	lsls	r2, r3
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0216 	orr.w	r2, r2, #22
 80030e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d007      	beq.n	80030fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0208 	orr.w	r2, r2, #8
 80030fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e005      	b.n	800311a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003116:	2302      	movs	r3, #2
 8003118:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800311a:	7dfb      	ldrb	r3, [r7, #23]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800312c:	2300      	movs	r3, #0
 800312e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003130:	4b8e      	ldr	r3, [pc, #568]	; (800336c <HAL_DMA_IRQHandler+0x248>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a8e      	ldr	r2, [pc, #568]	; (8003370 <HAL_DMA_IRQHandler+0x24c>)
 8003136:	fba2 2303 	umull	r2, r3, r2, r3
 800313a:	0a9b      	lsrs	r3, r3, #10
 800313c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800314e:	2208      	movs	r2, #8
 8003150:	409a      	lsls	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4013      	ands	r3, r2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01a      	beq.n	8003190 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0204 	bic.w	r2, r2, #4
 8003176:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317c:	2208      	movs	r2, #8
 800317e:	409a      	lsls	r2, r3
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	f043 0201 	orr.w	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003194:	2201      	movs	r2, #1
 8003196:	409a      	lsls	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d012      	beq.n	80031c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00b      	beq.n	80031c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	2201      	movs	r2, #1
 80031b4:	409a      	lsls	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	f043 0202 	orr.w	r2, r3, #2
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ca:	2204      	movs	r2, #4
 80031cc:	409a      	lsls	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4013      	ands	r3, r2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d012      	beq.n	80031fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00b      	beq.n	80031fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e8:	2204      	movs	r2, #4
 80031ea:	409a      	lsls	r2, r3
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	f043 0204 	orr.w	r2, r3, #4
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003200:	2210      	movs	r2, #16
 8003202:	409a      	lsls	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d043      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b00      	cmp	r3, #0
 8003218:	d03c      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	2210      	movs	r2, #16
 8003220:	409a      	lsls	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d018      	beq.n	8003266 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d108      	bne.n	8003254 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d024      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
 8003252:	e01f      	b.n	8003294 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01b      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4798      	blx	r3
 8003264:	e016      	b.n	8003294 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003270:	2b00      	cmp	r3, #0
 8003272:	d107      	bne.n	8003284 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0208 	bic.w	r2, r2, #8
 8003282:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003298:	2220      	movs	r2, #32
 800329a:	409a      	lsls	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	4013      	ands	r3, r2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 808f 	beq.w	80033c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8087 	beq.w	80033c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ba:	2220      	movs	r2, #32
 80032bc:	409a      	lsls	r2, r3
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b05      	cmp	r3, #5
 80032cc:	d136      	bne.n	800333c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0216 	bic.w	r2, r2, #22
 80032dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	695a      	ldr	r2, [r3, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <HAL_DMA_IRQHandler+0x1da>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0208 	bic.w	r2, r2, #8
 800330c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	223f      	movs	r2, #63	; 0x3f
 8003314:	409a      	lsls	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800332e:	2b00      	cmp	r3, #0
 8003330:	d07e      	beq.n	8003430 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4798      	blx	r3
        }
        return;
 800333a:	e079      	b.n	8003430 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d01d      	beq.n	8003386 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10d      	bne.n	8003374 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335c:	2b00      	cmp	r3, #0
 800335e:	d031      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4798      	blx	r3
 8003368:	e02c      	b.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
 800336a:	bf00      	nop
 800336c:	2000000c 	.word	0x2000000c
 8003370:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d023      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	4798      	blx	r3
 8003384:	e01e      	b.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d10f      	bne.n	80033b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0210 	bic.w	r2, r2, #16
 80033a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d032      	beq.n	8003432 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d022      	beq.n	800341e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2205      	movs	r2, #5
 80033dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3301      	adds	r3, #1
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d307      	bcc.n	800340c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1f2      	bne.n	80033f0 <HAL_DMA_IRQHandler+0x2cc>
 800340a:	e000      	b.n	800340e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800340c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
 800342e:	e000      	b.n	8003432 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003430:	bf00      	nop
    }
  }
}
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003454:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d108      	bne.n	8003478 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003476:	e007      	b.n	8003488 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	60da      	str	r2, [r3, #12]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	3b10      	subs	r3, #16
 80034a4:	4a14      	ldr	r2, [pc, #80]	; (80034f8 <DMA_CalcBaseAndBitshift+0x64>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034ae:	4a13      	ldr	r2, [pc, #76]	; (80034fc <DMA_CalcBaseAndBitshift+0x68>)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	4413      	add	r3, r2
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2b03      	cmp	r3, #3
 80034c0:	d909      	bls.n	80034d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ca:	f023 0303 	bic.w	r3, r3, #3
 80034ce:	1d1a      	adds	r2, r3, #4
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	659a      	str	r2, [r3, #88]	; 0x58
 80034d4:	e007      	b.n	80034e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034de:	f023 0303 	bic.w	r3, r3, #3
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	aaaaaaab 	.word	0xaaaaaaab
 80034fc:	08010fb8 	.word	0x08010fb8

08003500 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003510:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d11f      	bne.n	800355a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b03      	cmp	r3, #3
 800351e:	d856      	bhi.n	80035ce <DMA_CheckFifoParam+0xce>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <DMA_CheckFifoParam+0x28>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	08003539 	.word	0x08003539
 800352c:	0800354b 	.word	0x0800354b
 8003530:	08003539 	.word	0x08003539
 8003534:	080035cf 	.word	0x080035cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d046      	beq.n	80035d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003548:	e043      	b.n	80035d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003552:	d140      	bne.n	80035d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003558:	e03d      	b.n	80035d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003562:	d121      	bne.n	80035a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2b03      	cmp	r3, #3
 8003568:	d837      	bhi.n	80035da <DMA_CheckFifoParam+0xda>
 800356a:	a201      	add	r2, pc, #4	; (adr r2, 8003570 <DMA_CheckFifoParam+0x70>)
 800356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003570:	08003581 	.word	0x08003581
 8003574:	08003587 	.word	0x08003587
 8003578:	08003581 	.word	0x08003581
 800357c:	08003599 	.word	0x08003599
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	73fb      	strb	r3, [r7, #15]
      break;
 8003584:	e030      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d025      	beq.n	80035de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003596:	e022      	b.n	80035de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035a0:	d11f      	bne.n	80035e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035a6:	e01c      	b.n	80035e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d903      	bls.n	80035b6 <DMA_CheckFifoParam+0xb6>
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d003      	beq.n	80035bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035b4:	e018      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	73fb      	strb	r3, [r7, #15]
      break;
 80035ba:	e015      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00e      	beq.n	80035e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	73fb      	strb	r3, [r7, #15]
      break;
 80035cc:	e00b      	b.n	80035e6 <DMA_CheckFifoParam+0xe6>
      break;
 80035ce:	bf00      	nop
 80035d0:	e00a      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      break;
 80035d2:	bf00      	nop
 80035d4:	e008      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      break;
 80035d6:	bf00      	nop
 80035d8:	e006      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      break;
 80035da:	bf00      	nop
 80035dc:	e004      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      break;
 80035de:	bf00      	nop
 80035e0:	e002      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80035e2:	bf00      	nop
 80035e4:	e000      	b.n	80035e8 <DMA_CheckFifoParam+0xe8>
      break;
 80035e6:	bf00      	nop
    }
  } 
  
  return status; 
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop

080035f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b089      	sub	sp, #36	; 0x24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003606:	2300      	movs	r3, #0
 8003608:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	e159      	b.n	80038c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003614:	2201      	movs	r2, #1
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	429a      	cmp	r2, r3
 800362e:	f040 8148 	bne.w	80038c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	2b01      	cmp	r3, #1
 800363c:	d005      	beq.n	800364a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003646:	2b02      	cmp	r3, #2
 8003648:	d130      	bne.n	80036ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	2203      	movs	r2, #3
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43db      	mvns	r3, r3
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	4013      	ands	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4313      	orrs	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003680:	2201      	movs	r2, #1
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f003 0201 	and.w	r2, r3, #1
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	2b03      	cmp	r3, #3
 80036b6:	d017      	beq.n	80036e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	2203      	movs	r2, #3
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0303 	and.w	r3, r3, #3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d123      	bne.n	800373c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	08da      	lsrs	r2, r3, #3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3208      	adds	r2, #8
 80036fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003700:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	220f      	movs	r2, #15
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	4013      	ands	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	691a      	ldr	r2, [r3, #16]
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	08da      	lsrs	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3208      	adds	r2, #8
 8003736:	69b9      	ldr	r1, [r7, #24]
 8003738:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	2203      	movs	r2, #3
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4013      	ands	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f003 0203 	and.w	r2, r3, #3
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	fa02 f303 	lsl.w	r3, r2, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80a2 	beq.w	80038c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	4b57      	ldr	r3, [pc, #348]	; (80038e0 <HAL_GPIO_Init+0x2e8>)
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	4a56      	ldr	r2, [pc, #344]	; (80038e0 <HAL_GPIO_Init+0x2e8>)
 8003788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800378c:	6453      	str	r3, [r2, #68]	; 0x44
 800378e:	4b54      	ldr	r3, [pc, #336]	; (80038e0 <HAL_GPIO_Init+0x2e8>)
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800379a:	4a52      	ldr	r2, [pc, #328]	; (80038e4 <HAL_GPIO_Init+0x2ec>)
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	089b      	lsrs	r3, r3, #2
 80037a0:	3302      	adds	r3, #2
 80037a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	220f      	movs	r2, #15
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43db      	mvns	r3, r3
 80037b8:	69ba      	ldr	r2, [r7, #24]
 80037ba:	4013      	ands	r3, r2
 80037bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a49      	ldr	r2, [pc, #292]	; (80038e8 <HAL_GPIO_Init+0x2f0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d019      	beq.n	80037fa <HAL_GPIO_Init+0x202>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a48      	ldr	r2, [pc, #288]	; (80038ec <HAL_GPIO_Init+0x2f4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <HAL_GPIO_Init+0x1fe>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a47      	ldr	r2, [pc, #284]	; (80038f0 <HAL_GPIO_Init+0x2f8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00d      	beq.n	80037f2 <HAL_GPIO_Init+0x1fa>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a46      	ldr	r2, [pc, #280]	; (80038f4 <HAL_GPIO_Init+0x2fc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d007      	beq.n	80037ee <HAL_GPIO_Init+0x1f6>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a45      	ldr	r2, [pc, #276]	; (80038f8 <HAL_GPIO_Init+0x300>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d101      	bne.n	80037ea <HAL_GPIO_Init+0x1f2>
 80037e6:	2304      	movs	r3, #4
 80037e8:	e008      	b.n	80037fc <HAL_GPIO_Init+0x204>
 80037ea:	2307      	movs	r3, #7
 80037ec:	e006      	b.n	80037fc <HAL_GPIO_Init+0x204>
 80037ee:	2303      	movs	r3, #3
 80037f0:	e004      	b.n	80037fc <HAL_GPIO_Init+0x204>
 80037f2:	2302      	movs	r3, #2
 80037f4:	e002      	b.n	80037fc <HAL_GPIO_Init+0x204>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e000      	b.n	80037fc <HAL_GPIO_Init+0x204>
 80037fa:	2300      	movs	r3, #0
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	f002 0203 	and.w	r2, r2, #3
 8003802:	0092      	lsls	r2, r2, #2
 8003804:	4093      	lsls	r3, r2
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4313      	orrs	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800380c:	4935      	ldr	r1, [pc, #212]	; (80038e4 <HAL_GPIO_Init+0x2ec>)
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	089b      	lsrs	r3, r3, #2
 8003812:	3302      	adds	r3, #2
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800381a:	4b38      	ldr	r3, [pc, #224]	; (80038fc <HAL_GPIO_Init+0x304>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	43db      	mvns	r3, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4013      	ands	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800383e:	4a2f      	ldr	r2, [pc, #188]	; (80038fc <HAL_GPIO_Init+0x304>)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003844:	4b2d      	ldr	r3, [pc, #180]	; (80038fc <HAL_GPIO_Init+0x304>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	43db      	mvns	r3, r3
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	4013      	ands	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003868:	4a24      	ldr	r2, [pc, #144]	; (80038fc <HAL_GPIO_Init+0x304>)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800386e:	4b23      	ldr	r3, [pc, #140]	; (80038fc <HAL_GPIO_Init+0x304>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003892:	4a1a      	ldr	r2, [pc, #104]	; (80038fc <HAL_GPIO_Init+0x304>)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003898:	4b18      	ldr	r3, [pc, #96]	; (80038fc <HAL_GPIO_Init+0x304>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80038bc:	4a0f      	ldr	r2, [pc, #60]	; (80038fc <HAL_GPIO_Init+0x304>)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3301      	adds	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b0f      	cmp	r3, #15
 80038cc:	f67f aea2 	bls.w	8003614 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80038d0:	bf00      	nop
 80038d2:	bf00      	nop
 80038d4:	3724      	adds	r7, #36	; 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40013800 	.word	0x40013800
 80038e8:	40020000 	.word	0x40020000
 80038ec:	40020400 	.word	0x40020400
 80038f0:	40020800 	.word	0x40020800
 80038f4:	40020c00 	.word	0x40020c00
 80038f8:	40021000 	.word	0x40021000
 80038fc:	40013c00 	.word	0x40013c00

08003900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	807b      	strh	r3, [r7, #2]
 800390c:	4613      	mov	r3, r2
 800390e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003910:	787b      	ldrb	r3, [r7, #1]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003916:	887a      	ldrh	r2, [r7, #2]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800391c:	e003      	b.n	8003926 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800391e:	887b      	ldrh	r3, [r7, #2]
 8003920:	041a      	lsls	r2, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	619a      	str	r2, [r3, #24]
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003932:	b480      	push	{r7}
 8003934:	b085      	sub	sp, #20
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	460b      	mov	r3, r1
 800393c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003944:	887a      	ldrh	r2, [r7, #2]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4013      	ands	r3, r2
 800394a:	041a      	lsls	r2, r3, #16
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	43d9      	mvns	r1, r3
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	400b      	ands	r3, r1
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	619a      	str	r2, [r3, #24]
}
 800395a:	bf00      	nop
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003966:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003968:	b08f      	sub	sp, #60	; 0x3c
 800396a:	af0a      	add	r7, sp, #40	; 0x28
 800396c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d101      	bne.n	8003978 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e10f      	b.n	8003b98 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d106      	bne.n	8003998 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f00a fe5e 	bl	800e654 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2203      	movs	r2, #3
 800399c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d102      	bne.n	80039b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f002 fe35 	bl	8006626 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	603b      	str	r3, [r7, #0]
 80039c2:	687e      	ldr	r6, [r7, #4]
 80039c4:	466d      	mov	r5, sp
 80039c6:	f106 0410 	add.w	r4, r6, #16
 80039ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80039da:	1d33      	adds	r3, r6, #4
 80039dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039de:	6838      	ldr	r0, [r7, #0]
 80039e0:	f002 fd0c 	bl	80063fc <USB_CoreInit>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2202      	movs	r2, #2
 80039ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e0d0      	b.n	8003b98 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2100      	movs	r1, #0
 80039fc:	4618      	mov	r0, r3
 80039fe:	f002 fe23 	bl	8006648 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	73fb      	strb	r3, [r7, #15]
 8003a06:	e04a      	b.n	8003a9e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4413      	add	r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	333d      	adds	r3, #61	; 0x3d
 8003a18:	2201      	movs	r2, #1
 8003a1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a1c:	7bfa      	ldrb	r2, [r7, #15]
 8003a1e:	6879      	ldr	r1, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	333c      	adds	r3, #60	; 0x3c
 8003a2c:	7bfa      	ldrb	r2, [r7, #15]
 8003a2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a30:	7bfa      	ldrb	r2, [r7, #15]
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	b298      	uxth	r0, r3
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	3344      	adds	r3, #68	; 0x44
 8003a44:	4602      	mov	r2, r0
 8003a46:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a48:	7bfa      	ldrb	r2, [r7, #15]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3340      	adds	r3, #64	; 0x40
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a5c:	7bfa      	ldrb	r2, [r7, #15]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	3348      	adds	r3, #72	; 0x48
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a70:	7bfa      	ldrb	r2, [r7, #15]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	334c      	adds	r3, #76	; 0x4c
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a84:	7bfa      	ldrb	r2, [r7, #15]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	3354      	adds	r3, #84	; 0x54
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	73fb      	strb	r3, [r7, #15]
 8003a9e:	7bfa      	ldrb	r2, [r7, #15]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d3af      	bcc.n	8003a08 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	e044      	b.n	8003b38 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003aae:	7bfa      	ldrb	r2, [r7, #15]
 8003ab0:	6879      	ldr	r1, [r7, #4]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ac4:	7bfa      	ldrb	r2, [r7, #15]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ad6:	7bfa      	ldrb	r2, [r7, #15]
 8003ad8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ada:	7bfa      	ldrb	r2, [r7, #15]
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4413      	add	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003aec:	2200      	movs	r2, #0
 8003aee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003af0:	7bfa      	ldrb	r2, [r7, #15]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b02:	2200      	movs	r2, #0
 8003b04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b06:	7bfa      	ldrb	r2, [r7, #15]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	3301      	adds	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
 8003b38:	7bfa      	ldrb	r2, [r7, #15]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d3b5      	bcc.n	8003aae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	687e      	ldr	r6, [r7, #4]
 8003b4a:	466d      	mov	r5, sp
 8003b4c:	f106 0410 	add.w	r4, r6, #16
 8003b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b60:	1d33      	adds	r3, r6, #4
 8003b62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b64:	6838      	ldr	r0, [r7, #0]
 8003b66:	f002 fdbb 	bl	80066e0 <USB_DevInit>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d005      	beq.n	8003b7c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e00d      	b.n	8003b98 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f003 ff0a 	bl	80079aa <USB_DevDisconnect>

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ba0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d101      	bne.n	8003bbc <HAL_PCD_Start+0x1c>
 8003bb8:	2302      	movs	r3, #2
 8003bba:	e020      	b.n	8003bfe <HAL_PCD_Start+0x5e>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d109      	bne.n	8003be0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d005      	beq.n	8003be0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f002 fd0d 	bl	8006604 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f003 feba 	bl	8007968 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c06:	b590      	push	{r4, r7, lr}
 8003c08:	b08d      	sub	sp, #52	; 0x34
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f003 ff78 	bl	8007b12 <USB_GetMode>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f040 848a 	bne.w	800453e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f003 fedc 	bl	80079ec <USB_ReadInterrupts>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8480 	beq.w	800453c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	0a1b      	lsrs	r3, r3, #8
 8003c46:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f003 fec9 	bl	80079ec <USB_ReadInterrupts>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d107      	bne.n	8003c74 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f002 0202 	and.w	r2, r2, #2
 8003c72:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f003 feb7 	bl	80079ec <USB_ReadInterrupts>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d161      	bne.n	8003d4c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	699a      	ldr	r2, [r3, #24]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 0210 	bic.w	r2, r2, #16
 8003c96:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f003 020f 	and.w	r2, r3, #15
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	0c5b      	lsrs	r3, r3, #17
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d124      	bne.n	8003d0e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003cca:	4013      	ands	r3, r2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d035      	beq.n	8003d3c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	091b      	lsrs	r3, r3, #4
 8003cd8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003cda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6a38      	ldr	r0, [r7, #32]
 8003ce4:	f003 fcee 	bl	80076c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003cf4:	441a      	add	r2, r3
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	6a1a      	ldr	r2, [r3, #32]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	091b      	lsrs	r3, r3, #4
 8003d02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d06:	441a      	add	r2, r3
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	621a      	str	r2, [r3, #32]
 8003d0c:	e016      	b.n	8003d3c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	0c5b      	lsrs	r3, r3, #17
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	2b06      	cmp	r3, #6
 8003d18:	d110      	bne.n	8003d3c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d20:	2208      	movs	r2, #8
 8003d22:	4619      	mov	r1, r3
 8003d24:	6a38      	ldr	r0, [r7, #32]
 8003d26:	f003 fccd 	bl	80076c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	6a1a      	ldr	r2, [r3, #32]
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d36:	441a      	add	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f042 0210 	orr.w	r2, r2, #16
 8003d4a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f003 fe4b 	bl	80079ec <USB_ReadInterrupts>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d5c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d60:	f040 80a7 	bne.w	8003eb2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f003 fe50 	bl	8007a12 <USB_ReadDevAllOutEpInterrupt>
 8003d72:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003d74:	e099      	b.n	8003eaa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 808e 	beq.w	8003e9e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f003 fe74 	bl	8007a7a <USB_ReadDevOutEPInterrupt>
 8003d92:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00c      	beq.n	8003db8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	461a      	mov	r2, r3
 8003dac:	2301      	movs	r3, #1
 8003dae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003db0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fec2 	bl	8004b3c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d00c      	beq.n	8003ddc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 ff98 	bl	8004d0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f003 0310 	and.w	r3, r3, #16
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df2:	461a      	mov	r2, r3
 8003df4:	2310      	movs	r3, #16
 8003df6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d030      	beq.n	8003e64 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e02:	6a3b      	ldr	r3, [r7, #32]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0a:	2b80      	cmp	r3, #128	; 0x80
 8003e0c:	d109      	bne.n	8003e22 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e20:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4413      	add	r3, r2
 8003e34:	3304      	adds	r3, #4
 8003e36:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	78db      	ldrb	r3, [r3, #3]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d108      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2200      	movs	r2, #0
 8003e44:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f00a fd07 	bl	800e860 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5e:	461a      	mov	r2, r3
 8003e60:	2302      	movs	r3, #2
 8003e62:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d008      	beq.n	8003e80 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	2320      	movs	r3, #32
 8003e7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d009      	beq.n	8003e9e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e96:	461a      	mov	r2, r3
 8003e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e9c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea6:	085b      	lsrs	r3, r3, #1
 8003ea8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f47f af62 	bne.w	8003d76 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f003 fd98 	bl	80079ec <USB_ReadInterrupts>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ec2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ec6:	f040 80db 	bne.w	8004080 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f003 fdb9 	bl	8007a46 <USB_ReadDevAllInEpInterrupt>
 8003ed4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003eda:	e0cd      	b.n	8004078 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80c2 	beq.w	800406c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f003 fddf 	bl	8007ab6 <USB_ReadDevInEPInterrupt>
 8003ef8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d057      	beq.n	8003fb4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69f9      	ldr	r1, [r7, #28]
 8003f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f24:	4013      	ands	r3, r2
 8003f26:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	461a      	mov	r2, r3
 8003f36:	2301      	movs	r3, #1
 8003f38:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d132      	bne.n	8003fa8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	334c      	adds	r3, #76	; 0x4c
 8003f52:	6819      	ldr	r1, [r3, #0]
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	4613      	mov	r3, r2
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4403      	add	r3, r0
 8003f62:	3348      	adds	r3, #72	; 0x48
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4419      	add	r1, r3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4403      	add	r3, r0
 8003f76:	334c      	adds	r3, #76	; 0x4c
 8003f78:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d113      	bne.n	8003fa8 <HAL_PCD_IRQHandler+0x3a2>
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f84:	4613      	mov	r3, r2
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	440b      	add	r3, r1
 8003f8e:	3354      	adds	r3, #84	; 0x54
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d108      	bne.n	8003fa8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	f003 fde6 	bl	8007b74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	4619      	mov	r1, r3
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f00a fbd1 	bl	800e756 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f003 0308 	and.w	r3, r3, #8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d008      	beq.n	8003fd0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fca:	461a      	mov	r2, r3
 8003fcc:	2308      	movs	r3, #8
 8003fce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d008      	beq.n	8003fec <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2310      	movs	r3, #16
 8003fea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d008      	beq.n	8004008 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004002:	461a      	mov	r2, r3
 8004004:	2340      	movs	r3, #64	; 0x40
 8004006:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d023      	beq.n	800405a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004012:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004014:	6a38      	ldr	r0, [r7, #32]
 8004016:	f002 fcc7 	bl	80069a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	3338      	adds	r3, #56	; 0x38
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	4413      	add	r3, r2
 800402a:	3304      	adds	r3, #4
 800402c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	78db      	ldrb	r3, [r3, #3]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d108      	bne.n	8004048 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2200      	movs	r2, #0
 800403a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	b2db      	uxtb	r3, r3
 8004040:	4619      	mov	r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f00a fc1e 	bl	800e884 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	461a      	mov	r2, r3
 8004056:	2302      	movs	r3, #2
 8004058:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004064:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fcdb 	bl	8004a22 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	3301      	adds	r3, #1
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	085b      	lsrs	r3, r3, #1
 8004076:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407a:	2b00      	cmp	r3, #0
 800407c:	f47f af2e 	bne.w	8003edc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f003 fcb1 	bl	80079ec <USB_ReadInterrupts>
 800408a:	4603      	mov	r3, r0
 800408c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004090:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004094:	d122      	bne.n	80040dc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	69fa      	ldr	r2, [r7, #28]
 80040a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d108      	bne.n	80040c6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040bc:	2100      	movs	r1, #0
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fec2 	bl	8004e48 <HAL_PCDEx_LPM_Callback>
 80040c4:	e002      	b.n	80040cc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f00a fbbc 	bl	800e844 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80040da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f003 fc83 	bl	80079ec <USB_ReadInterrupts>
 80040e6:	4603      	mov	r3, r0
 80040e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040f0:	d112      	bne.n	8004118 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d102      	bne.n	8004108 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f00a fb78 	bl	800e7f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695a      	ldr	r2, [r3, #20]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004116:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f003 fc65 	bl	80079ec <USB_ReadInterrupts>
 8004122:	4603      	mov	r3, r0
 8004124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800412c:	f040 80b7 	bne.w	800429e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2110      	movs	r1, #16
 800414a:	4618      	mov	r0, r3
 800414c:	f002 fc2c 	bl	80069a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004150:	2300      	movs	r3, #0
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004154:	e046      	b.n	80041e4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004162:	461a      	mov	r2, r3
 8004164:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004168:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800417a:	0151      	lsls	r1, r2, #5
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	440a      	add	r2, r1
 8004180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004184:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004188:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418c:	015a      	lsls	r2, r3, #5
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	4413      	add	r3, r2
 8004192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004196:	461a      	mov	r2, r3
 8004198:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800419c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a0:	015a      	lsls	r2, r3, #5
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	4413      	add	r3, r2
 80041a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ae:	0151      	lsls	r1, r2, #5
 80041b0:	69fa      	ldr	r2, [r7, #28]
 80041b2:	440a      	add	r2, r1
 80041b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041bc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80041be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041c0:	015a      	lsls	r2, r3, #5
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	4413      	add	r3, r2
 80041c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ce:	0151      	lsls	r1, r2, #5
 80041d0:	69fa      	ldr	r2, [r7, #28]
 80041d2:	440a      	add	r2, r1
 80041d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041dc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	3301      	adds	r3, #1
 80041e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d3b3      	bcc.n	8004156 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	69fa      	ldr	r2, [r7, #28]
 80041f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041fc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004200:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	2b00      	cmp	r3, #0
 8004208:	d016      	beq.n	8004238 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800421a:	f043 030b 	orr.w	r3, r3, #11
 800421e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004230:	f043 030b 	orr.w	r3, r3, #11
 8004234:	6453      	str	r3, [r2, #68]	; 0x44
 8004236:	e015      	b.n	8004264 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	69fa      	ldr	r2, [r7, #28]
 8004242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004246:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800424a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800424e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	69fa      	ldr	r2, [r7, #28]
 800425a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425e:	f043 030b 	orr.w	r3, r3, #11
 8004262:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004272:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004276:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004288:	461a      	mov	r2, r3
 800428a:	f003 fc73 	bl	8007b74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800429c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f003 fba2 	bl	80079ec <USB_ReadInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b2:	d124      	bne.n	80042fe <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f003 fc38 	bl	8007b2e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f002 fbed 	bl	8006aa2 <USB_GetDevSpeed>
 80042c8:	4603      	mov	r3, r0
 80042ca:	461a      	mov	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681c      	ldr	r4, [r3, #0]
 80042d4:	f001 f9e8 	bl	80056a8 <HAL_RCC_GetHCLKFreq>
 80042d8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	461a      	mov	r2, r3
 80042e2:	4620      	mov	r0, r4
 80042e4:	f002 f8ec 	bl	80064c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f00a fa5c 	bl	800e7a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695a      	ldr	r2, [r3, #20]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80042fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4618      	mov	r0, r3
 8004304:	f003 fb72 	bl	80079ec <USB_ReadInterrupts>
 8004308:	4603      	mov	r3, r0
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b08      	cmp	r3, #8
 8004310:	d10a      	bne.n	8004328 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	f00a fa39 	bl	800e78a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695a      	ldr	r2, [r3, #20]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f002 0208 	and.w	r2, r2, #8
 8004326:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4618      	mov	r0, r3
 800432e:	f003 fb5d 	bl	80079ec <USB_ReadInterrupts>
 8004332:	4603      	mov	r3, r0
 8004334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004338:	2b80      	cmp	r3, #128	; 0x80
 800433a:	d122      	bne.n	8004382 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004348:	2301      	movs	r3, #1
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
 800434c:	e014      	b.n	8004378 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004352:	4613      	mov	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b01      	cmp	r3, #1
 8004364:	d105      	bne.n	8004372 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	b2db      	uxtb	r3, r3
 800436a:	4619      	mov	r1, r3
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fb27 	bl	80049c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	3301      	adds	r3, #1
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800437e:	429a      	cmp	r2, r3
 8004380:	d3e5      	bcc.n	800434e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f003 fb30 	bl	80079ec <USB_ReadInterrupts>
 800438c:	4603      	mov	r3, r0
 800438e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004396:	d13b      	bne.n	8004410 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004398:	2301      	movs	r3, #1
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
 800439c:	e02b      	b.n	80043f6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800439e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b2:	4613      	mov	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	440b      	add	r3, r1
 80043bc:	3340      	adds	r3, #64	; 0x40
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d115      	bne.n	80043f0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80043c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	da12      	bge.n	80043f0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ce:	4613      	mov	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	333f      	adds	r3, #63	; 0x3f
 80043da:	2201      	movs	r2, #1
 80043dc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	4619      	mov	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fae8 	bl	80049c0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	3301      	adds	r3, #1
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d3ce      	bcc.n	800439e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800440e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f003 fae9 	bl	80079ec <USB_ReadInterrupts>
 800441a:	4603      	mov	r3, r0
 800441c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004420:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004424:	d155      	bne.n	80044d2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004426:	2301      	movs	r3, #1
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
 800442a:	e045      	b.n	80044b8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004440:	4613      	mov	r3, r2
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4413      	add	r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d12e      	bne.n	80044b2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004454:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004456:	2b00      	cmp	r3, #0
 8004458:	da2b      	bge.n	80044b2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004466:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800446a:	429a      	cmp	r2, r3
 800446c:	d121      	bne.n	80044b2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800446e:	6879      	ldr	r1, [r7, #4]
 8004470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004472:	4613      	mov	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	4413      	add	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	440b      	add	r3, r1
 800447c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004480:	2201      	movs	r2, #1
 8004482:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	69fa      	ldr	r2, [r7, #28]
 80044a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ae:	6053      	str	r3, [r2, #4]
            break;
 80044b0:	e007      	b.n	80044c2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	3301      	adds	r3, #1
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044be:	429a      	cmp	r2, r3
 80044c0:	d3b4      	bcc.n	800442c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80044d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4618      	mov	r0, r3
 80044d8:	f003 fa88 	bl	80079ec <USB_ReadInterrupts>
 80044dc:	4603      	mov	r3, r0
 80044de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80044e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e6:	d10a      	bne.n	80044fe <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f00a f9dd 	bl	800e8a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80044fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f003 fa72 	bl	80079ec <USB_ReadInterrupts>
 8004508:	4603      	mov	r3, r0
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b04      	cmp	r3, #4
 8004510:	d115      	bne.n	800453e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	f003 0304 	and.w	r3, r3, #4
 8004520:	2b00      	cmp	r3, #0
 8004522:	d002      	beq.n	800452a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f00a f9cd 	bl	800e8c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6859      	ldr	r1, [r3, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
 800453a:	e000      	b.n	800453e <HAL_PCD_IRQHandler+0x938>
      return;
 800453c:	bf00      	nop
    }
  }
}
 800453e:	3734      	adds	r7, #52	; 0x34
 8004540:	46bd      	mov	sp, r7
 8004542:	bd90      	pop	{r4, r7, pc}

08004544 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004556:	2b01      	cmp	r3, #1
 8004558:	d101      	bne.n	800455e <HAL_PCD_SetAddress+0x1a>
 800455a:	2302      	movs	r3, #2
 800455c:	e013      	b.n	8004586 <HAL_PCD_SetAddress+0x42>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	78fa      	ldrb	r2, [r7, #3]
 800456a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	78fa      	ldrb	r2, [r7, #3]
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f003 f9d0 	bl	800791c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b084      	sub	sp, #16
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	4608      	mov	r0, r1
 8004598:	4611      	mov	r1, r2
 800459a:	461a      	mov	r2, r3
 800459c:	4603      	mov	r3, r0
 800459e:	70fb      	strb	r3, [r7, #3]
 80045a0:	460b      	mov	r3, r1
 80045a2:	803b      	strh	r3, [r7, #0]
 80045a4:	4613      	mov	r3, r2
 80045a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	da0f      	bge.n	80045d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	f003 020f 	and.w	r2, r3, #15
 80045ba:	4613      	mov	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	4413      	add	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	3338      	adds	r3, #56	; 0x38
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	3304      	adds	r3, #4
 80045ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	705a      	strb	r2, [r3, #1]
 80045d2:	e00f      	b.n	80045f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045d4:	78fb      	ldrb	r3, [r7, #3]
 80045d6:	f003 020f 	and.w	r2, r3, #15
 80045da:	4613      	mov	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4413      	add	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	4413      	add	r3, r2
 80045ea:	3304      	adds	r3, #4
 80045ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80045f4:	78fb      	ldrb	r3, [r7, #3]
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	b2da      	uxtb	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004600:	883a      	ldrh	r2, [r7, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	78ba      	ldrb	r2, [r7, #2]
 800460a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d004      	beq.n	800461e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800461e:	78bb      	ldrb	r3, [r7, #2]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d102      	bne.n	800462a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_PCD_EP_Open+0xaa>
 8004634:	2302      	movs	r3, #2
 8004636:	e00e      	b.n	8004656 <HAL_PCD_EP_Open+0xc8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	68f9      	ldr	r1, [r7, #12]
 8004646:	4618      	mov	r0, r3
 8004648:	f002 fa50 	bl	8006aec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004654:	7afb      	ldrb	r3, [r7, #11]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	460b      	mov	r3, r1
 8004668:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800466a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800466e:	2b00      	cmp	r3, #0
 8004670:	da0f      	bge.n	8004692 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	f003 020f 	and.w	r2, r3, #15
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	3338      	adds	r3, #56	; 0x38
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	3304      	adds	r3, #4
 8004688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	705a      	strb	r2, [r3, #1]
 8004690:	e00f      	b.n	80046b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	f003 020f 	and.w	r2, r3, #15
 8004698:	4613      	mov	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	4413      	add	r3, r2
 80046a8:	3304      	adds	r3, #4
 80046aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046b2:	78fb      	ldrb	r3, [r7, #3]
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d101      	bne.n	80046cc <HAL_PCD_EP_Close+0x6e>
 80046c8:	2302      	movs	r3, #2
 80046ca:	e00e      	b.n	80046ea <HAL_PCD_EP_Close+0x8c>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68f9      	ldr	r1, [r7, #12]
 80046da:	4618      	mov	r0, r3
 80046dc:	f002 fa8e 	bl	8006bfc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b086      	sub	sp, #24
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	60f8      	str	r0, [r7, #12]
 80046fa:	607a      	str	r2, [r7, #4]
 80046fc:	603b      	str	r3, [r7, #0]
 80046fe:	460b      	mov	r3, r1
 8004700:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004702:	7afb      	ldrb	r3, [r7, #11]
 8004704:	f003 020f 	and.w	r2, r3, #15
 8004708:	4613      	mov	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	3304      	adds	r3, #4
 800471a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	2200      	movs	r2, #0
 800472c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2200      	movs	r2, #0
 8004732:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004734:	7afb      	ldrb	r3, [r7, #11]
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	b2da      	uxtb	r2, r3
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d102      	bne.n	800474e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800474e:	7afb      	ldrb	r3, [r7, #11]
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	2b00      	cmp	r3, #0
 8004756:	d109      	bne.n	800476c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	461a      	mov	r2, r3
 8004764:	6979      	ldr	r1, [r7, #20]
 8004766:	f002 fd6d 	bl	8007244 <USB_EP0StartXfer>
 800476a:	e008      	b.n	800477e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	b2db      	uxtb	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	6979      	ldr	r1, [r7, #20]
 800477a:	f002 fb1b 	bl	8006db4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	460b      	mov	r3, r1
 8004792:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004794:	78fb      	ldrb	r3, [r7, #3]
 8004796:	f003 020f 	and.w	r2, r3, #15
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80047aa:	681b      	ldr	r3, [r3, #0]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	603b      	str	r3, [r7, #0]
 80047c4:	460b      	mov	r3, r1
 80047c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047c8:	7afb      	ldrb	r3, [r7, #11]
 80047ca:	f003 020f 	and.w	r2, r3, #15
 80047ce:	4613      	mov	r3, r2
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	3338      	adds	r3, #56	; 0x38
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	3304      	adds	r3, #4
 80047de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2200      	movs	r2, #0
 80047f0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	2201      	movs	r2, #1
 80047f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047f8:	7afb      	ldrb	r3, [r7, #11]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d102      	bne.n	8004812 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004812:	7afb      	ldrb	r3, [r7, #11]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	2b00      	cmp	r3, #0
 800481a:	d109      	bne.n	8004830 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	461a      	mov	r2, r3
 8004828:	6979      	ldr	r1, [r7, #20]
 800482a:	f002 fd0b 	bl	8007244 <USB_EP0StartXfer>
 800482e:	e008      	b.n	8004842 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	6979      	ldr	r1, [r7, #20]
 800483e:	f002 fab9 	bl	8006db4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3718      	adds	r7, #24
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	460b      	mov	r3, r1
 8004856:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	f003 020f 	and.w	r2, r3, #15
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	429a      	cmp	r2, r3
 8004864:	d901      	bls.n	800486a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e050      	b.n	800490c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800486a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800486e:	2b00      	cmp	r3, #0
 8004870:	da0f      	bge.n	8004892 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	f003 020f 	and.w	r2, r3, #15
 8004878:	4613      	mov	r3, r2
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	3338      	adds	r3, #56	; 0x38
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	4413      	add	r3, r2
 8004886:	3304      	adds	r3, #4
 8004888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	705a      	strb	r2, [r3, #1]
 8004890:	e00d      	b.n	80048ae <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004892:	78fa      	ldrb	r2, [r7, #3]
 8004894:	4613      	mov	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	4413      	add	r3, r2
 80048a4:	3304      	adds	r3, #4
 80048a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2201      	movs	r2, #1
 80048b2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d101      	bne.n	80048ce <HAL_PCD_EP_SetStall+0x82>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e01e      	b.n	800490c <HAL_PCD_EP_SetStall+0xc0>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68f9      	ldr	r1, [r7, #12]
 80048dc:	4618      	mov	r0, r3
 80048de:	f002 ff49 	bl	8007774 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	b2d9      	uxtb	r1, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048fc:	461a      	mov	r2, r3
 80048fe:	f003 f939 	bl	8007b74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3710      	adds	r7, #16
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	f003 020f 	and.w	r2, r3, #15
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	429a      	cmp	r2, r3
 800492c:	d901      	bls.n	8004932 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e042      	b.n	80049b8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004936:	2b00      	cmp	r3, #0
 8004938:	da0f      	bge.n	800495a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	f003 020f 	and.w	r2, r3, #15
 8004940:	4613      	mov	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	3338      	adds	r3, #56	; 0x38
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4413      	add	r3, r2
 800494e:	3304      	adds	r3, #4
 8004950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	705a      	strb	r2, [r3, #1]
 8004958:	e00f      	b.n	800497a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800495a:	78fb      	ldrb	r3, [r7, #3]
 800495c:	f003 020f 	and.w	r2, r3, #15
 8004960:	4613      	mov	r3, r2
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	4413      	add	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	4413      	add	r3, r2
 8004970:	3304      	adds	r3, #4
 8004972:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	b2da      	uxtb	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_PCD_EP_ClrStall+0x86>
 8004996:	2302      	movs	r3, #2
 8004998:	e00e      	b.n	80049b8 <HAL_PCD_EP_ClrStall+0xa4>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f002 ff51 	bl	8007850 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	460b      	mov	r3, r1
 80049ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80049cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	da0c      	bge.n	80049ee <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	f003 020f 	and.w	r2, r3, #15
 80049da:	4613      	mov	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	4413      	add	r3, r2
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	3338      	adds	r3, #56	; 0x38
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	4413      	add	r3, r2
 80049e8:	3304      	adds	r3, #4
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e00c      	b.n	8004a08 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ee:	78fb      	ldrb	r3, [r7, #3]
 80049f0:	f003 020f 	and.w	r2, r3, #15
 80049f4:	4613      	mov	r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	4413      	add	r3, r2
 8004a04:	3304      	adds	r3, #4
 8004a06:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68f9      	ldr	r1, [r7, #12]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f002 fd70 	bl	80074f4 <USB_EPStopXfer>
 8004a14:	4603      	mov	r3, r0
 8004a16:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a18:	7afb      	ldrb	r3, [r7, #11]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a22:	b580      	push	{r7, lr}
 8004a24:	b08a      	sub	sp, #40	; 0x28
 8004a26:	af02      	add	r7, sp, #8
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	3338      	adds	r3, #56	; 0x38
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	4413      	add	r3, r2
 8004a46:	3304      	adds	r3, #4
 8004a48:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6a1a      	ldr	r2, [r3, #32]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d901      	bls.n	8004a5a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e06c      	b.n	8004b34 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d902      	bls.n	8004a76 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	3303      	adds	r3, #3
 8004a7a:	089b      	lsrs	r3, r3, #2
 8004a7c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a7e:	e02b      	b.n	8004ad8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d902      	bls.n	8004a9c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	3303      	adds	r3, #3
 8004aa0:	089b      	lsrs	r3, r3, #2
 8004aa2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6919      	ldr	r1, [r3, #16]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	4603      	mov	r3, r0
 8004aba:	6978      	ldr	r0, [r7, #20]
 8004abc:	f002 fdc4 	bl	8007648 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	441a      	add	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	6a1a      	ldr	r2, [r3, #32]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	441a      	add	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	015a      	lsls	r2, r3, #5
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	4413      	add	r3, r2
 8004ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d809      	bhi.n	8004b02 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	6a1a      	ldr	r2, [r3, #32]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d203      	bcs.n	8004b02 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1be      	bne.n	8004a80 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d811      	bhi.n	8004b32 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	2201      	movs	r2, #1
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	43db      	mvns	r3, r3
 8004b28:	6939      	ldr	r1, [r7, #16]
 8004b2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b2e:	4013      	ands	r3, r2
 8004b30:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3720      	adds	r7, #32
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	333c      	adds	r3, #60	; 0x3c
 8004b54:	3304      	adds	r3, #4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d17b      	bne.n	8004c6a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d015      	beq.n	8004ba8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	4a61      	ldr	r2, [pc, #388]	; (8004d04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	f240 80b9 	bls.w	8004cf8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80b3 	beq.w	8004cf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ba4:	6093      	str	r3, [r2, #8]
 8004ba6:	e0a7      	b.n	8004cf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f003 0320 	and.w	r3, r3, #32
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	015a      	lsls	r2, r3, #5
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	4413      	add	r3, r2
 8004bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bbe:	461a      	mov	r2, r3
 8004bc0:	2320      	movs	r3, #32
 8004bc2:	6093      	str	r3, [r2, #8]
 8004bc4:	e098      	b.n	8004cf8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f040 8093 	bne.w	8004cf8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	4a4b      	ldr	r2, [pc, #300]	; (8004d04 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d90f      	bls.n	8004bfa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf6:	6093      	str	r3, [r2, #8]
 8004bf8:	e07e      	b.n	8004cf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4413      	add	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	0159      	lsls	r1, r3, #5
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	440b      	add	r3, r1
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c26:	1ad2      	subs	r2, r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d114      	bne.n	8004c5c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c44:	461a      	mov	r2, r3
 8004c46:	2101      	movs	r1, #1
 8004c48:	f002 ff94 	bl	8007b74 <USB_EP0_OutStart>
 8004c4c:	e006      	b.n	8004c5c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	691a      	ldr	r2, [r3, #16]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	441a      	add	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	4619      	mov	r1, r3
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f009 fd5c 	bl	800e720 <HAL_PCD_DataOutStageCallback>
 8004c68:	e046      	b.n	8004cf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	4a26      	ldr	r2, [pc, #152]	; (8004d08 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d124      	bne.n	8004cbc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c88:	461a      	mov	r2, r3
 8004c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c8e:	6093      	str	r3, [r2, #8]
 8004c90:	e032      	b.n	8004cf8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca8:	461a      	mov	r2, r3
 8004caa:	2320      	movs	r3, #32
 8004cac:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f009 fd33 	bl	800e720 <HAL_PCD_DataOutStageCallback>
 8004cba:	e01d      	b.n	8004cf8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d114      	bne.n	8004cec <PCD_EP_OutXfrComplete_int+0x1b0>
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	440b      	add	r3, r1
 8004cd0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d108      	bne.n	8004cec <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6818      	ldr	r0, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	f002 ff44 	bl	8007b74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f009 fd14 	bl	800e720 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3720      	adds	r7, #32
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	4f54300a 	.word	0x4f54300a
 8004d08:	4f54310a 	.word	0x4f54310a

08004d0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	333c      	adds	r3, #60	; 0x3c
 8004d24:	3304      	adds	r3, #4
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	015a      	lsls	r2, r3, #5
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	4413      	add	r3, r2
 8004d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4a15      	ldr	r2, [pc, #84]	; (8004d94 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d90e      	bls.n	8004d60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d009      	beq.n	8004d60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f009 fccb 	bl	800e6fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4a0a      	ldr	r2, [pc, #40]	; (8004d94 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d90c      	bls.n	8004d88 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d108      	bne.n	8004d88 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d80:	461a      	mov	r2, r3
 8004d82:	2101      	movs	r1, #1
 8004d84:	f002 fef6 	bl	8007b74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	4f54300a 	.word	0x4f54300a

08004d98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
 8004da4:	4613      	mov	r3, r2
 8004da6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004db0:	78fb      	ldrb	r3, [r7, #3]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d107      	bne.n	8004dc6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004db6:	883b      	ldrh	r3, [r7, #0]
 8004db8:	0419      	lsls	r1, r3, #16
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28
 8004dc4:	e028      	b.n	8004e18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	0c1b      	lsrs	r3, r3, #16
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	73fb      	strb	r3, [r7, #15]
 8004dd8:	e00d      	b.n	8004df6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	3340      	adds	r3, #64	; 0x40
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	0c1b      	lsrs	r3, r3, #16
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	4413      	add	r3, r2
 8004dee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	3301      	adds	r3, #1
 8004df4:	73fb      	strb	r3, [r7, #15]
 8004df6:	7bfa      	ldrb	r2, [r7, #15]
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d3ec      	bcc.n	8004dda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e00:	883b      	ldrh	r3, [r7, #0]
 8004e02:	0418      	lsls	r0, r3, #16
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6819      	ldr	r1, [r3, #0]
 8004e08:	78fb      	ldrb	r3, [r7, #3]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	4302      	orrs	r2, r0
 8004e10:	3340      	adds	r3, #64	; 0x40
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	887a      	ldrh	r2, [r7, #2]
 8004e38:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	460b      	mov	r3, r1
 8004e52:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e267      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d075      	beq.n	8004f6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e7e:	4b88      	ldr	r3, [pc, #544]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d00c      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e8a:	4b85      	ldr	r3, [pc, #532]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d112      	bne.n	8004ebc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e96:	4b82      	ldr	r3, [pc, #520]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea2:	d10b      	bne.n	8004ebc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea4:	4b7e      	ldr	r3, [pc, #504]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d05b      	beq.n	8004f68 <HAL_RCC_OscConfig+0x108>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d157      	bne.n	8004f68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e242      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec4:	d106      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x74>
 8004ec6:	4b76      	ldr	r3, [pc, #472]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a75      	ldr	r2, [pc, #468]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e01d      	b.n	8004f10 <HAL_RCC_OscConfig+0xb0>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004edc:	d10c      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x98>
 8004ede:	4b70      	ldr	r3, [pc, #448]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a6f      	ldr	r2, [pc, #444]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	4b6d      	ldr	r3, [pc, #436]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a6c      	ldr	r2, [pc, #432]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e00b      	b.n	8004f10 <HAL_RCC_OscConfig+0xb0>
 8004ef8:	4b69      	ldr	r3, [pc, #420]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a68      	ldr	r2, [pc, #416]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f02:	6013      	str	r3, [r2, #0]
 8004f04:	4b66      	ldr	r3, [pc, #408]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a65      	ldr	r2, [pc, #404]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d013      	beq.n	8004f40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f18:	f7fd faca 	bl	80024b0 <HAL_GetTick>
 8004f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	e008      	b.n	8004f32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f20:	f7fd fac6 	bl	80024b0 <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b64      	cmp	r3, #100	; 0x64
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e207      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f32:	4b5b      	ldr	r3, [pc, #364]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d0f0      	beq.n	8004f20 <HAL_RCC_OscConfig+0xc0>
 8004f3e:	e014      	b.n	8004f6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f40:	f7fd fab6 	bl	80024b0 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f48:	f7fd fab2 	bl	80024b0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b64      	cmp	r3, #100	; 0x64
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e1f3      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f5a:	4b51      	ldr	r3, [pc, #324]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0xe8>
 8004f66:	e000      	b.n	8004f6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d063      	beq.n	800503e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f76:	4b4a      	ldr	r3, [pc, #296]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 030c 	and.w	r3, r3, #12
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00b      	beq.n	8004f9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f82:	4b47      	ldr	r3, [pc, #284]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d11c      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f8e:	4b44      	ldr	r3, [pc, #272]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d116      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f9a:	4b41      	ldr	r3, [pc, #260]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d005      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x152>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d001      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e1c7      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb2:	4b3b      	ldr	r3, [pc, #236]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	4937      	ldr	r1, [pc, #220]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fc6:	e03a      	b.n	800503e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d020      	beq.n	8005012 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fd0:	4b34      	ldr	r3, [pc, #208]	; (80050a4 <HAL_RCC_OscConfig+0x244>)
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd6:	f7fd fa6b 	bl	80024b0 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fdc:	e008      	b.n	8004ff0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fde:	f7fd fa67 	bl	80024b0 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d901      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e1a8      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff0:	4b2b      	ldr	r3, [pc, #172]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0f0      	beq.n	8004fde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffc:	4b28      	ldr	r3, [pc, #160]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4925      	ldr	r1, [pc, #148]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 800500c:	4313      	orrs	r3, r2
 800500e:	600b      	str	r3, [r1, #0]
 8005010:	e015      	b.n	800503e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005012:	4b24      	ldr	r3, [pc, #144]	; (80050a4 <HAL_RCC_OscConfig+0x244>)
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005018:	f7fd fa4a 	bl	80024b0 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501e:	e008      	b.n	8005032 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005020:	f7fd fa46 	bl	80024b0 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d901      	bls.n	8005032 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e187      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005032:	4b1b      	ldr	r3, [pc, #108]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d036      	beq.n	80050b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005052:	4b15      	ldr	r3, [pc, #84]	; (80050a8 <HAL_RCC_OscConfig+0x248>)
 8005054:	2201      	movs	r2, #1
 8005056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005058:	f7fd fa2a 	bl	80024b0 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505e:	e008      	b.n	8005072 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005060:	f7fd fa26 	bl	80024b0 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e167      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005072:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <HAL_RCC_OscConfig+0x240>)
 8005074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0f0      	beq.n	8005060 <HAL_RCC_OscConfig+0x200>
 800507e:	e01b      	b.n	80050b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005080:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <HAL_RCC_OscConfig+0x248>)
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005086:	f7fd fa13 	bl	80024b0 <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800508c:	e00e      	b.n	80050ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800508e:	f7fd fa0f 	bl	80024b0 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	2b02      	cmp	r3, #2
 800509a:	d907      	bls.n	80050ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800509c:	2303      	movs	r3, #3
 800509e:	e150      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
 80050a0:	40023800 	.word	0x40023800
 80050a4:	42470000 	.word	0x42470000
 80050a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ac:	4b88      	ldr	r3, [pc, #544]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 80050ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1ea      	bne.n	800508e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8097 	beq.w	80051f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050c6:	2300      	movs	r3, #0
 80050c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ca:	4b81      	ldr	r3, [pc, #516]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10f      	bne.n	80050f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d6:	2300      	movs	r3, #0
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	4b7d      	ldr	r3, [pc, #500]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	4a7c      	ldr	r2, [pc, #496]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 80050e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e4:	6413      	str	r3, [r2, #64]	; 0x40
 80050e6:	4b7a      	ldr	r3, [pc, #488]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ee:	60bb      	str	r3, [r7, #8]
 80050f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050f2:	2301      	movs	r3, #1
 80050f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f6:	4b77      	ldr	r3, [pc, #476]	; (80052d4 <HAL_RCC_OscConfig+0x474>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d118      	bne.n	8005134 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005102:	4b74      	ldr	r3, [pc, #464]	; (80052d4 <HAL_RCC_OscConfig+0x474>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a73      	ldr	r2, [pc, #460]	; (80052d4 <HAL_RCC_OscConfig+0x474>)
 8005108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800510c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800510e:	f7fd f9cf 	bl	80024b0 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005116:	f7fd f9cb 	bl	80024b0 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e10c      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005128:	4b6a      	ldr	r3, [pc, #424]	; (80052d4 <HAL_RCC_OscConfig+0x474>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0f0      	beq.n	8005116 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d106      	bne.n	800514a <HAL_RCC_OscConfig+0x2ea>
 800513c:	4b64      	ldr	r3, [pc, #400]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 800513e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005140:	4a63      	ldr	r2, [pc, #396]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	6713      	str	r3, [r2, #112]	; 0x70
 8005148:	e01c      	b.n	8005184 <HAL_RCC_OscConfig+0x324>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	2b05      	cmp	r3, #5
 8005150:	d10c      	bne.n	800516c <HAL_RCC_OscConfig+0x30c>
 8005152:	4b5f      	ldr	r3, [pc, #380]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005156:	4a5e      	ldr	r2, [pc, #376]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005158:	f043 0304 	orr.w	r3, r3, #4
 800515c:	6713      	str	r3, [r2, #112]	; 0x70
 800515e:	4b5c      	ldr	r3, [pc, #368]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	4a5b      	ldr	r2, [pc, #364]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005164:	f043 0301 	orr.w	r3, r3, #1
 8005168:	6713      	str	r3, [r2, #112]	; 0x70
 800516a:	e00b      	b.n	8005184 <HAL_RCC_OscConfig+0x324>
 800516c:	4b58      	ldr	r3, [pc, #352]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 800516e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005170:	4a57      	ldr	r2, [pc, #348]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005172:	f023 0301 	bic.w	r3, r3, #1
 8005176:	6713      	str	r3, [r2, #112]	; 0x70
 8005178:	4b55      	ldr	r3, [pc, #340]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	4a54      	ldr	r2, [pc, #336]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 800517e:	f023 0304 	bic.w	r3, r3, #4
 8005182:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d015      	beq.n	80051b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800518c:	f7fd f990 	bl	80024b0 <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005192:	e00a      	b.n	80051aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005194:	f7fd f98c 	bl	80024b0 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	f241 3288 	movw	r2, #5000	; 0x1388
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e0cb      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051aa:	4b49      	ldr	r3, [pc, #292]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 80051ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d0ee      	beq.n	8005194 <HAL_RCC_OscConfig+0x334>
 80051b6:	e014      	b.n	80051e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b8:	f7fd f97a 	bl	80024b0 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051c0:	f7fd f976 	bl	80024b0 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e0b5      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d6:	4b3e      	ldr	r3, [pc, #248]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 80051d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1ee      	bne.n	80051c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d105      	bne.n	80051f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e8:	4b39      	ldr	r3, [pc, #228]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 80051ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ec:	4a38      	ldr	r2, [pc, #224]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 80051ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 80a1 	beq.w	8005340 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051fe:	4b34      	ldr	r3, [pc, #208]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 030c 	and.w	r3, r3, #12
 8005206:	2b08      	cmp	r3, #8
 8005208:	d05c      	beq.n	80052c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	2b02      	cmp	r3, #2
 8005210:	d141      	bne.n	8005296 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005212:	4b31      	ldr	r3, [pc, #196]	; (80052d8 <HAL_RCC_OscConfig+0x478>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005218:	f7fd f94a 	bl	80024b0 <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005220:	f7fd f946 	bl	80024b0 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e087      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005232:	4b27      	ldr	r3, [pc, #156]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f0      	bne.n	8005220 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69da      	ldr	r2, [r3, #28]
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	019b      	lsls	r3, r3, #6
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005254:	085b      	lsrs	r3, r3, #1
 8005256:	3b01      	subs	r3, #1
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	491b      	ldr	r1, [pc, #108]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005268:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <HAL_RCC_OscConfig+0x478>)
 800526a:	2201      	movs	r2, #1
 800526c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526e:	f7fd f91f 	bl	80024b0 <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005276:	f7fd f91b 	bl	80024b0 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e05c      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005288:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0f0      	beq.n	8005276 <HAL_RCC_OscConfig+0x416>
 8005294:	e054      	b.n	8005340 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005296:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <HAL_RCC_OscConfig+0x478>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800529c:	f7fd f908 	bl	80024b0 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052a4:	f7fd f904 	bl	80024b0 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e045      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052b6:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <HAL_RCC_OscConfig+0x470>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0x444>
 80052c2:	e03d      	b.n	8005340 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d107      	bne.n	80052dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e038      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
 80052d0:	40023800 	.word	0x40023800
 80052d4:	40007000 	.word	0x40007000
 80052d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052dc:	4b1b      	ldr	r3, [pc, #108]	; (800534c <HAL_RCC_OscConfig+0x4ec>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d028      	beq.n	800533c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d121      	bne.n	800533c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005302:	429a      	cmp	r2, r3
 8005304:	d11a      	bne.n	800533c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800530c:	4013      	ands	r3, r2
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005314:	4293      	cmp	r3, r2
 8005316:	d111      	bne.n	800533c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	3b01      	subs	r3, #1
 8005326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005328:	429a      	cmp	r2, r3
 800532a:	d107      	bne.n	800533c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005338:	429a      	cmp	r2, r3
 800533a:	d001      	beq.n	8005340 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3718      	adds	r7, #24
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40023800 	.word	0x40023800

08005350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0cc      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005364:	4b68      	ldr	r3, [pc, #416]	; (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	683a      	ldr	r2, [r7, #0]
 800536e:	429a      	cmp	r2, r3
 8005370:	d90c      	bls.n	800538c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005372:	4b65      	ldr	r3, [pc, #404]	; (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800537a:	4b63      	ldr	r3, [pc, #396]	; (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d001      	beq.n	800538c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0b8      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d020      	beq.n	80053da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053a4:	4b59      	ldr	r3, [pc, #356]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	4a58      	ldr	r2, [pc, #352]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053bc:	4b53      	ldr	r3, [pc, #332]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	4a52      	ldr	r2, [pc, #328]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053c8:	4b50      	ldr	r3, [pc, #320]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	494d      	ldr	r1, [pc, #308]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d044      	beq.n	8005470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d107      	bne.n	80053fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ee:	4b47      	ldr	r3, [pc, #284]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d119      	bne.n	800542e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e07f      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	2b02      	cmp	r3, #2
 8005404:	d003      	beq.n	800540e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800540a:	2b03      	cmp	r3, #3
 800540c:	d107      	bne.n	800541e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800540e:	4b3f      	ldr	r3, [pc, #252]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d109      	bne.n	800542e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e06f      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800541e:	4b3b      	ldr	r3, [pc, #236]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e067      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800542e:	4b37      	ldr	r3, [pc, #220]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f023 0203 	bic.w	r2, r3, #3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	4934      	ldr	r1, [pc, #208]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	4313      	orrs	r3, r2
 800543e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005440:	f7fd f836 	bl	80024b0 <HAL_GetTick>
 8005444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005446:	e00a      	b.n	800545e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005448:	f7fd f832 	bl	80024b0 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	f241 3288 	movw	r2, #5000	; 0x1388
 8005456:	4293      	cmp	r3, r2
 8005458:	d901      	bls.n	800545e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e04f      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800545e:	4b2b      	ldr	r3, [pc, #172]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f003 020c 	and.w	r2, r3, #12
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	429a      	cmp	r2, r3
 800546e:	d1eb      	bne.n	8005448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005470:	4b25      	ldr	r3, [pc, #148]	; (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	429a      	cmp	r2, r3
 800547c:	d20c      	bcs.n	8005498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800547e:	4b22      	ldr	r3, [pc, #136]	; (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	b2d2      	uxtb	r2, r2
 8005484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005486:	4b20      	ldr	r3, [pc, #128]	; (8005508 <HAL_RCC_ClockConfig+0x1b8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	429a      	cmp	r2, r3
 8005492:	d001      	beq.n	8005498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e032      	b.n	80054fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054a4:	4b19      	ldr	r3, [pc, #100]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	4916      	ldr	r1, [pc, #88]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d009      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054c2:	4b12      	ldr	r3, [pc, #72]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	490e      	ldr	r1, [pc, #56]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	4313      	orrs	r3, r2
 80054d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054d6:	f000 f821 	bl	800551c <HAL_RCC_GetSysClockFreq>
 80054da:	4602      	mov	r2, r0
 80054dc:	4b0b      	ldr	r3, [pc, #44]	; (800550c <HAL_RCC_ClockConfig+0x1bc>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	091b      	lsrs	r3, r3, #4
 80054e2:	f003 030f 	and.w	r3, r3, #15
 80054e6:	490a      	ldr	r1, [pc, #40]	; (8005510 <HAL_RCC_ClockConfig+0x1c0>)
 80054e8:	5ccb      	ldrb	r3, [r1, r3]
 80054ea:	fa22 f303 	lsr.w	r3, r2, r3
 80054ee:	4a09      	ldr	r2, [pc, #36]	; (8005514 <HAL_RCC_ClockConfig+0x1c4>)
 80054f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054f2:	4b09      	ldr	r3, [pc, #36]	; (8005518 <HAL_RCC_ClockConfig+0x1c8>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7fc ff96 	bl	8002428 <HAL_InitTick>

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	40023c00 	.word	0x40023c00
 800550c:	40023800 	.word	0x40023800
 8005510:	08010fa8 	.word	0x08010fa8
 8005514:	2000000c 	.word	0x2000000c
 8005518:	20000010 	.word	0x20000010

0800551c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800551c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005520:	b090      	sub	sp, #64	; 0x40
 8005522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	637b      	str	r3, [r7, #52]	; 0x34
 8005528:	2300      	movs	r3, #0
 800552a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800552c:	2300      	movs	r3, #0
 800552e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005534:	4b59      	ldr	r3, [pc, #356]	; (800569c <HAL_RCC_GetSysClockFreq+0x180>)
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 030c 	and.w	r3, r3, #12
 800553c:	2b08      	cmp	r3, #8
 800553e:	d00d      	beq.n	800555c <HAL_RCC_GetSysClockFreq+0x40>
 8005540:	2b08      	cmp	r3, #8
 8005542:	f200 80a1 	bhi.w	8005688 <HAL_RCC_GetSysClockFreq+0x16c>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_RCC_GetSysClockFreq+0x34>
 800554a:	2b04      	cmp	r3, #4
 800554c:	d003      	beq.n	8005556 <HAL_RCC_GetSysClockFreq+0x3a>
 800554e:	e09b      	b.n	8005688 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005550:	4b53      	ldr	r3, [pc, #332]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8005552:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005554:	e09b      	b.n	800568e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005556:	4b53      	ldr	r3, [pc, #332]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005558:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800555a:	e098      	b.n	800568e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800555c:	4b4f      	ldr	r3, [pc, #316]	; (800569c <HAL_RCC_GetSysClockFreq+0x180>)
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005564:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005566:	4b4d      	ldr	r3, [pc, #308]	; (800569c <HAL_RCC_GetSysClockFreq+0x180>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d028      	beq.n	80055c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005572:	4b4a      	ldr	r3, [pc, #296]	; (800569c <HAL_RCC_GetSysClockFreq+0x180>)
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	099b      	lsrs	r3, r3, #6
 8005578:	2200      	movs	r2, #0
 800557a:	623b      	str	r3, [r7, #32]
 800557c:	627a      	str	r2, [r7, #36]	; 0x24
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005584:	2100      	movs	r1, #0
 8005586:	4b47      	ldr	r3, [pc, #284]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005588:	fb03 f201 	mul.w	r2, r3, r1
 800558c:	2300      	movs	r3, #0
 800558e:	fb00 f303 	mul.w	r3, r0, r3
 8005592:	4413      	add	r3, r2
 8005594:	4a43      	ldr	r2, [pc, #268]	; (80056a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8005596:	fba0 1202 	umull	r1, r2, r0, r2
 800559a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800559c:	460a      	mov	r2, r1
 800559e:	62ba      	str	r2, [r7, #40]	; 0x28
 80055a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055a2:	4413      	add	r3, r2
 80055a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055a8:	2200      	movs	r2, #0
 80055aa:	61bb      	str	r3, [r7, #24]
 80055ac:	61fa      	str	r2, [r7, #28]
 80055ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055b6:	f7fb faf9 	bl	8000bac <__aeabi_uldivmod>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4613      	mov	r3, r2
 80055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c2:	e053      	b.n	800566c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055c4:	4b35      	ldr	r3, [pc, #212]	; (800569c <HAL_RCC_GetSysClockFreq+0x180>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	099b      	lsrs	r3, r3, #6
 80055ca:	2200      	movs	r2, #0
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	617a      	str	r2, [r7, #20]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055d6:	f04f 0b00 	mov.w	fp, #0
 80055da:	4652      	mov	r2, sl
 80055dc:	465b      	mov	r3, fp
 80055de:	f04f 0000 	mov.w	r0, #0
 80055e2:	f04f 0100 	mov.w	r1, #0
 80055e6:	0159      	lsls	r1, r3, #5
 80055e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055ec:	0150      	lsls	r0, r2, #5
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	ebb2 080a 	subs.w	r8, r2, sl
 80055f6:	eb63 090b 	sbc.w	r9, r3, fp
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005606:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800560a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800560e:	ebb2 0408 	subs.w	r4, r2, r8
 8005612:	eb63 0509 	sbc.w	r5, r3, r9
 8005616:	f04f 0200 	mov.w	r2, #0
 800561a:	f04f 0300 	mov.w	r3, #0
 800561e:	00eb      	lsls	r3, r5, #3
 8005620:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005624:	00e2      	lsls	r2, r4, #3
 8005626:	4614      	mov	r4, r2
 8005628:	461d      	mov	r5, r3
 800562a:	eb14 030a 	adds.w	r3, r4, sl
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	eb45 030b 	adc.w	r3, r5, fp
 8005634:	607b      	str	r3, [r7, #4]
 8005636:	f04f 0200 	mov.w	r2, #0
 800563a:	f04f 0300 	mov.w	r3, #0
 800563e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005642:	4629      	mov	r1, r5
 8005644:	028b      	lsls	r3, r1, #10
 8005646:	4621      	mov	r1, r4
 8005648:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800564c:	4621      	mov	r1, r4
 800564e:	028a      	lsls	r2, r1, #10
 8005650:	4610      	mov	r0, r2
 8005652:	4619      	mov	r1, r3
 8005654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005656:	2200      	movs	r2, #0
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	60fa      	str	r2, [r7, #12]
 800565c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005660:	f7fb faa4 	bl	8000bac <__aeabi_uldivmod>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	4613      	mov	r3, r2
 800566a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800566c:	4b0b      	ldr	r3, [pc, #44]	; (800569c <HAL_RCC_GetSysClockFreq+0x180>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	0c1b      	lsrs	r3, r3, #16
 8005672:	f003 0303 	and.w	r3, r3, #3
 8005676:	3301      	adds	r3, #1
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800567c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005686:	e002      	b.n	800568e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800568a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800568c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005690:	4618      	mov	r0, r3
 8005692:	3740      	adds	r7, #64	; 0x40
 8005694:	46bd      	mov	sp, r7
 8005696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800569a:	bf00      	nop
 800569c:	40023800 	.word	0x40023800
 80056a0:	00f42400 	.word	0x00f42400
 80056a4:	017d7840 	.word	0x017d7840

080056a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056ac:	4b03      	ldr	r3, [pc, #12]	; (80056bc <HAL_RCC_GetHCLKFreq+0x14>)
 80056ae:	681b      	ldr	r3, [r3, #0]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	2000000c 	.word	0x2000000c

080056c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b082      	sub	sp, #8
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d101      	bne.n	80056d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e041      	b.n	8005756 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d106      	bne.n	80056ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f7fc fd42 	bl	8002170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4619      	mov	r1, r3
 80056fe:	4610      	mov	r0, r2
 8005700:	f000 fb42 	bl	8005d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b01      	cmp	r3, #1
 8005772:	d001      	beq.n	8005778 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e03c      	b.n	80057f2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1e      	ldr	r2, [pc, #120]	; (8005800 <HAL_TIM_Base_Start+0xa0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d018      	beq.n	80057bc <HAL_TIM_Base_Start+0x5c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005792:	d013      	beq.n	80057bc <HAL_TIM_Base_Start+0x5c>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a1a      	ldr	r2, [pc, #104]	; (8005804 <HAL_TIM_Base_Start+0xa4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00e      	beq.n	80057bc <HAL_TIM_Base_Start+0x5c>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a19      	ldr	r2, [pc, #100]	; (8005808 <HAL_TIM_Base_Start+0xa8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d009      	beq.n	80057bc <HAL_TIM_Base_Start+0x5c>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a17      	ldr	r2, [pc, #92]	; (800580c <HAL_TIM_Base_Start+0xac>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d004      	beq.n	80057bc <HAL_TIM_Base_Start+0x5c>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a16      	ldr	r2, [pc, #88]	; (8005810 <HAL_TIM_Base_Start+0xb0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d111      	bne.n	80057e0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 0307 	and.w	r3, r3, #7
 80057c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b06      	cmp	r3, #6
 80057cc:	d010      	beq.n	80057f0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0201 	orr.w	r2, r2, #1
 80057dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057de:	e007      	b.n	80057f0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40010000 	.word	0x40010000
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800
 800580c:	40000c00 	.word	0x40000c00
 8005810:	40014000 	.word	0x40014000

08005814 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6a1a      	ldr	r2, [r3, #32]
 8005822:	f241 1311 	movw	r3, #4369	; 0x1111
 8005826:	4013      	ands	r3, r2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10f      	bne.n	800584c <HAL_TIM_Base_Stop+0x38>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6a1a      	ldr	r2, [r3, #32]
 8005832:	f240 4344 	movw	r3, #1092	; 0x444
 8005836:	4013      	ands	r3, r2
 8005838:	2b00      	cmp	r3, #0
 800583a:	d107      	bne.n	800584c <HAL_TIM_Base_Stop+0x38>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e041      	b.n	80058f8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d106      	bne.n	800588e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 f839 	bl	8005900 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2202      	movs	r2, #2
 8005892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3304      	adds	r3, #4
 800589e:	4619      	mov	r1, r3
 80058a0:	4610      	mov	r0, r2
 80058a2:	f000 fa71 	bl	8005d88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2201      	movs	r2, #1
 80058f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d109      	bne.n	8005938 <HAL_TIM_PWM_Start+0x24>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800592a:	b2db      	uxtb	r3, r3
 800592c:	2b01      	cmp	r3, #1
 800592e:	bf14      	ite	ne
 8005930:	2301      	movne	r3, #1
 8005932:	2300      	moveq	r3, #0
 8005934:	b2db      	uxtb	r3, r3
 8005936:	e022      	b.n	800597e <HAL_TIM_PWM_Start+0x6a>
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	2b04      	cmp	r3, #4
 800593c:	d109      	bne.n	8005952 <HAL_TIM_PWM_Start+0x3e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b01      	cmp	r3, #1
 8005948:	bf14      	ite	ne
 800594a:	2301      	movne	r3, #1
 800594c:	2300      	moveq	r3, #0
 800594e:	b2db      	uxtb	r3, r3
 8005950:	e015      	b.n	800597e <HAL_TIM_PWM_Start+0x6a>
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	2b08      	cmp	r3, #8
 8005956:	d109      	bne.n	800596c <HAL_TIM_PWM_Start+0x58>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800595e:	b2db      	uxtb	r3, r3
 8005960:	2b01      	cmp	r3, #1
 8005962:	bf14      	ite	ne
 8005964:	2301      	movne	r3, #1
 8005966:	2300      	moveq	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	e008      	b.n	800597e <HAL_TIM_PWM_Start+0x6a>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b01      	cmp	r3, #1
 8005976:	bf14      	ite	ne
 8005978:	2301      	movne	r3, #1
 800597a:	2300      	moveq	r3, #0
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e068      	b.n	8005a58 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <HAL_TIM_PWM_Start+0x82>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005994:	e013      	b.n	80059be <HAL_TIM_PWM_Start+0xaa>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b04      	cmp	r3, #4
 800599a:	d104      	bne.n	80059a6 <HAL_TIM_PWM_Start+0x92>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059a4:	e00b      	b.n	80059be <HAL_TIM_PWM_Start+0xaa>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d104      	bne.n	80059b6 <HAL_TIM_PWM_Start+0xa2>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059b4:	e003      	b.n	80059be <HAL_TIM_PWM_Start+0xaa>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2202      	movs	r2, #2
 80059ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2201      	movs	r2, #1
 80059c4:	6839      	ldr	r1, [r7, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fc84 	bl	80062d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a23      	ldr	r2, [pc, #140]	; (8005a60 <HAL_TIM_PWM_Start+0x14c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d107      	bne.n	80059e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80059e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1d      	ldr	r2, [pc, #116]	; (8005a60 <HAL_TIM_PWM_Start+0x14c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d018      	beq.n	8005a22 <HAL_TIM_PWM_Start+0x10e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f8:	d013      	beq.n	8005a22 <HAL_TIM_PWM_Start+0x10e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a19      	ldr	r2, [pc, #100]	; (8005a64 <HAL_TIM_PWM_Start+0x150>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00e      	beq.n	8005a22 <HAL_TIM_PWM_Start+0x10e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a17      	ldr	r2, [pc, #92]	; (8005a68 <HAL_TIM_PWM_Start+0x154>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d009      	beq.n	8005a22 <HAL_TIM_PWM_Start+0x10e>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a16      	ldr	r2, [pc, #88]	; (8005a6c <HAL_TIM_PWM_Start+0x158>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d004      	beq.n	8005a22 <HAL_TIM_PWM_Start+0x10e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a14      	ldr	r2, [pc, #80]	; (8005a70 <HAL_TIM_PWM_Start+0x15c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d111      	bne.n	8005a46 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b06      	cmp	r3, #6
 8005a32:	d010      	beq.n	8005a56 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a44:	e007      	b.n	8005a56 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0201 	orr.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3710      	adds	r7, #16
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40010000 	.word	0x40010000
 8005a64:	40000400 	.word	0x40000400
 8005a68:	40000800 	.word	0x40000800
 8005a6c:	40000c00 	.word	0x40000c00
 8005a70:	40014000 	.word	0x40014000

08005a74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e0ae      	b.n	8005bf0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b0c      	cmp	r3, #12
 8005a9e:	f200 809f 	bhi.w	8005be0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005add 	.word	0x08005add
 8005aac:	08005be1 	.word	0x08005be1
 8005ab0:	08005be1 	.word	0x08005be1
 8005ab4:	08005be1 	.word	0x08005be1
 8005ab8:	08005b1d 	.word	0x08005b1d
 8005abc:	08005be1 	.word	0x08005be1
 8005ac0:	08005be1 	.word	0x08005be1
 8005ac4:	08005be1 	.word	0x08005be1
 8005ac8:	08005b5f 	.word	0x08005b5f
 8005acc:	08005be1 	.word	0x08005be1
 8005ad0:	08005be1 	.word	0x08005be1
 8005ad4:	08005be1 	.word	0x08005be1
 8005ad8:	08005b9f 	.word	0x08005b9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 f9d0 	bl	8005e88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0208 	orr.w	r2, r2, #8
 8005af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0204 	bic.w	r2, r2, #4
 8005b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6999      	ldr	r1, [r3, #24]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	691a      	ldr	r2, [r3, #16]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	619a      	str	r2, [r3, #24]
      break;
 8005b1a:	e064      	b.n	8005be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 fa16 	bl	8005f54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6999      	ldr	r1, [r3, #24]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	021a      	lsls	r2, r3, #8
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	619a      	str	r2, [r3, #24]
      break;
 8005b5c:	e043      	b.n	8005be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fa61 	bl	800602c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0208 	orr.w	r2, r2, #8
 8005b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69da      	ldr	r2, [r3, #28]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0204 	bic.w	r2, r2, #4
 8005b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69d9      	ldr	r1, [r3, #28]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	61da      	str	r2, [r3, #28]
      break;
 8005b9c:	e023      	b.n	8005be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68b9      	ldr	r1, [r7, #8]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 faab 	bl	8006100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69da      	ldr	r2, [r3, #28]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69d9      	ldr	r1, [r3, #28]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	021a      	lsls	r2, r3, #8
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	61da      	str	r2, [r3, #28]
      break;
 8005bde:	e002      	b.n	8005be6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	75fb      	strb	r3, [r7, #23]
      break;
 8005be4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3718      	adds	r7, #24
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_TIM_ConfigClockSource+0x1c>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e0b4      	b.n	8005d7e <HAL_TIM_ConfigClockSource+0x186>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c4c:	d03e      	beq.n	8005ccc <HAL_TIM_ConfigClockSource+0xd4>
 8005c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c52:	f200 8087 	bhi.w	8005d64 <HAL_TIM_ConfigClockSource+0x16c>
 8005c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5a:	f000 8086 	beq.w	8005d6a <HAL_TIM_ConfigClockSource+0x172>
 8005c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c62:	d87f      	bhi.n	8005d64 <HAL_TIM_ConfigClockSource+0x16c>
 8005c64:	2b70      	cmp	r3, #112	; 0x70
 8005c66:	d01a      	beq.n	8005c9e <HAL_TIM_ConfigClockSource+0xa6>
 8005c68:	2b70      	cmp	r3, #112	; 0x70
 8005c6a:	d87b      	bhi.n	8005d64 <HAL_TIM_ConfigClockSource+0x16c>
 8005c6c:	2b60      	cmp	r3, #96	; 0x60
 8005c6e:	d050      	beq.n	8005d12 <HAL_TIM_ConfigClockSource+0x11a>
 8005c70:	2b60      	cmp	r3, #96	; 0x60
 8005c72:	d877      	bhi.n	8005d64 <HAL_TIM_ConfigClockSource+0x16c>
 8005c74:	2b50      	cmp	r3, #80	; 0x50
 8005c76:	d03c      	beq.n	8005cf2 <HAL_TIM_ConfigClockSource+0xfa>
 8005c78:	2b50      	cmp	r3, #80	; 0x50
 8005c7a:	d873      	bhi.n	8005d64 <HAL_TIM_ConfigClockSource+0x16c>
 8005c7c:	2b40      	cmp	r3, #64	; 0x40
 8005c7e:	d058      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0x13a>
 8005c80:	2b40      	cmp	r3, #64	; 0x40
 8005c82:	d86f      	bhi.n	8005d64 <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b30      	cmp	r3, #48	; 0x30
 8005c86:	d064      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x15a>
 8005c88:	2b30      	cmp	r3, #48	; 0x30
 8005c8a:	d86b      	bhi.n	8005d64 <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	d060      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x15a>
 8005c90:	2b20      	cmp	r3, #32
 8005c92:	d867      	bhi.n	8005d64 <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d05c      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x15a>
 8005c98:	2b10      	cmp	r3, #16
 8005c9a:	d05a      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x15a>
 8005c9c:	e062      	b.n	8005d64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6899      	ldr	r1, [r3, #8]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	685a      	ldr	r2, [r3, #4]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f000 faf1 	bl	8006294 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	609a      	str	r2, [r3, #8]
      break;
 8005cca:	e04f      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6818      	ldr	r0, [r3, #0]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	6899      	ldr	r1, [r3, #8]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f000 fada 	bl	8006294 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cee:	609a      	str	r2, [r3, #8]
      break;
 8005cf0:	e03c      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	6859      	ldr	r1, [r3, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f000 fa4e 	bl	80061a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2150      	movs	r1, #80	; 0x50
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 faa7 	bl	800625e <TIM_ITRx_SetConfig>
      break;
 8005d10:	e02c      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6859      	ldr	r1, [r3, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	461a      	mov	r2, r3
 8005d20:	f000 fa6d 	bl	80061fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2160      	movs	r1, #96	; 0x60
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fa97 	bl	800625e <TIM_ITRx_SetConfig>
      break;
 8005d30:	e01c      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6859      	ldr	r1, [r3, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	f000 fa2e 	bl	80061a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2140      	movs	r1, #64	; 0x40
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fa87 	bl	800625e <TIM_ITRx_SetConfig>
      break;
 8005d50:	e00c      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4619      	mov	r1, r3
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	f000 fa7e 	bl	800625e <TIM_ITRx_SetConfig>
      break;
 8005d62:	e003      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	73fb      	strb	r3, [r7, #15]
      break;
 8005d68:	e000      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a34      	ldr	r2, [pc, #208]	; (8005e6c <TIM_Base_SetConfig+0xe4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d00f      	beq.n	8005dc0 <TIM_Base_SetConfig+0x38>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005da6:	d00b      	beq.n	8005dc0 <TIM_Base_SetConfig+0x38>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a31      	ldr	r2, [pc, #196]	; (8005e70 <TIM_Base_SetConfig+0xe8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d007      	beq.n	8005dc0 <TIM_Base_SetConfig+0x38>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a30      	ldr	r2, [pc, #192]	; (8005e74 <TIM_Base_SetConfig+0xec>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_Base_SetConfig+0x38>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a2f      	ldr	r2, [pc, #188]	; (8005e78 <TIM_Base_SetConfig+0xf0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d108      	bne.n	8005dd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a25      	ldr	r2, [pc, #148]	; (8005e6c <TIM_Base_SetConfig+0xe4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d01b      	beq.n	8005e12 <TIM_Base_SetConfig+0x8a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005de0:	d017      	beq.n	8005e12 <TIM_Base_SetConfig+0x8a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a22      	ldr	r2, [pc, #136]	; (8005e70 <TIM_Base_SetConfig+0xe8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <TIM_Base_SetConfig+0x8a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a21      	ldr	r2, [pc, #132]	; (8005e74 <TIM_Base_SetConfig+0xec>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00f      	beq.n	8005e12 <TIM_Base_SetConfig+0x8a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a20      	ldr	r2, [pc, #128]	; (8005e78 <TIM_Base_SetConfig+0xf0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00b      	beq.n	8005e12 <TIM_Base_SetConfig+0x8a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a1f      	ldr	r2, [pc, #124]	; (8005e7c <TIM_Base_SetConfig+0xf4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d007      	beq.n	8005e12 <TIM_Base_SetConfig+0x8a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1e      	ldr	r2, [pc, #120]	; (8005e80 <TIM_Base_SetConfig+0xf8>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d003      	beq.n	8005e12 <TIM_Base_SetConfig+0x8a>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a1d      	ldr	r2, [pc, #116]	; (8005e84 <TIM_Base_SetConfig+0xfc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d108      	bne.n	8005e24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a08      	ldr	r2, [pc, #32]	; (8005e6c <TIM_Base_SetConfig+0xe4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d103      	bne.n	8005e58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	615a      	str	r2, [r3, #20]
}
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40010000 	.word	0x40010000
 8005e70:	40000400 	.word	0x40000400
 8005e74:	40000800 	.word	0x40000800
 8005e78:	40000c00 	.word	0x40000c00
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800

08005e88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f023 0201 	bic.w	r2, r3, #1
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f023 0302 	bic.w	r3, r3, #2
 8005ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a1c      	ldr	r2, [pc, #112]	; (8005f50 <TIM_OC1_SetConfig+0xc8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d10c      	bne.n	8005efe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f023 0308 	bic.w	r3, r3, #8
 8005eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f023 0304 	bic.w	r3, r3, #4
 8005efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a13      	ldr	r2, [pc, #76]	; (8005f50 <TIM_OC1_SetConfig+0xc8>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d111      	bne.n	8005f2a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	685a      	ldr	r2, [r3, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	697a      	ldr	r2, [r7, #20]
 8005f42:	621a      	str	r2, [r3, #32]
}
 8005f44:	bf00      	nop
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	40010000 	.word	0x40010000

08005f54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0210 	bic.w	r2, r3, #16
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f023 0320 	bic.w	r3, r3, #32
 8005f9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	011b      	lsls	r3, r3, #4
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a1e      	ldr	r2, [pc, #120]	; (8006028 <TIM_OC2_SetConfig+0xd4>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d10d      	bne.n	8005fd0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a15      	ldr	r2, [pc, #84]	; (8006028 <TIM_OC2_SetConfig+0xd4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d113      	bne.n	8006000 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	693a      	ldr	r2, [r7, #16]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	621a      	str	r2, [r3, #32]
}
 800601a:	bf00      	nop
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40010000 	.word	0x40010000

0800602c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f023 0303 	bic.w	r3, r3, #3
 8006062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	4313      	orrs	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a1d      	ldr	r2, [pc, #116]	; (80060fc <TIM_OC3_SetConfig+0xd0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d10d      	bne.n	80060a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006090:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	021b      	lsls	r3, r3, #8
 8006098:	697a      	ldr	r2, [r7, #20]
 800609a:	4313      	orrs	r3, r2
 800609c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a14      	ldr	r2, [pc, #80]	; (80060fc <TIM_OC3_SetConfig+0xd0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d113      	bne.n	80060d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	621a      	str	r2, [r3, #32]
}
 80060f0:	bf00      	nop
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr
 80060fc:	40010000 	.word	0x40010000

08006100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a1b      	ldr	r3, [r3, #32]
 800611a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800614a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	031b      	lsls	r3, r3, #12
 8006152:	693a      	ldr	r2, [r7, #16]
 8006154:	4313      	orrs	r3, r2
 8006156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a10      	ldr	r2, [pc, #64]	; (800619c <TIM_OC4_SetConfig+0x9c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d109      	bne.n	8006174 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	019b      	lsls	r3, r3, #6
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	40010000 	.word	0x40010000

080061a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f023 0201 	bic.w	r2, r3, #1
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f023 030a 	bic.w	r3, r3, #10
 80061dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	621a      	str	r2, [r3, #32]
}
 80061f2:	bf00      	nop
 80061f4:	371c      	adds	r7, #28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr

080061fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061fe:	b480      	push	{r7}
 8006200:	b087      	sub	sp, #28
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f023 0210 	bic.w	r2, r3, #16
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006228:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	031b      	lsls	r3, r3, #12
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800623a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	4313      	orrs	r3, r2
 8006244:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	697a      	ldr	r2, [r7, #20]
 800624a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	621a      	str	r2, [r3, #32]
}
 8006252:	bf00      	nop
 8006254:	371c      	adds	r7, #28
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr

0800625e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
 8006266:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006274:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006276:	683a      	ldr	r2, [r7, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	f043 0307 	orr.w	r3, r3, #7
 8006280:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	609a      	str	r2, [r3, #8]
}
 8006288:	bf00      	nop
 800628a:	3714      	adds	r7, #20
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006294:	b480      	push	{r7}
 8006296:	b087      	sub	sp, #28
 8006298:	af00      	add	r7, sp, #0
 800629a:	60f8      	str	r0, [r7, #12]
 800629c:	60b9      	str	r1, [r7, #8]
 800629e:	607a      	str	r2, [r7, #4]
 80062a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	021a      	lsls	r2, r3, #8
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	609a      	str	r2, [r3, #8]
}
 80062c8:	bf00      	nop
 80062ca:	371c      	adds	r7, #28
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f003 031f 	and.w	r3, r3, #31
 80062e6:	2201      	movs	r2, #1
 80062e8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6a1a      	ldr	r2, [r3, #32]
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	43db      	mvns	r3, r3
 80062f6:	401a      	ands	r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a1a      	ldr	r2, [r3, #32]
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f003 031f 	and.w	r3, r3, #31
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	fa01 f303 	lsl.w	r3, r1, r3
 800630c:	431a      	orrs	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	621a      	str	r2, [r3, #32]
}
 8006312:	bf00      	nop
 8006314:	371c      	adds	r7, #28
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
	...

08006320 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006320:	b480      	push	{r7}
 8006322:	b085      	sub	sp, #20
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006334:	2302      	movs	r3, #2
 8006336:	e050      	b.n	80063da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a1c      	ldr	r2, [pc, #112]	; (80063e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d018      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006384:	d013      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a18      	ldr	r2, [pc, #96]	; (80063ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d00e      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a16      	ldr	r2, [pc, #88]	; (80063f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d009      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a15      	ldr	r2, [pc, #84]	; (80063f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d004      	beq.n	80063ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a13      	ldr	r2, [pc, #76]	; (80063f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d10c      	bne.n	80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3714      	adds	r7, #20
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40010000 	.word	0x40010000
 80063ec:	40000400 	.word	0x40000400
 80063f0:	40000800 	.word	0x40000800
 80063f4:	40000c00 	.word	0x40000c00
 80063f8:	40014000 	.word	0x40014000

080063fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063fc:	b084      	sub	sp, #16
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	f107 001c 	add.w	r0, r7, #28
 800640a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	2b01      	cmp	r3, #1
 8006412:	d122      	bne.n	800645a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006418:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800643c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800643e:	2b01      	cmp	r3, #1
 8006440:	d105      	bne.n	800644e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f001 fbee 	bl	8007c30 <USB_CoreReset>
 8006454:	4603      	mov	r3, r0
 8006456:	73fb      	strb	r3, [r7, #15]
 8006458:	e01a      	b.n	8006490 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f001 fbe2 	bl	8007c30 <USB_CoreReset>
 800646c:	4603      	mov	r3, r0
 800646e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	639a      	str	r2, [r3, #56]	; 0x38
 8006482:	e005      	b.n	8006490 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	2b01      	cmp	r3, #1
 8006494:	d10b      	bne.n	80064ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f043 0206 	orr.w	r2, r3, #6
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f043 0220 	orr.w	r2, r3, #32
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064ba:	b004      	add	sp, #16
 80064bc:	4770      	bx	lr
	...

080064c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	4613      	mov	r3, r2
 80064cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d165      	bne.n	80065a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4a41      	ldr	r2, [pc, #260]	; (80065dc <USB_SetTurnaroundTime+0x11c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d906      	bls.n	80064ea <USB_SetTurnaroundTime+0x2a>
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4a40      	ldr	r2, [pc, #256]	; (80065e0 <USB_SetTurnaroundTime+0x120>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d202      	bcs.n	80064ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80064e4:	230f      	movs	r3, #15
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	e062      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	4a3c      	ldr	r2, [pc, #240]	; (80065e0 <USB_SetTurnaroundTime+0x120>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d306      	bcc.n	8006500 <USB_SetTurnaroundTime+0x40>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	4a3b      	ldr	r2, [pc, #236]	; (80065e4 <USB_SetTurnaroundTime+0x124>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d202      	bcs.n	8006500 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80064fa:	230e      	movs	r3, #14
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	e057      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4a38      	ldr	r2, [pc, #224]	; (80065e4 <USB_SetTurnaroundTime+0x124>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d306      	bcc.n	8006516 <USB_SetTurnaroundTime+0x56>
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4a37      	ldr	r2, [pc, #220]	; (80065e8 <USB_SetTurnaroundTime+0x128>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d202      	bcs.n	8006516 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006510:	230d      	movs	r3, #13
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	e04c      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4a33      	ldr	r2, [pc, #204]	; (80065e8 <USB_SetTurnaroundTime+0x128>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d306      	bcc.n	800652c <USB_SetTurnaroundTime+0x6c>
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	4a32      	ldr	r2, [pc, #200]	; (80065ec <USB_SetTurnaroundTime+0x12c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d802      	bhi.n	800652c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006526:	230c      	movs	r3, #12
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	e041      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	4a2f      	ldr	r2, [pc, #188]	; (80065ec <USB_SetTurnaroundTime+0x12c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d906      	bls.n	8006542 <USB_SetTurnaroundTime+0x82>
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	4a2e      	ldr	r2, [pc, #184]	; (80065f0 <USB_SetTurnaroundTime+0x130>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d802      	bhi.n	8006542 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800653c:	230b      	movs	r3, #11
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	e036      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4a2a      	ldr	r2, [pc, #168]	; (80065f0 <USB_SetTurnaroundTime+0x130>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d906      	bls.n	8006558 <USB_SetTurnaroundTime+0x98>
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	4a29      	ldr	r2, [pc, #164]	; (80065f4 <USB_SetTurnaroundTime+0x134>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d802      	bhi.n	8006558 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006552:	230a      	movs	r3, #10
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	e02b      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4a26      	ldr	r2, [pc, #152]	; (80065f4 <USB_SetTurnaroundTime+0x134>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d906      	bls.n	800656e <USB_SetTurnaroundTime+0xae>
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4a25      	ldr	r2, [pc, #148]	; (80065f8 <USB_SetTurnaroundTime+0x138>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d202      	bcs.n	800656e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006568:	2309      	movs	r3, #9
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e020      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	4a21      	ldr	r2, [pc, #132]	; (80065f8 <USB_SetTurnaroundTime+0x138>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d306      	bcc.n	8006584 <USB_SetTurnaroundTime+0xc4>
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	4a20      	ldr	r2, [pc, #128]	; (80065fc <USB_SetTurnaroundTime+0x13c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d802      	bhi.n	8006584 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800657e:	2308      	movs	r3, #8
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	e015      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	4a1d      	ldr	r2, [pc, #116]	; (80065fc <USB_SetTurnaroundTime+0x13c>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d906      	bls.n	800659a <USB_SetTurnaroundTime+0xda>
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	4a1c      	ldr	r2, [pc, #112]	; (8006600 <USB_SetTurnaroundTime+0x140>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d202      	bcs.n	800659a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006594:	2307      	movs	r3, #7
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e00a      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800659a:	2306      	movs	r3, #6
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	e007      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80065a6:	2309      	movs	r3, #9
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	e001      	b.n	80065b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80065ac:	2309      	movs	r3, #9
 80065ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	68da      	ldr	r2, [r3, #12]
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	029b      	lsls	r3, r3, #10
 80065c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80065c8:	431a      	orrs	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	00d8acbf 	.word	0x00d8acbf
 80065e0:	00e4e1c0 	.word	0x00e4e1c0
 80065e4:	00f42400 	.word	0x00f42400
 80065e8:	01067380 	.word	0x01067380
 80065ec:	011a499f 	.word	0x011a499f
 80065f0:	01312cff 	.word	0x01312cff
 80065f4:	014ca43f 	.word	0x014ca43f
 80065f8:	016e3600 	.word	0x016e3600
 80065fc:	01a6ab1f 	.word	0x01a6ab1f
 8006600:	01e84800 	.word	0x01e84800

08006604 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f043 0201 	orr.w	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f023 0201 	bic.w	r2, r3, #1
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	460b      	mov	r3, r1
 8006652:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d115      	bne.n	8006696 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006676:	2001      	movs	r0, #1
 8006678:	f7fb ff26 	bl	80024c8 <HAL_Delay>
      ms++;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3301      	adds	r3, #1
 8006680:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 fa45 	bl	8007b12 <USB_GetMode>
 8006688:	4603      	mov	r3, r0
 800668a:	2b01      	cmp	r3, #1
 800668c:	d01e      	beq.n	80066cc <USB_SetCurrentMode+0x84>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2b31      	cmp	r3, #49	; 0x31
 8006692:	d9f0      	bls.n	8006676 <USB_SetCurrentMode+0x2e>
 8006694:	e01a      	b.n	80066cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006696:	78fb      	ldrb	r3, [r7, #3]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d115      	bne.n	80066c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80066a8:	2001      	movs	r0, #1
 80066aa:	f7fb ff0d 	bl	80024c8 <HAL_Delay>
      ms++;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3301      	adds	r3, #1
 80066b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 fa2c 	bl	8007b12 <USB_GetMode>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <USB_SetCurrentMode+0x84>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b31      	cmp	r3, #49	; 0x31
 80066c4:	d9f0      	bls.n	80066a8 <USB_SetCurrentMode+0x60>
 80066c6:	e001      	b.n	80066cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	e005      	b.n	80066d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b32      	cmp	r3, #50	; 0x32
 80066d0:	d101      	bne.n	80066d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e000      	b.n	80066d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066e0:	b084      	sub	sp, #16
 80066e2:	b580      	push	{r7, lr}
 80066e4:	b086      	sub	sp, #24
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80066ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80066f2:	2300      	movs	r3, #0
 80066f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80066fa:	2300      	movs	r3, #0
 80066fc:	613b      	str	r3, [r7, #16]
 80066fe:	e009      	b.n	8006714 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	3340      	adds	r3, #64	; 0x40
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	2200      	movs	r2, #0
 800670c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	3301      	adds	r3, #1
 8006712:	613b      	str	r3, [r7, #16]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	2b0e      	cmp	r3, #14
 8006718:	d9f2      	bls.n	8006700 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800671a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d11c      	bne.n	800675a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800672e:	f043 0302 	orr.w	r3, r3, #2
 8006732:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006738:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006744:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006750:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	639a      	str	r2, [r3, #56]	; 0x38
 8006758:	e00b      	b.n	8006772 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800676a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006778:	461a      	mov	r2, r3
 800677a:	2300      	movs	r3, #0
 800677c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006784:	4619      	mov	r1, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800678c:	461a      	mov	r2, r3
 800678e:	680b      	ldr	r3, [r1, #0]
 8006790:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006794:	2b01      	cmp	r3, #1
 8006796:	d10c      	bne.n	80067b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d104      	bne.n	80067a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800679e:	2100      	movs	r1, #0
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f965 	bl	8006a70 <USB_SetDevSpeed>
 80067a6:	e008      	b.n	80067ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067a8:	2101      	movs	r1, #1
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f960 	bl	8006a70 <USB_SetDevSpeed>
 80067b0:	e003      	b.n	80067ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067b2:	2103      	movs	r1, #3
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f95b 	bl	8006a70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067ba:	2110      	movs	r1, #16
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f8f3 	bl	80069a8 <USB_FlushTxFifo>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f91f 	bl	8006a10 <USB_FlushRxFifo>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d001      	beq.n	80067dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e2:	461a      	mov	r2, r3
 80067e4:	2300      	movs	r3, #0
 80067e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ee:	461a      	mov	r2, r3
 80067f0:	2300      	movs	r3, #0
 80067f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fa:	461a      	mov	r2, r3
 80067fc:	2300      	movs	r3, #0
 80067fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006800:	2300      	movs	r3, #0
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	e043      	b.n	800688e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800681c:	d118      	bne.n	8006850 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006830:	461a      	mov	r2, r3
 8006832:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006836:	6013      	str	r3, [r2, #0]
 8006838:	e013      	b.n	8006862 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4413      	add	r3, r2
 8006842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006846:	461a      	mov	r2, r3
 8006848:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	e008      	b.n	8006862 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800685c:	461a      	mov	r2, r3
 800685e:	2300      	movs	r3, #0
 8006860:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	015a      	lsls	r2, r3, #5
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4413      	add	r3, r2
 800686a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800686e:	461a      	mov	r2, r3
 8006870:	2300      	movs	r3, #0
 8006872:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006880:	461a      	mov	r2, r3
 8006882:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006886:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	3301      	adds	r3, #1
 800688c:	613b      	str	r3, [r7, #16]
 800688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	429a      	cmp	r2, r3
 8006894:	d3b7      	bcc.n	8006806 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006896:	2300      	movs	r3, #0
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	e043      	b.n	8006924 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068b2:	d118      	bne.n	80068e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10a      	bne.n	80068d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068c6:	461a      	mov	r2, r3
 80068c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80068cc:	6013      	str	r3, [r2, #0]
 80068ce:	e013      	b.n	80068f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068dc:	461a      	mov	r2, r3
 80068de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	e008      	b.n	80068f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f2:	461a      	mov	r2, r3
 80068f4:	2300      	movs	r3, #0
 80068f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	015a      	lsls	r2, r3, #5
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4413      	add	r3, r2
 8006900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006904:	461a      	mov	r2, r3
 8006906:	2300      	movs	r3, #0
 8006908:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006916:	461a      	mov	r2, r3
 8006918:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800691c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	3301      	adds	r3, #1
 8006922:	613b      	str	r3, [r7, #16]
 8006924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	429a      	cmp	r2, r3
 800692a:	d3b7      	bcc.n	800689c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800693a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800693e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800694c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	2b00      	cmp	r3, #0
 8006952:	d105      	bne.n	8006960 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	f043 0210 	orr.w	r2, r3, #16
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	699a      	ldr	r2, [r3, #24]
 8006964:	4b0f      	ldr	r3, [pc, #60]	; (80069a4 <USB_DevInit+0x2c4>)
 8006966:	4313      	orrs	r3, r2
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800696c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	699b      	ldr	r3, [r3, #24]
 8006976:	f043 0208 	orr.w	r2, r3, #8
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800697e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006980:	2b01      	cmp	r3, #1
 8006982:	d107      	bne.n	8006994 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	699b      	ldr	r3, [r3, #24]
 8006988:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800698c:	f043 0304 	orr.w	r3, r3, #4
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006994:	7dfb      	ldrb	r3, [r7, #23]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069a0:	b004      	add	sp, #16
 80069a2:	4770      	bx	lr
 80069a4:	803c3800 	.word	0x803c3800

080069a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	3301      	adds	r3, #1
 80069ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	4a13      	ldr	r2, [pc, #76]	; (8006a0c <USB_FlushTxFifo+0x64>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d901      	bls.n	80069c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e01b      	b.n	8006a00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	daf2      	bge.n	80069b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	019b      	lsls	r3, r3, #6
 80069d8:	f043 0220 	orr.w	r2, r3, #32
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4a08      	ldr	r2, [pc, #32]	; (8006a0c <USB_FlushTxFifo+0x64>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d901      	bls.n	80069f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e006      	b.n	8006a00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	f003 0320 	and.w	r3, r3, #32
 80069fa:	2b20      	cmp	r3, #32
 80069fc:	d0f0      	beq.n	80069e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	00030d40 	.word	0x00030d40

08006a10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	4a11      	ldr	r2, [pc, #68]	; (8006a6c <USB_FlushRxFifo+0x5c>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d901      	bls.n	8006a2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a2a:	2303      	movs	r3, #3
 8006a2c:	e018      	b.n	8006a60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	daf2      	bge.n	8006a1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2210      	movs	r2, #16
 8006a3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3301      	adds	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	4a08      	ldr	r2, [pc, #32]	; (8006a6c <USB_FlushRxFifo+0x5c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d901      	bls.n	8006a52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e006      	b.n	8006a60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	f003 0310 	and.w	r3, r3, #16
 8006a5a:	2b10      	cmp	r3, #16
 8006a5c:	d0f0      	beq.n	8006a40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr
 8006a6c:	00030d40 	.word	0x00030d40

08006a70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	460b      	mov	r3, r1
 8006a7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	68f9      	ldr	r1, [r7, #12]
 8006a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a90:	4313      	orrs	r3, r2
 8006a92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b087      	sub	sp, #28
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 0306 	and.w	r3, r3, #6
 8006aba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d102      	bne.n	8006ac8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	75fb      	strb	r3, [r7, #23]
 8006ac6:	e00a      	b.n	8006ade <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d002      	beq.n	8006ad4 <USB_GetDevSpeed+0x32>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b06      	cmp	r3, #6
 8006ad2:	d102      	bne.n	8006ada <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	75fb      	strb	r3, [r7, #23]
 8006ad8:	e001      	b.n	8006ade <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ada:	230f      	movs	r3, #15
 8006adc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	785b      	ldrb	r3, [r3, #1]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d13a      	bne.n	8006b7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0e:	69da      	ldr	r2, [r3, #28]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	f003 030f 	and.w	r3, r3, #15
 8006b18:	2101      	movs	r1, #1
 8006b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	68f9      	ldr	r1, [r7, #12]
 8006b22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b26:	4313      	orrs	r3, r2
 8006b28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d155      	bne.n	8006bec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	791b      	ldrb	r3, [r3, #4]
 8006b5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	059b      	lsls	r3, r3, #22
 8006b62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006b64:	4313      	orrs	r3, r2
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b7a:	6013      	str	r3, [r2, #0]
 8006b7c:	e036      	b.n	8006bec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b84:	69da      	ldr	r2, [r3, #28]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	f003 030f 	and.w	r3, r3, #15
 8006b8e:	2101      	movs	r1, #1
 8006b90:	fa01 f303 	lsl.w	r3, r1, r3
 8006b94:	041b      	lsls	r3, r3, #16
 8006b96:	68f9      	ldr	r1, [r7, #12]
 8006b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d11a      	bne.n	8006bec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	791b      	ldrb	r3, [r3, #4]
 8006bd0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	0151      	lsls	r1, r2, #5
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	440a      	add	r2, r1
 8006bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	3714      	adds	r7, #20
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
	...

08006bfc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d161      	bne.n	8006cdc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c2e:	d11f      	bne.n	8006c70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	0151      	lsls	r1, r2, #5
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	440a      	add	r2, r1
 8006c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	f003 030f 	and.w	r3, r3, #15
 8006c80:	2101      	movs	r1, #1
 8006c82:	fa01 f303 	lsl.w	r3, r1, r3
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c90:	4013      	ands	r3, r2
 8006c92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9a:	69da      	ldr	r2, [r3, #28]
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	43db      	mvns	r3, r3
 8006cae:	68f9      	ldr	r1, [r7, #12]
 8006cb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	0159      	lsls	r1, r3, #5
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	440b      	add	r3, r1
 8006cce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4b35      	ldr	r3, [pc, #212]	; (8006dac <USB_DeactivateEndpoint+0x1b0>)
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	600b      	str	r3, [r1, #0]
 8006cda:	e060      	b.n	8006d9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cf2:	d11f      	bne.n	8006d34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	0151      	lsls	r1, r2, #5
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	440a      	add	r2, r1
 8006d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68ba      	ldr	r2, [r7, #8]
 8006d24:	0151      	lsls	r1, r2, #5
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	440a      	add	r2, r1
 8006d2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	f003 030f 	and.w	r3, r3, #15
 8006d44:	2101      	movs	r1, #1
 8006d46:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4a:	041b      	lsls	r3, r3, #16
 8006d4c:	43db      	mvns	r3, r3
 8006d4e:	68f9      	ldr	r1, [r7, #12]
 8006d50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d54:	4013      	ands	r3, r2
 8006d56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5e:	69da      	ldr	r2, [r3, #28]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	f003 030f 	and.w	r3, r3, #15
 8006d68:	2101      	movs	r1, #1
 8006d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6e:	041b      	lsls	r3, r3, #16
 8006d70:	43db      	mvns	r3, r3
 8006d72:	68f9      	ldr	r1, [r7, #12]
 8006d74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d78:	4013      	ands	r3, r2
 8006d7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	015a      	lsls	r2, r3, #5
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	0159      	lsls	r1, r3, #5
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	440b      	add	r3, r1
 8006d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d96:	4619      	mov	r1, r3
 8006d98:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <USB_DeactivateEndpoint+0x1b4>)
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	ec337800 	.word	0xec337800
 8006db0:	eff37800 	.word	0xeff37800

08006db4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b08a      	sub	sp, #40	; 0x28
 8006db8:	af02      	add	r7, sp, #8
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	785b      	ldrb	r3, [r3, #1]
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	f040 815c 	bne.w	800708e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	699b      	ldr	r3, [r3, #24]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d132      	bne.n	8006e44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dea:	691b      	ldr	r3, [r3, #16]
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	0151      	lsls	r1, r2, #5
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	440a      	add	r2, r1
 8006df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006df8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006dfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e0e:	691b      	ldr	r3, [r3, #16]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	0151      	lsls	r1, r2, #5
 8006e14:	69fa      	ldr	r2, [r7, #28]
 8006e16:	440a      	add	r2, r1
 8006e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	0151      	lsls	r1, r2, #5
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	440a      	add	r2, r1
 8006e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e3c:	0cdb      	lsrs	r3, r3, #19
 8006e3e:	04db      	lsls	r3, r3, #19
 8006e40:	6113      	str	r3, [r2, #16]
 8006e42:	e074      	b.n	8006f2e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	0151      	lsls	r1, r2, #5
 8006e56:	69fa      	ldr	r2, [r7, #28]
 8006e58:	440a      	add	r2, r1
 8006e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e5e:	0cdb      	lsrs	r3, r3, #19
 8006e60:	04db      	lsls	r3, r3, #19
 8006e62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	0151      	lsls	r1, r2, #5
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	440a      	add	r2, r1
 8006e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e94:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	6999      	ldr	r1, [r3, #24]
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	440b      	add	r3, r1
 8006ea0:	1e59      	subs	r1, r3, #1
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8006eaa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006eac:	4b9d      	ldr	r3, [pc, #628]	; (8007124 <USB_EPStartXfer+0x370>)
 8006eae:	400b      	ands	r3, r1
 8006eb0:	69b9      	ldr	r1, [r7, #24]
 8006eb2:	0148      	lsls	r0, r1, #5
 8006eb4:	69f9      	ldr	r1, [r7, #28]
 8006eb6:	4401      	add	r1, r0
 8006eb8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ecc:	691a      	ldr	r2, [r3, #16]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ed6:	69b9      	ldr	r1, [r7, #24]
 8006ed8:	0148      	lsls	r0, r1, #5
 8006eda:	69f9      	ldr	r1, [r7, #28]
 8006edc:	4401      	add	r1, r0
 8006ede:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	791b      	ldrb	r3, [r3, #4]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d11f      	bne.n	8006f2e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006efa:	691b      	ldr	r3, [r3, #16]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006f0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006f0e:	69bb      	ldr	r3, [r7, #24]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	69ba      	ldr	r2, [r7, #24]
 8006f1e:	0151      	lsls	r1, r2, #5
 8006f20:	69fa      	ldr	r2, [r7, #28]
 8006f22:	440a      	add	r2, r1
 8006f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f2c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006f2e:	79fb      	ldrb	r3, [r7, #7]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d14b      	bne.n	8006fcc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d009      	beq.n	8006f50 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f48:	461a      	mov	r2, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	791b      	ldrb	r3, [r3, #4]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d128      	bne.n	8006faa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d110      	bne.n	8006f8a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	0151      	lsls	r1, r2, #5
 8006f7a:	69fa      	ldr	r2, [r7, #28]
 8006f7c:	440a      	add	r2, r1
 8006f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	e00f      	b.n	8006faa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	69ba      	ldr	r2, [r7, #24]
 8006f9a:	0151      	lsls	r1, r2, #5
 8006f9c:	69fa      	ldr	r2, [r7, #28]
 8006f9e:	440a      	add	r2, r1
 8006fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fa8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	0151      	lsls	r1, r2, #5
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	440a      	add	r2, r1
 8006fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	e133      	b.n	8007234 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	0151      	lsls	r1, r2, #5
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006fea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	791b      	ldrb	r3, [r3, #4]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d015      	beq.n	8007020 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	699b      	ldr	r3, [r3, #24]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 811b 	beq.w	8007234 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007004:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	f003 030f 	and.w	r3, r3, #15
 800700e:	2101      	movs	r1, #1
 8007010:	fa01 f303 	lsl.w	r3, r1, r3
 8007014:	69f9      	ldr	r1, [r7, #28]
 8007016:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800701a:	4313      	orrs	r3, r2
 800701c:	634b      	str	r3, [r1, #52]	; 0x34
 800701e:	e109      	b.n	8007234 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702c:	2b00      	cmp	r3, #0
 800702e:	d110      	bne.n	8007052 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	0151      	lsls	r1, r2, #5
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	440a      	add	r2, r1
 8007046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800704a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	e00f      	b.n	8007072 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	015a      	lsls	r2, r3, #5
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	4413      	add	r3, r2
 800705a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	0151      	lsls	r1, r2, #5
 8007064:	69fa      	ldr	r2, [r7, #28]
 8007066:	440a      	add	r2, r1
 8007068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007070:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	6919      	ldr	r1, [r3, #16]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	781a      	ldrb	r2, [r3, #0]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	b298      	uxth	r0, r3
 8007080:	79fb      	ldrb	r3, [r7, #7]
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	4603      	mov	r3, r0
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 fade 	bl	8007648 <USB_WritePacket>
 800708c:	e0d2      	b.n	8007234 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070a8:	0cdb      	lsrs	r3, r3, #19
 80070aa:	04db      	lsls	r3, r3, #19
 80070ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	69ba      	ldr	r2, [r7, #24]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	69fa      	ldr	r2, [r7, #28]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d126      	bne.n	8007128 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e6:	691a      	ldr	r2, [r3, #16]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070f0:	69b9      	ldr	r1, [r7, #24]
 80070f2:	0148      	lsls	r0, r1, #5
 80070f4:	69f9      	ldr	r1, [r7, #28]
 80070f6:	4401      	add	r1, r0
 80070f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80070fc:	4313      	orrs	r3, r2
 80070fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	69ba      	ldr	r2, [r7, #24]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800711a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800711e:	6113      	str	r3, [r2, #16]
 8007120:	e03a      	b.n	8007198 <USB_EPStartXfer+0x3e4>
 8007122:	bf00      	nop
 8007124:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	699a      	ldr	r2, [r3, #24]
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	4413      	add	r3, r2
 8007132:	1e5a      	subs	r2, r3, #1
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	fbb2 f3f3 	udiv	r3, r2, r3
 800713c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	8afa      	ldrh	r2, [r7, #22]
 8007144:	fb03 f202 	mul.w	r2, r3, r2
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	015a      	lsls	r2, r3, #5
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	4413      	add	r3, r2
 8007154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007158:	691a      	ldr	r2, [r3, #16]
 800715a:	8afb      	ldrh	r3, [r7, #22]
 800715c:	04d9      	lsls	r1, r3, #19
 800715e:	4b38      	ldr	r3, [pc, #224]	; (8007240 <USB_EPStartXfer+0x48c>)
 8007160:	400b      	ands	r3, r1
 8007162:	69b9      	ldr	r1, [r7, #24]
 8007164:	0148      	lsls	r0, r1, #5
 8007166:	69f9      	ldr	r1, [r7, #28]
 8007168:	4401      	add	r1, r0
 800716a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800716e:	4313      	orrs	r3, r2
 8007170:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800717e:	691a      	ldr	r2, [r3, #16]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007188:	69b9      	ldr	r1, [r7, #24]
 800718a:	0148      	lsls	r0, r1, #5
 800718c:	69f9      	ldr	r1, [r7, #28]
 800718e:	4401      	add	r1, r0
 8007190:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007194:	4313      	orrs	r3, r2
 8007196:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d10d      	bne.n	80071ba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d009      	beq.n	80071ba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	6919      	ldr	r1, [r3, #16]
 80071aa:	69bb      	ldr	r3, [r7, #24]
 80071ac:	015a      	lsls	r2, r3, #5
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4413      	add	r3, r2
 80071b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b6:	460a      	mov	r2, r1
 80071b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	791b      	ldrb	r3, [r3, #4]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d128      	bne.n	8007214 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d110      	bne.n	80071f4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80071d2:	69bb      	ldr	r3, [r7, #24]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	0151      	lsls	r1, r2, #5
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	440a      	add	r2, r1
 80071e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	e00f      	b.n	8007214 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	69fa      	ldr	r2, [r7, #28]
 8007208:	440a      	add	r2, r1
 800720a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800720e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007212:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	4413      	add	r3, r2
 800721c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	0151      	lsls	r1, r2, #5
 8007226:	69fa      	ldr	r2, [r7, #28]
 8007228:	440a      	add	r2, r1
 800722a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007232:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3720      	adds	r7, #32
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	1ff80000 	.word	0x1ff80000

08007244 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	785b      	ldrb	r3, [r3, #1]
 8007260:	2b01      	cmp	r3, #1
 8007262:	f040 80ce 	bne.w	8007402 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d132      	bne.n	80072d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	015a      	lsls	r2, r3, #5
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	4413      	add	r3, r2
 8007276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	0151      	lsls	r1, r2, #5
 8007280:	697a      	ldr	r2, [r7, #20]
 8007282:	440a      	add	r2, r1
 8007284:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007288:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800728c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007290:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	0151      	lsls	r1, r2, #5
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	440a      	add	r2, r1
 80072a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	693a      	ldr	r2, [r7, #16]
 80072c2:	0151      	lsls	r1, r2, #5
 80072c4:	697a      	ldr	r2, [r7, #20]
 80072c6:	440a      	add	r2, r1
 80072c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072cc:	0cdb      	lsrs	r3, r3, #19
 80072ce:	04db      	lsls	r3, r3, #19
 80072d0:	6113      	str	r3, [r2, #16]
 80072d2:	e04e      	b.n	8007372 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	015a      	lsls	r2, r3, #5
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	4413      	add	r3, r2
 80072dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e0:	691b      	ldr	r3, [r3, #16]
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	0151      	lsls	r1, r2, #5
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	440a      	add	r2, r1
 80072ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ee:	0cdb      	lsrs	r3, r3, #19
 80072f0:	04db      	lsls	r3, r3, #19
 80072f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	0151      	lsls	r1, r2, #5
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	440a      	add	r2, r1
 800730a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800730e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007312:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007316:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	699a      	ldr	r2, [r3, #24]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	429a      	cmp	r2, r3
 8007322:	d903      	bls.n	800732c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	68da      	ldr	r2, [r3, #12]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	015a      	lsls	r2, r3, #5
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	4413      	add	r3, r2
 8007334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	0151      	lsls	r1, r2, #5
 800733e:	697a      	ldr	r2, [r7, #20]
 8007340:	440a      	add	r2, r1
 8007342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007346:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800734a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	4413      	add	r3, r2
 8007354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007358:	691a      	ldr	r2, [r3, #16]
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007362:	6939      	ldr	r1, [r7, #16]
 8007364:	0148      	lsls	r0, r1, #5
 8007366:	6979      	ldr	r1, [r7, #20]
 8007368:	4401      	add	r1, r0
 800736a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800736e:	4313      	orrs	r3, r2
 8007370:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d11e      	bne.n	80073b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d009      	beq.n	8007394 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738c:	461a      	mov	r2, r3
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	015a      	lsls	r2, r3, #5
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	4413      	add	r3, r2
 800739c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	0151      	lsls	r1, r2, #5
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	440a      	add	r2, r1
 80073aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	e097      	b.n	80074e6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	0151      	lsls	r1, r2, #5
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	440a      	add	r2, r1
 80073cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f000 8083 	beq.w	80074e6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	f003 030f 	and.w	r3, r3, #15
 80073f0:	2101      	movs	r1, #1
 80073f2:	fa01 f303 	lsl.w	r3, r1, r3
 80073f6:	6979      	ldr	r1, [r7, #20]
 80073f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073fc:	4313      	orrs	r3, r2
 80073fe:	634b      	str	r3, [r1, #52]	; 0x34
 8007400:	e071      	b.n	80074e6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	015a      	lsls	r2, r3, #5
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	4413      	add	r3, r2
 800740a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	0151      	lsls	r1, r2, #5
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	440a      	add	r2, r1
 8007418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800741c:	0cdb      	lsrs	r3, r3, #19
 800741e:	04db      	lsls	r3, r3, #19
 8007420:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	015a      	lsls	r2, r3, #5
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	4413      	add	r3, r2
 800742a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	0151      	lsls	r1, r2, #5
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	440a      	add	r2, r1
 8007438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800743c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007440:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007444:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	68da      	ldr	r2, [r3, #12]
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	4413      	add	r3, r2
 8007466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	0151      	lsls	r1, r2, #5
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	440a      	add	r2, r1
 8007474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007478:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800747c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	015a      	lsls	r2, r3, #5
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	4413      	add	r3, r2
 8007486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748a:	691a      	ldr	r2, [r3, #16]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	69db      	ldr	r3, [r3, #28]
 8007490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007494:	6939      	ldr	r1, [r7, #16]
 8007496:	0148      	lsls	r0, r1, #5
 8007498:	6979      	ldr	r1, [r7, #20]
 800749a:	4401      	add	r1, r0
 800749c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074a0:	4313      	orrs	r3, r2
 80074a2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80074a4:	79fb      	ldrb	r3, [r7, #7]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d10d      	bne.n	80074c6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	6919      	ldr	r1, [r3, #16]
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	015a      	lsls	r2, r3, #5
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	4413      	add	r3, r2
 80074be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c2:	460a      	mov	r2, r1
 80074c4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	015a      	lsls	r2, r3, #5
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	4413      	add	r3, r2
 80074ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	693a      	ldr	r2, [r7, #16]
 80074d6:	0151      	lsls	r1, r2, #5
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	440a      	add	r2, r1
 80074dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80074e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	371c      	adds	r7, #28
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b087      	sub	sp, #28
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	785b      	ldrb	r3, [r3, #1]
 800750e:	2b01      	cmp	r3, #1
 8007510:	d14a      	bne.n	80075a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007526:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800752a:	f040 8086 	bne.w	800763a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	7812      	ldrb	r2, [r2, #0]
 8007542:	0151      	lsls	r1, r2, #5
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	440a      	add	r2, r1
 8007548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800754c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007550:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	015a      	lsls	r2, r3, #5
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	4413      	add	r3, r2
 800755c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	7812      	ldrb	r2, [r2, #0]
 8007566:	0151      	lsls	r1, r2, #5
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	440a      	add	r2, r1
 800756c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007570:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007574:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3301      	adds	r3, #1
 800757a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007582:	4293      	cmp	r3, r2
 8007584:	d902      	bls.n	800758c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	75fb      	strb	r3, [r7, #23]
          break;
 800758a:	e056      	b.n	800763a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075a4:	d0e7      	beq.n	8007576 <USB_EPStopXfer+0x82>
 80075a6:	e048      	b.n	800763a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075c0:	d13b      	bne.n	800763a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	7812      	ldrb	r2, [r2, #0]
 80075d6:	0151      	lsls	r1, r2, #5
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	440a      	add	r2, r1
 80075dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	7812      	ldrb	r2, [r2, #0]
 80075fa:	0151      	lsls	r1, r2, #5
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	440a      	add	r2, r1
 8007600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007604:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007608:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3301      	adds	r3, #1
 800760e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f242 7210 	movw	r2, #10000	; 0x2710
 8007616:	4293      	cmp	r3, r2
 8007618:	d902      	bls.n	8007620 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	75fb      	strb	r3, [r7, #23]
          break;
 800761e:	e00c      	b.n	800763a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007634:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007638:	d0e7      	beq.n	800760a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800763a:	7dfb      	ldrb	r3, [r7, #23]
}
 800763c:	4618      	mov	r0, r3
 800763e:	371c      	adds	r7, #28
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007648:	b480      	push	{r7}
 800764a:	b089      	sub	sp, #36	; 0x24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	4611      	mov	r1, r2
 8007654:	461a      	mov	r2, r3
 8007656:	460b      	mov	r3, r1
 8007658:	71fb      	strb	r3, [r7, #7]
 800765a:	4613      	mov	r3, r2
 800765c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007666:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800766a:	2b00      	cmp	r3, #0
 800766c:	d123      	bne.n	80076b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800766e:	88bb      	ldrh	r3, [r7, #4]
 8007670:	3303      	adds	r3, #3
 8007672:	089b      	lsrs	r3, r3, #2
 8007674:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007676:	2300      	movs	r3, #0
 8007678:	61bb      	str	r3, [r7, #24]
 800767a:	e018      	b.n	80076ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800767c:	79fb      	ldrb	r3, [r7, #7]
 800767e:	031a      	lsls	r2, r3, #12
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	4413      	add	r3, r2
 8007684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007688:	461a      	mov	r2, r3
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007690:	69fb      	ldr	r3, [r7, #28]
 8007692:	3301      	adds	r3, #1
 8007694:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	3301      	adds	r3, #1
 800769a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	3301      	adds	r3, #1
 80076a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	3301      	adds	r3, #1
 80076a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	3301      	adds	r3, #1
 80076ac:	61bb      	str	r3, [r7, #24]
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d3e2      	bcc.n	800767c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3724      	adds	r7, #36	; 0x24
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b08b      	sub	sp, #44	; 0x2c
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	4613      	mov	r3, r2
 80076d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80076da:	88fb      	ldrh	r3, [r7, #6]
 80076dc:	089b      	lsrs	r3, r3, #2
 80076de:	b29b      	uxth	r3, r3
 80076e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80076e2:	88fb      	ldrh	r3, [r7, #6]
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80076ea:	2300      	movs	r3, #0
 80076ec:	623b      	str	r3, [r7, #32]
 80076ee:	e014      	b.n	800771a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	3301      	adds	r3, #1
 8007700:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007704:	3301      	adds	r3, #1
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	3301      	adds	r3, #1
 800770c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800770e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007710:	3301      	adds	r3, #1
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	3301      	adds	r3, #1
 8007718:	623b      	str	r3, [r7, #32]
 800771a:	6a3a      	ldr	r2, [r7, #32]
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	429a      	cmp	r2, r3
 8007720:	d3e6      	bcc.n	80076f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007722:	8bfb      	ldrh	r3, [r7, #30]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d01e      	beq.n	8007766 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007732:	461a      	mov	r2, r3
 8007734:	f107 0310 	add.w	r3, r7, #16
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	b2db      	uxtb	r3, r3
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	fa22 f303 	lsr.w	r3, r2, r3
 8007748:	b2da      	uxtb	r2, r3
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	701a      	strb	r2, [r3, #0]
      i++;
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	3301      	adds	r3, #1
 8007752:	623b      	str	r3, [r7, #32]
      pDest++;
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	3301      	adds	r3, #1
 8007758:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800775a:	8bfb      	ldrh	r3, [r7, #30]
 800775c:	3b01      	subs	r3, #1
 800775e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007760:	8bfb      	ldrh	r3, [r7, #30]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1ea      	bne.n	800773c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007768:	4618      	mov	r0, r3
 800776a:	372c      	adds	r7, #44	; 0x2c
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	785b      	ldrb	r3, [r3, #1]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d12c      	bne.n	80077ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	db12      	blt.n	80077c8 <USB_EPSetStall+0x54>
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00f      	beq.n	80077c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	015a      	lsls	r2, r3, #5
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4413      	add	r3, r2
 80077b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68ba      	ldr	r2, [r7, #8]
 80077b8:	0151      	lsls	r1, r2, #5
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	440a      	add	r2, r1
 80077be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	0151      	lsls	r1, r2, #5
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	440a      	add	r2, r1
 80077de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	e02b      	b.n	8007842 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	015a      	lsls	r2, r3, #5
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	4413      	add	r3, r2
 80077f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	db12      	blt.n	8007822 <USB_EPSetStall+0xae>
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00f      	beq.n	8007822 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	015a      	lsls	r2, r3, #5
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	4413      	add	r3, r2
 800780a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68ba      	ldr	r2, [r7, #8]
 8007812:	0151      	lsls	r1, r2, #5
 8007814:	68fa      	ldr	r2, [r7, #12]
 8007816:	440a      	add	r2, r1
 8007818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800781c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007820:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68ba      	ldr	r2, [r7, #8]
 8007832:	0151      	lsls	r1, r2, #5
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	440a      	add	r2, r1
 8007838:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800783c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007840:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	785b      	ldrb	r3, [r3, #1]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d128      	bne.n	80078be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007886:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800788a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	791b      	ldrb	r3, [r3, #4]
 8007890:	2b03      	cmp	r3, #3
 8007892:	d003      	beq.n	800789c <USB_EPClearStall+0x4c>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	791b      	ldrb	r3, [r3, #4]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d138      	bne.n	800790e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	0151      	lsls	r1, r2, #5
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	440a      	add	r2, r1
 80078b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ba:	6013      	str	r3, [r2, #0]
 80078bc:	e027      	b.n	800790e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	0151      	lsls	r1, r2, #5
 80078d0:	68fa      	ldr	r2, [r7, #12]
 80078d2:	440a      	add	r2, r1
 80078d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	791b      	ldrb	r3, [r3, #4]
 80078e2:	2b03      	cmp	r3, #3
 80078e4:	d003      	beq.n	80078ee <USB_EPClearStall+0x9e>
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	791b      	ldrb	r3, [r3, #4]
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d10f      	bne.n	800790e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	015a      	lsls	r2, r3, #5
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4413      	add	r3, r2
 80078f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68ba      	ldr	r2, [r7, #8]
 80078fe:	0151      	lsls	r1, r2, #5
 8007900:	68fa      	ldr	r2, [r7, #12]
 8007902:	440a      	add	r2, r1
 8007904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800790c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800790e:	2300      	movs	r3, #0
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800791c:	b480      	push	{r7}
 800791e:	b085      	sub	sp, #20
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800793a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800793e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	78fb      	ldrb	r3, [r7, #3]
 800794a:	011b      	lsls	r3, r3, #4
 800794c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007950:	68f9      	ldr	r1, [r7, #12]
 8007952:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007956:	4313      	orrs	r3, r2
 8007958:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007982:	f023 0303 	bic.w	r3, r3, #3
 8007986:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007996:	f023 0302 	bic.w	r3, r3, #2
 800799a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800799c:	2300      	movs	r3, #0
}
 800799e:	4618      	mov	r0, r3
 80079a0:	3714      	adds	r7, #20
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr

080079aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079aa:	b480      	push	{r7}
 80079ac:	b085      	sub	sp, #20
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079c4:	f023 0303 	bic.w	r3, r3, #3
 80079c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079d8:	f043 0302 	orr.w	r3, r3, #2
 80079dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079de:	2300      	movs	r3, #0
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3714      	adds	r7, #20
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b085      	sub	sp, #20
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	4013      	ands	r3, r2
 8007a02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a04:	68fb      	ldr	r3, [r7, #12]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a12:	b480      	push	{r7}
 8007a14:	b085      	sub	sp, #20
 8007a16:	af00      	add	r7, sp, #0
 8007a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a2e:	69db      	ldr	r3, [r3, #28]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	4013      	ands	r3, r2
 8007a34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	0c1b      	lsrs	r3, r3, #16
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a62:	69db      	ldr	r3, [r3, #28]
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	4013      	ands	r3, r2
 8007a68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	b29b      	uxth	r3, r3
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr

08007a7a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b085      	sub	sp, #20
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	460b      	mov	r3, r1
 8007a84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	015a      	lsls	r2, r3, #5
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	4413      	add	r3, r2
 8007a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aa0:	695b      	ldr	r3, [r3, #20]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	4013      	ands	r3, r2
 8007aa6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3714      	adds	r7, #20
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b087      	sub	sp, #28
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ada:	78fb      	ldrb	r3, [r7, #3]
 8007adc:	f003 030f 	and.w	r3, r3, #15
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae6:	01db      	lsls	r3, r3, #7
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	015a      	lsls	r2, r3, #5
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	4413      	add	r3, r2
 8007af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	693a      	ldr	r2, [r7, #16]
 8007b00:	4013      	ands	r3, r2
 8007b02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b04:	68bb      	ldr	r3, [r7, #8]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b083      	sub	sp, #12
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b085      	sub	sp, #20
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b4c:	f023 0307 	bic.w	r3, r3, #7
 8007b50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	68fa      	ldr	r2, [r7, #12]
 8007b5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	607a      	str	r2, [r7, #4]
 8007b80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	333c      	adds	r3, #60	; 0x3c
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	4a26      	ldr	r2, [pc, #152]	; (8007c2c <USB_EP0_OutStart+0xb8>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d90a      	bls.n	8007bae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ba8:	d101      	bne.n	8007bae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	e037      	b.n	8007c1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bcc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	697a      	ldr	r2, [r7, #20]
 8007bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bdc:	f043 0318 	orr.w	r3, r3, #24
 8007be0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	697a      	ldr	r2, [r7, #20]
 8007bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007bf4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007bf6:	7afb      	ldrb	r3, [r7, #11]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d10f      	bne.n	8007c1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c02:	461a      	mov	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007c1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	371c      	adds	r7, #28
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	4f54300a 	.word	0x4f54300a

08007c30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	4a13      	ldr	r2, [pc, #76]	; (8007c94 <USB_CoreReset+0x64>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d901      	bls.n	8007c4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e01b      	b.n	8007c86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	daf2      	bge.n	8007c3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	f043 0201 	orr.w	r2, r3, #1
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	4a09      	ldr	r2, [pc, #36]	; (8007c94 <USB_CoreReset+0x64>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d901      	bls.n	8007c78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c74:	2303      	movs	r3, #3
 8007c76:	e006      	b.n	8007c86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d0f0      	beq.n	8007c66 <USB_CoreReset+0x36>

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	00030d40 	.word	0x00030d40

08007c98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ca4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ca8:	f006 ffa4 	bl	800ebf4 <USBD_static_malloc>
 8007cac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d109      	bne.n	8007cc8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	32b0      	adds	r2, #176	; 0xb0
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007cc4:	2302      	movs	r3, #2
 8007cc6:	e0d4      	b.n	8007e72 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007cc8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007ccc:	2100      	movs	r1, #0
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f007 ffbc 	bl	800fc4c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	32b0      	adds	r2, #176	; 0xb0
 8007cde:	68f9      	ldr	r1, [r7, #12]
 8007ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	32b0      	adds	r2, #176	; 0xb0
 8007cee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	7c1b      	ldrb	r3, [r3, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d138      	bne.n	8007d72 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d00:	4b5e      	ldr	r3, [pc, #376]	; (8007e7c <USBD_CDC_Init+0x1e4>)
 8007d02:	7819      	ldrb	r1, [r3, #0]
 8007d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d08:	2202      	movs	r2, #2
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f006 fe4f 	bl	800e9ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d10:	4b5a      	ldr	r3, [pc, #360]	; (8007e7c <USBD_CDC_Init+0x1e4>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	f003 020f 	and.w	r2, r3, #15
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	440b      	add	r3, r1
 8007d24:	3324      	adds	r3, #36	; 0x24
 8007d26:	2201      	movs	r2, #1
 8007d28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d2a:	4b55      	ldr	r3, [pc, #340]	; (8007e80 <USBD_CDC_Init+0x1e8>)
 8007d2c:	7819      	ldrb	r1, [r3, #0]
 8007d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d32:	2202      	movs	r2, #2
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f006 fe3a 	bl	800e9ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007d3a:	4b51      	ldr	r3, [pc, #324]	; (8007e80 <USBD_CDC_Init+0x1e8>)
 8007d3c:	781b      	ldrb	r3, [r3, #0]
 8007d3e:	f003 020f 	and.w	r2, r3, #15
 8007d42:	6879      	ldr	r1, [r7, #4]
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	440b      	add	r3, r1
 8007d4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007d52:	2201      	movs	r2, #1
 8007d54:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007d56:	4b4b      	ldr	r3, [pc, #300]	; (8007e84 <USBD_CDC_Init+0x1ec>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	f003 020f 	and.w	r2, r3, #15
 8007d5e:	6879      	ldr	r1, [r7, #4]
 8007d60:	4613      	mov	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	440b      	add	r3, r1
 8007d6a:	3326      	adds	r3, #38	; 0x26
 8007d6c:	2210      	movs	r2, #16
 8007d6e:	801a      	strh	r2, [r3, #0]
 8007d70:	e035      	b.n	8007dde <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007d72:	4b42      	ldr	r3, [pc, #264]	; (8007e7c <USBD_CDC_Init+0x1e4>)
 8007d74:	7819      	ldrb	r1, [r3, #0]
 8007d76:	2340      	movs	r3, #64	; 0x40
 8007d78:	2202      	movs	r2, #2
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f006 fe17 	bl	800e9ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007d80:	4b3e      	ldr	r3, [pc, #248]	; (8007e7c <USBD_CDC_Init+0x1e4>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	f003 020f 	and.w	r2, r3, #15
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	3324      	adds	r3, #36	; 0x24
 8007d96:	2201      	movs	r2, #1
 8007d98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007d9a:	4b39      	ldr	r3, [pc, #228]	; (8007e80 <USBD_CDC_Init+0x1e8>)
 8007d9c:	7819      	ldrb	r1, [r3, #0]
 8007d9e:	2340      	movs	r3, #64	; 0x40
 8007da0:	2202      	movs	r2, #2
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f006 fe03 	bl	800e9ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007da8:	4b35      	ldr	r3, [pc, #212]	; (8007e80 <USBD_CDC_Init+0x1e8>)
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	f003 020f 	and.w	r2, r3, #15
 8007db0:	6879      	ldr	r1, [r7, #4]
 8007db2:	4613      	mov	r3, r2
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	4413      	add	r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	440b      	add	r3, r1
 8007dbc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007dc4:	4b2f      	ldr	r3, [pc, #188]	; (8007e84 <USBD_CDC_Init+0x1ec>)
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	f003 020f 	and.w	r2, r3, #15
 8007dcc:	6879      	ldr	r1, [r7, #4]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	440b      	add	r3, r1
 8007dd8:	3326      	adds	r3, #38	; 0x26
 8007dda:	2210      	movs	r2, #16
 8007ddc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007dde:	4b29      	ldr	r3, [pc, #164]	; (8007e84 <USBD_CDC_Init+0x1ec>)
 8007de0:	7819      	ldrb	r1, [r3, #0]
 8007de2:	2308      	movs	r3, #8
 8007de4:	2203      	movs	r2, #3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f006 fde1 	bl	800e9ae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007dec:	4b25      	ldr	r3, [pc, #148]	; (8007e84 <USBD_CDC_Init+0x1ec>)
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	f003 020f 	and.w	r2, r3, #15
 8007df4:	6879      	ldr	r1, [r7, #4]
 8007df6:	4613      	mov	r3, r2
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	440b      	add	r3, r1
 8007e00:	3324      	adds	r3, #36	; 0x24
 8007e02:	2201      	movs	r2, #1
 8007e04:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	33b0      	adds	r3, #176	; 0xb0
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4413      	add	r3, r2
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d101      	bne.n	8007e40 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007e3c:	2302      	movs	r3, #2
 8007e3e:	e018      	b.n	8007e72 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	7c1b      	ldrb	r3, [r3, #16]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e48:	4b0d      	ldr	r3, [pc, #52]	; (8007e80 <USBD_CDC_Init+0x1e8>)
 8007e4a:	7819      	ldrb	r1, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f006 fe98 	bl	800eb8c <USBD_LL_PrepareReceive>
 8007e5c:	e008      	b.n	8007e70 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e5e:	4b08      	ldr	r3, [pc, #32]	; (8007e80 <USBD_CDC_Init+0x1e8>)
 8007e60:	7819      	ldrb	r1, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e68:	2340      	movs	r3, #64	; 0x40
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f006 fe8e 	bl	800eb8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	2000009f 	.word	0x2000009f
 8007e80:	200000a0 	.word	0x200000a0
 8007e84:	200000a1 	.word	0x200000a1

08007e88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	460b      	mov	r3, r1
 8007e92:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007e94:	4b3a      	ldr	r3, [pc, #232]	; (8007f80 <USBD_CDC_DeInit+0xf8>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f006 fdad 	bl	800e9fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007ea0:	4b37      	ldr	r3, [pc, #220]	; (8007f80 <USBD_CDC_DeInit+0xf8>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	f003 020f 	and.w	r2, r3, #15
 8007ea8:	6879      	ldr	r1, [r7, #4]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	440b      	add	r3, r1
 8007eb4:	3324      	adds	r3, #36	; 0x24
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007eba:	4b32      	ldr	r3, [pc, #200]	; (8007f84 <USBD_CDC_DeInit+0xfc>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f006 fd9a 	bl	800e9fa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007ec6:	4b2f      	ldr	r3, [pc, #188]	; (8007f84 <USBD_CDC_DeInit+0xfc>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	f003 020f 	and.w	r2, r3, #15
 8007ece:	6879      	ldr	r1, [r7, #4]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	440b      	add	r3, r1
 8007eda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007ede:	2200      	movs	r2, #0
 8007ee0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007ee2:	4b29      	ldr	r3, [pc, #164]	; (8007f88 <USBD_CDC_DeInit+0x100>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f006 fd86 	bl	800e9fa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007eee:	4b26      	ldr	r3, [pc, #152]	; (8007f88 <USBD_CDC_DeInit+0x100>)
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	f003 020f 	and.w	r2, r3, #15
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	440b      	add	r3, r1
 8007f02:	3324      	adds	r3, #36	; 0x24
 8007f04:	2200      	movs	r2, #0
 8007f06:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007f08:	4b1f      	ldr	r3, [pc, #124]	; (8007f88 <USBD_CDC_DeInit+0x100>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	f003 020f 	and.w	r2, r3, #15
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	3326      	adds	r3, #38	; 0x26
 8007f1e:	2200      	movs	r2, #0
 8007f20:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	32b0      	adds	r2, #176	; 0xb0
 8007f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d01f      	beq.n	8007f74 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	33b0      	adds	r3, #176	; 0xb0
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	32b0      	adds	r2, #176	; 0xb0
 8007f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f006 fe5a 	bl	800ec10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	32b0      	adds	r2, #176	; 0xb0
 8007f66:	2100      	movs	r1, #0
 8007f68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3708      	adds	r7, #8
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	2000009f 	.word	0x2000009f
 8007f84:	200000a0 	.word	0x200000a0
 8007f88:	200000a1 	.word	0x200000a1

08007f8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	32b0      	adds	r2, #176	; 0xb0
 8007fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d101      	bne.n	8007fbc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e0bf      	b.n	800813c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d050      	beq.n	800806a <USBD_CDC_Setup+0xde>
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	f040 80af 	bne.w	800812c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	88db      	ldrh	r3, [r3, #6]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d03a      	beq.n	800804c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	b25b      	sxtb	r3, r3
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	da1b      	bge.n	8008018 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	33b0      	adds	r3, #176	; 0xb0
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	683a      	ldr	r2, [r7, #0]
 8007ff4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007ff6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	88d2      	ldrh	r2, [r2, #6]
 8007ffc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	88db      	ldrh	r3, [r3, #6]
 8008002:	2b07      	cmp	r3, #7
 8008004:	bf28      	it	cs
 8008006:	2307      	movcs	r3, #7
 8008008:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	89fa      	ldrh	r2, [r7, #14]
 800800e:	4619      	mov	r1, r3
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 fd89 	bl	8009b28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008016:	e090      	b.n	800813a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	785a      	ldrb	r2, [r3, #1]
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	88db      	ldrh	r3, [r3, #6]
 8008026:	2b3f      	cmp	r3, #63	; 0x3f
 8008028:	d803      	bhi.n	8008032 <USBD_CDC_Setup+0xa6>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	88db      	ldrh	r3, [r3, #6]
 800802e:	b2da      	uxtb	r2, r3
 8008030:	e000      	b.n	8008034 <USBD_CDC_Setup+0xa8>
 8008032:	2240      	movs	r2, #64	; 0x40
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800803a:	6939      	ldr	r1, [r7, #16]
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008042:	461a      	mov	r2, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 fd9b 	bl	8009b80 <USBD_CtlPrepareRx>
      break;
 800804a:	e076      	b.n	800813a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	33b0      	adds	r3, #176	; 0xb0
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	7850      	ldrb	r0, [r2, #1]
 8008062:	2200      	movs	r2, #0
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	4798      	blx	r3
      break;
 8008068:	e067      	b.n	800813a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	785b      	ldrb	r3, [r3, #1]
 800806e:	2b0b      	cmp	r3, #11
 8008070:	d851      	bhi.n	8008116 <USBD_CDC_Setup+0x18a>
 8008072:	a201      	add	r2, pc, #4	; (adr r2, 8008078 <USBD_CDC_Setup+0xec>)
 8008074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008078:	080080a9 	.word	0x080080a9
 800807c:	08008125 	.word	0x08008125
 8008080:	08008117 	.word	0x08008117
 8008084:	08008117 	.word	0x08008117
 8008088:	08008117 	.word	0x08008117
 800808c:	08008117 	.word	0x08008117
 8008090:	08008117 	.word	0x08008117
 8008094:	08008117 	.word	0x08008117
 8008098:	08008117 	.word	0x08008117
 800809c:	08008117 	.word	0x08008117
 80080a0:	080080d3 	.word	0x080080d3
 80080a4:	080080fd 	.word	0x080080fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	2b03      	cmp	r3, #3
 80080b2:	d107      	bne.n	80080c4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80080b4:	f107 030a 	add.w	r3, r7, #10
 80080b8:	2202      	movs	r2, #2
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f001 fd33 	bl	8009b28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080c2:	e032      	b.n	800812a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80080c4:	6839      	ldr	r1, [r7, #0]
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f001 fcbd 	bl	8009a46 <USBD_CtlError>
            ret = USBD_FAIL;
 80080cc:	2303      	movs	r3, #3
 80080ce:	75fb      	strb	r3, [r7, #23]
          break;
 80080d0:	e02b      	b.n	800812a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d107      	bne.n	80080ee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80080de:	f107 030d 	add.w	r3, r7, #13
 80080e2:	2201      	movs	r2, #1
 80080e4:	4619      	mov	r1, r3
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f001 fd1e 	bl	8009b28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80080ec:	e01d      	b.n	800812a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80080ee:	6839      	ldr	r1, [r7, #0]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 fca8 	bl	8009a46 <USBD_CtlError>
            ret = USBD_FAIL;
 80080f6:	2303      	movs	r3, #3
 80080f8:	75fb      	strb	r3, [r7, #23]
          break;
 80080fa:	e016      	b.n	800812a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b03      	cmp	r3, #3
 8008106:	d00f      	beq.n	8008128 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008108:	6839      	ldr	r1, [r7, #0]
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f001 fc9b 	bl	8009a46 <USBD_CtlError>
            ret = USBD_FAIL;
 8008110:	2303      	movs	r3, #3
 8008112:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008114:	e008      	b.n	8008128 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008116:	6839      	ldr	r1, [r7, #0]
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f001 fc94 	bl	8009a46 <USBD_CtlError>
          ret = USBD_FAIL;
 800811e:	2303      	movs	r3, #3
 8008120:	75fb      	strb	r3, [r7, #23]
          break;
 8008122:	e002      	b.n	800812a <USBD_CDC_Setup+0x19e>
          break;
 8008124:	bf00      	nop
 8008126:	e008      	b.n	800813a <USBD_CDC_Setup+0x1ae>
          break;
 8008128:	bf00      	nop
      }
      break;
 800812a:	e006      	b.n	800813a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 fc89 	bl	8009a46 <USBD_CtlError>
      ret = USBD_FAIL;
 8008134:	2303      	movs	r3, #3
 8008136:	75fb      	strb	r3, [r7, #23]
      break;
 8008138:	bf00      	nop
  }

  return (uint8_t)ret;
 800813a:	7dfb      	ldrb	r3, [r7, #23]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3718      	adds	r7, #24
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b084      	sub	sp, #16
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	460b      	mov	r3, r1
 800814e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008156:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	32b0      	adds	r2, #176	; 0xb0
 8008162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d101      	bne.n	800816e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800816a:	2303      	movs	r3, #3
 800816c:	e065      	b.n	800823a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	32b0      	adds	r2, #176	; 0xb0
 8008178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800817c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800817e:	78fb      	ldrb	r3, [r7, #3]
 8008180:	f003 020f 	and.w	r2, r3, #15
 8008184:	6879      	ldr	r1, [r7, #4]
 8008186:	4613      	mov	r3, r2
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	440b      	add	r3, r1
 8008190:	3318      	adds	r3, #24
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d02f      	beq.n	80081f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008198:	78fb      	ldrb	r3, [r7, #3]
 800819a:	f003 020f 	and.w	r2, r3, #15
 800819e:	6879      	ldr	r1, [r7, #4]
 80081a0:	4613      	mov	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	4413      	add	r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	440b      	add	r3, r1
 80081aa:	3318      	adds	r3, #24
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	f003 010f 	and.w	r1, r3, #15
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	460b      	mov	r3, r1
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	440b      	add	r3, r1
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	4403      	add	r3, r0
 80081c0:	3348      	adds	r3, #72	; 0x48
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	fbb2 f1f3 	udiv	r1, r2, r3
 80081c8:	fb01 f303 	mul.w	r3, r1, r3
 80081cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d112      	bne.n	80081f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	f003 020f 	and.w	r2, r3, #15
 80081d8:	6879      	ldr	r1, [r7, #4]
 80081da:	4613      	mov	r3, r2
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	440b      	add	r3, r1
 80081e4:	3318      	adds	r3, #24
 80081e6:	2200      	movs	r2, #0
 80081e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80081ea:	78f9      	ldrb	r1, [r7, #3]
 80081ec:	2300      	movs	r3, #0
 80081ee:	2200      	movs	r2, #0
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f006 fcaa 	bl	800eb4a <USBD_LL_Transmit>
 80081f6:	e01f      	b.n	8008238 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	2200      	movs	r2, #0
 80081fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	33b0      	adds	r3, #176	; 0xb0
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	4413      	add	r3, r2
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d010      	beq.n	8008238 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	33b0      	adds	r3, #176	; 0xb0
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4413      	add	r3, r2
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008234:	78fa      	ldrb	r2, [r7, #3]
 8008236:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b084      	sub	sp, #16
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	460b      	mov	r3, r1
 800824c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	32b0      	adds	r2, #176	; 0xb0
 8008258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800825c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	32b0      	adds	r2, #176	; 0xb0
 8008268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d101      	bne.n	8008274 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008270:	2303      	movs	r3, #3
 8008272:	e01a      	b.n	80082aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f006 fca8 	bl	800ebce <USBD_LL_GetRxDataSize>
 800827e:	4602      	mov	r2, r0
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	33b0      	adds	r3, #176	; 0xb0
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	68db      	ldr	r3, [r3, #12]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80082a4:	4611      	mov	r1, r2
 80082a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	32b0      	adds	r2, #176	; 0xb0
 80082c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d101      	bne.n	80082d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e025      	b.n	8008320 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	33b0      	adds	r3, #176	; 0xb0
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01a      	beq.n	800831e <USBD_CDC_EP0_RxReady+0x6c>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80082ee:	2bff      	cmp	r3, #255	; 0xff
 80082f0:	d015      	beq.n	800831e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	33b0      	adds	r3, #176	; 0xb0
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800830a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008312:	b292      	uxth	r2, r2
 8008314:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	22ff      	movs	r2, #255	; 0xff
 800831a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008330:	2182      	movs	r1, #130	; 0x82
 8008332:	4818      	ldr	r0, [pc, #96]	; (8008394 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008334:	f000 fd4f 	bl	8008dd6 <USBD_GetEpDesc>
 8008338:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800833a:	2101      	movs	r1, #1
 800833c:	4815      	ldr	r0, [pc, #84]	; (8008394 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800833e:	f000 fd4a 	bl	8008dd6 <USBD_GetEpDesc>
 8008342:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008344:	2181      	movs	r1, #129	; 0x81
 8008346:	4813      	ldr	r0, [pc, #76]	; (8008394 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008348:	f000 fd45 	bl	8008dd6 <USBD_GetEpDesc>
 800834c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	2210      	movs	r2, #16
 8008358:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d006      	beq.n	800836e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	2200      	movs	r2, #0
 8008364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008368:	711a      	strb	r2, [r3, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d006      	beq.n	8008382 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800837c:	711a      	strb	r2, [r3, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2243      	movs	r2, #67	; 0x43
 8008386:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008388:	4b02      	ldr	r3, [pc, #8]	; (8008394 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800838a:	4618      	mov	r0, r3
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	2000005c 	.word	0x2000005c

08008398 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80083a0:	2182      	movs	r1, #130	; 0x82
 80083a2:	4818      	ldr	r0, [pc, #96]	; (8008404 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80083a4:	f000 fd17 	bl	8008dd6 <USBD_GetEpDesc>
 80083a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80083aa:	2101      	movs	r1, #1
 80083ac:	4815      	ldr	r0, [pc, #84]	; (8008404 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80083ae:	f000 fd12 	bl	8008dd6 <USBD_GetEpDesc>
 80083b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80083b4:	2181      	movs	r1, #129	; 0x81
 80083b6:	4813      	ldr	r0, [pc, #76]	; (8008404 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80083b8:	f000 fd0d 	bl	8008dd6 <USBD_GetEpDesc>
 80083bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2210      	movs	r2, #16
 80083c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d006      	beq.n	80083de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	2200      	movs	r2, #0
 80083d4:	711a      	strb	r2, [r3, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f042 0202 	orr.w	r2, r2, #2
 80083dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d006      	beq.n	80083f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	711a      	strb	r2, [r3, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f042 0202 	orr.w	r2, r2, #2
 80083f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2243      	movs	r2, #67	; 0x43
 80083f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80083f8:	4b02      	ldr	r3, [pc, #8]	; (8008404 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	2000005c 	.word	0x2000005c

08008408 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008410:	2182      	movs	r1, #130	; 0x82
 8008412:	4818      	ldr	r0, [pc, #96]	; (8008474 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008414:	f000 fcdf 	bl	8008dd6 <USBD_GetEpDesc>
 8008418:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800841a:	2101      	movs	r1, #1
 800841c:	4815      	ldr	r0, [pc, #84]	; (8008474 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800841e:	f000 fcda 	bl	8008dd6 <USBD_GetEpDesc>
 8008422:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008424:	2181      	movs	r1, #129	; 0x81
 8008426:	4813      	ldr	r0, [pc, #76]	; (8008474 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008428:	f000 fcd5 	bl	8008dd6 <USBD_GetEpDesc>
 800842c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	2210      	movs	r2, #16
 8008438:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d006      	beq.n	800844e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	2200      	movs	r2, #0
 8008444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008448:	711a      	strb	r2, [r3, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d006      	beq.n	8008462 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800845c:	711a      	strb	r2, [r3, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2243      	movs	r2, #67	; 0x43
 8008466:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008468:	4b02      	ldr	r3, [pc, #8]	; (8008474 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	2000005c 	.word	0x2000005c

08008478 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	220a      	movs	r2, #10
 8008484:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008486:	4b03      	ldr	r3, [pc, #12]	; (8008494 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008488:	4618      	mov	r0, r3
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr
 8008494:	20000018 	.word	0x20000018

08008498 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e009      	b.n	80084c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	33b0      	adds	r3, #176	; 0xb0
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	32b0      	adds	r2, #176	; 0xb0
 80084e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084e6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e008      	b.n	8008504 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	68ba      	ldr	r2, [r7, #8]
 80084f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	371c      	adds	r7, #28
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	32b0      	adds	r2, #176	; 0xb0
 8008524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008528:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008530:	2303      	movs	r3, #3
 8008532:	e004      	b.n	800853e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
	...

0800854c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	32b0      	adds	r2, #176	; 0xb0
 800855e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008562:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008564:	2301      	movs	r3, #1
 8008566:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	32b0      	adds	r2, #176	; 0xb0
 8008572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800857a:	2303      	movs	r3, #3
 800857c:	e025      	b.n	80085ca <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008584:	2b00      	cmp	r3, #0
 8008586:	d11f      	bne.n	80085c8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2201      	movs	r2, #1
 800858c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008590:	4b10      	ldr	r3, [pc, #64]	; (80085d4 <USBD_CDC_TransmitPacket+0x88>)
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	f003 020f 	and.w	r2, r3, #15
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	4613      	mov	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4403      	add	r3, r0
 80085aa:	3318      	adds	r3, #24
 80085ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80085ae:	4b09      	ldr	r3, [pc, #36]	; (80085d4 <USBD_CDC_TransmitPacket+0x88>)
 80085b0:	7819      	ldrb	r1, [r3, #0]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f006 fac3 	bl	800eb4a <USBD_LL_Transmit>

    ret = USBD_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	2000009f 	.word	0x2000009f

080085d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	32b0      	adds	r2, #176	; 0xb0
 80085ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	32b0      	adds	r2, #176	; 0xb0
 80085fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d101      	bne.n	8008606 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008602:	2303      	movs	r3, #3
 8008604:	e018      	b.n	8008638 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	7c1b      	ldrb	r3, [r3, #16]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10a      	bne.n	8008624 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800860e:	4b0c      	ldr	r3, [pc, #48]	; (8008640 <USBD_CDC_ReceivePacket+0x68>)
 8008610:	7819      	ldrb	r1, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008618:	f44f 7300 	mov.w	r3, #512	; 0x200
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f006 fab5 	bl	800eb8c <USBD_LL_PrepareReceive>
 8008622:	e008      	b.n	8008636 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008624:	4b06      	ldr	r3, [pc, #24]	; (8008640 <USBD_CDC_ReceivePacket+0x68>)
 8008626:	7819      	ldrb	r1, [r3, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800862e:	2340      	movs	r3, #64	; 0x40
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f006 faab 	bl	800eb8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	3710      	adds	r7, #16
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	200000a0 	.word	0x200000a0

08008644 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	4613      	mov	r3, r2
 8008650:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d101      	bne.n	800865c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008658:	2303      	movs	r3, #3
 800865a:	e01f      	b.n	800869c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2200      	movs	r2, #0
 8008670:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d003      	beq.n	8008682 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	79fa      	ldrb	r2, [r7, #7]
 800868e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f006 f925 	bl	800e8e0 <USBD_LL_Init>
 8008696:	4603      	mov	r3, r0
 8008698:	75fb      	strb	r3, [r7, #23]

  return ret;
 800869a:	7dfb      	ldrb	r3, [r7, #23]
}
 800869c:	4618      	mov	r0, r3
 800869e:	3718      	adds	r7, #24
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80086ae:	2300      	movs	r3, #0
 80086b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e025      	b.n	8008708 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	32ae      	adds	r2, #174	; 0xae
 80086ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00f      	beq.n	80086f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	32ae      	adds	r2, #174	; 0xae
 80086e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e8:	f107 020e 	add.w	r2, r7, #14
 80086ec:	4610      	mov	r0, r2
 80086ee:	4798      	blx	r3
 80086f0:	4602      	mov	r2, r0
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80086fe:	1c5a      	adds	r2, r3, #1
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008706:	2300      	movs	r3, #0
}
 8008708:	4618      	mov	r0, r3
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f006 f92d 	bl	800e978 <USBD_LL_Start>
 800871e:	4603      	mov	r3, r0
}
 8008720:	4618      	mov	r0, r3
 8008722:	3708      	adds	r7, #8
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}

08008728 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008730:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008732:	4618      	mov	r0, r3
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
 8008746:	460b      	mov	r3, r1
 8008748:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008754:	2b00      	cmp	r3, #0
 8008756:	d009      	beq.n	800876c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	78fa      	ldrb	r2, [r7, #3]
 8008762:	4611      	mov	r1, r2
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	4798      	blx	r3
 8008768:	4603      	mov	r3, r0
 800876a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008782:	2300      	movs	r3, #0
 8008784:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	4611      	mov	r1, r2
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	4798      	blx	r3
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800879c:	2303      	movs	r3, #3
 800879e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	b084      	sub	sp, #16
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	4618      	mov	r0, r3
 80087be:	f001 f908 	bl	80099d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80087d0:	461a      	mov	r2, r3
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80087de:	f003 031f 	and.w	r3, r3, #31
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d01a      	beq.n	800881c <USBD_LL_SetupStage+0x72>
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d822      	bhi.n	8008830 <USBD_LL_SetupStage+0x86>
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <USBD_LL_SetupStage+0x4a>
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d00a      	beq.n	8008808 <USBD_LL_SetupStage+0x5e>
 80087f2:	e01d      	b.n	8008830 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80087fa:	4619      	mov	r1, r3
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 fb5f 	bl	8008ec0 <USBD_StdDevReq>
 8008802:	4603      	mov	r3, r0
 8008804:	73fb      	strb	r3, [r7, #15]
      break;
 8008806:	e020      	b.n	800884a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fbc7 	bl	8008fa4 <USBD_StdItfReq>
 8008816:	4603      	mov	r3, r0
 8008818:	73fb      	strb	r3, [r7, #15]
      break;
 800881a:	e016      	b.n	800884a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fc29 	bl	800907c <USBD_StdEPReq>
 800882a:	4603      	mov	r3, r0
 800882c:	73fb      	strb	r3, [r7, #15]
      break;
 800882e:	e00c      	b.n	800884a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008836:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800883a:	b2db      	uxtb	r3, r3
 800883c:	4619      	mov	r1, r3
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f006 f8fa 	bl	800ea38 <USBD_LL_StallEP>
 8008844:	4603      	mov	r3, r0
 8008846:	73fb      	strb	r3, [r7, #15]
      break;
 8008848:	bf00      	nop
  }

  return ret;
 800884a:	7bfb      	ldrb	r3, [r7, #15]
}
 800884c:	4618      	mov	r0, r3
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	460b      	mov	r3, r1
 800885e:	607a      	str	r2, [r7, #4]
 8008860:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008862:	2300      	movs	r3, #0
 8008864:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008866:	7afb      	ldrb	r3, [r7, #11]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d16e      	bne.n	800894a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008872:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800887a:	2b03      	cmp	r3, #3
 800887c:	f040 8098 	bne.w	80089b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	689a      	ldr	r2, [r3, #8]
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	429a      	cmp	r2, r3
 800888a:	d913      	bls.n	80088b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	689a      	ldr	r2, [r3, #8]
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	1ad2      	subs	r2, r2, r3
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	68da      	ldr	r2, [r3, #12]
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	4293      	cmp	r3, r2
 80088a4:	bf28      	it	cs
 80088a6:	4613      	movcs	r3, r2
 80088a8:	461a      	mov	r2, r3
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f001 f984 	bl	8009bba <USBD_CtlContinueRx>
 80088b2:	e07d      	b.n	80089b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80088ba:	f003 031f 	and.w	r3, r3, #31
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d014      	beq.n	80088ec <USBD_LL_DataOutStage+0x98>
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d81d      	bhi.n	8008902 <USBD_LL_DataOutStage+0xae>
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d002      	beq.n	80088d0 <USBD_LL_DataOutStage+0x7c>
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d003      	beq.n	80088d6 <USBD_LL_DataOutStage+0x82>
 80088ce:	e018      	b.n	8008902 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	75bb      	strb	r3, [r7, #22]
            break;
 80088d4:	e018      	b.n	8008908 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	4619      	mov	r1, r3
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 fa5e 	bl	8008da2 <USBD_CoreFindIF>
 80088e6:	4603      	mov	r3, r0
 80088e8:	75bb      	strb	r3, [r7, #22]
            break;
 80088ea:	e00d      	b.n	8008908 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	4619      	mov	r1, r3
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 fa60 	bl	8008dbc <USBD_CoreFindEP>
 80088fc:	4603      	mov	r3, r0
 80088fe:	75bb      	strb	r3, [r7, #22]
            break;
 8008900:	e002      	b.n	8008908 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	75bb      	strb	r3, [r7, #22]
            break;
 8008906:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008908:	7dbb      	ldrb	r3, [r7, #22]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d119      	bne.n	8008942 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008914:	b2db      	uxtb	r3, r3
 8008916:	2b03      	cmp	r3, #3
 8008918:	d113      	bne.n	8008942 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800891a:	7dba      	ldrb	r2, [r7, #22]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	32ae      	adds	r2, #174	; 0xae
 8008920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00b      	beq.n	8008942 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800892a:	7dba      	ldrb	r2, [r7, #22]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008932:	7dba      	ldrb	r2, [r7, #22]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	32ae      	adds	r2, #174	; 0xae
 8008938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008942:	68f8      	ldr	r0, [r7, #12]
 8008944:	f001 f94a 	bl	8009bdc <USBD_CtlSendStatus>
 8008948:	e032      	b.n	80089b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800894a:	7afb      	ldrb	r3, [r7, #11]
 800894c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008950:	b2db      	uxtb	r3, r3
 8008952:	4619      	mov	r1, r3
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 fa31 	bl	8008dbc <USBD_CoreFindEP>
 800895a:	4603      	mov	r3, r0
 800895c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800895e:	7dbb      	ldrb	r3, [r7, #22]
 8008960:	2bff      	cmp	r3, #255	; 0xff
 8008962:	d025      	beq.n	80089b0 <USBD_LL_DataOutStage+0x15c>
 8008964:	7dbb      	ldrb	r3, [r7, #22]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d122      	bne.n	80089b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b03      	cmp	r3, #3
 8008974:	d117      	bne.n	80089a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008976:	7dba      	ldrb	r2, [r7, #22]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	32ae      	adds	r2, #174	; 0xae
 800897c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008980:	699b      	ldr	r3, [r3, #24]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00f      	beq.n	80089a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008986:	7dba      	ldrb	r2, [r7, #22]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800898e:	7dba      	ldrb	r2, [r7, #22]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	32ae      	adds	r2, #174	; 0xae
 8008994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	7afa      	ldrb	r2, [r7, #11]
 800899c:	4611      	mov	r1, r2
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	4798      	blx	r3
 80089a2:	4603      	mov	r3, r0
 80089a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80089ac:	7dfb      	ldrb	r3, [r7, #23]
 80089ae:	e000      	b.n	80089b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3718      	adds	r7, #24
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}

080089ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b086      	sub	sp, #24
 80089be:	af00      	add	r7, sp, #0
 80089c0:	60f8      	str	r0, [r7, #12]
 80089c2:	460b      	mov	r3, r1
 80089c4:	607a      	str	r2, [r7, #4]
 80089c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80089c8:	7afb      	ldrb	r3, [r7, #11]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d16f      	bne.n	8008aae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3314      	adds	r3, #20
 80089d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d15a      	bne.n	8008a94 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	689a      	ldr	r2, [r3, #8]
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d914      	bls.n	8008a14 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	689a      	ldr	r2, [r3, #8]
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	1ad2      	subs	r2, r2, r3
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	461a      	mov	r2, r3
 80089fe:	6879      	ldr	r1, [r7, #4]
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f001 f8ac 	bl	8009b5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a06:	2300      	movs	r3, #0
 8008a08:	2200      	movs	r2, #0
 8008a0a:	2100      	movs	r1, #0
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f006 f8bd 	bl	800eb8c <USBD_LL_PrepareReceive>
 8008a12:	e03f      	b.n	8008a94 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	68da      	ldr	r2, [r3, #12]
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	d11c      	bne.n	8008a5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d316      	bcc.n	8008a5a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d20f      	bcs.n	8008a5a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f001 f88d 	bl	8009b5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2200      	movs	r2, #0
 8008a48:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	2200      	movs	r2, #0
 8008a50:	2100      	movs	r1, #0
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f006 f89a 	bl	800eb8c <USBD_LL_PrepareReceive>
 8008a58:	e01c      	b.n	8008a94 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d10f      	bne.n	8008a86 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d009      	beq.n	8008a86 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a86:	2180      	movs	r1, #128	; 0x80
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	f005 ffd5 	bl	800ea38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f001 f8b7 	bl	8009c02 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d03a      	beq.n	8008b14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f7ff fe42 	bl	8008728 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008aac:	e032      	b.n	8008b14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008aae:	7afb      	ldrb	r3, [r7, #11]
 8008ab0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 f97f 	bl	8008dbc <USBD_CoreFindEP>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ac2:	7dfb      	ldrb	r3, [r7, #23]
 8008ac4:	2bff      	cmp	r3, #255	; 0xff
 8008ac6:	d025      	beq.n	8008b14 <USBD_LL_DataInStage+0x15a>
 8008ac8:	7dfb      	ldrb	r3, [r7, #23]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d122      	bne.n	8008b14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b03      	cmp	r3, #3
 8008ad8:	d11c      	bne.n	8008b14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008ada:	7dfa      	ldrb	r2, [r7, #23]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	32ae      	adds	r2, #174	; 0xae
 8008ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d014      	beq.n	8008b14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008aea:	7dfa      	ldrb	r2, [r7, #23]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008af2:	7dfa      	ldrb	r2, [r7, #23]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	32ae      	adds	r2, #174	; 0xae
 8008af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afc:	695b      	ldr	r3, [r3, #20]
 8008afe:	7afa      	ldrb	r2, [r7, #11]
 8008b00:	4611      	mov	r1, r2
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	4798      	blx	r3
 8008b06:	4603      	mov	r3, r0
 8008b08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008b0a:	7dbb      	ldrb	r3, [r7, #22]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008b10:	7dbb      	ldrb	r3, [r7, #22]
 8008b12:	e000      	b.n	8008b16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b26:	2300      	movs	r3, #0
 8008b28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d014      	beq.n	8008b84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00e      	beq.n	8008b84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	6852      	ldr	r2, [r2, #4]
 8008b72:	b2d2      	uxtb	r2, r2
 8008b74:	4611      	mov	r1, r2
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	4798      	blx	r3
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008b80:	2303      	movs	r3, #3
 8008b82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008b84:	2340      	movs	r3, #64	; 0x40
 8008b86:	2200      	movs	r2, #0
 8008b88:	2100      	movs	r1, #0
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f005 ff0f 	bl	800e9ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2240      	movs	r2, #64	; 0x40
 8008b9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ba0:	2340      	movs	r3, #64	; 0x40
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	2180      	movs	r1, #128	; 0x80
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f005 ff01 	bl	800e9ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2240      	movs	r2, #64	; 0x40
 8008bb6:	621a      	str	r2, [r3, #32]

  return ret;
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b083      	sub	sp, #12
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	78fa      	ldrb	r2, [r7, #3]
 8008bd2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008be2:	b480      	push	{r7}
 8008be4:	b083      	sub	sp, #12
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2204      	movs	r2, #4
 8008bfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b04      	cmp	r3, #4
 8008c20:	d106      	bne.n	8008c30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b082      	sub	sp, #8
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d110      	bne.n	8008c74 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00b      	beq.n	8008c74 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c62:	69db      	ldr	r3, [r3, #28]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b082      	sub	sp, #8
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
 8008c86:	460b      	mov	r3, r1
 8008c88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	32ae      	adds	r2, #174	; 0xae
 8008c94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e01c      	b.n	8008cda <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	2b03      	cmp	r3, #3
 8008caa:	d115      	bne.n	8008cd8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	32ae      	adds	r2, #174	; 0xae
 8008cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cba:	6a1b      	ldr	r3, [r3, #32]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d00b      	beq.n	8008cd8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	32ae      	adds	r2, #174	; 0xae
 8008cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cce:	6a1b      	ldr	r3, [r3, #32]
 8008cd0:	78fa      	ldrb	r2, [r7, #3]
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cd8:	2300      	movs	r3, #0
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3708      	adds	r7, #8
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	b082      	sub	sp, #8
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	460b      	mov	r3, r1
 8008cec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	32ae      	adds	r2, #174	; 0xae
 8008cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e01c      	b.n	8008d3e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d115      	bne.n	8008d3c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	32ae      	adds	r2, #174	; 0xae
 8008d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00b      	beq.n	8008d3c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	32ae      	adds	r2, #174	; 0xae
 8008d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d34:	78fa      	ldrb	r2, [r7, #3]
 8008d36:	4611      	mov	r1, r2
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b083      	sub	sp, #12
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00e      	beq.n	8008d98 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	6852      	ldr	r2, [r2, #4]
 8008d86:	b2d2      	uxtb	r2, r2
 8008d88:	4611      	mov	r1, r2
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	4798      	blx	r3
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008d94:	2303      	movs	r3, #3
 8008d96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008dae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	370c      	adds	r7, #12
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b083      	sub	sp, #12
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008dc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b086      	sub	sp, #24
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	460b      	mov	r3, r1
 8008de0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	885b      	ldrh	r3, [r3, #2]
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d920      	bls.n	8008e40 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008e06:	e013      	b.n	8008e30 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008e08:	f107 030a 	add.w	r3, r7, #10
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	6978      	ldr	r0, [r7, #20]
 8008e10:	f000 f81b 	bl	8008e4a <USBD_GetNextDesc>
 8008e14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	785b      	ldrb	r3, [r3, #1]
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	d108      	bne.n	8008e30 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	789b      	ldrb	r3, [r3, #2]
 8008e26:	78fa      	ldrb	r2, [r7, #3]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d008      	beq.n	8008e3e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	885b      	ldrh	r3, [r3, #2]
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	897b      	ldrh	r3, [r7, #10]
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d8e5      	bhi.n	8008e08 <USBD_GetEpDesc+0x32>
 8008e3c:	e000      	b.n	8008e40 <USBD_GetEpDesc+0x6a>
          break;
 8008e3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008e40:	693b      	ldr	r3, [r7, #16]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008e4a:	b480      	push	{r7}
 8008e4c:	b085      	sub	sp, #20
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
 8008e52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	881a      	ldrh	r2, [r3, #0]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	4413      	add	r3, r2
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4413      	add	r3, r2
 8008e74:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e76:	68fb      	ldr	r3, [r7, #12]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	781b      	ldrb	r3, [r3, #0]
 8008ea0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008ea2:	8a3b      	ldrh	r3, [r7, #16]
 8008ea4:	021b      	lsls	r3, r3, #8
 8008ea6:	b21a      	sxth	r2, r3
 8008ea8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	b21b      	sxth	r3, r3
 8008eb0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008eb2:	89fb      	ldrh	r3, [r7, #14]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	371c      	adds	r7, #28
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr

08008ec0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b084      	sub	sp, #16
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008ed6:	2b40      	cmp	r3, #64	; 0x40
 8008ed8:	d005      	beq.n	8008ee6 <USBD_StdDevReq+0x26>
 8008eda:	2b40      	cmp	r3, #64	; 0x40
 8008edc:	d857      	bhi.n	8008f8e <USBD_StdDevReq+0xce>
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00f      	beq.n	8008f02 <USBD_StdDevReq+0x42>
 8008ee2:	2b20      	cmp	r3, #32
 8008ee4:	d153      	bne.n	8008f8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	32ae      	adds	r2, #174	; 0xae
 8008ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	6839      	ldr	r1, [r7, #0]
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	4798      	blx	r3
 8008efc:	4603      	mov	r3, r0
 8008efe:	73fb      	strb	r3, [r7, #15]
      break;
 8008f00:	e04a      	b.n	8008f98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	785b      	ldrb	r3, [r3, #1]
 8008f06:	2b09      	cmp	r3, #9
 8008f08:	d83b      	bhi.n	8008f82 <USBD_StdDevReq+0xc2>
 8008f0a:	a201      	add	r2, pc, #4	; (adr r2, 8008f10 <USBD_StdDevReq+0x50>)
 8008f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f10:	08008f65 	.word	0x08008f65
 8008f14:	08008f79 	.word	0x08008f79
 8008f18:	08008f83 	.word	0x08008f83
 8008f1c:	08008f6f 	.word	0x08008f6f
 8008f20:	08008f83 	.word	0x08008f83
 8008f24:	08008f43 	.word	0x08008f43
 8008f28:	08008f39 	.word	0x08008f39
 8008f2c:	08008f83 	.word	0x08008f83
 8008f30:	08008f5b 	.word	0x08008f5b
 8008f34:	08008f4d 	.word	0x08008f4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fa3c 	bl	80093b8 <USBD_GetDescriptor>
          break;
 8008f40:	e024      	b.n	8008f8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fba1 	bl	800968c <USBD_SetAddress>
          break;
 8008f4a:	e01f      	b.n	8008f8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fbe0 	bl	8009714 <USBD_SetConfig>
 8008f54:	4603      	mov	r3, r0
 8008f56:	73fb      	strb	r3, [r7, #15]
          break;
 8008f58:	e018      	b.n	8008f8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fc83 	bl	8009868 <USBD_GetConfig>
          break;
 8008f62:	e013      	b.n	8008f8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008f64:	6839      	ldr	r1, [r7, #0]
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fcb4 	bl	80098d4 <USBD_GetStatus>
          break;
 8008f6c:	e00e      	b.n	8008f8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008f6e:	6839      	ldr	r1, [r7, #0]
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f000 fce3 	bl	800993c <USBD_SetFeature>
          break;
 8008f76:	e009      	b.n	8008f8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fd07 	bl	800998e <USBD_ClrFeature>
          break;
 8008f80:	e004      	b.n	8008f8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fd5e 	bl	8009a46 <USBD_CtlError>
          break;
 8008f8a:	bf00      	nop
      }
      break;
 8008f8c:	e004      	b.n	8008f98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fd58 	bl	8009a46 <USBD_CtlError>
      break;
 8008f96:	bf00      	nop
  }

  return ret;
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop

08008fa4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008fba:	2b40      	cmp	r3, #64	; 0x40
 8008fbc:	d005      	beq.n	8008fca <USBD_StdItfReq+0x26>
 8008fbe:	2b40      	cmp	r3, #64	; 0x40
 8008fc0:	d852      	bhi.n	8009068 <USBD_StdItfReq+0xc4>
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d001      	beq.n	8008fca <USBD_StdItfReq+0x26>
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	d14e      	bne.n	8009068 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d840      	bhi.n	800905a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	889b      	ldrh	r3, [r3, #4]
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d836      	bhi.n	8009050 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	889b      	ldrh	r3, [r3, #4]
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff fed9 	bl	8008da2 <USBD_CoreFindIF>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ff4:	7bbb      	ldrb	r3, [r7, #14]
 8008ff6:	2bff      	cmp	r3, #255	; 0xff
 8008ff8:	d01d      	beq.n	8009036 <USBD_StdItfReq+0x92>
 8008ffa:	7bbb      	ldrb	r3, [r7, #14]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d11a      	bne.n	8009036 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009000:	7bba      	ldrb	r2, [r7, #14]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	32ae      	adds	r2, #174	; 0xae
 8009006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00f      	beq.n	8009030 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009010:	7bba      	ldrb	r2, [r7, #14]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009018:	7bba      	ldrb	r2, [r7, #14]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	32ae      	adds	r2, #174	; 0xae
 800901e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	6839      	ldr	r1, [r7, #0]
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	4798      	blx	r3
 800902a:	4603      	mov	r3, r0
 800902c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800902e:	e004      	b.n	800903a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009030:	2303      	movs	r3, #3
 8009032:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009034:	e001      	b.n	800903a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009036:	2303      	movs	r3, #3
 8009038:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	88db      	ldrh	r3, [r3, #6]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d110      	bne.n	8009064 <USBD_StdItfReq+0xc0>
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10d      	bne.n	8009064 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fdc7 	bl	8009bdc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800904e:	e009      	b.n	8009064 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fcf7 	bl	8009a46 <USBD_CtlError>
          break;
 8009058:	e004      	b.n	8009064 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f000 fcf2 	bl	8009a46 <USBD_CtlError>
          break;
 8009062:	e000      	b.n	8009066 <USBD_StdItfReq+0xc2>
          break;
 8009064:	bf00      	nop
      }
      break;
 8009066:	e004      	b.n	8009072 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fceb 	bl	8009a46 <USBD_CtlError>
      break;
 8009070:	bf00      	nop
  }

  return ret;
 8009072:	7bfb      	ldrb	r3, [r7, #15]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	889b      	ldrh	r3, [r3, #4]
 800908e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009098:	2b40      	cmp	r3, #64	; 0x40
 800909a:	d007      	beq.n	80090ac <USBD_StdEPReq+0x30>
 800909c:	2b40      	cmp	r3, #64	; 0x40
 800909e:	f200 817f 	bhi.w	80093a0 <USBD_StdEPReq+0x324>
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d02a      	beq.n	80090fc <USBD_StdEPReq+0x80>
 80090a6:	2b20      	cmp	r3, #32
 80090a8:	f040 817a 	bne.w	80093a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f7ff fe83 	bl	8008dbc <USBD_CoreFindEP>
 80090b6:	4603      	mov	r3, r0
 80090b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80090ba:	7b7b      	ldrb	r3, [r7, #13]
 80090bc:	2bff      	cmp	r3, #255	; 0xff
 80090be:	f000 8174 	beq.w	80093aa <USBD_StdEPReq+0x32e>
 80090c2:	7b7b      	ldrb	r3, [r7, #13]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f040 8170 	bne.w	80093aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80090ca:	7b7a      	ldrb	r2, [r7, #13]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80090d2:	7b7a      	ldrb	r2, [r7, #13]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	32ae      	adds	r2, #174	; 0xae
 80090d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 8163 	beq.w	80093aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80090e4:	7b7a      	ldrb	r2, [r7, #13]
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	32ae      	adds	r2, #174	; 0xae
 80090ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	4798      	blx	r3
 80090f6:	4603      	mov	r3, r0
 80090f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80090fa:	e156      	b.n	80093aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	785b      	ldrb	r3, [r3, #1]
 8009100:	2b03      	cmp	r3, #3
 8009102:	d008      	beq.n	8009116 <USBD_StdEPReq+0x9a>
 8009104:	2b03      	cmp	r3, #3
 8009106:	f300 8145 	bgt.w	8009394 <USBD_StdEPReq+0x318>
 800910a:	2b00      	cmp	r3, #0
 800910c:	f000 809b 	beq.w	8009246 <USBD_StdEPReq+0x1ca>
 8009110:	2b01      	cmp	r3, #1
 8009112:	d03c      	beq.n	800918e <USBD_StdEPReq+0x112>
 8009114:	e13e      	b.n	8009394 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800911c:	b2db      	uxtb	r3, r3
 800911e:	2b02      	cmp	r3, #2
 8009120:	d002      	beq.n	8009128 <USBD_StdEPReq+0xac>
 8009122:	2b03      	cmp	r3, #3
 8009124:	d016      	beq.n	8009154 <USBD_StdEPReq+0xd8>
 8009126:	e02c      	b.n	8009182 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009128:	7bbb      	ldrb	r3, [r7, #14]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00d      	beq.n	800914a <USBD_StdEPReq+0xce>
 800912e:	7bbb      	ldrb	r3, [r7, #14]
 8009130:	2b80      	cmp	r3, #128	; 0x80
 8009132:	d00a      	beq.n	800914a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f005 fc7d 	bl	800ea38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800913e:	2180      	movs	r1, #128	; 0x80
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f005 fc79 	bl	800ea38 <USBD_LL_StallEP>
 8009146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009148:	e020      	b.n	800918c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800914a:	6839      	ldr	r1, [r7, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fc7a 	bl	8009a46 <USBD_CtlError>
              break;
 8009152:	e01b      	b.n	800918c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	885b      	ldrh	r3, [r3, #2]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d10e      	bne.n	800917a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800915c:	7bbb      	ldrb	r3, [r7, #14]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00b      	beq.n	800917a <USBD_StdEPReq+0xfe>
 8009162:	7bbb      	ldrb	r3, [r7, #14]
 8009164:	2b80      	cmp	r3, #128	; 0x80
 8009166:	d008      	beq.n	800917a <USBD_StdEPReq+0xfe>
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	88db      	ldrh	r3, [r3, #6]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d104      	bne.n	800917a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009170:	7bbb      	ldrb	r3, [r7, #14]
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f005 fc5f 	bl	800ea38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fd2e 	bl	8009bdc <USBD_CtlSendStatus>

              break;
 8009180:	e004      	b.n	800918c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009182:	6839      	ldr	r1, [r7, #0]
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fc5e 	bl	8009a46 <USBD_CtlError>
              break;
 800918a:	bf00      	nop
          }
          break;
 800918c:	e107      	b.n	800939e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009194:	b2db      	uxtb	r3, r3
 8009196:	2b02      	cmp	r3, #2
 8009198:	d002      	beq.n	80091a0 <USBD_StdEPReq+0x124>
 800919a:	2b03      	cmp	r3, #3
 800919c:	d016      	beq.n	80091cc <USBD_StdEPReq+0x150>
 800919e:	e04b      	b.n	8009238 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80091a0:	7bbb      	ldrb	r3, [r7, #14]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d00d      	beq.n	80091c2 <USBD_StdEPReq+0x146>
 80091a6:	7bbb      	ldrb	r3, [r7, #14]
 80091a8:	2b80      	cmp	r3, #128	; 0x80
 80091aa:	d00a      	beq.n	80091c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80091ac:	7bbb      	ldrb	r3, [r7, #14]
 80091ae:	4619      	mov	r1, r3
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f005 fc41 	bl	800ea38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80091b6:	2180      	movs	r1, #128	; 0x80
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f005 fc3d 	bl	800ea38 <USBD_LL_StallEP>
 80091be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80091c0:	e040      	b.n	8009244 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fc3e 	bl	8009a46 <USBD_CtlError>
              break;
 80091ca:	e03b      	b.n	8009244 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	885b      	ldrh	r3, [r3, #2]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d136      	bne.n	8009242 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80091d4:	7bbb      	ldrb	r3, [r7, #14]
 80091d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d004      	beq.n	80091e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80091de:	7bbb      	ldrb	r3, [r7, #14]
 80091e0:	4619      	mov	r1, r3
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f005 fc47 	bl	800ea76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fcf7 	bl	8009bdc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80091ee:	7bbb      	ldrb	r3, [r7, #14]
 80091f0:	4619      	mov	r1, r3
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f7ff fde2 	bl	8008dbc <USBD_CoreFindEP>
 80091f8:	4603      	mov	r3, r0
 80091fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091fc:	7b7b      	ldrb	r3, [r7, #13]
 80091fe:	2bff      	cmp	r3, #255	; 0xff
 8009200:	d01f      	beq.n	8009242 <USBD_StdEPReq+0x1c6>
 8009202:	7b7b      	ldrb	r3, [r7, #13]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d11c      	bne.n	8009242 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009208:	7b7a      	ldrb	r2, [r7, #13]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009210:	7b7a      	ldrb	r2, [r7, #13]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	32ae      	adds	r2, #174	; 0xae
 8009216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d010      	beq.n	8009242 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009220:	7b7a      	ldrb	r2, [r7, #13]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	32ae      	adds	r2, #174	; 0xae
 8009226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	6839      	ldr	r1, [r7, #0]
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	4798      	blx	r3
 8009232:	4603      	mov	r3, r0
 8009234:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009236:	e004      	b.n	8009242 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009238:	6839      	ldr	r1, [r7, #0]
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fc03 	bl	8009a46 <USBD_CtlError>
              break;
 8009240:	e000      	b.n	8009244 <USBD_StdEPReq+0x1c8>
              break;
 8009242:	bf00      	nop
          }
          break;
 8009244:	e0ab      	b.n	800939e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800924c:	b2db      	uxtb	r3, r3
 800924e:	2b02      	cmp	r3, #2
 8009250:	d002      	beq.n	8009258 <USBD_StdEPReq+0x1dc>
 8009252:	2b03      	cmp	r3, #3
 8009254:	d032      	beq.n	80092bc <USBD_StdEPReq+0x240>
 8009256:	e097      	b.n	8009388 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009258:	7bbb      	ldrb	r3, [r7, #14]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d007      	beq.n	800926e <USBD_StdEPReq+0x1f2>
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	2b80      	cmp	r3, #128	; 0x80
 8009262:	d004      	beq.n	800926e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fbed 	bl	8009a46 <USBD_CtlError>
                break;
 800926c:	e091      	b.n	8009392 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800926e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009272:	2b00      	cmp	r3, #0
 8009274:	da0b      	bge.n	800928e <USBD_StdEPReq+0x212>
 8009276:	7bbb      	ldrb	r3, [r7, #14]
 8009278:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	3310      	adds	r3, #16
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	4413      	add	r3, r2
 800928a:	3304      	adds	r3, #4
 800928c:	e00b      	b.n	80092a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800928e:	7bbb      	ldrb	r3, [r7, #14]
 8009290:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009294:	4613      	mov	r3, r2
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	4413      	add	r3, r2
 80092a4:	3304      	adds	r3, #4
 80092a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2200      	movs	r2, #0
 80092ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	2202      	movs	r2, #2
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 fc37 	bl	8009b28 <USBD_CtlSendData>
              break;
 80092ba:	e06a      	b.n	8009392 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80092bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	da11      	bge.n	80092e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80092c4:	7bbb      	ldrb	r3, [r7, #14]
 80092c6:	f003 020f 	and.w	r2, r3, #15
 80092ca:	6879      	ldr	r1, [r7, #4]
 80092cc:	4613      	mov	r3, r2
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	440b      	add	r3, r1
 80092d6:	3324      	adds	r3, #36	; 0x24
 80092d8:	881b      	ldrh	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d117      	bne.n	800930e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fbb0 	bl	8009a46 <USBD_CtlError>
                  break;
 80092e6:	e054      	b.n	8009392 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80092e8:	7bbb      	ldrb	r3, [r7, #14]
 80092ea:	f003 020f 	and.w	r2, r3, #15
 80092ee:	6879      	ldr	r1, [r7, #4]
 80092f0:	4613      	mov	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	440b      	add	r3, r1
 80092fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80092fe:	881b      	ldrh	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d104      	bne.n	800930e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009304:	6839      	ldr	r1, [r7, #0]
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fb9d 	bl	8009a46 <USBD_CtlError>
                  break;
 800930c:	e041      	b.n	8009392 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800930e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009312:	2b00      	cmp	r3, #0
 8009314:	da0b      	bge.n	800932e <USBD_StdEPReq+0x2b2>
 8009316:	7bbb      	ldrb	r3, [r7, #14]
 8009318:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800931c:	4613      	mov	r3, r2
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	4413      	add	r3, r2
 8009322:	009b      	lsls	r3, r3, #2
 8009324:	3310      	adds	r3, #16
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	4413      	add	r3, r2
 800932a:	3304      	adds	r3, #4
 800932c:	e00b      	b.n	8009346 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800932e:	7bbb      	ldrb	r3, [r7, #14]
 8009330:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009334:	4613      	mov	r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	4413      	add	r3, r2
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	4413      	add	r3, r2
 8009344:	3304      	adds	r3, #4
 8009346:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009348:	7bbb      	ldrb	r3, [r7, #14]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d002      	beq.n	8009354 <USBD_StdEPReq+0x2d8>
 800934e:	7bbb      	ldrb	r3, [r7, #14]
 8009350:	2b80      	cmp	r3, #128	; 0x80
 8009352:	d103      	bne.n	800935c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	2200      	movs	r2, #0
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	e00e      	b.n	800937a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800935c:	7bbb      	ldrb	r3, [r7, #14]
 800935e:	4619      	mov	r1, r3
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f005 fba7 	bl	800eab4 <USBD_LL_IsStallEP>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d003      	beq.n	8009374 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2201      	movs	r2, #1
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	e002      	b.n	800937a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2200      	movs	r2, #0
 8009378:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	2202      	movs	r2, #2
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f000 fbd1 	bl	8009b28 <USBD_CtlSendData>
              break;
 8009386:	e004      	b.n	8009392 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009388:	6839      	ldr	r1, [r7, #0]
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fb5b 	bl	8009a46 <USBD_CtlError>
              break;
 8009390:	bf00      	nop
          }
          break;
 8009392:	e004      	b.n	800939e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fb55 	bl	8009a46 <USBD_CtlError>
          break;
 800939c:	bf00      	nop
      }
      break;
 800939e:	e005      	b.n	80093ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fb4f 	bl	8009a46 <USBD_CtlError>
      break;
 80093a8:	e000      	b.n	80093ac <USBD_StdEPReq+0x330>
      break;
 80093aa:	bf00      	nop
  }

  return ret;
 80093ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3710      	adds	r7, #16
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80093c2:	2300      	movs	r3, #0
 80093c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80093c6:	2300      	movs	r3, #0
 80093c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	885b      	ldrh	r3, [r3, #2]
 80093d2:	0a1b      	lsrs	r3, r3, #8
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	3b01      	subs	r3, #1
 80093d8:	2b06      	cmp	r3, #6
 80093da:	f200 8128 	bhi.w	800962e <USBD_GetDescriptor+0x276>
 80093de:	a201      	add	r2, pc, #4	; (adr r2, 80093e4 <USBD_GetDescriptor+0x2c>)
 80093e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e4:	08009401 	.word	0x08009401
 80093e8:	08009419 	.word	0x08009419
 80093ec:	08009459 	.word	0x08009459
 80093f0:	0800962f 	.word	0x0800962f
 80093f4:	0800962f 	.word	0x0800962f
 80093f8:	080095cf 	.word	0x080095cf
 80093fc:	080095fb 	.word	0x080095fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	687a      	ldr	r2, [r7, #4]
 800940a:	7c12      	ldrb	r2, [r2, #16]
 800940c:	f107 0108 	add.w	r1, r7, #8
 8009410:	4610      	mov	r0, r2
 8009412:	4798      	blx	r3
 8009414:	60f8      	str	r0, [r7, #12]
      break;
 8009416:	e112      	b.n	800963e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	7c1b      	ldrb	r3, [r3, #16]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10d      	bne.n	800943c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009428:	f107 0208 	add.w	r2, r7, #8
 800942c:	4610      	mov	r0, r2
 800942e:	4798      	blx	r3
 8009430:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	3301      	adds	r3, #1
 8009436:	2202      	movs	r2, #2
 8009438:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800943a:	e100      	b.n	800963e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009444:	f107 0208 	add.w	r2, r7, #8
 8009448:	4610      	mov	r0, r2
 800944a:	4798      	blx	r3
 800944c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3301      	adds	r3, #1
 8009452:	2202      	movs	r2, #2
 8009454:	701a      	strb	r2, [r3, #0]
      break;
 8009456:	e0f2      	b.n	800963e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	885b      	ldrh	r3, [r3, #2]
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b05      	cmp	r3, #5
 8009460:	f200 80ac 	bhi.w	80095bc <USBD_GetDescriptor+0x204>
 8009464:	a201      	add	r2, pc, #4	; (adr r2, 800946c <USBD_GetDescriptor+0xb4>)
 8009466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946a:	bf00      	nop
 800946c:	08009485 	.word	0x08009485
 8009470:	080094b9 	.word	0x080094b9
 8009474:	080094ed 	.word	0x080094ed
 8009478:	08009521 	.word	0x08009521
 800947c:	08009555 	.word	0x08009555
 8009480:	08009589 	.word	0x08009589
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00b      	beq.n	80094a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	7c12      	ldrb	r2, [r2, #16]
 800949c:	f107 0108 	add.w	r1, r7, #8
 80094a0:	4610      	mov	r0, r2
 80094a2:	4798      	blx	r3
 80094a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094a6:	e091      	b.n	80095cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 facb 	bl	8009a46 <USBD_CtlError>
            err++;
 80094b0:	7afb      	ldrb	r3, [r7, #11]
 80094b2:	3301      	adds	r3, #1
 80094b4:	72fb      	strb	r3, [r7, #11]
          break;
 80094b6:	e089      	b.n	80095cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00b      	beq.n	80094dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	7c12      	ldrb	r2, [r2, #16]
 80094d0:	f107 0108 	add.w	r1, r7, #8
 80094d4:	4610      	mov	r0, r2
 80094d6:	4798      	blx	r3
 80094d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80094da:	e077      	b.n	80095cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fab1 	bl	8009a46 <USBD_CtlError>
            err++;
 80094e4:	7afb      	ldrb	r3, [r7, #11]
 80094e6:	3301      	adds	r3, #1
 80094e8:	72fb      	strb	r3, [r7, #11]
          break;
 80094ea:	e06f      	b.n	80095cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00b      	beq.n	8009510 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	7c12      	ldrb	r2, [r2, #16]
 8009504:	f107 0108 	add.w	r1, r7, #8
 8009508:	4610      	mov	r0, r2
 800950a:	4798      	blx	r3
 800950c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800950e:	e05d      	b.n	80095cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fa97 	bl	8009a46 <USBD_CtlError>
            err++;
 8009518:	7afb      	ldrb	r3, [r7, #11]
 800951a:	3301      	adds	r3, #1
 800951c:	72fb      	strb	r3, [r7, #11]
          break;
 800951e:	e055      	b.n	80095cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009526:	691b      	ldr	r3, [r3, #16]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00b      	beq.n	8009544 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009532:	691b      	ldr	r3, [r3, #16]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	7c12      	ldrb	r2, [r2, #16]
 8009538:	f107 0108 	add.w	r1, r7, #8
 800953c:	4610      	mov	r0, r2
 800953e:	4798      	blx	r3
 8009540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009542:	e043      	b.n	80095cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fa7d 	bl	8009a46 <USBD_CtlError>
            err++;
 800954c:	7afb      	ldrb	r3, [r7, #11]
 800954e:	3301      	adds	r3, #1
 8009550:	72fb      	strb	r3, [r7, #11]
          break;
 8009552:	e03b      	b.n	80095cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800955a:	695b      	ldr	r3, [r3, #20]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00b      	beq.n	8009578 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	687a      	ldr	r2, [r7, #4]
 800956a:	7c12      	ldrb	r2, [r2, #16]
 800956c:	f107 0108 	add.w	r1, r7, #8
 8009570:	4610      	mov	r0, r2
 8009572:	4798      	blx	r3
 8009574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009576:	e029      	b.n	80095cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fa63 	bl	8009a46 <USBD_CtlError>
            err++;
 8009580:	7afb      	ldrb	r3, [r7, #11]
 8009582:	3301      	adds	r3, #1
 8009584:	72fb      	strb	r3, [r7, #11]
          break;
 8009586:	e021      	b.n	80095cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00b      	beq.n	80095ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	7c12      	ldrb	r2, [r2, #16]
 80095a0:	f107 0108 	add.w	r1, r7, #8
 80095a4:	4610      	mov	r0, r2
 80095a6:	4798      	blx	r3
 80095a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80095aa:	e00f      	b.n	80095cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fa49 	bl	8009a46 <USBD_CtlError>
            err++;
 80095b4:	7afb      	ldrb	r3, [r7, #11]
 80095b6:	3301      	adds	r3, #1
 80095b8:	72fb      	strb	r3, [r7, #11]
          break;
 80095ba:	e007      	b.n	80095cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80095bc:	6839      	ldr	r1, [r7, #0]
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 fa41 	bl	8009a46 <USBD_CtlError>
          err++;
 80095c4:	7afb      	ldrb	r3, [r7, #11]
 80095c6:	3301      	adds	r3, #1
 80095c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80095ca:	bf00      	nop
      }
      break;
 80095cc:	e037      	b.n	800963e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	7c1b      	ldrb	r3, [r3, #16]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d109      	bne.n	80095ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095de:	f107 0208 	add.w	r2, r7, #8
 80095e2:	4610      	mov	r0, r2
 80095e4:	4798      	blx	r3
 80095e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80095e8:	e029      	b.n	800963e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80095ea:	6839      	ldr	r1, [r7, #0]
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f000 fa2a 	bl	8009a46 <USBD_CtlError>
        err++;
 80095f2:	7afb      	ldrb	r3, [r7, #11]
 80095f4:	3301      	adds	r3, #1
 80095f6:	72fb      	strb	r3, [r7, #11]
      break;
 80095f8:	e021      	b.n	800963e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	7c1b      	ldrb	r3, [r3, #16]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d10d      	bne.n	800961e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800960a:	f107 0208 	add.w	r2, r7, #8
 800960e:	4610      	mov	r0, r2
 8009610:	4798      	blx	r3
 8009612:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	3301      	adds	r3, #1
 8009618:	2207      	movs	r2, #7
 800961a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800961c:	e00f      	b.n	800963e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fa10 	bl	8009a46 <USBD_CtlError>
        err++;
 8009626:	7afb      	ldrb	r3, [r7, #11]
 8009628:	3301      	adds	r3, #1
 800962a:	72fb      	strb	r3, [r7, #11]
      break;
 800962c:	e007      	b.n	800963e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800962e:	6839      	ldr	r1, [r7, #0]
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 fa08 	bl	8009a46 <USBD_CtlError>
      err++;
 8009636:	7afb      	ldrb	r3, [r7, #11]
 8009638:	3301      	adds	r3, #1
 800963a:	72fb      	strb	r3, [r7, #11]
      break;
 800963c:	bf00      	nop
  }

  if (err != 0U)
 800963e:	7afb      	ldrb	r3, [r7, #11]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d11e      	bne.n	8009682 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	88db      	ldrh	r3, [r3, #6]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d016      	beq.n	800967a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800964c:	893b      	ldrh	r3, [r7, #8]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00e      	beq.n	8009670 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	88da      	ldrh	r2, [r3, #6]
 8009656:	893b      	ldrh	r3, [r7, #8]
 8009658:	4293      	cmp	r3, r2
 800965a:	bf28      	it	cs
 800965c:	4613      	movcs	r3, r2
 800965e:	b29b      	uxth	r3, r3
 8009660:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009662:	893b      	ldrh	r3, [r7, #8]
 8009664:	461a      	mov	r2, r3
 8009666:	68f9      	ldr	r1, [r7, #12]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fa5d 	bl	8009b28 <USBD_CtlSendData>
 800966e:	e009      	b.n	8009684 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009670:	6839      	ldr	r1, [r7, #0]
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 f9e7 	bl	8009a46 <USBD_CtlError>
 8009678:	e004      	b.n	8009684 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 faae 	bl	8009bdc <USBD_CtlSendStatus>
 8009680:	e000      	b.n	8009684 <USBD_GetDescriptor+0x2cc>
    return;
 8009682:	bf00      	nop
  }
}
 8009684:	3710      	adds	r7, #16
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop

0800968c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	889b      	ldrh	r3, [r3, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d131      	bne.n	8009702 <USBD_SetAddress+0x76>
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	88db      	ldrh	r3, [r3, #6]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d12d      	bne.n	8009702 <USBD_SetAddress+0x76>
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	885b      	ldrh	r3, [r3, #2]
 80096aa:	2b7f      	cmp	r3, #127	; 0x7f
 80096ac:	d829      	bhi.n	8009702 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	885b      	ldrh	r3, [r3, #2]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	2b03      	cmp	r3, #3
 80096c4:	d104      	bne.n	80096d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f9bc 	bl	8009a46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ce:	e01d      	b.n	800970c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	7bfa      	ldrb	r2, [r7, #15]
 80096d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f005 fa15 	bl	800eb0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fa7a 	bl	8009bdc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d004      	beq.n	80096f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2202      	movs	r2, #2
 80096f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096f6:	e009      	b.n	800970c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009700:	e004      	b.n	800970c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f99e 	bl	8009a46 <USBD_CtlError>
  }
}
 800970a:	bf00      	nop
 800970c:	bf00      	nop
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	885b      	ldrh	r3, [r3, #2]
 8009726:	b2da      	uxtb	r2, r3
 8009728:	4b4e      	ldr	r3, [pc, #312]	; (8009864 <USBD_SetConfig+0x150>)
 800972a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800972c:	4b4d      	ldr	r3, [pc, #308]	; (8009864 <USBD_SetConfig+0x150>)
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	2b01      	cmp	r3, #1
 8009732:	d905      	bls.n	8009740 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 f985 	bl	8009a46 <USBD_CtlError>
    return USBD_FAIL;
 800973c:	2303      	movs	r3, #3
 800973e:	e08c      	b.n	800985a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009746:	b2db      	uxtb	r3, r3
 8009748:	2b02      	cmp	r3, #2
 800974a:	d002      	beq.n	8009752 <USBD_SetConfig+0x3e>
 800974c:	2b03      	cmp	r3, #3
 800974e:	d029      	beq.n	80097a4 <USBD_SetConfig+0x90>
 8009750:	e075      	b.n	800983e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009752:	4b44      	ldr	r3, [pc, #272]	; (8009864 <USBD_SetConfig+0x150>)
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d020      	beq.n	800979c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800975a:	4b42      	ldr	r3, [pc, #264]	; (8009864 <USBD_SetConfig+0x150>)
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	461a      	mov	r2, r3
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009764:	4b3f      	ldr	r3, [pc, #252]	; (8009864 <USBD_SetConfig+0x150>)
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7fe ffe7 	bl	800873e <USBD_SetClassConfig>
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d008      	beq.n	800978c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800977a:	6839      	ldr	r1, [r7, #0]
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f962 	bl	8009a46 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2202      	movs	r2, #2
 8009786:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800978a:	e065      	b.n	8009858 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f000 fa25 	bl	8009bdc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2203      	movs	r2, #3
 8009796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800979a:	e05d      	b.n	8009858 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 fa1d 	bl	8009bdc <USBD_CtlSendStatus>
      break;
 80097a2:	e059      	b.n	8009858 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80097a4:	4b2f      	ldr	r3, [pc, #188]	; (8009864 <USBD_SetConfig+0x150>)
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d112      	bne.n	80097d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2202      	movs	r2, #2
 80097b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80097b4:	4b2b      	ldr	r3, [pc, #172]	; (8009864 <USBD_SetConfig+0x150>)
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	461a      	mov	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80097be:	4b29      	ldr	r3, [pc, #164]	; (8009864 <USBD_SetConfig+0x150>)
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	4619      	mov	r1, r3
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7fe ffd6 	bl	8008776 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fa06 	bl	8009bdc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80097d0:	e042      	b.n	8009858 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80097d2:	4b24      	ldr	r3, [pc, #144]	; (8009864 <USBD_SetConfig+0x150>)
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	461a      	mov	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	429a      	cmp	r2, r3
 80097de:	d02a      	beq.n	8009836 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f7fe ffc4 	bl	8008776 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80097ee:	4b1d      	ldr	r3, [pc, #116]	; (8009864 <USBD_SetConfig+0x150>)
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80097f8:	4b1a      	ldr	r3, [pc, #104]	; (8009864 <USBD_SetConfig+0x150>)
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	4619      	mov	r1, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7fe ff9d 	bl	800873e <USBD_SetClassConfig>
 8009804:	4603      	mov	r3, r0
 8009806:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009808:	7bfb      	ldrb	r3, [r7, #15]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00f      	beq.n	800982e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800980e:	6839      	ldr	r1, [r7, #0]
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f918 	bl	8009a46 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	b2db      	uxtb	r3, r3
 800981c:	4619      	mov	r1, r3
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7fe ffa9 	bl	8008776 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2202      	movs	r2, #2
 8009828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800982c:	e014      	b.n	8009858 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f000 f9d4 	bl	8009bdc <USBD_CtlSendStatus>
      break;
 8009834:	e010      	b.n	8009858 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f000 f9d0 	bl	8009bdc <USBD_CtlSendStatus>
      break;
 800983c:	e00c      	b.n	8009858 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800983e:	6839      	ldr	r1, [r7, #0]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 f900 	bl	8009a46 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009846:	4b07      	ldr	r3, [pc, #28]	; (8009864 <USBD_SetConfig+0x150>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f7fe ff92 	bl	8008776 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009852:	2303      	movs	r3, #3
 8009854:	73fb      	strb	r3, [r7, #15]
      break;
 8009856:	bf00      	nop
  }

  return ret;
 8009858:	7bfb      	ldrb	r3, [r7, #15]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	200010f0 	.word	0x200010f0

08009868 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	88db      	ldrh	r3, [r3, #6]
 8009876:	2b01      	cmp	r3, #1
 8009878:	d004      	beq.n	8009884 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800987a:	6839      	ldr	r1, [r7, #0]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f8e2 	bl	8009a46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009882:	e023      	b.n	80098cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b02      	cmp	r3, #2
 800988e:	dc02      	bgt.n	8009896 <USBD_GetConfig+0x2e>
 8009890:	2b00      	cmp	r3, #0
 8009892:	dc03      	bgt.n	800989c <USBD_GetConfig+0x34>
 8009894:	e015      	b.n	80098c2 <USBD_GetConfig+0x5a>
 8009896:	2b03      	cmp	r3, #3
 8009898:	d00b      	beq.n	80098b2 <USBD_GetConfig+0x4a>
 800989a:	e012      	b.n	80098c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	3308      	adds	r3, #8
 80098a6:	2201      	movs	r2, #1
 80098a8:	4619      	mov	r1, r3
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f93c 	bl	8009b28 <USBD_CtlSendData>
        break;
 80098b0:	e00c      	b.n	80098cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	3304      	adds	r3, #4
 80098b6:	2201      	movs	r2, #1
 80098b8:	4619      	mov	r1, r3
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 f934 	bl	8009b28 <USBD_CtlSendData>
        break;
 80098c0:	e004      	b.n	80098cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80098c2:	6839      	ldr	r1, [r7, #0]
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f8be 	bl	8009a46 <USBD_CtlError>
        break;
 80098ca:	bf00      	nop
}
 80098cc:	bf00      	nop
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098e4:	b2db      	uxtb	r3, r3
 80098e6:	3b01      	subs	r3, #1
 80098e8:	2b02      	cmp	r3, #2
 80098ea:	d81e      	bhi.n	800992a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	88db      	ldrh	r3, [r3, #6]
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	d004      	beq.n	80098fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80098f4:	6839      	ldr	r1, [r7, #0]
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f8a5 	bl	8009a46 <USBD_CtlError>
        break;
 80098fc:	e01a      	b.n	8009934 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2201      	movs	r2, #1
 8009902:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800990a:	2b00      	cmp	r3, #0
 800990c:	d005      	beq.n	800991a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	f043 0202 	orr.w	r2, r3, #2
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	330c      	adds	r3, #12
 800991e:	2202      	movs	r2, #2
 8009920:	4619      	mov	r1, r3
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 f900 	bl	8009b28 <USBD_CtlSendData>
      break;
 8009928:	e004      	b.n	8009934 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 f88a 	bl	8009a46 <USBD_CtlError>
      break;
 8009932:	bf00      	nop
  }
}
 8009934:	bf00      	nop
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	885b      	ldrh	r3, [r3, #2]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d107      	bne.n	800995e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f940 	bl	8009bdc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800995c:	e013      	b.n	8009986 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	885b      	ldrh	r3, [r3, #2]
 8009962:	2b02      	cmp	r3, #2
 8009964:	d10b      	bne.n	800997e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	889b      	ldrh	r3, [r3, #4]
 800996a:	0a1b      	lsrs	r3, r3, #8
 800996c:	b29b      	uxth	r3, r3
 800996e:	b2da      	uxtb	r2, r3
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 f930 	bl	8009bdc <USBD_CtlSendStatus>
}
 800997c:	e003      	b.n	8009986 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f860 	bl	8009a46 <USBD_CtlError>
}
 8009986:	bf00      	nop
 8009988:	3708      	adds	r7, #8
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800998e:	b580      	push	{r7, lr}
 8009990:	b082      	sub	sp, #8
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	3b01      	subs	r3, #1
 80099a2:	2b02      	cmp	r3, #2
 80099a4:	d80b      	bhi.n	80099be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	885b      	ldrh	r3, [r3, #2]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d10c      	bne.n	80099c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 f910 	bl	8009bdc <USBD_CtlSendStatus>
      }
      break;
 80099bc:	e004      	b.n	80099c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f840 	bl	8009a46 <USBD_CtlError>
      break;
 80099c6:	e000      	b.n	80099ca <USBD_ClrFeature+0x3c>
      break;
 80099c8:	bf00      	nop
  }
}
 80099ca:	bf00      	nop
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	781a      	ldrb	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	3301      	adds	r3, #1
 80099ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	781a      	ldrb	r2, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	3301      	adds	r3, #1
 80099fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f7ff fa41 	bl	8008e84 <SWAPBYTE>
 8009a02:	4603      	mov	r3, r0
 8009a04:	461a      	mov	r2, r3
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	3301      	adds	r3, #1
 8009a14:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f7ff fa34 	bl	8008e84 <SWAPBYTE>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	461a      	mov	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	3301      	adds	r3, #1
 8009a28:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009a30:	68f8      	ldr	r0, [r7, #12]
 8009a32:	f7ff fa27 	bl	8008e84 <SWAPBYTE>
 8009a36:	4603      	mov	r3, r0
 8009a38:	461a      	mov	r2, r3
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	80da      	strh	r2, [r3, #6]
}
 8009a3e:	bf00      	nop
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b082      	sub	sp, #8
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009a50:	2180      	movs	r1, #128	; 0x80
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f004 fff0 	bl	800ea38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009a58:	2100      	movs	r1, #0
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f004 ffec 	bl	800ea38 <USBD_LL_StallEP>
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009a74:	2300      	movs	r3, #0
 8009a76:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d036      	beq.n	8009aec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009a82:	6938      	ldr	r0, [r7, #16]
 8009a84:	f000 f836 	bl	8009af4 <USBD_GetLen>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	005b      	lsls	r3, r3, #1
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009a96:	7dfb      	ldrb	r3, [r7, #23]
 8009a98:	68ba      	ldr	r2, [r7, #8]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	7812      	ldrb	r2, [r2, #0]
 8009aa0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009aa2:	7dfb      	ldrb	r3, [r7, #23]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009aa8:	7dfb      	ldrb	r3, [r7, #23]
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	4413      	add	r3, r2
 8009aae:	2203      	movs	r2, #3
 8009ab0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ab2:	7dfb      	ldrb	r3, [r7, #23]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009ab8:	e013      	b.n	8009ae2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009aba:	7dfb      	ldrb	r3, [r7, #23]
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	4413      	add	r3, r2
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	7812      	ldrb	r2, [r2, #0]
 8009ac4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	613b      	str	r3, [r7, #16]
    idx++;
 8009acc:	7dfb      	ldrb	r3, [r7, #23]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009ad2:	7dfb      	ldrb	r3, [r7, #23]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	2200      	movs	r2, #0
 8009ada:	701a      	strb	r2, [r3, #0]
    idx++;
 8009adc:	7dfb      	ldrb	r3, [r7, #23]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1e7      	bne.n	8009aba <USBD_GetString+0x52>
 8009aea:	e000      	b.n	8009aee <USBD_GetString+0x86>
    return;
 8009aec:	bf00      	nop
  }
}
 8009aee:	3718      	adds	r7, #24
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009afc:	2300      	movs	r3, #0
 8009afe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009b04:	e005      	b.n	8009b12 <USBD_GetLen+0x1e>
  {
    len++;
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	3301      	adds	r3, #1
 8009b0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	3301      	adds	r3, #1
 8009b10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	781b      	ldrb	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d1f5      	bne.n	8009b06 <USBD_GetLen+0x12>
  }

  return len;
 8009b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2202      	movs	r2, #2
 8009b38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f004 fffb 	bl	800eb4a <USBD_LL_Transmit>

  return USBD_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}

08009b5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b084      	sub	sp, #16
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	60f8      	str	r0, [r7, #12]
 8009b66:	60b9      	str	r1, [r7, #8]
 8009b68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	2100      	movs	r1, #0
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f004 ffea 	bl	800eb4a <USBD_LL_Transmit>

  return USBD_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2203      	movs	r2, #3
 8009b90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	2100      	movs	r1, #0
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f004 ffee 	bl	800eb8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bb0:	2300      	movs	r3, #0
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}

08009bba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009bba:	b580      	push	{r7, lr}
 8009bbc:	b084      	sub	sp, #16
 8009bbe:	af00      	add	r7, sp, #0
 8009bc0:	60f8      	str	r0, [r7, #12]
 8009bc2:	60b9      	str	r1, [r7, #8]
 8009bc4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	2100      	movs	r1, #0
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f004 ffdd 	bl	800eb8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3710      	adds	r7, #16
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2204      	movs	r2, #4
 8009be8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009bec:	2300      	movs	r3, #0
 8009bee:	2200      	movs	r2, #0
 8009bf0:	2100      	movs	r1, #0
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f004 ffa9 	bl	800eb4a <USBD_LL_Transmit>

  return USBD_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b082      	sub	sp, #8
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2205      	movs	r2, #5
 8009c0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c12:	2300      	movs	r3, #0
 8009c14:	2200      	movs	r2, #0
 8009c16:	2100      	movs	r1, #0
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f004 ffb7 	bl	800eb8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3708      	adds	r7, #8
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <__NVIC_SetPriority>:
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b083      	sub	sp, #12
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	6039      	str	r1, [r7, #0]
 8009c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	db0a      	blt.n	8009c52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	490c      	ldr	r1, [pc, #48]	; (8009c74 <__NVIC_SetPriority+0x4c>)
 8009c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c46:	0112      	lsls	r2, r2, #4
 8009c48:	b2d2      	uxtb	r2, r2
 8009c4a:	440b      	add	r3, r1
 8009c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009c50:	e00a      	b.n	8009c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	b2da      	uxtb	r2, r3
 8009c56:	4908      	ldr	r1, [pc, #32]	; (8009c78 <__NVIC_SetPriority+0x50>)
 8009c58:	79fb      	ldrb	r3, [r7, #7]
 8009c5a:	f003 030f 	and.w	r3, r3, #15
 8009c5e:	3b04      	subs	r3, #4
 8009c60:	0112      	lsls	r2, r2, #4
 8009c62:	b2d2      	uxtb	r2, r2
 8009c64:	440b      	add	r3, r1
 8009c66:	761a      	strb	r2, [r3, #24]
}
 8009c68:	bf00      	nop
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	e000e100 	.word	0xe000e100
 8009c78:	e000ed00 	.word	0xe000ed00

08009c7c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009c80:	2100      	movs	r1, #0
 8009c82:	f06f 0004 	mvn.w	r0, #4
 8009c86:	f7ff ffcf 	bl	8009c28 <__NVIC_SetPriority>
#endif
}
 8009c8a:	bf00      	nop
 8009c8c:	bd80      	pop	{r7, pc}
	...

08009c90 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c96:	f3ef 8305 	mrs	r3, IPSR
 8009c9a:	603b      	str	r3, [r7, #0]
  return(result);
 8009c9c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d003      	beq.n	8009caa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009ca2:	f06f 0305 	mvn.w	r3, #5
 8009ca6:	607b      	str	r3, [r7, #4]
 8009ca8:	e00c      	b.n	8009cc4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009caa:	4b0a      	ldr	r3, [pc, #40]	; (8009cd4 <osKernelInitialize+0x44>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d105      	bne.n	8009cbe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009cb2:	4b08      	ldr	r3, [pc, #32]	; (8009cd4 <osKernelInitialize+0x44>)
 8009cb4:	2201      	movs	r2, #1
 8009cb6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	607b      	str	r3, [r7, #4]
 8009cbc:	e002      	b.n	8009cc4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009cc2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009cc4:	687b      	ldr	r3, [r7, #4]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	370c      	adds	r7, #12
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd0:	4770      	bx	lr
 8009cd2:	bf00      	nop
 8009cd4:	200010f4 	.word	0x200010f4

08009cd8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cde:	f3ef 8305 	mrs	r3, IPSR
 8009ce2:	603b      	str	r3, [r7, #0]
  return(result);
 8009ce4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009cea:	f06f 0305 	mvn.w	r3, #5
 8009cee:	607b      	str	r3, [r7, #4]
 8009cf0:	e010      	b.n	8009d14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009cf2:	4b0b      	ldr	r3, [pc, #44]	; (8009d20 <osKernelStart+0x48>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d109      	bne.n	8009d0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009cfa:	f7ff ffbf 	bl	8009c7c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009cfe:	4b08      	ldr	r3, [pc, #32]	; (8009d20 <osKernelStart+0x48>)
 8009d00:	2202      	movs	r2, #2
 8009d02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009d04:	f001 fef8 	bl	800baf8 <vTaskStartScheduler>
      stat = osOK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	607b      	str	r3, [r7, #4]
 8009d0c:	e002      	b.n	8009d14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009d14:	687b      	ldr	r3, [r7, #4]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	200010f4 	.word	0x200010f4

08009d24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b08e      	sub	sp, #56	; 0x38
 8009d28:	af04      	add	r7, sp, #16
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009d30:	2300      	movs	r3, #0
 8009d32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d34:	f3ef 8305 	mrs	r3, IPSR
 8009d38:	617b      	str	r3, [r7, #20]
  return(result);
 8009d3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d17e      	bne.n	8009e3e <osThreadNew+0x11a>
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d07b      	beq.n	8009e3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009d46:	2380      	movs	r3, #128	; 0x80
 8009d48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009d4a:	2318      	movs	r3, #24
 8009d4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009d4e:	2300      	movs	r3, #0
 8009d50:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d045      	beq.n	8009dea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d002      	beq.n	8009d6c <osThreadNew+0x48>
        name = attr->name;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d002      	beq.n	8009d7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	699b      	ldr	r3, [r3, #24]
 8009d78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d008      	beq.n	8009d92 <osThreadNew+0x6e>
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	2b38      	cmp	r3, #56	; 0x38
 8009d84:	d805      	bhi.n	8009d92 <osThreadNew+0x6e>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d001      	beq.n	8009d96 <osThreadNew+0x72>
        return (NULL);
 8009d92:	2300      	movs	r3, #0
 8009d94:	e054      	b.n	8009e40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	089b      	lsrs	r3, r3, #2
 8009da4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	689b      	ldr	r3, [r3, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00e      	beq.n	8009dcc <osThreadNew+0xa8>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	2bcb      	cmp	r3, #203	; 0xcb
 8009db4:	d90a      	bls.n	8009dcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d006      	beq.n	8009dcc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	695b      	ldr	r3, [r3, #20]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d002      	beq.n	8009dcc <osThreadNew+0xa8>
        mem = 1;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	61bb      	str	r3, [r7, #24]
 8009dca:	e010      	b.n	8009dee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10c      	bne.n	8009dee <osThreadNew+0xca>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d108      	bne.n	8009dee <osThreadNew+0xca>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	691b      	ldr	r3, [r3, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d104      	bne.n	8009dee <osThreadNew+0xca>
          mem = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	61bb      	str	r3, [r7, #24]
 8009de8:	e001      	b.n	8009dee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009dea:	2300      	movs	r3, #0
 8009dec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d110      	bne.n	8009e16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009dfc:	9202      	str	r2, [sp, #8]
 8009dfe:	9301      	str	r3, [sp, #4]
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	6a3a      	ldr	r2, [r7, #32]
 8009e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	f001 fb1c 	bl	800b448 <xTaskCreateStatic>
 8009e10:	4603      	mov	r3, r0
 8009e12:	613b      	str	r3, [r7, #16]
 8009e14:	e013      	b.n	8009e3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d110      	bne.n	8009e3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	f107 0310 	add.w	r3, r7, #16
 8009e24:	9301      	str	r3, [sp, #4]
 8009e26:	69fb      	ldr	r3, [r7, #28]
 8009e28:	9300      	str	r3, [sp, #0]
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e2e:	68f8      	ldr	r0, [r7, #12]
 8009e30:	f001 fb67 	bl	800b502 <xTaskCreate>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d001      	beq.n	8009e3e <osThreadNew+0x11a>
            hTask = NULL;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009e3e:	693b      	ldr	r3, [r7, #16]
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3728      	adds	r7, #40	; 0x28
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	4a07      	ldr	r2, [pc, #28]	; (8009e74 <vApplicationGetIdleTaskMemory+0x2c>)
 8009e58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	4a06      	ldr	r2, [pc, #24]	; (8009e78 <vApplicationGetIdleTaskMemory+0x30>)
 8009e5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2280      	movs	r2, #128	; 0x80
 8009e64:	601a      	str	r2, [r3, #0]
}
 8009e66:	bf00      	nop
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	200010f8 	.word	0x200010f8
 8009e78:	200011c4 	.word	0x200011c4

08009e7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	60b9      	str	r1, [r7, #8]
 8009e86:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	4a07      	ldr	r2, [pc, #28]	; (8009ea8 <vApplicationGetTimerTaskMemory+0x2c>)
 8009e8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	4a06      	ldr	r2, [pc, #24]	; (8009eac <vApplicationGetTimerTaskMemory+0x30>)
 8009e92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e9a:	601a      	str	r2, [r3, #0]
}
 8009e9c:	bf00      	nop
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	200013c4 	.word	0x200013c4
 8009eac:	20001490 	.word	0x20001490

08009eb0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f103 0208 	add.w	r2, r3, #8
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ec8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f103 0208 	add.w	r2, r3, #8
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f103 0208 	add.w	r2, r3, #8
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b083      	sub	sp, #12
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009efe:	bf00      	nop
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f0a:	b480      	push	{r7}
 8009f0c:	b085      	sub	sp, #20
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
 8009f12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	689a      	ldr	r2, [r3, #8]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	1c5a      	adds	r2, r3, #1
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	601a      	str	r2, [r3, #0]
}
 8009f46:	bf00      	nop
 8009f48:	3714      	adds	r7, #20
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr

08009f52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f52:	b480      	push	{r7}
 8009f54:	b085      	sub	sp, #20
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f68:	d103      	bne.n	8009f72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	691b      	ldr	r3, [r3, #16]
 8009f6e:	60fb      	str	r3, [r7, #12]
 8009f70:	e00c      	b.n	8009f8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	3308      	adds	r3, #8
 8009f76:	60fb      	str	r3, [r7, #12]
 8009f78:	e002      	b.n	8009f80 <vListInsert+0x2e>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68ba      	ldr	r2, [r7, #8]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d2f6      	bcs.n	8009f7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	685a      	ldr	r2, [r3, #4]
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	685b      	ldr	r3, [r3, #4]
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	1c5a      	adds	r2, r3, #1
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	601a      	str	r2, [r3, #0]
}
 8009fb8:	bf00      	nop
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	6892      	ldr	r2, [r2, #8]
 8009fda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	6852      	ldr	r2, [r2, #4]
 8009fe4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d103      	bne.n	8009ff8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	689a      	ldr	r2, [r3, #8]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	1e5a      	subs	r2, r3, #1
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3714      	adds	r7, #20
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10a      	bne.n	800a042 <xQueueGenericReset+0x2a>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	60bb      	str	r3, [r7, #8]
}
 800a03e:	bf00      	nop
 800a040:	e7fe      	b.n	800a040 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a042:	f003 fc67 	bl	800d914 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a04e:	68f9      	ldr	r1, [r7, #12]
 800a050:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a052:	fb01 f303 	mul.w	r3, r1, r3
 800a056:	441a      	add	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a072:	3b01      	subs	r3, #1
 800a074:	68f9      	ldr	r1, [r7, #12]
 800a076:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a078:	fb01 f303 	mul.w	r3, r1, r3
 800a07c:	441a      	add	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	22ff      	movs	r2, #255	; 0xff
 800a086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	22ff      	movs	r2, #255	; 0xff
 800a08e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d114      	bne.n	800a0c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d01a      	beq.n	800a0d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	3310      	adds	r3, #16
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f002 f84f 	bl	800c148 <xTaskRemoveFromEventList>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d012      	beq.n	800a0d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a0b0:	4b0c      	ldr	r3, [pc, #48]	; (800a0e4 <xQueueGenericReset+0xcc>)
 800a0b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0b6:	601a      	str	r2, [r3, #0]
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	e009      	b.n	800a0d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	3310      	adds	r3, #16
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f7ff fef2 	bl	8009eb0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	3324      	adds	r3, #36	; 0x24
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7ff feed 	bl	8009eb0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0d6:	f003 fc4d 	bl	800d974 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0da:	2301      	movs	r3, #1
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	e000ed04 	.word	0xe000ed04

0800a0e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08e      	sub	sp, #56	; 0x38
 800a0ec:	af02      	add	r7, sp, #8
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10a      	bne.n	800a112 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a100:	f383 8811 	msr	BASEPRI, r3
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a10e:	bf00      	nop
 800a110:	e7fe      	b.n	800a110 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10a      	bne.n	800a12e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a12a:	bf00      	nop
 800a12c:	e7fe      	b.n	800a12c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d002      	beq.n	800a13a <xQueueGenericCreateStatic+0x52>
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <xQueueGenericCreateStatic+0x56>
 800a13a:	2301      	movs	r3, #1
 800a13c:	e000      	b.n	800a140 <xQueueGenericCreateStatic+0x58>
 800a13e:	2300      	movs	r3, #0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d10a      	bne.n	800a15a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	623b      	str	r3, [r7, #32]
}
 800a156:	bf00      	nop
 800a158:	e7fe      	b.n	800a158 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d102      	bne.n	800a166 <xQueueGenericCreateStatic+0x7e>
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <xQueueGenericCreateStatic+0x82>
 800a166:	2301      	movs	r3, #1
 800a168:	e000      	b.n	800a16c <xQueueGenericCreateStatic+0x84>
 800a16a:	2300      	movs	r3, #0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10a      	bne.n	800a186 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	61fb      	str	r3, [r7, #28]
}
 800a182:	bf00      	nop
 800a184:	e7fe      	b.n	800a184 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a186:	2350      	movs	r3, #80	; 0x50
 800a188:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	2b50      	cmp	r3, #80	; 0x50
 800a18e:	d00a      	beq.n	800a1a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a194:	f383 8811 	msr	BASEPRI, r3
 800a198:	f3bf 8f6f 	isb	sy
 800a19c:	f3bf 8f4f 	dsb	sy
 800a1a0:	61bb      	str	r3, [r7, #24]
}
 800a1a2:	bf00      	nop
 800a1a4:	e7fe      	b.n	800a1a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a1a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d00d      	beq.n	800a1ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	68b9      	ldr	r1, [r7, #8]
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 f83f 	bl	800a24c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3730      	adds	r7, #48	; 0x30
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b08a      	sub	sp, #40	; 0x28
 800a1dc:	af02      	add	r7, sp, #8
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	60b9      	str	r1, [r7, #8]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d10a      	bne.n	800a202 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f0:	f383 8811 	msr	BASEPRI, r3
 800a1f4:	f3bf 8f6f 	isb	sy
 800a1f8:	f3bf 8f4f 	dsb	sy
 800a1fc:	613b      	str	r3, [r7, #16]
}
 800a1fe:	bf00      	nop
 800a200:	e7fe      	b.n	800a200 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	68ba      	ldr	r2, [r7, #8]
 800a206:	fb02 f303 	mul.w	r3, r2, r3
 800a20a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	3350      	adds	r3, #80	; 0x50
 800a210:	4618      	mov	r0, r3
 800a212:	f003 fca1 	bl	800db58 <pvPortMalloc>
 800a216:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d011      	beq.n	800a242 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a21e:	69bb      	ldr	r3, [r7, #24]
 800a220:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	3350      	adds	r3, #80	; 0x50
 800a226:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a230:	79fa      	ldrb	r2, [r7, #7]
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	9300      	str	r3, [sp, #0]
 800a236:	4613      	mov	r3, r2
 800a238:	697a      	ldr	r2, [r7, #20]
 800a23a:	68b9      	ldr	r1, [r7, #8]
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f000 f805 	bl	800a24c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a242:	69bb      	ldr	r3, [r7, #24]
	}
 800a244:	4618      	mov	r0, r3
 800a246:	3720      	adds	r7, #32
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
 800a258:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d103      	bne.n	800a268 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	69ba      	ldr	r2, [r7, #24]
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	e002      	b.n	800a26e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	687a      	ldr	r2, [r7, #4]
 800a26c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a26e:	69bb      	ldr	r3, [r7, #24]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a274:	69bb      	ldr	r3, [r7, #24]
 800a276:	68ba      	ldr	r2, [r7, #8]
 800a278:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a27a:	2101      	movs	r1, #1
 800a27c:	69b8      	ldr	r0, [r7, #24]
 800a27e:	f7ff fecb 	bl	800a018 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	78fa      	ldrb	r2, [r7, #3]
 800a286:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a28a:	bf00      	nop
 800a28c:	3710      	adds	r7, #16
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
	...

0800a294 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b08e      	sub	sp, #56	; 0x38
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
 800a2a0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10a      	bne.n	800a2c6 <xQueueGenericSend+0x32>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a2c2:	bf00      	nop
 800a2c4:	e7fe      	b.n	800a2c4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d103      	bne.n	800a2d4 <xQueueGenericSend+0x40>
 800a2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <xQueueGenericSend+0x44>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e000      	b.n	800a2da <xQueueGenericSend+0x46>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10a      	bne.n	800a2f4 <xQueueGenericSend+0x60>
	__asm volatile
 800a2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e2:	f383 8811 	msr	BASEPRI, r3
 800a2e6:	f3bf 8f6f 	isb	sy
 800a2ea:	f3bf 8f4f 	dsb	sy
 800a2ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a2f0:	bf00      	nop
 800a2f2:	e7fe      	b.n	800a2f2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2b02      	cmp	r3, #2
 800a2f8:	d103      	bne.n	800a302 <xQueueGenericSend+0x6e>
 800a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d101      	bne.n	800a306 <xQueueGenericSend+0x72>
 800a302:	2301      	movs	r3, #1
 800a304:	e000      	b.n	800a308 <xQueueGenericSend+0x74>
 800a306:	2300      	movs	r3, #0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10a      	bne.n	800a322 <xQueueGenericSend+0x8e>
	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	623b      	str	r3, [r7, #32]
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a322:	f002 f9b7 	bl	800c694 <xTaskGetSchedulerState>
 800a326:	4603      	mov	r3, r0
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d102      	bne.n	800a332 <xQueueGenericSend+0x9e>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d101      	bne.n	800a336 <xQueueGenericSend+0xa2>
 800a332:	2301      	movs	r3, #1
 800a334:	e000      	b.n	800a338 <xQueueGenericSend+0xa4>
 800a336:	2300      	movs	r3, #0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10a      	bne.n	800a352 <xQueueGenericSend+0xbe>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	61fb      	str	r3, [r7, #28]
}
 800a34e:	bf00      	nop
 800a350:	e7fe      	b.n	800a350 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a352:	f003 fadf 	bl	800d914 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a35e:	429a      	cmp	r2, r3
 800a360:	d302      	bcc.n	800a368 <xQueueGenericSend+0xd4>
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	2b02      	cmp	r3, #2
 800a366:	d129      	bne.n	800a3bc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a368:	683a      	ldr	r2, [r7, #0]
 800a36a:	68b9      	ldr	r1, [r7, #8]
 800a36c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a36e:	f000 fbbb 	bl	800aae8 <prvCopyDataToQueue>
 800a372:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d010      	beq.n	800a39e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a37e:	3324      	adds	r3, #36	; 0x24
 800a380:	4618      	mov	r0, r3
 800a382:	f001 fee1 	bl	800c148 <xTaskRemoveFromEventList>
 800a386:	4603      	mov	r3, r0
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d013      	beq.n	800a3b4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a38c:	4b3f      	ldr	r3, [pc, #252]	; (800a48c <xQueueGenericSend+0x1f8>)
 800a38e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	f3bf 8f6f 	isb	sy
 800a39c:	e00a      	b.n	800a3b4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d007      	beq.n	800a3b4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3a4:	4b39      	ldr	r3, [pc, #228]	; (800a48c <xQueueGenericSend+0x1f8>)
 800a3a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3aa:	601a      	str	r2, [r3, #0]
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3b4:	f003 fade 	bl	800d974 <vPortExitCritical>
				return pdPASS;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e063      	b.n	800a484 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d103      	bne.n	800a3ca <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3c2:	f003 fad7 	bl	800d974 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e05c      	b.n	800a484 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d106      	bne.n	800a3de <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3d0:	f107 0314 	add.w	r3, r7, #20
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f001 ff1b 	bl	800c210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3de:	f003 fac9 	bl	800d974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3e2:	f001 fbf9 	bl	800bbd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3e6:	f003 fa95 	bl	800d914 <vPortEnterCritical>
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3f0:	b25b      	sxtb	r3, r3
 800a3f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3f6:	d103      	bne.n	800a400 <xQueueGenericSend+0x16c>
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a402:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a406:	b25b      	sxtb	r3, r3
 800a408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a40c:	d103      	bne.n	800a416 <xQueueGenericSend+0x182>
 800a40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a410:	2200      	movs	r2, #0
 800a412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a416:	f003 faad 	bl	800d974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a41a:	1d3a      	adds	r2, r7, #4
 800a41c:	f107 0314 	add.w	r3, r7, #20
 800a420:	4611      	mov	r1, r2
 800a422:	4618      	mov	r0, r3
 800a424:	f001 ff0a 	bl	800c23c <xTaskCheckForTimeOut>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d124      	bne.n	800a478 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a42e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a430:	f000 fc52 	bl	800acd8 <prvIsQueueFull>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d018      	beq.n	800a46c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43c:	3310      	adds	r3, #16
 800a43e:	687a      	ldr	r2, [r7, #4]
 800a440:	4611      	mov	r1, r2
 800a442:	4618      	mov	r0, r3
 800a444:	f001 fe30 	bl	800c0a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a44a:	f000 fbdd 	bl	800ac08 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a44e:	f001 fbd1 	bl	800bbf4 <xTaskResumeAll>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	f47f af7c 	bne.w	800a352 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a45a:	4b0c      	ldr	r3, [pc, #48]	; (800a48c <xQueueGenericSend+0x1f8>)
 800a45c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a460:	601a      	str	r2, [r3, #0]
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	e772      	b.n	800a352 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a46c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a46e:	f000 fbcb 	bl	800ac08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a472:	f001 fbbf 	bl	800bbf4 <xTaskResumeAll>
 800a476:	e76c      	b.n	800a352 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a47a:	f000 fbc5 	bl	800ac08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a47e:	f001 fbb9 	bl	800bbf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a482:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a484:	4618      	mov	r0, r3
 800a486:	3738      	adds	r7, #56	; 0x38
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	e000ed04 	.word	0xe000ed04

0800a490 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b090      	sub	sp, #64	; 0x40
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a4a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10a      	bne.n	800a4be <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ac:	f383 8811 	msr	BASEPRI, r3
 800a4b0:	f3bf 8f6f 	isb	sy
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a4ba:	bf00      	nop
 800a4bc:	e7fe      	b.n	800a4bc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d103      	bne.n	800a4cc <xQueueGenericSendFromISR+0x3c>
 800a4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <xQueueGenericSendFromISR+0x40>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e000      	b.n	800a4d2 <xQueueGenericSendFromISR+0x42>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d10a      	bne.n	800a4ec <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4da:	f383 8811 	msr	BASEPRI, r3
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a4e8:	bf00      	nop
 800a4ea:	e7fe      	b.n	800a4ea <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d103      	bne.n	800a4fa <xQueueGenericSendFromISR+0x6a>
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d101      	bne.n	800a4fe <xQueueGenericSendFromISR+0x6e>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e000      	b.n	800a500 <xQueueGenericSendFromISR+0x70>
 800a4fe:	2300      	movs	r3, #0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10a      	bne.n	800a51a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	623b      	str	r3, [r7, #32]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a51a:	f003 fadd 	bl	800dad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a51e:	f3ef 8211 	mrs	r2, BASEPRI
 800a522:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	61fa      	str	r2, [r7, #28]
 800a534:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a536:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a538:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a542:	429a      	cmp	r2, r3
 800a544:	d302      	bcc.n	800a54c <xQueueGenericSendFromISR+0xbc>
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	2b02      	cmp	r3, #2
 800a54a:	d12f      	bne.n	800a5ac <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	68b9      	ldr	r1, [r7, #8]
 800a560:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a562:	f000 fac1 	bl	800aae8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a566:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a56a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a56e:	d112      	bne.n	800a596 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a574:	2b00      	cmp	r3, #0
 800a576:	d016      	beq.n	800a5a6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57a:	3324      	adds	r3, #36	; 0x24
 800a57c:	4618      	mov	r0, r3
 800a57e:	f001 fde3 	bl	800c148 <xTaskRemoveFromEventList>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00e      	beq.n	800a5a6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00b      	beq.n	800a5a6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	e007      	b.n	800a5a6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a596:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a59a:	3301      	adds	r3, #1
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	b25a      	sxtb	r2, r3
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a5aa:	e001      	b.n	800a5b0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5b2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a5ba:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3740      	adds	r7, #64	; 0x40
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b08e      	sub	sp, #56	; 0x38
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
 800a5ce:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d10a      	bne.n	800a5f0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	623b      	str	r3, [r7, #32]
}
 800a5ec:	bf00      	nop
 800a5ee:	e7fe      	b.n	800a5ee <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d00a      	beq.n	800a60e <xQueueGiveFromISR+0x48>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fc:	f383 8811 	msr	BASEPRI, r3
 800a600:	f3bf 8f6f 	isb	sy
 800a604:	f3bf 8f4f 	dsb	sy
 800a608:	61fb      	str	r3, [r7, #28]
}
 800a60a:	bf00      	nop
 800a60c:	e7fe      	b.n	800a60c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d103      	bne.n	800a61e <xQueueGiveFromISR+0x58>
 800a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d101      	bne.n	800a622 <xQueueGiveFromISR+0x5c>
 800a61e:	2301      	movs	r3, #1
 800a620:	e000      	b.n	800a624 <xQueueGiveFromISR+0x5e>
 800a622:	2300      	movs	r3, #0
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10a      	bne.n	800a63e <xQueueGiveFromISR+0x78>
	__asm volatile
 800a628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62c:	f383 8811 	msr	BASEPRI, r3
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	61bb      	str	r3, [r7, #24]
}
 800a63a:	bf00      	nop
 800a63c:	e7fe      	b.n	800a63c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a63e:	f003 fa4b 	bl	800dad8 <vPortValidateInterruptPriority>
	__asm volatile
 800a642:	f3ef 8211 	mrs	r2, BASEPRI
 800a646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64a:	f383 8811 	msr	BASEPRI, r3
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	617a      	str	r2, [r7, #20]
 800a658:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a65a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a65c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a65e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a662:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d22b      	bcs.n	800a6c6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a67a:	1c5a      	adds	r2, r3, #1
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a680:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a688:	d112      	bne.n	800a6b0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d016      	beq.n	800a6c0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	3324      	adds	r3, #36	; 0x24
 800a696:	4618      	mov	r0, r3
 800a698:	f001 fd56 	bl	800c148 <xTaskRemoveFromEventList>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00e      	beq.n	800a6c0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00b      	beq.n	800a6c0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	601a      	str	r2, [r3, #0]
 800a6ae:	e007      	b.n	800a6c0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6b4:	3301      	adds	r3, #1
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	b25a      	sxtb	r2, r3
 800a6ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	637b      	str	r3, [r7, #52]	; 0x34
 800a6c4:	e001      	b.n	800a6ca <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	637b      	str	r3, [r7, #52]	; 0x34
 800a6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6cc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f383 8811 	msr	BASEPRI, r3
}
 800a6d4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3738      	adds	r7, #56	; 0x38
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b08c      	sub	sp, #48	; 0x30
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10a      	bne.n	800a710 <xQueueReceive+0x30>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	623b      	str	r3, [r7, #32]
}
 800a70c:	bf00      	nop
 800a70e:	e7fe      	b.n	800a70e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d103      	bne.n	800a71e <xQueueReceive+0x3e>
 800a716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <xQueueReceive+0x42>
 800a71e:	2301      	movs	r3, #1
 800a720:	e000      	b.n	800a724 <xQueueReceive+0x44>
 800a722:	2300      	movs	r3, #0
 800a724:	2b00      	cmp	r3, #0
 800a726:	d10a      	bne.n	800a73e <xQueueReceive+0x5e>
	__asm volatile
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	61fb      	str	r3, [r7, #28]
}
 800a73a:	bf00      	nop
 800a73c:	e7fe      	b.n	800a73c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a73e:	f001 ffa9 	bl	800c694 <xTaskGetSchedulerState>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d102      	bne.n	800a74e <xQueueReceive+0x6e>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d101      	bne.n	800a752 <xQueueReceive+0x72>
 800a74e:	2301      	movs	r3, #1
 800a750:	e000      	b.n	800a754 <xQueueReceive+0x74>
 800a752:	2300      	movs	r3, #0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10a      	bne.n	800a76e <xQueueReceive+0x8e>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	61bb      	str	r3, [r7, #24]
}
 800a76a:	bf00      	nop
 800a76c:	e7fe      	b.n	800a76c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a76e:	f003 f8d1 	bl	800d914 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a776:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d01f      	beq.n	800a7be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a77e:	68b9      	ldr	r1, [r7, #8]
 800a780:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a782:	f000 fa1b 	bl	800abbc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a788:	1e5a      	subs	r2, r3, #1
 800a78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a78c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00f      	beq.n	800a7b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a798:	3310      	adds	r3, #16
 800a79a:	4618      	mov	r0, r3
 800a79c:	f001 fcd4 	bl	800c148 <xTaskRemoveFromEventList>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d007      	beq.n	800a7b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a7a6:	4b3d      	ldr	r3, [pc, #244]	; (800a89c <xQueueReceive+0x1bc>)
 800a7a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ac:	601a      	str	r2, [r3, #0]
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7b6:	f003 f8dd 	bl	800d974 <vPortExitCritical>
				return pdPASS;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e069      	b.n	800a892 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d103      	bne.n	800a7cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7c4:	f003 f8d6 	bl	800d974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	e062      	b.n	800a892 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d106      	bne.n	800a7e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7d2:	f107 0310 	add.w	r3, r7, #16
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f001 fd1a 	bl	800c210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7e0:	f003 f8c8 	bl	800d974 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7e4:	f001 f9f8 	bl	800bbd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7e8:	f003 f894 	bl	800d914 <vPortEnterCritical>
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a7f2:	b25b      	sxtb	r3, r3
 800a7f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a7f8:	d103      	bne.n	800a802 <xQueueReceive+0x122>
 800a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a804:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a808:	b25b      	sxtb	r3, r3
 800a80a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a80e:	d103      	bne.n	800a818 <xQueueReceive+0x138>
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	2200      	movs	r2, #0
 800a814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a818:	f003 f8ac 	bl	800d974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a81c:	1d3a      	adds	r2, r7, #4
 800a81e:	f107 0310 	add.w	r3, r7, #16
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f001 fd09 	bl	800c23c <xTaskCheckForTimeOut>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d123      	bne.n	800a878 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a832:	f000 fa3b 	bl	800acac <prvIsQueueEmpty>
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d017      	beq.n	800a86c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	3324      	adds	r3, #36	; 0x24
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	4611      	mov	r1, r2
 800a844:	4618      	mov	r0, r3
 800a846:	f001 fc2f 	bl	800c0a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a84a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a84c:	f000 f9dc 	bl	800ac08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a850:	f001 f9d0 	bl	800bbf4 <xTaskResumeAll>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d189      	bne.n	800a76e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a85a:	4b10      	ldr	r3, [pc, #64]	; (800a89c <xQueueReceive+0x1bc>)
 800a85c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	e780      	b.n	800a76e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a86c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a86e:	f000 f9cb 	bl	800ac08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a872:	f001 f9bf 	bl	800bbf4 <xTaskResumeAll>
 800a876:	e77a      	b.n	800a76e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a87a:	f000 f9c5 	bl	800ac08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a87e:	f001 f9b9 	bl	800bbf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a882:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a884:	f000 fa12 	bl	800acac <prvIsQueueEmpty>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f43f af6f 	beq.w	800a76e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a890:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a892:	4618      	mov	r0, r3
 800a894:	3730      	adds	r7, #48	; 0x30
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
 800a89a:	bf00      	nop
 800a89c:	e000ed04 	.word	0xe000ed04

0800a8a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b08e      	sub	sp, #56	; 0x38
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10a      	bne.n	800a8d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	623b      	str	r3, [r7, #32]
}
 800a8ce:	bf00      	nop
 800a8d0:	e7fe      	b.n	800a8d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d00a      	beq.n	800a8f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8de:	f383 8811 	msr	BASEPRI, r3
 800a8e2:	f3bf 8f6f 	isb	sy
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	61fb      	str	r3, [r7, #28]
}
 800a8ec:	bf00      	nop
 800a8ee:	e7fe      	b.n	800a8ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8f0:	f001 fed0 	bl	800c694 <xTaskGetSchedulerState>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d102      	bne.n	800a900 <xQueueSemaphoreTake+0x60>
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d101      	bne.n	800a904 <xQueueSemaphoreTake+0x64>
 800a900:	2301      	movs	r3, #1
 800a902:	e000      	b.n	800a906 <xQueueSemaphoreTake+0x66>
 800a904:	2300      	movs	r3, #0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10a      	bne.n	800a920 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	61bb      	str	r3, [r7, #24]
}
 800a91c:	bf00      	nop
 800a91e:	e7fe      	b.n	800a91e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a920:	f002 fff8 	bl	800d914 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a928:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a92a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d024      	beq.n	800a97a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a932:	1e5a      	subs	r2, r3, #1
 800a934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a936:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d104      	bne.n	800a94a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a940:	f002 f8da 	bl	800caf8 <pvTaskIncrementMutexHeldCount>
 800a944:	4602      	mov	r2, r0
 800a946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a948:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d00f      	beq.n	800a972 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a954:	3310      	adds	r3, #16
 800a956:	4618      	mov	r0, r3
 800a958:	f001 fbf6 	bl	800c148 <xTaskRemoveFromEventList>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d007      	beq.n	800a972 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a962:	4b54      	ldr	r3, [pc, #336]	; (800aab4 <xQueueSemaphoreTake+0x214>)
 800a964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a968:	601a      	str	r2, [r3, #0]
 800a96a:	f3bf 8f4f 	dsb	sy
 800a96e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a972:	f002 ffff 	bl	800d974 <vPortExitCritical>
				return pdPASS;
 800a976:	2301      	movs	r3, #1
 800a978:	e097      	b.n	800aaaa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d111      	bne.n	800a9a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00a      	beq.n	800a99c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98a:	f383 8811 	msr	BASEPRI, r3
 800a98e:	f3bf 8f6f 	isb	sy
 800a992:	f3bf 8f4f 	dsb	sy
 800a996:	617b      	str	r3, [r7, #20]
}
 800a998:	bf00      	nop
 800a99a:	e7fe      	b.n	800a99a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a99c:	f002 ffea 	bl	800d974 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	e082      	b.n	800aaaa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d106      	bne.n	800a9b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9aa:	f107 030c 	add.w	r3, r7, #12
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f001 fc2e 	bl	800c210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9b8:	f002 ffdc 	bl	800d974 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9bc:	f001 f90c 	bl	800bbd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9c0:	f002 ffa8 	bl	800d914 <vPortEnterCritical>
 800a9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9ca:	b25b      	sxtb	r3, r3
 800a9cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9d0:	d103      	bne.n	800a9da <xQueueSemaphoreTake+0x13a>
 800a9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9e0:	b25b      	sxtb	r3, r3
 800a9e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9e6:	d103      	bne.n	800a9f0 <xQueueSemaphoreTake+0x150>
 800a9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9f0:	f002 ffc0 	bl	800d974 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9f4:	463a      	mov	r2, r7
 800a9f6:	f107 030c 	add.w	r3, r7, #12
 800a9fa:	4611      	mov	r1, r2
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f001 fc1d 	bl	800c23c <xTaskCheckForTimeOut>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d132      	bne.n	800aa6e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa0a:	f000 f94f 	bl	800acac <prvIsQueueEmpty>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d026      	beq.n	800aa62 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d109      	bne.n	800aa30 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aa1c:	f002 ff7a 	bl	800d914 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f001 fe53 	bl	800c6d0 <xTaskPriorityInherit>
 800aa2a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aa2c:	f002 ffa2 	bl	800d974 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa32:	3324      	adds	r3, #36	; 0x24
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	4611      	mov	r1, r2
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f001 fb35 	bl	800c0a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa40:	f000 f8e2 	bl	800ac08 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa44:	f001 f8d6 	bl	800bbf4 <xTaskResumeAll>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	f47f af68 	bne.w	800a920 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aa50:	4b18      	ldr	r3, [pc, #96]	; (800aab4 <xQueueSemaphoreTake+0x214>)
 800aa52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa56:	601a      	str	r2, [r3, #0]
 800aa58:	f3bf 8f4f 	dsb	sy
 800aa5c:	f3bf 8f6f 	isb	sy
 800aa60:	e75e      	b.n	800a920 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aa62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa64:	f000 f8d0 	bl	800ac08 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa68:	f001 f8c4 	bl	800bbf4 <xTaskResumeAll>
 800aa6c:	e758      	b.n	800a920 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aa6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa70:	f000 f8ca 	bl	800ac08 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa74:	f001 f8be 	bl	800bbf4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa7a:	f000 f917 	bl	800acac <prvIsQueueEmpty>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f43f af4d 	beq.w	800a920 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00d      	beq.n	800aaa8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800aa8c:	f002 ff42 	bl	800d914 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aa90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aa92:	f000 f811 	bl	800aab8 <prvGetDisinheritPriorityAfterTimeout>
 800aa96:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aa98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f001 feec 	bl	800c87c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aaa4:	f002 ff66 	bl	800d974 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aaa8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3738      	adds	r7, #56	; 0x38
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	e000ed04 	.word	0xe000ed04

0800aab8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d006      	beq.n	800aad6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800aad2:	60fb      	str	r3, [r7, #12]
 800aad4:	e001      	b.n	800aada <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aad6:	2300      	movs	r3, #0
 800aad8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aada:	68fb      	ldr	r3, [r7, #12]
	}
 800aadc:	4618      	mov	r0, r3
 800aade:	3714      	adds	r7, #20
 800aae0:	46bd      	mov	sp, r7
 800aae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae6:	4770      	bx	lr

0800aae8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b086      	sub	sp, #24
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d10d      	bne.n	800ab22 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d14d      	bne.n	800abaa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	4618      	mov	r0, r3
 800ab14:	f001 fe44 	bl	800c7a0 <xTaskPriorityDisinherit>
 800ab18:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	609a      	str	r2, [r3, #8]
 800ab20:	e043      	b.n	800abaa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d119      	bne.n	800ab5c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6858      	ldr	r0, [r3, #4]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab30:	461a      	mov	r2, r3
 800ab32:	68b9      	ldr	r1, [r7, #8]
 800ab34:	f005 f87c 	bl	800fc30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab40:	441a      	add	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	685a      	ldr	r2, [r3, #4]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d32b      	bcc.n	800abaa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	605a      	str	r2, [r3, #4]
 800ab5a:	e026      	b.n	800abaa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	68d8      	ldr	r0, [r3, #12]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab64:	461a      	mov	r2, r3
 800ab66:	68b9      	ldr	r1, [r7, #8]
 800ab68:	f005 f862 	bl	800fc30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	68da      	ldr	r2, [r3, #12]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab74:	425b      	negs	r3, r3
 800ab76:	441a      	add	r2, r3
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	68da      	ldr	r2, [r3, #12]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d207      	bcs.n	800ab98 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	689a      	ldr	r2, [r3, #8]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab90:	425b      	negs	r3, r3
 800ab92:	441a      	add	r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b02      	cmp	r3, #2
 800ab9c:	d105      	bne.n	800abaa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	3b01      	subs	r3, #1
 800aba8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	1c5a      	adds	r2, r3, #1
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800abb2:	697b      	ldr	r3, [r7, #20]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d018      	beq.n	800ac00 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68da      	ldr	r2, [r3, #12]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd6:	441a      	add	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68da      	ldr	r2, [r3, #12]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d303      	bcc.n	800abf0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	68d9      	ldr	r1, [r3, #12]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf8:	461a      	mov	r2, r3
 800abfa:	6838      	ldr	r0, [r7, #0]
 800abfc:	f005 f818 	bl	800fc30 <memcpy>
	}
}
 800ac00:	bf00      	nop
 800ac02:	3708      	adds	r7, #8
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac10:	f002 fe80 	bl	800d914 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac1a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac1c:	e011      	b.n	800ac42 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d012      	beq.n	800ac4c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	3324      	adds	r3, #36	; 0x24
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f001 fa8c 	bl	800c148 <xTaskRemoveFromEventList>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d001      	beq.n	800ac3a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac36:	f001 fb63 	bl	800c300 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac3a:	7bfb      	ldrb	r3, [r7, #15]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	dce9      	bgt.n	800ac1e <prvUnlockQueue+0x16>
 800ac4a:	e000      	b.n	800ac4e <prvUnlockQueue+0x46>
					break;
 800ac4c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	22ff      	movs	r2, #255	; 0xff
 800ac52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ac56:	f002 fe8d 	bl	800d974 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac5a:	f002 fe5b 	bl	800d914 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac64:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac66:	e011      	b.n	800ac8c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	691b      	ldr	r3, [r3, #16]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d012      	beq.n	800ac96 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	3310      	adds	r3, #16
 800ac74:	4618      	mov	r0, r3
 800ac76:	f001 fa67 	bl	800c148 <xTaskRemoveFromEventList>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d001      	beq.n	800ac84 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac80:	f001 fb3e 	bl	800c300 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
 800ac86:	3b01      	subs	r3, #1
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	dce9      	bgt.n	800ac68 <prvUnlockQueue+0x60>
 800ac94:	e000      	b.n	800ac98 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac96:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	22ff      	movs	r2, #255	; 0xff
 800ac9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aca0:	f002 fe68 	bl	800d974 <vPortExitCritical>
}
 800aca4:	bf00      	nop
 800aca6:	3710      	adds	r7, #16
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acb4:	f002 fe2e 	bl	800d914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d102      	bne.n	800acc6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800acc0:	2301      	movs	r3, #1
 800acc2:	60fb      	str	r3, [r7, #12]
 800acc4:	e001      	b.n	800acca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800acc6:	2300      	movs	r3, #0
 800acc8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acca:	f002 fe53 	bl	800d974 <vPortExitCritical>

	return xReturn;
 800acce:	68fb      	ldr	r3, [r7, #12]
}
 800acd0:	4618      	mov	r0, r3
 800acd2:	3710      	adds	r7, #16
 800acd4:	46bd      	mov	sp, r7
 800acd6:	bd80      	pop	{r7, pc}

0800acd8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ace0:	f002 fe18 	bl	800d914 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acec:	429a      	cmp	r2, r3
 800acee:	d102      	bne.n	800acf6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800acf0:	2301      	movs	r3, #1
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	e001      	b.n	800acfa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800acf6:	2300      	movs	r3, #0
 800acf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acfa:	f002 fe3b 	bl	800d974 <vPortExitCritical>

	return xReturn;
 800acfe:	68fb      	ldr	r3, [r7, #12]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad12:	2300      	movs	r3, #0
 800ad14:	60fb      	str	r3, [r7, #12]
 800ad16:	e014      	b.n	800ad42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad18:	4a0f      	ldr	r2, [pc, #60]	; (800ad58 <vQueueAddToRegistry+0x50>)
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d10b      	bne.n	800ad3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad24:	490c      	ldr	r1, [pc, #48]	; (800ad58 <vQueueAddToRegistry+0x50>)
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	683a      	ldr	r2, [r7, #0]
 800ad2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad2e:	4a0a      	ldr	r2, [pc, #40]	; (800ad58 <vQueueAddToRegistry+0x50>)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	00db      	lsls	r3, r3, #3
 800ad34:	4413      	add	r3, r2
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad3a:	e006      	b.n	800ad4a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	60fb      	str	r3, [r7, #12]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2b07      	cmp	r3, #7
 800ad46:	d9e7      	bls.n	800ad18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad48:	bf00      	nop
 800ad4a:	bf00      	nop
 800ad4c:	3714      	adds	r7, #20
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	20001890 	.word	0x20001890

0800ad5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad6c:	f002 fdd2 	bl	800d914 <vPortEnterCritical>
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad76:	b25b      	sxtb	r3, r3
 800ad78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad7c:	d103      	bne.n	800ad86 <vQueueWaitForMessageRestricted+0x2a>
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad8c:	b25b      	sxtb	r3, r3
 800ad8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad92:	d103      	bne.n	800ad9c <vQueueWaitForMessageRestricted+0x40>
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ad9c:	f002 fdea 	bl	800d974 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d106      	bne.n	800adb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	3324      	adds	r3, #36	; 0x24
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	68b9      	ldr	r1, [r7, #8]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f001 f99d 	bl	800c0f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800adb6:	6978      	ldr	r0, [r7, #20]
 800adb8:	f7ff ff26 	bl	800ac08 <prvUnlockQueue>
	}
 800adbc:	bf00      	nop
 800adbe:	3718      	adds	r7, #24
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b08c      	sub	sp, #48	; 0x30
 800adc8:	af02      	add	r7, sp, #8
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d110      	bne.n	800adf8 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800add6:	2301      	movs	r3, #1
 800add8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2b04      	cmp	r3, #4
 800ade0:	d81b      	bhi.n	800ae1a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	61fb      	str	r3, [r7, #28]
}
 800adf4:	bf00      	nop
 800adf6:	e7fe      	b.n	800adf6 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d10a      	bne.n	800ae1a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800ae04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae08:	f383 8811 	msr	BASEPRI, r3
 800ae0c:	f3bf 8f6f 	isb	sy
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	61bb      	str	r3, [r7, #24]
}
 800ae16:	bf00      	nop
 800ae18:	e7fe      	b.n	800ae18 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800ae1a:	68ba      	ldr	r2, [r7, #8]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d90a      	bls.n	800ae38 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800ae22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae26:	f383 8811 	msr	BASEPRI, r3
 800ae2a:	f3bf 8f6f 	isb	sy
 800ae2e:	f3bf 8f4f 	dsb	sy
 800ae32:	617b      	str	r3, [r7, #20]
}
 800ae34:	bf00      	nop
 800ae36:	e7fe      	b.n	800ae36 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d101      	bne.n	800ae42 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	3301      	adds	r3, #1
 800ae46:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	3324      	adds	r3, #36	; 0x24
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f002 fe83 	bl	800db58 <pvPortMalloc>
 800ae52:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ae60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae64:	9300      	str	r3, [sp, #0]
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	6a38      	ldr	r0, [r7, #32]
 800ae6c:	f000 fab9 	bl	800b3e2 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800ae70:	6a3b      	ldr	r3, [r7, #32]
	}
 800ae72:	4618      	mov	r0, r3
 800ae74:	3728      	adds	r7, #40	; 0x28
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b087      	sub	sp, #28
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800ae86:	693b      	ldr	r3, [r7, #16]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d10a      	bne.n	800aea2 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800ae8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae90:	f383 8811 	msr	BASEPRI, r3
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	f3bf 8f4f 	dsb	sy
 800ae9c:	60fb      	str	r3, [r7, #12]
}
 800ae9e:	bf00      	nop
 800aea0:	e7fe      	b.n	800aea0 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	689a      	ldr	r2, [r3, #8]
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4413      	add	r3, r2
 800aeac:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	697a      	ldr	r2, [r7, #20]
 800aeb4:	1ad3      	subs	r3, r2, r3
 800aeb6:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	3b01      	subs	r3, #1
 800aebc:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	697a      	ldr	r2, [r7, #20]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d304      	bcc.n	800aed2 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	697a      	ldr	r2, [r7, #20]
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800aed2:	697b      	ldr	r3, [r7, #20]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	371c      	adds	r7, #28
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b090      	sub	sp, #64	; 0x40
 800aee4:	af02      	add	r7, sp, #8
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	60b9      	str	r1, [r7, #8]
 800aeea:	607a      	str	r2, [r7, #4]
 800aeec:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d10a      	bne.n	800af12 <xStreamBufferSendFromISR+0x32>
	__asm volatile
 800aefc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	623b      	str	r3, [r7, #32]
}
 800af0e:	bf00      	nop
 800af10:	e7fe      	b.n	800af10 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10a      	bne.n	800af2e <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 800af18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1c:	f383 8811 	msr	BASEPRI, r3
 800af20:	f3bf 8f6f 	isb	sy
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	61fb      	str	r3, [r7, #28]
}
 800af2a:	bf00      	nop
 800af2c:	e7fe      	b.n	800af2c <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	7f1b      	ldrb	r3, [r3, #28]
 800af32:	f003 0301 	and.w	r3, r3, #1
 800af36:	2b00      	cmp	r3, #0
 800af38:	d002      	beq.n	800af40 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800af3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af3c:	3304      	adds	r3, #4
 800af3e:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800af40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af42:	f7ff ff9a 	bl	800ae7a <xStreamBufferSpacesAvailable>
 800af46:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800af48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af4e:	687a      	ldr	r2, [r7, #4]
 800af50:	68b9      	ldr	r1, [r7, #8]
 800af52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af54:	f000 f835 	bl	800afc2 <prvWriteMessageToBuffer>
 800af58:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800af5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d02b      	beq.n	800afb8 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800af60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af62:	f000 fa1e 	bl	800b3a2 <prvBytesInBuffer>
 800af66:	4602      	mov	r2, r0
 800af68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d323      	bcc.n	800afb8 <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 800af70:	f3ef 8211 	mrs	r2, BASEPRI
 800af74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	61ba      	str	r2, [r7, #24]
 800af86:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800af88:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800af8a:	627b      	str	r3, [r7, #36]	; 0x24
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00b      	beq.n	800afac <xStreamBufferSendFromISR+0xcc>
 800af94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af96:	6918      	ldr	r0, [r3, #16]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	2300      	movs	r3, #0
 800af9e:	2200      	movs	r2, #0
 800afa0:	2100      	movs	r1, #0
 800afa2:	f001 fedb 	bl	800cd5c <xTaskGenericNotifyFromISR>
 800afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa8:	2200      	movs	r2, #0
 800afaa:	611a      	str	r2, [r3, #16]
 800afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afae:	613b      	str	r3, [r7, #16]
	__asm volatile
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	f383 8811 	msr	BASEPRI, r3
}
 800afb6:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 800afb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3738      	adds	r7, #56	; 0x38
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}

0800afc2 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800afc2:	b580      	push	{r7, lr}
 800afc4:	b086      	sub	sp, #24
 800afc6:	af00      	add	r7, sp, #0
 800afc8:	60f8      	str	r0, [r7, #12]
 800afca:	60b9      	str	r1, [r7, #8]
 800afcc:	607a      	str	r2, [r7, #4]
 800afce:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d102      	bne.n	800afdc <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800afd6:	2300      	movs	r3, #0
 800afd8:	617b      	str	r3, [r7, #20]
 800afda:	e01d      	b.n	800b018 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	7f1b      	ldrb	r3, [r3, #28]
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d108      	bne.n	800affa <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800afe8:	2301      	movs	r3, #1
 800afea:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	4293      	cmp	r3, r2
 800aff2:	bf28      	it	cs
 800aff4:	4613      	movcs	r3, r2
 800aff6:	607b      	str	r3, [r7, #4]
 800aff8:	e00e      	b.n	800b018 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800affa:	683a      	ldr	r2, [r7, #0]
 800affc:	6a3b      	ldr	r3, [r7, #32]
 800affe:	429a      	cmp	r2, r3
 800b000:	d308      	bcc.n	800b014 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800b002:	2301      	movs	r3, #1
 800b004:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800b006:	1d3b      	adds	r3, r7, #4
 800b008:	2204      	movs	r2, #4
 800b00a:	4619      	mov	r1, r3
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f000 f8dc 	bl	800b1ca <prvWriteBytesToBuffer>
 800b012:	e001      	b.n	800b018 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800b014:	2300      	movs	r3, #0
 800b016:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d007      	beq.n	800b02e <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	461a      	mov	r2, r3
 800b022:	68b9      	ldr	r1, [r7, #8]
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f000 f8d0 	bl	800b1ca <prvWriteBytesToBuffer>
 800b02a:	6138      	str	r0, [r7, #16]
 800b02c:	e001      	b.n	800b032 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800b02e:	2300      	movs	r3, #0
 800b030:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800b032:	693b      	ldr	r3, [r7, #16]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3718      	adds	r7, #24
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08e      	sub	sp, #56	; 0x38
 800b040:	af02      	add	r7, sp, #8
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
 800b048:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800b04e:	2300      	movs	r3, #0
 800b050:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10a      	bne.n	800b06e <xStreamBufferReceive+0x32>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	61fb      	str	r3, [r7, #28]
}
 800b06a:	bf00      	nop
 800b06c:	e7fe      	b.n	800b06c <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800b06e:	6a3b      	ldr	r3, [r7, #32]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10a      	bne.n	800b08a <xStreamBufferReceive+0x4e>
	__asm volatile
 800b074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	61bb      	str	r3, [r7, #24]
}
 800b086:	bf00      	nop
 800b088:	e7fe      	b.n	800b088 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	7f1b      	ldrb	r3, [r3, #28]
 800b08e:	f003 0301 	and.w	r3, r3, #1
 800b092:	2b00      	cmp	r3, #0
 800b094:	d002      	beq.n	800b09c <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800b096:	2304      	movs	r3, #4
 800b098:	627b      	str	r3, [r7, #36]	; 0x24
 800b09a:	e001      	b.n	800b0a0 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800b09c:	2300      	movs	r3, #0
 800b09e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d034      	beq.n	800b110 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800b0a6:	f002 fc35 	bl	800d914 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800b0aa:	6a38      	ldr	r0, [r7, #32]
 800b0ac:	f000 f979 	bl	800b3a2 <prvBytesInBuffer>
 800b0b0:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800b0b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d816      	bhi.n	800b0e8 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	f001 ff32 	bl	800cf24 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800b0c0:	6a3b      	ldr	r3, [r7, #32]
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00a      	beq.n	800b0de <xStreamBufferReceive+0xa2>
	__asm volatile
 800b0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0cc:	f383 8811 	msr	BASEPRI, r3
 800b0d0:	f3bf 8f6f 	isb	sy
 800b0d4:	f3bf 8f4f 	dsb	sy
 800b0d8:	617b      	str	r3, [r7, #20]
}
 800b0da:	bf00      	nop
 800b0dc:	e7fe      	b.n	800b0dc <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800b0de:	f001 fac9 	bl	800c674 <xTaskGetCurrentTaskHandle>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	6a3b      	ldr	r3, [r7, #32]
 800b0e6:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b0e8:	f002 fc44 	bl	800d974 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800b0ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d811      	bhi.n	800b118 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2100      	movs	r1, #0
 800b0fa:	2000      	movs	r0, #0
 800b0fc:	f001 fd10 	bl	800cb20 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800b100:	6a3b      	ldr	r3, [r7, #32]
 800b102:	2200      	movs	r2, #0
 800b104:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800b106:	6a38      	ldr	r0, [r7, #32]
 800b108:	f000 f94b 	bl	800b3a2 <prvBytesInBuffer>
 800b10c:	62b8      	str	r0, [r7, #40]	; 0x28
 800b10e:	e003      	b.n	800b118 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800b110:	6a38      	ldr	r0, [r7, #32]
 800b112:	f000 f946 	bl	800b3a2 <prvBytesInBuffer>
 800b116:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800b118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d91d      	bls.n	800b15c <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	68b9      	ldr	r1, [r7, #8]
 800b12a:	6a38      	ldr	r0, [r7, #32]
 800b12c:	f000 f81b 	bl	800b166 <prvReadMessageFromBuffer>
 800b130:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800b132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b134:	2b00      	cmp	r3, #0
 800b136:	d011      	beq.n	800b15c <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800b138:	f000 fd4e 	bl	800bbd8 <vTaskSuspendAll>
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d009      	beq.n	800b158 <xStreamBufferReceive+0x11c>
 800b144:	6a3b      	ldr	r3, [r7, #32]
 800b146:	6958      	ldr	r0, [r3, #20]
 800b148:	2300      	movs	r3, #0
 800b14a:	2200      	movs	r2, #0
 800b14c:	2100      	movs	r1, #0
 800b14e:	f001 fd47 	bl	800cbe0 <xTaskGenericNotify>
 800b152:	6a3b      	ldr	r3, [r7, #32]
 800b154:	2200      	movs	r2, #0
 800b156:	615a      	str	r2, [r3, #20]
 800b158:	f000 fd4c 	bl	800bbf4 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800b15c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3730      	adds	r7, #48	; 0x30
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800b166:	b580      	push	{r7, lr}
 800b168:	b088      	sub	sp, #32
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	60f8      	str	r0, [r7, #12]
 800b16e:	60b9      	str	r1, [r7, #8]
 800b170:	607a      	str	r2, [r7, #4]
 800b172:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	2b00      	cmp	r3, #0
 800b178:	d019      	beq.n	800b1ae <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800b180:	f107 0110 	add.w	r1, r7, #16
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f000 f890 	bl	800b2ae <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800b192:	683a      	ldr	r2, [r7, #0]
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800b19a:	69fa      	ldr	r2, [r7, #28]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d907      	bls.n	800b1b2 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	69ba      	ldr	r2, [r7, #24]
 800b1a6:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	61fb      	str	r3, [r7, #28]
 800b1ac:	e001      	b.n	800b1b2 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	69fa      	ldr	r2, [r7, #28]
 800b1b6:	68b9      	ldr	r1, [r7, #8]
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	f000 f878 	bl	800b2ae <prvReadBytesFromBuffer>
 800b1be:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800b1c0:	697b      	ldr	r3, [r7, #20]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3720      	adds	r7, #32
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b08a      	sub	sp, #40	; 0x28
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	60f8      	str	r0, [r7, #12]
 800b1d2:	60b9      	str	r1, [r7, #8]
 800b1d4:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d10a      	bne.n	800b1f2 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800b1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e0:	f383 8811 	msr	BASEPRI, r3
 800b1e4:	f3bf 8f6f 	isb	sy
 800b1e8:	f3bf 8f4f 	dsb	sy
 800b1ec:	61fb      	str	r3, [r7, #28]
}
 800b1ee:	bf00      	nop
 800b1f0:	e7fe      	b.n	800b1f0 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	689a      	ldr	r2, [r3, #8]
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	4293      	cmp	r3, r2
 800b204:	bf28      	it	cs
 800b206:	4613      	movcs	r3, r2
 800b208:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800b20a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b20c:	6a3b      	ldr	r3, [r7, #32]
 800b20e:	441a      	add	r2, r3
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	429a      	cmp	r2, r3
 800b216:	d90a      	bls.n	800b22e <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800b218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21c:	f383 8811 	msr	BASEPRI, r3
 800b220:	f3bf 8f6f 	isb	sy
 800b224:	f3bf 8f4f 	dsb	sy
 800b228:	61bb      	str	r3, [r7, #24]
}
 800b22a:	bf00      	nop
 800b22c:	e7fe      	b.n	800b22c <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	699a      	ldr	r2, [r3, #24]
 800b232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b234:	4413      	add	r3, r2
 800b236:	6a3a      	ldr	r2, [r7, #32]
 800b238:	68b9      	ldr	r1, [r7, #8]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f004 fcf8 	bl	800fc30 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	429a      	cmp	r2, r3
 800b246:	d91c      	bls.n	800b282 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	1ad2      	subs	r2, r2, r3
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	429a      	cmp	r2, r3
 800b254:	d90a      	bls.n	800b26c <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	617b      	str	r3, [r7, #20]
}
 800b268:	bf00      	nop
 800b26a:	e7fe      	b.n	800b26a <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6998      	ldr	r0, [r3, #24]
 800b270:	68ba      	ldr	r2, [r7, #8]
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	18d1      	adds	r1, r2, r3
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	6a3b      	ldr	r3, [r7, #32]
 800b27a:	1ad3      	subs	r3, r2, r3
 800b27c:	461a      	mov	r2, r3
 800b27e:	f004 fcd7 	bl	800fc30 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800b282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4413      	add	r3, r2
 800b288:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b290:	429a      	cmp	r2, r3
 800b292:	d304      	bcc.n	800b29e <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b29a:	1ad3      	subs	r3, r2, r3
 800b29c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2a2:	605a      	str	r2, [r3, #4]

	return xCount;
 800b2a4:	687b      	ldr	r3, [r7, #4]
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3728      	adds	r7, #40	; 0x28
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800b2ae:	b580      	push	{r7, lr}
 800b2b0:	b08a      	sub	sp, #40	; 0x28
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	60f8      	str	r0, [r7, #12]
 800b2b6:	60b9      	str	r1, [r7, #8]
 800b2b8:	607a      	str	r2, [r7, #4]
 800b2ba:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	bf28      	it	cs
 800b2c4:	4613      	movcs	r3, r2
 800b2c6:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800b2c8:	6a3b      	ldr	r3, [r7, #32]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d064      	beq.n	800b398 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	689a      	ldr	r2, [r3, #8]
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2da:	1ad3      	subs	r3, r2, r3
 800b2dc:	6a3a      	ldr	r2, [r7, #32]
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	bf28      	it	cs
 800b2e2:	4613      	movcs	r3, r2
 800b2e4:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800b2e6:	69fa      	ldr	r2, [r7, #28]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d90a      	bls.n	800b304 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800b2ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f2:	f383 8811 	msr	BASEPRI, r3
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	61bb      	str	r3, [r7, #24]
}
 800b300:	bf00      	nop
 800b302:	e7fe      	b.n	800b302 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800b304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	441a      	add	r2, r3
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	689b      	ldr	r3, [r3, #8]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d90a      	bls.n	800b328 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800b312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b316:	f383 8811 	msr	BASEPRI, r3
 800b31a:	f3bf 8f6f 	isb	sy
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	617b      	str	r3, [r7, #20]
}
 800b324:	bf00      	nop
 800b326:	e7fe      	b.n	800b326 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	699a      	ldr	r2, [r3, #24]
 800b32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32e:	4413      	add	r3, r2
 800b330:	69fa      	ldr	r2, [r7, #28]
 800b332:	4619      	mov	r1, r3
 800b334:	68b8      	ldr	r0, [r7, #8]
 800b336:	f004 fc7b 	bl	800fc30 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800b33a:	6a3a      	ldr	r2, [r7, #32]
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d919      	bls.n	800b376 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800b342:	6a3a      	ldr	r2, [r7, #32]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	429a      	cmp	r2, r3
 800b348:	d90a      	bls.n	800b360 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800b34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34e:	f383 8811 	msr	BASEPRI, r3
 800b352:	f3bf 8f6f 	isb	sy
 800b356:	f3bf 8f4f 	dsb	sy
 800b35a:	613b      	str	r3, [r7, #16]
}
 800b35c:	bf00      	nop
 800b35e:	e7fe      	b.n	800b35e <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	18d0      	adds	r0, r2, r3
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6999      	ldr	r1, [r3, #24]
 800b36a:	6a3a      	ldr	r2, [r7, #32]
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	461a      	mov	r2, r3
 800b372:	f004 fc5d 	bl	800fc30 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800b376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	4413      	add	r3, r2
 800b37c:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b384:	429a      	cmp	r2, r3
 800b386:	d304      	bcc.n	800b392 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b38e:	1ad3      	subs	r3, r2, r3
 800b390:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b396:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800b398:	6a3b      	ldr	r3, [r7, #32]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3728      	adds	r7, #40	; 0x28
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b085      	sub	sp, #20
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	689a      	ldr	r2, [r3, #8]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	685b      	ldr	r3, [r3, #4]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	1ad3      	subs	r3, r2, r3
 800b3be:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	68fa      	ldr	r2, [r7, #12]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d304      	bcc.n	800b3d4 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	68fa      	ldr	r2, [r7, #12]
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800b3e2:	b580      	push	{r7, lr}
 800b3e4:	b086      	sub	sp, #24
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	60f8      	str	r0, [r7, #12]
 800b3ea:	60b9      	str	r1, [r7, #8]
 800b3ec:	607a      	str	r2, [r7, #4]
 800b3ee:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800b3f0:	2355      	movs	r3, #85	; 0x55
 800b3f2:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	6979      	ldr	r1, [r7, #20]
 800b3f8:	68b8      	ldr	r0, [r7, #8]
 800b3fa:	f004 fc27 	bl	800fc4c <memset>
 800b3fe:	4602      	mov	r2, r0
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	4293      	cmp	r3, r2
 800b404:	d00a      	beq.n	800b41c <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800b406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40a:	f383 8811 	msr	BASEPRI, r3
 800b40e:	f3bf 8f6f 	isb	sy
 800b412:	f3bf 8f4f 	dsb	sy
 800b416:	613b      	str	r3, [r7, #16]
}
 800b418:	bf00      	nop
 800b41a:	e7fe      	b.n	800b41a <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800b41c:	2224      	movs	r2, #36	; 0x24
 800b41e:	2100      	movs	r1, #0
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f004 fc13 	bl	800fc4c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	68ba      	ldr	r2, [r7, #8]
 800b42a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	683a      	ldr	r2, [r7, #0]
 800b436:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b43e:	771a      	strb	r2, [r3, #28]
}
 800b440:	bf00      	nop
 800b442:	3718      	adds	r7, #24
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b08e      	sub	sp, #56	; 0x38
 800b44c:	af04      	add	r7, sp, #16
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
 800b454:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d10a      	bne.n	800b472 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b460:	f383 8811 	msr	BASEPRI, r3
 800b464:	f3bf 8f6f 	isb	sy
 800b468:	f3bf 8f4f 	dsb	sy
 800b46c:	623b      	str	r3, [r7, #32]
}
 800b46e:	bf00      	nop
 800b470:	e7fe      	b.n	800b470 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b474:	2b00      	cmp	r3, #0
 800b476:	d10a      	bne.n	800b48e <xTaskCreateStatic+0x46>
	__asm volatile
 800b478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	61fb      	str	r3, [r7, #28]
}
 800b48a:	bf00      	nop
 800b48c:	e7fe      	b.n	800b48c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b48e:	23cc      	movs	r3, #204	; 0xcc
 800b490:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	2bcc      	cmp	r3, #204	; 0xcc
 800b496:	d00a      	beq.n	800b4ae <xTaskCreateStatic+0x66>
	__asm volatile
 800b498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b49c:	f383 8811 	msr	BASEPRI, r3
 800b4a0:	f3bf 8f6f 	isb	sy
 800b4a4:	f3bf 8f4f 	dsb	sy
 800b4a8:	61bb      	str	r3, [r7, #24]
}
 800b4aa:	bf00      	nop
 800b4ac:	e7fe      	b.n	800b4ac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b4ae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d01e      	beq.n	800b4f4 <xTaskCreateStatic+0xac>
 800b4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d01b      	beq.n	800b4f4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4be:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b4c4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c8:	2202      	movs	r2, #2
 800b4ca:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	9303      	str	r3, [sp, #12]
 800b4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d4:	9302      	str	r3, [sp, #8]
 800b4d6:	f107 0314 	add.w	r3, r7, #20
 800b4da:	9301      	str	r3, [sp, #4]
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4de:	9300      	str	r3, [sp, #0]
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	68b9      	ldr	r1, [r7, #8]
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f000 f850 	bl	800b58c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b4ee:	f000 f8f3 	bl	800b6d8 <prvAddNewTaskToReadyList>
 800b4f2:	e001      	b.n	800b4f8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b4f8:	697b      	ldr	r3, [r7, #20]
	}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3728      	adds	r7, #40	; 0x28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b502:	b580      	push	{r7, lr}
 800b504:	b08c      	sub	sp, #48	; 0x30
 800b506:	af04      	add	r7, sp, #16
 800b508:	60f8      	str	r0, [r7, #12]
 800b50a:	60b9      	str	r1, [r7, #8]
 800b50c:	603b      	str	r3, [r7, #0]
 800b50e:	4613      	mov	r3, r2
 800b510:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b512:	88fb      	ldrh	r3, [r7, #6]
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	4618      	mov	r0, r3
 800b518:	f002 fb1e 	bl	800db58 <pvPortMalloc>
 800b51c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d00e      	beq.n	800b542 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b524:	20cc      	movs	r0, #204	; 0xcc
 800b526:	f002 fb17 	bl	800db58 <pvPortMalloc>
 800b52a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d003      	beq.n	800b53a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	697a      	ldr	r2, [r7, #20]
 800b536:	631a      	str	r2, [r3, #48]	; 0x30
 800b538:	e005      	b.n	800b546 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b53a:	6978      	ldr	r0, [r7, #20]
 800b53c:	f002 fbd8 	bl	800dcf0 <vPortFree>
 800b540:	e001      	b.n	800b546 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b542:	2300      	movs	r3, #0
 800b544:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d017      	beq.n	800b57c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	2200      	movs	r2, #0
 800b550:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b554:	88fa      	ldrh	r2, [r7, #6]
 800b556:	2300      	movs	r3, #0
 800b558:	9303      	str	r3, [sp, #12]
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	9302      	str	r3, [sp, #8]
 800b55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b560:	9301      	str	r3, [sp, #4]
 800b562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b564:	9300      	str	r3, [sp, #0]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	68b9      	ldr	r1, [r7, #8]
 800b56a:	68f8      	ldr	r0, [r7, #12]
 800b56c:	f000 f80e 	bl	800b58c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b570:	69f8      	ldr	r0, [r7, #28]
 800b572:	f000 f8b1 	bl	800b6d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b576:	2301      	movs	r3, #1
 800b578:	61bb      	str	r3, [r7, #24]
 800b57a:	e002      	b.n	800b582 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b57c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b580:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b582:	69bb      	ldr	r3, [r7, #24]
	}
 800b584:	4618      	mov	r0, r3
 800b586:	3720      	adds	r7, #32
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b088      	sub	sp, #32
 800b590:	af00      	add	r7, sp, #0
 800b592:	60f8      	str	r0, [r7, #12]
 800b594:	60b9      	str	r1, [r7, #8]
 800b596:	607a      	str	r2, [r7, #4]
 800b598:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	21a5      	movs	r1, #165	; 0xa5
 800b5a6:	f004 fb51 	bl	800fc4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b5b4:	3b01      	subs	r3, #1
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	4413      	add	r3, r2
 800b5ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	f023 0307 	bic.w	r3, r3, #7
 800b5c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	f003 0307 	and.w	r3, r3, #7
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00a      	beq.n	800b5e4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	617b      	str	r3, [r7, #20]
}
 800b5e0:	bf00      	nop
 800b5e2:	e7fe      	b.n	800b5e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d01f      	beq.n	800b62a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	61fb      	str	r3, [r7, #28]
 800b5ee:	e012      	b.n	800b616 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b5f0:	68ba      	ldr	r2, [r7, #8]
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	7819      	ldrb	r1, [r3, #0]
 800b5f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	3334      	adds	r3, #52	; 0x34
 800b600:	460a      	mov	r2, r1
 800b602:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b604:	68ba      	ldr	r2, [r7, #8]
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	4413      	add	r3, r2
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d006      	beq.n	800b61e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b610:	69fb      	ldr	r3, [r7, #28]
 800b612:	3301      	adds	r3, #1
 800b614:	61fb      	str	r3, [r7, #28]
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	2b1f      	cmp	r3, #31
 800b61a:	d9e9      	bls.n	800b5f0 <prvInitialiseNewTask+0x64>
 800b61c:	e000      	b.n	800b620 <prvInitialiseNewTask+0x94>
			{
				break;
 800b61e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b622:	2200      	movs	r2, #0
 800b624:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800b628:	e003      	b.n	800b632 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b62c:	2200      	movs	r2, #0
 800b62e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b634:	2b37      	cmp	r3, #55	; 0x37
 800b636:	d901      	bls.n	800b63c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b638:	2337      	movs	r3, #55	; 0x37
 800b63a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b63e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b640:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b646:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800b648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64a:	2200      	movs	r2, #0
 800b64c:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	3304      	adds	r3, #4
 800b652:	4618      	mov	r0, r3
 800b654:	f7fe fc4c 	bl	8009ef0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65a:	3318      	adds	r3, #24
 800b65c:	4618      	mov	r0, r3
 800b65e:	f7fe fc47 	bl	8009ef0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b666:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b66a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b670:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b676:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67a:	2200      	movs	r2, #0
 800b67c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b682:	2200      	movs	r2, #0
 800b684:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b68a:	3364      	adds	r3, #100	; 0x64
 800b68c:	2260      	movs	r2, #96	; 0x60
 800b68e:	2100      	movs	r1, #0
 800b690:	4618      	mov	r0, r3
 800b692:	f004 fadb 	bl	800fc4c <memset>
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	4a0c      	ldr	r2, [pc, #48]	; (800b6cc <prvInitialiseNewTask+0x140>)
 800b69a:	669a      	str	r2, [r3, #104]	; 0x68
 800b69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b69e:	4a0c      	ldr	r2, [pc, #48]	; (800b6d0 <prvInitialiseNewTask+0x144>)
 800b6a0:	66da      	str	r2, [r3, #108]	; 0x6c
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a4:	4a0b      	ldr	r2, [pc, #44]	; (800b6d4 <prvInitialiseNewTask+0x148>)
 800b6a6:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b6a8:	683a      	ldr	r2, [r7, #0]
 800b6aa:	68f9      	ldr	r1, [r7, #12]
 800b6ac:	69b8      	ldr	r0, [r7, #24]
 800b6ae:	f002 f801 	bl	800d6b4 <pxPortInitialiseStack>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d002      	beq.n	800b6c4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6c2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6c4:	bf00      	nop
 800b6c6:	3720      	adds	r7, #32
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	08011b60 	.word	0x08011b60
 800b6d0:	08011b80 	.word	0x08011b80
 800b6d4:	08011b40 	.word	0x08011b40

0800b6d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b6e0:	f002 f918 	bl	800d914 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b6e4:	4b2d      	ldr	r3, [pc, #180]	; (800b79c <prvAddNewTaskToReadyList+0xc4>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	4a2c      	ldr	r2, [pc, #176]	; (800b79c <prvAddNewTaskToReadyList+0xc4>)
 800b6ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b6ee:	4b2c      	ldr	r3, [pc, #176]	; (800b7a0 <prvAddNewTaskToReadyList+0xc8>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d109      	bne.n	800b70a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b6f6:	4a2a      	ldr	r2, [pc, #168]	; (800b7a0 <prvAddNewTaskToReadyList+0xc8>)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b6fc:	4b27      	ldr	r3, [pc, #156]	; (800b79c <prvAddNewTaskToReadyList+0xc4>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d110      	bne.n	800b726 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b704:	f000 fe20 	bl	800c348 <prvInitialiseTaskLists>
 800b708:	e00d      	b.n	800b726 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b70a:	4b26      	ldr	r3, [pc, #152]	; (800b7a4 <prvAddNewTaskToReadyList+0xcc>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d109      	bne.n	800b726 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b712:	4b23      	ldr	r3, [pc, #140]	; (800b7a0 <prvAddNewTaskToReadyList+0xc8>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d802      	bhi.n	800b726 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b720:	4a1f      	ldr	r2, [pc, #124]	; (800b7a0 <prvAddNewTaskToReadyList+0xc8>)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b726:	4b20      	ldr	r3, [pc, #128]	; (800b7a8 <prvAddNewTaskToReadyList+0xd0>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	3301      	adds	r3, #1
 800b72c:	4a1e      	ldr	r2, [pc, #120]	; (800b7a8 <prvAddNewTaskToReadyList+0xd0>)
 800b72e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b730:	4b1d      	ldr	r3, [pc, #116]	; (800b7a8 <prvAddNewTaskToReadyList+0xd0>)
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b73c:	4b1b      	ldr	r3, [pc, #108]	; (800b7ac <prvAddNewTaskToReadyList+0xd4>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	429a      	cmp	r2, r3
 800b742:	d903      	bls.n	800b74c <prvAddNewTaskToReadyList+0x74>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b748:	4a18      	ldr	r2, [pc, #96]	; (800b7ac <prvAddNewTaskToReadyList+0xd4>)
 800b74a:	6013      	str	r3, [r2, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b750:	4613      	mov	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	4413      	add	r3, r2
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4a15      	ldr	r2, [pc, #84]	; (800b7b0 <prvAddNewTaskToReadyList+0xd8>)
 800b75a:	441a      	add	r2, r3
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3304      	adds	r3, #4
 800b760:	4619      	mov	r1, r3
 800b762:	4610      	mov	r0, r2
 800b764:	f7fe fbd1 	bl	8009f0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b768:	f002 f904 	bl	800d974 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b76c:	4b0d      	ldr	r3, [pc, #52]	; (800b7a4 <prvAddNewTaskToReadyList+0xcc>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00e      	beq.n	800b792 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b774:	4b0a      	ldr	r3, [pc, #40]	; (800b7a0 <prvAddNewTaskToReadyList+0xc8>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b77e:	429a      	cmp	r2, r3
 800b780:	d207      	bcs.n	800b792 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b782:	4b0c      	ldr	r3, [pc, #48]	; (800b7b4 <prvAddNewTaskToReadyList+0xdc>)
 800b784:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b788:	601a      	str	r2, [r3, #0]
 800b78a:	f3bf 8f4f 	dsb	sy
 800b78e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b792:	bf00      	nop
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	20001da4 	.word	0x20001da4
 800b7a0:	200018d0 	.word	0x200018d0
 800b7a4:	20001db0 	.word	0x20001db0
 800b7a8:	20001dc0 	.word	0x20001dc0
 800b7ac:	20001dac 	.word	0x20001dac
 800b7b0:	200018d4 	.word	0x200018d4
 800b7b4:	e000ed04 	.word	0xe000ed04

0800b7b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d017      	beq.n	800b7fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b7ca:	4b13      	ldr	r3, [pc, #76]	; (800b818 <vTaskDelay+0x60>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00a      	beq.n	800b7e8 <vTaskDelay+0x30>
	__asm volatile
 800b7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d6:	f383 8811 	msr	BASEPRI, r3
 800b7da:	f3bf 8f6f 	isb	sy
 800b7de:	f3bf 8f4f 	dsb	sy
 800b7e2:	60bb      	str	r3, [r7, #8]
}
 800b7e4:	bf00      	nop
 800b7e6:	e7fe      	b.n	800b7e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b7e8:	f000 f9f6 	bl	800bbd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	6878      	ldr	r0, [r7, #4]
 800b7f0:	f001 fbbe 	bl	800cf70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b7f4:	f000 f9fe 	bl	800bbf4 <xTaskResumeAll>
 800b7f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d107      	bne.n	800b810 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b800:	4b06      	ldr	r3, [pc, #24]	; (800b81c <vTaskDelay+0x64>)
 800b802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b806:	601a      	str	r2, [r3, #0]
 800b808:	f3bf 8f4f 	dsb	sy
 800b80c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b810:	bf00      	nop
 800b812:	3710      	adds	r7, #16
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}
 800b818:	20001dcc 	.word	0x20001dcc
 800b81c:	e000ed04 	.word	0xe000ed04

0800b820 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800b820:	b580      	push	{r7, lr}
 800b822:	b088      	sub	sp, #32
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800b82c:	69bb      	ldr	r3, [r7, #24]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d10a      	bne.n	800b848 <eTaskGetState+0x28>
	__asm volatile
 800b832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b836:	f383 8811 	msr	BASEPRI, r3
 800b83a:	f3bf 8f6f 	isb	sy
 800b83e:	f3bf 8f4f 	dsb	sy
 800b842:	60bb      	str	r3, [r7, #8]
}
 800b844:	bf00      	nop
 800b846:	e7fe      	b.n	800b846 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800b848:	4b23      	ldr	r3, [pc, #140]	; (800b8d8 <eTaskGetState+0xb8>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	69ba      	ldr	r2, [r7, #24]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d102      	bne.n	800b858 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800b852:	2300      	movs	r3, #0
 800b854:	77fb      	strb	r3, [r7, #31]
 800b856:	e03a      	b.n	800b8ce <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800b858:	f002 f85c 	bl	800d914 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	695b      	ldr	r3, [r3, #20]
 800b860:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800b862:	4b1e      	ldr	r3, [pc, #120]	; (800b8dc <eTaskGetState+0xbc>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800b868:	4b1d      	ldr	r3, [pc, #116]	; (800b8e0 <eTaskGetState+0xc0>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800b86e:	f002 f881 	bl	800d974 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800b872:	697a      	ldr	r2, [r7, #20]
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	429a      	cmp	r2, r3
 800b878:	d003      	beq.n	800b882 <eTaskGetState+0x62>
 800b87a:	697a      	ldr	r2, [r7, #20]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d102      	bne.n	800b888 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800b882:	2302      	movs	r3, #2
 800b884:	77fb      	strb	r3, [r7, #31]
 800b886:	e022      	b.n	800b8ce <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	4a16      	ldr	r2, [pc, #88]	; (800b8e4 <eTaskGetState+0xc4>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d112      	bne.n	800b8b6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800b890:	69bb      	ldr	r3, [r7, #24]
 800b892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10b      	bne.n	800b8b0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b898:	69bb      	ldr	r3, [r7, #24]
 800b89a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d102      	bne.n	800b8aa <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	77fb      	strb	r3, [r7, #31]
 800b8a8:	e011      	b.n	800b8ce <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	77fb      	strb	r3, [r7, #31]
 800b8ae:	e00e      	b.n	800b8ce <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800b8b0:	2302      	movs	r3, #2
 800b8b2:	77fb      	strb	r3, [r7, #31]
 800b8b4:	e00b      	b.n	800b8ce <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	4a0b      	ldr	r2, [pc, #44]	; (800b8e8 <eTaskGetState+0xc8>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d002      	beq.n	800b8c4 <eTaskGetState+0xa4>
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d102      	bne.n	800b8ca <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800b8c4:	2304      	movs	r3, #4
 800b8c6:	77fb      	strb	r3, [r7, #31]
 800b8c8:	e001      	b.n	800b8ce <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800b8ce:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3720      	adds	r7, #32
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}
 800b8d8:	200018d0 	.word	0x200018d0
 800b8dc:	20001d5c 	.word	0x20001d5c
 800b8e0:	20001d60 	.word	0x20001d60
 800b8e4:	20001d90 	.word	0x20001d90
 800b8e8:	20001d78 	.word	0x20001d78

0800b8ec <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800b8f4:	f002 f80e 	bl	800d914 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d102      	bne.n	800b904 <vTaskSuspend+0x18>
 800b8fe:	4b30      	ldr	r3, [pc, #192]	; (800b9c0 <vTaskSuspend+0xd4>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	e000      	b.n	800b906 <vTaskSuspend+0x1a>
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	3304      	adds	r3, #4
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7fe fb59 	bl	8009fc4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b916:	2b00      	cmp	r3, #0
 800b918:	d004      	beq.n	800b924 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3318      	adds	r3, #24
 800b91e:	4618      	mov	r0, r3
 800b920:	f7fe fb50 	bl	8009fc4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	3304      	adds	r3, #4
 800b928:	4619      	mov	r1, r3
 800b92a:	4826      	ldr	r0, [pc, #152]	; (800b9c4 <vTaskSuspend+0xd8>)
 800b92c:	f7fe faed 	bl	8009f0a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d103      	bne.n	800b944 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2200      	movs	r2, #0
 800b940:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800b944:	f002 f816 	bl	800d974 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800b948:	4b1f      	ldr	r3, [pc, #124]	; (800b9c8 <vTaskSuspend+0xdc>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d005      	beq.n	800b95c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800b950:	f001 ffe0 	bl	800d914 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800b954:	f000 fe6e 	bl	800c634 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800b958:	f002 f80c 	bl	800d974 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800b95c:	4b18      	ldr	r3, [pc, #96]	; (800b9c0 <vTaskSuspend+0xd4>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	429a      	cmp	r2, r3
 800b964:	d127      	bne.n	800b9b6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800b966:	4b18      	ldr	r3, [pc, #96]	; (800b9c8 <vTaskSuspend+0xdc>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d017      	beq.n	800b99e <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800b96e:	4b17      	ldr	r3, [pc, #92]	; (800b9cc <vTaskSuspend+0xe0>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00a      	beq.n	800b98c <vTaskSuspend+0xa0>
	__asm volatile
 800b976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97a:	f383 8811 	msr	BASEPRI, r3
 800b97e:	f3bf 8f6f 	isb	sy
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	60bb      	str	r3, [r7, #8]
}
 800b988:	bf00      	nop
 800b98a:	e7fe      	b.n	800b98a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800b98c:	4b10      	ldr	r3, [pc, #64]	; (800b9d0 <vTaskSuspend+0xe4>)
 800b98e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b992:	601a      	str	r2, [r3, #0]
 800b994:	f3bf 8f4f 	dsb	sy
 800b998:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b99c:	e00b      	b.n	800b9b6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800b99e:	4b09      	ldr	r3, [pc, #36]	; (800b9c4 <vTaskSuspend+0xd8>)
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	4b0c      	ldr	r3, [pc, #48]	; (800b9d4 <vTaskSuspend+0xe8>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d103      	bne.n	800b9b2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 800b9aa:	4b05      	ldr	r3, [pc, #20]	; (800b9c0 <vTaskSuspend+0xd4>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	601a      	str	r2, [r3, #0]
	}
 800b9b0:	e001      	b.n	800b9b6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800b9b2:	f000 fb15 	bl	800bfe0 <vTaskSwitchContext>
	}
 800b9b6:	bf00      	nop
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	200018d0 	.word	0x200018d0
 800b9c4:	20001d90 	.word	0x20001d90
 800b9c8:	20001db0 	.word	0x20001db0
 800b9cc:	20001dcc 	.word	0x20001dcc
 800b9d0:	e000ed04 	.word	0xe000ed04
 800b9d4:	20001da4 	.word	0x20001da4

0800b9d8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800b9d8:	b480      	push	{r7}
 800b9da:	b087      	sub	sp, #28
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d10a      	bne.n	800ba04 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800b9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	60fb      	str	r3, [r7, #12]
}
 800ba00:	bf00      	nop
 800ba02:	e7fe      	b.n	800ba02 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	695b      	ldr	r3, [r3, #20]
 800ba08:	4a0a      	ldr	r2, [pc, #40]	; (800ba34 <prvTaskIsTaskSuspended+0x5c>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d10a      	bne.n	800ba24 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba12:	4a09      	ldr	r2, [pc, #36]	; (800ba38 <prvTaskIsTaskSuspended+0x60>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d005      	beq.n	800ba24 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d101      	bne.n	800ba24 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800ba20:	2301      	movs	r3, #1
 800ba22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba24:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ba26:	4618      	mov	r0, r3
 800ba28:	371c      	adds	r7, #28
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr
 800ba32:	bf00      	nop
 800ba34:	20001d90 	.word	0x20001d90
 800ba38:	20001d64 	.word	0x20001d64

0800ba3c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d10a      	bne.n	800ba64 <vTaskResume+0x28>
	__asm volatile
 800ba4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	60bb      	str	r3, [r7, #8]
}
 800ba60:	bf00      	nop
 800ba62:	e7fe      	b.n	800ba62 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800ba64:	4b20      	ldr	r3, [pc, #128]	; (800bae8 <vTaskResume+0xac>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d038      	beq.n	800bae0 <vTaskResume+0xa4>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d035      	beq.n	800bae0 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 800ba74:	f001 ff4e 	bl	800d914 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f7ff ffad 	bl	800b9d8 <prvTaskIsTaskSuspended>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d02b      	beq.n	800badc <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	3304      	adds	r3, #4
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f7fe fa9b 	bl	8009fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba92:	4b16      	ldr	r3, [pc, #88]	; (800baec <vTaskResume+0xb0>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d903      	bls.n	800baa2 <vTaskResume+0x66>
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9e:	4a13      	ldr	r2, [pc, #76]	; (800baec <vTaskResume+0xb0>)
 800baa0:	6013      	str	r3, [r2, #0]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baa6:	4613      	mov	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	4a10      	ldr	r2, [pc, #64]	; (800baf0 <vTaskResume+0xb4>)
 800bab0:	441a      	add	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	3304      	adds	r3, #4
 800bab6:	4619      	mov	r1, r3
 800bab8:	4610      	mov	r0, r2
 800baba:	f7fe fa26 	bl	8009f0a <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac2:	4b09      	ldr	r3, [pc, #36]	; (800bae8 <vTaskResume+0xac>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac8:	429a      	cmp	r2, r3
 800baca:	d307      	bcc.n	800badc <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800bacc:	4b09      	ldr	r3, [pc, #36]	; (800baf4 <vTaskResume+0xb8>)
 800bace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800badc:	f001 ff4a 	bl	800d974 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bae0:	bf00      	nop
 800bae2:	3710      	adds	r7, #16
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	200018d0 	.word	0x200018d0
 800baec:	20001dac 	.word	0x20001dac
 800baf0:	200018d4 	.word	0x200018d4
 800baf4:	e000ed04 	.word	0xe000ed04

0800baf8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b08a      	sub	sp, #40	; 0x28
 800bafc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bafe:	2300      	movs	r3, #0
 800bb00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb02:	2300      	movs	r3, #0
 800bb04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb06:	463a      	mov	r2, r7
 800bb08:	1d39      	adds	r1, r7, #4
 800bb0a:	f107 0308 	add.w	r3, r7, #8
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f7fe f99a 	bl	8009e48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb14:	6839      	ldr	r1, [r7, #0]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	9202      	str	r2, [sp, #8]
 800bb1c:	9301      	str	r3, [sp, #4]
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	2300      	movs	r3, #0
 800bb24:	460a      	mov	r2, r1
 800bb26:	4924      	ldr	r1, [pc, #144]	; (800bbb8 <vTaskStartScheduler+0xc0>)
 800bb28:	4824      	ldr	r0, [pc, #144]	; (800bbbc <vTaskStartScheduler+0xc4>)
 800bb2a:	f7ff fc8d 	bl	800b448 <xTaskCreateStatic>
 800bb2e:	4603      	mov	r3, r0
 800bb30:	4a23      	ldr	r2, [pc, #140]	; (800bbc0 <vTaskStartScheduler+0xc8>)
 800bb32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb34:	4b22      	ldr	r3, [pc, #136]	; (800bbc0 <vTaskStartScheduler+0xc8>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	617b      	str	r3, [r7, #20]
 800bb40:	e001      	b.n	800bb46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bb42:	2300      	movs	r3, #0
 800bb44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	2b01      	cmp	r3, #1
 800bb4a:	d102      	bne.n	800bb52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bb4c:	f001 fa64 	bl	800d018 <xTimerCreateTimerTask>
 800bb50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d11b      	bne.n	800bb90 <vTaskStartScheduler+0x98>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5c:	f383 8811 	msr	BASEPRI, r3
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	613b      	str	r3, [r7, #16]
}
 800bb6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bb6c:	4b15      	ldr	r3, [pc, #84]	; (800bbc4 <vTaskStartScheduler+0xcc>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	3364      	adds	r3, #100	; 0x64
 800bb72:	4a15      	ldr	r2, [pc, #84]	; (800bbc8 <vTaskStartScheduler+0xd0>)
 800bb74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bb76:	4b15      	ldr	r3, [pc, #84]	; (800bbcc <vTaskStartScheduler+0xd4>)
 800bb78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bb7e:	4b14      	ldr	r3, [pc, #80]	; (800bbd0 <vTaskStartScheduler+0xd8>)
 800bb80:	2201      	movs	r2, #1
 800bb82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bb84:	4b13      	ldr	r3, [pc, #76]	; (800bbd4 <vTaskStartScheduler+0xdc>)
 800bb86:	2200      	movs	r2, #0
 800bb88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bb8a:	f001 fe21 	bl	800d7d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bb8e:	e00e      	b.n	800bbae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb96:	d10a      	bne.n	800bbae <vTaskStartScheduler+0xb6>
	__asm volatile
 800bb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9c:	f383 8811 	msr	BASEPRI, r3
 800bba0:	f3bf 8f6f 	isb	sy
 800bba4:	f3bf 8f4f 	dsb	sy
 800bba8:	60fb      	str	r3, [r7, #12]
}
 800bbaa:	bf00      	nop
 800bbac:	e7fe      	b.n	800bbac <vTaskStartScheduler+0xb4>
}
 800bbae:	bf00      	nop
 800bbb0:	3718      	adds	r7, #24
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	08010e90 	.word	0x08010e90
 800bbbc:	0800c319 	.word	0x0800c319
 800bbc0:	20001dc8 	.word	0x20001dc8
 800bbc4:	200018d0 	.word	0x200018d0
 800bbc8:	2000010c 	.word	0x2000010c
 800bbcc:	20001dc4 	.word	0x20001dc4
 800bbd0:	20001db0 	.word	0x20001db0
 800bbd4:	20001da8 	.word	0x20001da8

0800bbd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bbd8:	b480      	push	{r7}
 800bbda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bbdc:	4b04      	ldr	r3, [pc, #16]	; (800bbf0 <vTaskSuspendAll+0x18>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	4a03      	ldr	r2, [pc, #12]	; (800bbf0 <vTaskSuspendAll+0x18>)
 800bbe4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bbe6:	bf00      	nop
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr
 800bbf0:	20001dcc 	.word	0x20001dcc

0800bbf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc02:	4b42      	ldr	r3, [pc, #264]	; (800bd0c <xTaskResumeAll+0x118>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10a      	bne.n	800bc20 <xTaskResumeAll+0x2c>
	__asm volatile
 800bc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0e:	f383 8811 	msr	BASEPRI, r3
 800bc12:	f3bf 8f6f 	isb	sy
 800bc16:	f3bf 8f4f 	dsb	sy
 800bc1a:	603b      	str	r3, [r7, #0]
}
 800bc1c:	bf00      	nop
 800bc1e:	e7fe      	b.n	800bc1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc20:	f001 fe78 	bl	800d914 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc24:	4b39      	ldr	r3, [pc, #228]	; (800bd0c <xTaskResumeAll+0x118>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	4a38      	ldr	r2, [pc, #224]	; (800bd0c <xTaskResumeAll+0x118>)
 800bc2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc2e:	4b37      	ldr	r3, [pc, #220]	; (800bd0c <xTaskResumeAll+0x118>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d162      	bne.n	800bcfc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc36:	4b36      	ldr	r3, [pc, #216]	; (800bd10 <xTaskResumeAll+0x11c>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d05e      	beq.n	800bcfc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc3e:	e02f      	b.n	800bca0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc40:	4b34      	ldr	r3, [pc, #208]	; (800bd14 <xTaskResumeAll+0x120>)
 800bc42:	68db      	ldr	r3, [r3, #12]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	3318      	adds	r3, #24
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f7fe f9b9 	bl	8009fc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	3304      	adds	r3, #4
 800bc56:	4618      	mov	r0, r3
 800bc58:	f7fe f9b4 	bl	8009fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc60:	4b2d      	ldr	r3, [pc, #180]	; (800bd18 <xTaskResumeAll+0x124>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d903      	bls.n	800bc70 <xTaskResumeAll+0x7c>
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc6c:	4a2a      	ldr	r2, [pc, #168]	; (800bd18 <xTaskResumeAll+0x124>)
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc74:	4613      	mov	r3, r2
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4413      	add	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4a27      	ldr	r2, [pc, #156]	; (800bd1c <xTaskResumeAll+0x128>)
 800bc7e:	441a      	add	r2, r3
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	3304      	adds	r3, #4
 800bc84:	4619      	mov	r1, r3
 800bc86:	4610      	mov	r0, r2
 800bc88:	f7fe f93f 	bl	8009f0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc90:	4b23      	ldr	r3, [pc, #140]	; (800bd20 <xTaskResumeAll+0x12c>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d302      	bcc.n	800bca0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bc9a:	4b22      	ldr	r3, [pc, #136]	; (800bd24 <xTaskResumeAll+0x130>)
 800bc9c:	2201      	movs	r2, #1
 800bc9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bca0:	4b1c      	ldr	r3, [pc, #112]	; (800bd14 <xTaskResumeAll+0x120>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d1cb      	bne.n	800bc40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d001      	beq.n	800bcb2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bcae:	f000 fcc1 	bl	800c634 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bcb2:	4b1d      	ldr	r3, [pc, #116]	; (800bd28 <xTaskResumeAll+0x134>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d010      	beq.n	800bce0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bcbe:	f000 f8d5 	bl	800be6c <xTaskIncrementTick>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d002      	beq.n	800bcce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bcc8:	4b16      	ldr	r3, [pc, #88]	; (800bd24 <xTaskResumeAll+0x130>)
 800bcca:	2201      	movs	r2, #1
 800bccc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d1f1      	bne.n	800bcbe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bcda:	4b13      	ldr	r3, [pc, #76]	; (800bd28 <xTaskResumeAll+0x134>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bce0:	4b10      	ldr	r3, [pc, #64]	; (800bd24 <xTaskResumeAll+0x130>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d009      	beq.n	800bcfc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bce8:	2301      	movs	r3, #1
 800bcea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bcec:	4b0f      	ldr	r3, [pc, #60]	; (800bd2c <xTaskResumeAll+0x138>)
 800bcee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcf2:	601a      	str	r2, [r3, #0]
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bcfc:	f001 fe3a 	bl	800d974 <vPortExitCritical>

	return xAlreadyYielded;
 800bd00:	68bb      	ldr	r3, [r7, #8]
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	20001dcc 	.word	0x20001dcc
 800bd10:	20001da4 	.word	0x20001da4
 800bd14:	20001d64 	.word	0x20001d64
 800bd18:	20001dac 	.word	0x20001dac
 800bd1c:	200018d4 	.word	0x200018d4
 800bd20:	200018d0 	.word	0x200018d0
 800bd24:	20001db8 	.word	0x20001db8
 800bd28:	20001db4 	.word	0x20001db4
 800bd2c:	e000ed04 	.word	0xe000ed04

0800bd30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bd36:	4b05      	ldr	r3, [pc, #20]	; (800bd4c <xTaskGetTickCount+0x1c>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bd3c:	687b      	ldr	r3, [r7, #4]
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	370c      	adds	r7, #12
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	20001da8 	.word	0x20001da8

0800bd50 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	2338      	movs	r3, #56	; 0x38
 800bd62:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800bd64:	f7ff ff38 	bl	800bbd8 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800bd68:	4b3a      	ldr	r3, [pc, #232]	; (800be54 <uxTaskGetSystemState+0x104>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	68ba      	ldr	r2, [r7, #8]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d368      	bcc.n	800be44 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	3b01      	subs	r3, #1
 800bd76:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800bd78:	697a      	ldr	r2, [r7, #20]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	00db      	lsls	r3, r3, #3
 800bd7e:	4413      	add	r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	461a      	mov	r2, r3
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	1898      	adds	r0, r3, r2
 800bd88:	693a      	ldr	r2, [r7, #16]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4413      	add	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4a31      	ldr	r2, [pc, #196]	; (800be58 <uxTaskGetSystemState+0x108>)
 800bd94:	4413      	add	r3, r2
 800bd96:	2201      	movs	r2, #1
 800bd98:	4619      	mov	r1, r3
 800bd9a:	f000 fba9 	bl	800c4f0 <prvListTasksWithinSingleList>
 800bd9e:	4602      	mov	r2, r0
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	4413      	add	r3, r2
 800bda4:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d1e2      	bne.n	800bd72 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800bdac:	697a      	ldr	r2, [r7, #20]
 800bdae:	4613      	mov	r3, r2
 800bdb0:	00db      	lsls	r3, r3, #3
 800bdb2:	4413      	add	r3, r2
 800bdb4:	009b      	lsls	r3, r3, #2
 800bdb6:	461a      	mov	r2, r3
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	4413      	add	r3, r2
 800bdbc:	4a27      	ldr	r2, [pc, #156]	; (800be5c <uxTaskGetSystemState+0x10c>)
 800bdbe:	6811      	ldr	r1, [r2, #0]
 800bdc0:	2202      	movs	r2, #2
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	f000 fb94 	bl	800c4f0 <prvListTasksWithinSingleList>
 800bdc8:	4602      	mov	r2, r0
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	4413      	add	r3, r2
 800bdce:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800bdd0:	697a      	ldr	r2, [r7, #20]
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	00db      	lsls	r3, r3, #3
 800bdd6:	4413      	add	r3, r2
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	461a      	mov	r2, r3
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	4413      	add	r3, r2
 800bde0:	4a1f      	ldr	r2, [pc, #124]	; (800be60 <uxTaskGetSystemState+0x110>)
 800bde2:	6811      	ldr	r1, [r2, #0]
 800bde4:	2202      	movs	r2, #2
 800bde6:	4618      	mov	r0, r3
 800bde8:	f000 fb82 	bl	800c4f0 <prvListTasksWithinSingleList>
 800bdec:	4602      	mov	r2, r0
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800bdf4:	697a      	ldr	r2, [r7, #20]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	00db      	lsls	r3, r3, #3
 800bdfa:	4413      	add	r3, r2
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	461a      	mov	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	4413      	add	r3, r2
 800be04:	2204      	movs	r2, #4
 800be06:	4917      	ldr	r1, [pc, #92]	; (800be64 <uxTaskGetSystemState+0x114>)
 800be08:	4618      	mov	r0, r3
 800be0a:	f000 fb71 	bl	800c4f0 <prvListTasksWithinSingleList>
 800be0e:	4602      	mov	r2, r0
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	4413      	add	r3, r2
 800be14:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800be16:	697a      	ldr	r2, [r7, #20]
 800be18:	4613      	mov	r3, r2
 800be1a:	00db      	lsls	r3, r3, #3
 800be1c:	4413      	add	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	461a      	mov	r2, r3
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	4413      	add	r3, r2
 800be26:	2203      	movs	r2, #3
 800be28:	490f      	ldr	r1, [pc, #60]	; (800be68 <uxTaskGetSystemState+0x118>)
 800be2a:	4618      	mov	r0, r3
 800be2c:	f000 fb60 	bl	800c4f0 <prvListTasksWithinSingleList>
 800be30:	4602      	mov	r2, r0
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	4413      	add	r3, r2
 800be36:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d002      	beq.n	800be44 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800be44:	f7ff fed6 	bl	800bbf4 <xTaskResumeAll>

		return uxTask;
 800be48:	697b      	ldr	r3, [r7, #20]
	}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	20001da4 	.word	0x20001da4
 800be58:	200018d4 	.word	0x200018d4
 800be5c:	20001d5c 	.word	0x20001d5c
 800be60:	20001d60 	.word	0x20001d60
 800be64:	20001d78 	.word	0x20001d78
 800be68:	20001d90 	.word	0x20001d90

0800be6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b086      	sub	sp, #24
 800be70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be72:	2300      	movs	r3, #0
 800be74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be76:	4b4f      	ldr	r3, [pc, #316]	; (800bfb4 <xTaskIncrementTick+0x148>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f040 808f 	bne.w	800bf9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be80:	4b4d      	ldr	r3, [pc, #308]	; (800bfb8 <xTaskIncrementTick+0x14c>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3301      	adds	r3, #1
 800be86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be88:	4a4b      	ldr	r2, [pc, #300]	; (800bfb8 <xTaskIncrementTick+0x14c>)
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d120      	bne.n	800bed6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800be94:	4b49      	ldr	r3, [pc, #292]	; (800bfbc <xTaskIncrementTick+0x150>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00a      	beq.n	800beb4 <xTaskIncrementTick+0x48>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	603b      	str	r3, [r7, #0]
}
 800beb0:	bf00      	nop
 800beb2:	e7fe      	b.n	800beb2 <xTaskIncrementTick+0x46>
 800beb4:	4b41      	ldr	r3, [pc, #260]	; (800bfbc <xTaskIncrementTick+0x150>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	60fb      	str	r3, [r7, #12]
 800beba:	4b41      	ldr	r3, [pc, #260]	; (800bfc0 <xTaskIncrementTick+0x154>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a3f      	ldr	r2, [pc, #252]	; (800bfbc <xTaskIncrementTick+0x150>)
 800bec0:	6013      	str	r3, [r2, #0]
 800bec2:	4a3f      	ldr	r2, [pc, #252]	; (800bfc0 <xTaskIncrementTick+0x154>)
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6013      	str	r3, [r2, #0]
 800bec8:	4b3e      	ldr	r3, [pc, #248]	; (800bfc4 <xTaskIncrementTick+0x158>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	3301      	adds	r3, #1
 800bece:	4a3d      	ldr	r2, [pc, #244]	; (800bfc4 <xTaskIncrementTick+0x158>)
 800bed0:	6013      	str	r3, [r2, #0]
 800bed2:	f000 fbaf 	bl	800c634 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bed6:	4b3c      	ldr	r3, [pc, #240]	; (800bfc8 <xTaskIncrementTick+0x15c>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	693a      	ldr	r2, [r7, #16]
 800bedc:	429a      	cmp	r2, r3
 800bede:	d349      	bcc.n	800bf74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bee0:	4b36      	ldr	r3, [pc, #216]	; (800bfbc <xTaskIncrementTick+0x150>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d104      	bne.n	800bef4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beea:	4b37      	ldr	r3, [pc, #220]	; (800bfc8 <xTaskIncrementTick+0x15c>)
 800beec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bef0:	601a      	str	r2, [r3, #0]
					break;
 800bef2:	e03f      	b.n	800bf74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bef4:	4b31      	ldr	r3, [pc, #196]	; (800bfbc <xTaskIncrementTick+0x150>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf04:	693a      	ldr	r2, [r7, #16]
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d203      	bcs.n	800bf14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf0c:	4a2e      	ldr	r2, [pc, #184]	; (800bfc8 <xTaskIncrementTick+0x15c>)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf12:	e02f      	b.n	800bf74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	3304      	adds	r3, #4
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7fe f853 	bl	8009fc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d004      	beq.n	800bf30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	3318      	adds	r3, #24
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fe f84a 	bl	8009fc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf34:	4b25      	ldr	r3, [pc, #148]	; (800bfcc <xTaskIncrementTick+0x160>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	d903      	bls.n	800bf44 <xTaskIncrementTick+0xd8>
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf40:	4a22      	ldr	r2, [pc, #136]	; (800bfcc <xTaskIncrementTick+0x160>)
 800bf42:	6013      	str	r3, [r2, #0]
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf48:	4613      	mov	r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	4413      	add	r3, r2
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	4a1f      	ldr	r2, [pc, #124]	; (800bfd0 <xTaskIncrementTick+0x164>)
 800bf52:	441a      	add	r2, r3
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	3304      	adds	r3, #4
 800bf58:	4619      	mov	r1, r3
 800bf5a:	4610      	mov	r0, r2
 800bf5c:	f7fd ffd5 	bl	8009f0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf64:	4b1b      	ldr	r3, [pc, #108]	; (800bfd4 <xTaskIncrementTick+0x168>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf6a:	429a      	cmp	r2, r3
 800bf6c:	d3b8      	bcc.n	800bee0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf72:	e7b5      	b.n	800bee0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf74:	4b17      	ldr	r3, [pc, #92]	; (800bfd4 <xTaskIncrementTick+0x168>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf7a:	4915      	ldr	r1, [pc, #84]	; (800bfd0 <xTaskIncrementTick+0x164>)
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	4413      	add	r3, r2
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	440b      	add	r3, r1
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d901      	bls.n	800bf90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bf90:	4b11      	ldr	r3, [pc, #68]	; (800bfd8 <xTaskIncrementTick+0x16c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d007      	beq.n	800bfa8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bf98:	2301      	movs	r3, #1
 800bf9a:	617b      	str	r3, [r7, #20]
 800bf9c:	e004      	b.n	800bfa8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bf9e:	4b0f      	ldr	r3, [pc, #60]	; (800bfdc <xTaskIncrementTick+0x170>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	4a0d      	ldr	r2, [pc, #52]	; (800bfdc <xTaskIncrementTick+0x170>)
 800bfa6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bfa8:	697b      	ldr	r3, [r7, #20]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3718      	adds	r7, #24
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	20001dcc 	.word	0x20001dcc
 800bfb8:	20001da8 	.word	0x20001da8
 800bfbc:	20001d5c 	.word	0x20001d5c
 800bfc0:	20001d60 	.word	0x20001d60
 800bfc4:	20001dbc 	.word	0x20001dbc
 800bfc8:	20001dc4 	.word	0x20001dc4
 800bfcc:	20001dac 	.word	0x20001dac
 800bfd0:	200018d4 	.word	0x200018d4
 800bfd4:	200018d0 	.word	0x200018d0
 800bfd8:	20001db8 	.word	0x20001db8
 800bfdc:	20001db4 	.word	0x20001db4

0800bfe0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bfe6:	4b2a      	ldr	r3, [pc, #168]	; (800c090 <vTaskSwitchContext+0xb0>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d003      	beq.n	800bff6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bfee:	4b29      	ldr	r3, [pc, #164]	; (800c094 <vTaskSwitchContext+0xb4>)
 800bff0:	2201      	movs	r2, #1
 800bff2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bff4:	e046      	b.n	800c084 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bff6:	4b27      	ldr	r3, [pc, #156]	; (800c094 <vTaskSwitchContext+0xb4>)
 800bff8:	2200      	movs	r2, #0
 800bffa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bffc:	4b26      	ldr	r3, [pc, #152]	; (800c098 <vTaskSwitchContext+0xb8>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	60fb      	str	r3, [r7, #12]
 800c002:	e010      	b.n	800c026 <vTaskSwitchContext+0x46>
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d10a      	bne.n	800c020 <vTaskSwitchContext+0x40>
	__asm volatile
 800c00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00e:	f383 8811 	msr	BASEPRI, r3
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	f3bf 8f4f 	dsb	sy
 800c01a:	607b      	str	r3, [r7, #4]
}
 800c01c:	bf00      	nop
 800c01e:	e7fe      	b.n	800c01e <vTaskSwitchContext+0x3e>
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	3b01      	subs	r3, #1
 800c024:	60fb      	str	r3, [r7, #12]
 800c026:	491d      	ldr	r1, [pc, #116]	; (800c09c <vTaskSwitchContext+0xbc>)
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	4613      	mov	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	4413      	add	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	440b      	add	r3, r1
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d0e4      	beq.n	800c004 <vTaskSwitchContext+0x24>
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	4613      	mov	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4413      	add	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	4a15      	ldr	r2, [pc, #84]	; (800c09c <vTaskSwitchContext+0xbc>)
 800c046:	4413      	add	r3, r2
 800c048:	60bb      	str	r3, [r7, #8]
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	685a      	ldr	r2, [r3, #4]
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	605a      	str	r2, [r3, #4]
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	685a      	ldr	r2, [r3, #4]
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	3308      	adds	r3, #8
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d104      	bne.n	800c06a <vTaskSwitchContext+0x8a>
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	685a      	ldr	r2, [r3, #4]
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	605a      	str	r2, [r3, #4]
 800c06a:	68bb      	ldr	r3, [r7, #8]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	4a0b      	ldr	r2, [pc, #44]	; (800c0a0 <vTaskSwitchContext+0xc0>)
 800c072:	6013      	str	r3, [r2, #0]
 800c074:	4a08      	ldr	r2, [pc, #32]	; (800c098 <vTaskSwitchContext+0xb8>)
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c07a:	4b09      	ldr	r3, [pc, #36]	; (800c0a0 <vTaskSwitchContext+0xc0>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	3364      	adds	r3, #100	; 0x64
 800c080:	4a08      	ldr	r2, [pc, #32]	; (800c0a4 <vTaskSwitchContext+0xc4>)
 800c082:	6013      	str	r3, [r2, #0]
}
 800c084:	bf00      	nop
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr
 800c090:	20001dcc 	.word	0x20001dcc
 800c094:	20001db8 	.word	0x20001db8
 800c098:	20001dac 	.word	0x20001dac
 800c09c:	200018d4 	.word	0x200018d4
 800c0a0:	200018d0 	.word	0x200018d0
 800c0a4:	2000010c 	.word	0x2000010c

0800c0a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d10a      	bne.n	800c0ce <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c0b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0bc:	f383 8811 	msr	BASEPRI, r3
 800c0c0:	f3bf 8f6f 	isb	sy
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	60fb      	str	r3, [r7, #12]
}
 800c0ca:	bf00      	nop
 800c0cc:	e7fe      	b.n	800c0cc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0ce:	4b07      	ldr	r3, [pc, #28]	; (800c0ec <vTaskPlaceOnEventList+0x44>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	3318      	adds	r3, #24
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f7fd ff3b 	bl	8009f52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0dc:	2101      	movs	r1, #1
 800c0de:	6838      	ldr	r0, [r7, #0]
 800c0e0:	f000 ff46 	bl	800cf70 <prvAddCurrentTaskToDelayedList>
}
 800c0e4:	bf00      	nop
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	200018d0 	.word	0x200018d0

0800c0f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b086      	sub	sp, #24
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d10a      	bne.n	800c118 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c106:	f383 8811 	msr	BASEPRI, r3
 800c10a:	f3bf 8f6f 	isb	sy
 800c10e:	f3bf 8f4f 	dsb	sy
 800c112:	617b      	str	r3, [r7, #20]
}
 800c114:	bf00      	nop
 800c116:	e7fe      	b.n	800c116 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c118:	4b0a      	ldr	r3, [pc, #40]	; (800c144 <vTaskPlaceOnEventListRestricted+0x54>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	3318      	adds	r3, #24
 800c11e:	4619      	mov	r1, r3
 800c120:	68f8      	ldr	r0, [r7, #12]
 800c122:	f7fd fef2 	bl	8009f0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d002      	beq.n	800c132 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c12c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c130:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c132:	6879      	ldr	r1, [r7, #4]
 800c134:	68b8      	ldr	r0, [r7, #8]
 800c136:	f000 ff1b 	bl	800cf70 <prvAddCurrentTaskToDelayedList>
	}
 800c13a:	bf00      	nop
 800c13c:	3718      	adds	r7, #24
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	200018d0 	.word	0x200018d0

0800c148 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b086      	sub	sp, #24
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	68db      	ldr	r3, [r3, #12]
 800c154:	68db      	ldr	r3, [r3, #12]
 800c156:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d10a      	bne.n	800c174 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	60fb      	str	r3, [r7, #12]
}
 800c170:	bf00      	nop
 800c172:	e7fe      	b.n	800c172 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	3318      	adds	r3, #24
 800c178:	4618      	mov	r0, r3
 800c17a:	f7fd ff23 	bl	8009fc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c17e:	4b1e      	ldr	r3, [pc, #120]	; (800c1f8 <xTaskRemoveFromEventList+0xb0>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d11d      	bne.n	800c1c2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	3304      	adds	r3, #4
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fd ff1a 	bl	8009fc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c194:	4b19      	ldr	r3, [pc, #100]	; (800c1fc <xTaskRemoveFromEventList+0xb4>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d903      	bls.n	800c1a4 <xTaskRemoveFromEventList+0x5c>
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a0:	4a16      	ldr	r2, [pc, #88]	; (800c1fc <xTaskRemoveFromEventList+0xb4>)
 800c1a2:	6013      	str	r3, [r2, #0]
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4a13      	ldr	r2, [pc, #76]	; (800c200 <xTaskRemoveFromEventList+0xb8>)
 800c1b2:	441a      	add	r2, r3
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	3304      	adds	r3, #4
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	f7fd fea5 	bl	8009f0a <vListInsertEnd>
 800c1c0:	e005      	b.n	800c1ce <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	3318      	adds	r3, #24
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	480e      	ldr	r0, [pc, #56]	; (800c204 <xTaskRemoveFromEventList+0xbc>)
 800c1ca:	f7fd fe9e 	bl	8009f0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d2:	4b0d      	ldr	r3, [pc, #52]	; (800c208 <xTaskRemoveFromEventList+0xc0>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d905      	bls.n	800c1e8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c1e0:	4b0a      	ldr	r3, [pc, #40]	; (800c20c <xTaskRemoveFromEventList+0xc4>)
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	601a      	str	r2, [r3, #0]
 800c1e6:	e001      	b.n	800c1ec <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c1ec:	697b      	ldr	r3, [r7, #20]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3718      	adds	r7, #24
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	20001dcc 	.word	0x20001dcc
 800c1fc:	20001dac 	.word	0x20001dac
 800c200:	200018d4 	.word	0x200018d4
 800c204:	20001d64 	.word	0x20001d64
 800c208:	200018d0 	.word	0x200018d0
 800c20c:	20001db8 	.word	0x20001db8

0800c210 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c218:	4b06      	ldr	r3, [pc, #24]	; (800c234 <vTaskInternalSetTimeOutState+0x24>)
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c220:	4b05      	ldr	r3, [pc, #20]	; (800c238 <vTaskInternalSetTimeOutState+0x28>)
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	605a      	str	r2, [r3, #4]
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr
 800c234:	20001dbc 	.word	0x20001dbc
 800c238:	20001da8 	.word	0x20001da8

0800c23c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b088      	sub	sp, #32
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10a      	bne.n	800c262 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	613b      	str	r3, [r7, #16]
}
 800c25e:	bf00      	nop
 800c260:	e7fe      	b.n	800c260 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d10a      	bne.n	800c27e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26c:	f383 8811 	msr	BASEPRI, r3
 800c270:	f3bf 8f6f 	isb	sy
 800c274:	f3bf 8f4f 	dsb	sy
 800c278:	60fb      	str	r3, [r7, #12]
}
 800c27a:	bf00      	nop
 800c27c:	e7fe      	b.n	800c27c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c27e:	f001 fb49 	bl	800d914 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c282:	4b1d      	ldr	r3, [pc, #116]	; (800c2f8 <xTaskCheckForTimeOut+0xbc>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	685b      	ldr	r3, [r3, #4]
 800c28c:	69ba      	ldr	r2, [r7, #24]
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c29a:	d102      	bne.n	800c2a2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c29c:	2300      	movs	r3, #0
 800c29e:	61fb      	str	r3, [r7, #28]
 800c2a0:	e023      	b.n	800c2ea <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	4b15      	ldr	r3, [pc, #84]	; (800c2fc <xTaskCheckForTimeOut+0xc0>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d007      	beq.n	800c2be <xTaskCheckForTimeOut+0x82>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	685b      	ldr	r3, [r3, #4]
 800c2b2:	69ba      	ldr	r2, [r7, #24]
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d302      	bcc.n	800c2be <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	61fb      	str	r3, [r7, #28]
 800c2bc:	e015      	b.n	800c2ea <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	697a      	ldr	r2, [r7, #20]
 800c2c4:	429a      	cmp	r2, r3
 800c2c6:	d20b      	bcs.n	800c2e0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	1ad2      	subs	r2, r2, r3
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7ff ff9b 	bl	800c210 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	61fb      	str	r3, [r7, #28]
 800c2de:	e004      	b.n	800c2ea <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c2ea:	f001 fb43 	bl	800d974 <vPortExitCritical>

	return xReturn;
 800c2ee:	69fb      	ldr	r3, [r7, #28]
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3720      	adds	r7, #32
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	20001da8 	.word	0x20001da8
 800c2fc:	20001dbc 	.word	0x20001dbc

0800c300 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c300:	b480      	push	{r7}
 800c302:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c304:	4b03      	ldr	r3, [pc, #12]	; (800c314 <vTaskMissedYield+0x14>)
 800c306:	2201      	movs	r2, #1
 800c308:	601a      	str	r2, [r3, #0]
}
 800c30a:	bf00      	nop
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr
 800c314:	20001db8 	.word	0x20001db8

0800c318 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c320:	f000 f852 	bl	800c3c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c324:	4b06      	ldr	r3, [pc, #24]	; (800c340 <prvIdleTask+0x28>)
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	2b01      	cmp	r3, #1
 800c32a:	d9f9      	bls.n	800c320 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c32c:	4b05      	ldr	r3, [pc, #20]	; (800c344 <prvIdleTask+0x2c>)
 800c32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c332:	601a      	str	r2, [r3, #0]
 800c334:	f3bf 8f4f 	dsb	sy
 800c338:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c33c:	e7f0      	b.n	800c320 <prvIdleTask+0x8>
 800c33e:	bf00      	nop
 800c340:	200018d4 	.word	0x200018d4
 800c344:	e000ed04 	.word	0xe000ed04

0800c348 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c34e:	2300      	movs	r3, #0
 800c350:	607b      	str	r3, [r7, #4]
 800c352:	e00c      	b.n	800c36e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c354:	687a      	ldr	r2, [r7, #4]
 800c356:	4613      	mov	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4413      	add	r3, r2
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	4a12      	ldr	r2, [pc, #72]	; (800c3a8 <prvInitialiseTaskLists+0x60>)
 800c360:	4413      	add	r3, r2
 800c362:	4618      	mov	r0, r3
 800c364:	f7fd fda4 	bl	8009eb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	3301      	adds	r3, #1
 800c36c:	607b      	str	r3, [r7, #4]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2b37      	cmp	r3, #55	; 0x37
 800c372:	d9ef      	bls.n	800c354 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c374:	480d      	ldr	r0, [pc, #52]	; (800c3ac <prvInitialiseTaskLists+0x64>)
 800c376:	f7fd fd9b 	bl	8009eb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c37a:	480d      	ldr	r0, [pc, #52]	; (800c3b0 <prvInitialiseTaskLists+0x68>)
 800c37c:	f7fd fd98 	bl	8009eb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c380:	480c      	ldr	r0, [pc, #48]	; (800c3b4 <prvInitialiseTaskLists+0x6c>)
 800c382:	f7fd fd95 	bl	8009eb0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c386:	480c      	ldr	r0, [pc, #48]	; (800c3b8 <prvInitialiseTaskLists+0x70>)
 800c388:	f7fd fd92 	bl	8009eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c38c:	480b      	ldr	r0, [pc, #44]	; (800c3bc <prvInitialiseTaskLists+0x74>)
 800c38e:	f7fd fd8f 	bl	8009eb0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c392:	4b0b      	ldr	r3, [pc, #44]	; (800c3c0 <prvInitialiseTaskLists+0x78>)
 800c394:	4a05      	ldr	r2, [pc, #20]	; (800c3ac <prvInitialiseTaskLists+0x64>)
 800c396:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c398:	4b0a      	ldr	r3, [pc, #40]	; (800c3c4 <prvInitialiseTaskLists+0x7c>)
 800c39a:	4a05      	ldr	r2, [pc, #20]	; (800c3b0 <prvInitialiseTaskLists+0x68>)
 800c39c:	601a      	str	r2, [r3, #0]
}
 800c39e:	bf00      	nop
 800c3a0:	3708      	adds	r7, #8
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	200018d4 	.word	0x200018d4
 800c3ac:	20001d34 	.word	0x20001d34
 800c3b0:	20001d48 	.word	0x20001d48
 800c3b4:	20001d64 	.word	0x20001d64
 800c3b8:	20001d78 	.word	0x20001d78
 800c3bc:	20001d90 	.word	0x20001d90
 800c3c0:	20001d5c 	.word	0x20001d5c
 800c3c4:	20001d60 	.word	0x20001d60

0800c3c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b082      	sub	sp, #8
 800c3cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3ce:	e019      	b.n	800c404 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c3d0:	f001 faa0 	bl	800d914 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3d4:	4b10      	ldr	r3, [pc, #64]	; (800c418 <prvCheckTasksWaitingTermination+0x50>)
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	3304      	adds	r3, #4
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f7fd fdef 	bl	8009fc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c3e6:	4b0d      	ldr	r3, [pc, #52]	; (800c41c <prvCheckTasksWaitingTermination+0x54>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3b01      	subs	r3, #1
 800c3ec:	4a0b      	ldr	r2, [pc, #44]	; (800c41c <prvCheckTasksWaitingTermination+0x54>)
 800c3ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c3f0:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <prvCheckTasksWaitingTermination+0x58>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	4a0a      	ldr	r2, [pc, #40]	; (800c420 <prvCheckTasksWaitingTermination+0x58>)
 800c3f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c3fa:	f001 fabb 	bl	800d974 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f8e4 	bl	800c5cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c404:	4b06      	ldr	r3, [pc, #24]	; (800c420 <prvCheckTasksWaitingTermination+0x58>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1e1      	bne.n	800c3d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c40c:	bf00      	nop
 800c40e:	bf00      	nop
 800c410:	3708      	adds	r7, #8
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	20001d78 	.word	0x20001d78
 800c41c:	20001da4 	.word	0x20001da4
 800c420:	20001d8c 	.word	0x20001d8c

0800c424 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800c424:	b580      	push	{r7, lr}
 800c426:	b086      	sub	sp, #24
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	607a      	str	r2, [r7, #4]
 800c430:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d102      	bne.n	800c43e <vTaskGetInfo+0x1a>
 800c438:	4b2c      	ldr	r3, [pc, #176]	; (800c4ec <vTaskGetInfo+0xc8>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	e000      	b.n	800c440 <vTaskGetInfo+0x1c>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	697a      	ldr	r2, [r7, #20]
 800c446:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c45e:	68bb      	ldr	r3, [r7, #8]
 800c460:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800c472:	68bb      	ldr	r3, [r7, #8]
 800c474:	2200      	movs	r2, #0
 800c476:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800c478:	78fb      	ldrb	r3, [r7, #3]
 800c47a:	2b05      	cmp	r3, #5
 800c47c:	d01a      	beq.n	800c4b4 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800c47e:	4b1b      	ldr	r3, [pc, #108]	; (800c4ec <vTaskGetInfo+0xc8>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	429a      	cmp	r2, r3
 800c486:	d103      	bne.n	800c490 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	2200      	movs	r2, #0
 800c48c:	731a      	strb	r2, [r3, #12]
 800c48e:	e018      	b.n	800c4c2 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800c490:	68bb      	ldr	r3, [r7, #8]
 800c492:	78fa      	ldrb	r2, [r7, #3]
 800c494:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800c496:	78fb      	ldrb	r3, [r7, #3]
 800c498:	2b03      	cmp	r3, #3
 800c49a:	d112      	bne.n	800c4c2 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800c49c:	f7ff fb9c 	bl	800bbd8 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	2202      	movs	r2, #2
 800c4ac:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800c4ae:	f7ff fba1 	bl	800bbf4 <xTaskResumeAll>
 800c4b2:	e006      	b.n	800c4c2 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800c4b4:	6978      	ldr	r0, [r7, #20]
 800c4b6:	f7ff f9b3 	bl	800b820 <eTaskGetState>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	461a      	mov	r2, r3
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d009      	beq.n	800c4dc <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f000 f861 	bl	800c594 <prvTaskCheckFreeStackSpace>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	461a      	mov	r2, r3
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800c4da:	e002      	b.n	800c4e2 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	841a      	strh	r2, [r3, #32]
	}
 800c4e2:	bf00      	nop
 800c4e4:	3718      	adds	r7, #24
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	200018d0 	.word	0x200018d0

0800c4f0 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b08a      	sub	sp, #40	; 0x28
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	60f8      	str	r0, [r7, #12]
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	4613      	mov	r3, r2
 800c4fc:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800c4fe:	2300      	movs	r3, #0
 800c500:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d03f      	beq.n	800c58a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	623b      	str	r3, [r7, #32]
 800c50e:	6a3b      	ldr	r3, [r7, #32]
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	685a      	ldr	r2, [r3, #4]
 800c514:	6a3b      	ldr	r3, [r7, #32]
 800c516:	605a      	str	r2, [r3, #4]
 800c518:	6a3b      	ldr	r3, [r7, #32]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	6a3b      	ldr	r3, [r7, #32]
 800c51e:	3308      	adds	r3, #8
 800c520:	429a      	cmp	r2, r3
 800c522:	d104      	bne.n	800c52e <prvListTasksWithinSingleList+0x3e>
 800c524:	6a3b      	ldr	r3, [r7, #32]
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	685a      	ldr	r2, [r3, #4]
 800c52a:	6a3b      	ldr	r3, [r7, #32]
 800c52c:	605a      	str	r2, [r3, #4]
 800c52e:	6a3b      	ldr	r3, [r7, #32]
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	61bb      	str	r3, [r7, #24]
 800c53a:	69bb      	ldr	r3, [r7, #24]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	685a      	ldr	r2, [r3, #4]
 800c540:	69bb      	ldr	r3, [r7, #24]
 800c542:	605a      	str	r2, [r3, #4]
 800c544:	69bb      	ldr	r3, [r7, #24]
 800c546:	685a      	ldr	r2, [r3, #4]
 800c548:	69bb      	ldr	r3, [r7, #24]
 800c54a:	3308      	adds	r3, #8
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d104      	bne.n	800c55a <prvListTasksWithinSingleList+0x6a>
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	685a      	ldr	r2, [r3, #4]
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	605a      	str	r2, [r3, #4]
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	68db      	ldr	r3, [r3, #12]
 800c560:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800c562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c564:	4613      	mov	r3, r2
 800c566:	00db      	lsls	r3, r3, #3
 800c568:	4413      	add	r3, r2
 800c56a:	009b      	lsls	r3, r3, #2
 800c56c:	461a      	mov	r2, r3
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	1899      	adds	r1, r3, r2
 800c572:	79fb      	ldrb	r3, [r7, #7]
 800c574:	2201      	movs	r2, #1
 800c576:	6978      	ldr	r0, [r7, #20]
 800c578:	f7ff ff54 	bl	800c424 <vTaskGetInfo>
				uxTask++;
 800c57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c57e:	3301      	adds	r3, #1
 800c580:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800c582:	697a      	ldr	r2, [r7, #20]
 800c584:	69fb      	ldr	r3, [r7, #28]
 800c586:	429a      	cmp	r2, r3
 800c588:	d1d5      	bne.n	800c536 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800c58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3728      	adds	r7, #40	; 0x28
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c59c:	2300      	movs	r3, #0
 800c59e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c5a0:	e005      	b.n	800c5ae <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	2ba5      	cmp	r3, #165	; 0xa5
 800c5b4:	d0f5      	beq.n	800c5a2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	089b      	lsrs	r3, r3, #2
 800c5ba:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	b29b      	uxth	r3, r3
	}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3714      	adds	r7, #20
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b084      	sub	sp, #16
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	3364      	adds	r3, #100	; 0x64
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f003 fbe1 	bl	800fda0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d108      	bne.n	800c5fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	f001 fb7f 	bl	800dcf0 <vPortFree>
				vPortFree( pxTCB );
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f001 fb7c 	bl	800dcf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c5f8:	e018      	b.n	800c62c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c600:	2b01      	cmp	r3, #1
 800c602:	d103      	bne.n	800c60c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c604:	6878      	ldr	r0, [r7, #4]
 800c606:	f001 fb73 	bl	800dcf0 <vPortFree>
	}
 800c60a:	e00f      	b.n	800c62c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800c612:	2b02      	cmp	r3, #2
 800c614:	d00a      	beq.n	800c62c <prvDeleteTCB+0x60>
	__asm volatile
 800c616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61a:	f383 8811 	msr	BASEPRI, r3
 800c61e:	f3bf 8f6f 	isb	sy
 800c622:	f3bf 8f4f 	dsb	sy
 800c626:	60fb      	str	r3, [r7, #12]
}
 800c628:	bf00      	nop
 800c62a:	e7fe      	b.n	800c62a <prvDeleteTCB+0x5e>
	}
 800c62c:	bf00      	nop
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}

0800c634 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c63a:	4b0c      	ldr	r3, [pc, #48]	; (800c66c <prvResetNextTaskUnblockTime+0x38>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d104      	bne.n	800c64e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c644:	4b0a      	ldr	r3, [pc, #40]	; (800c670 <prvResetNextTaskUnblockTime+0x3c>)
 800c646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c64a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c64c:	e008      	b.n	800c660 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c64e:	4b07      	ldr	r3, [pc, #28]	; (800c66c <prvResetNextTaskUnblockTime+0x38>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	68db      	ldr	r3, [r3, #12]
 800c654:	68db      	ldr	r3, [r3, #12]
 800c656:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	4a04      	ldr	r2, [pc, #16]	; (800c670 <prvResetNextTaskUnblockTime+0x3c>)
 800c65e:	6013      	str	r3, [r2, #0]
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	20001d5c 	.word	0x20001d5c
 800c670:	20001dc4 	.word	0x20001dc4

0800c674 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c674:	b480      	push	{r7}
 800c676:	b083      	sub	sp, #12
 800c678:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c67a:	4b05      	ldr	r3, [pc, #20]	; (800c690 <xTaskGetCurrentTaskHandle+0x1c>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c680:	687b      	ldr	r3, [r7, #4]
	}
 800c682:	4618      	mov	r0, r3
 800c684:	370c      	adds	r7, #12
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	200018d0 	.word	0x200018d0

0800c694 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c69a:	4b0b      	ldr	r3, [pc, #44]	; (800c6c8 <xTaskGetSchedulerState+0x34>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d102      	bne.n	800c6a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	607b      	str	r3, [r7, #4]
 800c6a6:	e008      	b.n	800c6ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c6a8:	4b08      	ldr	r3, [pc, #32]	; (800c6cc <xTaskGetSchedulerState+0x38>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d102      	bne.n	800c6b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	607b      	str	r3, [r7, #4]
 800c6b4:	e001      	b.n	800c6ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c6ba:	687b      	ldr	r3, [r7, #4]
	}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	370c      	adds	r7, #12
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr
 800c6c8:	20001db0 	.word	0x20001db0
 800c6cc:	20001dcc 	.word	0x20001dcc

0800c6d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b084      	sub	sp, #16
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c6dc:	2300      	movs	r3, #0
 800c6de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d051      	beq.n	800c78a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c6e6:	68bb      	ldr	r3, [r7, #8]
 800c6e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ea:	4b2a      	ldr	r3, [pc, #168]	; (800c794 <xTaskPriorityInherit+0xc4>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d241      	bcs.n	800c778 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	699b      	ldr	r3, [r3, #24]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	db06      	blt.n	800c70a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6fc:	4b25      	ldr	r3, [pc, #148]	; (800c794 <xTaskPriorityInherit+0xc4>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c702:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	6959      	ldr	r1, [r3, #20]
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c712:	4613      	mov	r3, r2
 800c714:	009b      	lsls	r3, r3, #2
 800c716:	4413      	add	r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	4a1f      	ldr	r2, [pc, #124]	; (800c798 <xTaskPriorityInherit+0xc8>)
 800c71c:	4413      	add	r3, r2
 800c71e:	4299      	cmp	r1, r3
 800c720:	d122      	bne.n	800c768 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	3304      	adds	r3, #4
 800c726:	4618      	mov	r0, r3
 800c728:	f7fd fc4c 	bl	8009fc4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c72c:	4b19      	ldr	r3, [pc, #100]	; (800c794 <xTaskPriorityInherit+0xc4>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c736:	68bb      	ldr	r3, [r7, #8]
 800c738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73a:	4b18      	ldr	r3, [pc, #96]	; (800c79c <xTaskPriorityInherit+0xcc>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d903      	bls.n	800c74a <xTaskPriorityInherit+0x7a>
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c746:	4a15      	ldr	r2, [pc, #84]	; (800c79c <xTaskPriorityInherit+0xcc>)
 800c748:	6013      	str	r3, [r2, #0]
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c74e:	4613      	mov	r3, r2
 800c750:	009b      	lsls	r3, r3, #2
 800c752:	4413      	add	r3, r2
 800c754:	009b      	lsls	r3, r3, #2
 800c756:	4a10      	ldr	r2, [pc, #64]	; (800c798 <xTaskPriorityInherit+0xc8>)
 800c758:	441a      	add	r2, r3
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	3304      	adds	r3, #4
 800c75e:	4619      	mov	r1, r3
 800c760:	4610      	mov	r0, r2
 800c762:	f7fd fbd2 	bl	8009f0a <vListInsertEnd>
 800c766:	e004      	b.n	800c772 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c768:	4b0a      	ldr	r3, [pc, #40]	; (800c794 <xTaskPriorityInherit+0xc4>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c772:	2301      	movs	r3, #1
 800c774:	60fb      	str	r3, [r7, #12]
 800c776:	e008      	b.n	800c78a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c77c:	4b05      	ldr	r3, [pc, #20]	; (800c794 <xTaskPriorityInherit+0xc4>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c782:	429a      	cmp	r2, r3
 800c784:	d201      	bcs.n	800c78a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c786:	2301      	movs	r3, #1
 800c788:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c78a:	68fb      	ldr	r3, [r7, #12]
	}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	200018d0 	.word	0x200018d0
 800c798:	200018d4 	.word	0x200018d4
 800c79c:	20001dac 	.word	0x20001dac

0800c7a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b086      	sub	sp, #24
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d056      	beq.n	800c864 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c7b6:	4b2e      	ldr	r3, [pc, #184]	; (800c870 <xTaskPriorityDisinherit+0xd0>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	693a      	ldr	r2, [r7, #16]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d00a      	beq.n	800c7d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7c4:	f383 8811 	msr	BASEPRI, r3
 800c7c8:	f3bf 8f6f 	isb	sy
 800c7cc:	f3bf 8f4f 	dsb	sy
 800c7d0:	60fb      	str	r3, [r7, #12]
}
 800c7d2:	bf00      	nop
 800c7d4:	e7fe      	b.n	800c7d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c7d6:	693b      	ldr	r3, [r7, #16]
 800c7d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10a      	bne.n	800c7f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	60bb      	str	r3, [r7, #8]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7f8:	1e5a      	subs	r2, r3, #1
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c802:	693b      	ldr	r3, [r7, #16]
 800c804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c806:	429a      	cmp	r2, r3
 800c808:	d02c      	beq.n	800c864 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d128      	bne.n	800c864 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	3304      	adds	r3, #4
 800c816:	4618      	mov	r0, r3
 800c818:	f7fd fbd4 	bl	8009fc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c81c:	693b      	ldr	r3, [r7, #16]
 800c81e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c828:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c834:	4b0f      	ldr	r3, [pc, #60]	; (800c874 <xTaskPriorityDisinherit+0xd4>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d903      	bls.n	800c844 <xTaskPriorityDisinherit+0xa4>
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c840:	4a0c      	ldr	r2, [pc, #48]	; (800c874 <xTaskPriorityDisinherit+0xd4>)
 800c842:	6013      	str	r3, [r2, #0]
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c848:	4613      	mov	r3, r2
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	4413      	add	r3, r2
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	4a09      	ldr	r2, [pc, #36]	; (800c878 <xTaskPriorityDisinherit+0xd8>)
 800c852:	441a      	add	r2, r3
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	3304      	adds	r3, #4
 800c858:	4619      	mov	r1, r3
 800c85a:	4610      	mov	r0, r2
 800c85c:	f7fd fb55 	bl	8009f0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c860:	2301      	movs	r3, #1
 800c862:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c864:	697b      	ldr	r3, [r7, #20]
	}
 800c866:	4618      	mov	r0, r3
 800c868:	3718      	adds	r7, #24
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	200018d0 	.word	0x200018d0
 800c874:	20001dac 	.word	0x20001dac
 800c878:	200018d4 	.word	0x200018d4

0800c87c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b088      	sub	sp, #32
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c88a:	2301      	movs	r3, #1
 800c88c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d06a      	beq.n	800c96a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c894:	69bb      	ldr	r3, [r7, #24]
 800c896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d10a      	bne.n	800c8b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a0:	f383 8811 	msr	BASEPRI, r3
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	60fb      	str	r3, [r7, #12]
}
 800c8ae:	bf00      	nop
 800c8b0:	e7fe      	b.n	800c8b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8b6:	683a      	ldr	r2, [r7, #0]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d902      	bls.n	800c8c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	61fb      	str	r3, [r7, #28]
 800c8c0:	e002      	b.n	800c8c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c8c2:	69bb      	ldr	r3, [r7, #24]
 800c8c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c8c8:	69bb      	ldr	r3, [r7, #24]
 800c8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8cc:	69fa      	ldr	r2, [r7, #28]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d04b      	beq.n	800c96a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	429a      	cmp	r2, r3
 800c8da:	d146      	bne.n	800c96a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c8dc:	4b25      	ldr	r3, [pc, #148]	; (800c974 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	69ba      	ldr	r2, [r7, #24]
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d10a      	bne.n	800c8fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ea:	f383 8811 	msr	BASEPRI, r3
 800c8ee:	f3bf 8f6f 	isb	sy
 800c8f2:	f3bf 8f4f 	dsb	sy
 800c8f6:	60bb      	str	r3, [r7, #8]
}
 800c8f8:	bf00      	nop
 800c8fa:	e7fe      	b.n	800c8fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c8fc:	69bb      	ldr	r3, [r7, #24]
 800c8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c900:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	69fa      	ldr	r2, [r7, #28]
 800c906:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c908:	69bb      	ldr	r3, [r7, #24]
 800c90a:	699b      	ldr	r3, [r3, #24]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	db04      	blt.n	800c91a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	6959      	ldr	r1, [r3, #20]
 800c91e:	693a      	ldr	r2, [r7, #16]
 800c920:	4613      	mov	r3, r2
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	4413      	add	r3, r2
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	4a13      	ldr	r2, [pc, #76]	; (800c978 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c92a:	4413      	add	r3, r2
 800c92c:	4299      	cmp	r1, r3
 800c92e:	d11c      	bne.n	800c96a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c930:	69bb      	ldr	r3, [r7, #24]
 800c932:	3304      	adds	r3, #4
 800c934:	4618      	mov	r0, r3
 800c936:	f7fd fb45 	bl	8009fc4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c93a:	69bb      	ldr	r3, [r7, #24]
 800c93c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c93e:	4b0f      	ldr	r3, [pc, #60]	; (800c97c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	429a      	cmp	r2, r3
 800c944:	d903      	bls.n	800c94e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c94a:	4a0c      	ldr	r2, [pc, #48]	; (800c97c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c94c:	6013      	str	r3, [r2, #0]
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c952:	4613      	mov	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4413      	add	r3, r2
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	4a07      	ldr	r2, [pc, #28]	; (800c978 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c95c:	441a      	add	r2, r3
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	3304      	adds	r3, #4
 800c962:	4619      	mov	r1, r3
 800c964:	4610      	mov	r0, r2
 800c966:	f7fd fad0 	bl	8009f0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c96a:	bf00      	nop
 800c96c:	3720      	adds	r7, #32
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
 800c972:	bf00      	nop
 800c974:	200018d0 	.word	0x200018d0
 800c978:	200018d4 	.word	0x200018d4
 800c97c:	20001dac 	.word	0x20001dac

0800c980 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800c98a:	6839      	ldr	r1, [r7, #0]
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f003 fa93 	bl	800feb8 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f7f3 fc8e 	bl	80002b4 <strlen>
 800c998:	60f8      	str	r0, [r7, #12]
 800c99a:	e007      	b.n	800c9ac <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	2220      	movs	r2, #32
 800c9a4:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	60fb      	str	r3, [r7, #12]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2b1e      	cmp	r3, #30
 800c9b0:	d9f4      	bls.n	800c99c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	4413      	add	r3, r2
	}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	3710      	adds	r7, #16
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	bd80      	pop	{r7, pc}
	...

0800c9cc <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800c9cc:	b590      	push	{r4, r7, lr}
 800c9ce:	b089      	sub	sp, #36	; 0x24
 800c9d0:	af02      	add	r7, sp, #8
 800c9d2:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800c9da:	4b45      	ldr	r3, [pc, #276]	; (800caf0 <vTaskList+0x124>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800c9e0:	4b43      	ldr	r3, [pc, #268]	; (800caf0 <vTaskList+0x124>)
 800c9e2:	681a      	ldr	r2, [r3, #0]
 800c9e4:	4613      	mov	r3, r2
 800c9e6:	00db      	lsls	r3, r3, #3
 800c9e8:	4413      	add	r3, r2
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f001 f8b3 	bl	800db58 <pvPortMalloc>
 800c9f2:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d076      	beq.n	800cae8 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	68f9      	ldr	r1, [r7, #12]
 800c9fe:	68b8      	ldr	r0, [r7, #8]
 800ca00:	f7ff f9a6 	bl	800bd50 <uxTaskGetSystemState>
 800ca04:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800ca06:	2300      	movs	r3, #0
 800ca08:	617b      	str	r3, [r7, #20]
 800ca0a:	e066      	b.n	800cada <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800ca0c:	697a      	ldr	r2, [r7, #20]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	00db      	lsls	r3, r3, #3
 800ca12:	4413      	add	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	461a      	mov	r2, r3
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	4413      	add	r3, r2
 800ca1c:	7b1b      	ldrb	r3, [r3, #12]
 800ca1e:	2b04      	cmp	r3, #4
 800ca20:	d81b      	bhi.n	800ca5a <vTaskList+0x8e>
 800ca22:	a201      	add	r2, pc, #4	; (adr r2, 800ca28 <vTaskList+0x5c>)
 800ca24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca28:	0800ca3d 	.word	0x0800ca3d
 800ca2c:	0800ca43 	.word	0x0800ca43
 800ca30:	0800ca49 	.word	0x0800ca49
 800ca34:	0800ca4f 	.word	0x0800ca4f
 800ca38:	0800ca55 	.word	0x0800ca55
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800ca3c:	2358      	movs	r3, #88	; 0x58
 800ca3e:	74fb      	strb	r3, [r7, #19]
										break;
 800ca40:	e00e      	b.n	800ca60 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800ca42:	2352      	movs	r3, #82	; 0x52
 800ca44:	74fb      	strb	r3, [r7, #19]
										break;
 800ca46:	e00b      	b.n	800ca60 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800ca48:	2342      	movs	r3, #66	; 0x42
 800ca4a:	74fb      	strb	r3, [r7, #19]
										break;
 800ca4c:	e008      	b.n	800ca60 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800ca4e:	2353      	movs	r3, #83	; 0x53
 800ca50:	74fb      	strb	r3, [r7, #19]
										break;
 800ca52:	e005      	b.n	800ca60 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800ca54:	2344      	movs	r3, #68	; 0x44
 800ca56:	74fb      	strb	r3, [r7, #19]
										break;
 800ca58:	e002      	b.n	800ca60 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	74fb      	strb	r3, [r7, #19]
										break;
 800ca5e:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800ca60:	697a      	ldr	r2, [r7, #20]
 800ca62:	4613      	mov	r3, r2
 800ca64:	00db      	lsls	r3, r3, #3
 800ca66:	4413      	add	r3, r2
 800ca68:	009b      	lsls	r3, r3, #2
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	4413      	add	r3, r2
 800ca70:	685b      	ldr	r3, [r3, #4]
 800ca72:	4619      	mov	r1, r3
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f7ff ff83 	bl	800c980 <prvWriteNameToBuffer>
 800ca7a:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800ca7c:	7cf9      	ldrb	r1, [r7, #19]
 800ca7e:	697a      	ldr	r2, [r7, #20]
 800ca80:	4613      	mov	r3, r2
 800ca82:	00db      	lsls	r3, r3, #3
 800ca84:	4413      	add	r3, r2
 800ca86:	009b      	lsls	r3, r3, #2
 800ca88:	461a      	mov	r2, r3
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	6918      	ldr	r0, [r3, #16]
 800ca90:	697a      	ldr	r2, [r7, #20]
 800ca92:	4613      	mov	r3, r2
 800ca94:	00db      	lsls	r3, r3, #3
 800ca96:	4413      	add	r3, r2
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	4413      	add	r3, r2
 800caa0:	8c1b      	ldrh	r3, [r3, #32]
 800caa2:	461c      	mov	r4, r3
 800caa4:	697a      	ldr	r2, [r7, #20]
 800caa6:	4613      	mov	r3, r2
 800caa8:	00db      	lsls	r3, r3, #3
 800caaa:	4413      	add	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	461a      	mov	r2, r3
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	4413      	add	r3, r2
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	9301      	str	r3, [sp, #4]
 800cab8:	9400      	str	r4, [sp, #0]
 800caba:	4603      	mov	r3, r0
 800cabc:	460a      	mov	r2, r1
 800cabe:	490d      	ldr	r1, [pc, #52]	; (800caf4 <vTaskList+0x128>)
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f003 f9d9 	bl	800fe78 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f7f3 fbf4 	bl	80002b4 <strlen>
 800cacc:	4602      	mov	r2, r0
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4413      	add	r3, r2
 800cad2:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	3301      	adds	r3, #1
 800cad8:	617b      	str	r3, [r7, #20]
 800cada:	697a      	ldr	r2, [r7, #20]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	429a      	cmp	r2, r3
 800cae0:	d394      	bcc.n	800ca0c <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800cae2:	68b8      	ldr	r0, [r7, #8]
 800cae4:	f001 f904 	bl	800dcf0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cae8:	bf00      	nop
 800caea:	371c      	adds	r7, #28
 800caec:	46bd      	mov	sp, r7
 800caee:	bd90      	pop	{r4, r7, pc}
 800caf0:	20001da4 	.word	0x20001da4
 800caf4:	08010e98 	.word	0x08010e98

0800caf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800caf8:	b480      	push	{r7}
 800cafa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cafc:	4b07      	ldr	r3, [pc, #28]	; (800cb1c <pvTaskIncrementMutexHeldCount+0x24>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d004      	beq.n	800cb0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cb04:	4b05      	ldr	r3, [pc, #20]	; (800cb1c <pvTaskIncrementMutexHeldCount+0x24>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cb0a:	3201      	adds	r2, #1
 800cb0c:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 800cb0e:	4b03      	ldr	r3, [pc, #12]	; (800cb1c <pvTaskIncrementMutexHeldCount+0x24>)
 800cb10:	681b      	ldr	r3, [r3, #0]
	}
 800cb12:	4618      	mov	r0, r3
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	200018d0 	.word	0x200018d0

0800cb20 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b086      	sub	sp, #24
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	60f8      	str	r0, [r7, #12]
 800cb28:	60b9      	str	r1, [r7, #8]
 800cb2a:	607a      	str	r2, [r7, #4]
 800cb2c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800cb2e:	f000 fef1 	bl	800d914 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cb32:	4b29      	ldr	r3, [pc, #164]	; (800cbd8 <xTaskNotifyWait+0xb8>)
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	2b02      	cmp	r3, #2
 800cb3e:	d01c      	beq.n	800cb7a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800cb40:	4b25      	ldr	r3, [pc, #148]	; (800cbd8 <xTaskNotifyWait+0xb8>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800cb48:	68fa      	ldr	r2, [r7, #12]
 800cb4a:	43d2      	mvns	r2, r2
 800cb4c:	400a      	ands	r2, r1
 800cb4e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800cb52:	4b21      	ldr	r3, [pc, #132]	; (800cbd8 <xTaskNotifyWait+0xb8>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2201      	movs	r2, #1
 800cb58:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

				if( xTicksToWait > ( TickType_t ) 0 )
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d00b      	beq.n	800cb7a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cb62:	2101      	movs	r1, #1
 800cb64:	6838      	ldr	r0, [r7, #0]
 800cb66:	f000 fa03 	bl	800cf70 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800cb6a:	4b1c      	ldr	r3, [pc, #112]	; (800cbdc <xTaskNotifyWait+0xbc>)
 800cb6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb70:	601a      	str	r2, [r3, #0]
 800cb72:	f3bf 8f4f 	dsb	sy
 800cb76:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cb7a:	f000 fefb 	bl	800d974 <vPortExitCritical>

		taskENTER_CRITICAL();
 800cb7e:	f000 fec9 	bl	800d914 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d005      	beq.n	800cb94 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800cb88:	4b13      	ldr	r3, [pc, #76]	; (800cbd8 <xTaskNotifyWait+0xb8>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800cb94:	4b10      	ldr	r3, [pc, #64]	; (800cbd8 <xTaskNotifyWait+0xb8>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	d002      	beq.n	800cba8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800cba2:	2300      	movs	r3, #0
 800cba4:	617b      	str	r3, [r7, #20]
 800cba6:	e00a      	b.n	800cbbe <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800cba8:	4b0b      	ldr	r3, [pc, #44]	; (800cbd8 <xTaskNotifyWait+0xb8>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800cbb0:	68ba      	ldr	r2, [r7, #8]
 800cbb2:	43d2      	mvns	r2, r2
 800cbb4:	400a      	ands	r2, r1
 800cbb6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				xReturn = pdTRUE;
 800cbba:	2301      	movs	r3, #1
 800cbbc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cbbe:	4b06      	ldr	r3, [pc, #24]	; (800cbd8 <xTaskNotifyWait+0xb8>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		}
		taskEXIT_CRITICAL();
 800cbc8:	f000 fed4 	bl	800d974 <vPortExitCritical>

		return xReturn;
 800cbcc:	697b      	ldr	r3, [r7, #20]
	}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3718      	adds	r7, #24
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	200018d0 	.word	0x200018d0
 800cbdc:	e000ed04 	.word	0xe000ed04

0800cbe0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b08a      	sub	sp, #40	; 0x28
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	60f8      	str	r0, [r7, #12]
 800cbe8:	60b9      	str	r1, [r7, #8]
 800cbea:	603b      	str	r3, [r7, #0]
 800cbec:	4613      	mov	r3, r2
 800cbee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d10a      	bne.n	800cc10 <xTaskGenericNotify+0x30>
	__asm volatile
 800cbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbfe:	f383 8811 	msr	BASEPRI, r3
 800cc02:	f3bf 8f6f 	isb	sy
 800cc06:	f3bf 8f4f 	dsb	sy
 800cc0a:	61bb      	str	r3, [r7, #24]
}
 800cc0c:	bf00      	nop
 800cc0e:	e7fe      	b.n	800cc0e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800cc14:	f000 fe7e 	bl	800d914 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d004      	beq.n	800cc28 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cc1e:	6a3b      	ldr	r3, [r7, #32]
 800cc20:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cc28:	6a3b      	ldr	r3, [r7, #32]
 800cc2a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800cc2e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cc30:	6a3b      	ldr	r3, [r7, #32]
 800cc32:	2202      	movs	r2, #2
 800cc34:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 800cc38:	79fb      	ldrb	r3, [r7, #7]
 800cc3a:	2b04      	cmp	r3, #4
 800cc3c:	d82d      	bhi.n	800cc9a <xTaskGenericNotify+0xba>
 800cc3e:	a201      	add	r2, pc, #4	; (adr r2, 800cc44 <xTaskGenericNotify+0x64>)
 800cc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc44:	0800ccbd 	.word	0x0800ccbd
 800cc48:	0800cc59 	.word	0x0800cc59
 800cc4c:	0800cc6b 	.word	0x0800cc6b
 800cc50:	0800cc7b 	.word	0x0800cc7b
 800cc54:	0800cc85 	.word	0x0800cc85
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cc58:	6a3b      	ldr	r3, [r7, #32]
 800cc5a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	431a      	orrs	r2, r3
 800cc62:	6a3b      	ldr	r3, [r7, #32]
 800cc64:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800cc68:	e02b      	b.n	800ccc2 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800cc6a:	6a3b      	ldr	r3, [r7, #32]
 800cc6c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800cc70:	1c5a      	adds	r2, r3, #1
 800cc72:	6a3b      	ldr	r3, [r7, #32]
 800cc74:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800cc78:	e023      	b.n	800ccc2 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800cc7a:	6a3b      	ldr	r3, [r7, #32]
 800cc7c:	68ba      	ldr	r2, [r7, #8]
 800cc7e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800cc82:	e01e      	b.n	800ccc2 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800cc84:	7ffb      	ldrb	r3, [r7, #31]
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	d004      	beq.n	800cc94 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800cc8a:	6a3b      	ldr	r3, [r7, #32]
 800cc8c:	68ba      	ldr	r2, [r7, #8]
 800cc8e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800cc92:	e016      	b.n	800ccc2 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800cc94:	2300      	movs	r3, #0
 800cc96:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800cc98:	e013      	b.n	800ccc2 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800cc9a:	6a3b      	ldr	r3, [r7, #32]
 800cc9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800cca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cca4:	d00c      	beq.n	800ccc0 <xTaskGenericNotify+0xe0>
	__asm volatile
 800cca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccaa:	f383 8811 	msr	BASEPRI, r3
 800ccae:	f3bf 8f6f 	isb	sy
 800ccb2:	f3bf 8f4f 	dsb	sy
 800ccb6:	617b      	str	r3, [r7, #20]
}
 800ccb8:	bf00      	nop
 800ccba:	e7fe      	b.n	800ccba <xTaskGenericNotify+0xda>
					break;
 800ccbc:	bf00      	nop
 800ccbe:	e000      	b.n	800ccc2 <xTaskGenericNotify+0xe2>

					break;
 800ccc0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ccc2:	7ffb      	ldrb	r3, [r7, #31]
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d13a      	bne.n	800cd3e <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccc8:	6a3b      	ldr	r3, [r7, #32]
 800ccca:	3304      	adds	r3, #4
 800cccc:	4618      	mov	r0, r3
 800ccce:	f7fd f979 	bl	8009fc4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800ccd2:	6a3b      	ldr	r3, [r7, #32]
 800ccd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd6:	4b1d      	ldr	r3, [pc, #116]	; (800cd4c <xTaskGenericNotify+0x16c>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d903      	bls.n	800cce6 <xTaskGenericNotify+0x106>
 800ccde:	6a3b      	ldr	r3, [r7, #32]
 800cce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cce2:	4a1a      	ldr	r2, [pc, #104]	; (800cd4c <xTaskGenericNotify+0x16c>)
 800cce4:	6013      	str	r3, [r2, #0]
 800cce6:	6a3b      	ldr	r3, [r7, #32]
 800cce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccea:	4613      	mov	r3, r2
 800ccec:	009b      	lsls	r3, r3, #2
 800ccee:	4413      	add	r3, r2
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	4a17      	ldr	r2, [pc, #92]	; (800cd50 <xTaskGenericNotify+0x170>)
 800ccf4:	441a      	add	r2, r3
 800ccf6:	6a3b      	ldr	r3, [r7, #32]
 800ccf8:	3304      	adds	r3, #4
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	4610      	mov	r0, r2
 800ccfe:	f7fd f904 	bl	8009f0a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800cd02:	6a3b      	ldr	r3, [r7, #32]
 800cd04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d00a      	beq.n	800cd20 <xTaskGenericNotify+0x140>
	__asm volatile
 800cd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd0e:	f383 8811 	msr	BASEPRI, r3
 800cd12:	f3bf 8f6f 	isb	sy
 800cd16:	f3bf 8f4f 	dsb	sy
 800cd1a:	613b      	str	r3, [r7, #16]
}
 800cd1c:	bf00      	nop
 800cd1e:	e7fe      	b.n	800cd1e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cd20:	6a3b      	ldr	r3, [r7, #32]
 800cd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd24:	4b0b      	ldr	r3, [pc, #44]	; (800cd54 <xTaskGenericNotify+0x174>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d907      	bls.n	800cd3e <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800cd2e:	4b0a      	ldr	r3, [pc, #40]	; (800cd58 <xTaskGenericNotify+0x178>)
 800cd30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd34:	601a      	str	r2, [r3, #0]
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800cd3e:	f000 fe19 	bl	800d974 <vPortExitCritical>

		return xReturn;
 800cd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3728      	adds	r7, #40	; 0x28
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}
 800cd4c:	20001dac 	.word	0x20001dac
 800cd50:	200018d4 	.word	0x200018d4
 800cd54:	200018d0 	.word	0x200018d0
 800cd58:	e000ed04 	.word	0xe000ed04

0800cd5c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b08e      	sub	sp, #56	; 0x38
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	60f8      	str	r0, [r7, #12]
 800cd64:	60b9      	str	r1, [r7, #8]
 800cd66:	603b      	str	r3, [r7, #0]
 800cd68:	4613      	mov	r3, r2
 800cd6a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d10a      	bne.n	800cd8c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800cd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7a:	f383 8811 	msr	BASEPRI, r3
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd88:	bf00      	nop
 800cd8a:	e7fe      	b.n	800cd8a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd8c:	f000 fea4 	bl	800dad8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800cd94:	f3ef 8211 	mrs	r2, BASEPRI
 800cd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9c:	f383 8811 	msr	BASEPRI, r3
 800cda0:	f3bf 8f6f 	isb	sy
 800cda4:	f3bf 8f4f 	dsb	sy
 800cda8:	623a      	str	r2, [r7, #32]
 800cdaa:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800cdac:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdae:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d004      	beq.n	800cdc0 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800cdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdb8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800cdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800cdc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800cdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdcc:	2202      	movs	r2, #2
 800cdce:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 800cdd2:	79fb      	ldrb	r3, [r7, #7]
 800cdd4:	2b04      	cmp	r3, #4
 800cdd6:	d82f      	bhi.n	800ce38 <xTaskGenericNotifyFromISR+0xdc>
 800cdd8:	a201      	add	r2, pc, #4	; (adr r2, 800cde0 <xTaskGenericNotifyFromISR+0x84>)
 800cdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdde:	bf00      	nop
 800cde0:	0800ce5b 	.word	0x0800ce5b
 800cde4:	0800cdf5 	.word	0x0800cdf5
 800cde8:	0800ce07 	.word	0x0800ce07
 800cdec:	0800ce17 	.word	0x0800ce17
 800cdf0:	0800ce21 	.word	0x0800ce21
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800cdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	431a      	orrs	r2, r3
 800cdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce00:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800ce04:	e02c      	b.n	800ce60 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ce06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce08:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ce0c:	1c5a      	adds	r2, r3, #1
 800ce0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce10:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800ce14:	e024      	b.n	800ce60 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ce16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800ce1e:	e01f      	b.n	800ce60 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ce20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce24:	2b02      	cmp	r3, #2
 800ce26:	d004      	beq.n	800ce32 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ce28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2a:	68ba      	ldr	r2, [r7, #8]
 800ce2c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ce30:	e016      	b.n	800ce60 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800ce32:	2300      	movs	r3, #0
 800ce34:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800ce36:	e013      	b.n	800ce60 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800ce3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ce42:	d00c      	beq.n	800ce5e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800ce44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce48:	f383 8811 	msr	BASEPRI, r3
 800ce4c:	f3bf 8f6f 	isb	sy
 800ce50:	f3bf 8f4f 	dsb	sy
 800ce54:	61bb      	str	r3, [r7, #24]
}
 800ce56:	bf00      	nop
 800ce58:	e7fe      	b.n	800ce58 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800ce5a:	bf00      	nop
 800ce5c:	e000      	b.n	800ce60 <xTaskGenericNotifyFromISR+0x104>
					break;
 800ce5e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ce60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce64:	2b01      	cmp	r3, #1
 800ce66:	d146      	bne.n	800cef6 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ce68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00a      	beq.n	800ce86 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800ce70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	617b      	str	r3, [r7, #20]
}
 800ce82:	bf00      	nop
 800ce84:	e7fe      	b.n	800ce84 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce86:	4b21      	ldr	r3, [pc, #132]	; (800cf0c <xTaskGenericNotifyFromISR+0x1b0>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d11d      	bne.n	800ceca <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce90:	3304      	adds	r3, #4
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fd f896 	bl	8009fc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce9c:	4b1c      	ldr	r3, [pc, #112]	; (800cf10 <xTaskGenericNotifyFromISR+0x1b4>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d903      	bls.n	800ceac <xTaskGenericNotifyFromISR+0x150>
 800cea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cea8:	4a19      	ldr	r2, [pc, #100]	; (800cf10 <xTaskGenericNotifyFromISR+0x1b4>)
 800ceaa:	6013      	str	r3, [r2, #0]
 800ceac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	4413      	add	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4a16      	ldr	r2, [pc, #88]	; (800cf14 <xTaskGenericNotifyFromISR+0x1b8>)
 800ceba:	441a      	add	r2, r3
 800cebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cebe:	3304      	adds	r3, #4
 800cec0:	4619      	mov	r1, r3
 800cec2:	4610      	mov	r0, r2
 800cec4:	f7fd f821 	bl	8009f0a <vListInsertEnd>
 800cec8:	e005      	b.n	800ced6 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ceca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cecc:	3318      	adds	r3, #24
 800cece:	4619      	mov	r1, r3
 800ced0:	4811      	ldr	r0, [pc, #68]	; (800cf18 <xTaskGenericNotifyFromISR+0x1bc>)
 800ced2:	f7fd f81a 	bl	8009f0a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ced6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceda:	4b10      	ldr	r3, [pc, #64]	; (800cf1c <xTaskGenericNotifyFromISR+0x1c0>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee0:	429a      	cmp	r2, r3
 800cee2:	d908      	bls.n	800cef6 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800cee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d002      	beq.n	800cef0 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ceea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ceec:	2201      	movs	r2, #1
 800ceee:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800cef0:	4b0b      	ldr	r3, [pc, #44]	; (800cf20 <xTaskGenericNotifyFromISR+0x1c4>)
 800cef2:	2201      	movs	r2, #1
 800cef4:	601a      	str	r2, [r3, #0]
 800cef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cefa:	693b      	ldr	r3, [r7, #16]
 800cefc:	f383 8811 	msr	BASEPRI, r3
}
 800cf00:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800cf02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3738      	adds	r7, #56	; 0x38
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	20001dcc 	.word	0x20001dcc
 800cf10:	20001dac 	.word	0x20001dac
 800cf14:	200018d4 	.word	0x200018d4
 800cf18:	20001d64 	.word	0x20001d64
 800cf1c:	200018d0 	.word	0x200018d0
 800cf20:	20001db8 	.word	0x20001db8

0800cf24 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b084      	sub	sp, #16
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d102      	bne.n	800cf38 <xTaskNotifyStateClear+0x14>
 800cf32:	4b0e      	ldr	r3, [pc, #56]	; (800cf6c <xTaskNotifyStateClear+0x48>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	e000      	b.n	800cf3a <xTaskNotifyStateClear+0x16>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800cf3c:	f000 fcea 	bl	800d914 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	d106      	bne.n	800cf5a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	2200      	movs	r2, #0
 800cf50:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				xReturn = pdPASS;
 800cf54:	2301      	movs	r3, #1
 800cf56:	60fb      	str	r3, [r7, #12]
 800cf58:	e001      	b.n	800cf5e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800cf5e:	f000 fd09 	bl	800d974 <vPortExitCritical>

		return xReturn;
 800cf62:	68fb      	ldr	r3, [r7, #12]
	}
 800cf64:	4618      	mov	r0, r3
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}
 800cf6c:	200018d0 	.word	0x200018d0

0800cf70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
 800cf78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800cf7a:	4b21      	ldr	r3, [pc, #132]	; (800d000 <prvAddCurrentTaskToDelayedList+0x90>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf80:	4b20      	ldr	r3, [pc, #128]	; (800d004 <prvAddCurrentTaskToDelayedList+0x94>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	3304      	adds	r3, #4
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fd f81c 	bl	8009fc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf92:	d10a      	bne.n	800cfaa <prvAddCurrentTaskToDelayedList+0x3a>
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d007      	beq.n	800cfaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cf9a:	4b1a      	ldr	r3, [pc, #104]	; (800d004 <prvAddCurrentTaskToDelayedList+0x94>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	4619      	mov	r1, r3
 800cfa2:	4819      	ldr	r0, [pc, #100]	; (800d008 <prvAddCurrentTaskToDelayedList+0x98>)
 800cfa4:	f7fc ffb1 	bl	8009f0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800cfa8:	e026      	b.n	800cff8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800cfaa:	68fa      	ldr	r2, [r7, #12]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4413      	add	r3, r2
 800cfb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800cfb2:	4b14      	ldr	r3, [pc, #80]	; (800d004 <prvAddCurrentTaskToDelayedList+0x94>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	68ba      	ldr	r2, [r7, #8]
 800cfb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800cfba:	68ba      	ldr	r2, [r7, #8]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	429a      	cmp	r2, r3
 800cfc0:	d209      	bcs.n	800cfd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfc2:	4b12      	ldr	r3, [pc, #72]	; (800d00c <prvAddCurrentTaskToDelayedList+0x9c>)
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	4b0f      	ldr	r3, [pc, #60]	; (800d004 <prvAddCurrentTaskToDelayedList+0x94>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	3304      	adds	r3, #4
 800cfcc:	4619      	mov	r1, r3
 800cfce:	4610      	mov	r0, r2
 800cfd0:	f7fc ffbf 	bl	8009f52 <vListInsert>
}
 800cfd4:	e010      	b.n	800cff8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cfd6:	4b0e      	ldr	r3, [pc, #56]	; (800d010 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cfd8:	681a      	ldr	r2, [r3, #0]
 800cfda:	4b0a      	ldr	r3, [pc, #40]	; (800d004 <prvAddCurrentTaskToDelayedList+0x94>)
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	3304      	adds	r3, #4
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	4610      	mov	r0, r2
 800cfe4:	f7fc ffb5 	bl	8009f52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cfe8:	4b0a      	ldr	r3, [pc, #40]	; (800d014 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	68ba      	ldr	r2, [r7, #8]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d202      	bcs.n	800cff8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cff2:	4a08      	ldr	r2, [pc, #32]	; (800d014 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	6013      	str	r3, [r2, #0]
}
 800cff8:	bf00      	nop
 800cffa:	3710      	adds	r7, #16
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	20001da8 	.word	0x20001da8
 800d004:	200018d0 	.word	0x200018d0
 800d008:	20001d90 	.word	0x20001d90
 800d00c:	20001d60 	.word	0x20001d60
 800d010:	20001d5c 	.word	0x20001d5c
 800d014:	20001dc4 	.word	0x20001dc4

0800d018 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b08a      	sub	sp, #40	; 0x28
 800d01c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d01e:	2300      	movs	r3, #0
 800d020:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d022:	f000 fb07 	bl	800d634 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d026:	4b1c      	ldr	r3, [pc, #112]	; (800d098 <xTimerCreateTimerTask+0x80>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d021      	beq.n	800d072 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d02e:	2300      	movs	r3, #0
 800d030:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d032:	2300      	movs	r3, #0
 800d034:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d036:	1d3a      	adds	r2, r7, #4
 800d038:	f107 0108 	add.w	r1, r7, #8
 800d03c:	f107 030c 	add.w	r3, r7, #12
 800d040:	4618      	mov	r0, r3
 800d042:	f7fc ff1b 	bl	8009e7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d046:	6879      	ldr	r1, [r7, #4]
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	68fa      	ldr	r2, [r7, #12]
 800d04c:	9202      	str	r2, [sp, #8]
 800d04e:	9301      	str	r3, [sp, #4]
 800d050:	2302      	movs	r3, #2
 800d052:	9300      	str	r3, [sp, #0]
 800d054:	2300      	movs	r3, #0
 800d056:	460a      	mov	r2, r1
 800d058:	4910      	ldr	r1, [pc, #64]	; (800d09c <xTimerCreateTimerTask+0x84>)
 800d05a:	4811      	ldr	r0, [pc, #68]	; (800d0a0 <xTimerCreateTimerTask+0x88>)
 800d05c:	f7fe f9f4 	bl	800b448 <xTaskCreateStatic>
 800d060:	4603      	mov	r3, r0
 800d062:	4a10      	ldr	r2, [pc, #64]	; (800d0a4 <xTimerCreateTimerTask+0x8c>)
 800d064:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d066:	4b0f      	ldr	r3, [pc, #60]	; (800d0a4 <xTimerCreateTimerTask+0x8c>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d001      	beq.n	800d072 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d06e:	2301      	movs	r3, #1
 800d070:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d10a      	bne.n	800d08e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800d078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07c:	f383 8811 	msr	BASEPRI, r3
 800d080:	f3bf 8f6f 	isb	sy
 800d084:	f3bf 8f4f 	dsb	sy
 800d088:	613b      	str	r3, [r7, #16]
}
 800d08a:	bf00      	nop
 800d08c:	e7fe      	b.n	800d08c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800d08e:	697b      	ldr	r3, [r7, #20]
}
 800d090:	4618      	mov	r0, r3
 800d092:	3718      	adds	r7, #24
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	20001e00 	.word	0x20001e00
 800d09c:	08010ea8 	.word	0x08010ea8
 800d0a0:	0800d1dd 	.word	0x0800d1dd
 800d0a4:	20001e04 	.word	0x20001e04

0800d0a8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b08a      	sub	sp, #40	; 0x28
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	607a      	str	r2, [r7, #4]
 800d0b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10a      	bne.n	800d0d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	623b      	str	r3, [r7, #32]
}
 800d0d2:	bf00      	nop
 800d0d4:	e7fe      	b.n	800d0d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d0d6:	4b1a      	ldr	r3, [pc, #104]	; (800d140 <xTimerGenericCommand+0x98>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d02a      	beq.n	800d134 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	2b05      	cmp	r3, #5
 800d0ee:	dc18      	bgt.n	800d122 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d0f0:	f7ff fad0 	bl	800c694 <xTaskGetSchedulerState>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	d109      	bne.n	800d10e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d0fa:	4b11      	ldr	r3, [pc, #68]	; (800d140 <xTimerGenericCommand+0x98>)
 800d0fc:	6818      	ldr	r0, [r3, #0]
 800d0fe:	f107 0110 	add.w	r1, r7, #16
 800d102:	2300      	movs	r3, #0
 800d104:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d106:	f7fd f8c5 	bl	800a294 <xQueueGenericSend>
 800d10a:	6278      	str	r0, [r7, #36]	; 0x24
 800d10c:	e012      	b.n	800d134 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d10e:	4b0c      	ldr	r3, [pc, #48]	; (800d140 <xTimerGenericCommand+0x98>)
 800d110:	6818      	ldr	r0, [r3, #0]
 800d112:	f107 0110 	add.w	r1, r7, #16
 800d116:	2300      	movs	r3, #0
 800d118:	2200      	movs	r2, #0
 800d11a:	f7fd f8bb 	bl	800a294 <xQueueGenericSend>
 800d11e:	6278      	str	r0, [r7, #36]	; 0x24
 800d120:	e008      	b.n	800d134 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d122:	4b07      	ldr	r3, [pc, #28]	; (800d140 <xTimerGenericCommand+0x98>)
 800d124:	6818      	ldr	r0, [r3, #0]
 800d126:	f107 0110 	add.w	r1, r7, #16
 800d12a:	2300      	movs	r3, #0
 800d12c:	683a      	ldr	r2, [r7, #0]
 800d12e:	f7fd f9af 	bl	800a490 <xQueueGenericSendFromISR>
 800d132:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d136:	4618      	mov	r0, r3
 800d138:	3728      	adds	r7, #40	; 0x28
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	20001e00 	.word	0x20001e00

0800d144 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b088      	sub	sp, #32
 800d148:	af02      	add	r7, sp, #8
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d14e:	4b22      	ldr	r3, [pc, #136]	; (800d1d8 <prvProcessExpiredTimer+0x94>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	68db      	ldr	r3, [r3, #12]
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	3304      	adds	r3, #4
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fc ff31 	bl	8009fc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d162:	697b      	ldr	r3, [r7, #20]
 800d164:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d168:	f003 0304 	and.w	r3, r3, #4
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d022      	beq.n	800d1b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	699a      	ldr	r2, [r3, #24]
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	18d1      	adds	r1, r2, r3
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	683a      	ldr	r2, [r7, #0]
 800d17c:	6978      	ldr	r0, [r7, #20]
 800d17e:	f000 f8d1 	bl	800d324 <prvInsertTimerInActiveList>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	d01f      	beq.n	800d1c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d188:	2300      	movs	r3, #0
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	2300      	movs	r3, #0
 800d18e:	687a      	ldr	r2, [r7, #4]
 800d190:	2100      	movs	r1, #0
 800d192:	6978      	ldr	r0, [r7, #20]
 800d194:	f7ff ff88 	bl	800d0a8 <xTimerGenericCommand>
 800d198:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d113      	bne.n	800d1c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800d1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	60fb      	str	r3, [r7, #12]
}
 800d1b2:	bf00      	nop
 800d1b4:	e7fe      	b.n	800d1b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d1bc:	f023 0301 	bic.w	r3, r3, #1
 800d1c0:	b2da      	uxtb	r2, r3
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	6a1b      	ldr	r3, [r3, #32]
 800d1cc:	6978      	ldr	r0, [r7, #20]
 800d1ce:	4798      	blx	r3
}
 800d1d0:	bf00      	nop
 800d1d2:	3718      	adds	r7, #24
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}
 800d1d8:	20001df8 	.word	0x20001df8

0800d1dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d1e4:	f107 0308 	add.w	r3, r7, #8
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f000 f857 	bl	800d29c <prvGetNextExpireTime>
 800d1ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	68f8      	ldr	r0, [r7, #12]
 800d1f6:	f000 f803 	bl	800d200 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d1fa:	f000 f8d5 	bl	800d3a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d1fe:	e7f1      	b.n	800d1e4 <prvTimerTask+0x8>

0800d200 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d20a:	f7fe fce5 	bl	800bbd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d20e:	f107 0308 	add.w	r3, r7, #8
 800d212:	4618      	mov	r0, r3
 800d214:	f000 f866 	bl	800d2e4 <prvSampleTimeNow>
 800d218:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d130      	bne.n	800d282 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d10a      	bne.n	800d23c <prvProcessTimerOrBlockTask+0x3c>
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d806      	bhi.n	800d23c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d22e:	f7fe fce1 	bl	800bbf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d232:	68f9      	ldr	r1, [r7, #12]
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f7ff ff85 	bl	800d144 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d23a:	e024      	b.n	800d286 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d008      	beq.n	800d254 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d242:	4b13      	ldr	r3, [pc, #76]	; (800d290 <prvProcessTimerOrBlockTask+0x90>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d101      	bne.n	800d250 <prvProcessTimerOrBlockTask+0x50>
 800d24c:	2301      	movs	r3, #1
 800d24e:	e000      	b.n	800d252 <prvProcessTimerOrBlockTask+0x52>
 800d250:	2300      	movs	r3, #0
 800d252:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d254:	4b0f      	ldr	r3, [pc, #60]	; (800d294 <prvProcessTimerOrBlockTask+0x94>)
 800d256:	6818      	ldr	r0, [r3, #0]
 800d258:	687a      	ldr	r2, [r7, #4]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	1ad3      	subs	r3, r2, r3
 800d25e:	683a      	ldr	r2, [r7, #0]
 800d260:	4619      	mov	r1, r3
 800d262:	f7fd fd7b 	bl	800ad5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d266:	f7fe fcc5 	bl	800bbf4 <xTaskResumeAll>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d10a      	bne.n	800d286 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d270:	4b09      	ldr	r3, [pc, #36]	; (800d298 <prvProcessTimerOrBlockTask+0x98>)
 800d272:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d276:	601a      	str	r2, [r3, #0]
 800d278:	f3bf 8f4f 	dsb	sy
 800d27c:	f3bf 8f6f 	isb	sy
}
 800d280:	e001      	b.n	800d286 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d282:	f7fe fcb7 	bl	800bbf4 <xTaskResumeAll>
}
 800d286:	bf00      	nop
 800d288:	3710      	adds	r7, #16
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	20001dfc 	.word	0x20001dfc
 800d294:	20001e00 	.word	0x20001e00
 800d298:	e000ed04 	.word	0xe000ed04

0800d29c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d29c:	b480      	push	{r7}
 800d29e:	b085      	sub	sp, #20
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d2a4:	4b0e      	ldr	r3, [pc, #56]	; (800d2e0 <prvGetNextExpireTime+0x44>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d101      	bne.n	800d2b2 <prvGetNextExpireTime+0x16>
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	e000      	b.n	800d2b4 <prvGetNextExpireTime+0x18>
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d105      	bne.n	800d2cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d2c0:	4b07      	ldr	r3, [pc, #28]	; (800d2e0 <prvGetNextExpireTime+0x44>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	68db      	ldr	r3, [r3, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	60fb      	str	r3, [r7, #12]
 800d2ca:	e001      	b.n	800d2d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
}
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	3714      	adds	r7, #20
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	20001df8 	.word	0x20001df8

0800d2e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d2ec:	f7fe fd20 	bl	800bd30 <xTaskGetTickCount>
 800d2f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d2f2:	4b0b      	ldr	r3, [pc, #44]	; (800d320 <prvSampleTimeNow+0x3c>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d205      	bcs.n	800d308 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d2fc:	f000 f936 	bl	800d56c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2201      	movs	r2, #1
 800d304:	601a      	str	r2, [r3, #0]
 800d306:	e002      	b.n	800d30e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d30e:	4a04      	ldr	r2, [pc, #16]	; (800d320 <prvSampleTimeNow+0x3c>)
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d314:	68fb      	ldr	r3, [r7, #12]
}
 800d316:	4618      	mov	r0, r3
 800d318:	3710      	adds	r7, #16
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	20001e08 	.word	0x20001e08

0800d324 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b086      	sub	sp, #24
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	607a      	str	r2, [r7, #4]
 800d330:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d332:	2300      	movs	r3, #0
 800d334:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	68ba      	ldr	r2, [r7, #8]
 800d33a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d342:	68ba      	ldr	r2, [r7, #8]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	429a      	cmp	r2, r3
 800d348:	d812      	bhi.n	800d370 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d34a:	687a      	ldr	r2, [r7, #4]
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	1ad2      	subs	r2, r2, r3
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	699b      	ldr	r3, [r3, #24]
 800d354:	429a      	cmp	r2, r3
 800d356:	d302      	bcc.n	800d35e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d358:	2301      	movs	r3, #1
 800d35a:	617b      	str	r3, [r7, #20]
 800d35c:	e01b      	b.n	800d396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d35e:	4b10      	ldr	r3, [pc, #64]	; (800d3a0 <prvInsertTimerInActiveList+0x7c>)
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	3304      	adds	r3, #4
 800d366:	4619      	mov	r1, r3
 800d368:	4610      	mov	r0, r2
 800d36a:	f7fc fdf2 	bl	8009f52 <vListInsert>
 800d36e:	e012      	b.n	800d396 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	429a      	cmp	r2, r3
 800d376:	d206      	bcs.n	800d386 <prvInsertTimerInActiveList+0x62>
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d302      	bcc.n	800d386 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d380:	2301      	movs	r3, #1
 800d382:	617b      	str	r3, [r7, #20]
 800d384:	e007      	b.n	800d396 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d386:	4b07      	ldr	r3, [pc, #28]	; (800d3a4 <prvInsertTimerInActiveList+0x80>)
 800d388:	681a      	ldr	r2, [r3, #0]
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	3304      	adds	r3, #4
 800d38e:	4619      	mov	r1, r3
 800d390:	4610      	mov	r0, r2
 800d392:	f7fc fdde 	bl	8009f52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d396:	697b      	ldr	r3, [r7, #20]
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3718      	adds	r7, #24
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	20001dfc 	.word	0x20001dfc
 800d3a4:	20001df8 	.word	0x20001df8

0800d3a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b08e      	sub	sp, #56	; 0x38
 800d3ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d3ae:	e0ca      	b.n	800d546 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	da18      	bge.n	800d3e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d3b6:	1d3b      	adds	r3, r7, #4
 800d3b8:	3304      	adds	r3, #4
 800d3ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d10a      	bne.n	800d3d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800d3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3c6:	f383 8811 	msr	BASEPRI, r3
 800d3ca:	f3bf 8f6f 	isb	sy
 800d3ce:	f3bf 8f4f 	dsb	sy
 800d3d2:	61fb      	str	r3, [r7, #28]
}
 800d3d4:	bf00      	nop
 800d3d6:	e7fe      	b.n	800d3d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3de:	6850      	ldr	r0, [r2, #4]
 800d3e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3e2:	6892      	ldr	r2, [r2, #8]
 800d3e4:	4611      	mov	r1, r2
 800d3e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f2c0 80aa 	blt.w	800d544 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f6:	695b      	ldr	r3, [r3, #20]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d004      	beq.n	800d406 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fe:	3304      	adds	r3, #4
 800d400:	4618      	mov	r0, r3
 800d402:	f7fc fddf 	bl	8009fc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d406:	463b      	mov	r3, r7
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff ff6b 	bl	800d2e4 <prvSampleTimeNow>
 800d40e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2b09      	cmp	r3, #9
 800d414:	f200 8097 	bhi.w	800d546 <prvProcessReceivedCommands+0x19e>
 800d418:	a201      	add	r2, pc, #4	; (adr r2, 800d420 <prvProcessReceivedCommands+0x78>)
 800d41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d41e:	bf00      	nop
 800d420:	0800d449 	.word	0x0800d449
 800d424:	0800d449 	.word	0x0800d449
 800d428:	0800d449 	.word	0x0800d449
 800d42c:	0800d4bd 	.word	0x0800d4bd
 800d430:	0800d4d1 	.word	0x0800d4d1
 800d434:	0800d51b 	.word	0x0800d51b
 800d438:	0800d449 	.word	0x0800d449
 800d43c:	0800d449 	.word	0x0800d449
 800d440:	0800d4bd 	.word	0x0800d4bd
 800d444:	0800d4d1 	.word	0x0800d4d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d44e:	f043 0301 	orr.w	r3, r3, #1
 800d452:	b2da      	uxtb	r2, r3
 800d454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d456:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d45a:	68ba      	ldr	r2, [r7, #8]
 800d45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45e:	699b      	ldr	r3, [r3, #24]
 800d460:	18d1      	adds	r1, r2, r3
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d468:	f7ff ff5c 	bl	800d324 <prvInsertTimerInActiveList>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d069      	beq.n	800d546 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d474:	6a1b      	ldr	r3, [r3, #32]
 800d476:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d478:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d480:	f003 0304 	and.w	r3, r3, #4
 800d484:	2b00      	cmp	r3, #0
 800d486:	d05e      	beq.n	800d546 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d488:	68ba      	ldr	r2, [r7, #8]
 800d48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d48c:	699b      	ldr	r3, [r3, #24]
 800d48e:	441a      	add	r2, r3
 800d490:	2300      	movs	r3, #0
 800d492:	9300      	str	r3, [sp, #0]
 800d494:	2300      	movs	r3, #0
 800d496:	2100      	movs	r1, #0
 800d498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d49a:	f7ff fe05 	bl	800d0a8 <xTimerGenericCommand>
 800d49e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d4a0:	6a3b      	ldr	r3, [r7, #32]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d14f      	bne.n	800d546 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800d4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4aa:	f383 8811 	msr	BASEPRI, r3
 800d4ae:	f3bf 8f6f 	isb	sy
 800d4b2:	f3bf 8f4f 	dsb	sy
 800d4b6:	61bb      	str	r3, [r7, #24]
}
 800d4b8:	bf00      	nop
 800d4ba:	e7fe      	b.n	800d4ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4c2:	f023 0301 	bic.w	r3, r3, #1
 800d4c6:	b2da      	uxtb	r2, r3
 800d4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d4ce:	e03a      	b.n	800d546 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4d6:	f043 0301 	orr.w	r3, r3, #1
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d4e2:	68ba      	ldr	r2, [r7, #8]
 800d4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ea:	699b      	ldr	r3, [r3, #24]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10a      	bne.n	800d506 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800d4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f4:	f383 8811 	msr	BASEPRI, r3
 800d4f8:	f3bf 8f6f 	isb	sy
 800d4fc:	f3bf 8f4f 	dsb	sy
 800d500:	617b      	str	r3, [r7, #20]
}
 800d502:	bf00      	nop
 800d504:	e7fe      	b.n	800d504 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d508:	699a      	ldr	r2, [r3, #24]
 800d50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50c:	18d1      	adds	r1, r2, r3
 800d50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d514:	f7ff ff06 	bl	800d324 <prvInsertTimerInActiveList>
					break;
 800d518:	e015      	b.n	800d546 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d520:	f003 0302 	and.w	r3, r3, #2
 800d524:	2b00      	cmp	r3, #0
 800d526:	d103      	bne.n	800d530 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800d528:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d52a:	f000 fbe1 	bl	800dcf0 <vPortFree>
 800d52e:	e00a      	b.n	800d546 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d536:	f023 0301 	bic.w	r3, r3, #1
 800d53a:	b2da      	uxtb	r2, r3
 800d53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d542:	e000      	b.n	800d546 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d544:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d546:	4b08      	ldr	r3, [pc, #32]	; (800d568 <prvProcessReceivedCommands+0x1c0>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	1d39      	adds	r1, r7, #4
 800d54c:	2200      	movs	r2, #0
 800d54e:	4618      	mov	r0, r3
 800d550:	f7fd f8c6 	bl	800a6e0 <xQueueReceive>
 800d554:	4603      	mov	r3, r0
 800d556:	2b00      	cmp	r3, #0
 800d558:	f47f af2a 	bne.w	800d3b0 <prvProcessReceivedCommands+0x8>
	}
}
 800d55c:	bf00      	nop
 800d55e:	bf00      	nop
 800d560:	3730      	adds	r7, #48	; 0x30
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	20001e00 	.word	0x20001e00

0800d56c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b088      	sub	sp, #32
 800d570:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d572:	e048      	b.n	800d606 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d574:	4b2d      	ldr	r3, [pc, #180]	; (800d62c <prvSwitchTimerLists+0xc0>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	68db      	ldr	r3, [r3, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d57e:	4b2b      	ldr	r3, [pc, #172]	; (800d62c <prvSwitchTimerLists+0xc0>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	68db      	ldr	r3, [r3, #12]
 800d586:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	3304      	adds	r3, #4
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7fc fd19 	bl	8009fc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6a1b      	ldr	r3, [r3, #32]
 800d596:	68f8      	ldr	r0, [r7, #12]
 800d598:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5a0:	f003 0304 	and.w	r3, r3, #4
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d02e      	beq.n	800d606 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	699b      	ldr	r3, [r3, #24]
 800d5ac:	693a      	ldr	r2, [r7, #16]
 800d5ae:	4413      	add	r3, r2
 800d5b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d5b2:	68ba      	ldr	r2, [r7, #8]
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d90e      	bls.n	800d5d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	68ba      	ldr	r2, [r7, #8]
 800d5be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	68fa      	ldr	r2, [r7, #12]
 800d5c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d5c6:	4b19      	ldr	r3, [pc, #100]	; (800d62c <prvSwitchTimerLists+0xc0>)
 800d5c8:	681a      	ldr	r2, [r3, #0]
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	3304      	adds	r3, #4
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	4610      	mov	r0, r2
 800d5d2:	f7fc fcbe 	bl	8009f52 <vListInsert>
 800d5d6:	e016      	b.n	800d606 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d5d8:	2300      	movs	r3, #0
 800d5da:	9300      	str	r3, [sp, #0]
 800d5dc:	2300      	movs	r3, #0
 800d5de:	693a      	ldr	r2, [r7, #16]
 800d5e0:	2100      	movs	r1, #0
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f7ff fd60 	bl	800d0a8 <xTimerGenericCommand>
 800d5e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d10a      	bne.n	800d606 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800d5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f4:	f383 8811 	msr	BASEPRI, r3
 800d5f8:	f3bf 8f6f 	isb	sy
 800d5fc:	f3bf 8f4f 	dsb	sy
 800d600:	603b      	str	r3, [r7, #0]
}
 800d602:	bf00      	nop
 800d604:	e7fe      	b.n	800d604 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d606:	4b09      	ldr	r3, [pc, #36]	; (800d62c <prvSwitchTimerLists+0xc0>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d1b1      	bne.n	800d574 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d610:	4b06      	ldr	r3, [pc, #24]	; (800d62c <prvSwitchTimerLists+0xc0>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d616:	4b06      	ldr	r3, [pc, #24]	; (800d630 <prvSwitchTimerLists+0xc4>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	4a04      	ldr	r2, [pc, #16]	; (800d62c <prvSwitchTimerLists+0xc0>)
 800d61c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d61e:	4a04      	ldr	r2, [pc, #16]	; (800d630 <prvSwitchTimerLists+0xc4>)
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	6013      	str	r3, [r2, #0]
}
 800d624:	bf00      	nop
 800d626:	3718      	adds	r7, #24
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}
 800d62c:	20001df8 	.word	0x20001df8
 800d630:	20001dfc 	.word	0x20001dfc

0800d634 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d63a:	f000 f96b 	bl	800d914 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d63e:	4b15      	ldr	r3, [pc, #84]	; (800d694 <prvCheckForValidListAndQueue+0x60>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d120      	bne.n	800d688 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d646:	4814      	ldr	r0, [pc, #80]	; (800d698 <prvCheckForValidListAndQueue+0x64>)
 800d648:	f7fc fc32 	bl	8009eb0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d64c:	4813      	ldr	r0, [pc, #76]	; (800d69c <prvCheckForValidListAndQueue+0x68>)
 800d64e:	f7fc fc2f 	bl	8009eb0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d652:	4b13      	ldr	r3, [pc, #76]	; (800d6a0 <prvCheckForValidListAndQueue+0x6c>)
 800d654:	4a10      	ldr	r2, [pc, #64]	; (800d698 <prvCheckForValidListAndQueue+0x64>)
 800d656:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d658:	4b12      	ldr	r3, [pc, #72]	; (800d6a4 <prvCheckForValidListAndQueue+0x70>)
 800d65a:	4a10      	ldr	r2, [pc, #64]	; (800d69c <prvCheckForValidListAndQueue+0x68>)
 800d65c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d65e:	2300      	movs	r3, #0
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	4b11      	ldr	r3, [pc, #68]	; (800d6a8 <prvCheckForValidListAndQueue+0x74>)
 800d664:	4a11      	ldr	r2, [pc, #68]	; (800d6ac <prvCheckForValidListAndQueue+0x78>)
 800d666:	2110      	movs	r1, #16
 800d668:	200a      	movs	r0, #10
 800d66a:	f7fc fd3d 	bl	800a0e8 <xQueueGenericCreateStatic>
 800d66e:	4603      	mov	r3, r0
 800d670:	4a08      	ldr	r2, [pc, #32]	; (800d694 <prvCheckForValidListAndQueue+0x60>)
 800d672:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d674:	4b07      	ldr	r3, [pc, #28]	; (800d694 <prvCheckForValidListAndQueue+0x60>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d005      	beq.n	800d688 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d67c:	4b05      	ldr	r3, [pc, #20]	; (800d694 <prvCheckForValidListAndQueue+0x60>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	490b      	ldr	r1, [pc, #44]	; (800d6b0 <prvCheckForValidListAndQueue+0x7c>)
 800d682:	4618      	mov	r0, r3
 800d684:	f7fd fb40 	bl	800ad08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d688:	f000 f974 	bl	800d974 <vPortExitCritical>
}
 800d68c:	bf00      	nop
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	20001e00 	.word	0x20001e00
 800d698:	20001dd0 	.word	0x20001dd0
 800d69c:	20001de4 	.word	0x20001de4
 800d6a0:	20001df8 	.word	0x20001df8
 800d6a4:	20001dfc 	.word	0x20001dfc
 800d6a8:	20001eac 	.word	0x20001eac
 800d6ac:	20001e0c 	.word	0x20001e0c
 800d6b0:	08010eb0 	.word	0x08010eb0

0800d6b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d6b4:	b480      	push	{r7}
 800d6b6:	b085      	sub	sp, #20
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	60f8      	str	r0, [r7, #12]
 800d6bc:	60b9      	str	r1, [r7, #8]
 800d6be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	3b04      	subs	r3, #4
 800d6c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d6cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	3b04      	subs	r3, #4
 800d6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	f023 0201 	bic.w	r2, r3, #1
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	3b04      	subs	r3, #4
 800d6e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d6e4:	4a0c      	ldr	r2, [pc, #48]	; (800d718 <pxPortInitialiseStack+0x64>)
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	3b14      	subs	r3, #20
 800d6ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d6f0:	687a      	ldr	r2, [r7, #4]
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	3b04      	subs	r3, #4
 800d6fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f06f 0202 	mvn.w	r2, #2
 800d702:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	3b20      	subs	r3, #32
 800d708:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d70a:	68fb      	ldr	r3, [r7, #12]
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3714      	adds	r7, #20
 800d710:	46bd      	mov	sp, r7
 800d712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d716:	4770      	bx	lr
 800d718:	0800d71d 	.word	0x0800d71d

0800d71c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d71c:	b480      	push	{r7}
 800d71e:	b085      	sub	sp, #20
 800d720:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d722:	2300      	movs	r3, #0
 800d724:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d726:	4b12      	ldr	r3, [pc, #72]	; (800d770 <prvTaskExitError+0x54>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d72e:	d00a      	beq.n	800d746 <prvTaskExitError+0x2a>
	__asm volatile
 800d730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d734:	f383 8811 	msr	BASEPRI, r3
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	60fb      	str	r3, [r7, #12]
}
 800d742:	bf00      	nop
 800d744:	e7fe      	b.n	800d744 <prvTaskExitError+0x28>
	__asm volatile
 800d746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d74a:	f383 8811 	msr	BASEPRI, r3
 800d74e:	f3bf 8f6f 	isb	sy
 800d752:	f3bf 8f4f 	dsb	sy
 800d756:	60bb      	str	r3, [r7, #8]
}
 800d758:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d75a:	bf00      	nop
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d0fc      	beq.n	800d75c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d762:	bf00      	nop
 800d764:	bf00      	nop
 800d766:	3714      	adds	r7, #20
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr
 800d770:	200000a4 	.word	0x200000a4
	...

0800d780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d780:	4b07      	ldr	r3, [pc, #28]	; (800d7a0 <pxCurrentTCBConst2>)
 800d782:	6819      	ldr	r1, [r3, #0]
 800d784:	6808      	ldr	r0, [r1, #0]
 800d786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d78a:	f380 8809 	msr	PSP, r0
 800d78e:	f3bf 8f6f 	isb	sy
 800d792:	f04f 0000 	mov.w	r0, #0
 800d796:	f380 8811 	msr	BASEPRI, r0
 800d79a:	4770      	bx	lr
 800d79c:	f3af 8000 	nop.w

0800d7a0 <pxCurrentTCBConst2>:
 800d7a0:	200018d0 	.word	0x200018d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d7a4:	bf00      	nop
 800d7a6:	bf00      	nop

0800d7a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d7a8:	4808      	ldr	r0, [pc, #32]	; (800d7cc <prvPortStartFirstTask+0x24>)
 800d7aa:	6800      	ldr	r0, [r0, #0]
 800d7ac:	6800      	ldr	r0, [r0, #0]
 800d7ae:	f380 8808 	msr	MSP, r0
 800d7b2:	f04f 0000 	mov.w	r0, #0
 800d7b6:	f380 8814 	msr	CONTROL, r0
 800d7ba:	b662      	cpsie	i
 800d7bc:	b661      	cpsie	f
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	f3bf 8f6f 	isb	sy
 800d7c6:	df00      	svc	0
 800d7c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d7ca:	bf00      	nop
 800d7cc:	e000ed08 	.word	0xe000ed08

0800d7d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b086      	sub	sp, #24
 800d7d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d7d6:	4b46      	ldr	r3, [pc, #280]	; (800d8f0 <xPortStartScheduler+0x120>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	4a46      	ldr	r2, [pc, #280]	; (800d8f4 <xPortStartScheduler+0x124>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d10a      	bne.n	800d7f6 <xPortStartScheduler+0x26>
	__asm volatile
 800d7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e4:	f383 8811 	msr	BASEPRI, r3
 800d7e8:	f3bf 8f6f 	isb	sy
 800d7ec:	f3bf 8f4f 	dsb	sy
 800d7f0:	613b      	str	r3, [r7, #16]
}
 800d7f2:	bf00      	nop
 800d7f4:	e7fe      	b.n	800d7f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d7f6:	4b3e      	ldr	r3, [pc, #248]	; (800d8f0 <xPortStartScheduler+0x120>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	4a3f      	ldr	r2, [pc, #252]	; (800d8f8 <xPortStartScheduler+0x128>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d10a      	bne.n	800d816 <xPortStartScheduler+0x46>
	__asm volatile
 800d800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d804:	f383 8811 	msr	BASEPRI, r3
 800d808:	f3bf 8f6f 	isb	sy
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	60fb      	str	r3, [r7, #12]
}
 800d812:	bf00      	nop
 800d814:	e7fe      	b.n	800d814 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d816:	4b39      	ldr	r3, [pc, #228]	; (800d8fc <xPortStartScheduler+0x12c>)
 800d818:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	22ff      	movs	r2, #255	; 0xff
 800d826:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d828:	697b      	ldr	r3, [r7, #20]
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d830:	78fb      	ldrb	r3, [r7, #3]
 800d832:	b2db      	uxtb	r3, r3
 800d834:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d838:	b2da      	uxtb	r2, r3
 800d83a:	4b31      	ldr	r3, [pc, #196]	; (800d900 <xPortStartScheduler+0x130>)
 800d83c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d83e:	4b31      	ldr	r3, [pc, #196]	; (800d904 <xPortStartScheduler+0x134>)
 800d840:	2207      	movs	r2, #7
 800d842:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d844:	e009      	b.n	800d85a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d846:	4b2f      	ldr	r3, [pc, #188]	; (800d904 <xPortStartScheduler+0x134>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	3b01      	subs	r3, #1
 800d84c:	4a2d      	ldr	r2, [pc, #180]	; (800d904 <xPortStartScheduler+0x134>)
 800d84e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d850:	78fb      	ldrb	r3, [r7, #3]
 800d852:	b2db      	uxtb	r3, r3
 800d854:	005b      	lsls	r3, r3, #1
 800d856:	b2db      	uxtb	r3, r3
 800d858:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d85a:	78fb      	ldrb	r3, [r7, #3]
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d862:	2b80      	cmp	r3, #128	; 0x80
 800d864:	d0ef      	beq.n	800d846 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d866:	4b27      	ldr	r3, [pc, #156]	; (800d904 <xPortStartScheduler+0x134>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f1c3 0307 	rsb	r3, r3, #7
 800d86e:	2b04      	cmp	r3, #4
 800d870:	d00a      	beq.n	800d888 <xPortStartScheduler+0xb8>
	__asm volatile
 800d872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d876:	f383 8811 	msr	BASEPRI, r3
 800d87a:	f3bf 8f6f 	isb	sy
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	60bb      	str	r3, [r7, #8]
}
 800d884:	bf00      	nop
 800d886:	e7fe      	b.n	800d886 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d888:	4b1e      	ldr	r3, [pc, #120]	; (800d904 <xPortStartScheduler+0x134>)
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	021b      	lsls	r3, r3, #8
 800d88e:	4a1d      	ldr	r2, [pc, #116]	; (800d904 <xPortStartScheduler+0x134>)
 800d890:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d892:	4b1c      	ldr	r3, [pc, #112]	; (800d904 <xPortStartScheduler+0x134>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d89a:	4a1a      	ldr	r2, [pc, #104]	; (800d904 <xPortStartScheduler+0x134>)
 800d89c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	b2da      	uxtb	r2, r3
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d8a6:	4b18      	ldr	r3, [pc, #96]	; (800d908 <xPortStartScheduler+0x138>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a17      	ldr	r2, [pc, #92]	; (800d908 <xPortStartScheduler+0x138>)
 800d8ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d8b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d8b2:	4b15      	ldr	r3, [pc, #84]	; (800d908 <xPortStartScheduler+0x138>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a14      	ldr	r2, [pc, #80]	; (800d908 <xPortStartScheduler+0x138>)
 800d8b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d8bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d8be:	f000 f8dd 	bl	800da7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d8c2:	4b12      	ldr	r3, [pc, #72]	; (800d90c <xPortStartScheduler+0x13c>)
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d8c8:	f000 f8fc 	bl	800dac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d8cc:	4b10      	ldr	r3, [pc, #64]	; (800d910 <xPortStartScheduler+0x140>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a0f      	ldr	r2, [pc, #60]	; (800d910 <xPortStartScheduler+0x140>)
 800d8d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d8d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d8d8:	f7ff ff66 	bl	800d7a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d8dc:	f7fe fb80 	bl	800bfe0 <vTaskSwitchContext>
	prvTaskExitError();
 800d8e0:	f7ff ff1c 	bl	800d71c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d8e4:	2300      	movs	r3, #0
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3718      	adds	r7, #24
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	e000ed00 	.word	0xe000ed00
 800d8f4:	410fc271 	.word	0x410fc271
 800d8f8:	410fc270 	.word	0x410fc270
 800d8fc:	e000e400 	.word	0xe000e400
 800d900:	20001efc 	.word	0x20001efc
 800d904:	20001f00 	.word	0x20001f00
 800d908:	e000ed20 	.word	0xe000ed20
 800d90c:	200000a4 	.word	0x200000a4
 800d910:	e000ef34 	.word	0xe000ef34

0800d914 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
	__asm volatile
 800d91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91e:	f383 8811 	msr	BASEPRI, r3
 800d922:	f3bf 8f6f 	isb	sy
 800d926:	f3bf 8f4f 	dsb	sy
 800d92a:	607b      	str	r3, [r7, #4]
}
 800d92c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d92e:	4b0f      	ldr	r3, [pc, #60]	; (800d96c <vPortEnterCritical+0x58>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	3301      	adds	r3, #1
 800d934:	4a0d      	ldr	r2, [pc, #52]	; (800d96c <vPortEnterCritical+0x58>)
 800d936:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d938:	4b0c      	ldr	r3, [pc, #48]	; (800d96c <vPortEnterCritical+0x58>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d10f      	bne.n	800d960 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d940:	4b0b      	ldr	r3, [pc, #44]	; (800d970 <vPortEnterCritical+0x5c>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	b2db      	uxtb	r3, r3
 800d946:	2b00      	cmp	r3, #0
 800d948:	d00a      	beq.n	800d960 <vPortEnterCritical+0x4c>
	__asm volatile
 800d94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d94e:	f383 8811 	msr	BASEPRI, r3
 800d952:	f3bf 8f6f 	isb	sy
 800d956:	f3bf 8f4f 	dsb	sy
 800d95a:	603b      	str	r3, [r7, #0]
}
 800d95c:	bf00      	nop
 800d95e:	e7fe      	b.n	800d95e <vPortEnterCritical+0x4a>
	}
}
 800d960:	bf00      	nop
 800d962:	370c      	adds	r7, #12
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr
 800d96c:	200000a4 	.word	0x200000a4
 800d970:	e000ed04 	.word	0xe000ed04

0800d974 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d97a:	4b12      	ldr	r3, [pc, #72]	; (800d9c4 <vPortExitCritical+0x50>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d10a      	bne.n	800d998 <vPortExitCritical+0x24>
	__asm volatile
 800d982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d986:	f383 8811 	msr	BASEPRI, r3
 800d98a:	f3bf 8f6f 	isb	sy
 800d98e:	f3bf 8f4f 	dsb	sy
 800d992:	607b      	str	r3, [r7, #4]
}
 800d994:	bf00      	nop
 800d996:	e7fe      	b.n	800d996 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d998:	4b0a      	ldr	r3, [pc, #40]	; (800d9c4 <vPortExitCritical+0x50>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	3b01      	subs	r3, #1
 800d99e:	4a09      	ldr	r2, [pc, #36]	; (800d9c4 <vPortExitCritical+0x50>)
 800d9a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d9a2:	4b08      	ldr	r3, [pc, #32]	; (800d9c4 <vPortExitCritical+0x50>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d105      	bne.n	800d9b6 <vPortExitCritical+0x42>
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	f383 8811 	msr	BASEPRI, r3
}
 800d9b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d9b6:	bf00      	nop
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr
 800d9c2:	bf00      	nop
 800d9c4:	200000a4 	.word	0x200000a4
	...

0800d9d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d9d0:	f3ef 8009 	mrs	r0, PSP
 800d9d4:	f3bf 8f6f 	isb	sy
 800d9d8:	4b15      	ldr	r3, [pc, #84]	; (800da30 <pxCurrentTCBConst>)
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	f01e 0f10 	tst.w	lr, #16
 800d9e0:	bf08      	it	eq
 800d9e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d9e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9ea:	6010      	str	r0, [r2, #0]
 800d9ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d9f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d9f4:	f380 8811 	msr	BASEPRI, r0
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	f3bf 8f6f 	isb	sy
 800da00:	f7fe faee 	bl	800bfe0 <vTaskSwitchContext>
 800da04:	f04f 0000 	mov.w	r0, #0
 800da08:	f380 8811 	msr	BASEPRI, r0
 800da0c:	bc09      	pop	{r0, r3}
 800da0e:	6819      	ldr	r1, [r3, #0]
 800da10:	6808      	ldr	r0, [r1, #0]
 800da12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da16:	f01e 0f10 	tst.w	lr, #16
 800da1a:	bf08      	it	eq
 800da1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da20:	f380 8809 	msr	PSP, r0
 800da24:	f3bf 8f6f 	isb	sy
 800da28:	4770      	bx	lr
 800da2a:	bf00      	nop
 800da2c:	f3af 8000 	nop.w

0800da30 <pxCurrentTCBConst>:
 800da30:	200018d0 	.word	0x200018d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800da34:	bf00      	nop
 800da36:	bf00      	nop

0800da38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b082      	sub	sp, #8
 800da3c:	af00      	add	r7, sp, #0
	__asm volatile
 800da3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da42:	f383 8811 	msr	BASEPRI, r3
 800da46:	f3bf 8f6f 	isb	sy
 800da4a:	f3bf 8f4f 	dsb	sy
 800da4e:	607b      	str	r3, [r7, #4]
}
 800da50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800da52:	f7fe fa0b 	bl	800be6c <xTaskIncrementTick>
 800da56:	4603      	mov	r3, r0
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d003      	beq.n	800da64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800da5c:	4b06      	ldr	r3, [pc, #24]	; (800da78 <xPortSysTickHandler+0x40>)
 800da5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da62:	601a      	str	r2, [r3, #0]
 800da64:	2300      	movs	r3, #0
 800da66:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	f383 8811 	msr	BASEPRI, r3
}
 800da6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800da70:	bf00      	nop
 800da72:	3708      	adds	r7, #8
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}
 800da78:	e000ed04 	.word	0xe000ed04

0800da7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800da7c:	b480      	push	{r7}
 800da7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800da80:	4b0b      	ldr	r3, [pc, #44]	; (800dab0 <vPortSetupTimerInterrupt+0x34>)
 800da82:	2200      	movs	r2, #0
 800da84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800da86:	4b0b      	ldr	r3, [pc, #44]	; (800dab4 <vPortSetupTimerInterrupt+0x38>)
 800da88:	2200      	movs	r2, #0
 800da8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da8c:	4b0a      	ldr	r3, [pc, #40]	; (800dab8 <vPortSetupTimerInterrupt+0x3c>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	4a0a      	ldr	r2, [pc, #40]	; (800dabc <vPortSetupTimerInterrupt+0x40>)
 800da92:	fba2 2303 	umull	r2, r3, r2, r3
 800da96:	099b      	lsrs	r3, r3, #6
 800da98:	4a09      	ldr	r2, [pc, #36]	; (800dac0 <vPortSetupTimerInterrupt+0x44>)
 800da9a:	3b01      	subs	r3, #1
 800da9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da9e:	4b04      	ldr	r3, [pc, #16]	; (800dab0 <vPortSetupTimerInterrupt+0x34>)
 800daa0:	2207      	movs	r2, #7
 800daa2:	601a      	str	r2, [r3, #0]
}
 800daa4:	bf00      	nop
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
 800daae:	bf00      	nop
 800dab0:	e000e010 	.word	0xe000e010
 800dab4:	e000e018 	.word	0xe000e018
 800dab8:	2000000c 	.word	0x2000000c
 800dabc:	10624dd3 	.word	0x10624dd3
 800dac0:	e000e014 	.word	0xe000e014

0800dac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dac4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dad4 <vPortEnableVFP+0x10>
 800dac8:	6801      	ldr	r1, [r0, #0]
 800daca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dace:	6001      	str	r1, [r0, #0]
 800dad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dad2:	bf00      	nop
 800dad4:	e000ed88 	.word	0xe000ed88

0800dad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dade:	f3ef 8305 	mrs	r3, IPSR
 800dae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2b0f      	cmp	r3, #15
 800dae8:	d914      	bls.n	800db14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800daea:	4a17      	ldr	r2, [pc, #92]	; (800db48 <vPortValidateInterruptPriority+0x70>)
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	4413      	add	r3, r2
 800daf0:	781b      	ldrb	r3, [r3, #0]
 800daf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800daf4:	4b15      	ldr	r3, [pc, #84]	; (800db4c <vPortValidateInterruptPriority+0x74>)
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	7afa      	ldrb	r2, [r7, #11]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d20a      	bcs.n	800db14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dafe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db02:	f383 8811 	msr	BASEPRI, r3
 800db06:	f3bf 8f6f 	isb	sy
 800db0a:	f3bf 8f4f 	dsb	sy
 800db0e:	607b      	str	r3, [r7, #4]
}
 800db10:	bf00      	nop
 800db12:	e7fe      	b.n	800db12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800db14:	4b0e      	ldr	r3, [pc, #56]	; (800db50 <vPortValidateInterruptPriority+0x78>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800db1c:	4b0d      	ldr	r3, [pc, #52]	; (800db54 <vPortValidateInterruptPriority+0x7c>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	429a      	cmp	r2, r3
 800db22:	d90a      	bls.n	800db3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800db24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db28:	f383 8811 	msr	BASEPRI, r3
 800db2c:	f3bf 8f6f 	isb	sy
 800db30:	f3bf 8f4f 	dsb	sy
 800db34:	603b      	str	r3, [r7, #0]
}
 800db36:	bf00      	nop
 800db38:	e7fe      	b.n	800db38 <vPortValidateInterruptPriority+0x60>
	}
 800db3a:	bf00      	nop
 800db3c:	3714      	adds	r7, #20
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr
 800db46:	bf00      	nop
 800db48:	e000e3f0 	.word	0xe000e3f0
 800db4c:	20001efc 	.word	0x20001efc
 800db50:	e000ed0c 	.word	0xe000ed0c
 800db54:	20001f00 	.word	0x20001f00

0800db58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b08a      	sub	sp, #40	; 0x28
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800db60:	2300      	movs	r3, #0
 800db62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800db64:	f7fe f838 	bl	800bbd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800db68:	4b5b      	ldr	r3, [pc, #364]	; (800dcd8 <pvPortMalloc+0x180>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d101      	bne.n	800db74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800db70:	f000 f920 	bl	800ddb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800db74:	4b59      	ldr	r3, [pc, #356]	; (800dcdc <pvPortMalloc+0x184>)
 800db76:	681a      	ldr	r2, [r3, #0]
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	4013      	ands	r3, r2
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f040 8093 	bne.w	800dca8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d01d      	beq.n	800dbc4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800db88:	2208      	movs	r2, #8
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	4413      	add	r3, r2
 800db8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f003 0307 	and.w	r3, r3, #7
 800db96:	2b00      	cmp	r3, #0
 800db98:	d014      	beq.n	800dbc4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f023 0307 	bic.w	r3, r3, #7
 800dba0:	3308      	adds	r3, #8
 800dba2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f003 0307 	and.w	r3, r3, #7
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00a      	beq.n	800dbc4 <pvPortMalloc+0x6c>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	617b      	str	r3, [r7, #20]
}
 800dbc0:	bf00      	nop
 800dbc2:	e7fe      	b.n	800dbc2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d06e      	beq.n	800dca8 <pvPortMalloc+0x150>
 800dbca:	4b45      	ldr	r3, [pc, #276]	; (800dce0 <pvPortMalloc+0x188>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	687a      	ldr	r2, [r7, #4]
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d869      	bhi.n	800dca8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dbd4:	4b43      	ldr	r3, [pc, #268]	; (800dce4 <pvPortMalloc+0x18c>)
 800dbd6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dbd8:	4b42      	ldr	r3, [pc, #264]	; (800dce4 <pvPortMalloc+0x18c>)
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbde:	e004      	b.n	800dbea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dbea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbec:	685b      	ldr	r3, [r3, #4]
 800dbee:	687a      	ldr	r2, [r7, #4]
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d903      	bls.n	800dbfc <pvPortMalloc+0xa4>
 800dbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d1f1      	bne.n	800dbe0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dbfc:	4b36      	ldr	r3, [pc, #216]	; (800dcd8 <pvPortMalloc+0x180>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d050      	beq.n	800dca8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc06:	6a3b      	ldr	r3, [r7, #32]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2208      	movs	r2, #8
 800dc0c:	4413      	add	r3, r2
 800dc0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	6a3b      	ldr	r3, [r7, #32]
 800dc16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc1a:	685a      	ldr	r2, [r3, #4]
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	1ad2      	subs	r2, r2, r3
 800dc20:	2308      	movs	r3, #8
 800dc22:	005b      	lsls	r3, r3, #1
 800dc24:	429a      	cmp	r2, r3
 800dc26:	d91f      	bls.n	800dc68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dc28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc30:	69bb      	ldr	r3, [r7, #24]
 800dc32:	f003 0307 	and.w	r3, r3, #7
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00a      	beq.n	800dc50 <pvPortMalloc+0xf8>
	__asm volatile
 800dc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	613b      	str	r3, [r7, #16]
}
 800dc4c:	bf00      	nop
 800dc4e:	e7fe      	b.n	800dc4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	685a      	ldr	r2, [r3, #4]
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	1ad2      	subs	r2, r2, r3
 800dc58:	69bb      	ldr	r3, [r7, #24]
 800dc5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dc62:	69b8      	ldr	r0, [r7, #24]
 800dc64:	f000 f908 	bl	800de78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dc68:	4b1d      	ldr	r3, [pc, #116]	; (800dce0 <pvPortMalloc+0x188>)
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	1ad3      	subs	r3, r2, r3
 800dc72:	4a1b      	ldr	r2, [pc, #108]	; (800dce0 <pvPortMalloc+0x188>)
 800dc74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dc76:	4b1a      	ldr	r3, [pc, #104]	; (800dce0 <pvPortMalloc+0x188>)
 800dc78:	681a      	ldr	r2, [r3, #0]
 800dc7a:	4b1b      	ldr	r3, [pc, #108]	; (800dce8 <pvPortMalloc+0x190>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	429a      	cmp	r2, r3
 800dc80:	d203      	bcs.n	800dc8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dc82:	4b17      	ldr	r3, [pc, #92]	; (800dce0 <pvPortMalloc+0x188>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	4a18      	ldr	r2, [pc, #96]	; (800dce8 <pvPortMalloc+0x190>)
 800dc88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8c:	685a      	ldr	r2, [r3, #4]
 800dc8e:	4b13      	ldr	r3, [pc, #76]	; (800dcdc <pvPortMalloc+0x184>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	431a      	orrs	r2, r3
 800dc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800dc9e:	4b13      	ldr	r3, [pc, #76]	; (800dcec <pvPortMalloc+0x194>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	3301      	adds	r3, #1
 800dca4:	4a11      	ldr	r2, [pc, #68]	; (800dcec <pvPortMalloc+0x194>)
 800dca6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dca8:	f7fd ffa4 	bl	800bbf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	f003 0307 	and.w	r3, r3, #7
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d00a      	beq.n	800dccc <pvPortMalloc+0x174>
	__asm volatile
 800dcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcba:	f383 8811 	msr	BASEPRI, r3
 800dcbe:	f3bf 8f6f 	isb	sy
 800dcc2:	f3bf 8f4f 	dsb	sy
 800dcc6:	60fb      	str	r3, [r7, #12]
}
 800dcc8:	bf00      	nop
 800dcca:	e7fe      	b.n	800dcca <pvPortMalloc+0x172>
	return pvReturn;
 800dccc:	69fb      	ldr	r3, [r7, #28]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3728      	adds	r7, #40	; 0x28
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	20009f0c 	.word	0x20009f0c
 800dcdc:	20009f20 	.word	0x20009f20
 800dce0:	20009f10 	.word	0x20009f10
 800dce4:	20009f04 	.word	0x20009f04
 800dce8:	20009f14 	.word	0x20009f14
 800dcec:	20009f18 	.word	0x20009f18

0800dcf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b086      	sub	sp, #24
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d04d      	beq.n	800dd9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dd02:	2308      	movs	r3, #8
 800dd04:	425b      	negs	r3, r3
 800dd06:	697a      	ldr	r2, [r7, #20]
 800dd08:	4413      	add	r3, r2
 800dd0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	685a      	ldr	r2, [r3, #4]
 800dd14:	4b24      	ldr	r3, [pc, #144]	; (800dda8 <vPortFree+0xb8>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4013      	ands	r3, r2
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d10a      	bne.n	800dd34 <vPortFree+0x44>
	__asm volatile
 800dd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd22:	f383 8811 	msr	BASEPRI, r3
 800dd26:	f3bf 8f6f 	isb	sy
 800dd2a:	f3bf 8f4f 	dsb	sy
 800dd2e:	60fb      	str	r3, [r7, #12]
}
 800dd30:	bf00      	nop
 800dd32:	e7fe      	b.n	800dd32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d00a      	beq.n	800dd52 <vPortFree+0x62>
	__asm volatile
 800dd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd40:	f383 8811 	msr	BASEPRI, r3
 800dd44:	f3bf 8f6f 	isb	sy
 800dd48:	f3bf 8f4f 	dsb	sy
 800dd4c:	60bb      	str	r3, [r7, #8]
}
 800dd4e:	bf00      	nop
 800dd50:	e7fe      	b.n	800dd50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	685a      	ldr	r2, [r3, #4]
 800dd56:	4b14      	ldr	r3, [pc, #80]	; (800dda8 <vPortFree+0xb8>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4013      	ands	r3, r2
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d01e      	beq.n	800dd9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dd60:	693b      	ldr	r3, [r7, #16]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d11a      	bne.n	800dd9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	685a      	ldr	r2, [r3, #4]
 800dd6c:	4b0e      	ldr	r3, [pc, #56]	; (800dda8 <vPortFree+0xb8>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	43db      	mvns	r3, r3
 800dd72:	401a      	ands	r2, r3
 800dd74:	693b      	ldr	r3, [r7, #16]
 800dd76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dd78:	f7fd ff2e 	bl	800bbd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dd7c:	693b      	ldr	r3, [r7, #16]
 800dd7e:	685a      	ldr	r2, [r3, #4]
 800dd80:	4b0a      	ldr	r3, [pc, #40]	; (800ddac <vPortFree+0xbc>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	4413      	add	r3, r2
 800dd86:	4a09      	ldr	r2, [pc, #36]	; (800ddac <vPortFree+0xbc>)
 800dd88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dd8a:	6938      	ldr	r0, [r7, #16]
 800dd8c:	f000 f874 	bl	800de78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dd90:	4b07      	ldr	r3, [pc, #28]	; (800ddb0 <vPortFree+0xc0>)
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	3301      	adds	r3, #1
 800dd96:	4a06      	ldr	r2, [pc, #24]	; (800ddb0 <vPortFree+0xc0>)
 800dd98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dd9a:	f7fd ff2b 	bl	800bbf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dd9e:	bf00      	nop
 800dda0:	3718      	adds	r7, #24
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	20009f20 	.word	0x20009f20
 800ddac:	20009f10 	.word	0x20009f10
 800ddb0:	20009f1c 	.word	0x20009f1c

0800ddb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ddba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ddc0:	4b27      	ldr	r3, [pc, #156]	; (800de60 <prvHeapInit+0xac>)
 800ddc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f003 0307 	and.w	r3, r3, #7
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00c      	beq.n	800dde8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	3307      	adds	r3, #7
 800ddd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f023 0307 	bic.w	r3, r3, #7
 800ddda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dddc:	68ba      	ldr	r2, [r7, #8]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	4a1f      	ldr	r2, [pc, #124]	; (800de60 <prvHeapInit+0xac>)
 800dde4:	4413      	add	r3, r2
 800dde6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ddec:	4a1d      	ldr	r2, [pc, #116]	; (800de64 <prvHeapInit+0xb0>)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ddf2:	4b1c      	ldr	r3, [pc, #112]	; (800de64 <prvHeapInit+0xb0>)
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	68ba      	ldr	r2, [r7, #8]
 800ddfc:	4413      	add	r3, r2
 800ddfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800de00:	2208      	movs	r2, #8
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	1a9b      	subs	r3, r3, r2
 800de06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f023 0307 	bic.w	r3, r3, #7
 800de0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	4a15      	ldr	r2, [pc, #84]	; (800de68 <prvHeapInit+0xb4>)
 800de14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800de16:	4b14      	ldr	r3, [pc, #80]	; (800de68 <prvHeapInit+0xb4>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	2200      	movs	r2, #0
 800de1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800de1e:	4b12      	ldr	r3, [pc, #72]	; (800de68 <prvHeapInit+0xb4>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	2200      	movs	r2, #0
 800de24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	1ad2      	subs	r2, r2, r3
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800de34:	4b0c      	ldr	r3, [pc, #48]	; (800de68 <prvHeapInit+0xb4>)
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	4a0a      	ldr	r2, [pc, #40]	; (800de6c <prvHeapInit+0xb8>)
 800de42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	4a09      	ldr	r2, [pc, #36]	; (800de70 <prvHeapInit+0xbc>)
 800de4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800de4c:	4b09      	ldr	r3, [pc, #36]	; (800de74 <prvHeapInit+0xc0>)
 800de4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800de52:	601a      	str	r2, [r3, #0]
}
 800de54:	bf00      	nop
 800de56:	3714      	adds	r7, #20
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr
 800de60:	20001f04 	.word	0x20001f04
 800de64:	20009f04 	.word	0x20009f04
 800de68:	20009f0c 	.word	0x20009f0c
 800de6c:	20009f14 	.word	0x20009f14
 800de70:	20009f10 	.word	0x20009f10
 800de74:	20009f20 	.word	0x20009f20

0800de78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800de78:	b480      	push	{r7}
 800de7a:	b085      	sub	sp, #20
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800de80:	4b28      	ldr	r3, [pc, #160]	; (800df24 <prvInsertBlockIntoFreeList+0xac>)
 800de82:	60fb      	str	r3, [r7, #12]
 800de84:	e002      	b.n	800de8c <prvInsertBlockIntoFreeList+0x14>
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	60fb      	str	r3, [r7, #12]
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	429a      	cmp	r2, r3
 800de94:	d8f7      	bhi.n	800de86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	68ba      	ldr	r2, [r7, #8]
 800dea0:	4413      	add	r3, r2
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d108      	bne.n	800deba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	685a      	ldr	r2, [r3, #4]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	441a      	add	r2, r3
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	68ba      	ldr	r2, [r7, #8]
 800dec4:	441a      	add	r2, r3
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	429a      	cmp	r2, r3
 800decc:	d118      	bne.n	800df00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681a      	ldr	r2, [r3, #0]
 800ded2:	4b15      	ldr	r3, [pc, #84]	; (800df28 <prvInsertBlockIntoFreeList+0xb0>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d00d      	beq.n	800def6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	685a      	ldr	r2, [r3, #4]
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	441a      	add	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	601a      	str	r2, [r3, #0]
 800def4:	e008      	b.n	800df08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800def6:	4b0c      	ldr	r3, [pc, #48]	; (800df28 <prvInsertBlockIntoFreeList+0xb0>)
 800def8:	681a      	ldr	r2, [r3, #0]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	601a      	str	r2, [r3, #0]
 800defe:	e003      	b.n	800df08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	681a      	ldr	r2, [r3, #0]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800df08:	68fa      	ldr	r2, [r7, #12]
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d002      	beq.n	800df16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df16:	bf00      	nop
 800df18:	3714      	adds	r7, #20
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr
 800df22:	bf00      	nop
 800df24:	20009f04 	.word	0x20009f04
 800df28:	20009f0c 	.word	0x20009f0c

0800df2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800df30:	2200      	movs	r2, #0
 800df32:	4912      	ldr	r1, [pc, #72]	; (800df7c <MX_USB_DEVICE_Init+0x50>)
 800df34:	4812      	ldr	r0, [pc, #72]	; (800df80 <MX_USB_DEVICE_Init+0x54>)
 800df36:	f7fa fb85 	bl	8008644 <USBD_Init>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d001      	beq.n	800df44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800df40:	f7f4 f86c 	bl	800201c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800df44:	490f      	ldr	r1, [pc, #60]	; (800df84 <MX_USB_DEVICE_Init+0x58>)
 800df46:	480e      	ldr	r0, [pc, #56]	; (800df80 <MX_USB_DEVICE_Init+0x54>)
 800df48:	f7fa fbac 	bl	80086a4 <USBD_RegisterClass>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d001      	beq.n	800df56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800df52:	f7f4 f863 	bl	800201c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800df56:	490c      	ldr	r1, [pc, #48]	; (800df88 <MX_USB_DEVICE_Init+0x5c>)
 800df58:	4809      	ldr	r0, [pc, #36]	; (800df80 <MX_USB_DEVICE_Init+0x54>)
 800df5a:	f7fa fa9d 	bl	8008498 <USBD_CDC_RegisterInterface>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d001      	beq.n	800df68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800df64:	f7f4 f85a 	bl	800201c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800df68:	4805      	ldr	r0, [pc, #20]	; (800df80 <MX_USB_DEVICE_Init+0x54>)
 800df6a:	f7fa fbd1 	bl	8008710 <USBD_Start>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d001      	beq.n	800df78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800df74:	f7f4 f852 	bl	800201c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800df78:	bf00      	nop
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	200000bc 	.word	0x200000bc
 800df80:	20009f24 	.word	0x20009f24
 800df84:	20000024 	.word	0x20000024
 800df88:	200000a8 	.word	0x200000a8

0800df8c <init_usb_rtos_obj>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
void Print_Task(void *param);
void init_usb_rtos_obj(void){
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af02      	add	r7, sp, #8
	sem_usb_tx = xSemaphoreCreateBinary();
 800df92:	2203      	movs	r2, #3
 800df94:	2100      	movs	r1, #0
 800df96:	2001      	movs	r0, #1
 800df98:	f7fc f91e 	bl	800a1d8 <xQueueGenericCreate>
 800df9c:	4603      	mov	r3, r0
 800df9e:	4a12      	ldr	r2, [pc, #72]	; (800dfe8 <init_usb_rtos_obj+0x5c>)
 800dfa0:	6013      	str	r3, [r2, #0]
	msg_buf_rx = xMessageBufferCreate(768);
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	2100      	movs	r1, #0
 800dfa6:	f44f 7040 	mov.w	r0, #768	; 0x300
 800dfaa:	f7fc ff0b 	bl	800adc4 <xStreamBufferGenericCreate>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	4a0e      	ldr	r2, [pc, #56]	; (800dfec <init_usb_rtos_obj+0x60>)
 800dfb2:	6013      	str	r3, [r2, #0]
	msg_buf_tx = xMessageBufferCreate(768);
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	2100      	movs	r1, #0
 800dfb8:	f44f 7040 	mov.w	r0, #768	; 0x300
 800dfbc:	f7fc ff02 	bl	800adc4 <xStreamBufferGenericCreate>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	4a0b      	ldr	r2, [pc, #44]	; (800dff0 <init_usb_rtos_obj+0x64>)
 800dfc4:	6013      	str	r3, [r2, #0]
	/*
	 *
	 */
	xTaskCreate(Print_Task,"Impressao",512, NULL, 5, NULL);
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	9301      	str	r3, [sp, #4]
 800dfca:	2305      	movs	r3, #5
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	2300      	movs	r3, #0
 800dfd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfd4:	4907      	ldr	r1, [pc, #28]	; (800dff4 <init_usb_rtos_obj+0x68>)
 800dfd6:	4808      	ldr	r0, [pc, #32]	; (800dff8 <init_usb_rtos_obj+0x6c>)
 800dfd8:	f7fd fa93 	bl	800b502 <xTaskCreate>
	usb_on = 1;
 800dfdc:	4b07      	ldr	r3, [pc, #28]	; (800dffc <init_usb_rtos_obj+0x70>)
 800dfde:	2201      	movs	r2, #1
 800dfe0:	601a      	str	r2, [r3, #0]
}
 800dfe2:	bf00      	nop
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}
 800dfe8:	2000b200 	.word	0x2000b200
 800dfec:	2000b204 	.word	0x2000b204
 800dff0:	2000b208 	.word	0x2000b208
 800dff4:	08010eb8 	.word	0x08010eb8
 800dff8:	0800e045 	.word	0x0800e045
 800dffc:	2000b20c 	.word	0x2000b20c

0800e000 <CDC_Receiveq_FS>:
uint32_t usb_is_on(){
	return usb_on;
}


BaseType_t CDC_Receiveq_FS(char *data, TickType_t timeout){
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
	return xMessageBufferReceive(msg_buf_tx,(void *) data, 128,portMAX_DELAY);
 800e00a:	4b06      	ldr	r3, [pc, #24]	; (800e024 <CDC_Receiveq_FS+0x24>)
 800e00c:	6818      	ldr	r0, [r3, #0]
 800e00e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e012:	2280      	movs	r2, #128	; 0x80
 800e014:	6879      	ldr	r1, [r7, #4]
 800e016:	f7fd f811 	bl	800b03c <xStreamBufferReceive>
 800e01a:	4603      	mov	r3, r0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	2000b208 	.word	0x2000b208

0800e028 <queue_print>:

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout){
	return xMessageBufferReceive(msg_buf_rx, buffer, buf_len, timeout);
}

void queue_print(char *data,int size){
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
	CDC_Receiveq_FS(data,portMAX_DELAY);
 800e032:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7ff ffe2 	bl	800e000 <CDC_Receiveq_FS>
//	xMessageBufferSend(msg_buf_tx,data,size,portMAX_DELAY);
}
 800e03c:	bf00      	nop
 800e03e:	3708      	adds	r7, #8
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <Print_Task>:

void Print_Task(void * param){
 800e044:	b580      	push	{r7, lr}
 800e046:	f5ad 6dab 	sub.w	sp, sp, #1368	; 0x558
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800e050:	f2a3 5354 	subw	r3, r3, #1364	; 0x554
 800e054:	6018      	str	r0, [r3, #0]
	char buffer[768];
	uint8_t qtd=0;
 800e056:	2300      	movs	r3, #0
 800e058:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
	uint8_t pcInputString[64], pcIndexInput = 0,pcOutputString[512];
 800e05c:	2300      	movs	r3, #0
 800e05e:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557

	BaseType_t xMoreDataToFollow;


	while(1){
		qtd = xMessageBufferReceive(msg_buf_rx,(void *) buffer,sizeof(buffer),portMAX_DELAY);
 800e062:	4b62      	ldr	r3, [pc, #392]	; (800e1ec <Print_Task+0x1a8>)
 800e064:	6818      	ldr	r0, [r3, #0]
 800e066:	f507 7114 	add.w	r1, r7, #592	; 0x250
 800e06a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e06e:	f44f 7240 	mov.w	r2, #768	; 0x300
 800e072:	f7fc ffe3 	bl	800b03c <xStreamBufferReceive>
 800e076:	4603      	mov	r3, r0
 800e078:	f887 3556 	strb.w	r3, [r7, #1366]	; 0x556
		xRchar = buffer[0];
 800e07c:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800e080:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800e084:	781a      	ldrb	r2, [r3, #0]
 800e086:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800e08a:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800e08e:	701a      	strb	r2, [r3, #0]
		if(xRchar == '\r'){
 800e090:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800e094:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	2b0d      	cmp	r3, #13
 800e09c:	d12f      	bne.n	800e0fe <Print_Task+0xba>
			CDC_Transmit_FS((uint8_t *)"\n\r", 2);
 800e09e:	2102      	movs	r1, #2
 800e0a0:	4853      	ldr	r0, [pc, #332]	; (800e1f0 <Print_Task+0x1ac>)
 800e0a2:	f000 f973 	bl	800e38c <CDC_Transmit_FS>
			pcInputString[pcIndexInput] = '\0';
 800e0a6:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800e0aa:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800e0ae:	f5a2 7252 	sub.w	r2, r2, #840	; 0x348
 800e0b2:	2100      	movs	r1, #0
 800e0b4:	54d1      	strb	r1, [r2, r3]
			do{
							 /* Send the command string to the command interpreter.  Any
							 output generated by the command interpreter will be placed in the
							 pcOutputString buffer. */
				xMoreDataToFollow = FreeRTOS_CLIProcessCommand
 800e0b6:	f107 0110 	add.w	r1, r7, #16
 800e0ba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e0be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7f2 ff38 	bl	8000f38 <FreeRTOS_CLIProcessCommand>
 800e0c8:	f8c7 0550 	str.w	r0, [r7, #1360]	; 0x550
							   MAX_OUTPUT_LENGTH/* The size of the output buffer. */
						   );

							 /* Write the output generated by the command interpreter to the
							 console. */
				CDC_Transmit_FS((uint8_t *) pcOutputString, strlen((char *) pcOutputString ) );
 800e0cc:	f107 0310 	add.w	r3, r7, #16
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	f7f2 f8ef 	bl	80002b4 <strlen>
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	b29a      	uxth	r2, r3
 800e0da:	f107 0310 	add.w	r3, r7, #16
 800e0de:	4611      	mov	r1, r2
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f000 f953 	bl	800e38c <CDC_Transmit_FS>
			 } while( xMoreDataToFollow != pdFALSE );
 800e0e6:	f8d7 3550 	ldr.w	r3, [r7, #1360]	; 0x550
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d1e3      	bne.n	800e0b6 <Print_Task+0x72>


			CDC_Transmit_FS((uint8_t *) "\n\r# ", 4);
 800e0ee:	2104      	movs	r1, #4
 800e0f0:	4840      	ldr	r0, [pc, #256]	; (800e1f4 <Print_Task+0x1b0>)
 800e0f2:	f000 f94b 	bl	800e38c <CDC_Transmit_FS>
//			CDC_Transmit_FS((uint8_t *)pcInputString, pcIndexInput);
			pcIndexInput = 0;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
 800e0fc:	e7b1      	b.n	800e062 <Print_Task+0x1e>
		} else {
			if( xRchar == '\0' ){
 800e0fe:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800e102:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d10b      	bne.n	800e124 <Print_Task+0xe0>
				CDC_Transmit_FS((uint8_t *)"Welcome to FreeRTOS\n\r", 21);
 800e10c:	2115      	movs	r1, #21
 800e10e:	483a      	ldr	r0, [pc, #232]	; (800e1f8 <Print_Task+0x1b4>)
 800e110:	f000 f93c 	bl	800e38c <CDC_Transmit_FS>
				CDC_Transmit_FS((uint8_t *)NewLine, 2);
 800e114:	2102      	movs	r1, #2
 800e116:	4839      	ldr	r0, [pc, #228]	; (800e1fc <Print_Task+0x1b8>)
 800e118:	f000 f938 	bl	800e38c <CDC_Transmit_FS>
				pcIndexInput = 0;
 800e11c:	2300      	movs	r3, #0
 800e11e:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
 800e122:	e79e      	b.n	800e062 <Print_Task+0x1e>
			} else if (xRchar == 0x7F ){
 800e124:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800e128:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	2b7f      	cmp	r3, #127	; 0x7f
 800e130:	d117      	bne.n	800e162 <Print_Task+0x11e>
				/*
				 * Backspace was pressed.
				 */
				if(pcIndexInput > 0){
 800e132:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800e136:	2b00      	cmp	r3, #0
 800e138:	d093      	beq.n	800e062 <Print_Task+0x1e>
					CDC_Transmit_FS(&xRchar, 1);
 800e13a:	f107 030f 	add.w	r3, r7, #15
 800e13e:	2101      	movs	r1, #1
 800e140:	4618      	mov	r0, r3
 800e142:	f000 f923 	bl	800e38c <CDC_Transmit_FS>
					pcIndexInput--;
 800e146:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800e14a:	3b01      	subs	r3, #1
 800e14c:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
					pcInputString[pcIndexInput] = '\0';
 800e150:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800e154:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800e158:	f5a2 7252 	sub.w	r2, r2, #840	; 0x348
 800e15c:	2100      	movs	r1, #0
 800e15e:	54d1      	strb	r1, [r2, r3]
 800e160:	e77f      	b.n	800e062 <Print_Task+0x1e>

				}
			} else if(xRchar == 0x1B){
 800e162:	f507 63ab 	add.w	r3, r7, #1368	; 0x558
 800e166:	f2a3 5349 	subw	r3, r3, #1353	; 0x549
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	2b1b      	cmp	r3, #27
 800e16e:	d11c      	bne.n	800e1aa <Print_Task+0x166>
				/*
				 * Entrou no seta pra cima
				 */
				CDC_Transmit_FS(pcInputString, strlen((const char*)pcInputString));
 800e170:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e174:	4618      	mov	r0, r3
 800e176:	f7f2 f89d 	bl	80002b4 <strlen>
 800e17a:	4603      	mov	r3, r0
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e182:	4611      	mov	r1, r2
 800e184:	4618      	mov	r0, r3
 800e186:	f000 f901 	bl	800e38c <CDC_Transmit_FS>
				pcIndexInput = strlen((const char*)pcInputString)+1;
 800e18a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800e18e:	4618      	mov	r0, r3
 800e190:	f7f2 f890 	bl	80002b4 <strlen>
 800e194:	4603      	mov	r3, r0
 800e196:	b2db      	uxtb	r3, r3
 800e198:	3301      	adds	r3, #1
 800e19a:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
				pcIndexInput--;
 800e19e:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800e1a2:	3b01      	subs	r3, #1
 800e1a4:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
 800e1a8:	e75b      	b.n	800e062 <Print_Task+0x1e>
			} else if(pcIndexInput < 64){
 800e1aa:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800e1ae:	2b3f      	cmp	r3, #63	; 0x3f
 800e1b0:	f63f af57 	bhi.w	800e062 <Print_Task+0x1e>
				(void) qtd;
				CDC_Transmit_FS(&xRchar, qtd);
 800e1b4:	f897 3556 	ldrb.w	r3, [r7, #1366]	; 0x556
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	f107 030f 	add.w	r3, r7, #15
 800e1be:	4611      	mov	r1, r2
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f000 f8e3 	bl	800e38c <CDC_Transmit_FS>
				pcInputString[pcIndexInput] = xRchar;
 800e1c6:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800e1ca:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800e1ce:	f2a2 5249 	subw	r2, r2, #1353	; 0x549
 800e1d2:	7811      	ldrb	r1, [r2, #0]
 800e1d4:	f507 62ab 	add.w	r2, r7, #1368	; 0x558
 800e1d8:	f5a2 7252 	sub.w	r2, r2, #840	; 0x348
 800e1dc:	54d1      	strb	r1, [r2, r3]
				pcIndexInput++;
 800e1de:	f897 3557 	ldrb.w	r3, [r7, #1367]	; 0x557
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	f887 3557 	strb.w	r3, [r7, #1367]	; 0x557
		qtd = xMessageBufferReceive(msg_buf_rx,(void *) buffer,sizeof(buffer),portMAX_DELAY);
 800e1e8:	e73b      	b.n	800e062 <Print_Task+0x1e>
 800e1ea:	bf00      	nop
 800e1ec:	2000b204 	.word	0x2000b204
 800e1f0:	08010ec4 	.word	0x08010ec4
 800e1f4:	08010ec8 	.word	0x08010ec8
 800e1f8:	08010ed0 	.word	0x08010ed0
 800e1fc:	08010ee8 	.word	0x08010ee8

0800e200 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e204:	2200      	movs	r2, #0
 800e206:	4905      	ldr	r1, [pc, #20]	; (800e21c <CDC_Init_FS+0x1c>)
 800e208:	4805      	ldr	r0, [pc, #20]	; (800e220 <CDC_Init_FS+0x20>)
 800e20a:	f7fa f95f 	bl	80084cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e20e:	4905      	ldr	r1, [pc, #20]	; (800e224 <CDC_Init_FS+0x24>)
 800e210:	4803      	ldr	r0, [pc, #12]	; (800e220 <CDC_Init_FS+0x20>)
 800e212:	f7fa f97d 	bl	8008510 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e216:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e218:	4618      	mov	r0, r3
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	2000aa00 	.word	0x2000aa00
 800e220:	20009f24 	.word	0x20009f24
 800e224:	2000a200 	.word	0x2000a200

0800e228 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e228:	b480      	push	{r7}
 800e22a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e22c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e22e:	4618      	mov	r0, r3
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr

0800e238 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b084      	sub	sp, #16
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	4603      	mov	r3, r0
 800e240:	6039      	str	r1, [r7, #0]
 800e242:	71fb      	strb	r3, [r7, #7]
 800e244:	4613      	mov	r3, r2
 800e246:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  portBASE_TYPE yield = pdFALSE;
 800e248:	2300      	movs	r3, #0
 800e24a:	60fb      	str	r3, [r7, #12]
  char data = 0;
 800e24c:	2300      	movs	r3, #0
 800e24e:	72fb      	strb	r3, [r7, #11]
  switch(cmd)
 800e250:	79fb      	ldrb	r3, [r7, #7]
 800e252:	2b23      	cmp	r3, #35	; 0x23
 800e254:	d85f      	bhi.n	800e316 <CDC_Control_FS+0xde>
 800e256:	a201      	add	r2, pc, #4	; (adr r2, 800e25c <CDC_Control_FS+0x24>)
 800e258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25c:	0800e317 	.word	0x0800e317
 800e260:	0800e317 	.word	0x0800e317
 800e264:	0800e317 	.word	0x0800e317
 800e268:	0800e317 	.word	0x0800e317
 800e26c:	0800e317 	.word	0x0800e317
 800e270:	0800e317 	.word	0x0800e317
 800e274:	0800e317 	.word	0x0800e317
 800e278:	0800e317 	.word	0x0800e317
 800e27c:	0800e317 	.word	0x0800e317
 800e280:	0800e317 	.word	0x0800e317
 800e284:	0800e317 	.word	0x0800e317
 800e288:	0800e317 	.word	0x0800e317
 800e28c:	0800e317 	.word	0x0800e317
 800e290:	0800e317 	.word	0x0800e317
 800e294:	0800e317 	.word	0x0800e317
 800e298:	0800e317 	.word	0x0800e317
 800e29c:	0800e317 	.word	0x0800e317
 800e2a0:	0800e317 	.word	0x0800e317
 800e2a4:	0800e317 	.word	0x0800e317
 800e2a8:	0800e317 	.word	0x0800e317
 800e2ac:	0800e317 	.word	0x0800e317
 800e2b0:	0800e317 	.word	0x0800e317
 800e2b4:	0800e317 	.word	0x0800e317
 800e2b8:	0800e317 	.word	0x0800e317
 800e2bc:	0800e317 	.word	0x0800e317
 800e2c0:	0800e317 	.word	0x0800e317
 800e2c4:	0800e317 	.word	0x0800e317
 800e2c8:	0800e317 	.word	0x0800e317
 800e2cc:	0800e317 	.word	0x0800e317
 800e2d0:	0800e317 	.word	0x0800e317
 800e2d4:	0800e317 	.word	0x0800e317
 800e2d8:	0800e317 	.word	0x0800e317
 800e2dc:	0800e317 	.word	0x0800e317
 800e2e0:	0800e317 	.word	0x0800e317
 800e2e4:	0800e2ed 	.word	0x0800e2ed
 800e2e8:	0800e317 	.word	0x0800e317
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
  	  xMessageBufferSendFromISR(msg_buf_rx, &data, 1, &yield);
 800e2ec:	4b0e      	ldr	r3, [pc, #56]	; (800e328 <CDC_Control_FS+0xf0>)
 800e2ee:	6818      	ldr	r0, [r3, #0]
 800e2f0:	f107 030c 	add.w	r3, r7, #12
 800e2f4:	f107 010b 	add.w	r1, r7, #11
 800e2f8:	2201      	movs	r2, #1
 800e2fa:	f7fc fdf1 	bl	800aee0 <xStreamBufferSendFromISR>
  	  portYIELD_FROM_ISR(yield);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d00a      	beq.n	800e31a <CDC_Control_FS+0xe2>
 800e304:	4b09      	ldr	r3, [pc, #36]	; (800e32c <CDC_Control_FS+0xf4>)
 800e306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e30a:	601a      	str	r2, [r3, #0]
 800e30c:	f3bf 8f4f 	dsb	sy
 800e310:	f3bf 8f6f 	isb	sy

    break;
 800e314:	e001      	b.n	800e31a <CDC_Control_FS+0xe2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e316:	bf00      	nop
 800e318:	e000      	b.n	800e31c <CDC_Control_FS+0xe4>
    break;
 800e31a:	bf00      	nop
  }

  return (USBD_OK);
 800e31c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3710      	adds	r7, #16
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
 800e326:	bf00      	nop
 800e328:	2000b204 	.word	0x2000b204
 800e32c:	e000ed04 	.word	0xe000ed04

0800e330 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b084      	sub	sp, #16
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	portBASE_TYPE yield = pdFALSE;
 800e33a:	2300      	movs	r3, #0
 800e33c:	60fb      	str	r3, [r7, #12]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e33e:	6879      	ldr	r1, [r7, #4]
 800e340:	480f      	ldr	r0, [pc, #60]	; (800e380 <CDC_Receive_FS+0x50>)
 800e342:	f7fa f8e5 	bl	8008510 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e346:	480e      	ldr	r0, [pc, #56]	; (800e380 <CDC_Receive_FS+0x50>)
 800e348:	f7fa f946 	bl	80085d8 <USBD_CDC_ReceivePacket>

	  xMessageBufferSendFromISR(msg_buf_rx, Buf, *Len, &yield);
 800e34c:	4b0d      	ldr	r3, [pc, #52]	; (800e384 <CDC_Receive_FS+0x54>)
 800e34e:	6818      	ldr	r0, [r3, #0]
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	f107 030c 	add.w	r3, r7, #12
 800e358:	6879      	ldr	r1, [r7, #4]
 800e35a:	f7fc fdc1 	bl	800aee0 <xStreamBufferSendFromISR>
	  portYIELD_FROM_ISR(yield);
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d007      	beq.n	800e374 <CDC_Receive_FS+0x44>
 800e364:	4b08      	ldr	r3, [pc, #32]	; (800e388 <CDC_Receive_FS+0x58>)
 800e366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e36a:	601a      	str	r2, [r3, #0]
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	f3bf 8f6f 	isb	sy

	return (USBD_OK);
 800e374:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e376:	4618      	mov	r0, r3
 800e378:	3710      	adds	r7, #16
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	bf00      	nop
 800e380:	20009f24 	.word	0x20009f24
 800e384:	2000b204 	.word	0x2000b204
 800e388:	e000ed04 	.word	0xe000ed04

0800e38c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	460b      	mov	r3, r1
 800e396:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e398:	2300      	movs	r3, #0
 800e39a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e39c:	4b10      	ldr	r3, [pc, #64]	; (800e3e0 <CDC_Transmit_FS+0x54>)
 800e39e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d001      	beq.n	800e3b2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	e012      	b.n	800e3d8 <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e3b2:	887b      	ldrh	r3, [r7, #2]
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	6879      	ldr	r1, [r7, #4]
 800e3b8:	4809      	ldr	r0, [pc, #36]	; (800e3e0 <CDC_Transmit_FS+0x54>)
 800e3ba:	f7fa f887 	bl	80084cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e3be:	4808      	ldr	r0, [pc, #32]	; (800e3e0 <CDC_Transmit_FS+0x54>)
 800e3c0:	f7fa f8c4 	bl	800854c <USBD_CDC_TransmitPacket>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	73fb      	strb	r3, [r7, #15]
  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 800e3c8:	4b06      	ldr	r3, [pc, #24]	; (800e3e4 <CDC_Transmit_FS+0x58>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f7fc fa65 	bl	800a8a0 <xQueueSemaphoreTake>
  /* USER CODE END 7 */
  return result;
 800e3d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3710      	adds	r7, #16
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	20009f24 	.word	0x20009f24
 800e3e4:	2000b200 	.word	0x2000b200

0800e3e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b086      	sub	sp, #24
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	60f8      	str	r0, [r7, #12]
 800e3f0:	60b9      	str	r1, [r7, #8]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 800e3fe:	4b0b      	ldr	r3, [pc, #44]	; (800e42c <CDC_TransmitCplt_FS+0x44>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f107 0210 	add.w	r2, r7, #16
 800e406:	4611      	mov	r1, r2
 800e408:	4618      	mov	r0, r3
 800e40a:	f7fc f8dc 	bl	800a5c6 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(&tmp);
 800e40e:	4b08      	ldr	r3, [pc, #32]	; (800e430 <CDC_TransmitCplt_FS+0x48>)
 800e410:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e414:	601a      	str	r2, [r3, #0]
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 800e41e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e422:	4618      	mov	r0, r3
 800e424:	3718      	adds	r7, #24
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	2000b200 	.word	0x2000b200
 800e430:	e000ed04 	.word	0xe000ed04

0800e434 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e434:	b480      	push	{r7}
 800e436:	b083      	sub	sp, #12
 800e438:	af00      	add	r7, sp, #0
 800e43a:	4603      	mov	r3, r0
 800e43c:	6039      	str	r1, [r7, #0]
 800e43e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	2212      	movs	r2, #18
 800e444:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e446:	4b03      	ldr	r3, [pc, #12]	; (800e454 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e448:	4618      	mov	r0, r3
 800e44a:	370c      	adds	r7, #12
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr
 800e454:	200000d8 	.word	0x200000d8

0800e458 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e458:	b480      	push	{r7}
 800e45a:	b083      	sub	sp, #12
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	4603      	mov	r3, r0
 800e460:	6039      	str	r1, [r7, #0]
 800e462:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e464:	683b      	ldr	r3, [r7, #0]
 800e466:	2204      	movs	r2, #4
 800e468:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e46a:	4b03      	ldr	r3, [pc, #12]	; (800e478 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	370c      	adds	r7, #12
 800e470:	46bd      	mov	sp, r7
 800e472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e476:	4770      	bx	lr
 800e478:	200000ec 	.word	0x200000ec

0800e47c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	4603      	mov	r3, r0
 800e484:	6039      	str	r1, [r7, #0]
 800e486:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e488:	79fb      	ldrb	r3, [r7, #7]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d105      	bne.n	800e49a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e48e:	683a      	ldr	r2, [r7, #0]
 800e490:	4907      	ldr	r1, [pc, #28]	; (800e4b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e492:	4808      	ldr	r0, [pc, #32]	; (800e4b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e494:	f7fb fae8 	bl	8009a68 <USBD_GetString>
 800e498:	e004      	b.n	800e4a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e49a:	683a      	ldr	r2, [r7, #0]
 800e49c:	4904      	ldr	r1, [pc, #16]	; (800e4b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e49e:	4805      	ldr	r0, [pc, #20]	; (800e4b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e4a0:	f7fb fae2 	bl	8009a68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e4a4:	4b02      	ldr	r3, [pc, #8]	; (800e4b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3708      	adds	r7, #8
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	2000b210 	.word	0x2000b210
 800e4b4:	08010eec 	.word	0x08010eec

0800e4b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	4603      	mov	r3, r0
 800e4c0:	6039      	str	r1, [r7, #0]
 800e4c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e4c4:	683a      	ldr	r2, [r7, #0]
 800e4c6:	4904      	ldr	r1, [pc, #16]	; (800e4d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e4c8:	4804      	ldr	r0, [pc, #16]	; (800e4dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e4ca:	f7fb facd 	bl	8009a68 <USBD_GetString>
  return USBD_StrDesc;
 800e4ce:	4b02      	ldr	r3, [pc, #8]	; (800e4d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3708      	adds	r7, #8
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	2000b210 	.word	0x2000b210
 800e4dc:	08010f04 	.word	0x08010f04

0800e4e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	6039      	str	r1, [r7, #0]
 800e4ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	221a      	movs	r2, #26
 800e4f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e4f2:	f000 f843 	bl	800e57c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e4f6:	4b02      	ldr	r3, [pc, #8]	; (800e500 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	200000f0 	.word	0x200000f0

0800e504 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	4603      	mov	r3, r0
 800e50c:	6039      	str	r1, [r7, #0]
 800e50e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e510:	79fb      	ldrb	r3, [r7, #7]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d105      	bne.n	800e522 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e516:	683a      	ldr	r2, [r7, #0]
 800e518:	4907      	ldr	r1, [pc, #28]	; (800e538 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e51a:	4808      	ldr	r0, [pc, #32]	; (800e53c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e51c:	f7fb faa4 	bl	8009a68 <USBD_GetString>
 800e520:	e004      	b.n	800e52c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e522:	683a      	ldr	r2, [r7, #0]
 800e524:	4904      	ldr	r1, [pc, #16]	; (800e538 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e526:	4805      	ldr	r0, [pc, #20]	; (800e53c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e528:	f7fb fa9e 	bl	8009a68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e52c:	4b02      	ldr	r3, [pc, #8]	; (800e538 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3708      	adds	r7, #8
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	2000b210 	.word	0x2000b210
 800e53c:	08010f18 	.word	0x08010f18

0800e540 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b082      	sub	sp, #8
 800e544:	af00      	add	r7, sp, #0
 800e546:	4603      	mov	r3, r0
 800e548:	6039      	str	r1, [r7, #0]
 800e54a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e54c:	79fb      	ldrb	r3, [r7, #7]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d105      	bne.n	800e55e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e552:	683a      	ldr	r2, [r7, #0]
 800e554:	4907      	ldr	r1, [pc, #28]	; (800e574 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e556:	4808      	ldr	r0, [pc, #32]	; (800e578 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e558:	f7fb fa86 	bl	8009a68 <USBD_GetString>
 800e55c:	e004      	b.n	800e568 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e55e:	683a      	ldr	r2, [r7, #0]
 800e560:	4904      	ldr	r1, [pc, #16]	; (800e574 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e562:	4805      	ldr	r0, [pc, #20]	; (800e578 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e564:	f7fb fa80 	bl	8009a68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e568:	4b02      	ldr	r3, [pc, #8]	; (800e574 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	2000b210 	.word	0x2000b210
 800e578:	08010f24 	.word	0x08010f24

0800e57c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e582:	4b0f      	ldr	r3, [pc, #60]	; (800e5c0 <Get_SerialNum+0x44>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e588:	4b0e      	ldr	r3, [pc, #56]	; (800e5c4 <Get_SerialNum+0x48>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e58e:	4b0e      	ldr	r3, [pc, #56]	; (800e5c8 <Get_SerialNum+0x4c>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e594:	68fa      	ldr	r2, [r7, #12]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4413      	add	r3, r2
 800e59a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d009      	beq.n	800e5b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e5a2:	2208      	movs	r2, #8
 800e5a4:	4909      	ldr	r1, [pc, #36]	; (800e5cc <Get_SerialNum+0x50>)
 800e5a6:	68f8      	ldr	r0, [r7, #12]
 800e5a8:	f000 f814 	bl	800e5d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e5ac:	2204      	movs	r2, #4
 800e5ae:	4908      	ldr	r1, [pc, #32]	; (800e5d0 <Get_SerialNum+0x54>)
 800e5b0:	68b8      	ldr	r0, [r7, #8]
 800e5b2:	f000 f80f 	bl	800e5d4 <IntToUnicode>
  }
}
 800e5b6:	bf00      	nop
 800e5b8:	3710      	adds	r7, #16
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	1fff7a10 	.word	0x1fff7a10
 800e5c4:	1fff7a14 	.word	0x1fff7a14
 800e5c8:	1fff7a18 	.word	0x1fff7a18
 800e5cc:	200000f2 	.word	0x200000f2
 800e5d0:	20000102 	.word	0x20000102

0800e5d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b087      	sub	sp, #28
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	4613      	mov	r3, r2
 800e5e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	75fb      	strb	r3, [r7, #23]
 800e5ea:	e027      	b.n	800e63c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	0f1b      	lsrs	r3, r3, #28
 800e5f0:	2b09      	cmp	r3, #9
 800e5f2:	d80b      	bhi.n	800e60c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	0f1b      	lsrs	r3, r3, #28
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	7dfb      	ldrb	r3, [r7, #23]
 800e5fc:	005b      	lsls	r3, r3, #1
 800e5fe:	4619      	mov	r1, r3
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	440b      	add	r3, r1
 800e604:	3230      	adds	r2, #48	; 0x30
 800e606:	b2d2      	uxtb	r2, r2
 800e608:	701a      	strb	r2, [r3, #0]
 800e60a:	e00a      	b.n	800e622 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	0f1b      	lsrs	r3, r3, #28
 800e610:	b2da      	uxtb	r2, r3
 800e612:	7dfb      	ldrb	r3, [r7, #23]
 800e614:	005b      	lsls	r3, r3, #1
 800e616:	4619      	mov	r1, r3
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	440b      	add	r3, r1
 800e61c:	3237      	adds	r2, #55	; 0x37
 800e61e:	b2d2      	uxtb	r2, r2
 800e620:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	011b      	lsls	r3, r3, #4
 800e626:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e628:	7dfb      	ldrb	r3, [r7, #23]
 800e62a:	005b      	lsls	r3, r3, #1
 800e62c:	3301      	adds	r3, #1
 800e62e:	68ba      	ldr	r2, [r7, #8]
 800e630:	4413      	add	r3, r2
 800e632:	2200      	movs	r2, #0
 800e634:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e636:	7dfb      	ldrb	r3, [r7, #23]
 800e638:	3301      	adds	r3, #1
 800e63a:	75fb      	strb	r3, [r7, #23]
 800e63c:	7dfa      	ldrb	r2, [r7, #23]
 800e63e:	79fb      	ldrb	r3, [r7, #7]
 800e640:	429a      	cmp	r2, r3
 800e642:	d3d3      	bcc.n	800e5ec <IntToUnicode+0x18>
  }
}
 800e644:	bf00      	nop
 800e646:	bf00      	nop
 800e648:	371c      	adds	r7, #28
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr
	...

0800e654 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b08a      	sub	sp, #40	; 0x28
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e65c:	f107 0314 	add.w	r3, r7, #20
 800e660:	2200      	movs	r2, #0
 800e662:	601a      	str	r2, [r3, #0]
 800e664:	605a      	str	r2, [r3, #4]
 800e666:	609a      	str	r2, [r3, #8]
 800e668:	60da      	str	r2, [r3, #12]
 800e66a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e674:	d13a      	bne.n	800e6ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e676:	2300      	movs	r3, #0
 800e678:	613b      	str	r3, [r7, #16]
 800e67a:	4b1e      	ldr	r3, [pc, #120]	; (800e6f4 <HAL_PCD_MspInit+0xa0>)
 800e67c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e67e:	4a1d      	ldr	r2, [pc, #116]	; (800e6f4 <HAL_PCD_MspInit+0xa0>)
 800e680:	f043 0301 	orr.w	r3, r3, #1
 800e684:	6313      	str	r3, [r2, #48]	; 0x30
 800e686:	4b1b      	ldr	r3, [pc, #108]	; (800e6f4 <HAL_PCD_MspInit+0xa0>)
 800e688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e68a:	f003 0301 	and.w	r3, r3, #1
 800e68e:	613b      	str	r3, [r7, #16]
 800e690:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e692:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e696:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e698:	2302      	movs	r3, #2
 800e69a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e69c:	2300      	movs	r3, #0
 800e69e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e6a0:	2303      	movs	r3, #3
 800e6a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e6a4:	230a      	movs	r3, #10
 800e6a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e6a8:	f107 0314 	add.w	r3, r7, #20
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	4812      	ldr	r0, [pc, #72]	; (800e6f8 <HAL_PCD_MspInit+0xa4>)
 800e6b0:	f7f4 ffa2 	bl	80035f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e6b4:	4b0f      	ldr	r3, [pc, #60]	; (800e6f4 <HAL_PCD_MspInit+0xa0>)
 800e6b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b8:	4a0e      	ldr	r2, [pc, #56]	; (800e6f4 <HAL_PCD_MspInit+0xa0>)
 800e6ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6be:	6353      	str	r3, [r2, #52]	; 0x34
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	60fb      	str	r3, [r7, #12]
 800e6c4:	4b0b      	ldr	r3, [pc, #44]	; (800e6f4 <HAL_PCD_MspInit+0xa0>)
 800e6c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6c8:	4a0a      	ldr	r2, [pc, #40]	; (800e6f4 <HAL_PCD_MspInit+0xa0>)
 800e6ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e6ce:	6453      	str	r3, [r2, #68]	; 0x44
 800e6d0:	4b08      	ldr	r3, [pc, #32]	; (800e6f4 <HAL_PCD_MspInit+0xa0>)
 800e6d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e6d8:	60fb      	str	r3, [r7, #12]
 800e6da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e6dc:	2200      	movs	r2, #0
 800e6de:	2105      	movs	r1, #5
 800e6e0:	2043      	movs	r0, #67	; 0x43
 800e6e2:	f7f4 fbe2 	bl	8002eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e6e6:	2043      	movs	r0, #67	; 0x43
 800e6e8:	f7f4 fbfb 	bl	8002ee2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e6ec:	bf00      	nop
 800e6ee:	3728      	adds	r7, #40	; 0x28
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	40023800 	.word	0x40023800
 800e6f8:	40020000 	.word	0x40020000

0800e6fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b082      	sub	sp, #8
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e710:	4619      	mov	r1, r3
 800e712:	4610      	mov	r0, r2
 800e714:	f7fa f849 	bl	80087aa <USBD_LL_SetupStage>
}
 800e718:	bf00      	nop
 800e71a:	3708      	adds	r7, #8
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	460b      	mov	r3, r1
 800e72a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e732:	78fa      	ldrb	r2, [r7, #3]
 800e734:	6879      	ldr	r1, [r7, #4]
 800e736:	4613      	mov	r3, r2
 800e738:	00db      	lsls	r3, r3, #3
 800e73a:	4413      	add	r3, r2
 800e73c:	009b      	lsls	r3, r3, #2
 800e73e:	440b      	add	r3, r1
 800e740:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	78fb      	ldrb	r3, [r7, #3]
 800e748:	4619      	mov	r1, r3
 800e74a:	f7fa f883 	bl	8008854 <USBD_LL_DataOutStage>
}
 800e74e:	bf00      	nop
 800e750:	3708      	adds	r7, #8
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b082      	sub	sp, #8
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
 800e75e:	460b      	mov	r3, r1
 800e760:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e768:	78fa      	ldrb	r2, [r7, #3]
 800e76a:	6879      	ldr	r1, [r7, #4]
 800e76c:	4613      	mov	r3, r2
 800e76e:	00db      	lsls	r3, r3, #3
 800e770:	4413      	add	r3, r2
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	440b      	add	r3, r1
 800e776:	334c      	adds	r3, #76	; 0x4c
 800e778:	681a      	ldr	r2, [r3, #0]
 800e77a:	78fb      	ldrb	r3, [r7, #3]
 800e77c:	4619      	mov	r1, r3
 800e77e:	f7fa f91c 	bl	80089ba <USBD_LL_DataInStage>
}
 800e782:	bf00      	nop
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e78a:	b580      	push	{r7, lr}
 800e78c:	b082      	sub	sp, #8
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e798:	4618      	mov	r0, r3
 800e79a:	f7fa fa50 	bl	8008c3e <USBD_LL_SOF>
}
 800e79e:	bf00      	nop
 800e7a0:	3708      	adds	r7, #8
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}

0800e7a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b084      	sub	sp, #16
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d102      	bne.n	800e7c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	73fb      	strb	r3, [r7, #15]
 800e7be:	e008      	b.n	800e7d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	2b02      	cmp	r3, #2
 800e7c6:	d102      	bne.n	800e7ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	73fb      	strb	r3, [r7, #15]
 800e7cc:	e001      	b.n	800e7d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e7ce:	f7f3 fc25 	bl	800201c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7d8:	7bfa      	ldrb	r2, [r7, #15]
 800e7da:	4611      	mov	r1, r2
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7fa f9f0 	bl	8008bc2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7fa f998 	bl	8008b1e <USBD_LL_Reset>
}
 800e7ee:	bf00      	nop
 800e7f0:	3710      	adds	r7, #16
 800e7f2:	46bd      	mov	sp, r7
 800e7f4:	bd80      	pop	{r7, pc}
	...

0800e7f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b082      	sub	sp, #8
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e806:	4618      	mov	r0, r3
 800e808:	f7fa f9eb 	bl	8008be2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	6812      	ldr	r2, [r2, #0]
 800e81a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e81e:	f043 0301 	orr.w	r3, r3, #1
 800e822:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6a1b      	ldr	r3, [r3, #32]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d005      	beq.n	800e838 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e82c:	4b04      	ldr	r3, [pc, #16]	; (800e840 <HAL_PCD_SuspendCallback+0x48>)
 800e82e:	691b      	ldr	r3, [r3, #16]
 800e830:	4a03      	ldr	r2, [pc, #12]	; (800e840 <HAL_PCD_SuspendCallback+0x48>)
 800e832:	f043 0306 	orr.w	r3, r3, #6
 800e836:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e838:	bf00      	nop
 800e83a:	3708      	adds	r7, #8
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}
 800e840:	e000ed00 	.word	0xe000ed00

0800e844 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b082      	sub	sp, #8
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e852:	4618      	mov	r0, r3
 800e854:	f7fa f9db 	bl	8008c0e <USBD_LL_Resume>
}
 800e858:	bf00      	nop
 800e85a:	3708      	adds	r7, #8
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd80      	pop	{r7, pc}

0800e860 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
 800e868:	460b      	mov	r3, r1
 800e86a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e872:	78fa      	ldrb	r2, [r7, #3]
 800e874:	4611      	mov	r1, r2
 800e876:	4618      	mov	r0, r3
 800e878:	f7fa fa33 	bl	8008ce2 <USBD_LL_IsoOUTIncomplete>
}
 800e87c:	bf00      	nop
 800e87e:	3708      	adds	r7, #8
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e884:	b580      	push	{r7, lr}
 800e886:	b082      	sub	sp, #8
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	460b      	mov	r3, r1
 800e88e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e896:	78fa      	ldrb	r2, [r7, #3]
 800e898:	4611      	mov	r1, r2
 800e89a:	4618      	mov	r0, r3
 800e89c:	f7fa f9ef 	bl	8008c7e <USBD_LL_IsoINIncomplete>
}
 800e8a0:	bf00      	nop
 800e8a2:	3708      	adds	r7, #8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f7fa fa45 	bl	8008d46 <USBD_LL_DevConnected>
}
 800e8bc:	bf00      	nop
 800e8be:	3708      	adds	r7, #8
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bd80      	pop	{r7, pc}

0800e8c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b082      	sub	sp, #8
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7fa fa42 	bl	8008d5c <USBD_LL_DevDisconnected>
}
 800e8d8:	bf00      	nop
 800e8da:	3708      	adds	r7, #8
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d13c      	bne.n	800e96a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e8f0:	4a20      	ldr	r2, [pc, #128]	; (800e974 <USBD_LL_Init+0x94>)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4a1e      	ldr	r2, [pc, #120]	; (800e974 <USBD_LL_Init+0x94>)
 800e8fc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e900:	4b1c      	ldr	r3, [pc, #112]	; (800e974 <USBD_LL_Init+0x94>)
 800e902:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e906:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e908:	4b1a      	ldr	r3, [pc, #104]	; (800e974 <USBD_LL_Init+0x94>)
 800e90a:	2204      	movs	r2, #4
 800e90c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e90e:	4b19      	ldr	r3, [pc, #100]	; (800e974 <USBD_LL_Init+0x94>)
 800e910:	2202      	movs	r2, #2
 800e912:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e914:	4b17      	ldr	r3, [pc, #92]	; (800e974 <USBD_LL_Init+0x94>)
 800e916:	2200      	movs	r2, #0
 800e918:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e91a:	4b16      	ldr	r3, [pc, #88]	; (800e974 <USBD_LL_Init+0x94>)
 800e91c:	2202      	movs	r2, #2
 800e91e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e920:	4b14      	ldr	r3, [pc, #80]	; (800e974 <USBD_LL_Init+0x94>)
 800e922:	2200      	movs	r2, #0
 800e924:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e926:	4b13      	ldr	r3, [pc, #76]	; (800e974 <USBD_LL_Init+0x94>)
 800e928:	2200      	movs	r2, #0
 800e92a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e92c:	4b11      	ldr	r3, [pc, #68]	; (800e974 <USBD_LL_Init+0x94>)
 800e92e:	2200      	movs	r2, #0
 800e930:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e932:	4b10      	ldr	r3, [pc, #64]	; (800e974 <USBD_LL_Init+0x94>)
 800e934:	2200      	movs	r2, #0
 800e936:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e938:	4b0e      	ldr	r3, [pc, #56]	; (800e974 <USBD_LL_Init+0x94>)
 800e93a:	2200      	movs	r2, #0
 800e93c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e93e:	480d      	ldr	r0, [pc, #52]	; (800e974 <USBD_LL_Init+0x94>)
 800e940:	f7f5 f811 	bl	8003966 <HAL_PCD_Init>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	d001      	beq.n	800e94e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e94a:	f7f3 fb67 	bl	800201c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e94e:	2180      	movs	r1, #128	; 0x80
 800e950:	4808      	ldr	r0, [pc, #32]	; (800e974 <USBD_LL_Init+0x94>)
 800e952:	f7f6 fa68 	bl	8004e26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e956:	2240      	movs	r2, #64	; 0x40
 800e958:	2100      	movs	r1, #0
 800e95a:	4806      	ldr	r0, [pc, #24]	; (800e974 <USBD_LL_Init+0x94>)
 800e95c:	f7f6 fa1c 	bl	8004d98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e960:	2280      	movs	r2, #128	; 0x80
 800e962:	2101      	movs	r1, #1
 800e964:	4803      	ldr	r0, [pc, #12]	; (800e974 <USBD_LL_Init+0x94>)
 800e966:	f7f6 fa17 	bl	8004d98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e96a:	2300      	movs	r3, #0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3708      	adds	r7, #8
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	2000b410 	.word	0x2000b410

0800e978 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b084      	sub	sp, #16
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e980:	2300      	movs	r3, #0
 800e982:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e984:	2300      	movs	r3, #0
 800e986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e98e:	4618      	mov	r0, r3
 800e990:	f7f5 f906 	bl	8003ba0 <HAL_PCD_Start>
 800e994:	4603      	mov	r3, r0
 800e996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e998:	7bfb      	ldrb	r3, [r7, #15]
 800e99a:	4618      	mov	r0, r3
 800e99c:	f000 f942 	bl	800ec24 <USBD_Get_USB_Status>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3710      	adds	r7, #16
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b084      	sub	sp, #16
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
 800e9b6:	4608      	mov	r0, r1
 800e9b8:	4611      	mov	r1, r2
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	4603      	mov	r3, r0
 800e9be:	70fb      	strb	r3, [r7, #3]
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	70bb      	strb	r3, [r7, #2]
 800e9c4:	4613      	mov	r3, r2
 800e9c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e9d6:	78bb      	ldrb	r3, [r7, #2]
 800e9d8:	883a      	ldrh	r2, [r7, #0]
 800e9da:	78f9      	ldrb	r1, [r7, #3]
 800e9dc:	f7f5 fdd7 	bl	800458e <HAL_PCD_EP_Open>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e9e4:	7bfb      	ldrb	r3, [r7, #15]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f000 f91c 	bl	800ec24 <USBD_Get_USB_Status>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e9f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9fa:	b580      	push	{r7, lr}
 800e9fc:	b084      	sub	sp, #16
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
 800ea02:	460b      	mov	r3, r1
 800ea04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea06:	2300      	movs	r3, #0
 800ea08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea14:	78fa      	ldrb	r2, [r7, #3]
 800ea16:	4611      	mov	r1, r2
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7f5 fe20 	bl	800465e <HAL_PCD_EP_Close>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea22:	7bfb      	ldrb	r3, [r7, #15]
 800ea24:	4618      	mov	r0, r3
 800ea26:	f000 f8fd 	bl	800ec24 <USBD_Get_USB_Status>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3710      	adds	r7, #16
 800ea34:	46bd      	mov	sp, r7
 800ea36:	bd80      	pop	{r7, pc}

0800ea38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	460b      	mov	r3, r1
 800ea42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea44:	2300      	movs	r3, #0
 800ea46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea52:	78fa      	ldrb	r2, [r7, #3]
 800ea54:	4611      	mov	r1, r2
 800ea56:	4618      	mov	r0, r3
 800ea58:	f7f5 fef8 	bl	800484c <HAL_PCD_EP_SetStall>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea60:	7bfb      	ldrb	r3, [r7, #15]
 800ea62:	4618      	mov	r0, r3
 800ea64:	f000 f8de 	bl	800ec24 <USBD_Get_USB_Status>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ea6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}

0800ea76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ea76:	b580      	push	{r7, lr}
 800ea78:	b084      	sub	sp, #16
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
 800ea7e:	460b      	mov	r3, r1
 800ea80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ea82:	2300      	movs	r3, #0
 800ea84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea86:	2300      	movs	r3, #0
 800ea88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ea90:	78fa      	ldrb	r2, [r7, #3]
 800ea92:	4611      	mov	r1, r2
 800ea94:	4618      	mov	r0, r3
 800ea96:	f7f5 ff3d 	bl	8004914 <HAL_PCD_EP_ClrStall>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ea9e:	7bfb      	ldrb	r3, [r7, #15]
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	f000 f8bf 	bl	800ec24 <USBD_Get_USB_Status>
 800eaa6:	4603      	mov	r3, r0
 800eaa8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eaaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3710      	adds	r7, #16
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b085      	sub	sp, #20
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	460b      	mov	r3, r1
 800eabe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eac6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800eac8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	da0b      	bge.n	800eae8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ead0:	78fb      	ldrb	r3, [r7, #3]
 800ead2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ead6:	68f9      	ldr	r1, [r7, #12]
 800ead8:	4613      	mov	r3, r2
 800eada:	00db      	lsls	r3, r3, #3
 800eadc:	4413      	add	r3, r2
 800eade:	009b      	lsls	r3, r3, #2
 800eae0:	440b      	add	r3, r1
 800eae2:	333e      	adds	r3, #62	; 0x3e
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	e00b      	b.n	800eb00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eae8:	78fb      	ldrb	r3, [r7, #3]
 800eaea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eaee:	68f9      	ldr	r1, [r7, #12]
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	00db      	lsls	r3, r3, #3
 800eaf4:	4413      	add	r3, r2
 800eaf6:	009b      	lsls	r3, r3, #2
 800eaf8:	440b      	add	r3, r1
 800eafa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800eafe:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3714      	adds	r7, #20
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr

0800eb0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b084      	sub	sp, #16
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	460b      	mov	r3, r1
 800eb16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb18:	2300      	movs	r3, #0
 800eb1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eb26:	78fa      	ldrb	r2, [r7, #3]
 800eb28:	4611      	mov	r1, r2
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f7f5 fd0a 	bl	8004544 <HAL_PCD_SetAddress>
 800eb30:	4603      	mov	r3, r0
 800eb32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb34:	7bfb      	ldrb	r3, [r7, #15]
 800eb36:	4618      	mov	r0, r3
 800eb38:	f000 f874 	bl	800ec24 <USBD_Get_USB_Status>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eb40:	7bbb      	ldrb	r3, [r7, #14]
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b086      	sub	sp, #24
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	60f8      	str	r0, [r7, #12]
 800eb52:	607a      	str	r2, [r7, #4]
 800eb54:	603b      	str	r3, [r7, #0]
 800eb56:	460b      	mov	r3, r1
 800eb58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800eb68:	7af9      	ldrb	r1, [r7, #11]
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	f7f5 fe23 	bl	80047b8 <HAL_PCD_EP_Transmit>
 800eb72:	4603      	mov	r3, r0
 800eb74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eb76:	7dfb      	ldrb	r3, [r7, #23]
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f000 f853 	bl	800ec24 <USBD_Get_USB_Status>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800eb82:	7dbb      	ldrb	r3, [r7, #22]
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3718      	adds	r7, #24
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b086      	sub	sp, #24
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	607a      	str	r2, [r7, #4]
 800eb96:	603b      	str	r3, [r7, #0]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eba0:	2300      	movs	r3, #0
 800eba2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ebaa:	7af9      	ldrb	r1, [r7, #11]
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	687a      	ldr	r2, [r7, #4]
 800ebb0:	f7f5 fd9f 	bl	80046f2 <HAL_PCD_EP_Receive>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebb8:	7dfb      	ldrb	r3, [r7, #23]
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f000 f832 	bl	800ec24 <USBD_Get_USB_Status>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ebc4:	7dbb      	ldrb	r3, [r7, #22]
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3718      	adds	r7, #24
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	bd80      	pop	{r7, pc}

0800ebce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebce:	b580      	push	{r7, lr}
 800ebd0:	b082      	sub	sp, #8
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
 800ebd6:	460b      	mov	r3, r1
 800ebd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebe0:	78fa      	ldrb	r2, [r7, #3]
 800ebe2:	4611      	mov	r1, r2
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7f5 fdcf 	bl	8004788 <HAL_PCD_EP_GetRxCount>
 800ebea:	4603      	mov	r3, r0
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3708      	adds	r7, #8
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ebfc:	4b03      	ldr	r3, [pc, #12]	; (800ec0c <USBD_static_malloc+0x18>)
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	370c      	adds	r7, #12
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr
 800ec0a:	bf00      	nop
 800ec0c:	2000b91c 	.word	0x2000b91c

0800ec10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]

}
 800ec18:	bf00      	nop
 800ec1a:	370c      	adds	r7, #12
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr

0800ec24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ec32:	79fb      	ldrb	r3, [r7, #7]
 800ec34:	2b03      	cmp	r3, #3
 800ec36:	d817      	bhi.n	800ec68 <USBD_Get_USB_Status+0x44>
 800ec38:	a201      	add	r2, pc, #4	; (adr r2, 800ec40 <USBD_Get_USB_Status+0x1c>)
 800ec3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec3e:	bf00      	nop
 800ec40:	0800ec51 	.word	0x0800ec51
 800ec44:	0800ec57 	.word	0x0800ec57
 800ec48:	0800ec5d 	.word	0x0800ec5d
 800ec4c:	0800ec63 	.word	0x0800ec63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ec50:	2300      	movs	r3, #0
 800ec52:	73fb      	strb	r3, [r7, #15]
    break;
 800ec54:	e00b      	b.n	800ec6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ec56:	2303      	movs	r3, #3
 800ec58:	73fb      	strb	r3, [r7, #15]
    break;
 800ec5a:	e008      	b.n	800ec6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ec60:	e005      	b.n	800ec6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ec62:	2303      	movs	r3, #3
 800ec64:	73fb      	strb	r3, [r7, #15]
    break;
 800ec66:	e002      	b.n	800ec6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ec68:	2303      	movs	r3, #3
 800ec6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ec6c:	bf00      	nop
  }
  return usb_status;
 800ec6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3714      	adds	r7, #20
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <arm_cfft_radix8by2_f32>:
 800ec7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec80:	ed2d 8b08 	vpush	{d8-d11}
 800ec84:	f8b0 e000 	ldrh.w	lr, [r0]
 800ec88:	6842      	ldr	r2, [r0, #4]
 800ec8a:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800ec8e:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800ec92:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800ec96:	4607      	mov	r7, r0
 800ec98:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800ec9c:	f000 80af 	beq.w	800edfe <arm_cfft_radix8by2_f32+0x182>
 800eca0:	3310      	adds	r3, #16
 800eca2:	18ce      	adds	r6, r1, r3
 800eca4:	3210      	adds	r2, #16
 800eca6:	4443      	add	r3, r8
 800eca8:	f101 0510 	add.w	r5, r1, #16
 800ecac:	f108 0410 	add.w	r4, r8, #16
 800ecb0:	ed54 1a04 	vldr	s3, [r4, #-16]
 800ecb4:	ed13 4a04 	vldr	s8, [r3, #-16]
 800ecb8:	ed53 3a03 	vldr	s7, [r3, #-12]
 800ecbc:	ed53 5a02 	vldr	s11, [r3, #-8]
 800ecc0:	ed13 5a01 	vldr	s10, [r3, #-4]
 800ecc4:	ed54 6a03 	vldr	s13, [r4, #-12]
 800ecc8:	ed14 0a02 	vldr	s0, [r4, #-8]
 800eccc:	ed16 2a04 	vldr	s4, [r6, #-16]
 800ecd0:	ed56 2a03 	vldr	s5, [r6, #-12]
 800ecd4:	ed15 6a03 	vldr	s12, [r5, #-12]
 800ecd8:	ed15 7a01 	vldr	s14, [r5, #-4]
 800ecdc:	ed15 3a04 	vldr	s6, [r5, #-16]
 800ece0:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ece4:	ed56 0a02 	vldr	s1, [r6, #-8]
 800ece8:	ed16 1a01 	vldr	s2, [r6, #-4]
 800ecec:	ed55 4a02 	vldr	s9, [r5, #-8]
 800ecf0:	ee73 ba21 	vadd.f32	s23, s6, s3
 800ecf4:	ee36 ba26 	vadd.f32	s22, s12, s13
 800ecf8:	ee37 aa27 	vadd.f32	s20, s14, s15
 800ecfc:	ee72 9a04 	vadd.f32	s19, s4, s8
 800ed00:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800ed04:	ee31 8a05 	vadd.f32	s16, s2, s10
 800ed08:	ee74 aa80 	vadd.f32	s21, s9, s0
 800ed0c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800ed10:	ed45 ba04 	vstr	s23, [r5, #-16]
 800ed14:	ed05 ba03 	vstr	s22, [r5, #-12]
 800ed18:	ed45 aa02 	vstr	s21, [r5, #-8]
 800ed1c:	ed05 aa01 	vstr	s20, [r5, #-4]
 800ed20:	ed06 8a01 	vstr	s16, [r6, #-4]
 800ed24:	ed46 9a04 	vstr	s19, [r6, #-16]
 800ed28:	ed06 9a03 	vstr	s18, [r6, #-12]
 800ed2c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800ed30:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ed34:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800ed38:	ed12 6a03 	vldr	s12, [r2, #-12]
 800ed3c:	ed52 2a04 	vldr	s5, [r2, #-16]
 800ed40:	ee33 3a61 	vsub.f32	s6, s6, s3
 800ed44:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ed48:	ee26 8a86 	vmul.f32	s16, s13, s12
 800ed4c:	ee24 2a06 	vmul.f32	s4, s8, s12
 800ed50:	ee63 1a22 	vmul.f32	s3, s6, s5
 800ed54:	ee24 4a22 	vmul.f32	s8, s8, s5
 800ed58:	ee23 3a06 	vmul.f32	s6, s6, s12
 800ed5c:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800ed60:	ee23 6a86 	vmul.f32	s12, s7, s12
 800ed64:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800ed68:	ee36 6a04 	vadd.f32	s12, s12, s8
 800ed6c:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800ed70:	ee72 3a63 	vsub.f32	s7, s4, s7
 800ed74:	ee71 2a88 	vadd.f32	s5, s3, s16
 800ed78:	ed44 6a03 	vstr	s13, [r4, #-12]
 800ed7c:	ed44 2a04 	vstr	s5, [r4, #-16]
 800ed80:	ed43 3a04 	vstr	s7, [r3, #-16]
 800ed84:	ed03 6a03 	vstr	s12, [r3, #-12]
 800ed88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ed8c:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800ed90:	ed12 7a01 	vldr	s14, [r2, #-4]
 800ed94:	ed52 5a02 	vldr	s11, [r2, #-8]
 800ed98:	ee35 6a41 	vsub.f32	s12, s10, s2
 800ed9c:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800eda0:	ee67 3a87 	vmul.f32	s7, s15, s14
 800eda4:	ee26 5a87 	vmul.f32	s10, s13, s14
 800eda8:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800edac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800edb0:	ee64 4a87 	vmul.f32	s9, s9, s14
 800edb4:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800edb8:	ee26 7a07 	vmul.f32	s14, s12, s14
 800edbc:	ee26 6a25 	vmul.f32	s12, s12, s11
 800edc0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800edc4:	ee74 5a23 	vadd.f32	s11, s8, s7
 800edc8:	ee35 6a46 	vsub.f32	s12, s10, s12
 800edcc:	ee37 7a26 	vadd.f32	s14, s14, s13
 800edd0:	f1be 0e01 	subs.w	lr, lr, #1
 800edd4:	ed44 5a02 	vstr	s11, [r4, #-8]
 800edd8:	f105 0510 	add.w	r5, r5, #16
 800eddc:	ed44 7a01 	vstr	s15, [r4, #-4]
 800ede0:	f106 0610 	add.w	r6, r6, #16
 800ede4:	ed03 6a02 	vstr	s12, [r3, #-8]
 800ede8:	ed03 7a01 	vstr	s14, [r3, #-4]
 800edec:	f102 0210 	add.w	r2, r2, #16
 800edf0:	f104 0410 	add.w	r4, r4, #16
 800edf4:	f103 0310 	add.w	r3, r3, #16
 800edf8:	f47f af5a 	bne.w	800ecb0 <arm_cfft_radix8by2_f32+0x34>
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	fa1f f48c 	uxth.w	r4, ip
 800ee02:	4608      	mov	r0, r1
 800ee04:	2302      	movs	r3, #2
 800ee06:	4621      	mov	r1, r4
 800ee08:	f000 fc00 	bl	800f60c <arm_radix8_butterfly_f32>
 800ee0c:	ecbd 8b08 	vpop	{d8-d11}
 800ee10:	4640      	mov	r0, r8
 800ee12:	4621      	mov	r1, r4
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	2302      	movs	r3, #2
 800ee18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee1c:	f000 bbf6 	b.w	800f60c <arm_radix8_butterfly_f32>

0800ee20 <arm_cfft_radix8by4_f32>:
 800ee20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee24:	ed2d 8b0a 	vpush	{d8-d12}
 800ee28:	8802      	ldrh	r2, [r0, #0]
 800ee2a:	ed91 6a00 	vldr	s12, [r1]
 800ee2e:	b08f      	sub	sp, #60	; 0x3c
 800ee30:	460f      	mov	r7, r1
 800ee32:	0852      	lsrs	r2, r2, #1
 800ee34:	0093      	lsls	r3, r2, #2
 800ee36:	900c      	str	r0, [sp, #48]	; 0x30
 800ee38:	9103      	str	r1, [sp, #12]
 800ee3a:	6841      	ldr	r1, [r0, #4]
 800ee3c:	ed97 7a01 	vldr	s14, [r7, #4]
 800ee40:	4638      	mov	r0, r7
 800ee42:	4418      	add	r0, r3
 800ee44:	4606      	mov	r6, r0
 800ee46:	9009      	str	r0, [sp, #36]	; 0x24
 800ee48:	4418      	add	r0, r3
 800ee4a:	edd0 6a00 	vldr	s13, [r0]
 800ee4e:	edd6 3a00 	vldr	s7, [r6]
 800ee52:	edd6 2a01 	vldr	s5, [r6, #4]
 800ee56:	edd0 7a01 	vldr	s15, [r0, #4]
 800ee5a:	900a      	str	r0, [sp, #40]	; 0x28
 800ee5c:	ee76 5a26 	vadd.f32	s11, s12, s13
 800ee60:	4604      	mov	r4, r0
 800ee62:	4625      	mov	r5, r4
 800ee64:	441c      	add	r4, r3
 800ee66:	ed94 4a00 	vldr	s8, [r4]
 800ee6a:	ed94 5a01 	vldr	s10, [r4, #4]
 800ee6e:	9401      	str	r4, [sp, #4]
 800ee70:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800ee74:	4630      	mov	r0, r6
 800ee76:	ee74 4a24 	vadd.f32	s9, s8, s9
 800ee7a:	463e      	mov	r6, r7
 800ee7c:	ee14 ea90 	vmov	lr, s9
 800ee80:	ee76 6a66 	vsub.f32	s13, s12, s13
 800ee84:	f846 eb08 	str.w	lr, [r6], #8
 800ee88:	ee37 6a27 	vadd.f32	s12, s14, s15
 800ee8c:	edd0 4a01 	vldr	s9, [r0, #4]
 800ee90:	9604      	str	r6, [sp, #16]
 800ee92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee96:	9e01      	ldr	r6, [sp, #4]
 800ee98:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800ee9c:	ed96 2a01 	vldr	s4, [r6, #4]
 800eea0:	ee36 7a24 	vadd.f32	s14, s12, s9
 800eea4:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800eea8:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800eeac:	ee36 6a62 	vsub.f32	s12, s12, s5
 800eeb0:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800eeb4:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800eeb8:	ee73 3a45 	vsub.f32	s7, s6, s10
 800eebc:	4604      	mov	r4, r0
 800eebe:	ee36 6a45 	vsub.f32	s12, s12, s10
 800eec2:	ee75 6a26 	vadd.f32	s13, s10, s13
 800eec6:	46a3      	mov	fp, r4
 800eec8:	ee37 7a02 	vadd.f32	s14, s14, s4
 800eecc:	ee34 5a84 	vadd.f32	s10, s9, s8
 800eed0:	ee13 8a90 	vmov	r8, s7
 800eed4:	46a4      	mov	ip, r4
 800eed6:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800eeda:	ed87 7a01 	vstr	s14, [r7, #4]
 800eede:	f84b 8b08 	str.w	r8, [fp], #8
 800eee2:	f1ac 0704 	sub.w	r7, ip, #4
 800eee6:	ed8c 5a01 	vstr	s10, [ip, #4]
 800eeea:	f101 0c08 	add.w	ip, r1, #8
 800eeee:	462c      	mov	r4, r5
 800eef0:	f8cd c014 	str.w	ip, [sp, #20]
 800eef4:	ee15 ca90 	vmov	ip, s11
 800eef8:	f844 cb08 	str.w	ip, [r4], #8
 800eefc:	9407      	str	r4, [sp, #28]
 800eefe:	f101 0410 	add.w	r4, r1, #16
 800ef02:	ed85 6a01 	vstr	s12, [r5, #4]
 800ef06:	0852      	lsrs	r2, r2, #1
 800ef08:	9402      	str	r4, [sp, #8]
 800ef0a:	462c      	mov	r4, r5
 800ef0c:	f101 0518 	add.w	r5, r1, #24
 800ef10:	920b      	str	r2, [sp, #44]	; 0x2c
 800ef12:	46b2      	mov	sl, r6
 800ef14:	9506      	str	r5, [sp, #24]
 800ef16:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800ef1a:	3a02      	subs	r2, #2
 800ef1c:	ee16 5a90 	vmov	r5, s13
 800ef20:	46b6      	mov	lr, r6
 800ef22:	4630      	mov	r0, r6
 800ef24:	0852      	lsrs	r2, r2, #1
 800ef26:	f84a 5b08 	str.w	r5, [sl], #8
 800ef2a:	f1a0 0604 	sub.w	r6, r0, #4
 800ef2e:	edce 7a01 	vstr	s15, [lr, #4]
 800ef32:	9208      	str	r2, [sp, #32]
 800ef34:	f000 8130 	beq.w	800f198 <arm_cfft_radix8by4_f32+0x378>
 800ef38:	4691      	mov	r9, r2
 800ef3a:	9a03      	ldr	r2, [sp, #12]
 800ef3c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ef40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ef44:	3b08      	subs	r3, #8
 800ef46:	f102 0510 	add.w	r5, r2, #16
 800ef4a:	f101 0c20 	add.w	ip, r1, #32
 800ef4e:	f1a4 020c 	sub.w	r2, r4, #12
 800ef52:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800ef56:	4433      	add	r3, r6
 800ef58:	3410      	adds	r4, #16
 800ef5a:	4650      	mov	r0, sl
 800ef5c:	4659      	mov	r1, fp
 800ef5e:	ed55 3a02 	vldr	s7, [r5, #-8]
 800ef62:	ed14 5a02 	vldr	s10, [r4, #-8]
 800ef66:	ed91 7a00 	vldr	s14, [r1]
 800ef6a:	edd0 7a00 	vldr	s15, [r0]
 800ef6e:	ed15 4a01 	vldr	s8, [r5, #-4]
 800ef72:	ed54 5a01 	vldr	s11, [r4, #-4]
 800ef76:	edd0 6a01 	vldr	s13, [r0, #4]
 800ef7a:	ed91 6a01 	vldr	s12, [r1, #4]
 800ef7e:	ee33 8a85 	vadd.f32	s16, s7, s10
 800ef82:	ee34 0a25 	vadd.f32	s0, s8, s11
 800ef86:	ee78 4a07 	vadd.f32	s9, s16, s14
 800ef8a:	ee74 5a65 	vsub.f32	s11, s8, s11
 800ef8e:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800ef92:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800ef96:	ed45 4a02 	vstr	s9, [r5, #-8]
 800ef9a:	edd1 4a01 	vldr	s9, [r1, #4]
 800ef9e:	ed90 4a01 	vldr	s8, [r0, #4]
 800efa2:	ee70 4a24 	vadd.f32	s9, s0, s9
 800efa6:	ee76 aa05 	vadd.f32	s21, s12, s10
 800efaa:	ee74 4a84 	vadd.f32	s9, s9, s8
 800efae:	ee35 aac7 	vsub.f32	s20, s11, s14
 800efb2:	ed45 4a01 	vstr	s9, [r5, #-4]
 800efb6:	edd6 1a00 	vldr	s3, [r6]
 800efba:	edd7 0a00 	vldr	s1, [r7]
 800efbe:	ed92 4a02 	vldr	s8, [r2, #8]
 800efc2:	edd3 3a02 	vldr	s7, [r3, #8]
 800efc6:	ed93 2a01 	vldr	s4, [r3, #4]
 800efca:	ed16 1a01 	vldr	s2, [r6, #-4]
 800efce:	edd2 2a01 	vldr	s5, [r2, #4]
 800efd2:	ed57 9a01 	vldr	s19, [r7, #-4]
 800efd6:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800efda:	ee39 3a81 	vadd.f32	s6, s19, s2
 800efde:	ee74 8a84 	vadd.f32	s17, s9, s8
 800efe2:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800efe6:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800efea:	ee7a aae6 	vsub.f32	s21, s21, s13
 800efee:	ee18 aa90 	vmov	sl, s17
 800eff2:	f847 a908 	str.w	sl, [r7], #-8
 800eff6:	edd2 8a01 	vldr	s17, [r2, #4]
 800effa:	ed93 9a01 	vldr	s18, [r3, #4]
 800effe:	ee73 8a28 	vadd.f32	s17, s6, s17
 800f002:	ee3a aa27 	vadd.f32	s20, s20, s15
 800f006:	ee78 8a89 	vadd.f32	s17, s17, s18
 800f00a:	ee74 0a63 	vsub.f32	s1, s8, s7
 800f00e:	edc7 8a01 	vstr	s17, [r7, #4]
 800f012:	ed18 ba02 	vldr	s22, [r8, #-8]
 800f016:	ed58 8a01 	vldr	s17, [r8, #-4]
 800f01a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800f01e:	ee6a ba28 	vmul.f32	s23, s20, s17
 800f022:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800f026:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800f02a:	ee30 9a81 	vadd.f32	s18, s1, s2
 800f02e:	ee79 9a82 	vadd.f32	s19, s19, s4
 800f032:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800f036:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800f03a:	ee69 baa8 	vmul.f32	s23, s19, s17
 800f03e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800f042:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800f046:	ee69 8a28 	vmul.f32	s17, s18, s17
 800f04a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800f04e:	ee1c aa10 	vmov	sl, s24
 800f052:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800f056:	f841 ab08 	str.w	sl, [r1], #8
 800f05a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800f05e:	ee3b bacb 	vsub.f32	s22, s23, s22
 800f062:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800f066:	ee33 3a62 	vsub.f32	s6, s6, s5
 800f06a:	ed01 aa01 	vstr	s20, [r1, #-4]
 800f06e:	edc2 8a01 	vstr	s17, [r2, #4]
 800f072:	ed82 ba02 	vstr	s22, [r2, #8]
 800f076:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800f07a:	ee74 3a63 	vsub.f32	s7, s8, s7
 800f07e:	ee38 8a47 	vsub.f32	s16, s16, s14
 800f082:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800f086:	ee30 0a46 	vsub.f32	s0, s0, s12
 800f08a:	ee33 3a42 	vsub.f32	s6, s6, s4
 800f08e:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f092:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f096:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800f09a:	ee63 8a04 	vmul.f32	s17, s6, s8
 800f09e:	ee28 aa24 	vmul.f32	s20, s16, s9
 800f0a2:	ee60 9a04 	vmul.f32	s19, s0, s8
 800f0a6:	ee28 8a04 	vmul.f32	s16, s16, s8
 800f0aa:	ee20 0a24 	vmul.f32	s0, s0, s9
 800f0ae:	ee63 3a84 	vmul.f32	s7, s7, s8
 800f0b2:	ee39 4a68 	vsub.f32	s8, s18, s17
 800f0b6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800f0ba:	ee14 aa10 	vmov	sl, s8
 800f0be:	ee30 0a48 	vsub.f32	s0, s0, s16
 800f0c2:	ee63 4a24 	vmul.f32	s9, s6, s9
 800f0c6:	ed44 9a02 	vstr	s19, [r4, #-8]
 800f0ca:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800f0ce:	ed04 0a01 	vstr	s0, [r4, #-4]
 800f0d2:	f846 a908 	str.w	sl, [r6], #-8
 800f0d6:	ee35 6a46 	vsub.f32	s12, s10, s12
 800f0da:	ee35 7a87 	vadd.f32	s14, s11, s14
 800f0de:	edc6 3a01 	vstr	s7, [r6, #4]
 800f0e2:	ee76 6a86 	vadd.f32	s13, s13, s12
 800f0e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f0ea:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800f0ee:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800f0f2:	ee67 5a86 	vmul.f32	s11, s15, s12
 800f0f6:	ee26 5a87 	vmul.f32	s10, s13, s14
 800f0fa:	ee72 2a62 	vsub.f32	s5, s4, s5
 800f0fe:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800f102:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800f106:	ee75 5a25 	vadd.f32	s11, s10, s11
 800f10a:	ee62 0a86 	vmul.f32	s1, s5, s12
 800f10e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800f112:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f116:	ee21 6a06 	vmul.f32	s12, s2, s12
 800f11a:	ee62 2a87 	vmul.f32	s5, s5, s14
 800f11e:	ee21 1a07 	vmul.f32	s2, s2, s14
 800f122:	ee15 aa90 	vmov	sl, s11
 800f126:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f12a:	f840 ab08 	str.w	sl, [r0], #8
 800f12e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800f132:	ee76 2a22 	vadd.f32	s5, s12, s5
 800f136:	f1b9 0901 	subs.w	r9, r9, #1
 800f13a:	ed40 7a01 	vstr	s15, [r0, #-4]
 800f13e:	f105 0508 	add.w	r5, r5, #8
 800f142:	ed83 1a02 	vstr	s2, [r3, #8]
 800f146:	edc3 2a01 	vstr	s5, [r3, #4]
 800f14a:	f108 0808 	add.w	r8, r8, #8
 800f14e:	f1a2 0208 	sub.w	r2, r2, #8
 800f152:	f10c 0c10 	add.w	ip, ip, #16
 800f156:	f104 0408 	add.w	r4, r4, #8
 800f15a:	f10e 0e18 	add.w	lr, lr, #24
 800f15e:	f1a3 0308 	sub.w	r3, r3, #8
 800f162:	f47f aefc 	bne.w	800ef5e <arm_cfft_radix8by4_f32+0x13e>
 800f166:	9908      	ldr	r1, [sp, #32]
 800f168:	9802      	ldr	r0, [sp, #8]
 800f16a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800f16e:	00cb      	lsls	r3, r1, #3
 800f170:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800f174:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800f178:	9102      	str	r1, [sp, #8]
 800f17a:	9904      	ldr	r1, [sp, #16]
 800f17c:	4419      	add	r1, r3
 800f17e:	9104      	str	r1, [sp, #16]
 800f180:	9905      	ldr	r1, [sp, #20]
 800f182:	4419      	add	r1, r3
 800f184:	9105      	str	r1, [sp, #20]
 800f186:	9907      	ldr	r1, [sp, #28]
 800f188:	449b      	add	fp, r3
 800f18a:	4419      	add	r1, r3
 800f18c:	449a      	add	sl, r3
 800f18e:	9b06      	ldr	r3, [sp, #24]
 800f190:	9107      	str	r1, [sp, #28]
 800f192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f196:	9306      	str	r3, [sp, #24]
 800f198:	9a04      	ldr	r2, [sp, #16]
 800f19a:	9807      	ldr	r0, [sp, #28]
 800f19c:	edd2 3a00 	vldr	s7, [r2]
 800f1a0:	ed90 4a00 	vldr	s8, [r0]
 800f1a4:	eddb 7a00 	vldr	s15, [fp]
 800f1a8:	ed9a 3a00 	vldr	s6, [sl]
 800f1ac:	edd2 4a01 	vldr	s9, [r2, #4]
 800f1b0:	ed90 7a01 	vldr	s14, [r0, #4]
 800f1b4:	ed9b 2a01 	vldr	s4, [fp, #4]
 800f1b8:	edda 5a01 	vldr	s11, [sl, #4]
 800f1bc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800f1c0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f1c2:	ee73 6a84 	vadd.f32	s13, s7, s8
 800f1c6:	ee34 6a87 	vadd.f32	s12, s9, s14
 800f1ca:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800f1ce:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800f1d2:	ee33 5a05 	vadd.f32	s10, s6, s10
 800f1d6:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800f1da:	ed82 5a00 	vstr	s10, [r2]
 800f1de:	ed9b 5a01 	vldr	s10, [fp, #4]
 800f1e2:	edda 4a01 	vldr	s9, [sl, #4]
 800f1e6:	ee36 5a05 	vadd.f32	s10, s12, s10
 800f1ea:	ee72 3a04 	vadd.f32	s7, s4, s8
 800f1ee:	ee35 5a24 	vadd.f32	s10, s10, s9
 800f1f2:	ee77 4a67 	vsub.f32	s9, s14, s15
 800f1f6:	ed82 5a01 	vstr	s10, [r2, #4]
 800f1fa:	9a05      	ldr	r2, [sp, #20]
 800f1fc:	ee34 5a83 	vadd.f32	s10, s9, s6
 800f200:	edd2 1a00 	vldr	s3, [r2]
 800f204:	edd2 2a01 	vldr	s5, [r2, #4]
 800f208:	9a02      	ldr	r2, [sp, #8]
 800f20a:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800f20e:	ee36 6a42 	vsub.f32	s12, s12, s4
 800f212:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800f216:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800f21a:	ee65 2a22 	vmul.f32	s5, s10, s5
 800f21e:	ee25 5a21 	vmul.f32	s10, s10, s3
 800f222:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800f226:	ee35 5a63 	vsub.f32	s10, s10, s7
 800f22a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f22e:	edcb 2a00 	vstr	s5, [fp]
 800f232:	ed8b 5a01 	vstr	s10, [fp, #4]
 800f236:	edd2 3a01 	vldr	s7, [r2, #4]
 800f23a:	ed92 5a00 	vldr	s10, [r2]
 800f23e:	9a06      	ldr	r2, [sp, #24]
 800f240:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800f244:	ee36 6a65 	vsub.f32	s12, s12, s11
 800f248:	ee66 4a85 	vmul.f32	s9, s13, s10
 800f24c:	ee26 5a05 	vmul.f32	s10, s12, s10
 800f250:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800f254:	ee26 6a23 	vmul.f32	s12, s12, s7
 800f258:	ee75 6a66 	vsub.f32	s13, s10, s13
 800f25c:	ee34 6a86 	vadd.f32	s12, s9, s12
 800f260:	ee34 4a42 	vsub.f32	s8, s8, s4
 800f264:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f268:	edc0 6a01 	vstr	s13, [r0, #4]
 800f26c:	ed80 6a00 	vstr	s12, [r0]
 800f270:	ed92 6a01 	vldr	s12, [r2, #4]
 800f274:	9803      	ldr	r0, [sp, #12]
 800f276:	ee77 7a43 	vsub.f32	s15, s14, s6
 800f27a:	ee75 5a84 	vadd.f32	s11, s11, s8
 800f27e:	ed92 7a00 	vldr	s14, [r2]
 800f282:	ee65 6a87 	vmul.f32	s13, s11, s14
 800f286:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f28a:	ee65 5a86 	vmul.f32	s11, s11, s12
 800f28e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f292:	ee77 5a65 	vsub.f32	s11, s14, s11
 800f296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f29a:	edca 5a01 	vstr	s11, [sl, #4]
 800f29e:	edca 7a00 	vstr	s15, [sl]
 800f2a2:	6872      	ldr	r2, [r6, #4]
 800f2a4:	4621      	mov	r1, r4
 800f2a6:	2304      	movs	r3, #4
 800f2a8:	f000 f9b0 	bl	800f60c <arm_radix8_butterfly_f32>
 800f2ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f2ae:	6872      	ldr	r2, [r6, #4]
 800f2b0:	4621      	mov	r1, r4
 800f2b2:	2304      	movs	r3, #4
 800f2b4:	f000 f9aa 	bl	800f60c <arm_radix8_butterfly_f32>
 800f2b8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f2ba:	6872      	ldr	r2, [r6, #4]
 800f2bc:	4621      	mov	r1, r4
 800f2be:	2304      	movs	r3, #4
 800f2c0:	f000 f9a4 	bl	800f60c <arm_radix8_butterfly_f32>
 800f2c4:	9801      	ldr	r0, [sp, #4]
 800f2c6:	6872      	ldr	r2, [r6, #4]
 800f2c8:	4621      	mov	r1, r4
 800f2ca:	2304      	movs	r3, #4
 800f2cc:	b00f      	add	sp, #60	; 0x3c
 800f2ce:	ecbd 8b0a 	vpop	{d8-d12}
 800f2d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2d6:	f000 b999 	b.w	800f60c <arm_radix8_butterfly_f32>
 800f2da:	bf00      	nop

0800f2dc <arm_cfft_f32>:
 800f2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e0:	2a01      	cmp	r2, #1
 800f2e2:	4606      	mov	r6, r0
 800f2e4:	4617      	mov	r7, r2
 800f2e6:	460c      	mov	r4, r1
 800f2e8:	4698      	mov	r8, r3
 800f2ea:	8805      	ldrh	r5, [r0, #0]
 800f2ec:	d054      	beq.n	800f398 <arm_cfft_f32+0xbc>
 800f2ee:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f2f2:	d04c      	beq.n	800f38e <arm_cfft_f32+0xb2>
 800f2f4:	d916      	bls.n	800f324 <arm_cfft_f32+0x48>
 800f2f6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800f2fa:	d01a      	beq.n	800f332 <arm_cfft_f32+0x56>
 800f2fc:	d95c      	bls.n	800f3b8 <arm_cfft_f32+0xdc>
 800f2fe:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800f302:	d044      	beq.n	800f38e <arm_cfft_f32+0xb2>
 800f304:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800f308:	d105      	bne.n	800f316 <arm_cfft_f32+0x3a>
 800f30a:	4620      	mov	r0, r4
 800f30c:	4629      	mov	r1, r5
 800f30e:	6872      	ldr	r2, [r6, #4]
 800f310:	2301      	movs	r3, #1
 800f312:	f000 f97b 	bl	800f60c <arm_radix8_butterfly_f32>
 800f316:	f1b8 0f00 	cmp.w	r8, #0
 800f31a:	d111      	bne.n	800f340 <arm_cfft_f32+0x64>
 800f31c:	2f01      	cmp	r7, #1
 800f31e:	d016      	beq.n	800f34e <arm_cfft_f32+0x72>
 800f320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f324:	2d20      	cmp	r5, #32
 800f326:	d032      	beq.n	800f38e <arm_cfft_f32+0xb2>
 800f328:	d94a      	bls.n	800f3c0 <arm_cfft_f32+0xe4>
 800f32a:	2d40      	cmp	r5, #64	; 0x40
 800f32c:	d0ed      	beq.n	800f30a <arm_cfft_f32+0x2e>
 800f32e:	2d80      	cmp	r5, #128	; 0x80
 800f330:	d1f1      	bne.n	800f316 <arm_cfft_f32+0x3a>
 800f332:	4630      	mov	r0, r6
 800f334:	4621      	mov	r1, r4
 800f336:	f7ff fca1 	bl	800ec7c <arm_cfft_radix8by2_f32>
 800f33a:	f1b8 0f00 	cmp.w	r8, #0
 800f33e:	d0ed      	beq.n	800f31c <arm_cfft_f32+0x40>
 800f340:	4620      	mov	r0, r4
 800f342:	89b1      	ldrh	r1, [r6, #12]
 800f344:	68b2      	ldr	r2, [r6, #8]
 800f346:	f7f0 ff4b 	bl	80001e0 <arm_bitreversal_32>
 800f34a:	2f01      	cmp	r7, #1
 800f34c:	d1e8      	bne.n	800f320 <arm_cfft_f32+0x44>
 800f34e:	ee07 5a90 	vmov	s15, r5
 800f352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f356:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f35a:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800f35e:	2d00      	cmp	r5, #0
 800f360:	d0de      	beq.n	800f320 <arm_cfft_f32+0x44>
 800f362:	f104 0108 	add.w	r1, r4, #8
 800f366:	2300      	movs	r3, #0
 800f368:	3301      	adds	r3, #1
 800f36a:	429d      	cmp	r5, r3
 800f36c:	f101 0108 	add.w	r1, r1, #8
 800f370:	ed11 7a04 	vldr	s14, [r1, #-16]
 800f374:	ed51 7a03 	vldr	s15, [r1, #-12]
 800f378:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f37c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f380:	ed01 7a04 	vstr	s14, [r1, #-16]
 800f384:	ed41 7a03 	vstr	s15, [r1, #-12]
 800f388:	d1ee      	bne.n	800f368 <arm_cfft_f32+0x8c>
 800f38a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f38e:	4630      	mov	r0, r6
 800f390:	4621      	mov	r1, r4
 800f392:	f7ff fd45 	bl	800ee20 <arm_cfft_radix8by4_f32>
 800f396:	e7be      	b.n	800f316 <arm_cfft_f32+0x3a>
 800f398:	b1ad      	cbz	r5, 800f3c6 <arm_cfft_f32+0xea>
 800f39a:	f101 030c 	add.w	r3, r1, #12
 800f39e:	2200      	movs	r2, #0
 800f3a0:	ed53 7a02 	vldr	s15, [r3, #-8]
 800f3a4:	3201      	adds	r2, #1
 800f3a6:	eef1 7a67 	vneg.f32	s15, s15
 800f3aa:	4295      	cmp	r5, r2
 800f3ac:	ed43 7a02 	vstr	s15, [r3, #-8]
 800f3b0:	f103 0308 	add.w	r3, r3, #8
 800f3b4:	d1f4      	bne.n	800f3a0 <arm_cfft_f32+0xc4>
 800f3b6:	e79a      	b.n	800f2ee <arm_cfft_f32+0x12>
 800f3b8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800f3bc:	d0a5      	beq.n	800f30a <arm_cfft_f32+0x2e>
 800f3be:	e7aa      	b.n	800f316 <arm_cfft_f32+0x3a>
 800f3c0:	2d10      	cmp	r5, #16
 800f3c2:	d0b6      	beq.n	800f332 <arm_cfft_f32+0x56>
 800f3c4:	e7a7      	b.n	800f316 <arm_cfft_f32+0x3a>
 800f3c6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800f3ca:	d894      	bhi.n	800f2f6 <arm_cfft_f32+0x1a>
 800f3cc:	e7aa      	b.n	800f324 <arm_cfft_f32+0x48>
 800f3ce:	bf00      	nop

0800f3d0 <arm_cmplx_mag_f32>:
 800f3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3d4:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800f3d8:	b084      	sub	sp, #16
 800f3da:	d07f      	beq.n	800f4dc <arm_cmplx_mag_f32+0x10c>
 800f3dc:	2700      	movs	r7, #0
 800f3de:	f100 0420 	add.w	r4, r0, #32
 800f3e2:	f101 0510 	add.w	r5, r1, #16
 800f3e6:	4646      	mov	r6, r8
 800f3e8:	e05a      	b.n	800f4a0 <arm_cmplx_mag_f32+0xd0>
 800f3ea:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f3ee:	eeb4 0a40 	vcmp.f32	s0, s0
 800f3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3f6:	f040 80a4 	bne.w	800f542 <arm_cmplx_mag_f32+0x172>
 800f3fa:	ed05 0a04 	vstr	s0, [r5, #-16]
 800f3fe:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800f402:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800f406:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f40a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f40e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f412:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f41a:	f2c0 808f 	blt.w	800f53c <arm_cmplx_mag_f32+0x16c>
 800f41e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f422:	eeb4 0a40 	vcmp.f32	s0, s0
 800f426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f42a:	f040 80af 	bne.w	800f58c <arm_cmplx_mag_f32+0x1bc>
 800f42e:	ed05 0a03 	vstr	s0, [r5, #-12]
 800f432:	ed54 7a04 	vldr	s15, [r4, #-16]
 800f436:	ed14 0a03 	vldr	s0, [r4, #-12]
 800f43a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f43e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f442:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f44e:	db72      	blt.n	800f536 <arm_cmplx_mag_f32+0x166>
 800f450:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f454:	eeb4 0a40 	vcmp.f32	s0, s0
 800f458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f45c:	f040 808c 	bne.w	800f578 <arm_cmplx_mag_f32+0x1a8>
 800f460:	ed05 0a02 	vstr	s0, [r5, #-8]
 800f464:	ed54 7a02 	vldr	s15, [r4, #-8]
 800f468:	ed14 0a01 	vldr	s0, [r4, #-4]
 800f46c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f470:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f474:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f478:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f480:	db20      	blt.n	800f4c4 <arm_cmplx_mag_f32+0xf4>
 800f482:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f486:	eeb4 0a40 	vcmp.f32	s0, s0
 800f48a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f48e:	d169      	bne.n	800f564 <arm_cmplx_mag_f32+0x194>
 800f490:	3e01      	subs	r6, #1
 800f492:	ed05 0a01 	vstr	s0, [r5, #-4]
 800f496:	f104 0420 	add.w	r4, r4, #32
 800f49a:	f105 0510 	add.w	r5, r5, #16
 800f49e:	d019      	beq.n	800f4d4 <arm_cmplx_mag_f32+0x104>
 800f4a0:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800f4a4:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800f4a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f4ac:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f4b0:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f4b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f4b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4bc:	da95      	bge.n	800f3ea <arm_cmplx_mag_f32+0x1a>
 800f4be:	f845 7c10 	str.w	r7, [r5, #-16]
 800f4c2:	e79c      	b.n	800f3fe <arm_cmplx_mag_f32+0x2e>
 800f4c4:	3e01      	subs	r6, #1
 800f4c6:	f845 7c04 	str.w	r7, [r5, #-4]
 800f4ca:	f104 0420 	add.w	r4, r4, #32
 800f4ce:	f105 0510 	add.w	r5, r5, #16
 800f4d2:	d1e5      	bne.n	800f4a0 <arm_cmplx_mag_f32+0xd0>
 800f4d4:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800f4d8:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800f4dc:	f012 0503 	ands.w	r5, r2, #3
 800f4e0:	d026      	beq.n	800f530 <arm_cmplx_mag_f32+0x160>
 800f4e2:	2600      	movs	r6, #0
 800f4e4:	f100 0408 	add.w	r4, r0, #8
 800f4e8:	e00c      	b.n	800f504 <arm_cmplx_mag_f32+0x134>
 800f4ea:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800f4ee:	eeb4 0a40 	vcmp.f32	s0, s0
 800f4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4f6:	d12e      	bne.n	800f556 <arm_cmplx_mag_f32+0x186>
 800f4f8:	3d01      	subs	r5, #1
 800f4fa:	ed01 0a01 	vstr	s0, [r1, #-4]
 800f4fe:	f104 0408 	add.w	r4, r4, #8
 800f502:	d015      	beq.n	800f530 <arm_cmplx_mag_f32+0x160>
 800f504:	ed54 7a02 	vldr	s15, [r4, #-8]
 800f508:	ed14 0a01 	vldr	s0, [r4, #-4]
 800f50c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f510:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f514:	3104      	adds	r1, #4
 800f516:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f51a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f51e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f522:	dae2      	bge.n	800f4ea <arm_cmplx_mag_f32+0x11a>
 800f524:	3d01      	subs	r5, #1
 800f526:	f841 6c04 	str.w	r6, [r1, #-4]
 800f52a:	f104 0408 	add.w	r4, r4, #8
 800f52e:	d1e9      	bne.n	800f504 <arm_cmplx_mag_f32+0x134>
 800f530:	b004      	add	sp, #16
 800f532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f536:	f845 7c08 	str.w	r7, [r5, #-8]
 800f53a:	e793      	b.n	800f464 <arm_cmplx_mag_f32+0x94>
 800f53c:	f845 7c0c 	str.w	r7, [r5, #-12]
 800f540:	e777      	b.n	800f432 <arm_cmplx_mag_f32+0x62>
 800f542:	eeb0 0a67 	vmov.f32	s0, s15
 800f546:	9203      	str	r2, [sp, #12]
 800f548:	9102      	str	r1, [sp, #8]
 800f54a:	9001      	str	r0, [sp, #4]
 800f54c:	f001 f90c 	bl	8010768 <sqrtf>
 800f550:	a801      	add	r0, sp, #4
 800f552:	c807      	ldmia	r0, {r0, r1, r2}
 800f554:	e751      	b.n	800f3fa <arm_cmplx_mag_f32+0x2a>
 800f556:	eeb0 0a67 	vmov.f32	s0, s15
 800f55a:	9101      	str	r1, [sp, #4]
 800f55c:	f001 f904 	bl	8010768 <sqrtf>
 800f560:	9901      	ldr	r1, [sp, #4]
 800f562:	e7c9      	b.n	800f4f8 <arm_cmplx_mag_f32+0x128>
 800f564:	eeb0 0a67 	vmov.f32	s0, s15
 800f568:	9203      	str	r2, [sp, #12]
 800f56a:	9102      	str	r1, [sp, #8]
 800f56c:	9001      	str	r0, [sp, #4]
 800f56e:	f001 f8fb 	bl	8010768 <sqrtf>
 800f572:	a801      	add	r0, sp, #4
 800f574:	c807      	ldmia	r0, {r0, r1, r2}
 800f576:	e78b      	b.n	800f490 <arm_cmplx_mag_f32+0xc0>
 800f578:	eeb0 0a67 	vmov.f32	s0, s15
 800f57c:	9203      	str	r2, [sp, #12]
 800f57e:	9102      	str	r1, [sp, #8]
 800f580:	9001      	str	r0, [sp, #4]
 800f582:	f001 f8f1 	bl	8010768 <sqrtf>
 800f586:	a801      	add	r0, sp, #4
 800f588:	c807      	ldmia	r0, {r0, r1, r2}
 800f58a:	e769      	b.n	800f460 <arm_cmplx_mag_f32+0x90>
 800f58c:	eeb0 0a67 	vmov.f32	s0, s15
 800f590:	9203      	str	r2, [sp, #12]
 800f592:	9102      	str	r1, [sp, #8]
 800f594:	9001      	str	r0, [sp, #4]
 800f596:	f001 f8e7 	bl	8010768 <sqrtf>
 800f59a:	a801      	add	r0, sp, #4
 800f59c:	c807      	ldmia	r0, {r0, r1, r2}
 800f59e:	e746      	b.n	800f42e <arm_cmplx_mag_f32+0x5e>

0800f5a0 <arm_scale_f32>:
 800f5a0:	b470      	push	{r4, r5, r6}
 800f5a2:	0896      	lsrs	r6, r2, #2
 800f5a4:	d025      	beq.n	800f5f2 <arm_scale_f32+0x52>
 800f5a6:	f100 0410 	add.w	r4, r0, #16
 800f5aa:	f101 0310 	add.w	r3, r1, #16
 800f5ae:	4635      	mov	r5, r6
 800f5b0:	ed14 6a04 	vldr	s12, [r4, #-16]
 800f5b4:	ed54 6a03 	vldr	s13, [r4, #-12]
 800f5b8:	ed14 7a02 	vldr	s14, [r4, #-8]
 800f5bc:	ed54 7a01 	vldr	s15, [r4, #-4]
 800f5c0:	ee26 6a00 	vmul.f32	s12, s12, s0
 800f5c4:	ee66 6a80 	vmul.f32	s13, s13, s0
 800f5c8:	ee27 7a00 	vmul.f32	s14, s14, s0
 800f5cc:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f5d0:	3d01      	subs	r5, #1
 800f5d2:	ed03 6a04 	vstr	s12, [r3, #-16]
 800f5d6:	ed43 6a03 	vstr	s13, [r3, #-12]
 800f5da:	ed03 7a02 	vstr	s14, [r3, #-8]
 800f5de:	ed43 7a01 	vstr	s15, [r3, #-4]
 800f5e2:	f104 0410 	add.w	r4, r4, #16
 800f5e6:	f103 0310 	add.w	r3, r3, #16
 800f5ea:	d1e1      	bne.n	800f5b0 <arm_scale_f32+0x10>
 800f5ec:	0136      	lsls	r6, r6, #4
 800f5ee:	4430      	add	r0, r6
 800f5f0:	4431      	add	r1, r6
 800f5f2:	f012 0203 	ands.w	r2, r2, #3
 800f5f6:	d007      	beq.n	800f608 <arm_scale_f32+0x68>
 800f5f8:	ecf0 7a01 	vldmia	r0!, {s15}
 800f5fc:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f600:	3a01      	subs	r2, #1
 800f602:	ece1 7a01 	vstmia	r1!, {s15}
 800f606:	d1f7      	bne.n	800f5f8 <arm_scale_f32+0x58>
 800f608:	bc70      	pop	{r4, r5, r6}
 800f60a:	4770      	bx	lr

0800f60c <arm_radix8_butterfly_f32>:
 800f60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f610:	ed2d 8b10 	vpush	{d8-d15}
 800f614:	b09d      	sub	sp, #116	; 0x74
 800f616:	461c      	mov	r4, r3
 800f618:	ed9f bac8 	vldr	s22, [pc, #800]	; 800f93c <arm_radix8_butterfly_f32+0x330>
 800f61c:	921a      	str	r2, [sp, #104]	; 0x68
 800f61e:	1d03      	adds	r3, r0, #4
 800f620:	4682      	mov	sl, r0
 800f622:	4689      	mov	r9, r1
 800f624:	468b      	mov	fp, r1
 800f626:	931b      	str	r3, [sp, #108]	; 0x6c
 800f628:	9400      	str	r4, [sp, #0]
 800f62a:	469e      	mov	lr, r3
 800f62c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800f630:	005a      	lsls	r2, r3, #1
 800f632:	18d6      	adds	r6, r2, r3
 800f634:	18f5      	adds	r5, r6, r3
 800f636:	9203      	str	r2, [sp, #12]
 800f638:	195a      	adds	r2, r3, r5
 800f63a:	18d0      	adds	r0, r2, r3
 800f63c:	00df      	lsls	r7, r3, #3
 800f63e:	1819      	adds	r1, r3, r0
 800f640:	463c      	mov	r4, r7
 800f642:	9701      	str	r7, [sp, #4]
 800f644:	4457      	add	r7, sl
 800f646:	930c      	str	r3, [sp, #48]	; 0x30
 800f648:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800f64c:	011b      	lsls	r3, r3, #4
 800f64e:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800f652:	eb07 0c04 	add.w	ip, r7, r4
 800f656:	9c00      	ldr	r4, [sp, #0]
 800f658:	9302      	str	r3, [sp, #8]
 800f65a:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800f65e:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800f662:	3204      	adds	r2, #4
 800f664:	3104      	adds	r1, #4
 800f666:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800f66a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800f66e:	f04f 0800 	mov.w	r8, #0
 800f672:	eddc 7a00 	vldr	s15, [ip]
 800f676:	edd7 6a00 	vldr	s13, [r7]
 800f67a:	edd6 3a00 	vldr	s7, [r6]
 800f67e:	ed5e aa01 	vldr	s21, [lr, #-4]
 800f682:	edd5 4a00 	vldr	s9, [r5]
 800f686:	ed90 2a00 	vldr	s4, [r0]
 800f68a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800f68e:	ed51 0a01 	vldr	s1, [r1, #-4]
 800f692:	ee77 8a82 	vadd.f32	s17, s15, s4
 800f696:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800f69a:	ee76 1a87 	vadd.f32	s3, s13, s14
 800f69e:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800f6a2:	ee31 6a84 	vadd.f32	s12, s3, s8
 800f6a6:	ee33 5a28 	vadd.f32	s10, s6, s17
 800f6aa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f6ae:	ee75 6a06 	vadd.f32	s13, s10, s12
 800f6b2:	ee35 5a46 	vsub.f32	s10, s10, s12
 800f6b6:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800f6ba:	ed85 5a00 	vstr	s10, [r5]
 800f6be:	ed96 1a01 	vldr	s2, [r6, #4]
 800f6c2:	edd7 5a01 	vldr	s11, [r7, #4]
 800f6c6:	ed92 aa00 	vldr	s20, [r2]
 800f6ca:	ed91 6a00 	vldr	s12, [r1]
 800f6ce:	ed9e 9a00 	vldr	s18, [lr]
 800f6d2:	ed95 5a01 	vldr	s10, [r5, #4]
 800f6d6:	eddc 6a01 	vldr	s13, [ip, #4]
 800f6da:	edd0 9a01 	vldr	s19, [r0, #4]
 800f6de:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800f6e2:	ee71 2a46 	vsub.f32	s5, s2, s12
 800f6e6:	ee75 3aca 	vsub.f32	s7, s11, s20
 800f6ea:	ee37 0a60 	vsub.f32	s0, s14, s1
 800f6ee:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800f6f2:	ee37 7a20 	vadd.f32	s14, s14, s1
 800f6f6:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800f6fa:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800f6fe:	ee79 3a05 	vadd.f32	s7, s18, s10
 800f702:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800f706:	ee39 5a45 	vsub.f32	s10, s18, s10
 800f70a:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800f70e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800f712:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800f716:	ee31 6a06 	vadd.f32	s12, s2, s12
 800f71a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800f71e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800f722:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800f726:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800f72a:	ee33 3a68 	vsub.f32	s6, s6, s17
 800f72e:	ee36 0a88 	vadd.f32	s0, s13, s16
 800f732:	ee75 8a86 	vadd.f32	s17, s11, s12
 800f736:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800f73a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800f73e:	ee75 6a62 	vsub.f32	s13, s10, s5
 800f742:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800f746:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800f74a:	ee33 1a89 	vadd.f32	s2, s7, s18
 800f74e:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800f752:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800f756:	ee75 4a22 	vadd.f32	s9, s10, s5
 800f75a:	ee32 5a27 	vadd.f32	s10, s4, s15
 800f75e:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f762:	ee33 8a06 	vadd.f32	s16, s6, s12
 800f766:	ee75 2a87 	vadd.f32	s5, s11, s14
 800f76a:	ee31 9a28 	vadd.f32	s18, s2, s17
 800f76e:	ee33 6a46 	vsub.f32	s12, s6, s12
 800f772:	ee74 0a61 	vsub.f32	s1, s8, s3
 800f776:	ee33 2a80 	vadd.f32	s4, s7, s0
 800f77a:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800f77e:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800f782:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f786:	ee31 1a68 	vsub.f32	s2, s2, s17
 800f78a:	ee34 4a21 	vadd.f32	s8, s8, s3
 800f78e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800f792:	ee74 4a85 	vadd.f32	s9, s9, s10
 800f796:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f79a:	44d8      	add	r8, fp
 800f79c:	45c1      	cmp	r9, r8
 800f79e:	ed8e 9a00 	vstr	s18, [lr]
 800f7a2:	ed85 1a01 	vstr	s2, [r5, #4]
 800f7a6:	449e      	add	lr, r3
 800f7a8:	ed8c 8a00 	vstr	s16, [ip]
 800f7ac:	441d      	add	r5, r3
 800f7ae:	ed80 6a00 	vstr	s12, [r0]
 800f7b2:	edcc 0a01 	vstr	s1, [ip, #4]
 800f7b6:	ed80 4a01 	vstr	s8, [r0, #4]
 800f7ba:	449c      	add	ip, r3
 800f7bc:	ed87 2a00 	vstr	s4, [r7]
 800f7c0:	4418      	add	r0, r3
 800f7c2:	ed41 3a01 	vstr	s7, [r1, #-4]
 800f7c6:	ed42 2a01 	vstr	s5, [r2, #-4]
 800f7ca:	ed86 7a00 	vstr	s14, [r6]
 800f7ce:	ed87 3a01 	vstr	s6, [r7, #4]
 800f7d2:	edc1 4a00 	vstr	s9, [r1]
 800f7d6:	441f      	add	r7, r3
 800f7d8:	edc2 5a00 	vstr	s11, [r2]
 800f7dc:	4419      	add	r1, r3
 800f7de:	edc6 6a01 	vstr	s13, [r6, #4]
 800f7e2:	441a      	add	r2, r3
 800f7e4:	441e      	add	r6, r3
 800f7e6:	f63f af44 	bhi.w	800f672 <arm_radix8_butterfly_f32+0x66>
 800f7ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f7ec:	2907      	cmp	r1, #7
 800f7ee:	4620      	mov	r0, r4
 800f7f0:	f240 81e9 	bls.w	800fbc6 <arm_radix8_butterfly_f32+0x5ba>
 800f7f4:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800f7f8:	193e      	adds	r6, r7, r4
 800f7fa:	1935      	adds	r5, r6, r4
 800f7fc:	9c03      	ldr	r4, [sp, #12]
 800f7fe:	9000      	str	r0, [sp, #0]
 800f800:	4622      	mov	r2, r4
 800f802:	3201      	adds	r2, #1
 800f804:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f808:	9900      	ldr	r1, [sp, #0]
 800f80a:	1828      	adds	r0, r5, r0
 800f80c:	eb00 0e01 	add.w	lr, r0, r1
 800f810:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f812:	440a      	add	r2, r1
 800f814:	eb04 0c01 	add.w	ip, r4, r1
 800f818:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800f81c:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800f820:	9a00      	ldr	r2, [sp, #0]
 800f822:	940f      	str	r4, [sp, #60]	; 0x3c
 800f824:	00ed      	lsls	r5, r5, #3
 800f826:	9511      	str	r5, [sp, #68]	; 0x44
 800f828:	00d5      	lsls	r5, r2, #3
 800f82a:	950d      	str	r5, [sp, #52]	; 0x34
 800f82c:	9d01      	ldr	r5, [sp, #4]
 800f82e:	3508      	adds	r5, #8
 800f830:	9516      	str	r5, [sp, #88]	; 0x58
 800f832:	9d02      	ldr	r5, [sp, #8]
 800f834:	3508      	adds	r5, #8
 800f836:	0114      	lsls	r4, r2, #4
 800f838:	9517      	str	r5, [sp, #92]	; 0x5c
 800f83a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f83c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f83e:	940e      	str	r4, [sp, #56]	; 0x38
 800f840:	00c0      	lsls	r0, r0, #3
 800f842:	9010      	str	r0, [sp, #64]	; 0x40
 800f844:	18aa      	adds	r2, r5, r2
 800f846:	9207      	str	r2, [sp, #28]
 800f848:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f84a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f84c:	18aa      	adds	r2, r5, r2
 800f84e:	9208      	str	r2, [sp, #32]
 800f850:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f852:	18aa      	adds	r2, r5, r2
 800f854:	9209      	str	r2, [sp, #36]	; 0x24
 800f856:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f85a:	f10e 0204 	add.w	r2, lr, #4
 800f85e:	920a      	str	r2, [sp, #40]	; 0x28
 800f860:	00c9      	lsls	r1, r1, #3
 800f862:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f864:	310c      	adds	r1, #12
 800f866:	00f6      	lsls	r6, r6, #3
 800f868:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800f86c:	9114      	str	r1, [sp, #80]	; 0x50
 800f86e:	18a9      	adds	r1, r5, r2
 800f870:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f872:	9612      	str	r6, [sp, #72]	; 0x48
 800f874:	00ff      	lsls	r7, r7, #3
 800f876:	19ae      	adds	r6, r5, r6
 800f878:	3008      	adds	r0, #8
 800f87a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800f87e:	9606      	str	r6, [sp, #24]
 800f880:	9019      	str	r0, [sp, #100]	; 0x64
 800f882:	18aa      	adds	r2, r5, r2
 800f884:	0164      	lsls	r4, r4, #5
 800f886:	19ee      	adds	r6, r5, r7
 800f888:	f10c 000c 	add.w	r0, ip, #12
 800f88c:	9713      	str	r7, [sp, #76]	; 0x4c
 800f88e:	9604      	str	r6, [sp, #16]
 800f890:	9015      	str	r0, [sp, #84]	; 0x54
 800f892:	9103      	str	r1, [sp, #12]
 800f894:	9205      	str	r2, [sp, #20]
 800f896:	f104 0208 	add.w	r2, r4, #8
 800f89a:	9218      	str	r2, [sp, #96]	; 0x60
 800f89c:	f04f 0801 	mov.w	r8, #1
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	f102 0108 	add.w	r1, r2, #8
 800f8a6:	460f      	mov	r7, r1
 800f8a8:	910b      	str	r1, [sp, #44]	; 0x2c
 800f8aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f8ac:	188e      	adds	r6, r1, r2
 800f8ae:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f8b0:	188d      	adds	r5, r1, r2
 800f8b2:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800f8b4:	188c      	adds	r4, r1, r2
 800f8b6:	9919      	ldr	r1, [sp, #100]	; 0x64
 800f8b8:	1888      	adds	r0, r1, r2
 800f8ba:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f8bc:	eb01 0c02 	add.w	ip, r1, r2
 800f8c0:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f8c2:	440a      	add	r2, r1
 800f8c4:	9903      	ldr	r1, [sp, #12]
 800f8c6:	edd1 fa00 	vldr	s31, [r1]
 800f8ca:	9905      	ldr	r1, [sp, #20]
 800f8cc:	ed91 fa00 	vldr	s30, [r1]
 800f8d0:	9904      	ldr	r1, [sp, #16]
 800f8d2:	edd1 ea00 	vldr	s29, [r1]
 800f8d6:	9906      	ldr	r1, [sp, #24]
 800f8d8:	ed91 ea00 	vldr	s28, [r1]
 800f8dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8de:	edd1 da00 	vldr	s27, [r1]
 800f8e2:	9908      	ldr	r1, [sp, #32]
 800f8e4:	ed91 da00 	vldr	s26, [r1]
 800f8e8:	9907      	ldr	r1, [sp, #28]
 800f8ea:	edd1 ca00 	vldr	s25, [r1]
 800f8ee:	9903      	ldr	r1, [sp, #12]
 800f8f0:	ed91 ca01 	vldr	s24, [r1, #4]
 800f8f4:	9905      	ldr	r1, [sp, #20]
 800f8f6:	edd1 ba01 	vldr	s23, [r1, #4]
 800f8fa:	9904      	ldr	r1, [sp, #16]
 800f8fc:	edd1 aa01 	vldr	s21, [r1, #4]
 800f900:	9906      	ldr	r1, [sp, #24]
 800f902:	ed91 aa01 	vldr	s20, [r1, #4]
 800f906:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f908:	edd1 7a01 	vldr	s15, [r1, #4]
 800f90c:	9908      	ldr	r1, [sp, #32]
 800f90e:	edcd 7a00 	vstr	s15, [sp]
 800f912:	edd1 7a01 	vldr	s15, [r1, #4]
 800f916:	9907      	ldr	r1, [sp, #28]
 800f918:	edcd 7a01 	vstr	s15, [sp, #4]
 800f91c:	edd1 7a01 	vldr	s15, [r1, #4]
 800f920:	eb0a 0e07 	add.w	lr, sl, r7
 800f924:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800f926:	edcd 7a02 	vstr	s15, [sp, #8]
 800f92a:	eb0c 010a 	add.w	r1, ip, sl
 800f92e:	4456      	add	r6, sl
 800f930:	4455      	add	r5, sl
 800f932:	4454      	add	r4, sl
 800f934:	4450      	add	r0, sl
 800f936:	4452      	add	r2, sl
 800f938:	46c4      	mov	ip, r8
 800f93a:	e001      	b.n	800f940 <arm_radix8_butterfly_f32+0x334>
 800f93c:	3f3504f3 	.word	0x3f3504f3
 800f940:	ed96 5a00 	vldr	s10, [r6]
 800f944:	ed52 9a01 	vldr	s19, [r2, #-4]
 800f948:	ed11 6a01 	vldr	s12, [r1, #-4]
 800f94c:	edd0 7a00 	vldr	s15, [r0]
 800f950:	ed17 7a01 	vldr	s14, [r7, #-4]
 800f954:	edde 3a00 	vldr	s7, [lr]
 800f958:	ed94 3a00 	vldr	s6, [r4]
 800f95c:	ed95 2a00 	vldr	s4, [r5]
 800f960:	ed9e 0a01 	vldr	s0, [lr, #4]
 800f964:	ee33 8a85 	vadd.f32	s16, s7, s10
 800f968:	ee32 1a06 	vadd.f32	s2, s4, s12
 800f96c:	ee33 4a29 	vadd.f32	s8, s6, s19
 800f970:	ee77 4a87 	vadd.f32	s9, s15, s14
 800f974:	ee78 1a04 	vadd.f32	s3, s16, s8
 800f978:	ee71 6a24 	vadd.f32	s13, s2, s9
 800f97c:	ee32 2a46 	vsub.f32	s4, s4, s12
 800f980:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800f984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f988:	ed8e 6a00 	vstr	s12, [lr]
 800f98c:	edd0 8a01 	vldr	s17, [r0, #4]
 800f990:	ed95 9a01 	vldr	s18, [r5, #4]
 800f994:	edd1 2a00 	vldr	s5, [r1]
 800f998:	ed97 7a00 	vldr	s14, [r7]
 800f99c:	edd4 0a01 	vldr	s1, [r4, #4]
 800f9a0:	ed96 6a01 	vldr	s12, [r6, #4]
 800f9a4:	edd2 5a00 	vldr	s11, [r2]
 800f9a8:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800f9ac:	ee33 3a69 	vsub.f32	s6, s6, s19
 800f9b0:	ee39 5a62 	vsub.f32	s10, s18, s5
 800f9b4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800f9b8:	ee38 4a44 	vsub.f32	s8, s16, s8
 800f9bc:	ee38 7a87 	vadd.f32	s14, s17, s14
 800f9c0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800f9c4:	ee79 2a22 	vadd.f32	s5, s18, s5
 800f9c8:	ee75 8a69 	vsub.f32	s17, s10, s19
 800f9cc:	ee32 9a27 	vadd.f32	s18, s4, s15
 800f9d0:	ee35 5a29 	vadd.f32	s10, s10, s19
 800f9d4:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f9d8:	ee30 2a06 	vadd.f32	s4, s0, s12
 800f9dc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800f9e0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800f9e4:	ee32 9a08 	vadd.f32	s18, s4, s16
 800f9e8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800f9ec:	ee32 2a48 	vsub.f32	s4, s4, s16
 800f9f0:	ee71 4a64 	vsub.f32	s9, s2, s9
 800f9f4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800f9f8:	ee32 1a87 	vadd.f32	s2, s5, s14
 800f9fc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800fa00:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800fa04:	ee30 6a46 	vsub.f32	s12, s0, s12
 800fa08:	ee73 0a29 	vadd.f32	s1, s6, s19
 800fa0c:	ee36 0a28 	vadd.f32	s0, s12, s17
 800fa10:	ee33 3a69 	vsub.f32	s6, s6, s19
 800fa14:	ee32 7a64 	vsub.f32	s14, s4, s9
 800fa18:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800fa1c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800fa20:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800fa24:	ee75 8a85 	vadd.f32	s17, s11, s10
 800fa28:	ee74 3a22 	vadd.f32	s7, s8, s5
 800fa2c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800fa30:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800fa34:	ee79 1a41 	vsub.f32	s3, s18, s2
 800fa38:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800fa3c:	ee76 5a43 	vsub.f32	s11, s12, s6
 800fa40:	ee74 2a62 	vsub.f32	s5, s8, s5
 800fa44:	ee72 4a24 	vadd.f32	s9, s4, s9
 800fa48:	ee30 4a60 	vsub.f32	s8, s0, s1
 800fa4c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800fa50:	ee30 0a20 	vadd.f32	s0, s0, s1
 800fa54:	ee77 9a85 	vadd.f32	s19, s15, s10
 800fa58:	ee36 6a03 	vadd.f32	s12, s12, s6
 800fa5c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800fa60:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800fa64:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800fa68:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800fa6c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800fa70:	ee39 1a01 	vadd.f32	s2, s18, s2
 800fa74:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800fa78:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800fa7c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800fa80:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800fa84:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800fa88:	ee35 3a03 	vadd.f32	s6, s10, s6
 800fa8c:	ee72 6a66 	vsub.f32	s13, s4, s13
 800fa90:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800fa94:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800fa98:	ed9d 4a02 	vldr	s8, [sp, #8]
 800fa9c:	ed8e 1a01 	vstr	s2, [lr, #4]
 800faa0:	ee77 3a63 	vsub.f32	s7, s14, s7
 800faa4:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800faa8:	ed9d 7a01 	vldr	s14, [sp, #4]
 800faac:	ed86 3a00 	vstr	s6, [r6]
 800fab0:	ee30 9a89 	vadd.f32	s18, s1, s18
 800fab4:	ee32 2a05 	vadd.f32	s4, s4, s10
 800fab8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800fabc:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800fac0:	ee67 2a22 	vmul.f32	s5, s14, s5
 800fac4:	ee64 1a00 	vmul.f32	s3, s8, s0
 800fac8:	ee27 7a24 	vmul.f32	s14, s14, s9
 800facc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800fad0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800fad4:	ee64 8a28 	vmul.f32	s17, s8, s17
 800fad8:	ed9d 4a00 	vldr	s8, [sp]
 800fadc:	edc6 6a01 	vstr	s13, [r6, #4]
 800fae0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800fae4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800fae8:	ee64 9a29 	vmul.f32	s19, s8, s19
 800faec:	ee24 4a25 	vmul.f32	s8, s8, s11
 800faf0:	ee30 7a87 	vadd.f32	s14, s1, s14
 800faf4:	ee74 4a84 	vadd.f32	s9, s9, s8
 800faf8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800fafc:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800fb00:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800fb04:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800fb08:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800fb0c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800fb10:	ee75 1a21 	vadd.f32	s3, s10, s3
 800fb14:	ee30 0a68 	vsub.f32	s0, s0, s17
 800fb18:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800fb1c:	ee70 0a84 	vadd.f32	s1, s1, s8
 800fb20:	ee36 6a67 	vsub.f32	s12, s12, s15
 800fb24:	44dc      	add	ip, fp
 800fb26:	45e1      	cmp	r9, ip
 800fb28:	ed84 9a00 	vstr	s18, [r4]
 800fb2c:	edc4 3a01 	vstr	s7, [r4, #4]
 800fb30:	449e      	add	lr, r3
 800fb32:	ed02 7a01 	vstr	s14, [r2, #-4]
 800fb36:	edc2 2a00 	vstr	s5, [r2]
 800fb3a:	441e      	add	r6, r3
 800fb3c:	ed85 2a00 	vstr	s4, [r5]
 800fb40:	ed85 8a01 	vstr	s16, [r5, #4]
 800fb44:	441c      	add	r4, r3
 800fb46:	ed47 1a01 	vstr	s3, [r7, #-4]
 800fb4a:	ed87 0a00 	vstr	s0, [r7]
 800fb4e:	441a      	add	r2, r3
 800fb50:	ed41 4a01 	vstr	s9, [r1, #-4]
 800fb54:	edc1 9a00 	vstr	s19, [r1]
 800fb58:	441d      	add	r5, r3
 800fb5a:	edc0 0a00 	vstr	s1, [r0]
 800fb5e:	441f      	add	r7, r3
 800fb60:	ed80 6a01 	vstr	s12, [r0, #4]
 800fb64:	4419      	add	r1, r3
 800fb66:	4418      	add	r0, r3
 800fb68:	f63f aeea 	bhi.w	800f940 <arm_radix8_butterfly_f32+0x334>
 800fb6c:	9a03      	ldr	r2, [sp, #12]
 800fb6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800fb70:	440a      	add	r2, r1
 800fb72:	9203      	str	r2, [sp, #12]
 800fb74:	990e      	ldr	r1, [sp, #56]	; 0x38
 800fb76:	9a05      	ldr	r2, [sp, #20]
 800fb78:	440a      	add	r2, r1
 800fb7a:	9205      	str	r2, [sp, #20]
 800fb7c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800fb7e:	9a04      	ldr	r2, [sp, #16]
 800fb80:	440a      	add	r2, r1
 800fb82:	9204      	str	r2, [sp, #16]
 800fb84:	9912      	ldr	r1, [sp, #72]	; 0x48
 800fb86:	9a06      	ldr	r2, [sp, #24]
 800fb88:	440a      	add	r2, r1
 800fb8a:	9206      	str	r2, [sp, #24]
 800fb8c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800fb8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb90:	440a      	add	r2, r1
 800fb92:	9209      	str	r2, [sp, #36]	; 0x24
 800fb94:	9910      	ldr	r1, [sp, #64]	; 0x40
 800fb96:	9a08      	ldr	r2, [sp, #32]
 800fb98:	440a      	add	r2, r1
 800fb9a:	9208      	str	r2, [sp, #32]
 800fb9c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800fb9e:	9a07      	ldr	r2, [sp, #28]
 800fba0:	440a      	add	r2, r1
 800fba2:	9207      	str	r2, [sp, #28]
 800fba4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800fba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fba8:	f108 0801 	add.w	r8, r8, #1
 800fbac:	3208      	adds	r2, #8
 800fbae:	4588      	cmp	r8, r1
 800fbb0:	920a      	str	r2, [sp, #40]	; 0x28
 800fbb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800fbb4:	f47f ae75 	bne.w	800f8a2 <arm_radix8_butterfly_f32+0x296>
 800fbb8:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800fbbc:	9300      	str	r3, [sp, #0]
 800fbbe:	46c3      	mov	fp, r8
 800fbc0:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 800fbc4:	e532      	b.n	800f62c <arm_radix8_butterfly_f32+0x20>
 800fbc6:	b01d      	add	sp, #116	; 0x74
 800fbc8:	ecbd 8b10 	vpop	{d8-d15}
 800fbcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbd0 <atoi>:
 800fbd0:	220a      	movs	r2, #10
 800fbd2:	2100      	movs	r1, #0
 800fbd4:	f000 ba22 	b.w	801001c <strtol>

0800fbd8 <__errno>:
 800fbd8:	4b01      	ldr	r3, [pc, #4]	; (800fbe0 <__errno+0x8>)
 800fbda:	6818      	ldr	r0, [r3, #0]
 800fbdc:	4770      	bx	lr
 800fbde:	bf00      	nop
 800fbe0:	2000010c 	.word	0x2000010c

0800fbe4 <__libc_init_array>:
 800fbe4:	b570      	push	{r4, r5, r6, lr}
 800fbe6:	4d0d      	ldr	r5, [pc, #52]	; (800fc1c <__libc_init_array+0x38>)
 800fbe8:	4c0d      	ldr	r4, [pc, #52]	; (800fc20 <__libc_init_array+0x3c>)
 800fbea:	1b64      	subs	r4, r4, r5
 800fbec:	10a4      	asrs	r4, r4, #2
 800fbee:	2600      	movs	r6, #0
 800fbf0:	42a6      	cmp	r6, r4
 800fbf2:	d109      	bne.n	800fc08 <__libc_init_array+0x24>
 800fbf4:	4d0b      	ldr	r5, [pc, #44]	; (800fc24 <__libc_init_array+0x40>)
 800fbf6:	4c0c      	ldr	r4, [pc, #48]	; (800fc28 <__libc_init_array+0x44>)
 800fbf8:	f000 ff54 	bl	8010aa4 <_init>
 800fbfc:	1b64      	subs	r4, r4, r5
 800fbfe:	10a4      	asrs	r4, r4, #2
 800fc00:	2600      	movs	r6, #0
 800fc02:	42a6      	cmp	r6, r4
 800fc04:	d105      	bne.n	800fc12 <__libc_init_array+0x2e>
 800fc06:	bd70      	pop	{r4, r5, r6, pc}
 800fc08:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc0c:	4798      	blx	r3
 800fc0e:	3601      	adds	r6, #1
 800fc10:	e7ee      	b.n	800fbf0 <__libc_init_array+0xc>
 800fc12:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc16:	4798      	blx	r3
 800fc18:	3601      	adds	r6, #1
 800fc1a:	e7f2      	b.n	800fc02 <__libc_init_array+0x1e>
 800fc1c:	08011d14 	.word	0x08011d14
 800fc20:	08011d14 	.word	0x08011d14
 800fc24:	08011d14 	.word	0x08011d14
 800fc28:	08011d18 	.word	0x08011d18

0800fc2c <__retarget_lock_acquire_recursive>:
 800fc2c:	4770      	bx	lr

0800fc2e <__retarget_lock_release_recursive>:
 800fc2e:	4770      	bx	lr

0800fc30 <memcpy>:
 800fc30:	440a      	add	r2, r1
 800fc32:	4291      	cmp	r1, r2
 800fc34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fc38:	d100      	bne.n	800fc3c <memcpy+0xc>
 800fc3a:	4770      	bx	lr
 800fc3c:	b510      	push	{r4, lr}
 800fc3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc46:	4291      	cmp	r1, r2
 800fc48:	d1f9      	bne.n	800fc3e <memcpy+0xe>
 800fc4a:	bd10      	pop	{r4, pc}

0800fc4c <memset>:
 800fc4c:	4402      	add	r2, r0
 800fc4e:	4603      	mov	r3, r0
 800fc50:	4293      	cmp	r3, r2
 800fc52:	d100      	bne.n	800fc56 <memset+0xa>
 800fc54:	4770      	bx	lr
 800fc56:	f803 1b01 	strb.w	r1, [r3], #1
 800fc5a:	e7f9      	b.n	800fc50 <memset+0x4>

0800fc5c <sbrk_aligned>:
 800fc5c:	b570      	push	{r4, r5, r6, lr}
 800fc5e:	4e0e      	ldr	r6, [pc, #56]	; (800fc98 <sbrk_aligned+0x3c>)
 800fc60:	460c      	mov	r4, r1
 800fc62:	6831      	ldr	r1, [r6, #0]
 800fc64:	4605      	mov	r5, r0
 800fc66:	b911      	cbnz	r1, 800fc6e <sbrk_aligned+0x12>
 800fc68:	f000 f8f6 	bl	800fe58 <_sbrk_r>
 800fc6c:	6030      	str	r0, [r6, #0]
 800fc6e:	4621      	mov	r1, r4
 800fc70:	4628      	mov	r0, r5
 800fc72:	f000 f8f1 	bl	800fe58 <_sbrk_r>
 800fc76:	1c43      	adds	r3, r0, #1
 800fc78:	d00a      	beq.n	800fc90 <sbrk_aligned+0x34>
 800fc7a:	1cc4      	adds	r4, r0, #3
 800fc7c:	f024 0403 	bic.w	r4, r4, #3
 800fc80:	42a0      	cmp	r0, r4
 800fc82:	d007      	beq.n	800fc94 <sbrk_aligned+0x38>
 800fc84:	1a21      	subs	r1, r4, r0
 800fc86:	4628      	mov	r0, r5
 800fc88:	f000 f8e6 	bl	800fe58 <_sbrk_r>
 800fc8c:	3001      	adds	r0, #1
 800fc8e:	d101      	bne.n	800fc94 <sbrk_aligned+0x38>
 800fc90:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fc94:	4620      	mov	r0, r4
 800fc96:	bd70      	pop	{r4, r5, r6, pc}
 800fc98:	2000bb44 	.word	0x2000bb44

0800fc9c <_malloc_r>:
 800fc9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fca0:	1ccd      	adds	r5, r1, #3
 800fca2:	f025 0503 	bic.w	r5, r5, #3
 800fca6:	3508      	adds	r5, #8
 800fca8:	2d0c      	cmp	r5, #12
 800fcaa:	bf38      	it	cc
 800fcac:	250c      	movcc	r5, #12
 800fcae:	2d00      	cmp	r5, #0
 800fcb0:	4607      	mov	r7, r0
 800fcb2:	db01      	blt.n	800fcb8 <_malloc_r+0x1c>
 800fcb4:	42a9      	cmp	r1, r5
 800fcb6:	d905      	bls.n	800fcc4 <_malloc_r+0x28>
 800fcb8:	230c      	movs	r3, #12
 800fcba:	603b      	str	r3, [r7, #0]
 800fcbc:	2600      	movs	r6, #0
 800fcbe:	4630      	mov	r0, r6
 800fcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcc4:	4e2e      	ldr	r6, [pc, #184]	; (800fd80 <_malloc_r+0xe4>)
 800fcc6:	f000 f9b3 	bl	8010030 <__malloc_lock>
 800fcca:	6833      	ldr	r3, [r6, #0]
 800fccc:	461c      	mov	r4, r3
 800fcce:	bb34      	cbnz	r4, 800fd1e <_malloc_r+0x82>
 800fcd0:	4629      	mov	r1, r5
 800fcd2:	4638      	mov	r0, r7
 800fcd4:	f7ff ffc2 	bl	800fc5c <sbrk_aligned>
 800fcd8:	1c43      	adds	r3, r0, #1
 800fcda:	4604      	mov	r4, r0
 800fcdc:	d14d      	bne.n	800fd7a <_malloc_r+0xde>
 800fcde:	6834      	ldr	r4, [r6, #0]
 800fce0:	4626      	mov	r6, r4
 800fce2:	2e00      	cmp	r6, #0
 800fce4:	d140      	bne.n	800fd68 <_malloc_r+0xcc>
 800fce6:	6823      	ldr	r3, [r4, #0]
 800fce8:	4631      	mov	r1, r6
 800fcea:	4638      	mov	r0, r7
 800fcec:	eb04 0803 	add.w	r8, r4, r3
 800fcf0:	f000 f8b2 	bl	800fe58 <_sbrk_r>
 800fcf4:	4580      	cmp	r8, r0
 800fcf6:	d13a      	bne.n	800fd6e <_malloc_r+0xd2>
 800fcf8:	6821      	ldr	r1, [r4, #0]
 800fcfa:	3503      	adds	r5, #3
 800fcfc:	1a6d      	subs	r5, r5, r1
 800fcfe:	f025 0503 	bic.w	r5, r5, #3
 800fd02:	3508      	adds	r5, #8
 800fd04:	2d0c      	cmp	r5, #12
 800fd06:	bf38      	it	cc
 800fd08:	250c      	movcc	r5, #12
 800fd0a:	4629      	mov	r1, r5
 800fd0c:	4638      	mov	r0, r7
 800fd0e:	f7ff ffa5 	bl	800fc5c <sbrk_aligned>
 800fd12:	3001      	adds	r0, #1
 800fd14:	d02b      	beq.n	800fd6e <_malloc_r+0xd2>
 800fd16:	6823      	ldr	r3, [r4, #0]
 800fd18:	442b      	add	r3, r5
 800fd1a:	6023      	str	r3, [r4, #0]
 800fd1c:	e00e      	b.n	800fd3c <_malloc_r+0xa0>
 800fd1e:	6822      	ldr	r2, [r4, #0]
 800fd20:	1b52      	subs	r2, r2, r5
 800fd22:	d41e      	bmi.n	800fd62 <_malloc_r+0xc6>
 800fd24:	2a0b      	cmp	r2, #11
 800fd26:	d916      	bls.n	800fd56 <_malloc_r+0xba>
 800fd28:	1961      	adds	r1, r4, r5
 800fd2a:	42a3      	cmp	r3, r4
 800fd2c:	6025      	str	r5, [r4, #0]
 800fd2e:	bf18      	it	ne
 800fd30:	6059      	strne	r1, [r3, #4]
 800fd32:	6863      	ldr	r3, [r4, #4]
 800fd34:	bf08      	it	eq
 800fd36:	6031      	streq	r1, [r6, #0]
 800fd38:	5162      	str	r2, [r4, r5]
 800fd3a:	604b      	str	r3, [r1, #4]
 800fd3c:	4638      	mov	r0, r7
 800fd3e:	f104 060b 	add.w	r6, r4, #11
 800fd42:	f000 f97b 	bl	801003c <__malloc_unlock>
 800fd46:	f026 0607 	bic.w	r6, r6, #7
 800fd4a:	1d23      	adds	r3, r4, #4
 800fd4c:	1af2      	subs	r2, r6, r3
 800fd4e:	d0b6      	beq.n	800fcbe <_malloc_r+0x22>
 800fd50:	1b9b      	subs	r3, r3, r6
 800fd52:	50a3      	str	r3, [r4, r2]
 800fd54:	e7b3      	b.n	800fcbe <_malloc_r+0x22>
 800fd56:	6862      	ldr	r2, [r4, #4]
 800fd58:	42a3      	cmp	r3, r4
 800fd5a:	bf0c      	ite	eq
 800fd5c:	6032      	streq	r2, [r6, #0]
 800fd5e:	605a      	strne	r2, [r3, #4]
 800fd60:	e7ec      	b.n	800fd3c <_malloc_r+0xa0>
 800fd62:	4623      	mov	r3, r4
 800fd64:	6864      	ldr	r4, [r4, #4]
 800fd66:	e7b2      	b.n	800fcce <_malloc_r+0x32>
 800fd68:	4634      	mov	r4, r6
 800fd6a:	6876      	ldr	r6, [r6, #4]
 800fd6c:	e7b9      	b.n	800fce2 <_malloc_r+0x46>
 800fd6e:	230c      	movs	r3, #12
 800fd70:	603b      	str	r3, [r7, #0]
 800fd72:	4638      	mov	r0, r7
 800fd74:	f000 f962 	bl	801003c <__malloc_unlock>
 800fd78:	e7a1      	b.n	800fcbe <_malloc_r+0x22>
 800fd7a:	6025      	str	r5, [r4, #0]
 800fd7c:	e7de      	b.n	800fd3c <_malloc_r+0xa0>
 800fd7e:	bf00      	nop
 800fd80:	2000bb40 	.word	0x2000bb40

0800fd84 <cleanup_glue>:
 800fd84:	b538      	push	{r3, r4, r5, lr}
 800fd86:	460c      	mov	r4, r1
 800fd88:	6809      	ldr	r1, [r1, #0]
 800fd8a:	4605      	mov	r5, r0
 800fd8c:	b109      	cbz	r1, 800fd92 <cleanup_glue+0xe>
 800fd8e:	f7ff fff9 	bl	800fd84 <cleanup_glue>
 800fd92:	4621      	mov	r1, r4
 800fd94:	4628      	mov	r0, r5
 800fd96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd9a:	f000 b955 	b.w	8010048 <_free_r>
	...

0800fda0 <_reclaim_reent>:
 800fda0:	4b2c      	ldr	r3, [pc, #176]	; (800fe54 <_reclaim_reent+0xb4>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4283      	cmp	r3, r0
 800fda6:	b570      	push	{r4, r5, r6, lr}
 800fda8:	4604      	mov	r4, r0
 800fdaa:	d051      	beq.n	800fe50 <_reclaim_reent+0xb0>
 800fdac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fdae:	b143      	cbz	r3, 800fdc2 <_reclaim_reent+0x22>
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d14a      	bne.n	800fe4c <_reclaim_reent+0xac>
 800fdb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fdb8:	6819      	ldr	r1, [r3, #0]
 800fdba:	b111      	cbz	r1, 800fdc2 <_reclaim_reent+0x22>
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	f000 f943 	bl	8010048 <_free_r>
 800fdc2:	6961      	ldr	r1, [r4, #20]
 800fdc4:	b111      	cbz	r1, 800fdcc <_reclaim_reent+0x2c>
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	f000 f93e 	bl	8010048 <_free_r>
 800fdcc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fdce:	b111      	cbz	r1, 800fdd6 <_reclaim_reent+0x36>
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	f000 f939 	bl	8010048 <_free_r>
 800fdd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fdd8:	b111      	cbz	r1, 800fde0 <_reclaim_reent+0x40>
 800fdda:	4620      	mov	r0, r4
 800fddc:	f000 f934 	bl	8010048 <_free_r>
 800fde0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fde2:	b111      	cbz	r1, 800fdea <_reclaim_reent+0x4a>
 800fde4:	4620      	mov	r0, r4
 800fde6:	f000 f92f 	bl	8010048 <_free_r>
 800fdea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fdec:	b111      	cbz	r1, 800fdf4 <_reclaim_reent+0x54>
 800fdee:	4620      	mov	r0, r4
 800fdf0:	f000 f92a 	bl	8010048 <_free_r>
 800fdf4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800fdf6:	b111      	cbz	r1, 800fdfe <_reclaim_reent+0x5e>
 800fdf8:	4620      	mov	r0, r4
 800fdfa:	f000 f925 	bl	8010048 <_free_r>
 800fdfe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800fe00:	b111      	cbz	r1, 800fe08 <_reclaim_reent+0x68>
 800fe02:	4620      	mov	r0, r4
 800fe04:	f000 f920 	bl	8010048 <_free_r>
 800fe08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe0a:	b111      	cbz	r1, 800fe12 <_reclaim_reent+0x72>
 800fe0c:	4620      	mov	r0, r4
 800fe0e:	f000 f91b 	bl	8010048 <_free_r>
 800fe12:	69a3      	ldr	r3, [r4, #24]
 800fe14:	b1e3      	cbz	r3, 800fe50 <_reclaim_reent+0xb0>
 800fe16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fe18:	4620      	mov	r0, r4
 800fe1a:	4798      	blx	r3
 800fe1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fe1e:	b1b9      	cbz	r1, 800fe50 <_reclaim_reent+0xb0>
 800fe20:	4620      	mov	r0, r4
 800fe22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe26:	f7ff bfad 	b.w	800fd84 <cleanup_glue>
 800fe2a:	5949      	ldr	r1, [r1, r5]
 800fe2c:	b941      	cbnz	r1, 800fe40 <_reclaim_reent+0xa0>
 800fe2e:	3504      	adds	r5, #4
 800fe30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe32:	2d80      	cmp	r5, #128	; 0x80
 800fe34:	68d9      	ldr	r1, [r3, #12]
 800fe36:	d1f8      	bne.n	800fe2a <_reclaim_reent+0x8a>
 800fe38:	4620      	mov	r0, r4
 800fe3a:	f000 f905 	bl	8010048 <_free_r>
 800fe3e:	e7ba      	b.n	800fdb6 <_reclaim_reent+0x16>
 800fe40:	680e      	ldr	r6, [r1, #0]
 800fe42:	4620      	mov	r0, r4
 800fe44:	f000 f900 	bl	8010048 <_free_r>
 800fe48:	4631      	mov	r1, r6
 800fe4a:	e7ef      	b.n	800fe2c <_reclaim_reent+0x8c>
 800fe4c:	2500      	movs	r5, #0
 800fe4e:	e7ef      	b.n	800fe30 <_reclaim_reent+0x90>
 800fe50:	bd70      	pop	{r4, r5, r6, pc}
 800fe52:	bf00      	nop
 800fe54:	2000010c 	.word	0x2000010c

0800fe58 <_sbrk_r>:
 800fe58:	b538      	push	{r3, r4, r5, lr}
 800fe5a:	4d06      	ldr	r5, [pc, #24]	; (800fe74 <_sbrk_r+0x1c>)
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	4604      	mov	r4, r0
 800fe60:	4608      	mov	r0, r1
 800fe62:	602b      	str	r3, [r5, #0]
 800fe64:	f7f2 fa4c 	bl	8002300 <_sbrk>
 800fe68:	1c43      	adds	r3, r0, #1
 800fe6a:	d102      	bne.n	800fe72 <_sbrk_r+0x1a>
 800fe6c:	682b      	ldr	r3, [r5, #0]
 800fe6e:	b103      	cbz	r3, 800fe72 <_sbrk_r+0x1a>
 800fe70:	6023      	str	r3, [r4, #0]
 800fe72:	bd38      	pop	{r3, r4, r5, pc}
 800fe74:	2000bb48 	.word	0x2000bb48

0800fe78 <siprintf>:
 800fe78:	b40e      	push	{r1, r2, r3}
 800fe7a:	b500      	push	{lr}
 800fe7c:	b09c      	sub	sp, #112	; 0x70
 800fe7e:	ab1d      	add	r3, sp, #116	; 0x74
 800fe80:	9002      	str	r0, [sp, #8]
 800fe82:	9006      	str	r0, [sp, #24]
 800fe84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800fe88:	4809      	ldr	r0, [pc, #36]	; (800feb0 <siprintf+0x38>)
 800fe8a:	9107      	str	r1, [sp, #28]
 800fe8c:	9104      	str	r1, [sp, #16]
 800fe8e:	4909      	ldr	r1, [pc, #36]	; (800feb4 <siprintf+0x3c>)
 800fe90:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe94:	9105      	str	r1, [sp, #20]
 800fe96:	6800      	ldr	r0, [r0, #0]
 800fe98:	9301      	str	r3, [sp, #4]
 800fe9a:	a902      	add	r1, sp, #8
 800fe9c:	f000 f97c 	bl	8010198 <_svfiprintf_r>
 800fea0:	9b02      	ldr	r3, [sp, #8]
 800fea2:	2200      	movs	r2, #0
 800fea4:	701a      	strb	r2, [r3, #0]
 800fea6:	b01c      	add	sp, #112	; 0x70
 800fea8:	f85d eb04 	ldr.w	lr, [sp], #4
 800feac:	b003      	add	sp, #12
 800feae:	4770      	bx	lr
 800feb0:	2000010c 	.word	0x2000010c
 800feb4:	ffff0208 	.word	0xffff0208

0800feb8 <strcpy>:
 800feb8:	4603      	mov	r3, r0
 800feba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800febe:	f803 2b01 	strb.w	r2, [r3], #1
 800fec2:	2a00      	cmp	r2, #0
 800fec4:	d1f9      	bne.n	800feba <strcpy+0x2>
 800fec6:	4770      	bx	lr

0800fec8 <strncmp>:
 800fec8:	b510      	push	{r4, lr}
 800feca:	b17a      	cbz	r2, 800feec <strncmp+0x24>
 800fecc:	4603      	mov	r3, r0
 800fece:	3901      	subs	r1, #1
 800fed0:	1884      	adds	r4, r0, r2
 800fed2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fed6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800feda:	4290      	cmp	r0, r2
 800fedc:	d101      	bne.n	800fee2 <strncmp+0x1a>
 800fede:	42a3      	cmp	r3, r4
 800fee0:	d101      	bne.n	800fee6 <strncmp+0x1e>
 800fee2:	1a80      	subs	r0, r0, r2
 800fee4:	bd10      	pop	{r4, pc}
 800fee6:	2800      	cmp	r0, #0
 800fee8:	d1f3      	bne.n	800fed2 <strncmp+0xa>
 800feea:	e7fa      	b.n	800fee2 <strncmp+0x1a>
 800feec:	4610      	mov	r0, r2
 800feee:	e7f9      	b.n	800fee4 <strncmp+0x1c>

0800fef0 <strncpy>:
 800fef0:	b510      	push	{r4, lr}
 800fef2:	3901      	subs	r1, #1
 800fef4:	4603      	mov	r3, r0
 800fef6:	b132      	cbz	r2, 800ff06 <strncpy+0x16>
 800fef8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fefc:	f803 4b01 	strb.w	r4, [r3], #1
 800ff00:	3a01      	subs	r2, #1
 800ff02:	2c00      	cmp	r4, #0
 800ff04:	d1f7      	bne.n	800fef6 <strncpy+0x6>
 800ff06:	441a      	add	r2, r3
 800ff08:	2100      	movs	r1, #0
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	d100      	bne.n	800ff10 <strncpy+0x20>
 800ff0e:	bd10      	pop	{r4, pc}
 800ff10:	f803 1b01 	strb.w	r1, [r3], #1
 800ff14:	e7f9      	b.n	800ff0a <strncpy+0x1a>
	...

0800ff18 <_strtol_l.constprop.0>:
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff1e:	d001      	beq.n	800ff24 <_strtol_l.constprop.0+0xc>
 800ff20:	2b24      	cmp	r3, #36	; 0x24
 800ff22:	d906      	bls.n	800ff32 <_strtol_l.constprop.0+0x1a>
 800ff24:	f7ff fe58 	bl	800fbd8 <__errno>
 800ff28:	2316      	movs	r3, #22
 800ff2a:	6003      	str	r3, [r0, #0]
 800ff2c:	2000      	movs	r0, #0
 800ff2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff32:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010018 <_strtol_l.constprop.0+0x100>
 800ff36:	460d      	mov	r5, r1
 800ff38:	462e      	mov	r6, r5
 800ff3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ff3e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ff42:	f017 0708 	ands.w	r7, r7, #8
 800ff46:	d1f7      	bne.n	800ff38 <_strtol_l.constprop.0+0x20>
 800ff48:	2c2d      	cmp	r4, #45	; 0x2d
 800ff4a:	d132      	bne.n	800ffb2 <_strtol_l.constprop.0+0x9a>
 800ff4c:	782c      	ldrb	r4, [r5, #0]
 800ff4e:	2701      	movs	r7, #1
 800ff50:	1cb5      	adds	r5, r6, #2
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d05b      	beq.n	801000e <_strtol_l.constprop.0+0xf6>
 800ff56:	2b10      	cmp	r3, #16
 800ff58:	d109      	bne.n	800ff6e <_strtol_l.constprop.0+0x56>
 800ff5a:	2c30      	cmp	r4, #48	; 0x30
 800ff5c:	d107      	bne.n	800ff6e <_strtol_l.constprop.0+0x56>
 800ff5e:	782c      	ldrb	r4, [r5, #0]
 800ff60:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ff64:	2c58      	cmp	r4, #88	; 0x58
 800ff66:	d14d      	bne.n	8010004 <_strtol_l.constprop.0+0xec>
 800ff68:	786c      	ldrb	r4, [r5, #1]
 800ff6a:	2310      	movs	r3, #16
 800ff6c:	3502      	adds	r5, #2
 800ff6e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ff72:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800ff76:	f04f 0c00 	mov.w	ip, #0
 800ff7a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ff7e:	4666      	mov	r6, ip
 800ff80:	fb03 8a19 	mls	sl, r3, r9, r8
 800ff84:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ff88:	f1be 0f09 	cmp.w	lr, #9
 800ff8c:	d816      	bhi.n	800ffbc <_strtol_l.constprop.0+0xa4>
 800ff8e:	4674      	mov	r4, lr
 800ff90:	42a3      	cmp	r3, r4
 800ff92:	dd24      	ble.n	800ffde <_strtol_l.constprop.0+0xc6>
 800ff94:	f1bc 0f00 	cmp.w	ip, #0
 800ff98:	db1e      	blt.n	800ffd8 <_strtol_l.constprop.0+0xc0>
 800ff9a:	45b1      	cmp	r9, r6
 800ff9c:	d31c      	bcc.n	800ffd8 <_strtol_l.constprop.0+0xc0>
 800ff9e:	d101      	bne.n	800ffa4 <_strtol_l.constprop.0+0x8c>
 800ffa0:	45a2      	cmp	sl, r4
 800ffa2:	db19      	blt.n	800ffd8 <_strtol_l.constprop.0+0xc0>
 800ffa4:	fb06 4603 	mla	r6, r6, r3, r4
 800ffa8:	f04f 0c01 	mov.w	ip, #1
 800ffac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ffb0:	e7e8      	b.n	800ff84 <_strtol_l.constprop.0+0x6c>
 800ffb2:	2c2b      	cmp	r4, #43	; 0x2b
 800ffb4:	bf04      	itt	eq
 800ffb6:	782c      	ldrbeq	r4, [r5, #0]
 800ffb8:	1cb5      	addeq	r5, r6, #2
 800ffba:	e7ca      	b.n	800ff52 <_strtol_l.constprop.0+0x3a>
 800ffbc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ffc0:	f1be 0f19 	cmp.w	lr, #25
 800ffc4:	d801      	bhi.n	800ffca <_strtol_l.constprop.0+0xb2>
 800ffc6:	3c37      	subs	r4, #55	; 0x37
 800ffc8:	e7e2      	b.n	800ff90 <_strtol_l.constprop.0+0x78>
 800ffca:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ffce:	f1be 0f19 	cmp.w	lr, #25
 800ffd2:	d804      	bhi.n	800ffde <_strtol_l.constprop.0+0xc6>
 800ffd4:	3c57      	subs	r4, #87	; 0x57
 800ffd6:	e7db      	b.n	800ff90 <_strtol_l.constprop.0+0x78>
 800ffd8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ffdc:	e7e6      	b.n	800ffac <_strtol_l.constprop.0+0x94>
 800ffde:	f1bc 0f00 	cmp.w	ip, #0
 800ffe2:	da05      	bge.n	800fff0 <_strtol_l.constprop.0+0xd8>
 800ffe4:	2322      	movs	r3, #34	; 0x22
 800ffe6:	6003      	str	r3, [r0, #0]
 800ffe8:	4646      	mov	r6, r8
 800ffea:	b942      	cbnz	r2, 800fffe <_strtol_l.constprop.0+0xe6>
 800ffec:	4630      	mov	r0, r6
 800ffee:	e79e      	b.n	800ff2e <_strtol_l.constprop.0+0x16>
 800fff0:	b107      	cbz	r7, 800fff4 <_strtol_l.constprop.0+0xdc>
 800fff2:	4276      	negs	r6, r6
 800fff4:	2a00      	cmp	r2, #0
 800fff6:	d0f9      	beq.n	800ffec <_strtol_l.constprop.0+0xd4>
 800fff8:	f1bc 0f00 	cmp.w	ip, #0
 800fffc:	d000      	beq.n	8010000 <_strtol_l.constprop.0+0xe8>
 800fffe:	1e69      	subs	r1, r5, #1
 8010000:	6011      	str	r1, [r2, #0]
 8010002:	e7f3      	b.n	800ffec <_strtol_l.constprop.0+0xd4>
 8010004:	2430      	movs	r4, #48	; 0x30
 8010006:	2b00      	cmp	r3, #0
 8010008:	d1b1      	bne.n	800ff6e <_strtol_l.constprop.0+0x56>
 801000a:	2308      	movs	r3, #8
 801000c:	e7af      	b.n	800ff6e <_strtol_l.constprop.0+0x56>
 801000e:	2c30      	cmp	r4, #48	; 0x30
 8010010:	d0a5      	beq.n	800ff5e <_strtol_l.constprop.0+0x46>
 8010012:	230a      	movs	r3, #10
 8010014:	e7ab      	b.n	800ff6e <_strtol_l.constprop.0+0x56>
 8010016:	bf00      	nop
 8010018:	08011ba1 	.word	0x08011ba1

0801001c <strtol>:
 801001c:	4613      	mov	r3, r2
 801001e:	460a      	mov	r2, r1
 8010020:	4601      	mov	r1, r0
 8010022:	4802      	ldr	r0, [pc, #8]	; (801002c <strtol+0x10>)
 8010024:	6800      	ldr	r0, [r0, #0]
 8010026:	f7ff bf77 	b.w	800ff18 <_strtol_l.constprop.0>
 801002a:	bf00      	nop
 801002c:	2000010c 	.word	0x2000010c

08010030 <__malloc_lock>:
 8010030:	4801      	ldr	r0, [pc, #4]	; (8010038 <__malloc_lock+0x8>)
 8010032:	f7ff bdfb 	b.w	800fc2c <__retarget_lock_acquire_recursive>
 8010036:	bf00      	nop
 8010038:	2000bb3c 	.word	0x2000bb3c

0801003c <__malloc_unlock>:
 801003c:	4801      	ldr	r0, [pc, #4]	; (8010044 <__malloc_unlock+0x8>)
 801003e:	f7ff bdf6 	b.w	800fc2e <__retarget_lock_release_recursive>
 8010042:	bf00      	nop
 8010044:	2000bb3c 	.word	0x2000bb3c

08010048 <_free_r>:
 8010048:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801004a:	2900      	cmp	r1, #0
 801004c:	d044      	beq.n	80100d8 <_free_r+0x90>
 801004e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010052:	9001      	str	r0, [sp, #4]
 8010054:	2b00      	cmp	r3, #0
 8010056:	f1a1 0404 	sub.w	r4, r1, #4
 801005a:	bfb8      	it	lt
 801005c:	18e4      	addlt	r4, r4, r3
 801005e:	f7ff ffe7 	bl	8010030 <__malloc_lock>
 8010062:	4a1e      	ldr	r2, [pc, #120]	; (80100dc <_free_r+0x94>)
 8010064:	9801      	ldr	r0, [sp, #4]
 8010066:	6813      	ldr	r3, [r2, #0]
 8010068:	b933      	cbnz	r3, 8010078 <_free_r+0x30>
 801006a:	6063      	str	r3, [r4, #4]
 801006c:	6014      	str	r4, [r2, #0]
 801006e:	b003      	add	sp, #12
 8010070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010074:	f7ff bfe2 	b.w	801003c <__malloc_unlock>
 8010078:	42a3      	cmp	r3, r4
 801007a:	d908      	bls.n	801008e <_free_r+0x46>
 801007c:	6825      	ldr	r5, [r4, #0]
 801007e:	1961      	adds	r1, r4, r5
 8010080:	428b      	cmp	r3, r1
 8010082:	bf01      	itttt	eq
 8010084:	6819      	ldreq	r1, [r3, #0]
 8010086:	685b      	ldreq	r3, [r3, #4]
 8010088:	1949      	addeq	r1, r1, r5
 801008a:	6021      	streq	r1, [r4, #0]
 801008c:	e7ed      	b.n	801006a <_free_r+0x22>
 801008e:	461a      	mov	r2, r3
 8010090:	685b      	ldr	r3, [r3, #4]
 8010092:	b10b      	cbz	r3, 8010098 <_free_r+0x50>
 8010094:	42a3      	cmp	r3, r4
 8010096:	d9fa      	bls.n	801008e <_free_r+0x46>
 8010098:	6811      	ldr	r1, [r2, #0]
 801009a:	1855      	adds	r5, r2, r1
 801009c:	42a5      	cmp	r5, r4
 801009e:	d10b      	bne.n	80100b8 <_free_r+0x70>
 80100a0:	6824      	ldr	r4, [r4, #0]
 80100a2:	4421      	add	r1, r4
 80100a4:	1854      	adds	r4, r2, r1
 80100a6:	42a3      	cmp	r3, r4
 80100a8:	6011      	str	r1, [r2, #0]
 80100aa:	d1e0      	bne.n	801006e <_free_r+0x26>
 80100ac:	681c      	ldr	r4, [r3, #0]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	6053      	str	r3, [r2, #4]
 80100b2:	4421      	add	r1, r4
 80100b4:	6011      	str	r1, [r2, #0]
 80100b6:	e7da      	b.n	801006e <_free_r+0x26>
 80100b8:	d902      	bls.n	80100c0 <_free_r+0x78>
 80100ba:	230c      	movs	r3, #12
 80100bc:	6003      	str	r3, [r0, #0]
 80100be:	e7d6      	b.n	801006e <_free_r+0x26>
 80100c0:	6825      	ldr	r5, [r4, #0]
 80100c2:	1961      	adds	r1, r4, r5
 80100c4:	428b      	cmp	r3, r1
 80100c6:	bf04      	itt	eq
 80100c8:	6819      	ldreq	r1, [r3, #0]
 80100ca:	685b      	ldreq	r3, [r3, #4]
 80100cc:	6063      	str	r3, [r4, #4]
 80100ce:	bf04      	itt	eq
 80100d0:	1949      	addeq	r1, r1, r5
 80100d2:	6021      	streq	r1, [r4, #0]
 80100d4:	6054      	str	r4, [r2, #4]
 80100d6:	e7ca      	b.n	801006e <_free_r+0x26>
 80100d8:	b003      	add	sp, #12
 80100da:	bd30      	pop	{r4, r5, pc}
 80100dc:	2000bb40 	.word	0x2000bb40

080100e0 <__ssputs_r>:
 80100e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100e4:	688e      	ldr	r6, [r1, #8]
 80100e6:	429e      	cmp	r6, r3
 80100e8:	4682      	mov	sl, r0
 80100ea:	460c      	mov	r4, r1
 80100ec:	4690      	mov	r8, r2
 80100ee:	461f      	mov	r7, r3
 80100f0:	d838      	bhi.n	8010164 <__ssputs_r+0x84>
 80100f2:	898a      	ldrh	r2, [r1, #12]
 80100f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80100f8:	d032      	beq.n	8010160 <__ssputs_r+0x80>
 80100fa:	6825      	ldr	r5, [r4, #0]
 80100fc:	6909      	ldr	r1, [r1, #16]
 80100fe:	eba5 0901 	sub.w	r9, r5, r1
 8010102:	6965      	ldr	r5, [r4, #20]
 8010104:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010108:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801010c:	3301      	adds	r3, #1
 801010e:	444b      	add	r3, r9
 8010110:	106d      	asrs	r5, r5, #1
 8010112:	429d      	cmp	r5, r3
 8010114:	bf38      	it	cc
 8010116:	461d      	movcc	r5, r3
 8010118:	0553      	lsls	r3, r2, #21
 801011a:	d531      	bpl.n	8010180 <__ssputs_r+0xa0>
 801011c:	4629      	mov	r1, r5
 801011e:	f7ff fdbd 	bl	800fc9c <_malloc_r>
 8010122:	4606      	mov	r6, r0
 8010124:	b950      	cbnz	r0, 801013c <__ssputs_r+0x5c>
 8010126:	230c      	movs	r3, #12
 8010128:	f8ca 3000 	str.w	r3, [sl]
 801012c:	89a3      	ldrh	r3, [r4, #12]
 801012e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010132:	81a3      	strh	r3, [r4, #12]
 8010134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801013c:	6921      	ldr	r1, [r4, #16]
 801013e:	464a      	mov	r2, r9
 8010140:	f7ff fd76 	bl	800fc30 <memcpy>
 8010144:	89a3      	ldrh	r3, [r4, #12]
 8010146:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801014a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801014e:	81a3      	strh	r3, [r4, #12]
 8010150:	6126      	str	r6, [r4, #16]
 8010152:	6165      	str	r5, [r4, #20]
 8010154:	444e      	add	r6, r9
 8010156:	eba5 0509 	sub.w	r5, r5, r9
 801015a:	6026      	str	r6, [r4, #0]
 801015c:	60a5      	str	r5, [r4, #8]
 801015e:	463e      	mov	r6, r7
 8010160:	42be      	cmp	r6, r7
 8010162:	d900      	bls.n	8010166 <__ssputs_r+0x86>
 8010164:	463e      	mov	r6, r7
 8010166:	6820      	ldr	r0, [r4, #0]
 8010168:	4632      	mov	r2, r6
 801016a:	4641      	mov	r1, r8
 801016c:	f000 faa8 	bl	80106c0 <memmove>
 8010170:	68a3      	ldr	r3, [r4, #8]
 8010172:	1b9b      	subs	r3, r3, r6
 8010174:	60a3      	str	r3, [r4, #8]
 8010176:	6823      	ldr	r3, [r4, #0]
 8010178:	4433      	add	r3, r6
 801017a:	6023      	str	r3, [r4, #0]
 801017c:	2000      	movs	r0, #0
 801017e:	e7db      	b.n	8010138 <__ssputs_r+0x58>
 8010180:	462a      	mov	r2, r5
 8010182:	f000 fab7 	bl	80106f4 <_realloc_r>
 8010186:	4606      	mov	r6, r0
 8010188:	2800      	cmp	r0, #0
 801018a:	d1e1      	bne.n	8010150 <__ssputs_r+0x70>
 801018c:	6921      	ldr	r1, [r4, #16]
 801018e:	4650      	mov	r0, sl
 8010190:	f7ff ff5a 	bl	8010048 <_free_r>
 8010194:	e7c7      	b.n	8010126 <__ssputs_r+0x46>
	...

08010198 <_svfiprintf_r>:
 8010198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801019c:	4698      	mov	r8, r3
 801019e:	898b      	ldrh	r3, [r1, #12]
 80101a0:	061b      	lsls	r3, r3, #24
 80101a2:	b09d      	sub	sp, #116	; 0x74
 80101a4:	4607      	mov	r7, r0
 80101a6:	460d      	mov	r5, r1
 80101a8:	4614      	mov	r4, r2
 80101aa:	d50e      	bpl.n	80101ca <_svfiprintf_r+0x32>
 80101ac:	690b      	ldr	r3, [r1, #16]
 80101ae:	b963      	cbnz	r3, 80101ca <_svfiprintf_r+0x32>
 80101b0:	2140      	movs	r1, #64	; 0x40
 80101b2:	f7ff fd73 	bl	800fc9c <_malloc_r>
 80101b6:	6028      	str	r0, [r5, #0]
 80101b8:	6128      	str	r0, [r5, #16]
 80101ba:	b920      	cbnz	r0, 80101c6 <_svfiprintf_r+0x2e>
 80101bc:	230c      	movs	r3, #12
 80101be:	603b      	str	r3, [r7, #0]
 80101c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80101c4:	e0d1      	b.n	801036a <_svfiprintf_r+0x1d2>
 80101c6:	2340      	movs	r3, #64	; 0x40
 80101c8:	616b      	str	r3, [r5, #20]
 80101ca:	2300      	movs	r3, #0
 80101cc:	9309      	str	r3, [sp, #36]	; 0x24
 80101ce:	2320      	movs	r3, #32
 80101d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80101d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80101d8:	2330      	movs	r3, #48	; 0x30
 80101da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010384 <_svfiprintf_r+0x1ec>
 80101de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80101e2:	f04f 0901 	mov.w	r9, #1
 80101e6:	4623      	mov	r3, r4
 80101e8:	469a      	mov	sl, r3
 80101ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101ee:	b10a      	cbz	r2, 80101f4 <_svfiprintf_r+0x5c>
 80101f0:	2a25      	cmp	r2, #37	; 0x25
 80101f2:	d1f9      	bne.n	80101e8 <_svfiprintf_r+0x50>
 80101f4:	ebba 0b04 	subs.w	fp, sl, r4
 80101f8:	d00b      	beq.n	8010212 <_svfiprintf_r+0x7a>
 80101fa:	465b      	mov	r3, fp
 80101fc:	4622      	mov	r2, r4
 80101fe:	4629      	mov	r1, r5
 8010200:	4638      	mov	r0, r7
 8010202:	f7ff ff6d 	bl	80100e0 <__ssputs_r>
 8010206:	3001      	adds	r0, #1
 8010208:	f000 80aa 	beq.w	8010360 <_svfiprintf_r+0x1c8>
 801020c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801020e:	445a      	add	r2, fp
 8010210:	9209      	str	r2, [sp, #36]	; 0x24
 8010212:	f89a 3000 	ldrb.w	r3, [sl]
 8010216:	2b00      	cmp	r3, #0
 8010218:	f000 80a2 	beq.w	8010360 <_svfiprintf_r+0x1c8>
 801021c:	2300      	movs	r3, #0
 801021e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010222:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010226:	f10a 0a01 	add.w	sl, sl, #1
 801022a:	9304      	str	r3, [sp, #16]
 801022c:	9307      	str	r3, [sp, #28]
 801022e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010232:	931a      	str	r3, [sp, #104]	; 0x68
 8010234:	4654      	mov	r4, sl
 8010236:	2205      	movs	r2, #5
 8010238:	f814 1b01 	ldrb.w	r1, [r4], #1
 801023c:	4851      	ldr	r0, [pc, #324]	; (8010384 <_svfiprintf_r+0x1ec>)
 801023e:	f7f0 f847 	bl	80002d0 <memchr>
 8010242:	9a04      	ldr	r2, [sp, #16]
 8010244:	b9d8      	cbnz	r0, 801027e <_svfiprintf_r+0xe6>
 8010246:	06d0      	lsls	r0, r2, #27
 8010248:	bf44      	itt	mi
 801024a:	2320      	movmi	r3, #32
 801024c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010250:	0711      	lsls	r1, r2, #28
 8010252:	bf44      	itt	mi
 8010254:	232b      	movmi	r3, #43	; 0x2b
 8010256:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801025a:	f89a 3000 	ldrb.w	r3, [sl]
 801025e:	2b2a      	cmp	r3, #42	; 0x2a
 8010260:	d015      	beq.n	801028e <_svfiprintf_r+0xf6>
 8010262:	9a07      	ldr	r2, [sp, #28]
 8010264:	4654      	mov	r4, sl
 8010266:	2000      	movs	r0, #0
 8010268:	f04f 0c0a 	mov.w	ip, #10
 801026c:	4621      	mov	r1, r4
 801026e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010272:	3b30      	subs	r3, #48	; 0x30
 8010274:	2b09      	cmp	r3, #9
 8010276:	d94e      	bls.n	8010316 <_svfiprintf_r+0x17e>
 8010278:	b1b0      	cbz	r0, 80102a8 <_svfiprintf_r+0x110>
 801027a:	9207      	str	r2, [sp, #28]
 801027c:	e014      	b.n	80102a8 <_svfiprintf_r+0x110>
 801027e:	eba0 0308 	sub.w	r3, r0, r8
 8010282:	fa09 f303 	lsl.w	r3, r9, r3
 8010286:	4313      	orrs	r3, r2
 8010288:	9304      	str	r3, [sp, #16]
 801028a:	46a2      	mov	sl, r4
 801028c:	e7d2      	b.n	8010234 <_svfiprintf_r+0x9c>
 801028e:	9b03      	ldr	r3, [sp, #12]
 8010290:	1d19      	adds	r1, r3, #4
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	9103      	str	r1, [sp, #12]
 8010296:	2b00      	cmp	r3, #0
 8010298:	bfbb      	ittet	lt
 801029a:	425b      	neglt	r3, r3
 801029c:	f042 0202 	orrlt.w	r2, r2, #2
 80102a0:	9307      	strge	r3, [sp, #28]
 80102a2:	9307      	strlt	r3, [sp, #28]
 80102a4:	bfb8      	it	lt
 80102a6:	9204      	strlt	r2, [sp, #16]
 80102a8:	7823      	ldrb	r3, [r4, #0]
 80102aa:	2b2e      	cmp	r3, #46	; 0x2e
 80102ac:	d10c      	bne.n	80102c8 <_svfiprintf_r+0x130>
 80102ae:	7863      	ldrb	r3, [r4, #1]
 80102b0:	2b2a      	cmp	r3, #42	; 0x2a
 80102b2:	d135      	bne.n	8010320 <_svfiprintf_r+0x188>
 80102b4:	9b03      	ldr	r3, [sp, #12]
 80102b6:	1d1a      	adds	r2, r3, #4
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	9203      	str	r2, [sp, #12]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	bfb8      	it	lt
 80102c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80102c4:	3402      	adds	r4, #2
 80102c6:	9305      	str	r3, [sp, #20]
 80102c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010394 <_svfiprintf_r+0x1fc>
 80102cc:	7821      	ldrb	r1, [r4, #0]
 80102ce:	2203      	movs	r2, #3
 80102d0:	4650      	mov	r0, sl
 80102d2:	f7ef fffd 	bl	80002d0 <memchr>
 80102d6:	b140      	cbz	r0, 80102ea <_svfiprintf_r+0x152>
 80102d8:	2340      	movs	r3, #64	; 0x40
 80102da:	eba0 000a 	sub.w	r0, r0, sl
 80102de:	fa03 f000 	lsl.w	r0, r3, r0
 80102e2:	9b04      	ldr	r3, [sp, #16]
 80102e4:	4303      	orrs	r3, r0
 80102e6:	3401      	adds	r4, #1
 80102e8:	9304      	str	r3, [sp, #16]
 80102ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102ee:	4826      	ldr	r0, [pc, #152]	; (8010388 <_svfiprintf_r+0x1f0>)
 80102f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102f4:	2206      	movs	r2, #6
 80102f6:	f7ef ffeb 	bl	80002d0 <memchr>
 80102fa:	2800      	cmp	r0, #0
 80102fc:	d038      	beq.n	8010370 <_svfiprintf_r+0x1d8>
 80102fe:	4b23      	ldr	r3, [pc, #140]	; (801038c <_svfiprintf_r+0x1f4>)
 8010300:	bb1b      	cbnz	r3, 801034a <_svfiprintf_r+0x1b2>
 8010302:	9b03      	ldr	r3, [sp, #12]
 8010304:	3307      	adds	r3, #7
 8010306:	f023 0307 	bic.w	r3, r3, #7
 801030a:	3308      	adds	r3, #8
 801030c:	9303      	str	r3, [sp, #12]
 801030e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010310:	4433      	add	r3, r6
 8010312:	9309      	str	r3, [sp, #36]	; 0x24
 8010314:	e767      	b.n	80101e6 <_svfiprintf_r+0x4e>
 8010316:	fb0c 3202 	mla	r2, ip, r2, r3
 801031a:	460c      	mov	r4, r1
 801031c:	2001      	movs	r0, #1
 801031e:	e7a5      	b.n	801026c <_svfiprintf_r+0xd4>
 8010320:	2300      	movs	r3, #0
 8010322:	3401      	adds	r4, #1
 8010324:	9305      	str	r3, [sp, #20]
 8010326:	4619      	mov	r1, r3
 8010328:	f04f 0c0a 	mov.w	ip, #10
 801032c:	4620      	mov	r0, r4
 801032e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010332:	3a30      	subs	r2, #48	; 0x30
 8010334:	2a09      	cmp	r2, #9
 8010336:	d903      	bls.n	8010340 <_svfiprintf_r+0x1a8>
 8010338:	2b00      	cmp	r3, #0
 801033a:	d0c5      	beq.n	80102c8 <_svfiprintf_r+0x130>
 801033c:	9105      	str	r1, [sp, #20]
 801033e:	e7c3      	b.n	80102c8 <_svfiprintf_r+0x130>
 8010340:	fb0c 2101 	mla	r1, ip, r1, r2
 8010344:	4604      	mov	r4, r0
 8010346:	2301      	movs	r3, #1
 8010348:	e7f0      	b.n	801032c <_svfiprintf_r+0x194>
 801034a:	ab03      	add	r3, sp, #12
 801034c:	9300      	str	r3, [sp, #0]
 801034e:	462a      	mov	r2, r5
 8010350:	4b0f      	ldr	r3, [pc, #60]	; (8010390 <_svfiprintf_r+0x1f8>)
 8010352:	a904      	add	r1, sp, #16
 8010354:	4638      	mov	r0, r7
 8010356:	f3af 8000 	nop.w
 801035a:	1c42      	adds	r2, r0, #1
 801035c:	4606      	mov	r6, r0
 801035e:	d1d6      	bne.n	801030e <_svfiprintf_r+0x176>
 8010360:	89ab      	ldrh	r3, [r5, #12]
 8010362:	065b      	lsls	r3, r3, #25
 8010364:	f53f af2c 	bmi.w	80101c0 <_svfiprintf_r+0x28>
 8010368:	9809      	ldr	r0, [sp, #36]	; 0x24
 801036a:	b01d      	add	sp, #116	; 0x74
 801036c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010370:	ab03      	add	r3, sp, #12
 8010372:	9300      	str	r3, [sp, #0]
 8010374:	462a      	mov	r2, r5
 8010376:	4b06      	ldr	r3, [pc, #24]	; (8010390 <_svfiprintf_r+0x1f8>)
 8010378:	a904      	add	r1, sp, #16
 801037a:	4638      	mov	r0, r7
 801037c:	f000 f87a 	bl	8010474 <_printf_i>
 8010380:	e7eb      	b.n	801035a <_svfiprintf_r+0x1c2>
 8010382:	bf00      	nop
 8010384:	08011ca1 	.word	0x08011ca1
 8010388:	08011cab 	.word	0x08011cab
 801038c:	00000000 	.word	0x00000000
 8010390:	080100e1 	.word	0x080100e1
 8010394:	08011ca7 	.word	0x08011ca7

08010398 <_printf_common>:
 8010398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801039c:	4616      	mov	r6, r2
 801039e:	4699      	mov	r9, r3
 80103a0:	688a      	ldr	r2, [r1, #8]
 80103a2:	690b      	ldr	r3, [r1, #16]
 80103a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80103a8:	4293      	cmp	r3, r2
 80103aa:	bfb8      	it	lt
 80103ac:	4613      	movlt	r3, r2
 80103ae:	6033      	str	r3, [r6, #0]
 80103b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80103b4:	4607      	mov	r7, r0
 80103b6:	460c      	mov	r4, r1
 80103b8:	b10a      	cbz	r2, 80103be <_printf_common+0x26>
 80103ba:	3301      	adds	r3, #1
 80103bc:	6033      	str	r3, [r6, #0]
 80103be:	6823      	ldr	r3, [r4, #0]
 80103c0:	0699      	lsls	r1, r3, #26
 80103c2:	bf42      	ittt	mi
 80103c4:	6833      	ldrmi	r3, [r6, #0]
 80103c6:	3302      	addmi	r3, #2
 80103c8:	6033      	strmi	r3, [r6, #0]
 80103ca:	6825      	ldr	r5, [r4, #0]
 80103cc:	f015 0506 	ands.w	r5, r5, #6
 80103d0:	d106      	bne.n	80103e0 <_printf_common+0x48>
 80103d2:	f104 0a19 	add.w	sl, r4, #25
 80103d6:	68e3      	ldr	r3, [r4, #12]
 80103d8:	6832      	ldr	r2, [r6, #0]
 80103da:	1a9b      	subs	r3, r3, r2
 80103dc:	42ab      	cmp	r3, r5
 80103de:	dc26      	bgt.n	801042e <_printf_common+0x96>
 80103e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80103e4:	1e13      	subs	r3, r2, #0
 80103e6:	6822      	ldr	r2, [r4, #0]
 80103e8:	bf18      	it	ne
 80103ea:	2301      	movne	r3, #1
 80103ec:	0692      	lsls	r2, r2, #26
 80103ee:	d42b      	bmi.n	8010448 <_printf_common+0xb0>
 80103f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80103f4:	4649      	mov	r1, r9
 80103f6:	4638      	mov	r0, r7
 80103f8:	47c0      	blx	r8
 80103fa:	3001      	adds	r0, #1
 80103fc:	d01e      	beq.n	801043c <_printf_common+0xa4>
 80103fe:	6823      	ldr	r3, [r4, #0]
 8010400:	68e5      	ldr	r5, [r4, #12]
 8010402:	6832      	ldr	r2, [r6, #0]
 8010404:	f003 0306 	and.w	r3, r3, #6
 8010408:	2b04      	cmp	r3, #4
 801040a:	bf08      	it	eq
 801040c:	1aad      	subeq	r5, r5, r2
 801040e:	68a3      	ldr	r3, [r4, #8]
 8010410:	6922      	ldr	r2, [r4, #16]
 8010412:	bf0c      	ite	eq
 8010414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010418:	2500      	movne	r5, #0
 801041a:	4293      	cmp	r3, r2
 801041c:	bfc4      	itt	gt
 801041e:	1a9b      	subgt	r3, r3, r2
 8010420:	18ed      	addgt	r5, r5, r3
 8010422:	2600      	movs	r6, #0
 8010424:	341a      	adds	r4, #26
 8010426:	42b5      	cmp	r5, r6
 8010428:	d11a      	bne.n	8010460 <_printf_common+0xc8>
 801042a:	2000      	movs	r0, #0
 801042c:	e008      	b.n	8010440 <_printf_common+0xa8>
 801042e:	2301      	movs	r3, #1
 8010430:	4652      	mov	r2, sl
 8010432:	4649      	mov	r1, r9
 8010434:	4638      	mov	r0, r7
 8010436:	47c0      	blx	r8
 8010438:	3001      	adds	r0, #1
 801043a:	d103      	bne.n	8010444 <_printf_common+0xac>
 801043c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010444:	3501      	adds	r5, #1
 8010446:	e7c6      	b.n	80103d6 <_printf_common+0x3e>
 8010448:	18e1      	adds	r1, r4, r3
 801044a:	1c5a      	adds	r2, r3, #1
 801044c:	2030      	movs	r0, #48	; 0x30
 801044e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010452:	4422      	add	r2, r4
 8010454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801045c:	3302      	adds	r3, #2
 801045e:	e7c7      	b.n	80103f0 <_printf_common+0x58>
 8010460:	2301      	movs	r3, #1
 8010462:	4622      	mov	r2, r4
 8010464:	4649      	mov	r1, r9
 8010466:	4638      	mov	r0, r7
 8010468:	47c0      	blx	r8
 801046a:	3001      	adds	r0, #1
 801046c:	d0e6      	beq.n	801043c <_printf_common+0xa4>
 801046e:	3601      	adds	r6, #1
 8010470:	e7d9      	b.n	8010426 <_printf_common+0x8e>
	...

08010474 <_printf_i>:
 8010474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010478:	7e0f      	ldrb	r7, [r1, #24]
 801047a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801047c:	2f78      	cmp	r7, #120	; 0x78
 801047e:	4691      	mov	r9, r2
 8010480:	4680      	mov	r8, r0
 8010482:	460c      	mov	r4, r1
 8010484:	469a      	mov	sl, r3
 8010486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801048a:	d807      	bhi.n	801049c <_printf_i+0x28>
 801048c:	2f62      	cmp	r7, #98	; 0x62
 801048e:	d80a      	bhi.n	80104a6 <_printf_i+0x32>
 8010490:	2f00      	cmp	r7, #0
 8010492:	f000 80d8 	beq.w	8010646 <_printf_i+0x1d2>
 8010496:	2f58      	cmp	r7, #88	; 0x58
 8010498:	f000 80a3 	beq.w	80105e2 <_printf_i+0x16e>
 801049c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80104a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80104a4:	e03a      	b.n	801051c <_printf_i+0xa8>
 80104a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80104aa:	2b15      	cmp	r3, #21
 80104ac:	d8f6      	bhi.n	801049c <_printf_i+0x28>
 80104ae:	a101      	add	r1, pc, #4	; (adr r1, 80104b4 <_printf_i+0x40>)
 80104b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80104b4:	0801050d 	.word	0x0801050d
 80104b8:	08010521 	.word	0x08010521
 80104bc:	0801049d 	.word	0x0801049d
 80104c0:	0801049d 	.word	0x0801049d
 80104c4:	0801049d 	.word	0x0801049d
 80104c8:	0801049d 	.word	0x0801049d
 80104cc:	08010521 	.word	0x08010521
 80104d0:	0801049d 	.word	0x0801049d
 80104d4:	0801049d 	.word	0x0801049d
 80104d8:	0801049d 	.word	0x0801049d
 80104dc:	0801049d 	.word	0x0801049d
 80104e0:	0801062d 	.word	0x0801062d
 80104e4:	08010551 	.word	0x08010551
 80104e8:	0801060f 	.word	0x0801060f
 80104ec:	0801049d 	.word	0x0801049d
 80104f0:	0801049d 	.word	0x0801049d
 80104f4:	0801064f 	.word	0x0801064f
 80104f8:	0801049d 	.word	0x0801049d
 80104fc:	08010551 	.word	0x08010551
 8010500:	0801049d 	.word	0x0801049d
 8010504:	0801049d 	.word	0x0801049d
 8010508:	08010617 	.word	0x08010617
 801050c:	682b      	ldr	r3, [r5, #0]
 801050e:	1d1a      	adds	r2, r3, #4
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	602a      	str	r2, [r5, #0]
 8010514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801051c:	2301      	movs	r3, #1
 801051e:	e0a3      	b.n	8010668 <_printf_i+0x1f4>
 8010520:	6820      	ldr	r0, [r4, #0]
 8010522:	6829      	ldr	r1, [r5, #0]
 8010524:	0606      	lsls	r6, r0, #24
 8010526:	f101 0304 	add.w	r3, r1, #4
 801052a:	d50a      	bpl.n	8010542 <_printf_i+0xce>
 801052c:	680e      	ldr	r6, [r1, #0]
 801052e:	602b      	str	r3, [r5, #0]
 8010530:	2e00      	cmp	r6, #0
 8010532:	da03      	bge.n	801053c <_printf_i+0xc8>
 8010534:	232d      	movs	r3, #45	; 0x2d
 8010536:	4276      	negs	r6, r6
 8010538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801053c:	485e      	ldr	r0, [pc, #376]	; (80106b8 <_printf_i+0x244>)
 801053e:	230a      	movs	r3, #10
 8010540:	e019      	b.n	8010576 <_printf_i+0x102>
 8010542:	680e      	ldr	r6, [r1, #0]
 8010544:	602b      	str	r3, [r5, #0]
 8010546:	f010 0f40 	tst.w	r0, #64	; 0x40
 801054a:	bf18      	it	ne
 801054c:	b236      	sxthne	r6, r6
 801054e:	e7ef      	b.n	8010530 <_printf_i+0xbc>
 8010550:	682b      	ldr	r3, [r5, #0]
 8010552:	6820      	ldr	r0, [r4, #0]
 8010554:	1d19      	adds	r1, r3, #4
 8010556:	6029      	str	r1, [r5, #0]
 8010558:	0601      	lsls	r1, r0, #24
 801055a:	d501      	bpl.n	8010560 <_printf_i+0xec>
 801055c:	681e      	ldr	r6, [r3, #0]
 801055e:	e002      	b.n	8010566 <_printf_i+0xf2>
 8010560:	0646      	lsls	r6, r0, #25
 8010562:	d5fb      	bpl.n	801055c <_printf_i+0xe8>
 8010564:	881e      	ldrh	r6, [r3, #0]
 8010566:	4854      	ldr	r0, [pc, #336]	; (80106b8 <_printf_i+0x244>)
 8010568:	2f6f      	cmp	r7, #111	; 0x6f
 801056a:	bf0c      	ite	eq
 801056c:	2308      	moveq	r3, #8
 801056e:	230a      	movne	r3, #10
 8010570:	2100      	movs	r1, #0
 8010572:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010576:	6865      	ldr	r5, [r4, #4]
 8010578:	60a5      	str	r5, [r4, #8]
 801057a:	2d00      	cmp	r5, #0
 801057c:	bfa2      	ittt	ge
 801057e:	6821      	ldrge	r1, [r4, #0]
 8010580:	f021 0104 	bicge.w	r1, r1, #4
 8010584:	6021      	strge	r1, [r4, #0]
 8010586:	b90e      	cbnz	r6, 801058c <_printf_i+0x118>
 8010588:	2d00      	cmp	r5, #0
 801058a:	d04d      	beq.n	8010628 <_printf_i+0x1b4>
 801058c:	4615      	mov	r5, r2
 801058e:	fbb6 f1f3 	udiv	r1, r6, r3
 8010592:	fb03 6711 	mls	r7, r3, r1, r6
 8010596:	5dc7      	ldrb	r7, [r0, r7]
 8010598:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801059c:	4637      	mov	r7, r6
 801059e:	42bb      	cmp	r3, r7
 80105a0:	460e      	mov	r6, r1
 80105a2:	d9f4      	bls.n	801058e <_printf_i+0x11a>
 80105a4:	2b08      	cmp	r3, #8
 80105a6:	d10b      	bne.n	80105c0 <_printf_i+0x14c>
 80105a8:	6823      	ldr	r3, [r4, #0]
 80105aa:	07de      	lsls	r6, r3, #31
 80105ac:	d508      	bpl.n	80105c0 <_printf_i+0x14c>
 80105ae:	6923      	ldr	r3, [r4, #16]
 80105b0:	6861      	ldr	r1, [r4, #4]
 80105b2:	4299      	cmp	r1, r3
 80105b4:	bfde      	ittt	le
 80105b6:	2330      	movle	r3, #48	; 0x30
 80105b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80105bc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80105c0:	1b52      	subs	r2, r2, r5
 80105c2:	6122      	str	r2, [r4, #16]
 80105c4:	f8cd a000 	str.w	sl, [sp]
 80105c8:	464b      	mov	r3, r9
 80105ca:	aa03      	add	r2, sp, #12
 80105cc:	4621      	mov	r1, r4
 80105ce:	4640      	mov	r0, r8
 80105d0:	f7ff fee2 	bl	8010398 <_printf_common>
 80105d4:	3001      	adds	r0, #1
 80105d6:	d14c      	bne.n	8010672 <_printf_i+0x1fe>
 80105d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80105dc:	b004      	add	sp, #16
 80105de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105e2:	4835      	ldr	r0, [pc, #212]	; (80106b8 <_printf_i+0x244>)
 80105e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80105e8:	6829      	ldr	r1, [r5, #0]
 80105ea:	6823      	ldr	r3, [r4, #0]
 80105ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80105f0:	6029      	str	r1, [r5, #0]
 80105f2:	061d      	lsls	r5, r3, #24
 80105f4:	d514      	bpl.n	8010620 <_printf_i+0x1ac>
 80105f6:	07df      	lsls	r7, r3, #31
 80105f8:	bf44      	itt	mi
 80105fa:	f043 0320 	orrmi.w	r3, r3, #32
 80105fe:	6023      	strmi	r3, [r4, #0]
 8010600:	b91e      	cbnz	r6, 801060a <_printf_i+0x196>
 8010602:	6823      	ldr	r3, [r4, #0]
 8010604:	f023 0320 	bic.w	r3, r3, #32
 8010608:	6023      	str	r3, [r4, #0]
 801060a:	2310      	movs	r3, #16
 801060c:	e7b0      	b.n	8010570 <_printf_i+0xfc>
 801060e:	6823      	ldr	r3, [r4, #0]
 8010610:	f043 0320 	orr.w	r3, r3, #32
 8010614:	6023      	str	r3, [r4, #0]
 8010616:	2378      	movs	r3, #120	; 0x78
 8010618:	4828      	ldr	r0, [pc, #160]	; (80106bc <_printf_i+0x248>)
 801061a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801061e:	e7e3      	b.n	80105e8 <_printf_i+0x174>
 8010620:	0659      	lsls	r1, r3, #25
 8010622:	bf48      	it	mi
 8010624:	b2b6      	uxthmi	r6, r6
 8010626:	e7e6      	b.n	80105f6 <_printf_i+0x182>
 8010628:	4615      	mov	r5, r2
 801062a:	e7bb      	b.n	80105a4 <_printf_i+0x130>
 801062c:	682b      	ldr	r3, [r5, #0]
 801062e:	6826      	ldr	r6, [r4, #0]
 8010630:	6961      	ldr	r1, [r4, #20]
 8010632:	1d18      	adds	r0, r3, #4
 8010634:	6028      	str	r0, [r5, #0]
 8010636:	0635      	lsls	r5, r6, #24
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	d501      	bpl.n	8010640 <_printf_i+0x1cc>
 801063c:	6019      	str	r1, [r3, #0]
 801063e:	e002      	b.n	8010646 <_printf_i+0x1d2>
 8010640:	0670      	lsls	r0, r6, #25
 8010642:	d5fb      	bpl.n	801063c <_printf_i+0x1c8>
 8010644:	8019      	strh	r1, [r3, #0]
 8010646:	2300      	movs	r3, #0
 8010648:	6123      	str	r3, [r4, #16]
 801064a:	4615      	mov	r5, r2
 801064c:	e7ba      	b.n	80105c4 <_printf_i+0x150>
 801064e:	682b      	ldr	r3, [r5, #0]
 8010650:	1d1a      	adds	r2, r3, #4
 8010652:	602a      	str	r2, [r5, #0]
 8010654:	681d      	ldr	r5, [r3, #0]
 8010656:	6862      	ldr	r2, [r4, #4]
 8010658:	2100      	movs	r1, #0
 801065a:	4628      	mov	r0, r5
 801065c:	f7ef fe38 	bl	80002d0 <memchr>
 8010660:	b108      	cbz	r0, 8010666 <_printf_i+0x1f2>
 8010662:	1b40      	subs	r0, r0, r5
 8010664:	6060      	str	r0, [r4, #4]
 8010666:	6863      	ldr	r3, [r4, #4]
 8010668:	6123      	str	r3, [r4, #16]
 801066a:	2300      	movs	r3, #0
 801066c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010670:	e7a8      	b.n	80105c4 <_printf_i+0x150>
 8010672:	6923      	ldr	r3, [r4, #16]
 8010674:	462a      	mov	r2, r5
 8010676:	4649      	mov	r1, r9
 8010678:	4640      	mov	r0, r8
 801067a:	47d0      	blx	sl
 801067c:	3001      	adds	r0, #1
 801067e:	d0ab      	beq.n	80105d8 <_printf_i+0x164>
 8010680:	6823      	ldr	r3, [r4, #0]
 8010682:	079b      	lsls	r3, r3, #30
 8010684:	d413      	bmi.n	80106ae <_printf_i+0x23a>
 8010686:	68e0      	ldr	r0, [r4, #12]
 8010688:	9b03      	ldr	r3, [sp, #12]
 801068a:	4298      	cmp	r0, r3
 801068c:	bfb8      	it	lt
 801068e:	4618      	movlt	r0, r3
 8010690:	e7a4      	b.n	80105dc <_printf_i+0x168>
 8010692:	2301      	movs	r3, #1
 8010694:	4632      	mov	r2, r6
 8010696:	4649      	mov	r1, r9
 8010698:	4640      	mov	r0, r8
 801069a:	47d0      	blx	sl
 801069c:	3001      	adds	r0, #1
 801069e:	d09b      	beq.n	80105d8 <_printf_i+0x164>
 80106a0:	3501      	adds	r5, #1
 80106a2:	68e3      	ldr	r3, [r4, #12]
 80106a4:	9903      	ldr	r1, [sp, #12]
 80106a6:	1a5b      	subs	r3, r3, r1
 80106a8:	42ab      	cmp	r3, r5
 80106aa:	dcf2      	bgt.n	8010692 <_printf_i+0x21e>
 80106ac:	e7eb      	b.n	8010686 <_printf_i+0x212>
 80106ae:	2500      	movs	r5, #0
 80106b0:	f104 0619 	add.w	r6, r4, #25
 80106b4:	e7f5      	b.n	80106a2 <_printf_i+0x22e>
 80106b6:	bf00      	nop
 80106b8:	08011cb2 	.word	0x08011cb2
 80106bc:	08011cc3 	.word	0x08011cc3

080106c0 <memmove>:
 80106c0:	4288      	cmp	r0, r1
 80106c2:	b510      	push	{r4, lr}
 80106c4:	eb01 0402 	add.w	r4, r1, r2
 80106c8:	d902      	bls.n	80106d0 <memmove+0x10>
 80106ca:	4284      	cmp	r4, r0
 80106cc:	4623      	mov	r3, r4
 80106ce:	d807      	bhi.n	80106e0 <memmove+0x20>
 80106d0:	1e43      	subs	r3, r0, #1
 80106d2:	42a1      	cmp	r1, r4
 80106d4:	d008      	beq.n	80106e8 <memmove+0x28>
 80106d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80106da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80106de:	e7f8      	b.n	80106d2 <memmove+0x12>
 80106e0:	4402      	add	r2, r0
 80106e2:	4601      	mov	r1, r0
 80106e4:	428a      	cmp	r2, r1
 80106e6:	d100      	bne.n	80106ea <memmove+0x2a>
 80106e8:	bd10      	pop	{r4, pc}
 80106ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80106ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80106f2:	e7f7      	b.n	80106e4 <memmove+0x24>

080106f4 <_realloc_r>:
 80106f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106f8:	4680      	mov	r8, r0
 80106fa:	4614      	mov	r4, r2
 80106fc:	460e      	mov	r6, r1
 80106fe:	b921      	cbnz	r1, 801070a <_realloc_r+0x16>
 8010700:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010704:	4611      	mov	r1, r2
 8010706:	f7ff bac9 	b.w	800fc9c <_malloc_r>
 801070a:	b92a      	cbnz	r2, 8010718 <_realloc_r+0x24>
 801070c:	f7ff fc9c 	bl	8010048 <_free_r>
 8010710:	4625      	mov	r5, r4
 8010712:	4628      	mov	r0, r5
 8010714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010718:	f000 f81b 	bl	8010752 <_malloc_usable_size_r>
 801071c:	4284      	cmp	r4, r0
 801071e:	4607      	mov	r7, r0
 8010720:	d802      	bhi.n	8010728 <_realloc_r+0x34>
 8010722:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010726:	d812      	bhi.n	801074e <_realloc_r+0x5a>
 8010728:	4621      	mov	r1, r4
 801072a:	4640      	mov	r0, r8
 801072c:	f7ff fab6 	bl	800fc9c <_malloc_r>
 8010730:	4605      	mov	r5, r0
 8010732:	2800      	cmp	r0, #0
 8010734:	d0ed      	beq.n	8010712 <_realloc_r+0x1e>
 8010736:	42bc      	cmp	r4, r7
 8010738:	4622      	mov	r2, r4
 801073a:	4631      	mov	r1, r6
 801073c:	bf28      	it	cs
 801073e:	463a      	movcs	r2, r7
 8010740:	f7ff fa76 	bl	800fc30 <memcpy>
 8010744:	4631      	mov	r1, r6
 8010746:	4640      	mov	r0, r8
 8010748:	f7ff fc7e 	bl	8010048 <_free_r>
 801074c:	e7e1      	b.n	8010712 <_realloc_r+0x1e>
 801074e:	4635      	mov	r5, r6
 8010750:	e7df      	b.n	8010712 <_realloc_r+0x1e>

08010752 <_malloc_usable_size_r>:
 8010752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010756:	1f18      	subs	r0, r3, #4
 8010758:	2b00      	cmp	r3, #0
 801075a:	bfbc      	itt	lt
 801075c:	580b      	ldrlt	r3, [r1, r0]
 801075e:	18c0      	addlt	r0, r0, r3
 8010760:	4770      	bx	lr

08010762 <atan2f>:
 8010762:	f000 b81f 	b.w	80107a4 <__ieee754_atan2f>
	...

08010768 <sqrtf>:
 8010768:	b508      	push	{r3, lr}
 801076a:	ed2d 8b02 	vpush	{d8}
 801076e:	eeb0 8a40 	vmov.f32	s16, s0
 8010772:	f000 f8b7 	bl	80108e4 <__ieee754_sqrtf>
 8010776:	eeb4 8a48 	vcmp.f32	s16, s16
 801077a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801077e:	d60c      	bvs.n	801079a <sqrtf+0x32>
 8010780:	eddf 8a07 	vldr	s17, [pc, #28]	; 80107a0 <sqrtf+0x38>
 8010784:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801078c:	d505      	bpl.n	801079a <sqrtf+0x32>
 801078e:	f7ff fa23 	bl	800fbd8 <__errno>
 8010792:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010796:	2321      	movs	r3, #33	; 0x21
 8010798:	6003      	str	r3, [r0, #0]
 801079a:	ecbd 8b02 	vpop	{d8}
 801079e:	bd08      	pop	{r3, pc}
 80107a0:	00000000 	.word	0x00000000

080107a4 <__ieee754_atan2f>:
 80107a4:	ee10 2a90 	vmov	r2, s1
 80107a8:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80107ac:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80107b0:	b510      	push	{r4, lr}
 80107b2:	eef0 7a40 	vmov.f32	s15, s0
 80107b6:	dc06      	bgt.n	80107c6 <__ieee754_atan2f+0x22>
 80107b8:	ee10 0a10 	vmov	r0, s0
 80107bc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80107c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80107c4:	dd04      	ble.n	80107d0 <__ieee754_atan2f+0x2c>
 80107c6:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80107ca:	eeb0 0a67 	vmov.f32	s0, s15
 80107ce:	bd10      	pop	{r4, pc}
 80107d0:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80107d4:	d103      	bne.n	80107de <__ieee754_atan2f+0x3a>
 80107d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107da:	f000 b887 	b.w	80108ec <atanf>
 80107de:	1794      	asrs	r4, r2, #30
 80107e0:	f004 0402 	and.w	r4, r4, #2
 80107e4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80107e8:	b943      	cbnz	r3, 80107fc <__ieee754_atan2f+0x58>
 80107ea:	2c02      	cmp	r4, #2
 80107ec:	d05e      	beq.n	80108ac <__ieee754_atan2f+0x108>
 80107ee:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80108c0 <__ieee754_atan2f+0x11c>
 80107f2:	2c03      	cmp	r4, #3
 80107f4:	bf08      	it	eq
 80107f6:	eef0 7a47 	vmoveq.f32	s15, s14
 80107fa:	e7e6      	b.n	80107ca <__ieee754_atan2f+0x26>
 80107fc:	b941      	cbnz	r1, 8010810 <__ieee754_atan2f+0x6c>
 80107fe:	eddf 7a31 	vldr	s15, [pc, #196]	; 80108c4 <__ieee754_atan2f+0x120>
 8010802:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80108c8 <__ieee754_atan2f+0x124>
 8010806:	2800      	cmp	r0, #0
 8010808:	bfb8      	it	lt
 801080a:	eef0 7a40 	vmovlt.f32	s15, s0
 801080e:	e7dc      	b.n	80107ca <__ieee754_atan2f+0x26>
 8010810:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010814:	d110      	bne.n	8010838 <__ieee754_atan2f+0x94>
 8010816:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801081a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801081e:	d107      	bne.n	8010830 <__ieee754_atan2f+0x8c>
 8010820:	2c02      	cmp	r4, #2
 8010822:	d846      	bhi.n	80108b2 <__ieee754_atan2f+0x10e>
 8010824:	4b29      	ldr	r3, [pc, #164]	; (80108cc <__ieee754_atan2f+0x128>)
 8010826:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801082a:	edd4 7a00 	vldr	s15, [r4]
 801082e:	e7cc      	b.n	80107ca <__ieee754_atan2f+0x26>
 8010830:	2c02      	cmp	r4, #2
 8010832:	d841      	bhi.n	80108b8 <__ieee754_atan2f+0x114>
 8010834:	4b26      	ldr	r3, [pc, #152]	; (80108d0 <__ieee754_atan2f+0x12c>)
 8010836:	e7f6      	b.n	8010826 <__ieee754_atan2f+0x82>
 8010838:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801083c:	d0df      	beq.n	80107fe <__ieee754_atan2f+0x5a>
 801083e:	1a5b      	subs	r3, r3, r1
 8010840:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8010844:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010848:	da1a      	bge.n	8010880 <__ieee754_atan2f+0xdc>
 801084a:	2a00      	cmp	r2, #0
 801084c:	da01      	bge.n	8010852 <__ieee754_atan2f+0xae>
 801084e:	313c      	adds	r1, #60	; 0x3c
 8010850:	db19      	blt.n	8010886 <__ieee754_atan2f+0xe2>
 8010852:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010856:	f000 f91d 	bl	8010a94 <fabsf>
 801085a:	f000 f847 	bl	80108ec <atanf>
 801085e:	eef0 7a40 	vmov.f32	s15, s0
 8010862:	2c01      	cmp	r4, #1
 8010864:	d012      	beq.n	801088c <__ieee754_atan2f+0xe8>
 8010866:	2c02      	cmp	r4, #2
 8010868:	d017      	beq.n	801089a <__ieee754_atan2f+0xf6>
 801086a:	2c00      	cmp	r4, #0
 801086c:	d0ad      	beq.n	80107ca <__ieee754_atan2f+0x26>
 801086e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80108d4 <__ieee754_atan2f+0x130>
 8010872:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010876:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80108d8 <__ieee754_atan2f+0x134>
 801087a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801087e:	e7a4      	b.n	80107ca <__ieee754_atan2f+0x26>
 8010880:	eddf 7a10 	vldr	s15, [pc, #64]	; 80108c4 <__ieee754_atan2f+0x120>
 8010884:	e7ed      	b.n	8010862 <__ieee754_atan2f+0xbe>
 8010886:	eddf 7a15 	vldr	s15, [pc, #84]	; 80108dc <__ieee754_atan2f+0x138>
 801088a:	e7ea      	b.n	8010862 <__ieee754_atan2f+0xbe>
 801088c:	ee17 3a90 	vmov	r3, s15
 8010890:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010894:	ee07 3a90 	vmov	s15, r3
 8010898:	e797      	b.n	80107ca <__ieee754_atan2f+0x26>
 801089a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80108d4 <__ieee754_atan2f+0x130>
 801089e:	ee77 7a80 	vadd.f32	s15, s15, s0
 80108a2:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80108d8 <__ieee754_atan2f+0x134>
 80108a6:	ee70 7a67 	vsub.f32	s15, s0, s15
 80108aa:	e78e      	b.n	80107ca <__ieee754_atan2f+0x26>
 80108ac:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80108d8 <__ieee754_atan2f+0x134>
 80108b0:	e78b      	b.n	80107ca <__ieee754_atan2f+0x26>
 80108b2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80108e0 <__ieee754_atan2f+0x13c>
 80108b6:	e788      	b.n	80107ca <__ieee754_atan2f+0x26>
 80108b8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80108dc <__ieee754_atan2f+0x138>
 80108bc:	e785      	b.n	80107ca <__ieee754_atan2f+0x26>
 80108be:	bf00      	nop
 80108c0:	c0490fdb 	.word	0xc0490fdb
 80108c4:	3fc90fdb 	.word	0x3fc90fdb
 80108c8:	bfc90fdb 	.word	0xbfc90fdb
 80108cc:	08011cd4 	.word	0x08011cd4
 80108d0:	08011ce0 	.word	0x08011ce0
 80108d4:	33bbbd2e 	.word	0x33bbbd2e
 80108d8:	40490fdb 	.word	0x40490fdb
 80108dc:	00000000 	.word	0x00000000
 80108e0:	3f490fdb 	.word	0x3f490fdb

080108e4 <__ieee754_sqrtf>:
 80108e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80108e8:	4770      	bx	lr
	...

080108ec <atanf>:
 80108ec:	b538      	push	{r3, r4, r5, lr}
 80108ee:	ee10 5a10 	vmov	r5, s0
 80108f2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80108f6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 80108fa:	eef0 7a40 	vmov.f32	s15, s0
 80108fe:	db10      	blt.n	8010922 <atanf+0x36>
 8010900:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8010904:	dd04      	ble.n	8010910 <atanf+0x24>
 8010906:	ee70 7a00 	vadd.f32	s15, s0, s0
 801090a:	eeb0 0a67 	vmov.f32	s0, s15
 801090e:	bd38      	pop	{r3, r4, r5, pc}
 8010910:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8010a48 <atanf+0x15c>
 8010914:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8010a4c <atanf+0x160>
 8010918:	2d00      	cmp	r5, #0
 801091a:	bfd8      	it	le
 801091c:	eef0 7a40 	vmovle.f32	s15, s0
 8010920:	e7f3      	b.n	801090a <atanf+0x1e>
 8010922:	4b4b      	ldr	r3, [pc, #300]	; (8010a50 <atanf+0x164>)
 8010924:	429c      	cmp	r4, r3
 8010926:	dc10      	bgt.n	801094a <atanf+0x5e>
 8010928:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 801092c:	da0a      	bge.n	8010944 <atanf+0x58>
 801092e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010a54 <atanf+0x168>
 8010932:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801093a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801093e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010942:	dce2      	bgt.n	801090a <atanf+0x1e>
 8010944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010948:	e013      	b.n	8010972 <atanf+0x86>
 801094a:	f000 f8a3 	bl	8010a94 <fabsf>
 801094e:	4b42      	ldr	r3, [pc, #264]	; (8010a58 <atanf+0x16c>)
 8010950:	429c      	cmp	r4, r3
 8010952:	dc4f      	bgt.n	80109f4 <atanf+0x108>
 8010954:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8010958:	429c      	cmp	r4, r3
 801095a:	dc41      	bgt.n	80109e0 <atanf+0xf4>
 801095c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010960:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010964:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010968:	2300      	movs	r3, #0
 801096a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801096e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010972:	1c5a      	adds	r2, r3, #1
 8010974:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010978:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010a5c <atanf+0x170>
 801097c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8010a60 <atanf+0x174>
 8010980:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8010a64 <atanf+0x178>
 8010984:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010988:	eee6 5a87 	vfma.f32	s11, s13, s14
 801098c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8010a68 <atanf+0x17c>
 8010990:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010994:	eddf 5a35 	vldr	s11, [pc, #212]	; 8010a6c <atanf+0x180>
 8010998:	eee7 5a26 	vfma.f32	s11, s14, s13
 801099c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010a70 <atanf+0x184>
 80109a0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80109a4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010a74 <atanf+0x188>
 80109a8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80109ac:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8010a78 <atanf+0x18c>
 80109b0:	eea6 5a87 	vfma.f32	s10, s13, s14
 80109b4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8010a7c <atanf+0x190>
 80109b8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80109bc:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8010a80 <atanf+0x194>
 80109c0:	eea7 5a26 	vfma.f32	s10, s14, s13
 80109c4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8010a84 <atanf+0x198>
 80109c8:	eea5 7a26 	vfma.f32	s14, s10, s13
 80109cc:	ee27 7a26 	vmul.f32	s14, s14, s13
 80109d0:	eea5 7a86 	vfma.f32	s14, s11, s12
 80109d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80109d8:	d121      	bne.n	8010a1e <atanf+0x132>
 80109da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80109de:	e794      	b.n	801090a <atanf+0x1e>
 80109e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80109e4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80109e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80109ec:	2301      	movs	r3, #1
 80109ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80109f2:	e7be      	b.n	8010972 <atanf+0x86>
 80109f4:	4b24      	ldr	r3, [pc, #144]	; (8010a88 <atanf+0x19c>)
 80109f6:	429c      	cmp	r4, r3
 80109f8:	dc0b      	bgt.n	8010a12 <atanf+0x126>
 80109fa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 80109fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010a02:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010a06:	2302      	movs	r3, #2
 8010a08:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a10:	e7af      	b.n	8010972 <atanf+0x86>
 8010a12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010a16:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010a1a:	2303      	movs	r3, #3
 8010a1c:	e7a9      	b.n	8010972 <atanf+0x86>
 8010a1e:	4a1b      	ldr	r2, [pc, #108]	; (8010a8c <atanf+0x1a0>)
 8010a20:	491b      	ldr	r1, [pc, #108]	; (8010a90 <atanf+0x1a4>)
 8010a22:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010a26:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010a2a:	ed93 0a00 	vldr	s0, [r3]
 8010a2e:	ee37 7a40 	vsub.f32	s14, s14, s0
 8010a32:	ed92 0a00 	vldr	s0, [r2]
 8010a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a3a:	2d00      	cmp	r5, #0
 8010a3c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010a40:	bfb8      	it	lt
 8010a42:	eef1 7a67 	vneglt.f32	s15, s15
 8010a46:	e760      	b.n	801090a <atanf+0x1e>
 8010a48:	3fc90fdb 	.word	0x3fc90fdb
 8010a4c:	bfc90fdb 	.word	0xbfc90fdb
 8010a50:	3edfffff 	.word	0x3edfffff
 8010a54:	7149f2ca 	.word	0x7149f2ca
 8010a58:	3f97ffff 	.word	0x3f97ffff
 8010a5c:	3c8569d7 	.word	0x3c8569d7
 8010a60:	3d4bda59 	.word	0x3d4bda59
 8010a64:	bd6ef16b 	.word	0xbd6ef16b
 8010a68:	3d886b35 	.word	0x3d886b35
 8010a6c:	3dba2e6e 	.word	0x3dba2e6e
 8010a70:	3e124925 	.word	0x3e124925
 8010a74:	3eaaaaab 	.word	0x3eaaaaab
 8010a78:	bd15a221 	.word	0xbd15a221
 8010a7c:	bd9d8795 	.word	0xbd9d8795
 8010a80:	bde38e38 	.word	0xbde38e38
 8010a84:	be4ccccd 	.word	0xbe4ccccd
 8010a88:	401bffff 	.word	0x401bffff
 8010a8c:	08011cec 	.word	0x08011cec
 8010a90:	08011cfc 	.word	0x08011cfc

08010a94 <fabsf>:
 8010a94:	ee10 3a10 	vmov	r3, s0
 8010a98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010a9c:	ee00 3a10 	vmov	s0, r3
 8010aa0:	4770      	bx	lr
	...

08010aa4 <_init>:
 8010aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010aa6:	bf00      	nop
 8010aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010aaa:	bc08      	pop	{r3}
 8010aac:	469e      	mov	lr, r3
 8010aae:	4770      	bx	lr

08010ab0 <_fini>:
 8010ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ab2:	bf00      	nop
 8010ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ab6:	bc08      	pop	{r3}
 8010ab8:	469e      	mov	lr, r3
 8010aba:	4770      	bx	lr
