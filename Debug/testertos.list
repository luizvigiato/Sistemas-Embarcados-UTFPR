
testertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000caec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  0800cc8c  0800cc8c  0001cc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf78  0800cf78  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf78  0800cf78  0001cf78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf80  0800cf80  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf80  0800cf80  0001cf80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf84  0800cf84  0001cf84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800cf88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ac7c  20000170  0800d0f8  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000adec  0800d0f8  0002adec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e094  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b5d  00000000  00000000  0003e234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00042d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001470  00000000  00000000  00044400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008d3b  00000000  00000000  00045870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b1d1  00000000  00000000  0004e5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ef39  00000000  00000000  0006977c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001086b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006148  00000000  00000000  00108708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000170 	.word	0x20000170
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cc74 	.word	0x0800cc74

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000174 	.word	0x20000174
 80001dc:	0800cc74 	.word	0x0800cc74

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 800059c:	2300      	movs	r3, #0
 800059e:	617b      	str	r3, [r7, #20]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d10a      	bne.n	80005bc <FreeRTOS_CLIRegisterCommand+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80005b8:	bf00      	nop
 80005ba:	e7fe      	b.n	80005ba <FreeRTOS_CLIRegisterCommand+0x26>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 80005bc:	2008      	movs	r0, #8
 80005be:	f00a fe93 	bl	800b2e8 <pvPortMalloc>
 80005c2:	6138      	str	r0, [r7, #16]
	configASSERT( pxNewListItem );
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d10a      	bne.n	80005e0 <FreeRTOS_CLIRegisterCommand+0x4c>
	__asm volatile
 80005ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005ce:	f383 8811 	msr	BASEPRI, r3
 80005d2:	f3bf 8f6f 	isb	sy
 80005d6:	f3bf 8f4f 	dsb	sy
 80005da:	60bb      	str	r3, [r7, #8]
}
 80005dc:	bf00      	nop
 80005de:	e7fe      	b.n	80005de <FreeRTOS_CLIRegisterCommand+0x4a>

	if( pxNewListItem != NULL )
 80005e0:	693b      	ldr	r3, [r7, #16]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d012      	beq.n	800060c <FreeRTOS_CLIRegisterCommand+0x78>
	{
		taskENTER_CRITICAL();
 80005e6:	f00a fd5d 	bl	800b0a4 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 80005ea:	693b      	ldr	r3, [r7, #16]
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <FreeRTOS_CLIRegisterCommand+0x84>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	693a      	ldr	r2, [r7, #16]
 80005fc:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 80005fe:	4a06      	ldr	r2, [pc, #24]	; (8000618 <FreeRTOS_CLIRegisterCommand+0x84>)
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 8000604:	f00a fd7e 	bl	800b104 <vPortExitCritical>

		xReturn = pdPASS;
 8000608:	2301      	movs	r3, #1
 800060a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800060c:	697b      	ldr	r3, [r7, #20]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3718      	adds	r7, #24
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000008 	.word	0x20000008

0800061c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8000628:	2301      	movs	r3, #1
 800062a:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 800062c:	4b3a      	ldr	r3, [pc, #232]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d141      	bne.n	80006b8 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000634:	4b38      	ldr	r3, [pc, #224]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000636:	4a39      	ldr	r2, [pc, #228]	; (800071c <FreeRTOS_CLIProcessCommand+0x100>)
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	e037      	b.n	80006ac <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800063c:	4b36      	ldr	r3, [pc, #216]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8000646:	69b8      	ldr	r0, [r7, #24]
 8000648:	f7ff fdca 	bl	80001e0 <strlen>
 800064c:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800064e:	697a      	ldr	r2, [r7, #20]
 8000650:	69b9      	ldr	r1, [r7, #24]
 8000652:	68f8      	ldr	r0, [r7, #12]
 8000654:	f00b ff4c 	bl	800c4f0 <strncmp>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d121      	bne.n	80006a2 <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	697b      	ldr	r3, [r7, #20]
 8000662:	4413      	add	r3, r2
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b20      	cmp	r3, #32
 8000668:	d005      	beq.n	8000676 <FreeRTOS_CLIProcessCommand+0x5a>
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	4413      	add	r3, r2
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d115      	bne.n	80006a2 <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8000676:	4b28      	ldr	r3, [pc, #160]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000680:	2b00      	cmp	r3, #0
 8000682:	db18      	blt.n	80006b6 <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f000 f87d 	bl	8000784 <prvGetNumberOfParameters>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	4b22      	ldr	r3, [pc, #136]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d00c      	beq.n	80006b6 <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 800069c:	2300      	movs	r3, #0
 800069e:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 80006a0:	e009      	b.n	80006b6 <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80006a2:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006aa:	6013      	str	r3, [r2, #0]
 80006ac:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1c3      	bne.n	800063c <FreeRTOS_CLIProcessCommand+0x20>
 80006b4:	e000      	b.n	80006b8 <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 80006b6:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d00b      	beq.n	80006d8 <FreeRTOS_CLIProcessCommand+0xbc>
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d108      	bne.n	80006d8 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4915      	ldr	r1, [pc, #84]	; (8000720 <FreeRTOS_CLIProcessCommand+0x104>)
 80006ca:	68b8      	ldr	r0, [r7, #8]
 80006cc:	f00b ff24 	bl	800c518 <strncpy>
		pxCommand = NULL;
 80006d0:	4b11      	ldr	r3, [pc, #68]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	e01a      	b.n	800070e <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 80006d8:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d00f      	beq.n	8000700 <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	68b8      	ldr	r0, [r7, #8]
 80006ee:	4798      	blx	r3
 80006f0:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d10a      	bne.n	800070e <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 80006f8:	4b07      	ldr	r3, [pc, #28]	; (8000718 <FreeRTOS_CLIProcessCommand+0xfc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	e006      	b.n	800070e <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4908      	ldr	r1, [pc, #32]	; (8000724 <FreeRTOS_CLIProcessCommand+0x108>)
 8000704:	68b8      	ldr	r0, [r7, #8]
 8000706:	f00b ff07 	bl	800c518 <strncpy>
		xReturn = pdFALSE;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 800070e:	69fb      	ldr	r3, [r7, #28]
}
 8000710:	4618      	mov	r0, r3
 8000712:	3720      	adds	r7, #32
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2000018c 	.word	0x2000018c
 800071c:	20000000 	.word	0x20000000
 8000720:	0800ccc4 	.word	0x0800ccc4
 8000724:	0800cd1c 	.word	0x0800cd1c

08000728 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <prvHelpCommand+0x54>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <prvHelpCommand+0x54>)
 800073e:	4a10      	ldr	r2, [pc, #64]	; (8000780 <prvHelpCommand+0x58>)
 8000740:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <prvHelpCommand+0x54>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	4619      	mov	r1, r3
 800074e:	68f8      	ldr	r0, [r7, #12]
 8000750:	f00b fee2 	bl	800c518 <strncpy>
	pxCommand = pxCommand->pxNext;
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <prvHelpCommand+0x54>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <prvHelpCommand+0x54>)
 800075c:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 800075e:	4b07      	ldr	r3, [pc, #28]	; (800077c <prvHelpCommand+0x54>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d102      	bne.n	800076c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	e001      	b.n	8000770 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 800076c:	2301      	movs	r3, #1
 800076e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8000770:	697b      	ldr	r3, [r7, #20]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000190 	.word	0x20000190
 8000780:	20000000 	.word	0x20000000

08000784 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8000794:	e014      	b.n	80007c0 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b20      	cmp	r3, #32
 800079c:	d10b      	bne.n	80007b6 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d00a      	beq.n	80007ba <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 80007a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	3301      	adds	r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 80007b0:	2301      	movs	r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	e001      	b.n	80007ba <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	3301      	adds	r3, #1
 80007be:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1e6      	bne.n	8000796 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d105      	bne.n	80007da <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	3b01      	subs	r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 80007da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <task_led>:
	int timeout;
}led_t;

led_t green_led;

void task_led(void *param){
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b084      	sub	sp, #16
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *)param;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(led->port,led->pin);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	889b      	ldrh	r3, [r3, #4]
 80007fe:	4619      	mov	r1, r3
 8000800:	4610      	mov	r0, r2
 8000802:	f001 fc08 	bl	8002016 <HAL_GPIO_TogglePin>
		vTaskDelay(led->timeout);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	4618      	mov	r0, r3
 800080c:	f008 fca8 	bl	8009160 <vTaskDelay>
		HAL_GPIO_TogglePin(led->port,led->pin);
 8000810:	e7f1      	b.n	80007f6 <task_led+0xc>
	...

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f000 fb6b 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f837 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000822:	f000 f913 	bl	8000a4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000826:	f000 f8f1 	bl	8000a0c <MX_DMA_Init>
  MX_ADC1_Init();
 800082a:	f000 f89d 	bl	8000968 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800082e:	f006 ff03 	bl	8007638 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000832:	4a10      	ldr	r2, [pc, #64]	; (8000874 <main+0x60>)
 8000834:	2100      	movs	r1, #0
 8000836:	4810      	ldr	r0, [pc, #64]	; (8000878 <main+0x64>)
 8000838:	f006 ff48 	bl	80076cc <osThreadNew>
 800083c:	4603      	mov	r3, r0
 800083e:	4a0f      	ldr	r2, [pc, #60]	; (800087c <main+0x68>)
 8000840:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  green_led.timeout = 500;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <main+0x6c>)
 8000844:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000848:	609a      	str	r2, [r3, #8]
  green_led.port = LED_GPIO_Port;
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <main+0x6c>)
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <main+0x70>)
 800084e:	601a      	str	r2, [r3, #0]
  green_led.pin = LED_Pin;
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <main+0x6c>)
 8000852:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000856:	809a      	strh	r2, [r3, #4]
  xTaskCreate(task_led,"Tarefa Led",256, &green_led, 1, NULL);
 8000858:	2300      	movs	r3, #0
 800085a:	9301      	str	r3, [sp, #4]
 800085c:	2301      	movs	r3, #1
 800085e:	9300      	str	r3, [sp, #0]
 8000860:	4b07      	ldr	r3, [pc, #28]	; (8000880 <main+0x6c>)
 8000862:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000866:	4908      	ldr	r1, [pc, #32]	; (8000888 <main+0x74>)
 8000868:	4808      	ldr	r0, [pc, #32]	; (800088c <main+0x78>)
 800086a:	f008 fb1e 	bl	8008eaa <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800086e:	f006 ff07 	bl	8007680 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000872:	e7fe      	b.n	8000872 <main+0x5e>
 8000874:	0800ce98 	.word	0x0800ce98
 8000878:	08000b45 	.word	0x08000b45
 800087c:	2000023c 	.word	0x2000023c
 8000880:	20000240 	.word	0x20000240
 8000884:	40020800 	.word	0x40020800
 8000888:	0800cd8c 	.word	0x0800cd8c
 800088c:	080007eb 	.word	0x080007eb

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b094      	sub	sp, #80	; 0x50
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0320 	add.w	r3, r7, #32
 800089a:	2230      	movs	r2, #48	; 0x30
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f00b fce8 	bl	800c274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	4b29      	ldr	r3, [pc, #164]	; (8000960 <SystemClock_Config+0xd0>)
 80008ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008bc:	4a28      	ldr	r2, [pc, #160]	; (8000960 <SystemClock_Config+0xd0>)
 80008be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c2:	6413      	str	r3, [r2, #64]	; 0x40
 80008c4:	4b26      	ldr	r3, [pc, #152]	; (8000960 <SystemClock_Config+0xd0>)
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008cc:	60bb      	str	r3, [r7, #8]
 80008ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	4b23      	ldr	r3, [pc, #140]	; (8000964 <SystemClock_Config+0xd4>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008dc:	4a21      	ldr	r2, [pc, #132]	; (8000964 <SystemClock_Config+0xd4>)
 80008de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <SystemClock_Config+0xd4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000904:	2319      	movs	r3, #25
 8000906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000908:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800090c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800090e:	2304      	movs	r3, #4
 8000910:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000912:	2307      	movs	r3, #7
 8000914:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	4618      	mov	r0, r3
 800091c:	f002 fe12 	bl	8003544 <HAL_RCC_OscConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000926:	f000 f993 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092a:	230f      	movs	r3, #15
 800092c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800092e:	2302      	movs	r3, #2
 8000930:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	2102      	movs	r1, #2
 8000946:	4618      	mov	r0, r3
 8000948:	f003 f874 	bl	8003a34 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000952:	f000 f97d 	bl	8000c50 <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3750      	adds	r7, #80	; 0x50
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40007000 	.word	0x40007000

08000968 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800096e:	463b      	mov	r3, r7
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800097a:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <MX_ADC1_Init+0x98>)
 800097c:	4a21      	ldr	r2, [pc, #132]	; (8000a04 <MX_ADC1_Init+0x9c>)
 800097e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000980:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <MX_ADC1_Init+0x98>)
 8000982:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000986:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000988:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <MX_ADC1_Init+0x98>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800098e:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <MX_ADC1_Init+0x98>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_ADC1_Init+0x98>)
 8000996:	2200      	movs	r2, #0
 8000998:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_ADC1_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MX_ADC1_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_ADC1_Init+0x98>)
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <MX_ADC1_Init+0xa0>)
 80009ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ae:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_ADC1_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_ADC1_Init+0x98>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_ADC1_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_ADC1_Init+0x98>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_ADC1_Init+0x98>)
 80009ca:	f000 fb29 	bl	8001020 <HAL_ADC_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009d4:	f000 f93c 	bl	8000c50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80009d8:	2308      	movs	r3, #8
 80009da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009dc:	2301      	movs	r3, #1
 80009de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_ADC1_Init+0x98>)
 80009ea:	f000 fb5d 	bl	80010a8 <HAL_ADC_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009f4:	f000 f92c 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	20000194 	.word	0x20000194
 8000a04:	40012000 	.word	0x40012000
 8000a08:	0f000001 	.word	0x0f000001

08000a0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_DMA_Init+0x3c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <MX_DMA_Init+0x3c>)
 8000a1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_DMA_Init+0x3c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2105      	movs	r1, #5
 8000a32:	2038      	movs	r0, #56	; 0x38
 8000a34:	f000 fe31 	bl	800169a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a38:	2038      	movs	r0, #56	; 0x38
 8000a3a:	f000 fe4a 	bl	80016d2 <HAL_NVIC_EnableIRQ>

}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0314 	add.w	r3, r7, #20
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <MX_GPIO_Init+0xb8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a26      	ldr	r2, [pc, #152]	; (8000b04 <MX_GPIO_Init+0xb8>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <MX_GPIO_Init+0xb8>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <MX_GPIO_Init+0xb8>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a1f      	ldr	r2, [pc, #124]	; (8000b04 <MX_GPIO_Init+0xb8>)
 8000a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <MX_GPIO_Init+0xb8>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <MX_GPIO_Init+0xb8>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa2:	4a18      	ldr	r2, [pc, #96]	; (8000b04 <MX_GPIO_Init+0xb8>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aaa:	4b16      	ldr	r3, [pc, #88]	; (8000b04 <MX_GPIO_Init+0xb8>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_GPIO_Init+0xb8>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <MX_GPIO_Init+0xb8>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_GPIO_Init+0xb8>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <MX_GPIO_Init+0xbc>)
 8000ada:	f001 fa83 	bl	8001fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ade:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4619      	mov	r1, r3
 8000af6:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_GPIO_Init+0xbc>)
 8000af8:	f001 f8f0 	bl	8001cdc <HAL_GPIO_Init>

}
 8000afc:	bf00      	nop
 8000afe:	3728      	adds	r7, #40	; 0x28
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020800 	.word	0x40020800

08000b0c <prvTaskStatsCommand>:
//uint8_t buffer[128];
uint32_t len;

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout);

static BaseType_t prvTaskStatsCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]


        /* For simplicity, this function assumes the output buffer is large enough
        to hold all the text generated by executing the vTaskList() API function,
        so the xWriteBufferLen parameter is not used. */
        char *head = "Name\t\tState  Priority  Stack  Number\n\r";
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <prvTaskStatsCommand+0x34>)
 8000b1a:	617b      	str	r3, [r7, #20]
        ( void ) xWriteBufferLen;

        /* pcWriteBuffer is used directly as the vTaskList() parameter, so the table
        generated by executing vTaskList() is written directly into the output
        buffer. */
        strcpy(pcWriteBuffer, head);
 8000b1c:	6979      	ldr	r1, [r7, #20]
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f00b fcde 	bl	800c4e0 <strcpy>
        vTaskList( pcWriteBuffer + strlen(head));
 8000b24:	6978      	ldr	r0, [r7, #20]
 8000b26:	f7ff fb5b 	bl	80001e0 <strlen>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4618      	mov	r0, r3
 8000b32:	f009 fb19 	bl	800a168 <vTaskList>

        /* The entire table was written directly to the output buffer.  Execution
        of this command is complete, so return pdFALSE. */
        return pdFALSE;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	0800cd98 	.word	0x0800cd98

08000b44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08e      	sub	sp, #56	; 0x38
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000b4c:	f00a fdb6 	bl	800b6bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 8000b50:	f00a fde4 	bl	800b71c <init_usb_rtos_obj>

  static uint8_t pcOutputString[ MAX_OUTPUT_LENGTH ], pcInputString[ MAX_INPUT_LENGTH ];

  FreeRTOS_CLIRegisterCommand( &xTasksCommand );
 8000b54:	4838      	ldr	r0, [pc, #224]	; (8000c38 <StartDefaultTask+0xf4>)
 8000b56:	f7ff fd1d 	bl	8000594 <FreeRTOS_CLIRegisterCommand>
  BaseType_t xMoreDataToFollow;
  uint8_t cRxedChar, buffer[32], cInputIndex = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  /*char data;
	  CDC_Receiveq_MS(&data,portMAX_DELAY);
	  (void) CDC_Transmit_FS((uint8_t *) "\n\r",2);
	  (void) CDC_Transmit_FS((uint8_t *) &data,1);*/

		(void)read_usb_cdc((char *)buffer, 32, portMAX_DELAY);
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b68:	2120      	movs	r1, #32
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f00a fdf4 	bl	800b758 <read_usb_cdc>
		cRxedChar = buffer[0];
 8000b70:	7b3b      	ldrb	r3, [r7, #12]
 8000b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if( cRxedChar == '\r' ){
 8000b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b7a:	2b0d      	cmp	r3, #13
 8000b7c:	d123      	bne.n	8000bc6 <StartDefaultTask+0x82>
			/*
			 * Entra quando finalizado envio de comando
			 */
			CDC_Transmit_FS((uint8_t *)"\n\r", 2);
 8000b7e:	2102      	movs	r1, #2
 8000b80:	482e      	ldr	r0, [pc, #184]	; (8000c3c <StartDefaultTask+0xf8>)
 8000b82:	f00a fec5 	bl	800b910 <CDC_Transmit_FS>
			 do{
				 /* Send the command string to the command interpreter.  Any
				 output generated by the command interpreter will be placed in the
				 pcOutputString buffer. */
				 xMoreDataToFollow = FreeRTOS_CLIProcessCommand
 8000b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b8a:	492d      	ldr	r1, [pc, #180]	; (8000c40 <StartDefaultTask+0xfc>)
 8000b8c:	482d      	ldr	r0, [pc, #180]	; (8000c44 <StartDefaultTask+0x100>)
 8000b8e:	f7ff fd45 	bl	800061c <FreeRTOS_CLIProcessCommand>
 8000b92:	6338      	str	r0, [r7, #48]	; 0x30
								   MAX_OUTPUT_LENGTH/* The size of the output buffer. */
							   );

				 /* Write the output generated by the command interpreter to the
				 console. */
				 CDC_Transmit_FS((uint8_t *) pcOutputString, strlen((char *) pcOutputString ) );
 8000b94:	482a      	ldr	r0, [pc, #168]	; (8000c40 <StartDefaultTask+0xfc>)
 8000b96:	f7ff fb23 	bl	80001e0 <strlen>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4827      	ldr	r0, [pc, #156]	; (8000c40 <StartDefaultTask+0xfc>)
 8000ba2:	f00a feb5 	bl	800b910 <CDC_Transmit_FS>
			 } while( xMoreDataToFollow != 0 );
 8000ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d1ec      	bne.n	8000b86 <StartDefaultTask+0x42>

			 /* All the strings generated by the input command have been sent.
			 Processing of the command is complete.  Clear the input string ready
			 to receive the next command. */
			 cInputIndex = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			 memset( pcInputString, 0x00, MAX_INPUT_LENGTH );
 8000bb2:	2240      	movs	r2, #64	; 0x40
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4823      	ldr	r0, [pc, #140]	; (8000c44 <StartDefaultTask+0x100>)
 8000bb8:	f00b fb5c 	bl	800c274 <memset>
			 CDC_Transmit_FS((uint8_t *) NewLine, 2);
 8000bbc:	2102      	movs	r1, #2
 8000bbe:	4822      	ldr	r0, [pc, #136]	; (8000c48 <StartDefaultTask+0x104>)
 8000bc0:	f00a fea6 	bl	800b910 <CDC_Transmit_FS>
 8000bc4:	e7cc      	b.n	8000b60 <StartDefaultTask+0x1c>

		} else {
			if( cRxedChar == '\0' ){
 8000bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d104      	bne.n	8000bd8 <StartDefaultTask+0x94>
				CDC_Transmit_FS((uint8_t *) "Welcome to FreeRTOS\n\r# ", strlen((char *)"Welcome to FreeRTOS\n\r# "));
 8000bce:	2117      	movs	r1, #23
 8000bd0:	481e      	ldr	r0, [pc, #120]	; (8000c4c <StartDefaultTask+0x108>)
 8000bd2:	f00a fe9d 	bl	800b910 <CDC_Transmit_FS>
 8000bd6:	e7c3      	b.n	8000b60 <StartDefaultTask+0x1c>
			} else if (cRxedChar == 0x7F ){
 8000bd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8000bde:	d114      	bne.n	8000c0a <StartDefaultTask+0xc6>
				/*
				 * Backspace was pressed.
				 */
				if(cInputIndex > 0){
 8000be0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0bb      	beq.n	8000b60 <StartDefaultTask+0x1c>
					CDC_Transmit_FS(&cRxedChar, 1);
 8000be8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000bec:	2101      	movs	r1, #1
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f00a fe8e 	bl	800b910 <CDC_Transmit_FS>
					cInputIndex--;
 8000bf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pcInputString[ cInputIndex ] = '\0';
 8000bfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c02:	4a10      	ldr	r2, [pc, #64]	; (8000c44 <StartDefaultTask+0x100>)
 8000c04:	2100      	movs	r1, #0
 8000c06:	54d1      	strb	r1, [r2, r3]
 8000c08:	e7aa      	b.n	8000b60 <StartDefaultTask+0x1c>
				}
			} else if(cInputIndex < MAX_INPUT_LENGTH){
 8000c0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c0e:	2b3f      	cmp	r3, #63	; 0x3f
 8000c10:	d8a6      	bhi.n	8000b60 <StartDefaultTask+0x1c>
			/*
			 * Replica digitado para tela
			 */
				CDC_Transmit_FS(&cRxedChar, 1);
 8000c12:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000c16:	2101      	movs	r1, #1
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f00a fe79 	bl	800b910 <CDC_Transmit_FS>
				pcInputString[ cInputIndex ] = cRxedChar;
 8000c1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c22:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8000c26:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <StartDefaultTask+0x100>)
 8000c28:	54d1      	strb	r1, [r2, r3]
				cInputIndex++;
 8000c2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000c2e:	3301      	adds	r3, #1
 8000c30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		(void)read_usb_cdc((char *)buffer, 32, portMAX_DELAY);
 8000c34:	e794      	b.n	8000b60 <StartDefaultTask+0x1c>
 8000c36:	bf00      	nop
 8000c38:	0800cebc 	.word	0x0800cebc
 8000c3c:	0800cdf8 	.word	0x0800cdf8
 8000c40:	2000028c 	.word	0x2000028c
 8000c44:	2000024c 	.word	0x2000024c
 8000c48:	0800cdfc 	.word	0x0800cdfc
 8000c4c:	0800ce00 	.word	0x0800ce00

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <Error_Handler+0x8>
	...

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a11      	ldr	r2, [pc, #68]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	210f      	movs	r1, #15
 8000c9e:	f06f 0001 	mvn.w	r0, #1
 8000ca2:	f000 fcfa 	bl	800169a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a2e      	ldr	r2, [pc, #184]	; (8000d8c <HAL_ADC_MspInit+0xd8>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d156      	bne.n	8000d84 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <HAL_ADC_MspInit+0xdc>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a2c      	ldr	r2, [pc, #176]	; (8000d90 <HAL_ADC_MspInit+0xdc>)
 8000ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b2a      	ldr	r3, [pc, #168]	; (8000d90 <HAL_ADC_MspInit+0xdc>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <HAL_ADC_MspInit+0xdc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <HAL_ADC_MspInit+0xdc>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <HAL_ADC_MspInit+0xdc>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d12:	2303      	movs	r3, #3
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	481c      	ldr	r0, [pc, #112]	; (8000d94 <HAL_ADC_MspInit+0xe0>)
 8000d22:	f000 ffdb 	bl	8001cdc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <HAL_ADC_MspInit+0xe4>)
 8000d28:	4a1c      	ldr	r2, [pc, #112]	; (8000d9c <HAL_ADC_MspInit+0xe8>)
 8000d2a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <HAL_ADC_MspInit+0xe4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_ADC_MspInit+0xe4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_ADC_MspInit+0xe4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_ADC_MspInit+0xe4>)
 8000d40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d44:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_ADC_MspInit+0xe4>)
 8000d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d4c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d4e:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <HAL_ADC_MspInit+0xe4>)
 8000d50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d54:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <HAL_ADC_MspInit+0xe4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_ADC_MspInit+0xe4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_ADC_MspInit+0xe4>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <HAL_ADC_MspInit+0xe4>)
 8000d6a:	f000 fccd 	bl	8001708 <HAL_DMA_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000d74:	f7ff ff6c 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_ADC_MspInit+0xe4>)
 8000d7c:	639a      	str	r2, [r3, #56]	; 0x38
 8000d7e:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_ADC_MspInit+0xe4>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d84:	bf00      	nop
 8000d86:	3728      	adds	r7, #40	; 0x28
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40012000 	.word	0x40012000
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020400 	.word	0x40020400
 8000d98:	200001dc 	.word	0x200001dc
 8000d9c:	40026410 	.word	0x40026410

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f8e2 	bl	8000f98 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000dd4:	f009 f82c 	bl	8009e30 <xTaskGetSchedulerState>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d001      	beq.n	8000de2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dde:	f00a f9f3 	bl	800b1c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <DMA2_Stream0_IRQHandler+0x10>)
 8000dee:	f000 fd39 	bl	8001864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001dc 	.word	0x200001dc

08000dfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <OTG_FS_IRQHandler+0x10>)
 8000e02:	f001 fa72 	bl	80022ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000a6b0 	.word	0x2000a6b0

08000e10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e18:	4a14      	ldr	r2, [pc, #80]	; (8000e6c <_sbrk+0x5c>)
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <_sbrk+0x60>)
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <_sbrk+0x64>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d102      	bne.n	8000e32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e2c:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <_sbrk+0x64>)
 8000e2e:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <_sbrk+0x68>)
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e32:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d207      	bcs.n	8000e50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e40:	f00b f9de 	bl	800c200 <__errno>
 8000e44:	4603      	mov	r3, r0
 8000e46:	220c      	movs	r2, #12
 8000e48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e4e:	e009      	b.n	8000e64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <_sbrk+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e56:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <_sbrk+0x64>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <_sbrk+0x64>)
 8000e60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e62:	68fb      	ldr	r3, [r7, #12]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	20018000 	.word	0x20018000
 8000e70:	00000400 	.word	0x00000400
 8000e74:	2000038c 	.word	0x2000038c
 8000e78:	2000adf0 	.word	0x2000adf0

08000e7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e80:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <SystemInit+0x20>)
 8000e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <SystemInit+0x20>)
 8000e88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea4:	480d      	ldr	r0, [pc, #52]	; (8000edc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ea6:	490e      	ldr	r1, [pc, #56]	; (8000ee0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea8:	4a0e      	ldr	r2, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0b      	ldr	r2, [pc, #44]	; (8000ee8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ebc:	4c0b      	ldr	r4, [pc, #44]	; (8000eec <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eca:	f7ff ffd7 	bl	8000e7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ece:	f00b f99d 	bl	800c20c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed2:	f7ff fc9f 	bl	8000814 <main>
  bx  lr    
 8000ed6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee0:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000ee4:	0800cf88 	.word	0x0800cf88
  ldr r2, =_sbss
 8000ee8:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000eec:	2000adec 	.word	0x2000adec

08000ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef0:	e7fe      	b.n	8000ef0 <ADC_IRQHandler>
	...

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_Init+0x40>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_Init+0x40>)
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x40>)
 8000f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 fbb1 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	200f      	movs	r0, #15
 8000f24:	f000 f808 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f7ff fe98 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fbc9 	bl	80016ee <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f74:	f000 fb91 	bl	800169a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2000000c 	.word	0x2000000c
 8000f90:	20000014 	.word	0x20000014
 8000f94:	20000010 	.word	0x20000010

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000014 	.word	0x20000014
 8000fbc:	20000390 	.word	0x20000390

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000390 	.word	0x20000390

08000fd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe0:	f7ff ffee 	bl	8000fc0 <HAL_GetTick>
 8000fe4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ff0:	d005      	beq.n	8000ffe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	; (800101c <HAL_Delay+0x44>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffe:	bf00      	nop
 8001000:	f7ff ffde 	bl	8000fc0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	68fa      	ldr	r2, [r7, #12]
 800100c:	429a      	cmp	r2, r3
 800100e:	d8f7      	bhi.n	8001000 <HAL_Delay+0x28>
  {
  }
}
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000014 	.word	0x20000014

08001020 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e033      	b.n	800109e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	d109      	bne.n	8001052 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fe38 	bl	8000cb4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	d118      	bne.n	8001090 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001066:	f023 0302 	bic.w	r3, r3, #2
 800106a:	f043 0202 	orr.w	r2, r3, #2
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 f93a 	bl	80012ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f023 0303 	bic.w	r3, r3, #3
 8001086:	f043 0201 	orr.w	r2, r3, #1
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	641a      	str	r2, [r3, #64]	; 0x40
 800108e:	e001      	b.n	8001094 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800109c:	7bfb      	ldrb	r3, [r7, #15]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d101      	bne.n	80010c4 <HAL_ADC_ConfigChannel+0x1c>
 80010c0:	2302      	movs	r3, #2
 80010c2:	e105      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x228>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2201      	movs	r2, #1
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b09      	cmp	r3, #9
 80010d2:	d925      	bls.n	8001120 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68d9      	ldr	r1, [r3, #12]
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29b      	uxth	r3, r3
 80010e0:	461a      	mov	r2, r3
 80010e2:	4613      	mov	r3, r2
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	3b1e      	subs	r3, #30
 80010ea:	2207      	movs	r2, #7
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43da      	mvns	r2, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	400a      	ands	r2, r1
 80010f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68d9      	ldr	r1, [r3, #12]
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	b29b      	uxth	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	4603      	mov	r3, r0
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4403      	add	r3, r0
 8001112:	3b1e      	subs	r3, #30
 8001114:	409a      	lsls	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	e022      	b.n	8001166 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6919      	ldr	r1, [r3, #16]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	b29b      	uxth	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	2207      	movs	r2, #7
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43da      	mvns	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	400a      	ands	r2, r1
 8001142:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6919      	ldr	r1, [r3, #16]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	b29b      	uxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	4603      	mov	r3, r0
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	4403      	add	r3, r0
 800115c:	409a      	lsls	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b06      	cmp	r3, #6
 800116c:	d824      	bhi.n	80011b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	3b05      	subs	r3, #5
 8001180:	221f      	movs	r2, #31
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	400a      	ands	r2, r1
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4618      	mov	r0, r3
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4613      	mov	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	4413      	add	r3, r2
 80011a8:	3b05      	subs	r3, #5
 80011aa:	fa00 f203 	lsl.w	r2, r0, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34
 80011b6:	e04c      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b0c      	cmp	r3, #12
 80011be:	d824      	bhi.n	800120a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	3b23      	subs	r3, #35	; 0x23
 80011d2:	221f      	movs	r2, #31
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43da      	mvns	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	400a      	ands	r2, r1
 80011e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	4413      	add	r3, r2
 80011fa:	3b23      	subs	r3, #35	; 0x23
 80011fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	430a      	orrs	r2, r1
 8001206:	631a      	str	r2, [r3, #48]	; 0x30
 8001208:	e023      	b.n	8001252 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	4613      	mov	r3, r2
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	3b41      	subs	r3, #65	; 0x41
 800121c:	221f      	movs	r2, #31
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43da      	mvns	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	400a      	ands	r2, r1
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	b29b      	uxth	r3, r3
 8001238:	4618      	mov	r0, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	4613      	mov	r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4413      	add	r3, r2
 8001244:	3b41      	subs	r3, #65	; 0x41
 8001246:	fa00 f203 	lsl.w	r2, r0, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <HAL_ADC_ConfigChannel+0x234>)
 8001254:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a21      	ldr	r2, [pc, #132]	; (80012e0 <HAL_ADC_ConfigChannel+0x238>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d109      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x1cc>
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b12      	cmp	r3, #18
 8001266:	d105      	bne.n	8001274 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a19      	ldr	r2, [pc, #100]	; (80012e0 <HAL_ADC_ConfigChannel+0x238>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d123      	bne.n	80012c6 <HAL_ADC_ConfigChannel+0x21e>
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b10      	cmp	r3, #16
 8001284:	d003      	beq.n	800128e <HAL_ADC_ConfigChannel+0x1e6>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b11      	cmp	r3, #17
 800128c:	d11b      	bne.n	80012c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b10      	cmp	r3, #16
 80012a0:	d111      	bne.n	80012c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <HAL_ADC_ConfigChannel+0x23c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <HAL_ADC_ConfigChannel+0x240>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	0c9a      	lsrs	r2, r3, #18
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012b8:	e002      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	3b01      	subs	r3, #1
 80012be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f9      	bne.n	80012ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40012300 	.word	0x40012300
 80012e0:	40012000 	.word	0x40012000
 80012e4:	2000000c 	.word	0x2000000c
 80012e8:	431bde83 	.word	0x431bde83

080012ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012f4:	4b79      	ldr	r3, [pc, #484]	; (80014dc <ADC_Init+0x1f0>)
 80012f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	431a      	orrs	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001320:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6859      	ldr	r1, [r3, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	021a      	lsls	r2, r3, #8
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001344:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6859      	ldr	r1, [r3, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	430a      	orrs	r2, r1
 8001356:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6899      	ldr	r1, [r3, #8]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	4a58      	ldr	r2, [pc, #352]	; (80014e0 <ADC_Init+0x1f4>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d022      	beq.n	80013ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001392:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	6899      	ldr	r1, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	689a      	ldr	r2, [r3, #8]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6899      	ldr	r1, [r3, #8]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	430a      	orrs	r2, r1
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	e00f      	b.n	80013ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 0202 	bic.w	r2, r2, #2
 80013f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6899      	ldr	r1, [r3, #8]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	7e1b      	ldrb	r3, [r3, #24]
 8001404:	005a      	lsls	r2, r3, #1
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d01b      	beq.n	8001450 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001426:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001436:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6859      	ldr	r1, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	3b01      	subs	r3, #1
 8001444:	035a      	lsls	r2, r3, #13
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	430a      	orrs	r2, r1
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	e007      	b.n	8001460 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800145e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	3b01      	subs	r3, #1
 800147c:	051a      	lsls	r2, r3, #20
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6899      	ldr	r1, [r3, #8]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014a2:	025a      	lsls	r2, r3, #9
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6899      	ldr	r1, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	029a      	lsls	r2, r3, #10
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	609a      	str	r2, [r3, #8]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40012300 	.word	0x40012300
 80014e0:	0f000001 	.word	0x0f000001

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff29 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff3e 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff8e 	bl	80015d8 <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff31 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa2 	bl	8001640 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff fc54 	bl	8000fc0 <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e099      	b.n	8001858 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0201 	bic.w	r2, r2, #1
 8001742:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001744:	e00f      	b.n	8001766 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001746:	f7ff fc3b 	bl	8000fc0 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b05      	cmp	r3, #5
 8001752:	d908      	bls.n	8001766 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2220      	movs	r2, #32
 8001758:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2203      	movs	r2, #3
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e078      	b.n	8001858 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e8      	bne.n	8001746 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	4b38      	ldr	r3, [pc, #224]	; (8001860 <HAL_DMA_Init+0x158>)
 8001780:	4013      	ands	r3, r2
 8001782:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001792:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d107      	bne.n	80017d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	4313      	orrs	r3, r2
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f023 0307 	bic.w	r3, r3, #7
 80017e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	d117      	bne.n	800182a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	4313      	orrs	r3, r2
 8001802:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00e      	beq.n	800182a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 f9e9 	bl	8001be4 <DMA_CheckFifoParam>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001826:	2301      	movs	r3, #1
 8001828:	e016      	b.n	8001858 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f9a0 	bl	8001b78 <DMA_CalcBaseAndBitshift>
 8001838:	4603      	mov	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001840:	223f      	movs	r2, #63	; 0x3f
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001856:	2300      	movs	r3, #0
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	f010803f 	.word	0xf010803f

08001864 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001870:	4b8e      	ldr	r3, [pc, #568]	; (8001aac <HAL_DMA_IRQHandler+0x248>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a8e      	ldr	r2, [pc, #568]	; (8001ab0 <HAL_DMA_IRQHandler+0x24c>)
 8001876:	fba2 2303 	umull	r2, r3, r2, r3
 800187a:	0a9b      	lsrs	r3, r3, #10
 800187c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800188e:	2208      	movs	r2, #8
 8001890:	409a      	lsls	r2, r3
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4013      	ands	r3, r2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d01a      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d013      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0204 	bic.w	r2, r2, #4
 80018b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018bc:	2208      	movs	r2, #8
 80018be:	409a      	lsls	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c8:	f043 0201 	orr.w	r2, r3, #1
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d4:	2201      	movs	r2, #1
 80018d6:	409a      	lsls	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d012      	beq.n	8001906 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d00b      	beq.n	8001906 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f2:	2201      	movs	r2, #1
 80018f4:	409a      	lsls	r2, r3
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fe:	f043 0202 	orr.w	r2, r3, #2
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190a:	2204      	movs	r2, #4
 800190c:	409a      	lsls	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d012      	beq.n	800193c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00b      	beq.n	800193c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001928:	2204      	movs	r2, #4
 800192a:	409a      	lsls	r2, r3
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001934:	f043 0204 	orr.w	r2, r3, #4
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001940:	2210      	movs	r2, #16
 8001942:	409a      	lsls	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4013      	ands	r3, r2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d043      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d03c      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195e:	2210      	movs	r2, #16
 8001960:	409a      	lsls	r2, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d018      	beq.n	80019a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d108      	bne.n	8001994 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	2b00      	cmp	r3, #0
 8001988:	d024      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	4798      	blx	r3
 8001992:	e01f      	b.n	80019d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001998:	2b00      	cmp	r3, #0
 800199a:	d01b      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	4798      	blx	r3
 80019a4:	e016      	b.n	80019d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d107      	bne.n	80019c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0208 	bic.w	r2, r2, #8
 80019c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d8:	2220      	movs	r2, #32
 80019da:	409a      	lsls	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4013      	ands	r3, r2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f000 808f 	beq.w	8001b04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0310 	and.w	r3, r3, #16
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	f000 8087 	beq.w	8001b04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fa:	2220      	movs	r2, #32
 80019fc:	409a      	lsls	r2, r3
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d136      	bne.n	8001a7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0216 	bic.w	r2, r2, #22
 8001a1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d103      	bne.n	8001a3e <HAL_DMA_IRQHandler+0x1da>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0208 	bic.w	r2, r2, #8
 8001a4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a52:	223f      	movs	r2, #63	; 0x3f
 8001a54:	409a      	lsls	r2, r3
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d07e      	beq.n	8001b70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	4798      	blx	r3
        }
        return;
 8001a7a:	e079      	b.n	8001b70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d01d      	beq.n	8001ac6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10d      	bne.n	8001ab4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d031      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	4798      	blx	r3
 8001aa8:	e02c      	b.n	8001b04 <HAL_DMA_IRQHandler+0x2a0>
 8001aaa:	bf00      	nop
 8001aac:	2000000c 	.word	0x2000000c
 8001ab0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d023      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3
 8001ac4:	e01e      	b.n	8001b04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10f      	bne.n	8001af4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0210 	bic.w	r2, r2, #16
 8001ae2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d003      	beq.n	8001b04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d032      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d022      	beq.n	8001b5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2205      	movs	r2, #5
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	3301      	adds	r3, #1
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d307      	bcc.n	8001b4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f2      	bne.n	8001b30 <HAL_DMA_IRQHandler+0x2cc>
 8001b4a:	e000      	b.n	8001b4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	4798      	blx	r3
 8001b6e:	e000      	b.n	8001b72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b70:	bf00      	nop
    }
  }
}
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	3b10      	subs	r3, #16
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <DMA_CalcBaseAndBitshift+0x64>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	091b      	lsrs	r3, r3, #4
 8001b90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b92:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <DMA_CalcBaseAndBitshift+0x68>)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d909      	bls.n	8001bba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bae:	f023 0303 	bic.w	r3, r3, #3
 8001bb2:	1d1a      	adds	r2, r3, #4
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	659a      	str	r2, [r3, #88]	; 0x58
 8001bb8:	e007      	b.n	8001bca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bc2:	f023 0303 	bic.w	r3, r3, #3
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	aaaaaaab 	.word	0xaaaaaaab
 8001be0:	0800cedc 	.word	0x0800cedc

08001be4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d11f      	bne.n	8001c3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d856      	bhi.n	8001cb2 <DMA_CheckFifoParam+0xce>
 8001c04:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <DMA_CheckFifoParam+0x28>)
 8001c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0a:	bf00      	nop
 8001c0c:	08001c1d 	.word	0x08001c1d
 8001c10:	08001c2f 	.word	0x08001c2f
 8001c14:	08001c1d 	.word	0x08001c1d
 8001c18:	08001cb3 	.word	0x08001cb3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d046      	beq.n	8001cb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c2c:	e043      	b.n	8001cb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c36:	d140      	bne.n	8001cba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c3c:	e03d      	b.n	8001cba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c46:	d121      	bne.n	8001c8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d837      	bhi.n	8001cbe <DMA_CheckFifoParam+0xda>
 8001c4e:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <DMA_CheckFifoParam+0x70>)
 8001c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c54:	08001c65 	.word	0x08001c65
 8001c58:	08001c6b 	.word	0x08001c6b
 8001c5c:	08001c65 	.word	0x08001c65
 8001c60:	08001c7d 	.word	0x08001c7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
      break;
 8001c68:	e030      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d025      	beq.n	8001cc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c7a:	e022      	b.n	8001cc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c84:	d11f      	bne.n	8001cc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c8a:	e01c      	b.n	8001cc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d903      	bls.n	8001c9a <DMA_CheckFifoParam+0xb6>
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d003      	beq.n	8001ca0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c98:	e018      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c9e:	e015      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00e      	beq.n	8001cca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
      break;
 8001cb0:	e00b      	b.n	8001cca <DMA_CheckFifoParam+0xe6>
      break;
 8001cb2:	bf00      	nop
 8001cb4:	e00a      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      break;
 8001cb6:	bf00      	nop
 8001cb8:	e008      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      break;
 8001cba:	bf00      	nop
 8001cbc:	e006      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      break;
 8001cbe:	bf00      	nop
 8001cc0:	e004      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      break;
 8001cc2:	bf00      	nop
 8001cc4:	e002      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      break;   
 8001cc6:	bf00      	nop
 8001cc8:	e000      	b.n	8001ccc <DMA_CheckFifoParam+0xe8>
      break;
 8001cca:	bf00      	nop
    }
  } 
  
  return status; 
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
 8001cf6:	e159      	b.n	8001fac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	f040 8148 	bne.w	8001fa6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d005      	beq.n	8001d2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d130      	bne.n	8001d90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2203      	movs	r2, #3
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d64:	2201      	movs	r2, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 0201 	and.w	r2, r3, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d017      	beq.n	8001dcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	2203      	movs	r2, #3
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d123      	bne.n	8001e20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	08da      	lsrs	r2, r3, #3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3208      	adds	r2, #8
 8001de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	220f      	movs	r2, #15
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	08da      	lsrs	r2, r3, #3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3208      	adds	r2, #8
 8001e1a:	69b9      	ldr	r1, [r7, #24]
 8001e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0203 	and.w	r2, r3, #3
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80a2 	beq.w	8001fa6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b57      	ldr	r3, [pc, #348]	; (8001fc4 <HAL_GPIO_Init+0x2e8>)
 8001e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6a:	4a56      	ldr	r2, [pc, #344]	; (8001fc4 <HAL_GPIO_Init+0x2e8>)
 8001e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e70:	6453      	str	r3, [r2, #68]	; 0x44
 8001e72:	4b54      	ldr	r3, [pc, #336]	; (8001fc4 <HAL_GPIO_Init+0x2e8>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7e:	4a52      	ldr	r2, [pc, #328]	; (8001fc8 <HAL_GPIO_Init+0x2ec>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	220f      	movs	r2, #15
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a49      	ldr	r2, [pc, #292]	; (8001fcc <HAL_GPIO_Init+0x2f0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d019      	beq.n	8001ede <HAL_GPIO_Init+0x202>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a48      	ldr	r2, [pc, #288]	; (8001fd0 <HAL_GPIO_Init+0x2f4>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0x1fe>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a47      	ldr	r2, [pc, #284]	; (8001fd4 <HAL_GPIO_Init+0x2f8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_GPIO_Init+0x1fa>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a46      	ldr	r2, [pc, #280]	; (8001fd8 <HAL_GPIO_Init+0x2fc>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <HAL_GPIO_Init+0x1f6>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a45      	ldr	r2, [pc, #276]	; (8001fdc <HAL_GPIO_Init+0x300>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_GPIO_Init+0x1f2>
 8001eca:	2304      	movs	r3, #4
 8001ecc:	e008      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001ece:	2307      	movs	r3, #7
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e004      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e002      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	f002 0203 	and.w	r2, r2, #3
 8001ee6:	0092      	lsls	r2, r2, #2
 8001ee8:	4093      	lsls	r3, r2
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef0:	4935      	ldr	r1, [pc, #212]	; (8001fc8 <HAL_GPIO_Init+0x2ec>)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efe:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f22:	4a2f      	ldr	r2, [pc, #188]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f4c:	4a24      	ldr	r2, [pc, #144]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f52:	4b23      	ldr	r3, [pc, #140]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f76:	4a1a      	ldr	r2, [pc, #104]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa0:	4a0f      	ldr	r2, [pc, #60]	; (8001fe0 <HAL_GPIO_Init+0x304>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b0f      	cmp	r3, #15
 8001fb0:	f67f aea2 	bls.w	8001cf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3724      	adds	r7, #36	; 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40013800 	.word	0x40013800
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40020400 	.word	0x40020400
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	40020c00 	.word	0x40020c00
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40013c00 	.word	0x40013c00

08001fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff4:	787b      	ldrb	r3, [r7, #1]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002000:	e003      	b.n	800200a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002002:	887b      	ldrh	r3, [r7, #2]
 8002004:	041a      	lsls	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	619a      	str	r2, [r3, #24]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002016:	b480      	push	{r7}
 8002018:	b085      	sub	sp, #20
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002028:	887a      	ldrh	r2, [r7, #2]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	041a      	lsls	r2, r3, #16
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	43d9      	mvns	r1, r3
 8002034:	887b      	ldrh	r3, [r7, #2]
 8002036:	400b      	ands	r3, r1
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	619a      	str	r2, [r3, #24]
}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800204a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800204c:	b08f      	sub	sp, #60	; 0x3c
 800204e:	af0a      	add	r7, sp, #40	; 0x28
 8002050:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e10f      	b.n	800227c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d106      	bne.n	800207c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f009 fdae 	bl	800bbd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2203      	movs	r2, #3
 8002080:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d102      	bne.n	8002096 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f001 ff97 	bl	8003fce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	603b      	str	r3, [r7, #0]
 80020a6:	687e      	ldr	r6, [r7, #4]
 80020a8:	466d      	mov	r5, sp
 80020aa:	f106 0410 	add.w	r4, r6, #16
 80020ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80020be:	1d33      	adds	r3, r6, #4
 80020c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c2:	6838      	ldr	r0, [r7, #0]
 80020c4:	f001 fe6e 	bl	8003da4 <USB_CoreInit>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2202      	movs	r2, #2
 80020d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e0d0      	b.n	800227c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2100      	movs	r1, #0
 80020e0:	4618      	mov	r0, r3
 80020e2:	f001 ff85 	bl	8003ff0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
 80020ea:	e04a      	b.n	8002182 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	333d      	adds	r3, #61	; 0x3d
 80020fc:	2201      	movs	r2, #1
 80020fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	333c      	adds	r3, #60	; 0x3c
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	b298      	uxth	r0, r3
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	3344      	adds	r3, #68	; 0x44
 8002128:	4602      	mov	r2, r0
 800212a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	3340      	adds	r3, #64	; 0x40
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002140:	7bfa      	ldrb	r2, [r7, #15]
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	3348      	adds	r3, #72	; 0x48
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002154:	7bfa      	ldrb	r2, [r7, #15]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4413      	add	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	334c      	adds	r3, #76	; 0x4c
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002168:	7bfa      	ldrb	r2, [r7, #15]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	3354      	adds	r3, #84	; 0x54
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217c:	7bfb      	ldrb	r3, [r7, #15]
 800217e:	3301      	adds	r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	429a      	cmp	r2, r3
 800218a:	d3af      	bcc.n	80020ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800218c:	2300      	movs	r3, #0
 800218e:	73fb      	strb	r3, [r7, #15]
 8002190:	e044      	b.n	800221c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002192:	7bfa      	ldrb	r2, [r7, #15]
 8002194:	6879      	ldr	r1, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021a8:	7bfa      	ldrb	r2, [r7, #15]
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	4613      	mov	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	440b      	add	r3, r1
 80021b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021d0:	2200      	movs	r2, #0
 80021d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021d4:	7bfa      	ldrb	r2, [r7, #15]
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	4613      	mov	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	440b      	add	r3, r1
 80021e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021ea:	7bfa      	ldrb	r2, [r7, #15]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	4413      	add	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002200:	7bfa      	ldrb	r2, [r7, #15]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	4413      	add	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002212:	2200      	movs	r2, #0
 8002214:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	3301      	adds	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	d3b5      	bcc.n	8002192 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	603b      	str	r3, [r7, #0]
 800222c:	687e      	ldr	r6, [r7, #4]
 800222e:	466d      	mov	r5, sp
 8002230:	f106 0410 	add.w	r4, r6, #16
 8002234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002238:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800223a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002240:	e885 0003 	stmia.w	r5, {r0, r1}
 8002244:	1d33      	adds	r3, r6, #4
 8002246:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002248:	6838      	ldr	r0, [r7, #0]
 800224a:	f001 ff1d 	bl	8004088 <USB_DevInit>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e00d      	b.n	800227c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f003 f86c 	bl	8005352 <USB_DevDisconnect>

  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002284 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_PCD_Start+0x1c>
 800229c:	2302      	movs	r3, #2
 800229e:	e020      	b.n	80022e2 <HAL_PCD_Start+0x5e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d109      	bne.n	80022c4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d005      	beq.n	80022c4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f001 fe6f 	bl	8003fac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 f81c 	bl	8005310 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022ea:	b590      	push	{r4, r7, lr}
 80022ec:	b08d      	sub	sp, #52	; 0x34
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f003 f8da 	bl	80054ba <USB_GetMode>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 848a 	bne.w	8002c22 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f003 f83e 	bl	8005394 <USB_ReadInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 8480 	beq.w	8002c20 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f003 f82b 	bl	8005394 <USB_ReadInterrupts>
 800233e:	4603      	mov	r3, r0
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b02      	cmp	r3, #2
 8002346:	d107      	bne.n	8002358 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f002 0202 	and.w	r2, r2, #2
 8002356:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f003 f819 	bl	8005394 <USB_ReadInterrupts>
 8002362:	4603      	mov	r3, r0
 8002364:	f003 0310 	and.w	r3, r3, #16
 8002368:	2b10      	cmp	r3, #16
 800236a:	d161      	bne.n	8002430 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0210 	bic.w	r2, r2, #16
 800237a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	f003 020f 	and.w	r2, r3, #15
 8002388:	4613      	mov	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	3304      	adds	r3, #4
 800239a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	0c5b      	lsrs	r3, r3, #17
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d124      	bne.n	80023f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d035      	beq.n	8002420 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	6a38      	ldr	r0, [r7, #32]
 80023c8:	f002 fe50 	bl	800506c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023d8:	441a      	add	r2, r3
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ea:	441a      	add	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	621a      	str	r2, [r3, #32]
 80023f0:	e016      	b.n	8002420 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	0c5b      	lsrs	r3, r3, #17
 80023f6:	f003 030f 	and.w	r3, r3, #15
 80023fa:	2b06      	cmp	r3, #6
 80023fc:	d110      	bne.n	8002420 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002404:	2208      	movs	r2, #8
 8002406:	4619      	mov	r1, r3
 8002408:	6a38      	ldr	r0, [r7, #32]
 800240a:	f002 fe2f 	bl	800506c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	6a1a      	ldr	r2, [r3, #32]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800241a:	441a      	add	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699a      	ldr	r2, [r3, #24]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0210 	orr.w	r2, r2, #16
 800242e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f002 ffad 	bl	8005394 <USB_ReadInterrupts>
 800243a:	4603      	mov	r3, r0
 800243c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002440:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002444:	f040 80a7 	bne.w	8002596 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f002 ffb2 	bl	80053ba <USB_ReadDevAllOutEpInterrupt>
 8002456:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002458:	e099      	b.n	800258e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 808e 	beq.w	8002582 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f002 ffd6 	bl	8005422 <USB_ReadDevOutEPInterrupt>
 8002476:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00c      	beq.n	800249c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	015a      	lsls	r2, r3, #5
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	4413      	add	r3, r2
 800248a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248e:	461a      	mov	r2, r3
 8002490:	2301      	movs	r3, #1
 8002492:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fec2 	bl	8003220 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b2:	461a      	mov	r2, r3
 80024b4:	2308      	movs	r3, #8
 80024b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 ff98 	bl	80033f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d008      	beq.n	80024dc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d6:	461a      	mov	r2, r3
 80024d8:	2310      	movs	r3, #16
 80024da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d030      	beq.n	8002548 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024ee:	2b80      	cmp	r3, #128	; 0x80
 80024f0:	d109      	bne.n	8002506 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002500:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002504:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	3304      	adds	r3, #4
 800251a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	78db      	ldrb	r3, [r3, #3]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d108      	bne.n	8002536 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	2200      	movs	r2, #0
 8002528:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	b2db      	uxtb	r3, r3
 800252e:	4619      	mov	r1, r3
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f009 fc57 	bl	800bde4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	015a      	lsls	r2, r3, #5
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	4413      	add	r3, r2
 800253e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002542:	461a      	mov	r2, r3
 8002544:	2302      	movs	r3, #2
 8002546:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	015a      	lsls	r2, r3, #5
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	4413      	add	r3, r2
 800255a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800255e:	461a      	mov	r2, r3
 8002560:	2320      	movs	r3, #32
 8002562:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	015a      	lsls	r2, r3, #5
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	4413      	add	r3, r2
 8002576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800257a:	461a      	mov	r2, r3
 800257c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002580:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002584:	3301      	adds	r3, #1
 8002586:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258a:	085b      	lsrs	r3, r3, #1
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800258e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002590:	2b00      	cmp	r3, #0
 8002592:	f47f af62 	bne.w	800245a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f002 fefa 	bl	8005394 <USB_ReadInterrupts>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025aa:	f040 80db 	bne.w	8002764 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f002 ff1b 	bl	80053ee <USB_ReadDevAllInEpInterrupt>
 80025b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80025be:	e0cd      	b.n	800275c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 80c2 	beq.w	8002750 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	4611      	mov	r1, r2
 80025d6:	4618      	mov	r0, r3
 80025d8:	f002 ff41 	bl	800545e <USB_ReadDevInEPInterrupt>
 80025dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d057      	beq.n	8002698 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	2201      	movs	r2, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	43db      	mvns	r3, r3
 8002602:	69f9      	ldr	r1, [r7, #28]
 8002604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002608:	4013      	ands	r3, r2
 800260a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002618:	461a      	mov	r2, r3
 800261a:	2301      	movs	r3, #1
 800261c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d132      	bne.n	800268c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	334c      	adds	r3, #76	; 0x4c
 8002636:	6819      	ldr	r1, [r3, #0]
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	4413      	add	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4403      	add	r3, r0
 8002646:	3348      	adds	r3, #72	; 0x48
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4419      	add	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002650:	4613      	mov	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	4403      	add	r3, r0
 800265a:	334c      	adds	r3, #76	; 0x4c
 800265c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	2b00      	cmp	r3, #0
 8002662:	d113      	bne.n	800268c <HAL_PCD_IRQHandler+0x3a2>
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3354      	adds	r3, #84	; 0x54
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d108      	bne.n	800268c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002684:	461a      	mov	r2, r3
 8002686:	2101      	movs	r1, #1
 8002688:	f002 ff48 	bl	800551c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	b2db      	uxtb	r3, r3
 8002690:	4619      	mov	r1, r3
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f009 fb21 	bl	800bcda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d008      	beq.n	80026b4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ae:	461a      	mov	r2, r3
 80026b0:	2308      	movs	r3, #8
 80026b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d008      	beq.n	80026d0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ca:	461a      	mov	r2, r3
 80026cc:	2310      	movs	r3, #16
 80026ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d008      	beq.n	80026ec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	015a      	lsls	r2, r3, #5
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	4413      	add	r3, r2
 80026e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026e6:	461a      	mov	r2, r3
 80026e8:	2340      	movs	r3, #64	; 0x40
 80026ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d023      	beq.n	800273e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026f8:	6a38      	ldr	r0, [r7, #32]
 80026fa:	f001 fe29 	bl	8004350 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	3338      	adds	r3, #56	; 0x38
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	4413      	add	r3, r2
 800270e:	3304      	adds	r3, #4
 8002710:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	78db      	ldrb	r3, [r3, #3]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d108      	bne.n	800272c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2200      	movs	r2, #0
 800271e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	b2db      	uxtb	r3, r3
 8002724:	4619      	mov	r1, r3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f009 fb6e 	bl	800be08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002738:	461a      	mov	r2, r3
 800273a:	2302      	movs	r3, #2
 800273c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fcdb 	bl	8003106 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	3301      	adds	r3, #1
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	2b00      	cmp	r3, #0
 8002760:	f47f af2e 	bne.w	80025c0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f002 fe13 	bl	8005394 <USB_ReadInterrupts>
 800276e:	4603      	mov	r3, r0
 8002770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002778:	d122      	bne.n	80027c0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002788:	f023 0301 	bic.w	r3, r3, #1
 800278c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002794:	2b01      	cmp	r3, #1
 8002796:	d108      	bne.n	80027aa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027a0:	2100      	movs	r1, #0
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fec2 	bl	800352c <HAL_PCDEx_LPM_Callback>
 80027a8:	e002      	b.n	80027b0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f009 fb0c 	bl	800bdc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f002 fde5 	bl	8005394 <USB_ReadInterrupts>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027d4:	d112      	bne.n	80027fc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d102      	bne.n	80027ec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f009 fac8 	bl	800bd7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027fa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f002 fdc7 	bl	8005394 <USB_ReadInterrupts>
 8002806:	4603      	mov	r3, r0
 8002808:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800280c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002810:	f040 80b7 	bne.w	8002982 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	69fa      	ldr	r2, [r7, #28]
 800281e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2110      	movs	r1, #16
 800282e:	4618      	mov	r0, r3
 8002830:	f001 fd8e 	bl	8004350 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002834:	2300      	movs	r3, #0
 8002836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002838:	e046      	b.n	80028c8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800283a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283c:	015a      	lsls	r2, r3, #5
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	4413      	add	r3, r2
 8002842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002846:	461a      	mov	r2, r3
 8002848:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800284c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800284e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800285e:	0151      	lsls	r1, r2, #5
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	440a      	add	r2, r1
 8002864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002868:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800286c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002870:	015a      	lsls	r2, r3, #5
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	4413      	add	r3, r2
 8002876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800287a:	461a      	mov	r2, r3
 800287c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002880:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	4413      	add	r3, r2
 800288a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002892:	0151      	lsls	r1, r2, #5
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	440a      	add	r2, r1
 8002898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800289c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b2:	0151      	lsls	r1, r2, #5
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	440a      	add	r2, r1
 80028b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	3301      	adds	r3, #1
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d3b3      	bcc.n	800283a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d016      	beq.n	800291c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f8:	69fa      	ldr	r2, [r7, #28]
 80028fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028fe:	f043 030b 	orr.w	r3, r3, #11
 8002902:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002914:	f043 030b 	orr.w	r3, r3, #11
 8002918:	6453      	str	r3, [r2, #68]	; 0x44
 800291a:	e015      	b.n	8002948 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800292a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800292e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002932:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	69fa      	ldr	r2, [r7, #28]
 800293e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002942:	f043 030b 	orr.w	r3, r3, #11
 8002946:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002956:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800295a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800296c:	461a      	mov	r2, r3
 800296e:	f002 fdd5 	bl	800551c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695a      	ldr	r2, [r3, #20]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002980:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f002 fd04 	bl	8005394 <USB_ReadInterrupts>
 800298c:	4603      	mov	r3, r0
 800298e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002996:	d124      	bne.n	80029e2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f002 fd9a 	bl	80054d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 fd4f 	bl	800444a <USB_GetDevSpeed>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681c      	ldr	r4, [r3, #0]
 80029b8:	f001 f9e8 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 80029bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
 80029c6:	4620      	mov	r0, r4
 80029c8:	f001 fa4e 	bl	8003e68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f009 f9ac 	bl	800bd2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f002 fcd4 	bl	8005394 <USB_ReadInterrupts>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d10a      	bne.n	8002a0c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f009 f989 	bl	800bd0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f002 0208 	and.w	r2, r2, #8
 8002a0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f002 fcbf 	bl	8005394 <USB_ReadInterrupts>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a1c:	2b80      	cmp	r3, #128	; 0x80
 8002a1e:	d122      	bne.n	8002a66 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a30:	e014      	b.n	8002a5c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d105      	bne.n	8002a56 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	4619      	mov	r1, r3
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 fb27 	bl	80030a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	3301      	adds	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d3e5      	bcc.n	8002a32 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f002 fc92 	bl	8005394 <USB_ReadInterrupts>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a7a:	d13b      	bne.n	8002af4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a80:	e02b      	b.n	8002ada <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a96:	4613      	mov	r3, r2
 8002a98:	00db      	lsls	r3, r3, #3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	3340      	adds	r3, #64	; 0x40
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d115      	bne.n	8002ad4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002aa8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	da12      	bge.n	8002ad4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	333f      	adds	r3, #63	; 0x3f
 8002abe:	2201      	movs	r2, #1
 8002ac0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	4619      	mov	r1, r3
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 fae8 	bl	80030a4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d3ce      	bcc.n	8002a82 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002af2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f002 fc4b 	bl	8005394 <USB_ReadInterrupts>
 8002afe:	4603      	mov	r3, r0
 8002b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b08:	d155      	bne.n	8002bb6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0e:	e045      	b.n	8002b9c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b24:	4613      	mov	r3, r2
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d12e      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	da2b      	bge.n	8002b96 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b4a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d121      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b64:	2201      	movs	r2, #1
 8002b66:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10a      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	69fa      	ldr	r2, [r7, #28]
 8002b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b92:	6053      	str	r3, [r2, #4]
            break;
 8002b94:	e007      	b.n	8002ba6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b98:	3301      	adds	r3, #1
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d3b4      	bcc.n	8002b10 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 fbea 	bl	8005394 <USB_ReadInterrupts>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bca:	d10a      	bne.n	8002be2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f009 f92d 	bl	800be2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f002 fbd4 	bl	8005394 <USB_ReadInterrupts>
 8002bec:	4603      	mov	r3, r0
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d115      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f009 f91d 	bl	800be48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	e000      	b.n	8002c22 <HAL_PCD_IRQHandler+0x938>
      return;
 8002c20:	bf00      	nop
    }
  }
}
 8002c22:	3734      	adds	r7, #52	; 0x34
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd90      	pop	{r4, r7, pc}

08002c28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_PCD_SetAddress+0x1a>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e013      	b.n	8002c6a <HAL_PCD_SetAddress+0x42>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f002 fb32 	bl	80052c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b084      	sub	sp, #16
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	4608      	mov	r0, r1
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4603      	mov	r3, r0
 8002c82:	70fb      	strb	r3, [r7, #3]
 8002c84:	460b      	mov	r3, r1
 8002c86:	803b      	strh	r3, [r7, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	da0f      	bge.n	8002cb8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c98:	78fb      	ldrb	r3, [r7, #3]
 8002c9a:	f003 020f 	and.w	r2, r3, #15
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	3338      	adds	r3, #56	; 0x38
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	4413      	add	r3, r2
 8002cac:	3304      	adds	r3, #4
 8002cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	705a      	strb	r2, [r3, #1]
 8002cb6:	e00f      	b.n	8002cd8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	f003 020f 	and.w	r2, r3, #15
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4413      	add	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	4413      	add	r3, r2
 8002cce:	3304      	adds	r3, #4
 8002cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ce4:	883a      	ldrh	r2, [r7, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	78ba      	ldrb	r2, [r7, #2]
 8002cee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	785b      	ldrb	r3, [r3, #1]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d004      	beq.n	8002d02 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d02:	78bb      	ldrb	r3, [r7, #2]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d102      	bne.n	8002d0e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_PCD_EP_Open+0xaa>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e00e      	b.n	8002d3a <HAL_PCD_EP_Open+0xc8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68f9      	ldr	r1, [r7, #12]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 fbb2 	bl	8004494 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002d38:	7afb      	ldrb	r3, [r7, #11]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	da0f      	bge.n	8002d76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	f003 020f 	and.w	r2, r3, #15
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	3338      	adds	r3, #56	; 0x38
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4413      	add	r3, r2
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	705a      	strb	r2, [r3, #1]
 8002d74:	e00f      	b.n	8002d96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	f003 020f 	and.w	r2, r3, #15
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_PCD_EP_Close+0x6e>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e00e      	b.n	8002dce <HAL_PCD_EP_Close+0x8c>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68f9      	ldr	r1, [r7, #12]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f001 fbf0 	bl	80045a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b086      	sub	sp, #24
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	607a      	str	r2, [r7, #4]
 8002de0:	603b      	str	r3, [r7, #0]
 8002de2:	460b      	mov	r3, r1
 8002de4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002de6:	7afb      	ldrb	r3, [r7, #11]
 8002de8:	f003 020f 	and.w	r2, r3, #15
 8002dec:	4613      	mov	r3, r2
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	3304      	adds	r3, #4
 8002dfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2200      	movs	r2, #0
 8002e16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e18:	7afb      	ldrb	r3, [r7, #11]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d102      	bne.n	8002e32 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e32:	7afb      	ldrb	r3, [r7, #11]
 8002e34:	f003 030f 	and.w	r3, r3, #15
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	6979      	ldr	r1, [r7, #20]
 8002e4a:	f001 fecf 	bl	8004bec <USB_EP0StartXfer>
 8002e4e:	e008      	b.n	8002e62 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	6979      	ldr	r1, [r7, #20]
 8002e5e:	f001 fc7d 	bl	800475c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	f003 020f 	and.w	r2, r3, #15
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002e8e:	681b      	ldr	r3, [r3, #0]
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	607a      	str	r2, [r7, #4]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eac:	7afb      	ldrb	r3, [r7, #11]
 8002eae:	f003 020f 	and.w	r2, r3, #15
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	3338      	adds	r3, #56	; 0x38
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002edc:	7afb      	ldrb	r3, [r7, #11]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d102      	bne.n	8002ef6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ef6:	7afb      	ldrb	r3, [r7, #11]
 8002ef8:	f003 030f 	and.w	r3, r3, #15
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d109      	bne.n	8002f14 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6818      	ldr	r0, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6979      	ldr	r1, [r7, #20]
 8002f0e:	f001 fe6d 	bl	8004bec <USB_EP0StartXfer>
 8002f12:	e008      	b.n	8002f26 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6818      	ldr	r0, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	6979      	ldr	r1, [r7, #20]
 8002f22:	f001 fc1b 	bl	800475c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3718      	adds	r7, #24
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	f003 020f 	and.w	r2, r3, #15
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d901      	bls.n	8002f4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e050      	b.n	8002ff0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	da0f      	bge.n	8002f76 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 020f 	and.w	r2, r3, #15
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	3338      	adds	r3, #56	; 0x38
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	4413      	add	r3, r2
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2201      	movs	r2, #1
 8002f72:	705a      	strb	r2, [r3, #1]
 8002f74:	e00d      	b.n	8002f92 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4413      	add	r3, r2
 8002f88:	3304      	adds	r3, #4
 8002f8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_PCD_EP_SetStall+0x82>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e01e      	b.n	8002ff0 <HAL_PCD_EP_SetStall+0xc0>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68f9      	ldr	r1, [r7, #12]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f002 f8ab 	bl	800511c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10a      	bne.n	8002fe6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6818      	ldr	r0, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	b2d9      	uxtb	r1, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f002 fa9b 	bl	800551c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	f003 020f 	and.w	r2, r3, #15
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d901      	bls.n	8003016 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e042      	b.n	800309c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800301a:	2b00      	cmp	r3, #0
 800301c:	da0f      	bge.n	800303e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	f003 020f 	and.w	r2, r3, #15
 8003024:	4613      	mov	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4413      	add	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	3338      	adds	r3, #56	; 0x38
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	3304      	adds	r3, #4
 8003034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	705a      	strb	r2, [r3, #1]
 800303c:	e00f      	b.n	800305e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	f003 020f 	and.w	r2, r3, #15
 8003044:	4613      	mov	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	4413      	add	r3, r2
 8003054:	3304      	adds	r3, #4
 8003056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	b2da      	uxtb	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_PCD_EP_ClrStall+0x86>
 800307a:	2302      	movs	r3, #2
 800307c:	e00e      	b.n	800309c <HAL_PCD_EP_ClrStall+0xa4>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68f9      	ldr	r1, [r7, #12]
 800308c:	4618      	mov	r0, r3
 800308e:	f002 f8b3 	bl	80051f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	460b      	mov	r3, r1
 80030ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	da0c      	bge.n	80030d2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	f003 020f 	and.w	r2, r3, #15
 80030be:	4613      	mov	r3, r2
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	3338      	adds	r3, #56	; 0x38
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4413      	add	r3, r2
 80030cc:	3304      	adds	r3, #4
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e00c      	b.n	80030ec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	f003 020f 	and.w	r2, r3, #15
 80030d8:	4613      	mov	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	4413      	add	r3, r2
 80030e8:	3304      	adds	r3, #4
 80030ea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68f9      	ldr	r1, [r7, #12]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 fed2 	bl	8004e9c <USB_EPStopXfer>
 80030f8:	4603      	mov	r3, r0
 80030fa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030fc:	7afb      	ldrb	r3, [r7, #11]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b08a      	sub	sp, #40	; 0x28
 800310a:	af02      	add	r7, sp, #8
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	3338      	adds	r3, #56	; 0x38
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	3304      	adds	r3, #4
 800312c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a1a      	ldr	r2, [r3, #32]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	429a      	cmp	r2, r3
 8003138:	d901      	bls.n	800313e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06c      	b.n	8003218 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	699a      	ldr	r2, [r3, #24]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	69fa      	ldr	r2, [r7, #28]
 8003150:	429a      	cmp	r2, r3
 8003152:	d902      	bls.n	800315a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3303      	adds	r3, #3
 800315e:	089b      	lsrs	r3, r3, #2
 8003160:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003162:	e02b      	b.n	80031bc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	699a      	ldr	r2, [r3, #24]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a1b      	ldr	r3, [r3, #32]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	69fa      	ldr	r2, [r7, #28]
 8003176:	429a      	cmp	r2, r3
 8003178:	d902      	bls.n	8003180 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	3303      	adds	r3, #3
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6919      	ldr	r1, [r3, #16]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	b2da      	uxtb	r2, r3
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003198:	b2db      	uxtb	r3, r3
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	4603      	mov	r3, r0
 800319e:	6978      	ldr	r0, [r7, #20]
 80031a0:	f001 ff26 	bl	8004ff0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	441a      	add	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a1a      	ldr	r2, [r3, #32]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	441a      	add	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d809      	bhi.n	80031e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a1a      	ldr	r2, [r3, #32]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031da:	429a      	cmp	r2, r3
 80031dc:	d203      	bcs.n	80031e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1be      	bne.n	8003164 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d811      	bhi.n	8003216 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	2201      	movs	r2, #1
 80031fa:	fa02 f303 	lsl.w	r3, r2, r3
 80031fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	43db      	mvns	r3, r3
 800320c:	6939      	ldr	r1, [r7, #16]
 800320e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003212:	4013      	ands	r3, r2
 8003214:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3720      	adds	r7, #32
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	333c      	adds	r3, #60	; 0x3c
 8003238:	3304      	adds	r3, #4
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	015a      	lsls	r2, r3, #5
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	4413      	add	r3, r2
 8003246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d17b      	bne.n	800334e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d015      	beq.n	800328c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	4a61      	ldr	r2, [pc, #388]	; (80033e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	f240 80b9 	bls.w	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80b3 	beq.w	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003282:	461a      	mov	r2, r3
 8003284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003288:	6093      	str	r3, [r2, #8]
 800328a:	e0a7      	b.n	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f003 0320 	and.w	r3, r3, #32
 8003292:	2b00      	cmp	r3, #0
 8003294:	d009      	beq.n	80032aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a2:	461a      	mov	r2, r3
 80032a4:	2320      	movs	r3, #32
 80032a6:	6093      	str	r3, [r2, #8]
 80032a8:	e098      	b.n	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f040 8093 	bne.w	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	4a4b      	ldr	r2, [pc, #300]	; (80033e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d90f      	bls.n	80032de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d4:	461a      	mov	r2, r3
 80032d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032da:	6093      	str	r3, [r2, #8]
 80032dc:	e07e      	b.n	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	4413      	add	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	3304      	adds	r3, #4
 80032f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	0159      	lsls	r1, r3, #5
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	440b      	add	r3, r1
 8003300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800330a:	1ad2      	subs	r2, r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d114      	bne.n	8003340 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003328:	461a      	mov	r2, r3
 800332a:	2101      	movs	r1, #1
 800332c:	f002 f8f6 	bl	800551c <USB_EP0_OutStart>
 8003330:	e006      	b.n	8003340 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	441a      	add	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	b2db      	uxtb	r3, r3
 8003344:	4619      	mov	r1, r3
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f008 fcac 	bl	800bca4 <HAL_PCD_DataOutStageCallback>
 800334c:	e046      	b.n	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	4a26      	ldr	r2, [pc, #152]	; (80033ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d124      	bne.n	80033a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336c:	461a      	mov	r2, r3
 800336e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003372:	6093      	str	r3, [r2, #8]
 8003374:	e032      	b.n	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b00      	cmp	r3, #0
 800337e:	d008      	beq.n	8003392 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	015a      	lsls	r2, r3, #5
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	4413      	add	r3, r2
 8003388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800338c:	461a      	mov	r2, r3
 800338e:	2320      	movs	r3, #32
 8003390:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	4619      	mov	r1, r3
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f008 fc83 	bl	800bca4 <HAL_PCD_DataOutStageCallback>
 800339e:	e01d      	b.n	80033dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d114      	bne.n	80033d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	4613      	mov	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d108      	bne.n	80033d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033c8:	461a      	mov	r2, r3
 80033ca:	2100      	movs	r1, #0
 80033cc:	f002 f8a6 	bl	800551c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	4619      	mov	r1, r3
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f008 fc64 	bl	800bca4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3720      	adds	r7, #32
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	4f54300a 	.word	0x4f54300a
 80033ec:	4f54310a 	.word	0x4f54310a

080033f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	333c      	adds	r3, #60	; 0x3c
 8003408:	3304      	adds	r3, #4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4a15      	ldr	r2, [pc, #84]	; (8003478 <PCD_EP_OutSetupPacket_int+0x88>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d90e      	bls.n	8003444 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800342c:	2b00      	cmp	r3, #0
 800342e:	d009      	beq.n	8003444 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343c:	461a      	mov	r2, r3
 800343e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003442:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f008 fc1b 	bl	800bc80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	4a0a      	ldr	r2, [pc, #40]	; (8003478 <PCD_EP_OutSetupPacket_int+0x88>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d90c      	bls.n	800346c <PCD_EP_OutSetupPacket_int+0x7c>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d108      	bne.n	800346c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003464:	461a      	mov	r2, r3
 8003466:	2101      	movs	r1, #1
 8003468:	f002 f858 	bl	800551c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	4f54300a 	.word	0x4f54300a

0800347c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	460b      	mov	r3, r1
 8003486:	70fb      	strb	r3, [r7, #3]
 8003488:	4613      	mov	r3, r2
 800348a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003494:	78fb      	ldrb	r3, [r7, #3]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d107      	bne.n	80034aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800349a:	883b      	ldrh	r3, [r7, #0]
 800349c:	0419      	lsls	r1, r3, #16
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28
 80034a8:	e028      	b.n	80034fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	4413      	add	r3, r2
 80034b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e00d      	b.n	80034da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	3340      	adds	r3, #64	; 0x40
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	4413      	add	r3, r2
 80034d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	3301      	adds	r3, #1
 80034d8:	73fb      	strb	r3, [r7, #15]
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	3b01      	subs	r3, #1
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d3ec      	bcc.n	80034be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034e4:	883b      	ldrh	r3, [r7, #0]
 80034e6:	0418      	lsls	r0, r3, #16
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6819      	ldr	r1, [r3, #0]
 80034ec:	78fb      	ldrb	r3, [r7, #3]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	4302      	orrs	r2, r0
 80034f4:	3340      	adds	r3, #64	; 0x40
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	440b      	add	r3, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d101      	bne.n	8003556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e267      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d075      	beq.n	800364e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003562:	4b88      	ldr	r3, [pc, #544]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b04      	cmp	r3, #4
 800356c:	d00c      	beq.n	8003588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356e:	4b85      	ldr	r3, [pc, #532]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003576:	2b08      	cmp	r3, #8
 8003578:	d112      	bne.n	80035a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357a:	4b82      	ldr	r3, [pc, #520]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003586:	d10b      	bne.n	80035a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003588:	4b7e      	ldr	r3, [pc, #504]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d05b      	beq.n	800364c <HAL_RCC_OscConfig+0x108>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d157      	bne.n	800364c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e242      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a8:	d106      	bne.n	80035b8 <HAL_RCC_OscConfig+0x74>
 80035aa:	4b76      	ldr	r3, [pc, #472]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a75      	ldr	r2, [pc, #468]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	e01d      	b.n	80035f4 <HAL_RCC_OscConfig+0xb0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c0:	d10c      	bne.n	80035dc <HAL_RCC_OscConfig+0x98>
 80035c2:	4b70      	ldr	r3, [pc, #448]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a6f      	ldr	r2, [pc, #444]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	4b6d      	ldr	r3, [pc, #436]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a6c      	ldr	r2, [pc, #432]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e00b      	b.n	80035f4 <HAL_RCC_OscConfig+0xb0>
 80035dc:	4b69      	ldr	r3, [pc, #420]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a68      	ldr	r2, [pc, #416]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b66      	ldr	r3, [pc, #408]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a65      	ldr	r2, [pc, #404]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80035ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d013      	beq.n	8003624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fd fce0 	bl	8000fc0 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003604:	f7fd fcdc 	bl	8000fc0 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b64      	cmp	r3, #100	; 0x64
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e207      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003616:	4b5b      	ldr	r3, [pc, #364]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0xc0>
 8003622:	e014      	b.n	800364e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003624:	f7fd fccc 	bl	8000fc0 <HAL_GetTick>
 8003628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800362a:	e008      	b.n	800363e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800362c:	f7fd fcc8 	bl	8000fc0 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	2b64      	cmp	r3, #100	; 0x64
 8003638:	d901      	bls.n	800363e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e1f3      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363e:	4b51      	ldr	r3, [pc, #324]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1f0      	bne.n	800362c <HAL_RCC_OscConfig+0xe8>
 800364a:	e000      	b.n	800364e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800364c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d063      	beq.n	8003722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800365a:	4b4a      	ldr	r3, [pc, #296]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00b      	beq.n	800367e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003666:	4b47      	ldr	r3, [pc, #284]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800366e:	2b08      	cmp	r3, #8
 8003670:	d11c      	bne.n	80036ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003672:	4b44      	ldr	r3, [pc, #272]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d116      	bne.n	80036ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800367e:	4b41      	ldr	r3, [pc, #260]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d005      	beq.n	8003696 <HAL_RCC_OscConfig+0x152>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d001      	beq.n	8003696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e1c7      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003696:	4b3b      	ldr	r3, [pc, #236]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	4937      	ldr	r1, [pc, #220]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036aa:	e03a      	b.n	8003722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d020      	beq.n	80036f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036b4:	4b34      	ldr	r3, [pc, #208]	; (8003788 <HAL_RCC_OscConfig+0x244>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ba:	f7fd fc81 	bl	8000fc0 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c2:	f7fd fc7d 	bl	8000fc0 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e1a8      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036d4:	4b2b      	ldr	r3, [pc, #172]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e0:	4b28      	ldr	r3, [pc, #160]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	00db      	lsls	r3, r3, #3
 80036ee:	4925      	ldr	r1, [pc, #148]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]
 80036f4:	e015      	b.n	8003722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036f6:	4b24      	ldr	r3, [pc, #144]	; (8003788 <HAL_RCC_OscConfig+0x244>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036fc:	f7fd fc60 	bl	8000fc0 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003704:	f7fd fc5c 	bl	8000fc0 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e187      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003716:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d1f0      	bne.n	8003704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d036      	beq.n	800379c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d016      	beq.n	8003764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003736:	4b15      	ldr	r3, [pc, #84]	; (800378c <HAL_RCC_OscConfig+0x248>)
 8003738:	2201      	movs	r2, #1
 800373a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fd fc40 	bl	8000fc0 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003744:	f7fd fc3c 	bl	8000fc0 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e167      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003756:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCC_OscConfig+0x240>)
 8003758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x200>
 8003762:	e01b      	b.n	800379c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003764:	4b09      	ldr	r3, [pc, #36]	; (800378c <HAL_RCC_OscConfig+0x248>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800376a:	f7fd fc29 	bl	8000fc0 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003770:	e00e      	b.n	8003790 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003772:	f7fd fc25 	bl	8000fc0 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d907      	bls.n	8003790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e150      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
 8003784:	40023800 	.word	0x40023800
 8003788:	42470000 	.word	0x42470000
 800378c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003790:	4b88      	ldr	r3, [pc, #544]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ea      	bne.n	8003772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 8097 	beq.w	80038d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037aa:	2300      	movs	r3, #0
 80037ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ae:	4b81      	ldr	r3, [pc, #516]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10f      	bne.n	80037da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ba:	2300      	movs	r3, #0
 80037bc:	60bb      	str	r3, [r7, #8]
 80037be:	4b7d      	ldr	r3, [pc, #500]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a7c      	ldr	r2, [pc, #496]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80037c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ca:	4b7a      	ldr	r3, [pc, #488]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	60bb      	str	r3, [r7, #8]
 80037d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037d6:	2301      	movs	r3, #1
 80037d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037da:	4b77      	ldr	r3, [pc, #476]	; (80039b8 <HAL_RCC_OscConfig+0x474>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d118      	bne.n	8003818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037e6:	4b74      	ldr	r3, [pc, #464]	; (80039b8 <HAL_RCC_OscConfig+0x474>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a73      	ldr	r2, [pc, #460]	; (80039b8 <HAL_RCC_OscConfig+0x474>)
 80037ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037f2:	f7fd fbe5 	bl	8000fc0 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037fa:	f7fd fbe1 	bl	8000fc0 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e10c      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380c:	4b6a      	ldr	r3, [pc, #424]	; (80039b8 <HAL_RCC_OscConfig+0x474>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d106      	bne.n	800382e <HAL_RCC_OscConfig+0x2ea>
 8003820:	4b64      	ldr	r3, [pc, #400]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003824:	4a63      	ldr	r2, [pc, #396]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6713      	str	r3, [r2, #112]	; 0x70
 800382c:	e01c      	b.n	8003868 <HAL_RCC_OscConfig+0x324>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b05      	cmp	r3, #5
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0x30c>
 8003836:	4b5f      	ldr	r3, [pc, #380]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	4a5e      	ldr	r2, [pc, #376]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 800383c:	f043 0304 	orr.w	r3, r3, #4
 8003840:	6713      	str	r3, [r2, #112]	; 0x70
 8003842:	4b5c      	ldr	r3, [pc, #368]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	4a5b      	ldr	r2, [pc, #364]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6713      	str	r3, [r2, #112]	; 0x70
 800384e:	e00b      	b.n	8003868 <HAL_RCC_OscConfig+0x324>
 8003850:	4b58      	ldr	r3, [pc, #352]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	4a57      	ldr	r2, [pc, #348]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	6713      	str	r3, [r2, #112]	; 0x70
 800385c:	4b55      	ldr	r3, [pc, #340]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	4a54      	ldr	r2, [pc, #336]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003862:	f023 0304 	bic.w	r3, r3, #4
 8003866:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d015      	beq.n	800389c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003870:	f7fd fba6 	bl	8000fc0 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003876:	e00a      	b.n	800388e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003878:	f7fd fba2 	bl	8000fc0 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e0cb      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388e:	4b49      	ldr	r3, [pc, #292]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0ee      	beq.n	8003878 <HAL_RCC_OscConfig+0x334>
 800389a:	e014      	b.n	80038c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389c:	f7fd fb90 	bl	8000fc0 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a2:	e00a      	b.n	80038ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a4:	f7fd fb8c 	bl	8000fc0 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e0b5      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ba:	4b3e      	ldr	r3, [pc, #248]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1ee      	bne.n	80038a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d105      	bne.n	80038d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038cc:	4b39      	ldr	r3, [pc, #228]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80038ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d0:	4a38      	ldr	r2, [pc, #224]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80038d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80a1 	beq.w	8003a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038e2:	4b34      	ldr	r3, [pc, #208]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d05c      	beq.n	80039a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d141      	bne.n	800397a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f6:	4b31      	ldr	r3, [pc, #196]	; (80039bc <HAL_RCC_OscConfig+0x478>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fd fb60 	bl	8000fc0 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd fb5c 	bl	8000fc0 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e087      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	4b27      	ldr	r3, [pc, #156]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003930:	019b      	lsls	r3, r3, #6
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	3b01      	subs	r3, #1
 800393c:	041b      	lsls	r3, r3, #16
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	061b      	lsls	r3, r3, #24
 8003946:	491b      	ldr	r1, [pc, #108]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 8003948:	4313      	orrs	r3, r2
 800394a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800394c:	4b1b      	ldr	r3, [pc, #108]	; (80039bc <HAL_RCC_OscConfig+0x478>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003952:	f7fd fb35 	bl	8000fc0 <HAL_GetTick>
 8003956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003958:	e008      	b.n	800396c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395a:	f7fd fb31 	bl	8000fc0 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e05c      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d0f0      	beq.n	800395a <HAL_RCC_OscConfig+0x416>
 8003978:	e054      	b.n	8003a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397a:	4b10      	ldr	r3, [pc, #64]	; (80039bc <HAL_RCC_OscConfig+0x478>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003980:	f7fd fb1e 	bl	8000fc0 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003988:	f7fd fb1a 	bl	8000fc0 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e045      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399a:	4b06      	ldr	r3, [pc, #24]	; (80039b4 <HAL_RCC_OscConfig+0x470>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x444>
 80039a6:	e03d      	b.n	8003a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d107      	bne.n	80039c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e038      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
 80039b4:	40023800 	.word	0x40023800
 80039b8:	40007000 	.word	0x40007000
 80039bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039c0:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <HAL_RCC_OscConfig+0x4ec>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d028      	beq.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d121      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d11a      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039f0:	4013      	ands	r3, r2
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d111      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d107      	bne.n	8003a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	40023800 	.word	0x40023800

08003a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0cc      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a48:	4b68      	ldr	r3, [pc, #416]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d90c      	bls.n	8003a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b65      	ldr	r3, [pc, #404]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003a58:	683a      	ldr	r2, [r7, #0]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b63      	ldr	r3, [pc, #396]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0b8      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d020      	beq.n	8003abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a88:	4b59      	ldr	r3, [pc, #356]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a58      	ldr	r2, [pc, #352]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa0:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	4a52      	ldr	r2, [pc, #328]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aac:	4b50      	ldr	r3, [pc, #320]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	494d      	ldr	r1, [pc, #308]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d044      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad2:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d119      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e07f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d003      	beq.n	8003af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d107      	bne.n	8003b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af2:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e06f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b02:	4b3b      	ldr	r3, [pc, #236]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e067      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b12:	4b37      	ldr	r3, [pc, #220]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f023 0203 	bic.w	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4934      	ldr	r1, [pc, #208]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b24:	f7fd fa4c 	bl	8000fc0 <HAL_GetTick>
 8003b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b2c:	f7fd fa48 	bl	8000fc0 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e04f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b42:	4b2b      	ldr	r3, [pc, #172]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 020c 	and.w	r2, r3, #12
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d1eb      	bne.n	8003b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b54:	4b25      	ldr	r3, [pc, #148]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d20c      	bcs.n	8003b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b62:	4b22      	ldr	r3, [pc, #136]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b20      	ldr	r3, [pc, #128]	; (8003bec <HAL_RCC_ClockConfig+0x1b8>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e032      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b88:	4b19      	ldr	r3, [pc, #100]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4916      	ldr	r1, [pc, #88]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	490e      	ldr	r1, [pc, #56]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bba:	f000 f821 	bl	8003c00 <HAL_RCC_GetSysClockFreq>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	490a      	ldr	r1, [pc, #40]	; (8003bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	5ccb      	ldrb	r3, [r1, r3]
 8003bce:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd2:	4a09      	ldr	r2, [pc, #36]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bd6:	4b09      	ldr	r3, [pc, #36]	; (8003bfc <HAL_RCC_ClockConfig+0x1c8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd f9ac 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40023c00 	.word	0x40023c00
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	0800cecc 	.word	0x0800cecc
 8003bf8:	2000000c 	.word	0x2000000c
 8003bfc:	20000010 	.word	0x20000010

08003c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c04:	b090      	sub	sp, #64	; 0x40
 8003c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c10:	2300      	movs	r3, #0
 8003c12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c18:	4b59      	ldr	r3, [pc, #356]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d00d      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0x40>
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	f200 80a1 	bhi.w	8003d6c <HAL_RCC_GetSysClockFreq+0x16c>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x34>
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d003      	beq.n	8003c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c32:	e09b      	b.n	8003d6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c34:	4b53      	ldr	r3, [pc, #332]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c38:	e09b      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c3a:	4b53      	ldr	r3, [pc, #332]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c3e:	e098      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c40:	4b4f      	ldr	r3, [pc, #316]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c4a:	4b4d      	ldr	r3, [pc, #308]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d028      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c56:	4b4a      	ldr	r3, [pc, #296]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	099b      	lsrs	r3, r3, #6
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	623b      	str	r3, [r7, #32]
 8003c60:	627a      	str	r2, [r7, #36]	; 0x24
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c68:	2100      	movs	r1, #0
 8003c6a:	4b47      	ldr	r3, [pc, #284]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c6c:	fb03 f201 	mul.w	r2, r3, r1
 8003c70:	2300      	movs	r3, #0
 8003c72:	fb00 f303 	mul.w	r3, r0, r3
 8003c76:	4413      	add	r3, r2
 8003c78:	4a43      	ldr	r2, [pc, #268]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c7a:	fba0 1202 	umull	r1, r2, r0, r2
 8003c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c80:	460a      	mov	r2, r1
 8003c82:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c86:	4413      	add	r3, r2
 8003c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	61bb      	str	r3, [r7, #24]
 8003c90:	61fa      	str	r2, [r7, #28]
 8003c92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c9a:	f7fc faf9 	bl	8000290 <__aeabi_uldivmod>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ca6:	e053      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca8:	4b35      	ldr	r3, [pc, #212]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	099b      	lsrs	r3, r3, #6
 8003cae:	2200      	movs	r2, #0
 8003cb0:	613b      	str	r3, [r7, #16]
 8003cb2:	617a      	str	r2, [r7, #20]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cba:	f04f 0b00 	mov.w	fp, #0
 8003cbe:	4652      	mov	r2, sl
 8003cc0:	465b      	mov	r3, fp
 8003cc2:	f04f 0000 	mov.w	r0, #0
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	0159      	lsls	r1, r3, #5
 8003ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd0:	0150      	lsls	r0, r2, #5
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	ebb2 080a 	subs.w	r8, r2, sl
 8003cda:	eb63 090b 	sbc.w	r9, r3, fp
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cf2:	ebb2 0408 	subs.w	r4, r2, r8
 8003cf6:	eb63 0509 	sbc.w	r5, r3, r9
 8003cfa:	f04f 0200 	mov.w	r2, #0
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	00eb      	lsls	r3, r5, #3
 8003d04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d08:	00e2      	lsls	r2, r4, #3
 8003d0a:	4614      	mov	r4, r2
 8003d0c:	461d      	mov	r5, r3
 8003d0e:	eb14 030a 	adds.w	r3, r4, sl
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	eb45 030b 	adc.w	r3, r5, fp
 8003d18:	607b      	str	r3, [r7, #4]
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d26:	4629      	mov	r1, r5
 8003d28:	028b      	lsls	r3, r1, #10
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d30:	4621      	mov	r1, r4
 8003d32:	028a      	lsls	r2, r1, #10
 8003d34:	4610      	mov	r0, r2
 8003d36:	4619      	mov	r1, r3
 8003d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	60fa      	str	r2, [r7, #12]
 8003d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d44:	f7fc faa4 	bl	8000290 <__aeabi_uldivmod>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	0c1b      	lsrs	r3, r3, #16
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d6a:	e002      	b.n	8003d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3740      	adds	r7, #64	; 0x40
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d7e:	bf00      	nop
 8003d80:	40023800 	.word	0x40023800
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	017d7840 	.word	0x017d7840

08003d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	2000000c 	.word	0x2000000c

08003da4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003da4:	b084      	sub	sp, #16
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
 8003dae:	f107 001c 	add.w	r0, r7, #28
 8003db2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d122      	bne.n	8003e02 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003dd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d105      	bne.n	8003df6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f001 fbee 	bl	80055d8 <USB_CoreReset>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	73fb      	strb	r3, [r7, #15]
 8003e00:	e01a      	b.n	8003e38 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f001 fbe2 	bl	80055d8 <USB_CoreReset>
 8003e14:	4603      	mov	r3, r0
 8003e16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	639a      	str	r2, [r3, #56]	; 0x38
 8003e2a:	e005      	b.n	8003e38 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d10b      	bne.n	8003e56 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f043 0206 	orr.w	r2, r3, #6
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f043 0220 	orr.w	r2, r3, #32
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e62:	b004      	add	sp, #16
 8003e64:	4770      	bx	lr
	...

08003e68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b087      	sub	sp, #28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	4613      	mov	r3, r2
 8003e74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e76:	79fb      	ldrb	r3, [r7, #7]
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d165      	bne.n	8003f48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4a41      	ldr	r2, [pc, #260]	; (8003f84 <USB_SetTurnaroundTime+0x11c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d906      	bls.n	8003e92 <USB_SetTurnaroundTime+0x2a>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4a40      	ldr	r2, [pc, #256]	; (8003f88 <USB_SetTurnaroundTime+0x120>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d202      	bcs.n	8003e92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e8c:	230f      	movs	r3, #15
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	e062      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4a3c      	ldr	r2, [pc, #240]	; (8003f88 <USB_SetTurnaroundTime+0x120>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d306      	bcc.n	8003ea8 <USB_SetTurnaroundTime+0x40>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	4a3b      	ldr	r2, [pc, #236]	; (8003f8c <USB_SetTurnaroundTime+0x124>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d202      	bcs.n	8003ea8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003ea2:	230e      	movs	r3, #14
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e057      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	4a38      	ldr	r2, [pc, #224]	; (8003f8c <USB_SetTurnaroundTime+0x124>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d306      	bcc.n	8003ebe <USB_SetTurnaroundTime+0x56>
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4a37      	ldr	r2, [pc, #220]	; (8003f90 <USB_SetTurnaroundTime+0x128>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d202      	bcs.n	8003ebe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003eb8:	230d      	movs	r3, #13
 8003eba:	617b      	str	r3, [r7, #20]
 8003ebc:	e04c      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4a33      	ldr	r2, [pc, #204]	; (8003f90 <USB_SetTurnaroundTime+0x128>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d306      	bcc.n	8003ed4 <USB_SetTurnaroundTime+0x6c>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	4a32      	ldr	r2, [pc, #200]	; (8003f94 <USB_SetTurnaroundTime+0x12c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d802      	bhi.n	8003ed4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ece:	230c      	movs	r3, #12
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e041      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4a2f      	ldr	r2, [pc, #188]	; (8003f94 <USB_SetTurnaroundTime+0x12c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d906      	bls.n	8003eea <USB_SetTurnaroundTime+0x82>
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4a2e      	ldr	r2, [pc, #184]	; (8003f98 <USB_SetTurnaroundTime+0x130>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d802      	bhi.n	8003eea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003ee4:	230b      	movs	r3, #11
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	e036      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	4a2a      	ldr	r2, [pc, #168]	; (8003f98 <USB_SetTurnaroundTime+0x130>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d906      	bls.n	8003f00 <USB_SetTurnaroundTime+0x98>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	4a29      	ldr	r2, [pc, #164]	; (8003f9c <USB_SetTurnaroundTime+0x134>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d802      	bhi.n	8003f00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003efa:	230a      	movs	r3, #10
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	e02b      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4a26      	ldr	r2, [pc, #152]	; (8003f9c <USB_SetTurnaroundTime+0x134>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d906      	bls.n	8003f16 <USB_SetTurnaroundTime+0xae>
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4a25      	ldr	r2, [pc, #148]	; (8003fa0 <USB_SetTurnaroundTime+0x138>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d202      	bcs.n	8003f16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f10:	2309      	movs	r3, #9
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	e020      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	4a21      	ldr	r2, [pc, #132]	; (8003fa0 <USB_SetTurnaroundTime+0x138>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d306      	bcc.n	8003f2c <USB_SetTurnaroundTime+0xc4>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	4a20      	ldr	r2, [pc, #128]	; (8003fa4 <USB_SetTurnaroundTime+0x13c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d802      	bhi.n	8003f2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f26:	2308      	movs	r3, #8
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	e015      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	4a1d      	ldr	r2, [pc, #116]	; (8003fa4 <USB_SetTurnaroundTime+0x13c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d906      	bls.n	8003f42 <USB_SetTurnaroundTime+0xda>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	4a1c      	ldr	r2, [pc, #112]	; (8003fa8 <USB_SetTurnaroundTime+0x140>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d202      	bcs.n	8003f42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003f3c:	2307      	movs	r3, #7
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e00a      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003f42:	2306      	movs	r3, #6
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	e007      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d102      	bne.n	8003f54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003f4e:	2309      	movs	r3, #9
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	e001      	b.n	8003f58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f54:	2309      	movs	r3, #9
 8003f56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	029b      	lsls	r3, r3, #10
 8003f6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003f70:	431a      	orrs	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	371c      	adds	r7, #28
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	00d8acbf 	.word	0x00d8acbf
 8003f88:	00e4e1c0 	.word	0x00e4e1c0
 8003f8c:	00f42400 	.word	0x00f42400
 8003f90:	01067380 	.word	0x01067380
 8003f94:	011a499f 	.word	0x011a499f
 8003f98:	01312cff 	.word	0x01312cff
 8003f9c:	014ca43f 	.word	0x014ca43f
 8003fa0:	016e3600 	.word	0x016e3600
 8003fa4:	01a6ab1f 	.word	0x01a6ab1f
 8003fa8:	01e84800 	.word	0x01e84800

08003fac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f043 0201 	orr.w	r2, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	370c      	adds	r7, #12
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	b083      	sub	sp, #12
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f023 0201 	bic.w	r2, r3, #1
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800400c:	78fb      	ldrb	r3, [r7, #3]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d115      	bne.n	800403e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800401e:	2001      	movs	r0, #1
 8004020:	f7fc ffda 	bl	8000fd8 <HAL_Delay>
      ms++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	3301      	adds	r3, #1
 8004028:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f001 fa45 	bl	80054ba <USB_GetMode>
 8004030:	4603      	mov	r3, r0
 8004032:	2b01      	cmp	r3, #1
 8004034:	d01e      	beq.n	8004074 <USB_SetCurrentMode+0x84>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b31      	cmp	r3, #49	; 0x31
 800403a:	d9f0      	bls.n	800401e <USB_SetCurrentMode+0x2e>
 800403c:	e01a      	b.n	8004074 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d115      	bne.n	8004070 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004050:	2001      	movs	r0, #1
 8004052:	f7fc ffc1 	bl	8000fd8 <HAL_Delay>
      ms++;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	3301      	adds	r3, #1
 800405a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f001 fa2c 	bl	80054ba <USB_GetMode>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <USB_SetCurrentMode+0x84>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b31      	cmp	r3, #49	; 0x31
 800406c:	d9f0      	bls.n	8004050 <USB_SetCurrentMode+0x60>
 800406e:	e001      	b.n	8004074 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e005      	b.n	8004080 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b32      	cmp	r3, #50	; 0x32
 8004078:	d101      	bne.n	800407e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3710      	adds	r7, #16
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004088:	b084      	sub	sp, #16
 800408a:	b580      	push	{r7, lr}
 800408c:	b086      	sub	sp, #24
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004096:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040a2:	2300      	movs	r3, #0
 80040a4:	613b      	str	r3, [r7, #16]
 80040a6:	e009      	b.n	80040bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	3340      	adds	r3, #64	; 0x40
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	2200      	movs	r2, #0
 80040b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	3301      	adds	r3, #1
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b0e      	cmp	r3, #14
 80040c0:	d9f2      	bls.n	80040a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80040c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d11c      	bne.n	8004102 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040d6:	f043 0302 	orr.w	r3, r3, #2
 80040da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38
 8004100:	e00b      	b.n	800411a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004120:	461a      	mov	r2, r3
 8004122:	2300      	movs	r3, #0
 8004124:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412c:	4619      	mov	r1, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004134:	461a      	mov	r2, r3
 8004136:	680b      	ldr	r3, [r1, #0]
 8004138:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	2b01      	cmp	r3, #1
 800413e:	d10c      	bne.n	800415a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004142:	2b00      	cmp	r3, #0
 8004144:	d104      	bne.n	8004150 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004146:	2100      	movs	r1, #0
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f965 	bl	8004418 <USB_SetDevSpeed>
 800414e:	e008      	b.n	8004162 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004150:	2101      	movs	r1, #1
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 f960 	bl	8004418 <USB_SetDevSpeed>
 8004158:	e003      	b.n	8004162 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800415a:	2103      	movs	r1, #3
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f000 f95b 	bl	8004418 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004162:	2110      	movs	r1, #16
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f8f3 	bl	8004350 <USB_FlushTxFifo>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f91f 	bl	80043b8 <USB_FlushRxFifo>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800418a:	461a      	mov	r2, r3
 800418c:	2300      	movs	r3, #0
 800418e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004196:	461a      	mov	r2, r3
 8004198:	2300      	movs	r3, #0
 800419a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a2:	461a      	mov	r2, r3
 80041a4:	2300      	movs	r3, #0
 80041a6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	e043      	b.n	8004236 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041c4:	d118      	bne.n	80041f8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10a      	bne.n	80041e2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d8:	461a      	mov	r2, r3
 80041da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	e013      	b.n	800420a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ee:	461a      	mov	r2, r3
 80041f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e008      	b.n	800420a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004204:	461a      	mov	r2, r3
 8004206:	2300      	movs	r3, #0
 8004208:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004216:	461a      	mov	r2, r3
 8004218:	2300      	movs	r3, #0
 800421a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004228:	461a      	mov	r2, r3
 800422a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800422e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	3301      	adds	r3, #1
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	429a      	cmp	r2, r3
 800423c:	d3b7      	bcc.n	80041ae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800423e:	2300      	movs	r3, #0
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	e043      	b.n	80042cc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800425a:	d118      	bne.n	800428e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4413      	add	r3, r2
 800426a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426e:	461a      	mov	r2, r3
 8004270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	e013      	b.n	80042a0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004284:	461a      	mov	r2, r3
 8004286:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	e008      	b.n	80042a0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429a:	461a      	mov	r2, r3
 800429c:	2300      	movs	r3, #0
 800429e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ac:	461a      	mov	r2, r3
 80042ae:	2300      	movs	r3, #0
 80042b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042be:	461a      	mov	r2, r3
 80042c0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80042c4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	3301      	adds	r3, #1
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d3b7      	bcc.n	8004244 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042e6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80042f4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d105      	bne.n	8004308 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699b      	ldr	r3, [r3, #24]
 8004300:	f043 0210 	orr.w	r2, r3, #16
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699a      	ldr	r2, [r3, #24]
 800430c:	4b0f      	ldr	r3, [pc, #60]	; (800434c <USB_DevInit+0x2c4>)
 800430e:	4313      	orrs	r3, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	f043 0208 	orr.w	r2, r3, #8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d107      	bne.n	800433c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	699b      	ldr	r3, [r3, #24]
 8004330:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004334:	f043 0304 	orr.w	r3, r3, #4
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800433c:	7dfb      	ldrb	r3, [r7, #23]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004348:	b004      	add	sp, #16
 800434a:	4770      	bx	lr
 800434c:	803c3800 	.word	0x803c3800

08004350 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3301      	adds	r3, #1
 8004362:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <USB_FlushTxFifo+0x64>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d901      	bls.n	8004370 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e01b      	b.n	80043a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	daf2      	bge.n	800435e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	019b      	lsls	r3, r3, #6
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3301      	adds	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <USB_FlushTxFifo+0x64>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e006      	b.n	80043a8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b20      	cmp	r3, #32
 80043a4:	d0f0      	beq.n	8004388 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3714      	adds	r7, #20
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	00030d40 	.word	0x00030d40

080043b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3301      	adds	r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4a11      	ldr	r2, [pc, #68]	; (8004414 <USB_FlushRxFifo+0x5c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e018      	b.n	8004408 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	daf2      	bge.n	80043c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2210      	movs	r2, #16
 80043e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3301      	adds	r3, #1
 80043ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4a08      	ldr	r2, [pc, #32]	; (8004414 <USB_FlushRxFifo+0x5c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e006      	b.n	8004408 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b10      	cmp	r3, #16
 8004404:	d0f0      	beq.n	80043e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	00030d40 	.word	0x00030d40

08004418 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	68f9      	ldr	r1, [r7, #12]
 8004434:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004438:	4313      	orrs	r3, r2
 800443a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800444a:	b480      	push	{r7}
 800444c:	b087      	sub	sp, #28
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 0306 	and.w	r3, r3, #6
 8004462:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d102      	bne.n	8004470 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800446a:	2300      	movs	r3, #0
 800446c:	75fb      	strb	r3, [r7, #23]
 800446e:	e00a      	b.n	8004486 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d002      	beq.n	800447c <USB_GetDevSpeed+0x32>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b06      	cmp	r3, #6
 800447a:	d102      	bne.n	8004482 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800447c:	2302      	movs	r3, #2
 800447e:	75fb      	strb	r3, [r7, #23]
 8004480:	e001      	b.n	8004486 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004482:	230f      	movs	r3, #15
 8004484:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004486:	7dfb      	ldrb	r3, [r7, #23]
}
 8004488:	4618      	mov	r0, r3
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	785b      	ldrb	r3, [r3, #1]
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d13a      	bne.n	8004526 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b6:	69da      	ldr	r2, [r3, #28]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	2101      	movs	r1, #1
 80044c2:	fa01 f303 	lsl.w	r3, r1, r3
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	68f9      	ldr	r1, [r7, #12]
 80044ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d155      	bne.n	8004594 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	791b      	ldrb	r3, [r3, #4]
 8004502:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004504:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	059b      	lsls	r3, r3, #22
 800450a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800450c:	4313      	orrs	r3, r2
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	440a      	add	r2, r1
 8004516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800451a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	e036      	b.n	8004594 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452c:	69da      	ldr	r2, [r3, #28]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	2101      	movs	r1, #1
 8004538:	fa01 f303 	lsl.w	r3, r1, r3
 800453c:	041b      	lsls	r3, r3, #16
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004544:	4313      	orrs	r3, r2
 8004546:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d11a      	bne.n	8004594 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	791b      	ldrb	r3, [r3, #4]
 8004578:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800457a:	430b      	orrs	r3, r1
 800457c:	4313      	orrs	r3, r2
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	0151      	lsls	r1, r2, #5
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	440a      	add	r2, r1
 8004586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800458a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004592:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
	...

080045a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	785b      	ldrb	r3, [r3, #1]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d161      	bne.n	8004684 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045d6:	d11f      	bne.n	8004618 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	0151      	lsls	r1, r2, #5
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	440a      	add	r2, r1
 80045ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	440a      	add	r2, r1
 800460e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004612:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004616:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	2101      	movs	r1, #1
 800462a:	fa01 f303 	lsl.w	r3, r1, r3
 800462e:	b29b      	uxth	r3, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	68f9      	ldr	r1, [r7, #12]
 8004634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004638:	4013      	ands	r3, r2
 800463a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004642:	69da      	ldr	r2, [r3, #28]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	f003 030f 	and.w	r3, r3, #15
 800464c:	2101      	movs	r1, #1
 800464e:	fa01 f303 	lsl.w	r3, r1, r3
 8004652:	b29b      	uxth	r3, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	68f9      	ldr	r1, [r7, #12]
 8004658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800465c:	4013      	ands	r3, r2
 800465e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	0159      	lsls	r1, r3, #5
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	440b      	add	r3, r1
 8004676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467a:	4619      	mov	r1, r3
 800467c:	4b35      	ldr	r3, [pc, #212]	; (8004754 <USB_DeactivateEndpoint+0x1b0>)
 800467e:	4013      	ands	r3, r2
 8004680:	600b      	str	r3, [r1, #0]
 8004682:	e060      	b.n	8004746 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800469a:	d11f      	bne.n	80046dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	68fa      	ldr	r2, [r7, #12]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	0151      	lsls	r1, r2, #5
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	440a      	add	r2, r1
 80046d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	2101      	movs	r1, #1
 80046ee:	fa01 f303 	lsl.w	r3, r1, r3
 80046f2:	041b      	lsls	r3, r3, #16
 80046f4:	43db      	mvns	r3, r3
 80046f6:	68f9      	ldr	r1, [r7, #12]
 80046f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046fc:	4013      	ands	r3, r2
 80046fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004706:	69da      	ldr	r2, [r3, #28]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	2101      	movs	r1, #1
 8004712:	fa01 f303 	lsl.w	r3, r1, r3
 8004716:	041b      	lsls	r3, r3, #16
 8004718:	43db      	mvns	r3, r3
 800471a:	68f9      	ldr	r1, [r7, #12]
 800471c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004720:	4013      	ands	r3, r2
 8004722:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	0159      	lsls	r1, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	440b      	add	r3, r1
 800473a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473e:	4619      	mov	r1, r3
 8004740:	4b05      	ldr	r3, [pc, #20]	; (8004758 <USB_DeactivateEndpoint+0x1b4>)
 8004742:	4013      	ands	r3, r2
 8004744:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	ec337800 	.word	0xec337800
 8004758:	eff37800 	.word	0xeff37800

0800475c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b08a      	sub	sp, #40	; 0x28
 8004760:	af02      	add	r7, sp, #8
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	785b      	ldrb	r3, [r3, #1]
 8004778:	2b01      	cmp	r3, #1
 800477a:	f040 815c 	bne.w	8004a36 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d132      	bne.n	80047ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	0151      	lsls	r1, r2, #5
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	440a      	add	r2, r1
 800479c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	015a      	lsls	r2, r3, #5
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	4413      	add	r3, r2
 80047b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	0151      	lsls	r1, r2, #5
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	440a      	add	r2, r1
 80047c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	0151      	lsls	r1, r2, #5
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	440a      	add	r2, r1
 80047e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047e4:	0cdb      	lsrs	r3, r3, #19
 80047e6:	04db      	lsls	r3, r3, #19
 80047e8:	6113      	str	r3, [r2, #16]
 80047ea:	e074      	b.n	80048d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	015a      	lsls	r2, r3, #5
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	4413      	add	r3, r2
 80047f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	0151      	lsls	r1, r2, #5
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	440a      	add	r2, r1
 8004802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004806:	0cdb      	lsrs	r3, r3, #19
 8004808:	04db      	lsls	r3, r3, #19
 800480a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	69ba      	ldr	r2, [r7, #24]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	440a      	add	r2, r1
 8004822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004826:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800482a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800482e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6999      	ldr	r1, [r3, #24]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	440b      	add	r3, r1
 8004848:	1e59      	subs	r1, r3, #1
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004852:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004854:	4b9d      	ldr	r3, [pc, #628]	; (8004acc <USB_EPStartXfer+0x370>)
 8004856:	400b      	ands	r3, r1
 8004858:	69b9      	ldr	r1, [r7, #24]
 800485a:	0148      	lsls	r0, r1, #5
 800485c:	69f9      	ldr	r1, [r7, #28]
 800485e:	4401      	add	r1, r0
 8004860:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004864:	4313      	orrs	r3, r2
 8004866:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004874:	691a      	ldr	r2, [r3, #16]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800487e:	69b9      	ldr	r1, [r7, #24]
 8004880:	0148      	lsls	r0, r1, #5
 8004882:	69f9      	ldr	r1, [r7, #28]
 8004884:	4401      	add	r1, r0
 8004886:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800488a:	4313      	orrs	r3, r2
 800488c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	791b      	ldrb	r3, [r3, #4]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d11f      	bne.n	80048d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80048b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d14b      	bne.n	8004974 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d009      	beq.n	80048f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	015a      	lsls	r2, r3, #5
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	4413      	add	r3, r2
 80048ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f0:	461a      	mov	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	791b      	ldrb	r3, [r3, #4]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d128      	bne.n	8004952 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490c:	2b00      	cmp	r3, #0
 800490e:	d110      	bne.n	8004932 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	69ba      	ldr	r2, [r7, #24]
 8004920:	0151      	lsls	r1, r2, #5
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	440a      	add	r2, r1
 8004926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	e00f      	b.n	8004952 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	0151      	lsls	r1, r2, #5
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	440a      	add	r2, r1
 8004948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004950:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	69fa      	ldr	r2, [r7, #28]
 8004966:	440a      	add	r2, r1
 8004968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	e133      	b.n	8004bdc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	0151      	lsls	r1, r2, #5
 8004986:	69fa      	ldr	r2, [r7, #28]
 8004988:	440a      	add	r2, r1
 800498a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800498e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004992:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	791b      	ldrb	r3, [r3, #4]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d015      	beq.n	80049c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 811b 	beq.w	8004bdc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	2101      	movs	r1, #1
 80049b8:	fa01 f303 	lsl.w	r3, r1, r3
 80049bc:	69f9      	ldr	r1, [r7, #28]
 80049be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049c2:	4313      	orrs	r3, r2
 80049c4:	634b      	str	r3, [r1, #52]	; 0x34
 80049c6:	e109      	b.n	8004bdc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d110      	bne.n	80049fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	0151      	lsls	r1, r2, #5
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	440a      	add	r2, r1
 80049ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049f6:	6013      	str	r3, [r2, #0]
 80049f8:	e00f      	b.n	8004a1a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	69fa      	ldr	r2, [r7, #28]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a18:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	6919      	ldr	r1, [r3, #16]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	781a      	ldrb	r2, [r3, #0]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	699b      	ldr	r3, [r3, #24]
 8004a26:	b298      	uxth	r0, r3
 8004a28:	79fb      	ldrb	r3, [r7, #7]
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fade 	bl	8004ff0 <USB_WritePacket>
 8004a34:	e0d2      	b.n	8004bdc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	015a      	lsls	r2, r3, #5
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	0151      	lsls	r1, r2, #5
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	440a      	add	r2, r1
 8004a4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a50:	0cdb      	lsrs	r3, r3, #19
 8004a52:	04db      	lsls	r3, r3, #19
 8004a54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	0151      	lsls	r1, r2, #5
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	440a      	add	r2, r1
 8004a6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d126      	bne.n	8004ad0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a98:	69b9      	ldr	r1, [r7, #24]
 8004a9a:	0148      	lsls	r0, r1, #5
 8004a9c:	69f9      	ldr	r1, [r7, #28]
 8004a9e:	4401      	add	r1, r0
 8004aa0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	0151      	lsls	r1, r2, #5
 8004aba:	69fa      	ldr	r2, [r7, #28]
 8004abc:	440a      	add	r2, r1
 8004abe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ac2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ac6:	6113      	str	r3, [r2, #16]
 8004ac8:	e03a      	b.n	8004b40 <USB_EPStartXfer+0x3e4>
 8004aca:	bf00      	nop
 8004acc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	699a      	ldr	r2, [r3, #24]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	4413      	add	r3, r2
 8004ada:	1e5a      	subs	r2, r3, #1
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	8afa      	ldrh	r2, [r7, #22]
 8004aec:	fb03 f202 	mul.w	r2, r3, r2
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	015a      	lsls	r2, r3, #5
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	4413      	add	r3, r2
 8004afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	8afb      	ldrh	r3, [r7, #22]
 8004b04:	04d9      	lsls	r1, r3, #19
 8004b06:	4b38      	ldr	r3, [pc, #224]	; (8004be8 <USB_EPStartXfer+0x48c>)
 8004b08:	400b      	ands	r3, r1
 8004b0a:	69b9      	ldr	r1, [r7, #24]
 8004b0c:	0148      	lsls	r0, r1, #5
 8004b0e:	69f9      	ldr	r1, [r7, #28]
 8004b10:	4401      	add	r1, r0
 8004b12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b16:	4313      	orrs	r3, r2
 8004b18:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b30:	69b9      	ldr	r1, [r7, #24]
 8004b32:	0148      	lsls	r0, r1, #5
 8004b34:	69f9      	ldr	r1, [r7, #28]
 8004b36:	4401      	add	r1, r0
 8004b38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b40:	79fb      	ldrb	r3, [r7, #7]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d10d      	bne.n	8004b62 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	6919      	ldr	r1, [r3, #16]
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	015a      	lsls	r2, r3, #5
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	4413      	add	r3, r2
 8004b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5e:	460a      	mov	r2, r1
 8004b60:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	791b      	ldrb	r3, [r3, #4]
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d128      	bne.n	8004bbc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d110      	bne.n	8004b9c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	0151      	lsls	r1, r2, #5
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	440a      	add	r2, r1
 8004b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e00f      	b.n	8004bbc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	0151      	lsls	r1, r2, #5
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	440a      	add	r2, r1
 8004bb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bba:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	015a      	lsls	r2, r3, #5
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	0151      	lsls	r1, r2, #5
 8004bce:	69fa      	ldr	r2, [r7, #28]
 8004bd0:	440a      	add	r2, r1
 8004bd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004bda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3720      	adds	r7, #32
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	1ff80000 	.word	0x1ff80000

08004bec <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b087      	sub	sp, #28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	785b      	ldrb	r3, [r3, #1]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	f040 80ce 	bne.w	8004daa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d132      	bne.n	8004c7c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	0151      	lsls	r1, r2, #5
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	0151      	lsls	r1, r2, #5
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	440a      	add	r2, r1
 8004c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c74:	0cdb      	lsrs	r3, r3, #19
 8004c76:	04db      	lsls	r3, r3, #19
 8004c78:	6113      	str	r3, [r2, #16]
 8004c7a:	e04e      	b.n	8004d1a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	0151      	lsls	r1, r2, #5
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	440a      	add	r2, r1
 8004c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c96:	0cdb      	lsrs	r3, r3, #19
 8004c98:	04db      	lsls	r3, r3, #19
 8004c9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	0151      	lsls	r1, r2, #5
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	440a      	add	r2, r1
 8004cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cbe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	699a      	ldr	r2, [r3, #24]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d903      	bls.n	8004cd4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	693a      	ldr	r2, [r7, #16]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d00:	691a      	ldr	r2, [r3, #16]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d0a:	6939      	ldr	r1, [r7, #16]
 8004d0c:	0148      	lsls	r0, r1, #5
 8004d0e:	6979      	ldr	r1, [r7, #20]
 8004d10:	4401      	add	r1, r0
 8004d12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d16:	4313      	orrs	r3, r2
 8004d18:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d1a:	79fb      	ldrb	r3, [r7, #7]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d11e      	bne.n	8004d5e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d009      	beq.n	8004d3c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d34:	461a      	mov	r2, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	015a      	lsls	r2, r3, #5
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	4413      	add	r3, r2
 8004d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	0151      	lsls	r1, r2, #5
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	440a      	add	r2, r1
 8004d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d5a:	6013      	str	r3, [r2, #0]
 8004d5c:	e097      	b.n	8004e8e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	0151      	lsls	r1, r2, #5
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	440a      	add	r2, r1
 8004d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d7c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 8083 	beq.w	8004e8e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	f003 030f 	and.w	r3, r3, #15
 8004d98:	2101      	movs	r1, #1
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	6979      	ldr	r1, [r7, #20]
 8004da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004da4:	4313      	orrs	r3, r2
 8004da6:	634b      	str	r3, [r1, #52]	; 0x34
 8004da8:	e071      	b.n	8004e8e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc4:	0cdb      	lsrs	r3, r3, #19
 8004dc6:	04db      	lsls	r3, r3, #19
 8004dc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	0151      	lsls	r1, r2, #5
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	440a      	add	r2, r1
 8004de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004de4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004de8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dec:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	68da      	ldr	r2, [r3, #12]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	0151      	lsls	r1, r2, #5
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	440a      	add	r2, r1
 8004e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e3c:	6939      	ldr	r1, [r7, #16]
 8004e3e:	0148      	lsls	r0, r1, #5
 8004e40:	6979      	ldr	r1, [r7, #20]
 8004e42:	4401      	add	r1, r0
 8004e44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004e4c:	79fb      	ldrb	r3, [r7, #7]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d10d      	bne.n	8004e6e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	6919      	ldr	r1, [r3, #16]
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6a:	460a      	mov	r2, r1
 8004e6c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	015a      	lsls	r2, r3, #5
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	4413      	add	r3, r2
 8004e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	0151      	lsls	r1, r2, #5
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	440a      	add	r2, r1
 8004e84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	785b      	ldrb	r3, [r3, #1]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d14a      	bne.n	8004f50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ece:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed2:	f040 8086 	bne.w	8004fe2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	7812      	ldrb	r2, [r2, #0]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ef8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	7812      	ldrb	r2, [r2, #0]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d902      	bls.n	8004f34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	75fb      	strb	r3, [r7, #23]
          break;
 8004f32:	e056      	b.n	8004fe2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f4c:	d0e7      	beq.n	8004f1e <USB_EPStopXfer+0x82>
 8004f4e:	e048      	b.n	8004fe2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f68:	d13b      	bne.n	8004fe2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	7812      	ldrb	r2, [r2, #0]
 8004f7e:	0151      	lsls	r1, r2, #5
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	440a      	add	r2, r1
 8004f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	7812      	ldrb	r2, [r2, #0]
 8004fa2:	0151      	lsls	r1, r2, #5
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	440a      	add	r2, r1
 8004fa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f242 7210 	movw	r2, #10000	; 0x2710
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d902      	bls.n	8004fc8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	75fb      	strb	r3, [r7, #23]
          break;
 8004fc6:	e00c      	b.n	8004fe2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fe0:	d0e7      	beq.n	8004fb2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	371c      	adds	r7, #28
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b089      	sub	sp, #36	; 0x24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	460b      	mov	r3, r1
 8005000:	71fb      	strb	r3, [r7, #7]
 8005002:	4613      	mov	r3, r2
 8005004:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800500e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005012:	2b00      	cmp	r3, #0
 8005014:	d123      	bne.n	800505e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005016:	88bb      	ldrh	r3, [r7, #4]
 8005018:	3303      	adds	r3, #3
 800501a:	089b      	lsrs	r3, r3, #2
 800501c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	e018      	b.n	8005056 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	031a      	lsls	r2, r3, #12
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005030:	461a      	mov	r2, r3
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	3301      	adds	r3, #1
 800503c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	3301      	adds	r3, #1
 8005042:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	3301      	adds	r3, #1
 8005048:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	3301      	adds	r3, #1
 800504e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	3301      	adds	r3, #1
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	429a      	cmp	r2, r3
 800505c:	d3e2      	bcc.n	8005024 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3724      	adds	r7, #36	; 0x24
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800506c:	b480      	push	{r7}
 800506e:	b08b      	sub	sp, #44	; 0x2c
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	4613      	mov	r3, r2
 8005078:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	089b      	lsrs	r3, r3, #2
 8005086:	b29b      	uxth	r3, r3
 8005088:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800508a:	88fb      	ldrh	r3, [r7, #6]
 800508c:	f003 0303 	and.w	r3, r3, #3
 8005090:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005092:	2300      	movs	r3, #0
 8005094:	623b      	str	r3, [r7, #32]
 8005096:	e014      	b.n	80050c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80050a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a6:	3301      	adds	r3, #1
 80050a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	3301      	adds	r3, #1
 80050ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	3301      	adds	r3, #1
 80050b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	3301      	adds	r3, #1
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	3301      	adds	r3, #1
 80050c0:	623b      	str	r3, [r7, #32]
 80050c2:	6a3a      	ldr	r2, [r7, #32]
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d3e6      	bcc.n	8005098 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050ca:	8bfb      	ldrh	r3, [r7, #30]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01e      	beq.n	800510e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050da:	461a      	mov	r2, r3
 80050dc:	f107 0310 	add.w	r3, r7, #16
 80050e0:	6812      	ldr	r2, [r2, #0]
 80050e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
 80050f0:	b2da      	uxtb	r2, r3
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	701a      	strb	r2, [r3, #0]
      i++;
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	3301      	adds	r3, #1
 80050fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	3301      	adds	r3, #1
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005102:	8bfb      	ldrh	r3, [r7, #30]
 8005104:	3b01      	subs	r3, #1
 8005106:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005108:	8bfb      	ldrh	r3, [r7, #30]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1ea      	bne.n	80050e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005110:	4618      	mov	r0, r3
 8005112:	372c      	adds	r7, #44	; 0x2c
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	785b      	ldrb	r3, [r3, #1]
 8005134:	2b01      	cmp	r3, #1
 8005136:	d12c      	bne.n	8005192 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	db12      	blt.n	8005170 <USB_EPSetStall+0x54>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00f      	beq.n	8005170 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	4413      	add	r3, r2
 8005158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	440a      	add	r2, r1
 8005166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800516a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800516e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800518e:	6013      	str	r3, [r2, #0]
 8005190:	e02b      	b.n	80051ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	db12      	blt.n	80051ca <USB_EPSetStall+0xae>
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00f      	beq.n	80051ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	0151      	lsls	r1, r2, #5
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	440a      	add	r2, r1
 80051c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	015a      	lsls	r2, r3, #5
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	4413      	add	r3, r2
 80051d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	0151      	lsls	r1, r2, #5
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	440a      	add	r2, r1
 80051e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	785b      	ldrb	r3, [r3, #1]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d128      	bne.n	8005266 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	0151      	lsls	r1, r2, #5
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	440a      	add	r2, r1
 800522a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800522e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005232:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	791b      	ldrb	r3, [r3, #4]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d003      	beq.n	8005244 <USB_EPClearStall+0x4c>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	791b      	ldrb	r3, [r3, #4]
 8005240:	2b02      	cmp	r3, #2
 8005242:	d138      	bne.n	80052b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68ba      	ldr	r2, [r7, #8]
 8005254:	0151      	lsls	r1, r2, #5
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	440a      	add	r2, r1
 800525a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800525e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	e027      	b.n	80052b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68ba      	ldr	r2, [r7, #8]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	440a      	add	r2, r1
 800527c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005280:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005284:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	791b      	ldrb	r3, [r3, #4]
 800528a:	2b03      	cmp	r3, #3
 800528c:	d003      	beq.n	8005296 <USB_EPClearStall+0x9e>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	791b      	ldrb	r3, [r3, #4]
 8005292:	2b02      	cmp	r3, #2
 8005294:	d10f      	bne.n	80052b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68ba      	ldr	r2, [r7, #8]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80052f8:	68f9      	ldr	r1, [r7, #12]
 80052fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052fe:	4313      	orrs	r3, r2
 8005300:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800532a:	f023 0303 	bic.w	r3, r3, #3
 800532e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800533e:	f023 0302 	bic.w	r3, r3, #2
 8005342:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800536c:	f023 0303 	bic.w	r3, r3, #3
 8005370:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005380:	f043 0302 	orr.w	r3, r3, #2
 8005384:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005386:	2300      	movs	r3, #0
}
 8005388:	4618      	mov	r0, r3
 800538a:	3714      	adds	r7, #20
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4013      	ands	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053ac:	68fb      	ldr	r3, [r7, #12]
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ba:	b480      	push	{r7}
 80053bc:	b085      	sub	sp, #20
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	4013      	ands	r3, r2
 80053dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	0c1b      	lsrs	r3, r3, #16
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80053ee:	b480      	push	{r7}
 80053f0:	b085      	sub	sp, #20
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	4013      	ands	r3, r2
 8005410:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	b29b      	uxth	r3, r3
}
 8005416:	4618      	mov	r0, r3
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr

08005422 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005422:	b480      	push	{r7}
 8005424:	b085      	sub	sp, #20
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
 800542a:	460b      	mov	r3, r1
 800542c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005432:	78fb      	ldrb	r3, [r7, #3]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4013      	ands	r3, r2
 800544e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005450:	68bb      	ldr	r3, [r7, #8]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800545e:	b480      	push	{r7}
 8005460:	b087      	sub	sp, #28
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	460b      	mov	r3, r1
 8005468:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005480:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005482:	78fb      	ldrb	r3, [r7, #3]
 8005484:	f003 030f 	and.w	r3, r3, #15
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	fa22 f303 	lsr.w	r3, r2, r3
 800548e:	01db      	lsls	r3, r3, #7
 8005490:	b2db      	uxtb	r3, r3
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005498:	78fb      	ldrb	r3, [r7, #3]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4013      	ands	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054ac:	68bb      	ldr	r3, [r7, #8]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0301 	and.w	r3, r3, #1
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80054f4:	f023 0307 	bic.w	r3, r3, #7
 80054f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800550c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	460b      	mov	r3, r1
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	333c      	adds	r3, #60	; 0x3c
 8005532:	3304      	adds	r3, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	4a26      	ldr	r2, [pc, #152]	; (80055d4 <USB_EP0_OutStart+0xb8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d90a      	bls.n	8005556 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800554c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005550:	d101      	bne.n	8005556 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005552:	2300      	movs	r3, #0
 8005554:	e037      	b.n	80055c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	461a      	mov	r2, r3
 800555e:	2300      	movs	r3, #0
 8005560:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005568:	691b      	ldr	r3, [r3, #16]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005574:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005584:	f043 0318 	orr.w	r3, r3, #24
 8005588:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005598:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800559c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800559e:	7afb      	ldrb	r3, [r7, #11]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d10f      	bne.n	80055c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055aa:	461a      	mov	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	697a      	ldr	r2, [r7, #20]
 80055ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80055c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	4f54300a 	.word	0x4f54300a

080055d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	3301      	adds	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4a13      	ldr	r2, [pc, #76]	; (800563c <USB_CoreReset+0x64>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d901      	bls.n	80055f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e01b      	b.n	800562e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	daf2      	bge.n	80055e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f043 0201 	orr.w	r2, r3, #1
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3301      	adds	r3, #1
 8005612:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4a09      	ldr	r2, [pc, #36]	; (800563c <USB_CoreReset+0x64>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d901      	bls.n	8005620 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e006      	b.n	800562e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	691b      	ldr	r3, [r3, #16]
 8005624:	f003 0301 	and.w	r3, r3, #1
 8005628:	2b01      	cmp	r3, #1
 800562a:	d0f0      	beq.n	800560e <USB_CoreReset+0x36>

  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	00030d40 	.word	0x00030d40

08005640 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800564c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005650:	f006 fd92 	bl	800c178 <USBD_static_malloc>
 8005654:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d109      	bne.n	8005670 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	32b0      	adds	r2, #176	; 0xb0
 8005666:	2100      	movs	r1, #0
 8005668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800566c:	2302      	movs	r3, #2
 800566e:	e0d4      	b.n	800581a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005670:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005674:	2100      	movs	r1, #0
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f006 fdfc 	bl	800c274 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	32b0      	adds	r2, #176	; 0xb0
 8005686:	68f9      	ldr	r1, [r7, #12]
 8005688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	32b0      	adds	r2, #176	; 0xb0
 8005696:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	7c1b      	ldrb	r3, [r3, #16]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d138      	bne.n	800571a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80056a8:	4b5e      	ldr	r3, [pc, #376]	; (8005824 <USBD_CDC_Init+0x1e4>)
 80056aa:	7819      	ldrb	r1, [r3, #0]
 80056ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056b0:	2202      	movs	r2, #2
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f006 fc3d 	bl	800bf32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80056b8:	4b5a      	ldr	r3, [pc, #360]	; (8005824 <USBD_CDC_Init+0x1e4>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	f003 020f 	and.w	r2, r3, #15
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	440b      	add	r3, r1
 80056cc:	3324      	adds	r3, #36	; 0x24
 80056ce:	2201      	movs	r2, #1
 80056d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80056d2:	4b55      	ldr	r3, [pc, #340]	; (8005828 <USBD_CDC_Init+0x1e8>)
 80056d4:	7819      	ldrb	r1, [r3, #0]
 80056d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056da:	2202      	movs	r2, #2
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f006 fc28 	bl	800bf32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80056e2:	4b51      	ldr	r3, [pc, #324]	; (8005828 <USBD_CDC_Init+0x1e8>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f003 020f 	and.w	r2, r3, #15
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80056fa:	2201      	movs	r2, #1
 80056fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80056fe:	4b4b      	ldr	r3, [pc, #300]	; (800582c <USBD_CDC_Init+0x1ec>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	f003 020f 	and.w	r2, r3, #15
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	3326      	adds	r3, #38	; 0x26
 8005714:	2210      	movs	r2, #16
 8005716:	801a      	strh	r2, [r3, #0]
 8005718:	e035      	b.n	8005786 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800571a:	4b42      	ldr	r3, [pc, #264]	; (8005824 <USBD_CDC_Init+0x1e4>)
 800571c:	7819      	ldrb	r1, [r3, #0]
 800571e:	2340      	movs	r3, #64	; 0x40
 8005720:	2202      	movs	r2, #2
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f006 fc05 	bl	800bf32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005728:	4b3e      	ldr	r3, [pc, #248]	; (8005824 <USBD_CDC_Init+0x1e4>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	f003 020f 	and.w	r2, r3, #15
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	3324      	adds	r3, #36	; 0x24
 800573e:	2201      	movs	r2, #1
 8005740:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005742:	4b39      	ldr	r3, [pc, #228]	; (8005828 <USBD_CDC_Init+0x1e8>)
 8005744:	7819      	ldrb	r1, [r3, #0]
 8005746:	2340      	movs	r3, #64	; 0x40
 8005748:	2202      	movs	r2, #2
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f006 fbf1 	bl	800bf32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005750:	4b35      	ldr	r3, [pc, #212]	; (8005828 <USBD_CDC_Init+0x1e8>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	f003 020f 	and.w	r2, r3, #15
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005768:	2201      	movs	r2, #1
 800576a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800576c:	4b2f      	ldr	r3, [pc, #188]	; (800582c <USBD_CDC_Init+0x1ec>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	f003 020f 	and.w	r2, r3, #15
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	3326      	adds	r3, #38	; 0x26
 8005782:	2210      	movs	r2, #16
 8005784:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005786:	4b29      	ldr	r3, [pc, #164]	; (800582c <USBD_CDC_Init+0x1ec>)
 8005788:	7819      	ldrb	r1, [r3, #0]
 800578a:	2308      	movs	r3, #8
 800578c:	2203      	movs	r2, #3
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f006 fbcf 	bl	800bf32 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005794:	4b25      	ldr	r3, [pc, #148]	; (800582c <USBD_CDC_Init+0x1ec>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	f003 020f 	and.w	r2, r3, #15
 800579c:	6879      	ldr	r1, [r7, #4]
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	440b      	add	r3, r1
 80057a8:	3324      	adds	r3, #36	; 0x24
 80057aa:	2201      	movs	r2, #1
 80057ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	33b0      	adds	r3, #176	; 0xb0
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	4413      	add	r3, r2
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80057e4:	2302      	movs	r3, #2
 80057e6:	e018      	b.n	800581a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	7c1b      	ldrb	r3, [r3, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10a      	bne.n	8005806 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80057f0:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <USBD_CDC_Init+0x1e8>)
 80057f2:	7819      	ldrb	r1, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80057fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f006 fc86 	bl	800c110 <USBD_LL_PrepareReceive>
 8005804:	e008      	b.n	8005818 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005806:	4b08      	ldr	r3, [pc, #32]	; (8005828 <USBD_CDC_Init+0x1e8>)
 8005808:	7819      	ldrb	r1, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005810:	2340      	movs	r3, #64	; 0x40
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f006 fc7c 	bl	800c110 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	2000009f 	.word	0x2000009f
 8005828:	200000a0 	.word	0x200000a0
 800582c:	200000a1 	.word	0x200000a1

08005830 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800583c:	4b3a      	ldr	r3, [pc, #232]	; (8005928 <USBD_CDC_DeInit+0xf8>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	4619      	mov	r1, r3
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f006 fb9b 	bl	800bf7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005848:	4b37      	ldr	r3, [pc, #220]	; (8005928 <USBD_CDC_DeInit+0xf8>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	f003 020f 	and.w	r2, r3, #15
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	440b      	add	r3, r1
 800585c:	3324      	adds	r3, #36	; 0x24
 800585e:	2200      	movs	r2, #0
 8005860:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005862:	4b32      	ldr	r3, [pc, #200]	; (800592c <USBD_CDC_DeInit+0xfc>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f006 fb88 	bl	800bf7e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800586e:	4b2f      	ldr	r3, [pc, #188]	; (800592c <USBD_CDC_DeInit+0xfc>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	f003 020f 	and.w	r2, r3, #15
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005886:	2200      	movs	r2, #0
 8005888:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800588a:	4b29      	ldr	r3, [pc, #164]	; (8005930 <USBD_CDC_DeInit+0x100>)
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f006 fb74 	bl	800bf7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005896:	4b26      	ldr	r3, [pc, #152]	; (8005930 <USBD_CDC_DeInit+0x100>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	f003 020f 	and.w	r2, r3, #15
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	3324      	adds	r3, #36	; 0x24
 80058ac:	2200      	movs	r2, #0
 80058ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80058b0:	4b1f      	ldr	r3, [pc, #124]	; (8005930 <USBD_CDC_DeInit+0x100>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	f003 020f 	and.w	r2, r3, #15
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	440b      	add	r3, r1
 80058c4:	3326      	adds	r3, #38	; 0x26
 80058c6:	2200      	movs	r2, #0
 80058c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	32b0      	adds	r2, #176	; 0xb0
 80058d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01f      	beq.n	800591c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	33b0      	adds	r3, #176	; 0xb0
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	32b0      	adds	r2, #176	; 0xb0
 80058fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058fe:	4618      	mov	r0, r3
 8005900:	f006 fc48 	bl	800c194 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	32b0      	adds	r2, #176	; 0xb0
 800590e:	2100      	movs	r1, #0
 8005910:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	2000009f 	.word	0x2000009f
 800592c:	200000a0 	.word	0x200000a0
 8005930:	200000a1 	.word	0x200000a1

08005934 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	32b0      	adds	r2, #176	; 0xb0
 8005948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d101      	bne.n	8005964 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005960:	2303      	movs	r3, #3
 8005962:	e0bf      	b.n	8005ae4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800596c:	2b00      	cmp	r3, #0
 800596e:	d050      	beq.n	8005a12 <USBD_CDC_Setup+0xde>
 8005970:	2b20      	cmp	r3, #32
 8005972:	f040 80af 	bne.w	8005ad4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	88db      	ldrh	r3, [r3, #6]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d03a      	beq.n	80059f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	b25b      	sxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	da1b      	bge.n	80059c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	33b0      	adds	r3, #176	; 0xb0
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	683a      	ldr	r2, [r7, #0]
 800599c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800599e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	88d2      	ldrh	r2, [r2, #6]
 80059a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	88db      	ldrh	r3, [r3, #6]
 80059aa:	2b07      	cmp	r3, #7
 80059ac:	bf28      	it	cs
 80059ae:	2307      	movcs	r3, #7
 80059b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	89fa      	ldrh	r2, [r7, #14]
 80059b6:	4619      	mov	r1, r3
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f001 fd89 	bl	80074d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80059be:	e090      	b.n	8005ae2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	785a      	ldrb	r2, [r3, #1]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	88db      	ldrh	r3, [r3, #6]
 80059ce:	2b3f      	cmp	r3, #63	; 0x3f
 80059d0:	d803      	bhi.n	80059da <USBD_CDC_Setup+0xa6>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	88db      	ldrh	r3, [r3, #6]
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	e000      	b.n	80059dc <USBD_CDC_Setup+0xa8>
 80059da:	2240      	movs	r2, #64	; 0x40
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80059e2:	6939      	ldr	r1, [r7, #16]
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80059ea:	461a      	mov	r2, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 fd9b 	bl	8007528 <USBD_CtlPrepareRx>
      break;
 80059f2:	e076      	b.n	8005ae2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	33b0      	adds	r3, #176	; 0xb0
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4413      	add	r3, r2
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	7850      	ldrb	r0, [r2, #1]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	4798      	blx	r3
      break;
 8005a10:	e067      	b.n	8005ae2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	785b      	ldrb	r3, [r3, #1]
 8005a16:	2b0b      	cmp	r3, #11
 8005a18:	d851      	bhi.n	8005abe <USBD_CDC_Setup+0x18a>
 8005a1a:	a201      	add	r2, pc, #4	; (adr r2, 8005a20 <USBD_CDC_Setup+0xec>)
 8005a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a20:	08005a51 	.word	0x08005a51
 8005a24:	08005acd 	.word	0x08005acd
 8005a28:	08005abf 	.word	0x08005abf
 8005a2c:	08005abf 	.word	0x08005abf
 8005a30:	08005abf 	.word	0x08005abf
 8005a34:	08005abf 	.word	0x08005abf
 8005a38:	08005abf 	.word	0x08005abf
 8005a3c:	08005abf 	.word	0x08005abf
 8005a40:	08005abf 	.word	0x08005abf
 8005a44:	08005abf 	.word	0x08005abf
 8005a48:	08005a7b 	.word	0x08005a7b
 8005a4c:	08005aa5 	.word	0x08005aa5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d107      	bne.n	8005a6c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a5c:	f107 030a 	add.w	r3, r7, #10
 8005a60:	2202      	movs	r2, #2
 8005a62:	4619      	mov	r1, r3
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 fd33 	bl	80074d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a6a:	e032      	b.n	8005ad2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a6c:	6839      	ldr	r1, [r7, #0]
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f001 fcbd 	bl	80073ee <USBD_CtlError>
            ret = USBD_FAIL;
 8005a74:	2303      	movs	r3, #3
 8005a76:	75fb      	strb	r3, [r7, #23]
          break;
 8005a78:	e02b      	b.n	8005ad2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d107      	bne.n	8005a96 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005a86:	f107 030d 	add.w	r3, r7, #13
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f001 fd1e 	bl	80074d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a94:	e01d      	b.n	8005ad2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 fca8 	bl	80073ee <USBD_CtlError>
            ret = USBD_FAIL;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	75fb      	strb	r3, [r7, #23]
          break;
 8005aa2:	e016      	b.n	8005ad2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	2b03      	cmp	r3, #3
 8005aae:	d00f      	beq.n	8005ad0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f001 fc9b 	bl	80073ee <USBD_CtlError>
            ret = USBD_FAIL;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005abc:	e008      	b.n	8005ad0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 fc94 	bl	80073ee <USBD_CtlError>
          ret = USBD_FAIL;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	75fb      	strb	r3, [r7, #23]
          break;
 8005aca:	e002      	b.n	8005ad2 <USBD_CDC_Setup+0x19e>
          break;
 8005acc:	bf00      	nop
 8005ace:	e008      	b.n	8005ae2 <USBD_CDC_Setup+0x1ae>
          break;
 8005ad0:	bf00      	nop
      }
      break;
 8005ad2:	e006      	b.n	8005ae2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005ad4:	6839      	ldr	r1, [r7, #0]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f001 fc89 	bl	80073ee <USBD_CtlError>
      ret = USBD_FAIL;
 8005adc:	2303      	movs	r3, #3
 8005ade:	75fb      	strb	r3, [r7, #23]
      break;
 8005ae0:	bf00      	nop
  }

  return (uint8_t)ret;
 8005ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005afe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	32b0      	adds	r2, #176	; 0xb0
 8005b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e065      	b.n	8005be2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	32b0      	adds	r2, #176	; 0xb0
 8005b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b26:	78fb      	ldrb	r3, [r7, #3]
 8005b28:	f003 020f 	and.w	r2, r3, #15
 8005b2c:	6879      	ldr	r1, [r7, #4]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	440b      	add	r3, r1
 8005b38:	3318      	adds	r3, #24
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d02f      	beq.n	8005ba0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	f003 020f 	and.w	r2, r3, #15
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	3318      	adds	r3, #24
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	f003 010f 	and.w	r1, r3, #15
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	460b      	mov	r3, r1
 8005b60:	00db      	lsls	r3, r3, #3
 8005b62:	440b      	add	r3, r1
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4403      	add	r3, r0
 8005b68:	3348      	adds	r3, #72	; 0x48
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d112      	bne.n	8005ba0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005b7a:	78fb      	ldrb	r3, [r7, #3]
 8005b7c:	f003 020f 	and.w	r2, r3, #15
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	3318      	adds	r3, #24
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005b92:	78f9      	ldrb	r1, [r7, #3]
 8005b94:	2300      	movs	r3, #0
 8005b96:	2200      	movs	r2, #0
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f006 fa98 	bl	800c0ce <USBD_LL_Transmit>
 8005b9e:	e01f      	b.n	8005be0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	33b0      	adds	r3, #176	; 0xb0
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d010      	beq.n	8005be0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	33b0      	adds	r3, #176	; 0xb0
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4413      	add	r3, r2
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005bdc:	78fa      	ldrb	r2, [r7, #3]
 8005bde:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	32b0      	adds	r2, #176	; 0xb0
 8005c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	32b0      	adds	r2, #176	; 0xb0
 8005c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e01a      	b.n	8005c52 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005c1c:	78fb      	ldrb	r3, [r7, #3]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f006 fa96 	bl	800c152 <USBD_LL_GetRxDataSize>
 8005c26:	4602      	mov	r2, r0
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	33b0      	adds	r3, #176	; 0xb0
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	32b0      	adds	r2, #176	; 0xb0
 8005c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e025      	b.n	8005cc8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	33b0      	adds	r3, #176	; 0xb0
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d01a      	beq.n	8005cc6 <USBD_CDC_EP0_RxReady+0x6c>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005c96:	2bff      	cmp	r3, #255	; 0xff
 8005c98:	d015      	beq.n	8005cc6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	33b0      	adds	r3, #176	; 0xb0
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	4413      	add	r3, r2
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005cb2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005cba:	b292      	uxth	r2, r2
 8005cbc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	22ff      	movs	r2, #255	; 0xff
 8005cc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005cd8:	2182      	movs	r1, #130	; 0x82
 8005cda:	4818      	ldr	r0, [pc, #96]	; (8005d3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cdc:	f000 fd4f 	bl	800677e <USBD_GetEpDesc>
 8005ce0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005ce2:	2101      	movs	r1, #1
 8005ce4:	4815      	ldr	r0, [pc, #84]	; (8005d3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ce6:	f000 fd4a 	bl	800677e <USBD_GetEpDesc>
 8005cea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005cec:	2181      	movs	r1, #129	; 0x81
 8005cee:	4813      	ldr	r0, [pc, #76]	; (8005d3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005cf0:	f000 fd45 	bl	800677e <USBD_GetEpDesc>
 8005cf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d002      	beq.n	8005d02 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	2210      	movs	r2, #16
 8005d00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d006      	beq.n	8005d16 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d10:	711a      	strb	r2, [r3, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d006      	beq.n	8005d2a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d24:	711a      	strb	r2, [r3, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2243      	movs	r2, #67	; 0x43
 8005d2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005d30:	4b02      	ldr	r3, [pc, #8]	; (8005d3c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	2000005c 	.word	0x2000005c

08005d40 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005d48:	2182      	movs	r1, #130	; 0x82
 8005d4a:	4818      	ldr	r0, [pc, #96]	; (8005dac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d4c:	f000 fd17 	bl	800677e <USBD_GetEpDesc>
 8005d50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005d52:	2101      	movs	r1, #1
 8005d54:	4815      	ldr	r0, [pc, #84]	; (8005dac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d56:	f000 fd12 	bl	800677e <USBD_GetEpDesc>
 8005d5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005d5c:	2181      	movs	r1, #129	; 0x81
 8005d5e:	4813      	ldr	r0, [pc, #76]	; (8005dac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005d60:	f000 fd0d 	bl	800677e <USBD_GetEpDesc>
 8005d64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2210      	movs	r2, #16
 8005d70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d006      	beq.n	8005d86 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	711a      	strb	r2, [r3, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f042 0202 	orr.w	r2, r2, #2
 8005d84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d006      	beq.n	8005d9a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	711a      	strb	r2, [r3, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f042 0202 	orr.w	r2, r2, #2
 8005d98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2243      	movs	r2, #67	; 0x43
 8005d9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005da0:	4b02      	ldr	r3, [pc, #8]	; (8005dac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3718      	adds	r7, #24
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	2000005c 	.word	0x2000005c

08005db0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005db8:	2182      	movs	r1, #130	; 0x82
 8005dba:	4818      	ldr	r0, [pc, #96]	; (8005e1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005dbc:	f000 fcdf 	bl	800677e <USBD_GetEpDesc>
 8005dc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	4815      	ldr	r0, [pc, #84]	; (8005e1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005dc6:	f000 fcda 	bl	800677e <USBD_GetEpDesc>
 8005dca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005dcc:	2181      	movs	r1, #129	; 0x81
 8005dce:	4813      	ldr	r0, [pc, #76]	; (8005e1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005dd0:	f000 fcd5 	bl	800677e <USBD_GetEpDesc>
 8005dd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d002      	beq.n	8005de2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2210      	movs	r2, #16
 8005de0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d006      	beq.n	8005df6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005df0:	711a      	strb	r2, [r3, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d006      	beq.n	8005e0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e04:	711a      	strb	r2, [r3, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2243      	movs	r2, #67	; 0x43
 8005e0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e10:	4b02      	ldr	r3, [pc, #8]	; (8005e1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	2000005c 	.word	0x2000005c

08005e20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	220a      	movs	r2, #10
 8005e2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005e2e:	4b03      	ldr	r3, [pc, #12]	; (8005e3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	20000018 	.word	0x20000018

08005e40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d101      	bne.n	8005e54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e009      	b.n	8005e68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	33b0      	adds	r3, #176	; 0xb0
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005e66:	2300      	movs	r3, #0
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	32b0      	adds	r2, #176	; 0xb0
 8005e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e008      	b.n	8005eac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	371c      	adds	r7, #28
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	32b0      	adds	r2, #176	; 0xb0
 8005ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e004      	b.n	8005ee6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3714      	adds	r7, #20
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	32b0      	adds	r2, #176	; 0xb0
 8005f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f0a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	32b0      	adds	r2, #176	; 0xb0
 8005f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e025      	b.n	8005f72 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11f      	bne.n	8005f70 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005f38:	4b10      	ldr	r3, [pc, #64]	; (8005f7c <USBD_CDC_TransmitPacket+0x88>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	f003 020f 	and.w	r2, r3, #15
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	4403      	add	r3, r0
 8005f52:	3318      	adds	r3, #24
 8005f54:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005f56:	4b09      	ldr	r3, [pc, #36]	; (8005f7c <USBD_CDC_TransmitPacket+0x88>)
 8005f58:	7819      	ldrb	r1, [r3, #0]
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f006 f8b1 	bl	800c0ce <USBD_LL_Transmit>

    ret = USBD_OK;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	2000009f 	.word	0x2000009f

08005f80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	32b0      	adds	r2, #176	; 0xb0
 8005f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	32b0      	adds	r2, #176	; 0xb0
 8005fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d101      	bne.n	8005fae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e018      	b.n	8005fe0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	7c1b      	ldrb	r3, [r3, #16]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fb6:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <USBD_CDC_ReceivePacket+0x68>)
 8005fb8:	7819      	ldrb	r1, [r3, #0]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f006 f8a3 	bl	800c110 <USBD_LL_PrepareReceive>
 8005fca:	e008      	b.n	8005fde <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005fcc:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <USBD_CDC_ReceivePacket+0x68>)
 8005fce:	7819      	ldrb	r1, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005fd6:	2340      	movs	r3, #64	; 0x40
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f006 f899 	bl	800c110 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	200000a0 	.word	0x200000a0

08005fec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b086      	sub	sp, #24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d101      	bne.n	8006004 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006000:	2303      	movs	r3, #3
 8006002:	e01f      	b.n	8006044 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	79fa      	ldrb	r2, [r7, #7]
 8006036:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006038:	68f8      	ldr	r0, [r7, #12]
 800603a:	f005 ff13 	bl	800be64 <USBD_LL_Init>
 800603e:	4603      	mov	r3, r0
 8006040:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006042:	7dfb      	ldrb	r3, [r7, #23]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006056:	2300      	movs	r3, #0
 8006058:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d101      	bne.n	8006064 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006060:	2303      	movs	r3, #3
 8006062:	e025      	b.n	80060b0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	32ae      	adds	r2, #174	; 0xae
 8006076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00f      	beq.n	80060a0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	32ae      	adds	r2, #174	; 0xae
 800608a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	f107 020e 	add.w	r2, r7, #14
 8006094:	4610      	mov	r0, r2
 8006096:	4798      	blx	r3
 8006098:	4602      	mov	r2, r0
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f005 ff1b 	bl	800befc <USBD_LL_Start>
 80060c6:	4603      	mov	r3, r0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80060d8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	460b      	mov	r3, r1
 80060f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80060f2:	2300      	movs	r3, #0
 80060f4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d009      	beq.n	8006114 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	78fa      	ldrb	r2, [r7, #3]
 800610a:	4611      	mov	r1, r2
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	4798      	blx	r3
 8006110:	4603      	mov	r3, r0
 8006112:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3710      	adds	r7, #16
 800611a:	46bd      	mov	sp, r7
 800611c:	bd80      	pop	{r7, pc}

0800611e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800611e:	b580      	push	{r7, lr}
 8006120:	b084      	sub	sp, #16
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	78fa      	ldrb	r2, [r7, #3]
 8006138:	4611      	mov	r1, r2
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	4798      	blx	r3
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d001      	beq.n	8006148 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006144:	2303      	movs	r3, #3
 8006146:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006148:	7bfb      	ldrb	r3, [r7, #15]
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	4618      	mov	r0, r3
 8006166:	f001 f908 	bl	800737a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006178:	461a      	mov	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006186:	f003 031f 	and.w	r3, r3, #31
 800618a:	2b02      	cmp	r3, #2
 800618c:	d01a      	beq.n	80061c4 <USBD_LL_SetupStage+0x72>
 800618e:	2b02      	cmp	r3, #2
 8006190:	d822      	bhi.n	80061d8 <USBD_LL_SetupStage+0x86>
 8006192:	2b00      	cmp	r3, #0
 8006194:	d002      	beq.n	800619c <USBD_LL_SetupStage+0x4a>
 8006196:	2b01      	cmp	r3, #1
 8006198:	d00a      	beq.n	80061b0 <USBD_LL_SetupStage+0x5e>
 800619a:	e01d      	b.n	80061d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fb5f 	bl	8006868 <USBD_StdDevReq>
 80061aa:	4603      	mov	r3, r0
 80061ac:	73fb      	strb	r3, [r7, #15]
      break;
 80061ae:	e020      	b.n	80061f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fbc7 	bl	800694c <USBD_StdItfReq>
 80061be:	4603      	mov	r3, r0
 80061c0:	73fb      	strb	r3, [r7, #15]
      break;
 80061c2:	e016      	b.n	80061f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fc29 	bl	8006a24 <USBD_StdEPReq>
 80061d2:	4603      	mov	r3, r0
 80061d4:	73fb      	strb	r3, [r7, #15]
      break;
 80061d6:	e00c      	b.n	80061f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f005 fee8 	bl	800bfbc <USBD_LL_StallEP>
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]
      break;
 80061f0:	bf00      	nop
  }

  return ret;
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3710      	adds	r7, #16
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b086      	sub	sp, #24
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	460b      	mov	r3, r1
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800620a:	2300      	movs	r3, #0
 800620c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800620e:	7afb      	ldrb	r3, [r7, #11]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d16e      	bne.n	80062f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800621a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006222:	2b03      	cmp	r3, #3
 8006224:	f040 8098 	bne.w	8006358 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	429a      	cmp	r2, r3
 8006232:	d913      	bls.n	800625c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	1ad2      	subs	r2, r2, r3
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	4293      	cmp	r3, r2
 800624c:	bf28      	it	cs
 800624e:	4613      	movcs	r3, r2
 8006250:	461a      	mov	r2, r3
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f001 f984 	bl	8007562 <USBD_CtlContinueRx>
 800625a:	e07d      	b.n	8006358 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	2b02      	cmp	r3, #2
 8006268:	d014      	beq.n	8006294 <USBD_LL_DataOutStage+0x98>
 800626a:	2b02      	cmp	r3, #2
 800626c:	d81d      	bhi.n	80062aa <USBD_LL_DataOutStage+0xae>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <USBD_LL_DataOutStage+0x7c>
 8006272:	2b01      	cmp	r3, #1
 8006274:	d003      	beq.n	800627e <USBD_LL_DataOutStage+0x82>
 8006276:	e018      	b.n	80062aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006278:	2300      	movs	r3, #0
 800627a:	75bb      	strb	r3, [r7, #22]
            break;
 800627c:	e018      	b.n	80062b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006284:	b2db      	uxtb	r3, r3
 8006286:	4619      	mov	r1, r3
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fa5e 	bl	800674a <USBD_CoreFindIF>
 800628e:	4603      	mov	r3, r0
 8006290:	75bb      	strb	r3, [r7, #22]
            break;
 8006292:	e00d      	b.n	80062b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800629a:	b2db      	uxtb	r3, r3
 800629c:	4619      	mov	r1, r3
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 fa60 	bl	8006764 <USBD_CoreFindEP>
 80062a4:	4603      	mov	r3, r0
 80062a6:	75bb      	strb	r3, [r7, #22]
            break;
 80062a8:	e002      	b.n	80062b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	75bb      	strb	r3, [r7, #22]
            break;
 80062ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80062b0:	7dbb      	ldrb	r3, [r7, #22]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d119      	bne.n	80062ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b03      	cmp	r3, #3
 80062c0:	d113      	bne.n	80062ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80062c2:	7dba      	ldrb	r2, [r7, #22]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	32ae      	adds	r2, #174	; 0xae
 80062c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80062d2:	7dba      	ldrb	r2, [r7, #22]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80062da:	7dba      	ldrb	r2, [r7, #22]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	32ae      	adds	r2, #174	; 0xae
 80062e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f001 f94a 	bl	8007584 <USBD_CtlSendStatus>
 80062f0:	e032      	b.n	8006358 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80062f2:	7afb      	ldrb	r3, [r7, #11]
 80062f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	4619      	mov	r1, r3
 80062fc:	68f8      	ldr	r0, [r7, #12]
 80062fe:	f000 fa31 	bl	8006764 <USBD_CoreFindEP>
 8006302:	4603      	mov	r3, r0
 8006304:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006306:	7dbb      	ldrb	r3, [r7, #22]
 8006308:	2bff      	cmp	r3, #255	; 0xff
 800630a:	d025      	beq.n	8006358 <USBD_LL_DataOutStage+0x15c>
 800630c:	7dbb      	ldrb	r3, [r7, #22]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d122      	bne.n	8006358 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b03      	cmp	r3, #3
 800631c:	d117      	bne.n	800634e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800631e:	7dba      	ldrb	r2, [r7, #22]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	32ae      	adds	r2, #174	; 0xae
 8006324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00f      	beq.n	800634e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800632e:	7dba      	ldrb	r2, [r7, #22]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006336:	7dba      	ldrb	r2, [r7, #22]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	32ae      	adds	r2, #174	; 0xae
 800633c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	7afa      	ldrb	r2, [r7, #11]
 8006344:	4611      	mov	r1, r2
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	4798      	blx	r3
 800634a:	4603      	mov	r3, r0
 800634c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800634e:	7dfb      	ldrb	r3, [r7, #23]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d001      	beq.n	8006358 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006354:	7dfb      	ldrb	r3, [r7, #23]
 8006356:	e000      	b.n	800635a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b086      	sub	sp, #24
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	460b      	mov	r3, r1
 800636c:	607a      	str	r2, [r7, #4]
 800636e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006370:	7afb      	ldrb	r3, [r7, #11]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d16f      	bne.n	8006456 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3314      	adds	r3, #20
 800637a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006382:	2b02      	cmp	r3, #2
 8006384:	d15a      	bne.n	800643c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	689a      	ldr	r2, [r3, #8]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	429a      	cmp	r2, r3
 8006390:	d914      	bls.n	80063bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	689a      	ldr	r2, [r3, #8]
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	1ad2      	subs	r2, r2, r3
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	461a      	mov	r2, r3
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f001 f8ac 	bl	8007506 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063ae:	2300      	movs	r3, #0
 80063b0:	2200      	movs	r2, #0
 80063b2:	2100      	movs	r1, #0
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f005 feab 	bl	800c110 <USBD_LL_PrepareReceive>
 80063ba:	e03f      	b.n	800643c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d11c      	bne.n	8006402 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d316      	bcc.n	8006402 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80063de:	429a      	cmp	r2, r3
 80063e0:	d20f      	bcs.n	8006402 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80063e2:	2200      	movs	r2, #0
 80063e4:	2100      	movs	r1, #0
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f001 f88d 	bl	8007506 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063f4:	2300      	movs	r3, #0
 80063f6:	2200      	movs	r2, #0
 80063f8:	2100      	movs	r1, #0
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f005 fe88 	bl	800c110 <USBD_LL_PrepareReceive>
 8006400:	e01c      	b.n	800643c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b03      	cmp	r3, #3
 800640c:	d10f      	bne.n	800642e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800642e:	2180      	movs	r1, #128	; 0x80
 8006430:	68f8      	ldr	r0, [r7, #12]
 8006432:	f005 fdc3 	bl	800bfbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f001 f8b7 	bl	80075aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d03a      	beq.n	80064bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7ff fe42 	bl	80060d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006454:	e032      	b.n	80064bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006456:	7afb      	ldrb	r3, [r7, #11]
 8006458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800645c:	b2db      	uxtb	r3, r3
 800645e:	4619      	mov	r1, r3
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 f97f 	bl	8006764 <USBD_CoreFindEP>
 8006466:	4603      	mov	r3, r0
 8006468:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800646a:	7dfb      	ldrb	r3, [r7, #23]
 800646c:	2bff      	cmp	r3, #255	; 0xff
 800646e:	d025      	beq.n	80064bc <USBD_LL_DataInStage+0x15a>
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d122      	bne.n	80064bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b03      	cmp	r3, #3
 8006480:	d11c      	bne.n	80064bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006482:	7dfa      	ldrb	r2, [r7, #23]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	32ae      	adds	r2, #174	; 0xae
 8006488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d014      	beq.n	80064bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006492:	7dfa      	ldrb	r2, [r7, #23]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800649a:	7dfa      	ldrb	r2, [r7, #23]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	32ae      	adds	r2, #174	; 0xae
 80064a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	7afa      	ldrb	r2, [r7, #11]
 80064a8:	4611      	mov	r1, r2
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	4798      	blx	r3
 80064ae:	4603      	mov	r3, r0
 80064b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80064b2:	7dbb      	ldrb	r3, [r7, #22]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d001      	beq.n	80064bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80064b8:	7dbb      	ldrb	r3, [r7, #22]
 80064ba:	e000      	b.n	80064be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b084      	sub	sp, #16
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d014      	beq.n	800652c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00e      	beq.n	800652c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	6852      	ldr	r2, [r2, #4]
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	4611      	mov	r1, r2
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006528:	2303      	movs	r3, #3
 800652a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800652c:	2340      	movs	r3, #64	; 0x40
 800652e:	2200      	movs	r2, #0
 8006530:	2100      	movs	r1, #0
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f005 fcfd 	bl	800bf32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2201      	movs	r2, #1
 800653c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2240      	movs	r2, #64	; 0x40
 8006544:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006548:	2340      	movs	r3, #64	; 0x40
 800654a:	2200      	movs	r2, #0
 800654c:	2180      	movs	r1, #128	; 0x80
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f005 fcef 	bl	800bf32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2240      	movs	r2, #64	; 0x40
 800655e:	621a      	str	r2, [r3, #32]

  return ret;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	78fa      	ldrb	r2, [r7, #3]
 800657a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800658a:	b480      	push	{r7}
 800658c:	b083      	sub	sp, #12
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006598:	b2da      	uxtb	r2, r3
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2204      	movs	r2, #4
 80065a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	370c      	adds	r7, #12
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr

080065b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b04      	cmp	r3, #4
 80065c8:	d106      	bne.n	80065d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b082      	sub	sp, #8
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d110      	bne.n	800661c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b082      	sub	sp, #8
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	460b      	mov	r3, r1
 8006630:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	32ae      	adds	r2, #174	; 0xae
 800663c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006644:	2303      	movs	r3, #3
 8006646:	e01c      	b.n	8006682 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b03      	cmp	r3, #3
 8006652:	d115      	bne.n	8006680 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	32ae      	adds	r2, #174	; 0xae
 800665e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	32ae      	adds	r2, #174	; 0xae
 8006672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006676:	6a1b      	ldr	r3, [r3, #32]
 8006678:	78fa      	ldrb	r2, [r7, #3]
 800667a:	4611      	mov	r1, r2
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3708      	adds	r7, #8
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b082      	sub	sp, #8
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	460b      	mov	r3, r1
 8006694:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	32ae      	adds	r2, #174	; 0xae
 80066a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e01c      	b.n	80066e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b03      	cmp	r3, #3
 80066b6:	d115      	bne.n	80066e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	32ae      	adds	r2, #174	; 0xae
 80066c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00b      	beq.n	80066e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	32ae      	adds	r2, #174	; 0xae
 80066d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	78fa      	ldrb	r2, [r7, #3]
 80066de:	4611      	mov	r1, r2
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80066e4:	2300      	movs	r3, #0
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00e      	beq.n	8006740 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	6852      	ldr	r2, [r2, #4]
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	4611      	mov	r1, r2
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	4798      	blx	r3
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800673c:	2303      	movs	r3, #3
 800673e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006740:	7bfb      	ldrb	r3, [r7, #15]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	460b      	mov	r3, r1
 8006754:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006756:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006758:	4618      	mov	r0, r3
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006770:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006772:	4618      	mov	r0, r3
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr

0800677e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	6078      	str	r0, [r7, #4]
 8006786:	460b      	mov	r3, r1
 8006788:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	885b      	ldrh	r3, [r3, #2]
 800679a:	b29a      	uxth	r2, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d920      	bls.n	80067e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80067ae:	e013      	b.n	80067d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80067b0:	f107 030a 	add.w	r3, r7, #10
 80067b4:	4619      	mov	r1, r3
 80067b6:	6978      	ldr	r0, [r7, #20]
 80067b8:	f000 f81b 	bl	80067f2 <USBD_GetNextDesc>
 80067bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	2b05      	cmp	r3, #5
 80067c4:	d108      	bne.n	80067d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	789b      	ldrb	r3, [r3, #2]
 80067ce:	78fa      	ldrb	r2, [r7, #3]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d008      	beq.n	80067e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	885b      	ldrh	r3, [r3, #2]
 80067dc:	b29a      	uxth	r2, r3
 80067de:	897b      	ldrh	r3, [r7, #10]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d8e5      	bhi.n	80067b0 <USBD_GetEpDesc+0x32>
 80067e4:	e000      	b.n	80067e8 <USBD_GetEpDesc+0x6a>
          break;
 80067e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80067e8:	693b      	ldr	r3, [r7, #16]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3718      	adds	r7, #24
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b085      	sub	sp, #20
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	881a      	ldrh	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	4413      	add	r3, r2
 800680c:	b29a      	uxth	r2, r3
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4413      	add	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800681e:	68fb      	ldr	r3, [r7, #12]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800682c:	b480      	push	{r7}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	3301      	adds	r3, #1
 8006842:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800684a:	8a3b      	ldrh	r3, [r7, #16]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	b21a      	sxth	r2, r3
 8006850:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006854:	4313      	orrs	r3, r2
 8006856:	b21b      	sxth	r3, r3
 8006858:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800685a:	89fb      	ldrh	r3, [r7, #14]
}
 800685c:	4618      	mov	r0, r3
 800685e:	371c      	adds	r7, #28
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b084      	sub	sp, #16
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006872:	2300      	movs	r3, #0
 8006874:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800687e:	2b40      	cmp	r3, #64	; 0x40
 8006880:	d005      	beq.n	800688e <USBD_StdDevReq+0x26>
 8006882:	2b40      	cmp	r3, #64	; 0x40
 8006884:	d857      	bhi.n	8006936 <USBD_StdDevReq+0xce>
 8006886:	2b00      	cmp	r3, #0
 8006888:	d00f      	beq.n	80068aa <USBD_StdDevReq+0x42>
 800688a:	2b20      	cmp	r3, #32
 800688c:	d153      	bne.n	8006936 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	32ae      	adds	r2, #174	; 0xae
 8006898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4798      	blx	r3
 80068a4:	4603      	mov	r3, r0
 80068a6:	73fb      	strb	r3, [r7, #15]
      break;
 80068a8:	e04a      	b.n	8006940 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	785b      	ldrb	r3, [r3, #1]
 80068ae:	2b09      	cmp	r3, #9
 80068b0:	d83b      	bhi.n	800692a <USBD_StdDevReq+0xc2>
 80068b2:	a201      	add	r2, pc, #4	; (adr r2, 80068b8 <USBD_StdDevReq+0x50>)
 80068b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b8:	0800690d 	.word	0x0800690d
 80068bc:	08006921 	.word	0x08006921
 80068c0:	0800692b 	.word	0x0800692b
 80068c4:	08006917 	.word	0x08006917
 80068c8:	0800692b 	.word	0x0800692b
 80068cc:	080068eb 	.word	0x080068eb
 80068d0:	080068e1 	.word	0x080068e1
 80068d4:	0800692b 	.word	0x0800692b
 80068d8:	08006903 	.word	0x08006903
 80068dc:	080068f5 	.word	0x080068f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068e0:	6839      	ldr	r1, [r7, #0]
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fa3c 	bl	8006d60 <USBD_GetDescriptor>
          break;
 80068e8:	e024      	b.n	8006934 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fba1 	bl	8007034 <USBD_SetAddress>
          break;
 80068f2:	e01f      	b.n	8006934 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80068f4:	6839      	ldr	r1, [r7, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fbe0 	bl	80070bc <USBD_SetConfig>
 80068fc:	4603      	mov	r3, r0
 80068fe:	73fb      	strb	r3, [r7, #15]
          break;
 8006900:	e018      	b.n	8006934 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006902:	6839      	ldr	r1, [r7, #0]
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 fc83 	bl	8007210 <USBD_GetConfig>
          break;
 800690a:	e013      	b.n	8006934 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 fcb4 	bl	800727c <USBD_GetStatus>
          break;
 8006914:	e00e      	b.n	8006934 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 fce3 	bl	80072e4 <USBD_SetFeature>
          break;
 800691e:	e009      	b.n	8006934 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006920:	6839      	ldr	r1, [r7, #0]
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fd07 	bl	8007336 <USBD_ClrFeature>
          break;
 8006928:	e004      	b.n	8006934 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800692a:	6839      	ldr	r1, [r7, #0]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fd5e 	bl	80073ee <USBD_CtlError>
          break;
 8006932:	bf00      	nop
      }
      break;
 8006934:	e004      	b.n	8006940 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fd58 	bl	80073ee <USBD_CtlError>
      break;
 800693e:	bf00      	nop
  }

  return ret;
 8006940:	7bfb      	ldrb	r3, [r7, #15]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop

0800694c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006962:	2b40      	cmp	r3, #64	; 0x40
 8006964:	d005      	beq.n	8006972 <USBD_StdItfReq+0x26>
 8006966:	2b40      	cmp	r3, #64	; 0x40
 8006968:	d852      	bhi.n	8006a10 <USBD_StdItfReq+0xc4>
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <USBD_StdItfReq+0x26>
 800696e:	2b20      	cmp	r3, #32
 8006970:	d14e      	bne.n	8006a10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006978:	b2db      	uxtb	r3, r3
 800697a:	3b01      	subs	r3, #1
 800697c:	2b02      	cmp	r3, #2
 800697e:	d840      	bhi.n	8006a02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	889b      	ldrh	r3, [r3, #4]
 8006984:	b2db      	uxtb	r3, r3
 8006986:	2b01      	cmp	r3, #1
 8006988:	d836      	bhi.n	80069f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	889b      	ldrh	r3, [r3, #4]
 800698e:	b2db      	uxtb	r3, r3
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff fed9 	bl	800674a <USBD_CoreFindIF>
 8006998:	4603      	mov	r3, r0
 800699a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800699c:	7bbb      	ldrb	r3, [r7, #14]
 800699e:	2bff      	cmp	r3, #255	; 0xff
 80069a0:	d01d      	beq.n	80069de <USBD_StdItfReq+0x92>
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d11a      	bne.n	80069de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80069a8:	7bba      	ldrb	r2, [r7, #14]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	32ae      	adds	r2, #174	; 0xae
 80069ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00f      	beq.n	80069d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80069b8:	7bba      	ldrb	r2, [r7, #14]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069c0:	7bba      	ldrb	r2, [r7, #14]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	32ae      	adds	r2, #174	; 0xae
 80069c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
 80069d2:	4603      	mov	r3, r0
 80069d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069d6:	e004      	b.n	80069e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80069d8:	2303      	movs	r3, #3
 80069da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80069dc:	e001      	b.n	80069e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80069de:	2303      	movs	r3, #3
 80069e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	88db      	ldrh	r3, [r3, #6]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d110      	bne.n	8006a0c <USBD_StdItfReq+0xc0>
 80069ea:	7bfb      	ldrb	r3, [r7, #15]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10d      	bne.n	8006a0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fdc7 	bl	8007584 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069f6:	e009      	b.n	8006a0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 fcf7 	bl	80073ee <USBD_CtlError>
          break;
 8006a00:	e004      	b.n	8006a0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 fcf2 	bl	80073ee <USBD_CtlError>
          break;
 8006a0a:	e000      	b.n	8006a0e <USBD_StdItfReq+0xc2>
          break;
 8006a0c:	bf00      	nop
      }
      break;
 8006a0e:	e004      	b.n	8006a1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006a10:	6839      	ldr	r1, [r7, #0]
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fceb 	bl	80073ee <USBD_CtlError>
      break;
 8006a18:	bf00      	nop
  }

  return ret;
 8006a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	889b      	ldrh	r3, [r3, #4]
 8006a36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a40:	2b40      	cmp	r3, #64	; 0x40
 8006a42:	d007      	beq.n	8006a54 <USBD_StdEPReq+0x30>
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	f200 817f 	bhi.w	8006d48 <USBD_StdEPReq+0x324>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d02a      	beq.n	8006aa4 <USBD_StdEPReq+0x80>
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	f040 817a 	bne.w	8006d48 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006a54:	7bbb      	ldrb	r3, [r7, #14]
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f7ff fe83 	bl	8006764 <USBD_CoreFindEP>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a62:	7b7b      	ldrb	r3, [r7, #13]
 8006a64:	2bff      	cmp	r3, #255	; 0xff
 8006a66:	f000 8174 	beq.w	8006d52 <USBD_StdEPReq+0x32e>
 8006a6a:	7b7b      	ldrb	r3, [r7, #13]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f040 8170 	bne.w	8006d52 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006a72:	7b7a      	ldrb	r2, [r7, #13]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006a7a:	7b7a      	ldrb	r2, [r7, #13]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	32ae      	adds	r2, #174	; 0xae
 8006a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f000 8163 	beq.w	8006d52 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006a8c:	7b7a      	ldrb	r2, [r7, #13]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	32ae      	adds	r2, #174	; 0xae
 8006a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	6839      	ldr	r1, [r7, #0]
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	4798      	blx	r3
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006aa2:	e156      	b.n	8006d52 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	785b      	ldrb	r3, [r3, #1]
 8006aa8:	2b03      	cmp	r3, #3
 8006aaa:	d008      	beq.n	8006abe <USBD_StdEPReq+0x9a>
 8006aac:	2b03      	cmp	r3, #3
 8006aae:	f300 8145 	bgt.w	8006d3c <USBD_StdEPReq+0x318>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 809b 	beq.w	8006bee <USBD_StdEPReq+0x1ca>
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d03c      	beq.n	8006b36 <USBD_StdEPReq+0x112>
 8006abc:	e13e      	b.n	8006d3c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d002      	beq.n	8006ad0 <USBD_StdEPReq+0xac>
 8006aca:	2b03      	cmp	r3, #3
 8006acc:	d016      	beq.n	8006afc <USBD_StdEPReq+0xd8>
 8006ace:	e02c      	b.n	8006b2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ad0:	7bbb      	ldrb	r3, [r7, #14]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00d      	beq.n	8006af2 <USBD_StdEPReq+0xce>
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	2b80      	cmp	r3, #128	; 0x80
 8006ada:	d00a      	beq.n	8006af2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006adc:	7bbb      	ldrb	r3, [r7, #14]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f005 fa6b 	bl	800bfbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ae6:	2180      	movs	r1, #128	; 0x80
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f005 fa67 	bl	800bfbc <USBD_LL_StallEP>
 8006aee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006af0:	e020      	b.n	8006b34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fc7a 	bl	80073ee <USBD_CtlError>
              break;
 8006afa:	e01b      	b.n	8006b34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	885b      	ldrh	r3, [r3, #2]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d10e      	bne.n	8006b22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b04:	7bbb      	ldrb	r3, [r7, #14]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00b      	beq.n	8006b22 <USBD_StdEPReq+0xfe>
 8006b0a:	7bbb      	ldrb	r3, [r7, #14]
 8006b0c:	2b80      	cmp	r3, #128	; 0x80
 8006b0e:	d008      	beq.n	8006b22 <USBD_StdEPReq+0xfe>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	88db      	ldrh	r3, [r3, #6]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d104      	bne.n	8006b22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b18:	7bbb      	ldrb	r3, [r7, #14]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f005 fa4d 	bl	800bfbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fd2e 	bl	8007584 <USBD_CtlSendStatus>

              break;
 8006b28:	e004      	b.n	8006b34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fc5e 	bl	80073ee <USBD_CtlError>
              break;
 8006b32:	bf00      	nop
          }
          break;
 8006b34:	e107      	b.n	8006d46 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d002      	beq.n	8006b48 <USBD_StdEPReq+0x124>
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d016      	beq.n	8006b74 <USBD_StdEPReq+0x150>
 8006b46:	e04b      	b.n	8006be0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b48:	7bbb      	ldrb	r3, [r7, #14]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00d      	beq.n	8006b6a <USBD_StdEPReq+0x146>
 8006b4e:	7bbb      	ldrb	r3, [r7, #14]
 8006b50:	2b80      	cmp	r3, #128	; 0x80
 8006b52:	d00a      	beq.n	8006b6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006b54:	7bbb      	ldrb	r3, [r7, #14]
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f005 fa2f 	bl	800bfbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b5e:	2180      	movs	r1, #128	; 0x80
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f005 fa2b 	bl	800bfbc <USBD_LL_StallEP>
 8006b66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b68:	e040      	b.n	8006bec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 fc3e 	bl	80073ee <USBD_CtlError>
              break;
 8006b72:	e03b      	b.n	8006bec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	885b      	ldrh	r3, [r3, #2]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d136      	bne.n	8006bea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b7c:	7bbb      	ldrb	r3, [r7, #14]
 8006b7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d004      	beq.n	8006b90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b86:	7bbb      	ldrb	r3, [r7, #14]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f005 fa35 	bl	800bffa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fcf7 	bl	8007584 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b96:	7bbb      	ldrb	r3, [r7, #14]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff fde2 	bl	8006764 <USBD_CoreFindEP>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ba4:	7b7b      	ldrb	r3, [r7, #13]
 8006ba6:	2bff      	cmp	r3, #255	; 0xff
 8006ba8:	d01f      	beq.n	8006bea <USBD_StdEPReq+0x1c6>
 8006baa:	7b7b      	ldrb	r3, [r7, #13]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d11c      	bne.n	8006bea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006bb0:	7b7a      	ldrb	r2, [r7, #13]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006bb8:	7b7a      	ldrb	r2, [r7, #13]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	32ae      	adds	r2, #174	; 0xae
 8006bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d010      	beq.n	8006bea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006bc8:	7b7a      	ldrb	r2, [r7, #13]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	32ae      	adds	r2, #174	; 0xae
 8006bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	4798      	blx	r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006bde:	e004      	b.n	8006bea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fc03 	bl	80073ee <USBD_CtlError>
              break;
 8006be8:	e000      	b.n	8006bec <USBD_StdEPReq+0x1c8>
              break;
 8006bea:	bf00      	nop
          }
          break;
 8006bec:	e0ab      	b.n	8006d46 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d002      	beq.n	8006c00 <USBD_StdEPReq+0x1dc>
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d032      	beq.n	8006c64 <USBD_StdEPReq+0x240>
 8006bfe:	e097      	b.n	8006d30 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c00:	7bbb      	ldrb	r3, [r7, #14]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d007      	beq.n	8006c16 <USBD_StdEPReq+0x1f2>
 8006c06:	7bbb      	ldrb	r3, [r7, #14]
 8006c08:	2b80      	cmp	r3, #128	; 0x80
 8006c0a:	d004      	beq.n	8006c16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fbed 	bl	80073ee <USBD_CtlError>
                break;
 8006c14:	e091      	b.n	8006d3a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	da0b      	bge.n	8006c36 <USBD_StdEPReq+0x212>
 8006c1e:	7bbb      	ldrb	r3, [r7, #14]
 8006c20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	3310      	adds	r3, #16
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	4413      	add	r3, r2
 8006c32:	3304      	adds	r3, #4
 8006c34:	e00b      	b.n	8006c4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c36:	7bbb      	ldrb	r3, [r7, #14]
 8006c38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fc37 	bl	80074d0 <USBD_CtlSendData>
              break;
 8006c62:	e06a      	b.n	8006d3a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	da11      	bge.n	8006c90 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c6c:	7bbb      	ldrb	r3, [r7, #14]
 8006c6e:	f003 020f 	and.w	r2, r3, #15
 8006c72:	6879      	ldr	r1, [r7, #4]
 8006c74:	4613      	mov	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	3324      	adds	r3, #36	; 0x24
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d117      	bne.n	8006cb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fbb0 	bl	80073ee <USBD_CtlError>
                  break;
 8006c8e:	e054      	b.n	8006d3a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	f003 020f 	and.w	r2, r3, #15
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d104      	bne.n	8006cb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fb9d 	bl	80073ee <USBD_CtlError>
                  break;
 8006cb4:	e041      	b.n	8006d3a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	da0b      	bge.n	8006cd6 <USBD_StdEPReq+0x2b2>
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	3310      	adds	r3, #16
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	3304      	adds	r3, #4
 8006cd4:	e00b      	b.n	8006cee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cd6:	7bbb      	ldrb	r3, [r7, #14]
 8006cd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	4413      	add	r3, r2
 8006cec:	3304      	adds	r3, #4
 8006cee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d002      	beq.n	8006cfc <USBD_StdEPReq+0x2d8>
 8006cf6:	7bbb      	ldrb	r3, [r7, #14]
 8006cf8:	2b80      	cmp	r3, #128	; 0x80
 8006cfa:	d103      	bne.n	8006d04 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]
 8006d02:	e00e      	b.n	8006d22 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f005 f995 	bl	800c038 <USBD_LL_IsStallEP>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2201      	movs	r2, #1
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	e002      	b.n	8006d22 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2202      	movs	r2, #2
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fbd1 	bl	80074d0 <USBD_CtlSendData>
              break;
 8006d2e:	e004      	b.n	8006d3a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006d30:	6839      	ldr	r1, [r7, #0]
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f000 fb5b 	bl	80073ee <USBD_CtlError>
              break;
 8006d38:	bf00      	nop
          }
          break;
 8006d3a:	e004      	b.n	8006d46 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fb55 	bl	80073ee <USBD_CtlError>
          break;
 8006d44:	bf00      	nop
      }
      break;
 8006d46:	e005      	b.n	8006d54 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006d48:	6839      	ldr	r1, [r7, #0]
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fb4f 	bl	80073ee <USBD_CtlError>
      break;
 8006d50:	e000      	b.n	8006d54 <USBD_StdEPReq+0x330>
      break;
 8006d52:	bf00      	nop
  }

  return ret;
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
	...

08006d60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	885b      	ldrh	r3, [r3, #2]
 8006d7a:	0a1b      	lsrs	r3, r3, #8
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	2b06      	cmp	r3, #6
 8006d82:	f200 8128 	bhi.w	8006fd6 <USBD_GetDescriptor+0x276>
 8006d86:	a201      	add	r2, pc, #4	; (adr r2, 8006d8c <USBD_GetDescriptor+0x2c>)
 8006d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8c:	08006da9 	.word	0x08006da9
 8006d90:	08006dc1 	.word	0x08006dc1
 8006d94:	08006e01 	.word	0x08006e01
 8006d98:	08006fd7 	.word	0x08006fd7
 8006d9c:	08006fd7 	.word	0x08006fd7
 8006da0:	08006f77 	.word	0x08006f77
 8006da4:	08006fa3 	.word	0x08006fa3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	7c12      	ldrb	r2, [r2, #16]
 8006db4:	f107 0108 	add.w	r1, r7, #8
 8006db8:	4610      	mov	r0, r2
 8006dba:	4798      	blx	r3
 8006dbc:	60f8      	str	r0, [r7, #12]
      break;
 8006dbe:	e112      	b.n	8006fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	7c1b      	ldrb	r3, [r3, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10d      	bne.n	8006de4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd0:	f107 0208 	add.w	r2, r7, #8
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4798      	blx	r3
 8006dd8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	2202      	movs	r2, #2
 8006de0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006de2:	e100      	b.n	8006fe6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	f107 0208 	add.w	r2, r7, #8
 8006df0:	4610      	mov	r0, r2
 8006df2:	4798      	blx	r3
 8006df4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	2202      	movs	r2, #2
 8006dfc:	701a      	strb	r2, [r3, #0]
      break;
 8006dfe:	e0f2      	b.n	8006fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	885b      	ldrh	r3, [r3, #2]
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b05      	cmp	r3, #5
 8006e08:	f200 80ac 	bhi.w	8006f64 <USBD_GetDescriptor+0x204>
 8006e0c:	a201      	add	r2, pc, #4	; (adr r2, 8006e14 <USBD_GetDescriptor+0xb4>)
 8006e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e12:	bf00      	nop
 8006e14:	08006e2d 	.word	0x08006e2d
 8006e18:	08006e61 	.word	0x08006e61
 8006e1c:	08006e95 	.word	0x08006e95
 8006e20:	08006ec9 	.word	0x08006ec9
 8006e24:	08006efd 	.word	0x08006efd
 8006e28:	08006f31 	.word	0x08006f31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00b      	beq.n	8006e50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	7c12      	ldrb	r2, [r2, #16]
 8006e44:	f107 0108 	add.w	r1, r7, #8
 8006e48:	4610      	mov	r0, r2
 8006e4a:	4798      	blx	r3
 8006e4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e4e:	e091      	b.n	8006f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e50:	6839      	ldr	r1, [r7, #0]
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 facb 	bl	80073ee <USBD_CtlError>
            err++;
 8006e58:	7afb      	ldrb	r3, [r7, #11]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e5e:	e089      	b.n	8006f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00b      	beq.n	8006e84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	7c12      	ldrb	r2, [r2, #16]
 8006e78:	f107 0108 	add.w	r1, r7, #8
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
 8006e80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e82:	e077      	b.n	8006f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e84:	6839      	ldr	r1, [r7, #0]
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fab1 	bl	80073ee <USBD_CtlError>
            err++;
 8006e8c:	7afb      	ldrb	r3, [r7, #11]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	72fb      	strb	r3, [r7, #11]
          break;
 8006e92:	e06f      	b.n	8006f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00b      	beq.n	8006eb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	7c12      	ldrb	r2, [r2, #16]
 8006eac:	f107 0108 	add.w	r1, r7, #8
 8006eb0:	4610      	mov	r0, r2
 8006eb2:	4798      	blx	r3
 8006eb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eb6:	e05d      	b.n	8006f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fa97 	bl	80073ee <USBD_CtlError>
            err++;
 8006ec0:	7afb      	ldrb	r3, [r7, #11]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ec6:	e055      	b.n	8006f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00b      	beq.n	8006eec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	7c12      	ldrb	r2, [r2, #16]
 8006ee0:	f107 0108 	add.w	r1, r7, #8
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4798      	blx	r3
 8006ee8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eea:	e043      	b.n	8006f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fa7d 	bl	80073ee <USBD_CtlError>
            err++;
 8006ef4:	7afb      	ldrb	r3, [r7, #11]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	72fb      	strb	r3, [r7, #11]
          break;
 8006efa:	e03b      	b.n	8006f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f02:	695b      	ldr	r3, [r3, #20]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	7c12      	ldrb	r2, [r2, #16]
 8006f14:	f107 0108 	add.w	r1, r7, #8
 8006f18:	4610      	mov	r0, r2
 8006f1a:	4798      	blx	r3
 8006f1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f1e:	e029      	b.n	8006f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f20:	6839      	ldr	r1, [r7, #0]
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fa63 	bl	80073ee <USBD_CtlError>
            err++;
 8006f28:	7afb      	ldrb	r3, [r7, #11]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f2e:	e021      	b.n	8006f74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00b      	beq.n	8006f54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	7c12      	ldrb	r2, [r2, #16]
 8006f48:	f107 0108 	add.w	r1, r7, #8
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	4798      	blx	r3
 8006f50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f52:	e00f      	b.n	8006f74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 fa49 	bl	80073ee <USBD_CtlError>
            err++;
 8006f5c:	7afb      	ldrb	r3, [r7, #11]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	72fb      	strb	r3, [r7, #11]
          break;
 8006f62:	e007      	b.n	8006f74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fa41 	bl	80073ee <USBD_CtlError>
          err++;
 8006f6c:	7afb      	ldrb	r3, [r7, #11]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006f72:	bf00      	nop
      }
      break;
 8006f74:	e037      	b.n	8006fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	7c1b      	ldrb	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d109      	bne.n	8006f92 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f86:	f107 0208 	add.w	r2, r7, #8
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	4798      	blx	r3
 8006f8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f90:	e029      	b.n	8006fe6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 fa2a 	bl	80073ee <USBD_CtlError>
        err++;
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	72fb      	strb	r3, [r7, #11]
      break;
 8006fa0:	e021      	b.n	8006fe6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	7c1b      	ldrb	r3, [r3, #16]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10d      	bne.n	8006fc6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb2:	f107 0208 	add.w	r2, r7, #8
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	4798      	blx	r3
 8006fba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	2207      	movs	r2, #7
 8006fc2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fc4:	e00f      	b.n	8006fe6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fa10 	bl	80073ee <USBD_CtlError>
        err++;
 8006fce:	7afb      	ldrb	r3, [r7, #11]
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	72fb      	strb	r3, [r7, #11]
      break;
 8006fd4:	e007      	b.n	8006fe6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006fd6:	6839      	ldr	r1, [r7, #0]
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 fa08 	bl	80073ee <USBD_CtlError>
      err++;
 8006fde:	7afb      	ldrb	r3, [r7, #11]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	72fb      	strb	r3, [r7, #11]
      break;
 8006fe4:	bf00      	nop
  }

  if (err != 0U)
 8006fe6:	7afb      	ldrb	r3, [r7, #11]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d11e      	bne.n	800702a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	88db      	ldrh	r3, [r3, #6]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d016      	beq.n	8007022 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006ff4:	893b      	ldrh	r3, [r7, #8]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00e      	beq.n	8007018 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	88da      	ldrh	r2, [r3, #6]
 8006ffe:	893b      	ldrh	r3, [r7, #8]
 8007000:	4293      	cmp	r3, r2
 8007002:	bf28      	it	cs
 8007004:	4613      	movcs	r3, r2
 8007006:	b29b      	uxth	r3, r3
 8007008:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800700a:	893b      	ldrh	r3, [r7, #8]
 800700c:	461a      	mov	r2, r3
 800700e:	68f9      	ldr	r1, [r7, #12]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fa5d 	bl	80074d0 <USBD_CtlSendData>
 8007016:	e009      	b.n	800702c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f9e7 	bl	80073ee <USBD_CtlError>
 8007020:	e004      	b.n	800702c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 faae 	bl	8007584 <USBD_CtlSendStatus>
 8007028:	e000      	b.n	800702c <USBD_GetDescriptor+0x2cc>
    return;
 800702a:	bf00      	nop
  }
}
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop

08007034 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	889b      	ldrh	r3, [r3, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d131      	bne.n	80070aa <USBD_SetAddress+0x76>
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	88db      	ldrh	r3, [r3, #6]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d12d      	bne.n	80070aa <USBD_SetAddress+0x76>
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	885b      	ldrh	r3, [r3, #2]
 8007052:	2b7f      	cmp	r3, #127	; 0x7f
 8007054:	d829      	bhi.n	80070aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	885b      	ldrh	r3, [r3, #2]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007060:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b03      	cmp	r3, #3
 800706c:	d104      	bne.n	8007078 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f9bc 	bl	80073ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007076:	e01d      	b.n	80070b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	7bfa      	ldrb	r2, [r7, #15]
 800707c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	4619      	mov	r1, r3
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f005 f803 	bl	800c090 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fa7a 	bl	8007584 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d004      	beq.n	80070a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2202      	movs	r2, #2
 800709a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800709e:	e009      	b.n	80070b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070a8:	e004      	b.n	80070b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070aa:	6839      	ldr	r1, [r7, #0]
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f99e 	bl	80073ee <USBD_CtlError>
  }
}
 80070b2:	bf00      	nop
 80070b4:	bf00      	nop
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	885b      	ldrh	r3, [r3, #2]
 80070ce:	b2da      	uxtb	r2, r3
 80070d0:	4b4e      	ldr	r3, [pc, #312]	; (800720c <USBD_SetConfig+0x150>)
 80070d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070d4:	4b4d      	ldr	r3, [pc, #308]	; (800720c <USBD_SetConfig+0x150>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d905      	bls.n	80070e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f985 	bl	80073ee <USBD_CtlError>
    return USBD_FAIL;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e08c      	b.n	8007202 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b02      	cmp	r3, #2
 80070f2:	d002      	beq.n	80070fa <USBD_SetConfig+0x3e>
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d029      	beq.n	800714c <USBD_SetConfig+0x90>
 80070f8:	e075      	b.n	80071e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80070fa:	4b44      	ldr	r3, [pc, #272]	; (800720c <USBD_SetConfig+0x150>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d020      	beq.n	8007144 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007102:	4b42      	ldr	r3, [pc, #264]	; (800720c <USBD_SetConfig+0x150>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	461a      	mov	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800710c:	4b3f      	ldr	r3, [pc, #252]	; (800720c <USBD_SetConfig+0x150>)
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	4619      	mov	r1, r3
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7fe ffe7 	bl	80060e6 <USBD_SetClassConfig>
 8007118:	4603      	mov	r3, r0
 800711a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800711c:	7bfb      	ldrb	r3, [r7, #15]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d008      	beq.n	8007134 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f962 	bl	80073ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2202      	movs	r2, #2
 800712e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007132:	e065      	b.n	8007200 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 fa25 	bl	8007584 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2203      	movs	r2, #3
 800713e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007142:	e05d      	b.n	8007200 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 fa1d 	bl	8007584 <USBD_CtlSendStatus>
      break;
 800714a:	e059      	b.n	8007200 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800714c:	4b2f      	ldr	r3, [pc, #188]	; (800720c <USBD_SetConfig+0x150>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d112      	bne.n	800717a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800715c:	4b2b      	ldr	r3, [pc, #172]	; (800720c <USBD_SetConfig+0x150>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007166:	4b29      	ldr	r3, [pc, #164]	; (800720c <USBD_SetConfig+0x150>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7fe ffd6 	bl	800611e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fa06 	bl	8007584 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007178:	e042      	b.n	8007200 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800717a:	4b24      	ldr	r3, [pc, #144]	; (800720c <USBD_SetConfig+0x150>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	461a      	mov	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	429a      	cmp	r2, r3
 8007186:	d02a      	beq.n	80071de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	b2db      	uxtb	r3, r3
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7fe ffc4 	bl	800611e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007196:	4b1d      	ldr	r3, [pc, #116]	; (800720c <USBD_SetConfig+0x150>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80071a0:	4b1a      	ldr	r3, [pc, #104]	; (800720c <USBD_SetConfig+0x150>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7fe ff9d 	bl	80060e6 <USBD_SetClassConfig>
 80071ac:	4603      	mov	r3, r0
 80071ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00f      	beq.n	80071d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f918 	bl	80073ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7fe ffa9 	bl	800611e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80071d4:	e014      	b.n	8007200 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f9d4 	bl	8007584 <USBD_CtlSendStatus>
      break;
 80071dc:	e010      	b.n	8007200 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 f9d0 	bl	8007584 <USBD_CtlSendStatus>
      break;
 80071e4:	e00c      	b.n	8007200 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80071e6:	6839      	ldr	r1, [r7, #0]
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f900 	bl	80073ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80071ee:	4b07      	ldr	r3, [pc, #28]	; (800720c <USBD_SetConfig+0x150>)
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7fe ff92 	bl	800611e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80071fa:	2303      	movs	r3, #3
 80071fc:	73fb      	strb	r3, [r7, #15]
      break;
 80071fe:	bf00      	nop
  }

  return ret;
 8007200:	7bfb      	ldrb	r3, [r7, #15]
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000394 	.word	0x20000394

08007210 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	88db      	ldrh	r3, [r3, #6]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d004      	beq.n	800722c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 f8e2 	bl	80073ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800722a:	e023      	b.n	8007274 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b02      	cmp	r3, #2
 8007236:	dc02      	bgt.n	800723e <USBD_GetConfig+0x2e>
 8007238:	2b00      	cmp	r3, #0
 800723a:	dc03      	bgt.n	8007244 <USBD_GetConfig+0x34>
 800723c:	e015      	b.n	800726a <USBD_GetConfig+0x5a>
 800723e:	2b03      	cmp	r3, #3
 8007240:	d00b      	beq.n	800725a <USBD_GetConfig+0x4a>
 8007242:	e012      	b.n	800726a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	3308      	adds	r3, #8
 800724e:	2201      	movs	r2, #1
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f93c 	bl	80074d0 <USBD_CtlSendData>
        break;
 8007258:	e00c      	b.n	8007274 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	3304      	adds	r3, #4
 800725e:	2201      	movs	r2, #1
 8007260:	4619      	mov	r1, r3
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f934 	bl	80074d0 <USBD_CtlSendData>
        break;
 8007268:	e004      	b.n	8007274 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f8be 	bl	80073ee <USBD_CtlError>
        break;
 8007272:	bf00      	nop
}
 8007274:	bf00      	nop
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800728c:	b2db      	uxtb	r3, r3
 800728e:	3b01      	subs	r3, #1
 8007290:	2b02      	cmp	r3, #2
 8007292:	d81e      	bhi.n	80072d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	88db      	ldrh	r3, [r3, #6]
 8007298:	2b02      	cmp	r3, #2
 800729a:	d004      	beq.n	80072a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f8a5 	bl	80073ee <USBD_CtlError>
        break;
 80072a4:	e01a      	b.n	80072dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2201      	movs	r2, #1
 80072aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d005      	beq.n	80072c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f043 0202 	orr.w	r2, r3, #2
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	330c      	adds	r3, #12
 80072c6:	2202      	movs	r2, #2
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f900 	bl	80074d0 <USBD_CtlSendData>
      break;
 80072d0:	e004      	b.n	80072dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80072d2:	6839      	ldr	r1, [r7, #0]
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 f88a 	bl	80073ee <USBD_CtlError>
      break;
 80072da:	bf00      	nop
  }
}
 80072dc:	bf00      	nop
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	885b      	ldrh	r3, [r3, #2]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d107      	bne.n	8007306 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f940 	bl	8007584 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007304:	e013      	b.n	800732e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	885b      	ldrh	r3, [r3, #2]
 800730a:	2b02      	cmp	r3, #2
 800730c:	d10b      	bne.n	8007326 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	889b      	ldrh	r3, [r3, #4]
 8007312:	0a1b      	lsrs	r3, r3, #8
 8007314:	b29b      	uxth	r3, r3
 8007316:	b2da      	uxtb	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f930 	bl	8007584 <USBD_CtlSendStatus>
}
 8007324:	e003      	b.n	800732e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007326:	6839      	ldr	r1, [r7, #0]
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f860 	bl	80073ee <USBD_CtlError>
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007346:	b2db      	uxtb	r3, r3
 8007348:	3b01      	subs	r3, #1
 800734a:	2b02      	cmp	r3, #2
 800734c:	d80b      	bhi.n	8007366 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	885b      	ldrh	r3, [r3, #2]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d10c      	bne.n	8007370 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f910 	bl	8007584 <USBD_CtlSendStatus>
      }
      break;
 8007364:	e004      	b.n	8007370 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f840 	bl	80073ee <USBD_CtlError>
      break;
 800736e:	e000      	b.n	8007372 <USBD_ClrFeature+0x3c>
      break;
 8007370:	bf00      	nop
  }
}
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	781a      	ldrb	r2, [r3, #0]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3301      	adds	r3, #1
 8007394:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	781a      	ldrb	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3301      	adds	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7ff fa41 	bl	800682c <SWAPBYTE>
 80073aa:	4603      	mov	r3, r0
 80073ac:	461a      	mov	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3301      	adds	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80073be:	68f8      	ldr	r0, [r7, #12]
 80073c0:	f7ff fa34 	bl	800682c <SWAPBYTE>
 80073c4:	4603      	mov	r3, r0
 80073c6:	461a      	mov	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	3301      	adds	r3, #1
 80073d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f7ff fa27 	bl	800682c <SWAPBYTE>
 80073de:	4603      	mov	r3, r0
 80073e0:	461a      	mov	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	80da      	strh	r2, [r3, #6]
}
 80073e6:	bf00      	nop
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b082      	sub	sp, #8
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80073f8:	2180      	movs	r1, #128	; 0x80
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f004 fdde 	bl	800bfbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007400:	2100      	movs	r1, #0
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f004 fdda 	bl	800bfbc <USBD_LL_StallEP>
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	60b9      	str	r1, [r7, #8]
 800741a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d036      	beq.n	8007494 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800742a:	6938      	ldr	r0, [r7, #16]
 800742c:	f000 f836 	bl	800749c <USBD_GetLen>
 8007430:	4603      	mov	r3, r0
 8007432:	3301      	adds	r3, #1
 8007434:	b29b      	uxth	r3, r3
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	b29a      	uxth	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800743e:	7dfb      	ldrb	r3, [r7, #23]
 8007440:	68ba      	ldr	r2, [r7, #8]
 8007442:	4413      	add	r3, r2
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	7812      	ldrb	r2, [r2, #0]
 8007448:	701a      	strb	r2, [r3, #0]
  idx++;
 800744a:	7dfb      	ldrb	r3, [r7, #23]
 800744c:	3301      	adds	r3, #1
 800744e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	4413      	add	r3, r2
 8007456:	2203      	movs	r2, #3
 8007458:	701a      	strb	r2, [r3, #0]
  idx++;
 800745a:	7dfb      	ldrb	r3, [r7, #23]
 800745c:	3301      	adds	r3, #1
 800745e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007460:	e013      	b.n	800748a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007462:	7dfb      	ldrb	r3, [r7, #23]
 8007464:	68ba      	ldr	r2, [r7, #8]
 8007466:	4413      	add	r3, r2
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	7812      	ldrb	r2, [r2, #0]
 800746c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	3301      	adds	r3, #1
 8007472:	613b      	str	r3, [r7, #16]
    idx++;
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	3301      	adds	r3, #1
 8007478:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800747a:	7dfb      	ldrb	r3, [r7, #23]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	4413      	add	r3, r2
 8007480:	2200      	movs	r2, #0
 8007482:	701a      	strb	r2, [r3, #0]
    idx++;
 8007484:	7dfb      	ldrb	r3, [r7, #23]
 8007486:	3301      	adds	r3, #1
 8007488:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e7      	bne.n	8007462 <USBD_GetString+0x52>
 8007492:	e000      	b.n	8007496 <USBD_GetString+0x86>
    return;
 8007494:	bf00      	nop
  }
}
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80074ac:	e005      	b.n	80074ba <USBD_GetLen+0x1e>
  {
    len++;
 80074ae:	7bfb      	ldrb	r3, [r7, #15]
 80074b0:	3301      	adds	r3, #1
 80074b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	3301      	adds	r3, #1
 80074b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1f5      	bne.n	80074ae <USBD_GetLen+0x12>
  }

  return len;
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2202      	movs	r2, #2
 80074e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	2100      	movs	r1, #0
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f004 fde9 	bl	800c0ce <USBD_LL_Transmit>

  return USBD_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}

08007506 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	2100      	movs	r1, #0
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f004 fdd8 	bl	800c0ce <USBD_LL_Transmit>

  return USBD_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	60f8      	str	r0, [r7, #12]
 8007530:	60b9      	str	r1, [r7, #8]
 8007532:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2203      	movs	r2, #3
 8007538:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	2100      	movs	r1, #0
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f004 fddc 	bl	800c110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	60f8      	str	r0, [r7, #12]
 800756a:	60b9      	str	r1, [r7, #8]
 800756c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	2100      	movs	r1, #0
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f004 fdcb 	bl	800c110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2204      	movs	r2, #4
 8007590:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007594:	2300      	movs	r3, #0
 8007596:	2200      	movs	r2, #0
 8007598:	2100      	movs	r1, #0
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f004 fd97 	bl	800c0ce <USBD_LL_Transmit>

  return USBD_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b082      	sub	sp, #8
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2205      	movs	r2, #5
 80075b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075ba:	2300      	movs	r3, #0
 80075bc:	2200      	movs	r2, #0
 80075be:	2100      	movs	r1, #0
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f004 fda5 	bl	800c110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3708      	adds	r7, #8
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <__NVIC_SetPriority>:
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	4603      	mov	r3, r0
 80075d8:	6039      	str	r1, [r7, #0]
 80075da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80075dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	db0a      	blt.n	80075fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	490c      	ldr	r1, [pc, #48]	; (800761c <__NVIC_SetPriority+0x4c>)
 80075ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80075ee:	0112      	lsls	r2, r2, #4
 80075f0:	b2d2      	uxtb	r2, r2
 80075f2:	440b      	add	r3, r1
 80075f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80075f8:	e00a      	b.n	8007610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	b2da      	uxtb	r2, r3
 80075fe:	4908      	ldr	r1, [pc, #32]	; (8007620 <__NVIC_SetPriority+0x50>)
 8007600:	79fb      	ldrb	r3, [r7, #7]
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	3b04      	subs	r3, #4
 8007608:	0112      	lsls	r2, r2, #4
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	440b      	add	r3, r1
 800760e:	761a      	strb	r2, [r3, #24]
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	e000e100 	.word	0xe000e100
 8007620:	e000ed00 	.word	0xe000ed00

08007624 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007624:	b580      	push	{r7, lr}
 8007626:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007628:	2100      	movs	r1, #0
 800762a:	f06f 0004 	mvn.w	r0, #4
 800762e:	f7ff ffcf 	bl	80075d0 <__NVIC_SetPriority>
#endif
}
 8007632:	bf00      	nop
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800763e:	f3ef 8305 	mrs	r3, IPSR
 8007642:	603b      	str	r3, [r7, #0]
  return(result);
 8007644:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007646:	2b00      	cmp	r3, #0
 8007648:	d003      	beq.n	8007652 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800764a:	f06f 0305 	mvn.w	r3, #5
 800764e:	607b      	str	r3, [r7, #4]
 8007650:	e00c      	b.n	800766c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007652:	4b0a      	ldr	r3, [pc, #40]	; (800767c <osKernelInitialize+0x44>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800765a:	4b08      	ldr	r3, [pc, #32]	; (800767c <osKernelInitialize+0x44>)
 800765c:	2201      	movs	r2, #1
 800765e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007660:	2300      	movs	r3, #0
 8007662:	607b      	str	r3, [r7, #4]
 8007664:	e002      	b.n	800766c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800766a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800766c:	687b      	ldr	r3, [r7, #4]
}
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	20000398 	.word	0x20000398

08007680 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007686:	f3ef 8305 	mrs	r3, IPSR
 800768a:	603b      	str	r3, [r7, #0]
  return(result);
 800768c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007692:	f06f 0305 	mvn.w	r3, #5
 8007696:	607b      	str	r3, [r7, #4]
 8007698:	e010      	b.n	80076bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800769a:	4b0b      	ldr	r3, [pc, #44]	; (80076c8 <osKernelStart+0x48>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d109      	bne.n	80076b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80076a2:	f7ff ffbf 	bl	8007624 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80076a6:	4b08      	ldr	r3, [pc, #32]	; (80076c8 <osKernelStart+0x48>)
 80076a8:	2202      	movs	r2, #2
 80076aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80076ac:	f001 fdf2 	bl	8009294 <vTaskStartScheduler>
      stat = osOK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	607b      	str	r3, [r7, #4]
 80076b4:	e002      	b.n	80076bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80076b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80076bc:	687b      	ldr	r3, [r7, #4]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20000398 	.word	0x20000398

080076cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08e      	sub	sp, #56	; 0x38
 80076d0:	af04      	add	r7, sp, #16
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80076d8:	2300      	movs	r3, #0
 80076da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076dc:	f3ef 8305 	mrs	r3, IPSR
 80076e0:	617b      	str	r3, [r7, #20]
  return(result);
 80076e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d17e      	bne.n	80077e6 <osThreadNew+0x11a>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d07b      	beq.n	80077e6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80076ee:	2380      	movs	r3, #128	; 0x80
 80076f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80076f2:	2318      	movs	r3, #24
 80076f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80076f6:	2300      	movs	r3, #0
 80076f8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80076fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d045      	beq.n	8007792 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d002      	beq.n	8007714 <osThreadNew+0x48>
        name = attr->name;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	699b      	ldr	r3, [r3, #24]
 8007720:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d008      	beq.n	800773a <osThreadNew+0x6e>
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	2b38      	cmp	r3, #56	; 0x38
 800772c:	d805      	bhi.n	800773a <osThreadNew+0x6e>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d001      	beq.n	800773e <osThreadNew+0x72>
        return (NULL);
 800773a:	2300      	movs	r3, #0
 800773c:	e054      	b.n	80077e8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	695b      	ldr	r3, [r3, #20]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d003      	beq.n	800774e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	089b      	lsrs	r3, r3, #2
 800774c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d00e      	beq.n	8007774 <osThreadNew+0xa8>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	2bcb      	cmp	r3, #203	; 0xcb
 800775c:	d90a      	bls.n	8007774 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007762:	2b00      	cmp	r3, #0
 8007764:	d006      	beq.n	8007774 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <osThreadNew+0xa8>
        mem = 1;
 800776e:	2301      	movs	r3, #1
 8007770:	61bb      	str	r3, [r7, #24]
 8007772:	e010      	b.n	8007796 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10c      	bne.n	8007796 <osThreadNew+0xca>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d108      	bne.n	8007796 <osThreadNew+0xca>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d104      	bne.n	8007796 <osThreadNew+0xca>
          mem = 0;
 800778c:	2300      	movs	r3, #0
 800778e:	61bb      	str	r3, [r7, #24]
 8007790:	e001      	b.n	8007796 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007792:	2300      	movs	r3, #0
 8007794:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d110      	bne.n	80077be <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80077a4:	9202      	str	r2, [sp, #8]
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	6a3a      	ldr	r2, [r7, #32]
 80077b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f001 fb1c 	bl	8008df0 <xTaskCreateStatic>
 80077b8:	4603      	mov	r3, r0
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	e013      	b.n	80077e6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d110      	bne.n	80077e6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80077c4:	6a3b      	ldr	r3, [r7, #32]
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	f107 0310 	add.w	r3, r7, #16
 80077cc:	9301      	str	r3, [sp, #4]
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f001 fb67 	bl	8008eaa <xTaskCreate>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d001      	beq.n	80077e6 <osThreadNew+0x11a>
            hTask = NULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80077e6:	693b      	ldr	r3, [r7, #16]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3728      	adds	r7, #40	; 0x28
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	4a07      	ldr	r2, [pc, #28]	; (800781c <vApplicationGetIdleTaskMemory+0x2c>)
 8007800:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	4a06      	ldr	r2, [pc, #24]	; (8007820 <vApplicationGetIdleTaskMemory+0x30>)
 8007806:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2280      	movs	r2, #128	; 0x80
 800780c:	601a      	str	r2, [r3, #0]
}
 800780e:	bf00      	nop
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	2000039c 	.word	0x2000039c
 8007820:	20000468 	.word	0x20000468

08007824 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4a07      	ldr	r2, [pc, #28]	; (8007850 <vApplicationGetTimerTaskMemory+0x2c>)
 8007834:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	4a06      	ldr	r2, [pc, #24]	; (8007854 <vApplicationGetTimerTaskMemory+0x30>)
 800783a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007842:	601a      	str	r2, [r3, #0]
}
 8007844:	bf00      	nop
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	20000668 	.word	0x20000668
 8007854:	20000734 	.word	0x20000734

08007858 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f103 0208 	add.w	r2, r3, #8
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007870:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f103 0208 	add.w	r2, r3, #8
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f103 0208 	add.w	r2, r3, #8
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800788c:	bf00      	nop
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078b2:	b480      	push	{r7}
 80078b4:	b085      	sub	sp, #20
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
 80078ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689a      	ldr	r2, [r3, #8]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	689b      	ldr	r3, [r3, #8]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	1c5a      	adds	r2, r3, #1
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	601a      	str	r2, [r3, #0]
}
 80078ee:	bf00      	nop
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80078fa:	b480      	push	{r7}
 80078fc:	b085      	sub	sp, #20
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007910:	d103      	bne.n	800791a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	691b      	ldr	r3, [r3, #16]
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	e00c      	b.n	8007934 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3308      	adds	r3, #8
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	e002      	b.n	8007928 <vListInsert+0x2e>
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	429a      	cmp	r2, r3
 8007932:	d2f6      	bcs.n	8007922 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	685a      	ldr	r2, [r3, #4]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	683a      	ldr	r2, [r7, #0]
 8007942:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	1c5a      	adds	r2, r3, #1
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	601a      	str	r2, [r3, #0]
}
 8007960:	bf00      	nop
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6892      	ldr	r2, [r2, #8]
 8007982:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	6852      	ldr	r2, [r2, #4]
 800798c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	429a      	cmp	r2, r3
 8007996:	d103      	bne.n	80079a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	1e5a      	subs	r2, r3, #1
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d10a      	bne.n	80079ea <xQueueGenericReset+0x2a>
	__asm volatile
 80079d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d8:	f383 8811 	msr	BASEPRI, r3
 80079dc:	f3bf 8f6f 	isb	sy
 80079e0:	f3bf 8f4f 	dsb	sy
 80079e4:	60bb      	str	r3, [r7, #8]
}
 80079e6:	bf00      	nop
 80079e8:	e7fe      	b.n	80079e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80079ea:	f003 fb5b 	bl	800b0a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f6:	68f9      	ldr	r1, [r7, #12]
 80079f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079fa:	fb01 f303 	mul.w	r3, r1, r3
 80079fe:	441a      	add	r2, r3
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	68f9      	ldr	r1, [r7, #12]
 8007a1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a20:	fb01 f303 	mul.w	r3, r1, r3
 8007a24:	441a      	add	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	22ff      	movs	r2, #255	; 0xff
 8007a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	22ff      	movs	r2, #255	; 0xff
 8007a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d114      	bne.n	8007a6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	691b      	ldr	r3, [r3, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01a      	beq.n	8007a7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3310      	adds	r3, #16
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f001 ff49 	bl	80098e4 <xTaskRemoveFromEventList>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d012      	beq.n	8007a7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007a58:	4b0c      	ldr	r3, [pc, #48]	; (8007a8c <xQueueGenericReset+0xcc>)
 8007a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	e009      	b.n	8007a7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3310      	adds	r3, #16
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff fef2 	bl	8007858 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	3324      	adds	r3, #36	; 0x24
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7ff feed 	bl	8007858 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a7e:	f003 fb41 	bl	800b104 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a82:	2301      	movs	r3, #1
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	e000ed04 	.word	0xe000ed04

08007a90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b08e      	sub	sp, #56	; 0x38
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ab6:	bf00      	nop
 8007ab8:	e7fe      	b.n	8007ab8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d10a      	bne.n	8007ad6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ad2:	bf00      	nop
 8007ad4:	e7fe      	b.n	8007ad4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <xQueueGenericCreateStatic+0x52>
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d001      	beq.n	8007ae6 <xQueueGenericCreateStatic+0x56>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e000      	b.n	8007ae8 <xQueueGenericCreateStatic+0x58>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10a      	bne.n	8007b02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	623b      	str	r3, [r7, #32]
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d102      	bne.n	8007b0e <xQueueGenericCreateStatic+0x7e>
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <xQueueGenericCreateStatic+0x82>
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e000      	b.n	8007b14 <xQueueGenericCreateStatic+0x84>
 8007b12:	2300      	movs	r3, #0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10a      	bne.n	8007b2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	61fb      	str	r3, [r7, #28]
}
 8007b2a:	bf00      	nop
 8007b2c:	e7fe      	b.n	8007b2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b2e:	2350      	movs	r3, #80	; 0x50
 8007b30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	2b50      	cmp	r3, #80	; 0x50
 8007b36:	d00a      	beq.n	8007b4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	61bb      	str	r3, [r7, #24]
}
 8007b4a:	bf00      	nop
 8007b4c:	e7fe      	b.n	8007b4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007b4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00d      	beq.n	8007b76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	68b9      	ldr	r1, [r7, #8]
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 f83f 	bl	8007bf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3730      	adds	r7, #48	; 0x30
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b08a      	sub	sp, #40	; 0x28
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10a      	bne.n	8007baa <xQueueGenericCreate+0x2a>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	613b      	str	r3, [r7, #16]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	fb02 f303 	mul.w	r3, r2, r3
 8007bb2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	3350      	adds	r3, #80	; 0x50
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f003 fb95 	bl	800b2e8 <pvPortMalloc>
 8007bbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d011      	beq.n	8007bea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007bc6:	69bb      	ldr	r3, [r7, #24]
 8007bc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	3350      	adds	r3, #80	; 0x50
 8007bce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007bd0:	69bb      	ldr	r3, [r7, #24]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bd8:	79fa      	ldrb	r2, [r7, #7]
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	4613      	mov	r3, r2
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	68b9      	ldr	r1, [r7, #8]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 f805 	bl	8007bf4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bea:	69bb      	ldr	r3, [r7, #24]
	}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3720      	adds	r7, #32
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d103      	bne.n	8007c10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e002      	b.n	8007c16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	687a      	ldr	r2, [r7, #4]
 8007c14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	68fa      	ldr	r2, [r7, #12]
 8007c1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	68ba      	ldr	r2, [r7, #8]
 8007c20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c22:	2101      	movs	r1, #1
 8007c24:	69b8      	ldr	r0, [r7, #24]
 8007c26:	f7ff fecb 	bl	80079c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c32:	bf00      	nop
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08e      	sub	sp, #56	; 0x38
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
 8007c48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d10a      	bne.n	8007c6e <xQueueGenericSend+0x32>
	__asm volatile
 8007c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5c:	f383 8811 	msr	BASEPRI, r3
 8007c60:	f3bf 8f6f 	isb	sy
 8007c64:	f3bf 8f4f 	dsb	sy
 8007c68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c6a:	bf00      	nop
 8007c6c:	e7fe      	b.n	8007c6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d103      	bne.n	8007c7c <xQueueGenericSend+0x40>
 8007c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d101      	bne.n	8007c80 <xQueueGenericSend+0x44>
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e000      	b.n	8007c82 <xQueueGenericSend+0x46>
 8007c80:	2300      	movs	r3, #0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10a      	bne.n	8007c9c <xQueueGenericSend+0x60>
	__asm volatile
 8007c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8a:	f383 8811 	msr	BASEPRI, r3
 8007c8e:	f3bf 8f6f 	isb	sy
 8007c92:	f3bf 8f4f 	dsb	sy
 8007c96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c98:	bf00      	nop
 8007c9a:	e7fe      	b.n	8007c9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d103      	bne.n	8007caa <xQueueGenericSend+0x6e>
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca6:	2b01      	cmp	r3, #1
 8007ca8:	d101      	bne.n	8007cae <xQueueGenericSend+0x72>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e000      	b.n	8007cb0 <xQueueGenericSend+0x74>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <xQueueGenericSend+0x8e>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	623b      	str	r3, [r7, #32]
}
 8007cc6:	bf00      	nop
 8007cc8:	e7fe      	b.n	8007cc8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cca:	f002 f8b1 	bl	8009e30 <xTaskGetSchedulerState>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d102      	bne.n	8007cda <xQueueGenericSend+0x9e>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <xQueueGenericSend+0xa2>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e000      	b.n	8007ce0 <xQueueGenericSend+0xa4>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <xQueueGenericSend+0xbe>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	61fb      	str	r3, [r7, #28]
}
 8007cf6:	bf00      	nop
 8007cf8:	e7fe      	b.n	8007cf8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cfa:	f003 f9d3 	bl	800b0a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d302      	bcc.n	8007d10 <xQueueGenericSend+0xd4>
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	d129      	bne.n	8007d64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d10:	683a      	ldr	r2, [r7, #0]
 8007d12:	68b9      	ldr	r1, [r7, #8]
 8007d14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d16:	f000 fbbb 	bl	8008490 <prvCopyDataToQueue>
 8007d1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d010      	beq.n	8007d46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d26:	3324      	adds	r3, #36	; 0x24
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f001 fddb 	bl	80098e4 <xTaskRemoveFromEventList>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d013      	beq.n	8007d5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d34:	4b3f      	ldr	r3, [pc, #252]	; (8007e34 <xQueueGenericSend+0x1f8>)
 8007d36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	f3bf 8f6f 	isb	sy
 8007d44:	e00a      	b.n	8007d5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d007      	beq.n	8007d5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d4c:	4b39      	ldr	r3, [pc, #228]	; (8007e34 <xQueueGenericSend+0x1f8>)
 8007d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d52:	601a      	str	r2, [r3, #0]
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d5c:	f003 f9d2 	bl	800b104 <vPortExitCritical>
				return pdPASS;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e063      	b.n	8007e2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d103      	bne.n	8007d72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d6a:	f003 f9cb 	bl	800b104 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d6e:	2300      	movs	r3, #0
 8007d70:	e05c      	b.n	8007e2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d106      	bne.n	8007d86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d78:	f107 0314 	add.w	r3, r7, #20
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f001 fe15 	bl	80099ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d82:	2301      	movs	r3, #1
 8007d84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d86:	f003 f9bd 	bl	800b104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d8a:	f001 faf3 	bl	8009374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d8e:	f003 f989 	bl	800b0a4 <vPortEnterCritical>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d98:	b25b      	sxtb	r3, r3
 8007d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d9e:	d103      	bne.n	8007da8 <xQueueGenericSend+0x16c>
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	2200      	movs	r2, #0
 8007da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dae:	b25b      	sxtb	r3, r3
 8007db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007db4:	d103      	bne.n	8007dbe <xQueueGenericSend+0x182>
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dbe:	f003 f9a1 	bl	800b104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dc2:	1d3a      	adds	r2, r7, #4
 8007dc4:	f107 0314 	add.w	r3, r7, #20
 8007dc8:	4611      	mov	r1, r2
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f001 fe04 	bl	80099d8 <xTaskCheckForTimeOut>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d124      	bne.n	8007e20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dd8:	f000 fc52 	bl	8008680 <prvIsQueueFull>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d018      	beq.n	8007e14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	3310      	adds	r3, #16
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	4611      	mov	r1, r2
 8007dea:	4618      	mov	r0, r3
 8007dec:	f001 fd2a 	bl	8009844 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007df2:	f000 fbdd 	bl	80085b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007df6:	f001 facb 	bl	8009390 <xTaskResumeAll>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f47f af7c 	bne.w	8007cfa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007e02:	4b0c      	ldr	r3, [pc, #48]	; (8007e34 <xQueueGenericSend+0x1f8>)
 8007e04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	e772      	b.n	8007cfa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e16:	f000 fbcb 	bl	80085b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e1a:	f001 fab9 	bl	8009390 <xTaskResumeAll>
 8007e1e:	e76c      	b.n	8007cfa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e22:	f000 fbc5 	bl	80085b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e26:	f001 fab3 	bl	8009390 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007e2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3738      	adds	r7, #56	; 0x38
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	e000ed04 	.word	0xe000ed04

08007e38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b090      	sub	sp, #64	; 0x40
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10a      	bne.n	8007e66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007e62:	bf00      	nop
 8007e64:	e7fe      	b.n	8007e64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d103      	bne.n	8007e74 <xQueueGenericSendFromISR+0x3c>
 8007e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d101      	bne.n	8007e78 <xQueueGenericSendFromISR+0x40>
 8007e74:	2301      	movs	r3, #1
 8007e76:	e000      	b.n	8007e7a <xQueueGenericSendFromISR+0x42>
 8007e78:	2300      	movs	r3, #0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10a      	bne.n	8007e94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e90:	bf00      	nop
 8007e92:	e7fe      	b.n	8007e92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d103      	bne.n	8007ea2 <xQueueGenericSendFromISR+0x6a>
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d101      	bne.n	8007ea6 <xQueueGenericSendFromISR+0x6e>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e000      	b.n	8007ea8 <xQueueGenericSendFromISR+0x70>
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10a      	bne.n	8007ec2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	623b      	str	r3, [r7, #32]
}
 8007ebe:	bf00      	nop
 8007ec0:	e7fe      	b.n	8007ec0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ec2:	f003 f9d1 	bl	800b268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007ec6:	f3ef 8211 	mrs	r2, BASEPRI
 8007eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	61fa      	str	r2, [r7, #28]
 8007edc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ede:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ee0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d302      	bcc.n	8007ef4 <xQueueGenericSendFromISR+0xbc>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d12f      	bne.n	8007f54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	68b9      	ldr	r1, [r7, #8]
 8007f08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f0a:	f000 fac1 	bl	8008490 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007f12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f16:	d112      	bne.n	8007f3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d016      	beq.n	8007f4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f22:	3324      	adds	r3, #36	; 0x24
 8007f24:	4618      	mov	r0, r3
 8007f26:	f001 fcdd 	bl	80098e4 <xTaskRemoveFromEventList>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00e      	beq.n	8007f4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00b      	beq.n	8007f4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	601a      	str	r2, [r3, #0]
 8007f3c:	e007      	b.n	8007f4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f42:	3301      	adds	r3, #1
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	b25a      	sxtb	r2, r3
 8007f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007f52:	e001      	b.n	8007f58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f54:	2300      	movs	r3, #0
 8007f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007f62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3740      	adds	r7, #64	; 0x40
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b08e      	sub	sp, #56	; 0x38
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10a      	bne.n	8007f98 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	623b      	str	r3, [r7, #32]
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8007fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa4:	f383 8811 	msr	BASEPRI, r3
 8007fa8:	f3bf 8f6f 	isb	sy
 8007fac:	f3bf 8f4f 	dsb	sy
 8007fb0:	61fb      	str	r3, [r7, #28]
}
 8007fb2:	bf00      	nop
 8007fb4:	e7fe      	b.n	8007fb4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d103      	bne.n	8007fc6 <xQueueGiveFromISR+0x58>
 8007fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <xQueueGiveFromISR+0x5c>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e000      	b.n	8007fcc <xQueueGiveFromISR+0x5e>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10a      	bne.n	8007fe6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	61bb      	str	r3, [r7, #24]
}
 8007fe2:	bf00      	nop
 8007fe4:	e7fe      	b.n	8007fe4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fe6:	f003 f93f 	bl	800b268 <vPortValidateInterruptPriority>
	__asm volatile
 8007fea:	f3ef 8211 	mrs	r2, BASEPRI
 8007fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff2:	f383 8811 	msr	BASEPRI, r3
 8007ff6:	f3bf 8f6f 	isb	sy
 8007ffa:	f3bf 8f4f 	dsb	sy
 8007ffe:	617a      	str	r2, [r7, #20]
 8008000:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008002:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008004:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008012:	429a      	cmp	r2, r3
 8008014:	d22b      	bcs.n	800806e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008018:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800801c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008028:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008030:	d112      	bne.n	8008058 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008036:	2b00      	cmp	r3, #0
 8008038:	d016      	beq.n	8008068 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	3324      	adds	r3, #36	; 0x24
 800803e:	4618      	mov	r0, r3
 8008040:	f001 fc50 	bl	80098e4 <xTaskRemoveFromEventList>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00e      	beq.n	8008068 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00b      	beq.n	8008068 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2201      	movs	r2, #1
 8008054:	601a      	str	r2, [r3, #0]
 8008056:	e007      	b.n	8008068 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800805c:	3301      	adds	r3, #1
 800805e:	b2db      	uxtb	r3, r3
 8008060:	b25a      	sxtb	r2, r3
 8008062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008068:	2301      	movs	r3, #1
 800806a:	637b      	str	r3, [r7, #52]	; 0x34
 800806c:	e001      	b.n	8008072 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800806e:	2300      	movs	r3, #0
 8008070:	637b      	str	r3, [r7, #52]	; 0x34
 8008072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008074:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f383 8811 	msr	BASEPRI, r3
}
 800807c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800807e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008080:	4618      	mov	r0, r3
 8008082:	3738      	adds	r7, #56	; 0x38
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}

08008088 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b08c      	sub	sp, #48	; 0x30
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008094:	2300      	movs	r3, #0
 8008096:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10a      	bne.n	80080b8 <xQueueReceive+0x30>
	__asm volatile
 80080a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080a6:	f383 8811 	msr	BASEPRI, r3
 80080aa:	f3bf 8f6f 	isb	sy
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	623b      	str	r3, [r7, #32]
}
 80080b4:	bf00      	nop
 80080b6:	e7fe      	b.n	80080b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d103      	bne.n	80080c6 <xQueueReceive+0x3e>
 80080be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <xQueueReceive+0x42>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e000      	b.n	80080cc <xQueueReceive+0x44>
 80080ca:	2300      	movs	r3, #0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d10a      	bne.n	80080e6 <xQueueReceive+0x5e>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	61fb      	str	r3, [r7, #28]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080e6:	f001 fea3 	bl	8009e30 <xTaskGetSchedulerState>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d102      	bne.n	80080f6 <xQueueReceive+0x6e>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <xQueueReceive+0x72>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e000      	b.n	80080fc <xQueueReceive+0x74>
 80080fa:	2300      	movs	r3, #0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10a      	bne.n	8008116 <xQueueReceive+0x8e>
	__asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	61bb      	str	r3, [r7, #24]
}
 8008112:	bf00      	nop
 8008114:	e7fe      	b.n	8008114 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008116:	f002 ffc5 	bl	800b0a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	2b00      	cmp	r3, #0
 8008124:	d01f      	beq.n	8008166 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008126:	68b9      	ldr	r1, [r7, #8]
 8008128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800812a:	f000 fa1b 	bl	8008564 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	1e5a      	subs	r2, r3, #1
 8008132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008134:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00f      	beq.n	800815e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	3310      	adds	r3, #16
 8008142:	4618      	mov	r0, r3
 8008144:	f001 fbce 	bl	80098e4 <xTaskRemoveFromEventList>
 8008148:	4603      	mov	r3, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	d007      	beq.n	800815e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800814e:	4b3d      	ldr	r3, [pc, #244]	; (8008244 <xQueueReceive+0x1bc>)
 8008150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800815e:	f002 ffd1 	bl	800b104 <vPortExitCritical>
				return pdPASS;
 8008162:	2301      	movs	r3, #1
 8008164:	e069      	b.n	800823a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d103      	bne.n	8008174 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800816c:	f002 ffca 	bl	800b104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008170:	2300      	movs	r3, #0
 8008172:	e062      	b.n	800823a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008176:	2b00      	cmp	r3, #0
 8008178:	d106      	bne.n	8008188 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800817a:	f107 0310 	add.w	r3, r7, #16
 800817e:	4618      	mov	r0, r3
 8008180:	f001 fc14 	bl	80099ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008184:	2301      	movs	r3, #1
 8008186:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008188:	f002 ffbc 	bl	800b104 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800818c:	f001 f8f2 	bl	8009374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008190:	f002 ff88 	bl	800b0a4 <vPortEnterCritical>
 8008194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800819a:	b25b      	sxtb	r3, r3
 800819c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081a0:	d103      	bne.n	80081aa <xQueueReceive+0x122>
 80081a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a4:	2200      	movs	r2, #0
 80081a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081b0:	b25b      	sxtb	r3, r3
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081b6:	d103      	bne.n	80081c0 <xQueueReceive+0x138>
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081c0:	f002 ffa0 	bl	800b104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80081c4:	1d3a      	adds	r2, r7, #4
 80081c6:	f107 0310 	add.w	r3, r7, #16
 80081ca:	4611      	mov	r1, r2
 80081cc:	4618      	mov	r0, r3
 80081ce:	f001 fc03 	bl	80099d8 <xTaskCheckForTimeOut>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d123      	bne.n	8008220 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081da:	f000 fa3b 	bl	8008654 <prvIsQueueEmpty>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d017      	beq.n	8008214 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e6:	3324      	adds	r3, #36	; 0x24
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	4611      	mov	r1, r2
 80081ec:	4618      	mov	r0, r3
 80081ee:	f001 fb29 	bl	8009844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081f4:	f000 f9dc 	bl	80085b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081f8:	f001 f8ca 	bl	8009390 <xTaskResumeAll>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d189      	bne.n	8008116 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008202:	4b10      	ldr	r3, [pc, #64]	; (8008244 <xQueueReceive+0x1bc>)
 8008204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008208:	601a      	str	r2, [r3, #0]
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	e780      	b.n	8008116 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008216:	f000 f9cb 	bl	80085b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800821a:	f001 f8b9 	bl	8009390 <xTaskResumeAll>
 800821e:	e77a      	b.n	8008116 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008222:	f000 f9c5 	bl	80085b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008226:	f001 f8b3 	bl	8009390 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800822a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800822c:	f000 fa12 	bl	8008654 <prvIsQueueEmpty>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	f43f af6f 	beq.w	8008116 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008238:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800823a:	4618      	mov	r0, r3
 800823c:	3730      	adds	r7, #48	; 0x30
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
 8008242:	bf00      	nop
 8008244:	e000ed04 	.word	0xe000ed04

08008248 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b08e      	sub	sp, #56	; 0x38
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008252:	2300      	movs	r3, #0
 8008254:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800825a:	2300      	movs	r3, #0
 800825c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800825e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10a      	bne.n	800827a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	f383 8811 	msr	BASEPRI, r3
 800826c:	f3bf 8f6f 	isb	sy
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	623b      	str	r3, [r7, #32]
}
 8008276:	bf00      	nop
 8008278:	e7fe      	b.n	8008278 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800827a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00a      	beq.n	8008298 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	61fb      	str	r3, [r7, #28]
}
 8008294:	bf00      	nop
 8008296:	e7fe      	b.n	8008296 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008298:	f001 fdca 	bl	8009e30 <xTaskGetSchedulerState>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d102      	bne.n	80082a8 <xQueueSemaphoreTake+0x60>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d101      	bne.n	80082ac <xQueueSemaphoreTake+0x64>
 80082a8:	2301      	movs	r3, #1
 80082aa:	e000      	b.n	80082ae <xQueueSemaphoreTake+0x66>
 80082ac:	2300      	movs	r3, #0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10a      	bne.n	80082c8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	61bb      	str	r3, [r7, #24]
}
 80082c4:	bf00      	nop
 80082c6:	e7fe      	b.n	80082c6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082c8:	f002 feec 	bl	800b0a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80082cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d024      	beq.n	8008322 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80082d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082da:	1e5a      	subs	r2, r3, #1
 80082dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082de:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d104      	bne.n	80082f2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80082e8:	f001 ffd4 	bl	800a294 <pvTaskIncrementMutexHeldCount>
 80082ec:	4602      	mov	r2, r0
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00f      	beq.n	800831a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fc:	3310      	adds	r3, #16
 80082fe:	4618      	mov	r0, r3
 8008300:	f001 faf0 	bl	80098e4 <xTaskRemoveFromEventList>
 8008304:	4603      	mov	r3, r0
 8008306:	2b00      	cmp	r3, #0
 8008308:	d007      	beq.n	800831a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800830a:	4b54      	ldr	r3, [pc, #336]	; (800845c <xQueueSemaphoreTake+0x214>)
 800830c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008310:	601a      	str	r2, [r3, #0]
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800831a:	f002 fef3 	bl	800b104 <vPortExitCritical>
				return pdPASS;
 800831e:	2301      	movs	r3, #1
 8008320:	e097      	b.n	8008452 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d111      	bne.n	800834c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00a      	beq.n	8008344 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	617b      	str	r3, [r7, #20]
}
 8008340:	bf00      	nop
 8008342:	e7fe      	b.n	8008342 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008344:	f002 fede 	bl	800b104 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008348:	2300      	movs	r3, #0
 800834a:	e082      	b.n	8008452 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800834c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800834e:	2b00      	cmp	r3, #0
 8008350:	d106      	bne.n	8008360 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008352:	f107 030c 	add.w	r3, r7, #12
 8008356:	4618      	mov	r0, r3
 8008358:	f001 fb28 	bl	80099ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800835c:	2301      	movs	r3, #1
 800835e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008360:	f002 fed0 	bl	800b104 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008364:	f001 f806 	bl	8009374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008368:	f002 fe9c 	bl	800b0a4 <vPortEnterCritical>
 800836c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008372:	b25b      	sxtb	r3, r3
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008378:	d103      	bne.n	8008382 <xQueueSemaphoreTake+0x13a>
 800837a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800837c:	2200      	movs	r2, #0
 800837e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008384:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008388:	b25b      	sxtb	r3, r3
 800838a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800838e:	d103      	bne.n	8008398 <xQueueSemaphoreTake+0x150>
 8008390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008392:	2200      	movs	r2, #0
 8008394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008398:	f002 feb4 	bl	800b104 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800839c:	463a      	mov	r2, r7
 800839e:	f107 030c 	add.w	r3, r7, #12
 80083a2:	4611      	mov	r1, r2
 80083a4:	4618      	mov	r0, r3
 80083a6:	f001 fb17 	bl	80099d8 <xTaskCheckForTimeOut>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d132      	bne.n	8008416 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083b2:	f000 f94f 	bl	8008654 <prvIsQueueEmpty>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d026      	beq.n	800840a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d109      	bne.n	80083d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80083c4:	f002 fe6e 	bl	800b0a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f001 fd4d 	bl	8009e6c <xTaskPriorityInherit>
 80083d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80083d4:	f002 fe96 	bl	800b104 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083da:	3324      	adds	r3, #36	; 0x24
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	4611      	mov	r1, r2
 80083e0:	4618      	mov	r0, r3
 80083e2:	f001 fa2f 	bl	8009844 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083e8:	f000 f8e2 	bl	80085b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083ec:	f000 ffd0 	bl	8009390 <xTaskResumeAll>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f47f af68 	bne.w	80082c8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80083f8:	4b18      	ldr	r3, [pc, #96]	; (800845c <xQueueSemaphoreTake+0x214>)
 80083fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083fe:	601a      	str	r2, [r3, #0]
 8008400:	f3bf 8f4f 	dsb	sy
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	e75e      	b.n	80082c8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800840a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800840c:	f000 f8d0 	bl	80085b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008410:	f000 ffbe 	bl	8009390 <xTaskResumeAll>
 8008414:	e758      	b.n	80082c8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008416:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008418:	f000 f8ca 	bl	80085b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800841c:	f000 ffb8 	bl	8009390 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008420:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008422:	f000 f917 	bl	8008654 <prvIsQueueEmpty>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	f43f af4d 	beq.w	80082c8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00d      	beq.n	8008450 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008434:	f002 fe36 	bl	800b0a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800843a:	f000 f811 	bl	8008460 <prvGetDisinheritPriorityAfterTimeout>
 800843e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008446:	4618      	mov	r0, r3
 8008448:	f001 fde6 	bl	800a018 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800844c:	f002 fe5a 	bl	800b104 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008450:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008452:	4618      	mov	r0, r3
 8008454:	3738      	adds	r7, #56	; 0x38
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	e000ed04 	.word	0xe000ed04

08008460 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846c:	2b00      	cmp	r3, #0
 800846e:	d006      	beq.n	800847e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	e001      	b.n	8008482 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800847e:	2300      	movs	r3, #0
 8008480:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008482:	68fb      	ldr	r3, [r7, #12]
	}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b086      	sub	sp, #24
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800849c:	2300      	movs	r3, #0
 800849e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d10d      	bne.n	80084ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d14d      	bne.n	8008552 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	689b      	ldr	r3, [r3, #8]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f001 fd3e 	bl	8009f3c <xTaskPriorityDisinherit>
 80084c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2200      	movs	r2, #0
 80084c6:	609a      	str	r2, [r3, #8]
 80084c8:	e043      	b.n	8008552 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d119      	bne.n	8008504 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6858      	ldr	r0, [r3, #4]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d8:	461a      	mov	r2, r3
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	f003 febc 	bl	800c258 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e8:	441a      	add	r2, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d32b      	bcc.n	8008552 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	605a      	str	r2, [r3, #4]
 8008502:	e026      	b.n	8008552 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	68d8      	ldr	r0, [r3, #12]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850c:	461a      	mov	r2, r3
 800850e:	68b9      	ldr	r1, [r7, #8]
 8008510:	f003 fea2 	bl	800c258 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	68da      	ldr	r2, [r3, #12]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851c:	425b      	negs	r3, r3
 800851e:	441a      	add	r2, r3
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	68da      	ldr	r2, [r3, #12]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	429a      	cmp	r2, r3
 800852e:	d207      	bcs.n	8008540 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008538:	425b      	negs	r3, r3
 800853a:	441a      	add	r2, r3
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b02      	cmp	r3, #2
 8008544:	d105      	bne.n	8008552 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	3b01      	subs	r3, #1
 8008550:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	1c5a      	adds	r2, r3, #1
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800855a:	697b      	ldr	r3, [r7, #20]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	2b00      	cmp	r3, #0
 8008574:	d018      	beq.n	80085a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68da      	ldr	r2, [r3, #12]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	441a      	add	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68da      	ldr	r2, [r3, #12]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	429a      	cmp	r2, r3
 800858e:	d303      	bcc.n	8008598 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68d9      	ldr	r1, [r3, #12]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a0:	461a      	mov	r2, r3
 80085a2:	6838      	ldr	r0, [r7, #0]
 80085a4:	f003 fe58 	bl	800c258 <memcpy>
	}
}
 80085a8:	bf00      	nop
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80085b8:	f002 fd74 	bl	800b0a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085c4:	e011      	b.n	80085ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d012      	beq.n	80085f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3324      	adds	r3, #36	; 0x24
 80085d2:	4618      	mov	r0, r3
 80085d4:	f001 f986 	bl	80098e4 <xTaskRemoveFromEventList>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085de:	f001 fa5d 	bl	8009a9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	3b01      	subs	r3, #1
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	dce9      	bgt.n	80085c6 <prvUnlockQueue+0x16>
 80085f2:	e000      	b.n	80085f6 <prvUnlockQueue+0x46>
					break;
 80085f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	22ff      	movs	r2, #255	; 0xff
 80085fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80085fe:	f002 fd81 	bl	800b104 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008602:	f002 fd4f 	bl	800b0a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800860c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800860e:	e011      	b.n	8008634 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d012      	beq.n	800863e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	3310      	adds	r3, #16
 800861c:	4618      	mov	r0, r3
 800861e:	f001 f961 	bl	80098e4 <xTaskRemoveFromEventList>
 8008622:	4603      	mov	r3, r0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d001      	beq.n	800862c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008628:	f001 fa38 	bl	8009a9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	3b01      	subs	r3, #1
 8008630:	b2db      	uxtb	r3, r3
 8008632:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008638:	2b00      	cmp	r3, #0
 800863a:	dce9      	bgt.n	8008610 <prvUnlockQueue+0x60>
 800863c:	e000      	b.n	8008640 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800863e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	22ff      	movs	r2, #255	; 0xff
 8008644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008648:	f002 fd5c 	bl	800b104 <vPortExitCritical>
}
 800864c:	bf00      	nop
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800865c:	f002 fd22 	bl	800b0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008664:	2b00      	cmp	r3, #0
 8008666:	d102      	bne.n	800866e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008668:	2301      	movs	r3, #1
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	e001      	b.n	8008672 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800866e:	2300      	movs	r3, #0
 8008670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008672:	f002 fd47 	bl	800b104 <vPortExitCritical>

	return xReturn;
 8008676:	68fb      	ldr	r3, [r7, #12]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008688:	f002 fd0c 	bl	800b0a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008694:	429a      	cmp	r2, r3
 8008696:	d102      	bne.n	800869e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008698:	2301      	movs	r3, #1
 800869a:	60fb      	str	r3, [r7, #12]
 800869c:	e001      	b.n	80086a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086a2:	f002 fd2f 	bl	800b104 <vPortExitCritical>

	return xReturn;
 80086a6:	68fb      	ldr	r3, [r7, #12]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80086b0:	b480      	push	{r7}
 80086b2:	b085      	sub	sp, #20
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	e014      	b.n	80086ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80086c0:	4a0f      	ldr	r2, [pc, #60]	; (8008700 <vQueueAddToRegistry+0x50>)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10b      	bne.n	80086e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086cc:	490c      	ldr	r1, [pc, #48]	; (8008700 <vQueueAddToRegistry+0x50>)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	683a      	ldr	r2, [r7, #0]
 80086d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086d6:	4a0a      	ldr	r2, [pc, #40]	; (8008700 <vQueueAddToRegistry+0x50>)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	4413      	add	r3, r2
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80086e2:	e006      	b.n	80086f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3301      	adds	r3, #1
 80086e8:	60fb      	str	r3, [r7, #12]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b07      	cmp	r3, #7
 80086ee:	d9e7      	bls.n	80086c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80086f0:	bf00      	nop
 80086f2:	bf00      	nop
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	20000b34 	.word	0x20000b34

08008704 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008714:	f002 fcc6 	bl	800b0a4 <vPortEnterCritical>
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800871e:	b25b      	sxtb	r3, r3
 8008720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008724:	d103      	bne.n	800872e <vQueueWaitForMessageRestricted+0x2a>
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008734:	b25b      	sxtb	r3, r3
 8008736:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800873a:	d103      	bne.n	8008744 <vQueueWaitForMessageRestricted+0x40>
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008744:	f002 fcde 	bl	800b104 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874c:	2b00      	cmp	r3, #0
 800874e:	d106      	bne.n	800875e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	3324      	adds	r3, #36	; 0x24
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	68b9      	ldr	r1, [r7, #8]
 8008758:	4618      	mov	r0, r3
 800875a:	f001 f897 	bl	800988c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800875e:	6978      	ldr	r0, [r7, #20]
 8008760:	f7ff ff26 	bl	80085b0 <prvUnlockQueue>
	}
 8008764:	bf00      	nop
 8008766:	3718      	adds	r7, #24
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800876c:	b580      	push	{r7, lr}
 800876e:	b08c      	sub	sp, #48	; 0x30
 8008770:	af02      	add	r7, sp, #8
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d110      	bne.n	80087a0 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800877e:	2301      	movs	r3, #1
 8008780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b04      	cmp	r3, #4
 8008788:	d81b      	bhi.n	80087c2 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	61fb      	str	r3, [r7, #28]
}
 800879c:	bf00      	nop
 800879e:	e7fe      	b.n	800879e <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80087a0:	2300      	movs	r3, #0
 80087a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10a      	bne.n	80087c2 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	61bb      	str	r3, [r7, #24]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80087c2:	68ba      	ldr	r2, [r7, #8]
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d90a      	bls.n	80087e0 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	617b      	str	r3, [r7, #20]
}
 80087dc:	bf00      	nop
 80087de:	e7fe      	b.n	80087de <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80087e6:	2301      	movs	r3, #1
 80087e8:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	3301      	adds	r3, #1
 80087ee:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3324      	adds	r3, #36	; 0x24
 80087f4:	4618      	mov	r0, r3
 80087f6:	f002 fd77 	bl	800b2e8 <pvPortMalloc>
 80087fa:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8008808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	6a38      	ldr	r0, [r7, #32]
 8008814:	f000 fab9 	bl	8008d8a <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8008818:	6a3b      	ldr	r3, [r7, #32]
	}
 800881a:	4618      	mov	r0, r3
 800881c:	3728      	adds	r7, #40	; 0x28
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8008822:	b480      	push	{r7}
 8008824:	b087      	sub	sp, #28
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10a      	bne.n	800884a <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8008834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008838:	f383 8811 	msr	BASEPRI, r3
 800883c:	f3bf 8f6f 	isb	sy
 8008840:	f3bf 8f4f 	dsb	sy
 8008844:	60fb      	str	r3, [r7, #12]
}
 8008846:	bf00      	nop
 8008848:	e7fe      	b.n	8008848 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	689a      	ldr	r2, [r3, #8]
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4413      	add	r3, r2
 8008854:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	697a      	ldr	r2, [r7, #20]
 800885c:	1ad3      	subs	r3, r2, r3
 800885e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	3b01      	subs	r3, #1
 8008864:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	697a      	ldr	r2, [r7, #20]
 800886c:	429a      	cmp	r2, r3
 800886e:	d304      	bcc.n	800887a <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	697a      	ldr	r2, [r7, #20]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800887a:	697b      	ldr	r3, [r7, #20]
}
 800887c:	4618      	mov	r0, r3
 800887e:	371c      	adds	r7, #28
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b090      	sub	sp, #64	; 0x40
 800888c:	af02      	add	r7, sp, #8
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10a      	bne.n	80088ba <xStreamBufferSendFromISR+0x32>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	f383 8811 	msr	BASEPRI, r3
 80088ac:	f3bf 8f6f 	isb	sy
 80088b0:	f3bf 8f4f 	dsb	sy
 80088b4:	623b      	str	r3, [r7, #32]
}
 80088b6:	bf00      	nop
 80088b8:	e7fe      	b.n	80088b8 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10a      	bne.n	80088d6 <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 80088c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c4:	f383 8811 	msr	BASEPRI, r3
 80088c8:	f3bf 8f6f 	isb	sy
 80088cc:	f3bf 8f4f 	dsb	sy
 80088d0:	61fb      	str	r3, [r7, #28]
}
 80088d2:	bf00      	nop
 80088d4:	e7fe      	b.n	80088d4 <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	7f1b      	ldrb	r3, [r3, #28]
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d002      	beq.n	80088e8 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80088e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e4:	3304      	adds	r3, #4
 80088e6:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80088e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088ea:	f7ff ff9a 	bl	8008822 <xStreamBufferSpacesAvailable>
 80088ee:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80088f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	68b9      	ldr	r1, [r7, #8]
 80088fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088fc:	f000 f835 	bl	800896a <prvWriteMessageToBuffer>
 8008900:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	2b00      	cmp	r3, #0
 8008906:	d02b      	beq.n	8008960 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8008908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800890a:	f000 fa1e 	bl	8008d4a <prvBytesInBuffer>
 800890e:	4602      	mov	r2, r0
 8008910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	429a      	cmp	r2, r3
 8008916:	d323      	bcc.n	8008960 <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 8008918:	f3ef 8211 	mrs	r2, BASEPRI
 800891c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008920:	f383 8811 	msr	BASEPRI, r3
 8008924:	f3bf 8f6f 	isb	sy
 8008928:	f3bf 8f4f 	dsb	sy
 800892c:	61ba      	str	r2, [r7, #24]
 800892e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008930:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8008932:	627b      	str	r3, [r7, #36]	; 0x24
 8008934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d00b      	beq.n	8008954 <xStreamBufferSendFromISR+0xcc>
 800893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893e:	6918      	ldr	r0, [r3, #16]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	9300      	str	r3, [sp, #0]
 8008944:	2300      	movs	r3, #0
 8008946:	2200      	movs	r2, #0
 8008948:	2100      	movs	r1, #0
 800894a:	f001 fdd5 	bl	800a4f8 <xTaskGenericNotifyFromISR>
 800894e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008950:	2200      	movs	r2, #0
 8008952:	611a      	str	r2, [r3, #16]
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	f383 8811 	msr	BASEPRI, r3
}
 800895e:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8008960:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008962:	4618      	mov	r0, r3
 8008964:	3738      	adds	r7, #56	; 0x38
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b086      	sub	sp, #24
 800896e:	af00      	add	r7, sp, #0
 8008970:	60f8      	str	r0, [r7, #12]
 8008972:	60b9      	str	r1, [r7, #8]
 8008974:	607a      	str	r2, [r7, #4]
 8008976:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800897e:	2300      	movs	r3, #0
 8008980:	617b      	str	r3, [r7, #20]
 8008982:	e01d      	b.n	80089c0 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	7f1b      	ldrb	r3, [r3, #28]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d108      	bne.n	80089a2 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8008990:	2301      	movs	r3, #1
 8008992:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	4293      	cmp	r3, r2
 800899a:	bf28      	it	cs
 800899c:	4613      	movcs	r3, r2
 800899e:	607b      	str	r3, [r7, #4]
 80089a0:	e00e      	b.n	80089c0 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d308      	bcc.n	80089bc <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80089aa:	2301      	movs	r3, #1
 80089ac:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80089ae:	1d3b      	adds	r3, r7, #4
 80089b0:	2204      	movs	r2, #4
 80089b2:	4619      	mov	r1, r3
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 f8dc 	bl	8008b72 <prvWriteBytesToBuffer>
 80089ba:	e001      	b.n	80089c0 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80089bc:	2300      	movs	r3, #0
 80089be:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d007      	beq.n	80089d6 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	461a      	mov	r2, r3
 80089ca:	68b9      	ldr	r1, [r7, #8]
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 f8d0 	bl	8008b72 <prvWriteBytesToBuffer>
 80089d2:	6138      	str	r0, [r7, #16]
 80089d4:	e001      	b.n	80089da <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80089d6:	2300      	movs	r3, #0
 80089d8:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80089da:	693b      	ldr	r3, [r7, #16]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08e      	sub	sp, #56	; 0x38
 80089e8:	af02      	add	r7, sp, #8
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
 80089f0:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80089f6:	2300      	movs	r3, #0
 80089f8:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10a      	bne.n	8008a16 <xStreamBufferReceive+0x32>
	__asm volatile
 8008a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a04:	f383 8811 	msr	BASEPRI, r3
 8008a08:	f3bf 8f6f 	isb	sy
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	61fb      	str	r3, [r7, #28]
}
 8008a12:	bf00      	nop
 8008a14:	e7fe      	b.n	8008a14 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10a      	bne.n	8008a32 <xStreamBufferReceive+0x4e>
	__asm volatile
 8008a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a20:	f383 8811 	msr	BASEPRI, r3
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	f3bf 8f4f 	dsb	sy
 8008a2c:	61bb      	str	r3, [r7, #24]
}
 8008a2e:	bf00      	nop
 8008a30:	e7fe      	b.n	8008a30 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	7f1b      	ldrb	r3, [r3, #28]
 8008a36:	f003 0301 	and.w	r3, r3, #1
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d002      	beq.n	8008a44 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8008a3e:	2304      	movs	r3, #4
 8008a40:	627b      	str	r3, [r7, #36]	; 0x24
 8008a42:	e001      	b.n	8008a48 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d034      	beq.n	8008ab8 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8008a4e:	f002 fb29 	bl	800b0a4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008a52:	6a38      	ldr	r0, [r7, #32]
 8008a54:	f000 f979 	bl	8008d4a <prvBytesInBuffer>
 8008a58:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d816      	bhi.n	8008a90 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8008a62:	2000      	movs	r0, #0
 8008a64:	f001 fe2c 	bl	800a6c0 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00a      	beq.n	8008a86 <xStreamBufferReceive+0xa2>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	617b      	str	r3, [r7, #20]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8008a86:	f001 f9c3 	bl	8009e10 <xTaskGetCurrentTaskHandle>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	6a3b      	ldr	r3, [r7, #32]
 8008a8e:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008a90:	f002 fb38 	bl	800b104 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d811      	bhi.n	8008ac0 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	f001 fc0a 	bl	800a2bc <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008aae:	6a38      	ldr	r0, [r7, #32]
 8008ab0:	f000 f94b 	bl	8008d4a <prvBytesInBuffer>
 8008ab4:	62b8      	str	r0, [r7, #40]	; 0x28
 8008ab6:	e003      	b.n	8008ac0 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008ab8:	6a38      	ldr	r0, [r7, #32]
 8008aba:	f000 f946 	bl	8008d4a <prvBytesInBuffer>
 8008abe:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8008ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d91d      	bls.n	8008b04 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	9300      	str	r3, [sp, #0]
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	68b9      	ldr	r1, [r7, #8]
 8008ad2:	6a38      	ldr	r0, [r7, #32]
 8008ad4:	f000 f81b 	bl	8008b0e <prvReadMessageFromBuffer>
 8008ad8:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8008ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d011      	beq.n	8008b04 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8008ae0:	f000 fc48 	bl	8009374 <vTaskSuspendAll>
 8008ae4:	6a3b      	ldr	r3, [r7, #32]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d009      	beq.n	8008b00 <xStreamBufferReceive+0x11c>
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	6958      	ldr	r0, [r3, #20]
 8008af0:	2300      	movs	r3, #0
 8008af2:	2200      	movs	r2, #0
 8008af4:	2100      	movs	r1, #0
 8008af6:	f001 fc41 	bl	800a37c <xTaskGenericNotify>
 8008afa:	6a3b      	ldr	r3, [r7, #32]
 8008afc:	2200      	movs	r2, #0
 8008afe:	615a      	str	r2, [r3, #20]
 8008b00:	f000 fc46 	bl	8009390 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8008b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3730      	adds	r7, #48	; 0x30
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b088      	sub	sp, #32
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	607a      	str	r2, [r7, #4]
 8008b1a:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8008b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d019      	beq.n	8008b56 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8008b28:	f107 0110 	add.w	r1, r7, #16
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f000 f890 	bl	8008c56 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8008b42:	69fa      	ldr	r2, [r7, #28]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	d907      	bls.n	8008b5a <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8008b50:	2300      	movs	r3, #0
 8008b52:	61fb      	str	r3, [r7, #28]
 8008b54:	e001      	b.n	8008b5a <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	69fa      	ldr	r2, [r7, #28]
 8008b5e:	68b9      	ldr	r1, [r7, #8]
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 f878 	bl	8008c56 <prvReadBytesFromBuffer>
 8008b66:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8008b68:	697b      	ldr	r3, [r7, #20]
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3720      	adds	r7, #32
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}

08008b72 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8008b72:	b580      	push	{r7, lr}
 8008b74:	b08a      	sub	sp, #40	; 0x28
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	60f8      	str	r0, [r7, #12]
 8008b7a:	60b9      	str	r1, [r7, #8]
 8008b7c:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10a      	bne.n	8008b9a <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8008b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b88:	f383 8811 	msr	BASEPRI, r3
 8008b8c:	f3bf 8f6f 	isb	sy
 8008b90:	f3bf 8f4f 	dsb	sy
 8008b94:	61fb      	str	r3, [r7, #28]
}
 8008b96:	bf00      	nop
 8008b98:	e7fe      	b.n	8008b98 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	4293      	cmp	r3, r2
 8008bac:	bf28      	it	cs
 8008bae:	4613      	movcs	r3, r2
 8008bb0:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8008bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bb4:	6a3b      	ldr	r3, [r7, #32]
 8008bb6:	441a      	add	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d90a      	bls.n	8008bd6 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	61bb      	str	r3, [r7, #24]
}
 8008bd2:	bf00      	nop
 8008bd4:	e7fe      	b.n	8008bd4 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	699a      	ldr	r2, [r3, #24]
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	4413      	add	r3, r2
 8008bde:	6a3a      	ldr	r2, [r7, #32]
 8008be0:	68b9      	ldr	r1, [r7, #8]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f003 fb38 	bl	800c258 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d91c      	bls.n	8008c2a <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	6a3b      	ldr	r3, [r7, #32]
 8008bf4:	1ad2      	subs	r2, r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d90a      	bls.n	8008c14 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8008bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c02:	f383 8811 	msr	BASEPRI, r3
 8008c06:	f3bf 8f6f 	isb	sy
 8008c0a:	f3bf 8f4f 	dsb	sy
 8008c0e:	617b      	str	r3, [r7, #20]
}
 8008c10:	bf00      	nop
 8008c12:	e7fe      	b.n	8008c12 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6998      	ldr	r0, [r3, #24]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	18d1      	adds	r1, r2, r3
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	6a3b      	ldr	r3, [r7, #32]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	461a      	mov	r2, r3
 8008c26:	f003 fb17 	bl	800c258 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8008c2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4413      	add	r3, r2
 8008c30:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d304      	bcc.n	8008c46 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c4a:	605a      	str	r2, [r3, #4]

	return xCount;
 8008c4c:	687b      	ldr	r3, [r7, #4]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3728      	adds	r7, #40	; 0x28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b08a      	sub	sp, #40	; 0x28
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	60f8      	str	r0, [r7, #12]
 8008c5e:	60b9      	str	r1, [r7, #8]
 8008c60:	607a      	str	r2, [r7, #4]
 8008c62:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	bf28      	it	cs
 8008c6c:	4613      	movcs	r3, r2
 8008c6e:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8008c70:	6a3b      	ldr	r3, [r7, #32]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d064      	beq.n	8008d40 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	689a      	ldr	r2, [r3, #8]
 8008c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	6a3a      	ldr	r2, [r7, #32]
 8008c86:	4293      	cmp	r3, r2
 8008c88:	bf28      	it	cs
 8008c8a:	4613      	movcs	r3, r2
 8008c8c:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8008c8e:	69fa      	ldr	r2, [r7, #28]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d90a      	bls.n	8008cac <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8008c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	61bb      	str	r3, [r7, #24]
}
 8008ca8:	bf00      	nop
 8008caa:	e7fe      	b.n	8008caa <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8008cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	441a      	add	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d90a      	bls.n	8008cd0 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	617b      	str	r3, [r7, #20]
}
 8008ccc:	bf00      	nop
 8008cce:	e7fe      	b.n	8008cce <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	699a      	ldr	r2, [r3, #24]
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd6:	4413      	add	r3, r2
 8008cd8:	69fa      	ldr	r2, [r7, #28]
 8008cda:	4619      	mov	r1, r3
 8008cdc:	68b8      	ldr	r0, [r7, #8]
 8008cde:	f003 fabb 	bl	800c258 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8008ce2:	6a3a      	ldr	r2, [r7, #32]
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	429a      	cmp	r2, r3
 8008ce8:	d919      	bls.n	8008d1e <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8008cea:	6a3a      	ldr	r2, [r7, #32]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d90a      	bls.n	8008d08 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8008cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	613b      	str	r3, [r7, #16]
}
 8008d04:	bf00      	nop
 8008d06:	e7fe      	b.n	8008d06 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	18d0      	adds	r0, r2, r3
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6999      	ldr	r1, [r3, #24]
 8008d12:	6a3a      	ldr	r2, [r7, #32]
 8008d14:	69fb      	ldr	r3, [r7, #28]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	461a      	mov	r2, r3
 8008d1a:	f003 fa9d 	bl	800c258 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8008d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	4413      	add	r3, r2
 8008d24:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d304      	bcc.n	8008d3a <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d3e:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8008d40:	6a3b      	ldr	r3, [r7, #32]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3728      	adds	r7, #40	; 0x28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bd80      	pop	{r7, pc}

08008d4a <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8008d4a:	b480      	push	{r7}
 8008d4c:	b085      	sub	sp, #20
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	689a      	ldr	r2, [r3, #8]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	68fa      	ldr	r2, [r7, #12]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d304      	bcc.n	8008d7c <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b086      	sub	sp, #24
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	607a      	str	r2, [r7, #4]
 8008d96:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8008d98:	2355      	movs	r3, #85	; 0x55
 8008d9a:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6979      	ldr	r1, [r7, #20]
 8008da0:	68b8      	ldr	r0, [r7, #8]
 8008da2:	f003 fa67 	bl	800c274 <memset>
 8008da6:	4602      	mov	r2, r0
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d00a      	beq.n	8008dc4 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	613b      	str	r3, [r7, #16]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8008dc4:	2224      	movs	r2, #36	; 0x24
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f003 fa53 	bl	800c274 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	683a      	ldr	r2, [r7, #0]
 8008dde:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008de6:	771a      	strb	r2, [r3, #28]
}
 8008de8:	bf00      	nop
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08e      	sub	sp, #56	; 0x38
 8008df4:	af04      	add	r7, sp, #16
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	607a      	str	r2, [r7, #4]
 8008dfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10a      	bne.n	8008e1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	623b      	str	r3, [r7, #32]
}
 8008e16:	bf00      	nop
 8008e18:	e7fe      	b.n	8008e18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <xTaskCreateStatic+0x46>
	__asm volatile
 8008e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	61fb      	str	r3, [r7, #28]
}
 8008e32:	bf00      	nop
 8008e34:	e7fe      	b.n	8008e34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e36:	23cc      	movs	r3, #204	; 0xcc
 8008e38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e3a:	693b      	ldr	r3, [r7, #16]
 8008e3c:	2bcc      	cmp	r3, #204	; 0xcc
 8008e3e:	d00a      	beq.n	8008e56 <xTaskCreateStatic+0x66>
	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	61bb      	str	r3, [r7, #24]
}
 8008e52:	bf00      	nop
 8008e54:	e7fe      	b.n	8008e54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d01e      	beq.n	8008e9c <xTaskCreateStatic+0xac>
 8008e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d01b      	beq.n	8008e9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e70:	2202      	movs	r2, #2
 8008e72:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e76:	2300      	movs	r3, #0
 8008e78:	9303      	str	r3, [sp, #12]
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7c:	9302      	str	r3, [sp, #8]
 8008e7e:	f107 0314 	add.w	r3, r7, #20
 8008e82:	9301      	str	r3, [sp, #4]
 8008e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e86:	9300      	str	r3, [sp, #0]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 f850 	bl	8008f34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e96:	f000 f8f3 	bl	8009080 <prvAddNewTaskToReadyList>
 8008e9a:	e001      	b.n	8008ea0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ea0:	697b      	ldr	r3, [r7, #20]
	}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3728      	adds	r7, #40	; 0x28
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}

08008eaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008eaa:	b580      	push	{r7, lr}
 8008eac:	b08c      	sub	sp, #48	; 0x30
 8008eae:	af04      	add	r7, sp, #16
 8008eb0:	60f8      	str	r0, [r7, #12]
 8008eb2:	60b9      	str	r1, [r7, #8]
 8008eb4:	603b      	str	r3, [r7, #0]
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008eba:	88fb      	ldrh	r3, [r7, #6]
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f002 fa12 	bl	800b2e8 <pvPortMalloc>
 8008ec4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00e      	beq.n	8008eea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ecc:	20cc      	movs	r0, #204	; 0xcc
 8008ece:	f002 fa0b 	bl	800b2e8 <pvPortMalloc>
 8008ed2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	697a      	ldr	r2, [r7, #20]
 8008ede:	631a      	str	r2, [r3, #48]	; 0x30
 8008ee0:	e005      	b.n	8008eee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ee2:	6978      	ldr	r0, [r7, #20]
 8008ee4:	f002 facc 	bl	800b480 <vPortFree>
 8008ee8:	e001      	b.n	8008eee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008eea:	2300      	movs	r3, #0
 8008eec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d017      	beq.n	8008f24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008efc:	88fa      	ldrh	r2, [r7, #6]
 8008efe:	2300      	movs	r3, #0
 8008f00:	9303      	str	r3, [sp, #12]
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	9302      	str	r3, [sp, #8]
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	9301      	str	r3, [sp, #4]
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	68b9      	ldr	r1, [r7, #8]
 8008f12:	68f8      	ldr	r0, [r7, #12]
 8008f14:	f000 f80e 	bl	8008f34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f18:	69f8      	ldr	r0, [r7, #28]
 8008f1a:	f000 f8b1 	bl	8009080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	61bb      	str	r3, [r7, #24]
 8008f22:	e002      	b.n	8008f2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f2a:	69bb      	ldr	r3, [r7, #24]
	}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3720      	adds	r7, #32
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	21a5      	movs	r1, #165	; 0xa5
 8008f4e:	f003 f991 	bl	800c274 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	4413      	add	r3, r2
 8008f62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	f023 0307 	bic.w	r3, r3, #7
 8008f6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	f003 0307 	and.w	r3, r3, #7
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	617b      	str	r3, [r7, #20]
}
 8008f88:	bf00      	nop
 8008f8a:	e7fe      	b.n	8008f8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d01f      	beq.n	8008fd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f92:	2300      	movs	r3, #0
 8008f94:	61fb      	str	r3, [r7, #28]
 8008f96:	e012      	b.n	8008fbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	4413      	add	r3, r2
 8008f9e:	7819      	ldrb	r1, [r3, #0]
 8008fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	3334      	adds	r3, #52	; 0x34
 8008fa8:	460a      	mov	r2, r1
 8008faa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d006      	beq.n	8008fc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	61fb      	str	r3, [r7, #28]
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	2b1f      	cmp	r3, #31
 8008fc2:	d9e9      	bls.n	8008f98 <prvInitialiseNewTask+0x64>
 8008fc4:	e000      	b.n	8008fc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8008fc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008fd0:	e003      	b.n	8008fda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fdc:	2b37      	cmp	r3, #55	; 0x37
 8008fde:	d901      	bls.n	8008fe4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fe0:	2337      	movs	r3, #55	; 0x37
 8008fe2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fe8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fee:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe fc4c 	bl	8007898 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009002:	3318      	adds	r3, #24
 8009004:	4618      	mov	r0, r3
 8009006:	f7fe fc47 	bl	8007898 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800900e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009012:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800901e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009022:	2200      	movs	r2, #0
 8009024:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	2200      	movs	r2, #0
 800902c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	3364      	adds	r3, #100	; 0x64
 8009034:	2260      	movs	r2, #96	; 0x60
 8009036:	2100      	movs	r1, #0
 8009038:	4618      	mov	r0, r3
 800903a:	f003 f91b 	bl	800c274 <memset>
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	4a0c      	ldr	r2, [pc, #48]	; (8009074 <prvInitialiseNewTask+0x140>)
 8009042:	669a      	str	r2, [r3, #104]	; 0x68
 8009044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009046:	4a0c      	ldr	r2, [pc, #48]	; (8009078 <prvInitialiseNewTask+0x144>)
 8009048:	66da      	str	r2, [r3, #108]	; 0x6c
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	4a0b      	ldr	r2, [pc, #44]	; (800907c <prvInitialiseNewTask+0x148>)
 800904e:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	68f9      	ldr	r1, [r7, #12]
 8009054:	69b8      	ldr	r0, [r7, #24]
 8009056:	f001 fefb 	bl	800ae50 <pxPortInitialiseStack>
 800905a:	4602      	mov	r2, r0
 800905c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009062:	2b00      	cmp	r3, #0
 8009064:	d002      	beq.n	800906c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800906a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800906c:	bf00      	nop
 800906e:	3720      	adds	r7, #32
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	0800cf04 	.word	0x0800cf04
 8009078:	0800cf24 	.word	0x0800cf24
 800907c:	0800cee4 	.word	0x0800cee4

08009080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009088:	f002 f80c 	bl	800b0a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800908c:	4b2d      	ldr	r3, [pc, #180]	; (8009144 <prvAddNewTaskToReadyList+0xc4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	3301      	adds	r3, #1
 8009092:	4a2c      	ldr	r2, [pc, #176]	; (8009144 <prvAddNewTaskToReadyList+0xc4>)
 8009094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009096:	4b2c      	ldr	r3, [pc, #176]	; (8009148 <prvAddNewTaskToReadyList+0xc8>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d109      	bne.n	80090b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800909e:	4a2a      	ldr	r2, [pc, #168]	; (8009148 <prvAddNewTaskToReadyList+0xc8>)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80090a4:	4b27      	ldr	r3, [pc, #156]	; (8009144 <prvAddNewTaskToReadyList+0xc4>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d110      	bne.n	80090ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090ac:	f000 fd1a 	bl	8009ae4 <prvInitialiseTaskLists>
 80090b0:	e00d      	b.n	80090ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090b2:	4b26      	ldr	r3, [pc, #152]	; (800914c <prvAddNewTaskToReadyList+0xcc>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d109      	bne.n	80090ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090ba:	4b23      	ldr	r3, [pc, #140]	; (8009148 <prvAddNewTaskToReadyList+0xc8>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d802      	bhi.n	80090ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090c8:	4a1f      	ldr	r2, [pc, #124]	; (8009148 <prvAddNewTaskToReadyList+0xc8>)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090ce:	4b20      	ldr	r3, [pc, #128]	; (8009150 <prvAddNewTaskToReadyList+0xd0>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3301      	adds	r3, #1
 80090d4:	4a1e      	ldr	r2, [pc, #120]	; (8009150 <prvAddNewTaskToReadyList+0xd0>)
 80090d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80090d8:	4b1d      	ldr	r3, [pc, #116]	; (8009150 <prvAddNewTaskToReadyList+0xd0>)
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e4:	4b1b      	ldr	r3, [pc, #108]	; (8009154 <prvAddNewTaskToReadyList+0xd4>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d903      	bls.n	80090f4 <prvAddNewTaskToReadyList+0x74>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f0:	4a18      	ldr	r2, [pc, #96]	; (8009154 <prvAddNewTaskToReadyList+0xd4>)
 80090f2:	6013      	str	r3, [r2, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f8:	4613      	mov	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	4a15      	ldr	r2, [pc, #84]	; (8009158 <prvAddNewTaskToReadyList+0xd8>)
 8009102:	441a      	add	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	3304      	adds	r3, #4
 8009108:	4619      	mov	r1, r3
 800910a:	4610      	mov	r0, r2
 800910c:	f7fe fbd1 	bl	80078b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009110:	f001 fff8 	bl	800b104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009114:	4b0d      	ldr	r3, [pc, #52]	; (800914c <prvAddNewTaskToReadyList+0xcc>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00e      	beq.n	800913a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800911c:	4b0a      	ldr	r3, [pc, #40]	; (8009148 <prvAddNewTaskToReadyList+0xc8>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009126:	429a      	cmp	r2, r3
 8009128:	d207      	bcs.n	800913a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800912a:	4b0c      	ldr	r3, [pc, #48]	; (800915c <prvAddNewTaskToReadyList+0xdc>)
 800912c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009130:	601a      	str	r2, [r3, #0]
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800913a:	bf00      	nop
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	20001048 	.word	0x20001048
 8009148:	20000b74 	.word	0x20000b74
 800914c:	20001054 	.word	0x20001054
 8009150:	20001064 	.word	0x20001064
 8009154:	20001050 	.word	0x20001050
 8009158:	20000b78 	.word	0x20000b78
 800915c:	e000ed04 	.word	0xe000ed04

08009160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009168:	2300      	movs	r3, #0
 800916a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d017      	beq.n	80091a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009172:	4b13      	ldr	r3, [pc, #76]	; (80091c0 <vTaskDelay+0x60>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d00a      	beq.n	8009190 <vTaskDelay+0x30>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917e:	f383 8811 	msr	BASEPRI, r3
 8009182:	f3bf 8f6f 	isb	sy
 8009186:	f3bf 8f4f 	dsb	sy
 800918a:	60bb      	str	r3, [r7, #8]
}
 800918c:	bf00      	nop
 800918e:	e7fe      	b.n	800918e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009190:	f000 f8f0 	bl	8009374 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009194:	2100      	movs	r1, #0
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f001 fab8 	bl	800a70c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800919c:	f000 f8f8 	bl	8009390 <xTaskResumeAll>
 80091a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d107      	bne.n	80091b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80091a8:	4b06      	ldr	r3, [pc, #24]	; (80091c4 <vTaskDelay+0x64>)
 80091aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091b8:	bf00      	nop
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	20001070 	.word	0x20001070
 80091c4:	e000ed04 	.word	0xe000ed04

080091c8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b088      	sub	sp, #32
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10a      	bne.n	80091f0 <eTaskGetState+0x28>
	__asm volatile
 80091da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	60bb      	str	r3, [r7, #8]
}
 80091ec:	bf00      	nop
 80091ee:	e7fe      	b.n	80091ee <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80091f0:	4b23      	ldr	r3, [pc, #140]	; (8009280 <eTaskGetState+0xb8>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	69ba      	ldr	r2, [r7, #24]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d102      	bne.n	8009200 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80091fa:	2300      	movs	r3, #0
 80091fc:	77fb      	strb	r3, [r7, #31]
 80091fe:	e03a      	b.n	8009276 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8009200:	f001 ff50 	bl	800b0a4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800920a:	4b1e      	ldr	r3, [pc, #120]	; (8009284 <eTaskGetState+0xbc>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8009210:	4b1d      	ldr	r3, [pc, #116]	; (8009288 <eTaskGetState+0xc0>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8009216:	f001 ff75 	bl	800b104 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	429a      	cmp	r2, r3
 8009220:	d003      	beq.n	800922a <eTaskGetState+0x62>
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	429a      	cmp	r2, r3
 8009228:	d102      	bne.n	8009230 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800922a:	2302      	movs	r3, #2
 800922c:	77fb      	strb	r3, [r7, #31]
 800922e:	e022      	b.n	8009276 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	4a16      	ldr	r2, [pc, #88]	; (800928c <eTaskGetState+0xc4>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d112      	bne.n	800925e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8009238:	69bb      	ldr	r3, [r7, #24]
 800923a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10b      	bne.n	8009258 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8009246:	b2db      	uxtb	r3, r3
 8009248:	2b01      	cmp	r3, #1
 800924a:	d102      	bne.n	8009252 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800924c:	2302      	movs	r3, #2
 800924e:	77fb      	strb	r3, [r7, #31]
 8009250:	e011      	b.n	8009276 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8009252:	2303      	movs	r3, #3
 8009254:	77fb      	strb	r3, [r7, #31]
 8009256:	e00e      	b.n	8009276 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8009258:	2302      	movs	r3, #2
 800925a:	77fb      	strb	r3, [r7, #31]
 800925c:	e00b      	b.n	8009276 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	4a0b      	ldr	r2, [pc, #44]	; (8009290 <eTaskGetState+0xc8>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d002      	beq.n	800926c <eTaskGetState+0xa4>
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d102      	bne.n	8009272 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800926c:	2304      	movs	r3, #4
 800926e:	77fb      	strb	r3, [r7, #31]
 8009270:	e001      	b.n	8009276 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8009272:	2301      	movs	r3, #1
 8009274:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8009276:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8009278:	4618      	mov	r0, r3
 800927a:	3720      	adds	r7, #32
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	20000b74 	.word	0x20000b74
 8009284:	20001000 	.word	0x20001000
 8009288:	20001004 	.word	0x20001004
 800928c:	20001034 	.word	0x20001034
 8009290:	2000101c 	.word	0x2000101c

08009294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08a      	sub	sp, #40	; 0x28
 8009298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800929e:	2300      	movs	r3, #0
 80092a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80092a2:	463a      	mov	r2, r7
 80092a4:	1d39      	adds	r1, r7, #4
 80092a6:	f107 0308 	add.w	r3, r7, #8
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fe faa0 	bl	80077f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	9202      	str	r2, [sp, #8]
 80092b8:	9301      	str	r3, [sp, #4]
 80092ba:	2300      	movs	r3, #0
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	2300      	movs	r3, #0
 80092c0:	460a      	mov	r2, r1
 80092c2:	4924      	ldr	r1, [pc, #144]	; (8009354 <vTaskStartScheduler+0xc0>)
 80092c4:	4824      	ldr	r0, [pc, #144]	; (8009358 <vTaskStartScheduler+0xc4>)
 80092c6:	f7ff fd93 	bl	8008df0 <xTaskCreateStatic>
 80092ca:	4603      	mov	r3, r0
 80092cc:	4a23      	ldr	r2, [pc, #140]	; (800935c <vTaskStartScheduler+0xc8>)
 80092ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80092d0:	4b22      	ldr	r3, [pc, #136]	; (800935c <vTaskStartScheduler+0xc8>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d002      	beq.n	80092de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80092d8:	2301      	movs	r3, #1
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	e001      	b.n	80092e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80092de:	2300      	movs	r3, #0
 80092e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d102      	bne.n	80092ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80092e8:	f001 fa64 	bl	800a7b4 <xTimerCreateTimerTask>
 80092ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d11b      	bne.n	800932c <vTaskStartScheduler+0x98>
	__asm volatile
 80092f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	613b      	str	r3, [r7, #16]
}
 8009306:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009308:	4b15      	ldr	r3, [pc, #84]	; (8009360 <vTaskStartScheduler+0xcc>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	3364      	adds	r3, #100	; 0x64
 800930e:	4a15      	ldr	r2, [pc, #84]	; (8009364 <vTaskStartScheduler+0xd0>)
 8009310:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009312:	4b15      	ldr	r3, [pc, #84]	; (8009368 <vTaskStartScheduler+0xd4>)
 8009314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009318:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800931a:	4b14      	ldr	r3, [pc, #80]	; (800936c <vTaskStartScheduler+0xd8>)
 800931c:	2201      	movs	r2, #1
 800931e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009320:	4b13      	ldr	r3, [pc, #76]	; (8009370 <vTaskStartScheduler+0xdc>)
 8009322:	2200      	movs	r2, #0
 8009324:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009326:	f001 fe1b 	bl	800af60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800932a:	e00e      	b.n	800934a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009332:	d10a      	bne.n	800934a <vTaskStartScheduler+0xb6>
	__asm volatile
 8009334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	60fb      	str	r3, [r7, #12]
}
 8009346:	bf00      	nop
 8009348:	e7fe      	b.n	8009348 <vTaskStartScheduler+0xb4>
}
 800934a:	bf00      	nop
 800934c:	3718      	adds	r7, #24
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}
 8009352:	bf00      	nop
 8009354:	0800ce18 	.word	0x0800ce18
 8009358:	08009ab5 	.word	0x08009ab5
 800935c:	2000106c 	.word	0x2000106c
 8009360:	20000b74 	.word	0x20000b74
 8009364:	2000010c 	.word	0x2000010c
 8009368:	20001068 	.word	0x20001068
 800936c:	20001054 	.word	0x20001054
 8009370:	2000104c 	.word	0x2000104c

08009374 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009374:	b480      	push	{r7}
 8009376:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009378:	4b04      	ldr	r3, [pc, #16]	; (800938c <vTaskSuspendAll+0x18>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	3301      	adds	r3, #1
 800937e:	4a03      	ldr	r2, [pc, #12]	; (800938c <vTaskSuspendAll+0x18>)
 8009380:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009382:	bf00      	nop
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	20001070 	.word	0x20001070

08009390 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009396:	2300      	movs	r3, #0
 8009398:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800939a:	2300      	movs	r3, #0
 800939c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800939e:	4b42      	ldr	r3, [pc, #264]	; (80094a8 <xTaskResumeAll+0x118>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d10a      	bne.n	80093bc <xTaskResumeAll+0x2c>
	__asm volatile
 80093a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093aa:	f383 8811 	msr	BASEPRI, r3
 80093ae:	f3bf 8f6f 	isb	sy
 80093b2:	f3bf 8f4f 	dsb	sy
 80093b6:	603b      	str	r3, [r7, #0]
}
 80093b8:	bf00      	nop
 80093ba:	e7fe      	b.n	80093ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80093bc:	f001 fe72 	bl	800b0a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80093c0:	4b39      	ldr	r3, [pc, #228]	; (80094a8 <xTaskResumeAll+0x118>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	4a38      	ldr	r2, [pc, #224]	; (80094a8 <xTaskResumeAll+0x118>)
 80093c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093ca:	4b37      	ldr	r3, [pc, #220]	; (80094a8 <xTaskResumeAll+0x118>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d162      	bne.n	8009498 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80093d2:	4b36      	ldr	r3, [pc, #216]	; (80094ac <xTaskResumeAll+0x11c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d05e      	beq.n	8009498 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093da:	e02f      	b.n	800943c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093dc:	4b34      	ldr	r3, [pc, #208]	; (80094b0 <xTaskResumeAll+0x120>)
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	3318      	adds	r3, #24
 80093e8:	4618      	mov	r0, r3
 80093ea:	f7fe fabf 	bl	800796c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	3304      	adds	r3, #4
 80093f2:	4618      	mov	r0, r3
 80093f4:	f7fe faba 	bl	800796c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fc:	4b2d      	ldr	r3, [pc, #180]	; (80094b4 <xTaskResumeAll+0x124>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	429a      	cmp	r2, r3
 8009402:	d903      	bls.n	800940c <xTaskResumeAll+0x7c>
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	4a2a      	ldr	r2, [pc, #168]	; (80094b4 <xTaskResumeAll+0x124>)
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009410:	4613      	mov	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	4413      	add	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4a27      	ldr	r2, [pc, #156]	; (80094b8 <xTaskResumeAll+0x128>)
 800941a:	441a      	add	r2, r3
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3304      	adds	r3, #4
 8009420:	4619      	mov	r1, r3
 8009422:	4610      	mov	r0, r2
 8009424:	f7fe fa45 	bl	80078b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800942c:	4b23      	ldr	r3, [pc, #140]	; (80094bc <xTaskResumeAll+0x12c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009432:	429a      	cmp	r2, r3
 8009434:	d302      	bcc.n	800943c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009436:	4b22      	ldr	r3, [pc, #136]	; (80094c0 <xTaskResumeAll+0x130>)
 8009438:	2201      	movs	r2, #1
 800943a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800943c:	4b1c      	ldr	r3, [pc, #112]	; (80094b0 <xTaskResumeAll+0x120>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1cb      	bne.n	80093dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d001      	beq.n	800944e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800944a:	f000 fcc1 	bl	8009dd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800944e:	4b1d      	ldr	r3, [pc, #116]	; (80094c4 <xTaskResumeAll+0x134>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d010      	beq.n	800947c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800945a:	f000 f8d5 	bl	8009608 <xTaskIncrementTick>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009464:	4b16      	ldr	r3, [pc, #88]	; (80094c0 <xTaskResumeAll+0x130>)
 8009466:	2201      	movs	r2, #1
 8009468:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	3b01      	subs	r3, #1
 800946e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1f1      	bne.n	800945a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009476:	4b13      	ldr	r3, [pc, #76]	; (80094c4 <xTaskResumeAll+0x134>)
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800947c:	4b10      	ldr	r3, [pc, #64]	; (80094c0 <xTaskResumeAll+0x130>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d009      	beq.n	8009498 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009484:	2301      	movs	r3, #1
 8009486:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009488:	4b0f      	ldr	r3, [pc, #60]	; (80094c8 <xTaskResumeAll+0x138>)
 800948a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009498:	f001 fe34 	bl	800b104 <vPortExitCritical>

	return xAlreadyYielded;
 800949c:	68bb      	ldr	r3, [r7, #8]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop
 80094a8:	20001070 	.word	0x20001070
 80094ac:	20001048 	.word	0x20001048
 80094b0:	20001008 	.word	0x20001008
 80094b4:	20001050 	.word	0x20001050
 80094b8:	20000b78 	.word	0x20000b78
 80094bc:	20000b74 	.word	0x20000b74
 80094c0:	2000105c 	.word	0x2000105c
 80094c4:	20001058 	.word	0x20001058
 80094c8:	e000ed04 	.word	0xe000ed04

080094cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80094d2:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <xTaskGetTickCount+0x1c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80094d8:	687b      	ldr	r3, [r7, #4]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr
 80094e6:	bf00      	nop
 80094e8:	2000104c 	.word	0x2000104c

080094ec <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b086      	sub	sp, #24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80094f8:	2300      	movs	r3, #0
 80094fa:	617b      	str	r3, [r7, #20]
 80094fc:	2338      	movs	r3, #56	; 0x38
 80094fe:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8009500:	f7ff ff38 	bl	8009374 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8009504:	4b3a      	ldr	r3, [pc, #232]	; (80095f0 <uxTaskGetSystemState+0x104>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	429a      	cmp	r2, r3
 800950c:	d368      	bcc.n	80095e0 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	3b01      	subs	r3, #1
 8009512:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8009514:	697a      	ldr	r2, [r7, #20]
 8009516:	4613      	mov	r3, r2
 8009518:	00db      	lsls	r3, r3, #3
 800951a:	4413      	add	r3, r2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	461a      	mov	r2, r3
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	1898      	adds	r0, r3, r2
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	4613      	mov	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	4413      	add	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4a31      	ldr	r2, [pc, #196]	; (80095f4 <uxTaskGetSystemState+0x108>)
 8009530:	4413      	add	r3, r2
 8009532:	2201      	movs	r2, #1
 8009534:	4619      	mov	r1, r3
 8009536:	f000 fba9 	bl	8009c8c <prvListTasksWithinSingleList>
 800953a:	4602      	mov	r2, r0
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	4413      	add	r3, r2
 8009540:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e2      	bne.n	800950e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8009548:	697a      	ldr	r2, [r7, #20]
 800954a:	4613      	mov	r3, r2
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	4413      	add	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	461a      	mov	r2, r3
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	4413      	add	r3, r2
 8009558:	4a27      	ldr	r2, [pc, #156]	; (80095f8 <uxTaskGetSystemState+0x10c>)
 800955a:	6811      	ldr	r1, [r2, #0]
 800955c:	2202      	movs	r2, #2
 800955e:	4618      	mov	r0, r3
 8009560:	f000 fb94 	bl	8009c8c <prvListTasksWithinSingleList>
 8009564:	4602      	mov	r2, r0
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	4413      	add	r3, r2
 800956a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	4613      	mov	r3, r2
 8009570:	00db      	lsls	r3, r3, #3
 8009572:	4413      	add	r3, r2
 8009574:	009b      	lsls	r3, r3, #2
 8009576:	461a      	mov	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4413      	add	r3, r2
 800957c:	4a1f      	ldr	r2, [pc, #124]	; (80095fc <uxTaskGetSystemState+0x110>)
 800957e:	6811      	ldr	r1, [r2, #0]
 8009580:	2202      	movs	r2, #2
 8009582:	4618      	mov	r0, r3
 8009584:	f000 fb82 	bl	8009c8c <prvListTasksWithinSingleList>
 8009588:	4602      	mov	r2, r0
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	4413      	add	r3, r2
 800958e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	4613      	mov	r3, r2
 8009594:	00db      	lsls	r3, r3, #3
 8009596:	4413      	add	r3, r2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	461a      	mov	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4413      	add	r3, r2
 80095a0:	2204      	movs	r2, #4
 80095a2:	4917      	ldr	r1, [pc, #92]	; (8009600 <uxTaskGetSystemState+0x114>)
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 fb71 	bl	8009c8c <prvListTasksWithinSingleList>
 80095aa:	4602      	mov	r2, r0
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	4413      	add	r3, r2
 80095b0:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	4613      	mov	r3, r2
 80095b6:	00db      	lsls	r3, r3, #3
 80095b8:	4413      	add	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	461a      	mov	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	4413      	add	r3, r2
 80095c2:	2203      	movs	r2, #3
 80095c4:	490f      	ldr	r1, [pc, #60]	; (8009604 <uxTaskGetSystemState+0x118>)
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fb60 	bl	8009c8c <prvListTasksWithinSingleList>
 80095cc:	4602      	mov	r2, r0
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	4413      	add	r3, r2
 80095d2:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d002      	beq.n	80095e0 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80095e0:	f7ff fed6 	bl	8009390 <xTaskResumeAll>

		return uxTask;
 80095e4:	697b      	ldr	r3, [r7, #20]
	}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3718      	adds	r7, #24
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	20001048 	.word	0x20001048
 80095f4:	20000b78 	.word	0x20000b78
 80095f8:	20001000 	.word	0x20001000
 80095fc:	20001004 	.word	0x20001004
 8009600:	2000101c 	.word	0x2000101c
 8009604:	20001034 	.word	0x20001034

08009608 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009612:	4b4f      	ldr	r3, [pc, #316]	; (8009750 <xTaskIncrementTick+0x148>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	f040 808f 	bne.w	800973a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800961c:	4b4d      	ldr	r3, [pc, #308]	; (8009754 <xTaskIncrementTick+0x14c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3301      	adds	r3, #1
 8009622:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009624:	4a4b      	ldr	r2, [pc, #300]	; (8009754 <xTaskIncrementTick+0x14c>)
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d120      	bne.n	8009672 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009630:	4b49      	ldr	r3, [pc, #292]	; (8009758 <xTaskIncrementTick+0x150>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <xTaskIncrementTick+0x48>
	__asm volatile
 800963a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963e:	f383 8811 	msr	BASEPRI, r3
 8009642:	f3bf 8f6f 	isb	sy
 8009646:	f3bf 8f4f 	dsb	sy
 800964a:	603b      	str	r3, [r7, #0]
}
 800964c:	bf00      	nop
 800964e:	e7fe      	b.n	800964e <xTaskIncrementTick+0x46>
 8009650:	4b41      	ldr	r3, [pc, #260]	; (8009758 <xTaskIncrementTick+0x150>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	4b41      	ldr	r3, [pc, #260]	; (800975c <xTaskIncrementTick+0x154>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a3f      	ldr	r2, [pc, #252]	; (8009758 <xTaskIncrementTick+0x150>)
 800965c:	6013      	str	r3, [r2, #0]
 800965e:	4a3f      	ldr	r2, [pc, #252]	; (800975c <xTaskIncrementTick+0x154>)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	4b3e      	ldr	r3, [pc, #248]	; (8009760 <xTaskIncrementTick+0x158>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	3301      	adds	r3, #1
 800966a:	4a3d      	ldr	r2, [pc, #244]	; (8009760 <xTaskIncrementTick+0x158>)
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	f000 fbaf 	bl	8009dd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009672:	4b3c      	ldr	r3, [pc, #240]	; (8009764 <xTaskIncrementTick+0x15c>)
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	429a      	cmp	r2, r3
 800967a:	d349      	bcc.n	8009710 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800967c:	4b36      	ldr	r3, [pc, #216]	; (8009758 <xTaskIncrementTick+0x150>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d104      	bne.n	8009690 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009686:	4b37      	ldr	r3, [pc, #220]	; (8009764 <xTaskIncrementTick+0x15c>)
 8009688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800968c:	601a      	str	r2, [r3, #0]
					break;
 800968e:	e03f      	b.n	8009710 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009690:	4b31      	ldr	r3, [pc, #196]	; (8009758 <xTaskIncrementTick+0x150>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d203      	bcs.n	80096b0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096a8:	4a2e      	ldr	r2, [pc, #184]	; (8009764 <xTaskIncrementTick+0x15c>)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096ae:	e02f      	b.n	8009710 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fe f959 	bl	800796c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d004      	beq.n	80096cc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	3318      	adds	r3, #24
 80096c6:	4618      	mov	r0, r3
 80096c8:	f7fe f950 	bl	800796c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096d0:	4b25      	ldr	r3, [pc, #148]	; (8009768 <xTaskIncrementTick+0x160>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d903      	bls.n	80096e0 <xTaskIncrementTick+0xd8>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096dc:	4a22      	ldr	r2, [pc, #136]	; (8009768 <xTaskIncrementTick+0x160>)
 80096de:	6013      	str	r3, [r2, #0]
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096e4:	4613      	mov	r3, r2
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4a1f      	ldr	r2, [pc, #124]	; (800976c <xTaskIncrementTick+0x164>)
 80096ee:	441a      	add	r2, r3
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	3304      	adds	r3, #4
 80096f4:	4619      	mov	r1, r3
 80096f6:	4610      	mov	r0, r2
 80096f8:	f7fe f8db 	bl	80078b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009700:	4b1b      	ldr	r3, [pc, #108]	; (8009770 <xTaskIncrementTick+0x168>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009706:	429a      	cmp	r2, r3
 8009708:	d3b8      	bcc.n	800967c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800970a:	2301      	movs	r3, #1
 800970c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800970e:	e7b5      	b.n	800967c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009710:	4b17      	ldr	r3, [pc, #92]	; (8009770 <xTaskIncrementTick+0x168>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009716:	4915      	ldr	r1, [pc, #84]	; (800976c <xTaskIncrementTick+0x164>)
 8009718:	4613      	mov	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	440b      	add	r3, r1
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d901      	bls.n	800972c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009728:	2301      	movs	r3, #1
 800972a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800972c:	4b11      	ldr	r3, [pc, #68]	; (8009774 <xTaskIncrementTick+0x16c>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d007      	beq.n	8009744 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009734:	2301      	movs	r3, #1
 8009736:	617b      	str	r3, [r7, #20]
 8009738:	e004      	b.n	8009744 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800973a:	4b0f      	ldr	r3, [pc, #60]	; (8009778 <xTaskIncrementTick+0x170>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3301      	adds	r3, #1
 8009740:	4a0d      	ldr	r2, [pc, #52]	; (8009778 <xTaskIncrementTick+0x170>)
 8009742:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009744:	697b      	ldr	r3, [r7, #20]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3718      	adds	r7, #24
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	20001070 	.word	0x20001070
 8009754:	2000104c 	.word	0x2000104c
 8009758:	20001000 	.word	0x20001000
 800975c:	20001004 	.word	0x20001004
 8009760:	20001060 	.word	0x20001060
 8009764:	20001068 	.word	0x20001068
 8009768:	20001050 	.word	0x20001050
 800976c:	20000b78 	.word	0x20000b78
 8009770:	20000b74 	.word	0x20000b74
 8009774:	2000105c 	.word	0x2000105c
 8009778:	20001058 	.word	0x20001058

0800977c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800977c:	b480      	push	{r7}
 800977e:	b085      	sub	sp, #20
 8009780:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009782:	4b2a      	ldr	r3, [pc, #168]	; (800982c <vTaskSwitchContext+0xb0>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d003      	beq.n	8009792 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800978a:	4b29      	ldr	r3, [pc, #164]	; (8009830 <vTaskSwitchContext+0xb4>)
 800978c:	2201      	movs	r2, #1
 800978e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009790:	e046      	b.n	8009820 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009792:	4b27      	ldr	r3, [pc, #156]	; (8009830 <vTaskSwitchContext+0xb4>)
 8009794:	2200      	movs	r2, #0
 8009796:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009798:	4b26      	ldr	r3, [pc, #152]	; (8009834 <vTaskSwitchContext+0xb8>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	60fb      	str	r3, [r7, #12]
 800979e:	e010      	b.n	80097c2 <vTaskSwitchContext+0x46>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d10a      	bne.n	80097bc <vTaskSwitchContext+0x40>
	__asm volatile
 80097a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097aa:	f383 8811 	msr	BASEPRI, r3
 80097ae:	f3bf 8f6f 	isb	sy
 80097b2:	f3bf 8f4f 	dsb	sy
 80097b6:	607b      	str	r3, [r7, #4]
}
 80097b8:	bf00      	nop
 80097ba:	e7fe      	b.n	80097ba <vTaskSwitchContext+0x3e>
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	3b01      	subs	r3, #1
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	491d      	ldr	r1, [pc, #116]	; (8009838 <vTaskSwitchContext+0xbc>)
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	4613      	mov	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	440b      	add	r3, r1
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0e4      	beq.n	80097a0 <vTaskSwitchContext+0x24>
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	4613      	mov	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	4413      	add	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4a15      	ldr	r2, [pc, #84]	; (8009838 <vTaskSwitchContext+0xbc>)
 80097e2:	4413      	add	r3, r2
 80097e4:	60bb      	str	r3, [r7, #8]
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	685a      	ldr	r2, [r3, #4]
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	605a      	str	r2, [r3, #4]
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	685a      	ldr	r2, [r3, #4]
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	3308      	adds	r3, #8
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d104      	bne.n	8009806 <vTaskSwitchContext+0x8a>
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	685a      	ldr	r2, [r3, #4]
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	605a      	str	r2, [r3, #4]
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	4a0b      	ldr	r2, [pc, #44]	; (800983c <vTaskSwitchContext+0xc0>)
 800980e:	6013      	str	r3, [r2, #0]
 8009810:	4a08      	ldr	r2, [pc, #32]	; (8009834 <vTaskSwitchContext+0xb8>)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009816:	4b09      	ldr	r3, [pc, #36]	; (800983c <vTaskSwitchContext+0xc0>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	3364      	adds	r3, #100	; 0x64
 800981c:	4a08      	ldr	r2, [pc, #32]	; (8009840 <vTaskSwitchContext+0xc4>)
 800981e:	6013      	str	r3, [r2, #0]
}
 8009820:	bf00      	nop
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	20001070 	.word	0x20001070
 8009830:	2000105c 	.word	0x2000105c
 8009834:	20001050 	.word	0x20001050
 8009838:	20000b78 	.word	0x20000b78
 800983c:	20000b74 	.word	0x20000b74
 8009840:	2000010c 	.word	0x2000010c

08009844 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d10a      	bne.n	800986a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009858:	f383 8811 	msr	BASEPRI, r3
 800985c:	f3bf 8f6f 	isb	sy
 8009860:	f3bf 8f4f 	dsb	sy
 8009864:	60fb      	str	r3, [r7, #12]
}
 8009866:	bf00      	nop
 8009868:	e7fe      	b.n	8009868 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800986a:	4b07      	ldr	r3, [pc, #28]	; (8009888 <vTaskPlaceOnEventList+0x44>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	3318      	adds	r3, #24
 8009870:	4619      	mov	r1, r3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7fe f841 	bl	80078fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009878:	2101      	movs	r1, #1
 800987a:	6838      	ldr	r0, [r7, #0]
 800987c:	f000 ff46 	bl	800a70c <prvAddCurrentTaskToDelayedList>
}
 8009880:	bf00      	nop
 8009882:	3710      	adds	r7, #16
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	20000b74 	.word	0x20000b74

0800988c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d10a      	bne.n	80098b4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	617b      	str	r3, [r7, #20]
}
 80098b0:	bf00      	nop
 80098b2:	e7fe      	b.n	80098b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098b4:	4b0a      	ldr	r3, [pc, #40]	; (80098e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	3318      	adds	r3, #24
 80098ba:	4619      	mov	r1, r3
 80098bc:	68f8      	ldr	r0, [r7, #12]
 80098be:	f7fd fff8 	bl	80078b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d002      	beq.n	80098ce <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80098c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	68b8      	ldr	r0, [r7, #8]
 80098d2:	f000 ff1b 	bl	800a70c <prvAddCurrentTaskToDelayedList>
	}
 80098d6:	bf00      	nop
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20000b74 	.word	0x20000b74

080098e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b086      	sub	sp, #24
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	68db      	ldr	r3, [r3, #12]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10a      	bne.n	8009910 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80098fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fe:	f383 8811 	msr	BASEPRI, r3
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	f3bf 8f4f 	dsb	sy
 800990a:	60fb      	str	r3, [r7, #12]
}
 800990c:	bf00      	nop
 800990e:	e7fe      	b.n	800990e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	3318      	adds	r3, #24
 8009914:	4618      	mov	r0, r3
 8009916:	f7fe f829 	bl	800796c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800991a:	4b1e      	ldr	r3, [pc, #120]	; (8009994 <xTaskRemoveFromEventList+0xb0>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d11d      	bne.n	800995e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	3304      	adds	r3, #4
 8009926:	4618      	mov	r0, r3
 8009928:	f7fe f820 	bl	800796c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009930:	4b19      	ldr	r3, [pc, #100]	; (8009998 <xTaskRemoveFromEventList+0xb4>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	429a      	cmp	r2, r3
 8009936:	d903      	bls.n	8009940 <xTaskRemoveFromEventList+0x5c>
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993c:	4a16      	ldr	r2, [pc, #88]	; (8009998 <xTaskRemoveFromEventList+0xb4>)
 800993e:	6013      	str	r3, [r2, #0]
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009944:	4613      	mov	r3, r2
 8009946:	009b      	lsls	r3, r3, #2
 8009948:	4413      	add	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4a13      	ldr	r2, [pc, #76]	; (800999c <xTaskRemoveFromEventList+0xb8>)
 800994e:	441a      	add	r2, r3
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	3304      	adds	r3, #4
 8009954:	4619      	mov	r1, r3
 8009956:	4610      	mov	r0, r2
 8009958:	f7fd ffab 	bl	80078b2 <vListInsertEnd>
 800995c:	e005      	b.n	800996a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	3318      	adds	r3, #24
 8009962:	4619      	mov	r1, r3
 8009964:	480e      	ldr	r0, [pc, #56]	; (80099a0 <xTaskRemoveFromEventList+0xbc>)
 8009966:	f7fd ffa4 	bl	80078b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996e:	4b0d      	ldr	r3, [pc, #52]	; (80099a4 <xTaskRemoveFromEventList+0xc0>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009974:	429a      	cmp	r2, r3
 8009976:	d905      	bls.n	8009984 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009978:	2301      	movs	r3, #1
 800997a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800997c:	4b0a      	ldr	r3, [pc, #40]	; (80099a8 <xTaskRemoveFromEventList+0xc4>)
 800997e:	2201      	movs	r2, #1
 8009980:	601a      	str	r2, [r3, #0]
 8009982:	e001      	b.n	8009988 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009984:	2300      	movs	r3, #0
 8009986:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009988:	697b      	ldr	r3, [r7, #20]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3718      	adds	r7, #24
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	20001070 	.word	0x20001070
 8009998:	20001050 	.word	0x20001050
 800999c:	20000b78 	.word	0x20000b78
 80099a0:	20001008 	.word	0x20001008
 80099a4:	20000b74 	.word	0x20000b74
 80099a8:	2000105c 	.word	0x2000105c

080099ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099b4:	4b06      	ldr	r3, [pc, #24]	; (80099d0 <vTaskInternalSetTimeOutState+0x24>)
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099bc:	4b05      	ldr	r3, [pc, #20]	; (80099d4 <vTaskInternalSetTimeOutState+0x28>)
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	605a      	str	r2, [r3, #4]
}
 80099c4:	bf00      	nop
 80099c6:	370c      	adds	r7, #12
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	20001060 	.word	0x20001060
 80099d4:	2000104c 	.word	0x2000104c

080099d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b088      	sub	sp, #32
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10a      	bne.n	80099fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	613b      	str	r3, [r7, #16]
}
 80099fa:	bf00      	nop
 80099fc:	e7fe      	b.n	80099fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10a      	bne.n	8009a1a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	60fb      	str	r3, [r7, #12]
}
 8009a16:	bf00      	nop
 8009a18:	e7fe      	b.n	8009a18 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009a1a:	f001 fb43 	bl	800b0a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a1e:	4b1d      	ldr	r3, [pc, #116]	; (8009a94 <xTaskCheckForTimeOut+0xbc>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	69ba      	ldr	r2, [r7, #24]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a36:	d102      	bne.n	8009a3e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61fb      	str	r3, [r7, #28]
 8009a3c:	e023      	b.n	8009a86 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	4b15      	ldr	r3, [pc, #84]	; (8009a98 <xTaskCheckForTimeOut+0xc0>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d007      	beq.n	8009a5a <xTaskCheckForTimeOut+0x82>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	69ba      	ldr	r2, [r7, #24]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d302      	bcc.n	8009a5a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a54:	2301      	movs	r3, #1
 8009a56:	61fb      	str	r3, [r7, #28]
 8009a58:	e015      	b.n	8009a86 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d20b      	bcs.n	8009a7c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	1ad2      	subs	r2, r2, r3
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f7ff ff9b 	bl	80099ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a76:	2300      	movs	r3, #0
 8009a78:	61fb      	str	r3, [r7, #28]
 8009a7a:	e004      	b.n	8009a86 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a82:	2301      	movs	r3, #1
 8009a84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a86:	f001 fb3d 	bl	800b104 <vPortExitCritical>

	return xReturn;
 8009a8a:	69fb      	ldr	r3, [r7, #28]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3720      	adds	r7, #32
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}
 8009a94:	2000104c 	.word	0x2000104c
 8009a98:	20001060 	.word	0x20001060

08009a9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009aa0:	4b03      	ldr	r3, [pc, #12]	; (8009ab0 <vTaskMissedYield+0x14>)
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	601a      	str	r2, [r3, #0]
}
 8009aa6:	bf00      	nop
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	2000105c 	.word	0x2000105c

08009ab4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009abc:	f000 f852 	bl	8009b64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009ac0:	4b06      	ldr	r3, [pc, #24]	; (8009adc <prvIdleTask+0x28>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d9f9      	bls.n	8009abc <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ac8:	4b05      	ldr	r3, [pc, #20]	; (8009ae0 <prvIdleTask+0x2c>)
 8009aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ace:	601a      	str	r2, [r3, #0]
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ad8:	e7f0      	b.n	8009abc <prvIdleTask+0x8>
 8009ada:	bf00      	nop
 8009adc:	20000b78 	.word	0x20000b78
 8009ae0:	e000ed04 	.word	0xe000ed04

08009ae4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009aea:	2300      	movs	r3, #0
 8009aec:	607b      	str	r3, [r7, #4]
 8009aee:	e00c      	b.n	8009b0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009af0:	687a      	ldr	r2, [r7, #4]
 8009af2:	4613      	mov	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4a12      	ldr	r2, [pc, #72]	; (8009b44 <prvInitialiseTaskLists+0x60>)
 8009afc:	4413      	add	r3, r2
 8009afe:	4618      	mov	r0, r3
 8009b00:	f7fd feaa 	bl	8007858 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3301      	adds	r3, #1
 8009b08:	607b      	str	r3, [r7, #4]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2b37      	cmp	r3, #55	; 0x37
 8009b0e:	d9ef      	bls.n	8009af0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b10:	480d      	ldr	r0, [pc, #52]	; (8009b48 <prvInitialiseTaskLists+0x64>)
 8009b12:	f7fd fea1 	bl	8007858 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b16:	480d      	ldr	r0, [pc, #52]	; (8009b4c <prvInitialiseTaskLists+0x68>)
 8009b18:	f7fd fe9e 	bl	8007858 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b1c:	480c      	ldr	r0, [pc, #48]	; (8009b50 <prvInitialiseTaskLists+0x6c>)
 8009b1e:	f7fd fe9b 	bl	8007858 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b22:	480c      	ldr	r0, [pc, #48]	; (8009b54 <prvInitialiseTaskLists+0x70>)
 8009b24:	f7fd fe98 	bl	8007858 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b28:	480b      	ldr	r0, [pc, #44]	; (8009b58 <prvInitialiseTaskLists+0x74>)
 8009b2a:	f7fd fe95 	bl	8007858 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b2e:	4b0b      	ldr	r3, [pc, #44]	; (8009b5c <prvInitialiseTaskLists+0x78>)
 8009b30:	4a05      	ldr	r2, [pc, #20]	; (8009b48 <prvInitialiseTaskLists+0x64>)
 8009b32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b34:	4b0a      	ldr	r3, [pc, #40]	; (8009b60 <prvInitialiseTaskLists+0x7c>)
 8009b36:	4a05      	ldr	r2, [pc, #20]	; (8009b4c <prvInitialiseTaskLists+0x68>)
 8009b38:	601a      	str	r2, [r3, #0]
}
 8009b3a:	bf00      	nop
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	20000b78 	.word	0x20000b78
 8009b48:	20000fd8 	.word	0x20000fd8
 8009b4c:	20000fec 	.word	0x20000fec
 8009b50:	20001008 	.word	0x20001008
 8009b54:	2000101c 	.word	0x2000101c
 8009b58:	20001034 	.word	0x20001034
 8009b5c:	20001000 	.word	0x20001000
 8009b60:	20001004 	.word	0x20001004

08009b64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b082      	sub	sp, #8
 8009b68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b6a:	e019      	b.n	8009ba0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b6c:	f001 fa9a 	bl	800b0a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b70:	4b10      	ldr	r3, [pc, #64]	; (8009bb4 <prvCheckTasksWaitingTermination+0x50>)
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7fd fef5 	bl	800796c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b82:	4b0d      	ldr	r3, [pc, #52]	; (8009bb8 <prvCheckTasksWaitingTermination+0x54>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3b01      	subs	r3, #1
 8009b88:	4a0b      	ldr	r2, [pc, #44]	; (8009bb8 <prvCheckTasksWaitingTermination+0x54>)
 8009b8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b8c:	4b0b      	ldr	r3, [pc, #44]	; (8009bbc <prvCheckTasksWaitingTermination+0x58>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3b01      	subs	r3, #1
 8009b92:	4a0a      	ldr	r2, [pc, #40]	; (8009bbc <prvCheckTasksWaitingTermination+0x58>)
 8009b94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b96:	f001 fab5 	bl	800b104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f000 f8e4 	bl	8009d68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ba0:	4b06      	ldr	r3, [pc, #24]	; (8009bbc <prvCheckTasksWaitingTermination+0x58>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1e1      	bne.n	8009b6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009ba8:	bf00      	nop
 8009baa:	bf00      	nop
 8009bac:	3708      	adds	r7, #8
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	2000101c 	.word	0x2000101c
 8009bb8:	20001048 	.word	0x20001048
 8009bbc:	20001030 	.word	0x20001030

08009bc0 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d102      	bne.n	8009bda <vTaskGetInfo+0x1a>
 8009bd4:	4b2c      	ldr	r3, [pc, #176]	; (8009c88 <vTaskGetInfo+0xc8>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	e000      	b.n	8009bdc <vTaskGetInfo+0x1c>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	697a      	ldr	r2, [r7, #20]
 8009be2:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	2200      	movs	r2, #0
 8009c12:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8009c14:	78fb      	ldrb	r3, [r7, #3]
 8009c16:	2b05      	cmp	r3, #5
 8009c18:	d01a      	beq.n	8009c50 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 8009c1a:	4b1b      	ldr	r3, [pc, #108]	; (8009c88 <vTaskGetInfo+0xc8>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d103      	bne.n	8009c2c <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2200      	movs	r2, #0
 8009c28:	731a      	strb	r2, [r3, #12]
 8009c2a:	e018      	b.n	8009c5e <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	78fa      	ldrb	r2, [r7, #3]
 8009c30:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8009c32:	78fb      	ldrb	r3, [r7, #3]
 8009c34:	2b03      	cmp	r3, #3
 8009c36:	d112      	bne.n	8009c5e <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 8009c38:	f7ff fb9c 	bl	8009374 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d002      	beq.n	8009c4a <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	2202      	movs	r2, #2
 8009c48:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8009c4a:	f7ff fba1 	bl	8009390 <xTaskResumeAll>
 8009c4e:	e006      	b.n	8009c5e <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8009c50:	6978      	ldr	r0, [r7, #20]
 8009c52:	f7ff fab9 	bl	80091c8 <eTaskGetState>
 8009c56:	4603      	mov	r3, r0
 8009c58:	461a      	mov	r2, r3
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d009      	beq.n	8009c78 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 f861 	bl	8009d30 <prvTaskCheckFreeStackSpace>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	461a      	mov	r2, r3
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8009c76:	e002      	b.n	8009c7e <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	841a      	strh	r2, [r3, #32]
	}
 8009c7e:	bf00      	nop
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20000b74 	.word	0x20000b74

08009c8c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08a      	sub	sp, #40	; 0x28
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	60f8      	str	r0, [r7, #12]
 8009c94:	60b9      	str	r1, [r7, #8]
 8009c96:	4613      	mov	r3, r2
 8009c98:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d03f      	beq.n	8009d26 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	623b      	str	r3, [r7, #32]
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	685a      	ldr	r2, [r3, #4]
 8009cb0:	6a3b      	ldr	r3, [r7, #32]
 8009cb2:	605a      	str	r2, [r3, #4]
 8009cb4:	6a3b      	ldr	r3, [r7, #32]
 8009cb6:	685a      	ldr	r2, [r3, #4]
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	3308      	adds	r3, #8
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d104      	bne.n	8009cca <prvListTasksWithinSingleList+0x3e>
 8009cc0:	6a3b      	ldr	r3, [r7, #32]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	685a      	ldr	r2, [r3, #4]
 8009cc6:	6a3b      	ldr	r3, [r7, #32]
 8009cc8:	605a      	str	r2, [r3, #4]
 8009cca:	6a3b      	ldr	r3, [r7, #32]
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	61bb      	str	r3, [r7, #24]
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	685a      	ldr	r2, [r3, #4]
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	605a      	str	r2, [r3, #4]
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	3308      	adds	r3, #8
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d104      	bne.n	8009cf6 <prvListTasksWithinSingleList+0x6a>
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	605a      	str	r2, [r3, #4]
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	68db      	ldr	r3, [r3, #12]
 8009cfc:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8009cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d00:	4613      	mov	r3, r2
 8009d02:	00db      	lsls	r3, r3, #3
 8009d04:	4413      	add	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	461a      	mov	r2, r3
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	1899      	adds	r1, r3, r2
 8009d0e:	79fb      	ldrb	r3, [r7, #7]
 8009d10:	2201      	movs	r2, #1
 8009d12:	6978      	ldr	r0, [r7, #20]
 8009d14:	f7ff ff54 	bl	8009bc0 <vTaskGetInfo>
				uxTask++;
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d1d5      	bne.n	8009cd2 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8009d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3728      	adds	r7, #40	; 0x28
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009d3c:	e005      	b.n	8009d4a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	3301      	adds	r3, #1
 8009d42:	607b      	str	r3, [r7, #4]
			ulCount++;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	3301      	adds	r3, #1
 8009d48:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	2ba5      	cmp	r3, #165	; 0xa5
 8009d50:	d0f5      	beq.n	8009d3e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	089b      	lsrs	r3, r3, #2
 8009d56:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	b29b      	uxth	r3, r3
	}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3364      	adds	r3, #100	; 0x64
 8009d74:	4618      	mov	r0, r3
 8009d76:	f002 fb27 	bl	800c3c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d108      	bne.n	8009d96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f001 fb79 	bl	800b480 <vPortFree>
				vPortFree( pxTCB );
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f001 fb76 	bl	800b480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009d94:	e018      	b.n	8009dc8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d103      	bne.n	8009da8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f001 fb6d 	bl	800b480 <vPortFree>
	}
 8009da6:	e00f      	b.n	8009dc8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8009dae:	2b02      	cmp	r3, #2
 8009db0:	d00a      	beq.n	8009dc8 <prvDeleteTCB+0x60>
	__asm volatile
 8009db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db6:	f383 8811 	msr	BASEPRI, r3
 8009dba:	f3bf 8f6f 	isb	sy
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	60fb      	str	r3, [r7, #12]
}
 8009dc4:	bf00      	nop
 8009dc6:	e7fe      	b.n	8009dc6 <prvDeleteTCB+0x5e>
	}
 8009dc8:	bf00      	nop
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dd6:	4b0c      	ldr	r3, [pc, #48]	; (8009e08 <prvResetNextTaskUnblockTime+0x38>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d104      	bne.n	8009dea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009de0:	4b0a      	ldr	r3, [pc, #40]	; (8009e0c <prvResetNextTaskUnblockTime+0x3c>)
 8009de2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009de6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009de8:	e008      	b.n	8009dfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dea:	4b07      	ldr	r3, [pc, #28]	; (8009e08 <prvResetNextTaskUnblockTime+0x38>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	4a04      	ldr	r2, [pc, #16]	; (8009e0c <prvResetNextTaskUnblockTime+0x3c>)
 8009dfa:	6013      	str	r3, [r2, #0]
}
 8009dfc:	bf00      	nop
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	20001000 	.word	0x20001000
 8009e0c:	20001068 	.word	0x20001068

08009e10 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009e10:	b480      	push	{r7}
 8009e12:	b083      	sub	sp, #12
 8009e14:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009e16:	4b05      	ldr	r3, [pc, #20]	; (8009e2c <xTaskGetCurrentTaskHandle+0x1c>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009e1c:	687b      	ldr	r3, [r7, #4]
	}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	20000b74 	.word	0x20000b74

08009e30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009e36:	4b0b      	ldr	r3, [pc, #44]	; (8009e64 <xTaskGetSchedulerState+0x34>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d102      	bne.n	8009e44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	607b      	str	r3, [r7, #4]
 8009e42:	e008      	b.n	8009e56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e44:	4b08      	ldr	r3, [pc, #32]	; (8009e68 <xTaskGetSchedulerState+0x38>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d102      	bne.n	8009e52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009e4c:	2302      	movs	r3, #2
 8009e4e:	607b      	str	r3, [r7, #4]
 8009e50:	e001      	b.n	8009e56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009e52:	2300      	movs	r3, #0
 8009e54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009e56:	687b      	ldr	r3, [r7, #4]
	}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	20001054 	.word	0x20001054
 8009e68:	20001070 	.word	0x20001070

08009e6c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d051      	beq.n	8009f26 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e86:	4b2a      	ldr	r3, [pc, #168]	; (8009f30 <xTaskPriorityInherit+0xc4>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d241      	bcs.n	8009f14 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	699b      	ldr	r3, [r3, #24]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	db06      	blt.n	8009ea6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e98:	4b25      	ldr	r3, [pc, #148]	; (8009f30 <xTaskPriorityInherit+0xc4>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	6959      	ldr	r1, [r3, #20]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eae:	4613      	mov	r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4a1f      	ldr	r2, [pc, #124]	; (8009f34 <xTaskPriorityInherit+0xc8>)
 8009eb8:	4413      	add	r3, r2
 8009eba:	4299      	cmp	r1, r3
 8009ebc:	d122      	bne.n	8009f04 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f7fd fd52 	bl	800796c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009ec8:	4b19      	ldr	r3, [pc, #100]	; (8009f30 <xTaskPriorityInherit+0xc4>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed6:	4b18      	ldr	r3, [pc, #96]	; (8009f38 <xTaskPriorityInherit+0xcc>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d903      	bls.n	8009ee6 <xTaskPriorityInherit+0x7a>
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee2:	4a15      	ldr	r2, [pc, #84]	; (8009f38 <xTaskPriorityInherit+0xcc>)
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eea:	4613      	mov	r3, r2
 8009eec:	009b      	lsls	r3, r3, #2
 8009eee:	4413      	add	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4a10      	ldr	r2, [pc, #64]	; (8009f34 <xTaskPriorityInherit+0xc8>)
 8009ef4:	441a      	add	r2, r3
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	4619      	mov	r1, r3
 8009efc:	4610      	mov	r0, r2
 8009efe:	f7fd fcd8 	bl	80078b2 <vListInsertEnd>
 8009f02:	e004      	b.n	8009f0e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009f04:	4b0a      	ldr	r3, [pc, #40]	; (8009f30 <xTaskPriorityInherit+0xc4>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	60fb      	str	r3, [r7, #12]
 8009f12:	e008      	b.n	8009f26 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009f18:	4b05      	ldr	r3, [pc, #20]	; (8009f30 <xTaskPriorityInherit+0xc4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d201      	bcs.n	8009f26 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009f22:	2301      	movs	r3, #1
 8009f24:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f26:	68fb      	ldr	r3, [r7, #12]
	}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	20000b74 	.word	0x20000b74
 8009f34:	20000b78 	.word	0x20000b78
 8009f38:	20001050 	.word	0x20001050

08009f3c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d056      	beq.n	800a000 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009f52:	4b2e      	ldr	r3, [pc, #184]	; (800a00c <xTaskPriorityDisinherit+0xd0>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	693a      	ldr	r2, [r7, #16]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d00a      	beq.n	8009f72 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	60fb      	str	r3, [r7, #12]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10a      	bne.n	8009f90 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	60bb      	str	r3, [r7, #8]
}
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f94:	1e5a      	subs	r2, r3, #1
 8009f96:	693b      	ldr	r3, [r7, #16]
 8009f98:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d02c      	beq.n	800a000 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d128      	bne.n	800a000 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	3304      	adds	r3, #4
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fd fcda 	bl	800796c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fd0:	4b0f      	ldr	r3, [pc, #60]	; (800a010 <xTaskPriorityDisinherit+0xd4>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d903      	bls.n	8009fe0 <xTaskPriorityDisinherit+0xa4>
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fdc:	4a0c      	ldr	r2, [pc, #48]	; (800a010 <xTaskPriorityDisinherit+0xd4>)
 8009fde:	6013      	str	r3, [r2, #0]
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4413      	add	r3, r2
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4a09      	ldr	r2, [pc, #36]	; (800a014 <xTaskPriorityDisinherit+0xd8>)
 8009fee:	441a      	add	r2, r3
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4610      	mov	r0, r2
 8009ff8:	f7fd fc5b 	bl	80078b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a000:	697b      	ldr	r3, [r7, #20]
	}
 800a002:	4618      	mov	r0, r3
 800a004:	3718      	adds	r7, #24
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	20000b74 	.word	0x20000b74
 800a010:	20001050 	.word	0x20001050
 800a014:	20000b78 	.word	0x20000b78

0800a018 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b088      	sub	sp, #32
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a026:	2301      	movs	r3, #1
 800a028:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d06a      	beq.n	800a106 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10a      	bne.n	800a04e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	60fb      	str	r3, [r7, #12]
}
 800a04a:	bf00      	nop
 800a04c:	e7fe      	b.n	800a04c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	429a      	cmp	r2, r3
 800a056:	d902      	bls.n	800a05e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	61fb      	str	r3, [r7, #28]
 800a05c:	e002      	b.n	800a064 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a062:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a068:	69fa      	ldr	r2, [r7, #28]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d04b      	beq.n	800a106 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	429a      	cmp	r2, r3
 800a076:	d146      	bne.n	800a106 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a078:	4b25      	ldr	r3, [pc, #148]	; (800a110 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	69ba      	ldr	r2, [r7, #24]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d10a      	bne.n	800a098 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	60bb      	str	r3, [r7, #8]
}
 800a094:	bf00      	nop
 800a096:	e7fe      	b.n	800a096 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	69fa      	ldr	r2, [r7, #28]
 800a0a2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	699b      	ldr	r3, [r3, #24]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	db04      	blt.n	800a0b6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0ac:	69fb      	ldr	r3, [r7, #28]
 800a0ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	6959      	ldr	r1, [r3, #20]
 800a0ba:	693a      	ldr	r2, [r7, #16]
 800a0bc:	4613      	mov	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	4413      	add	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4a13      	ldr	r2, [pc, #76]	; (800a114 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a0c6:	4413      	add	r3, r2
 800a0c8:	4299      	cmp	r1, r3
 800a0ca:	d11c      	bne.n	800a106 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fd fc4b 	bl	800796c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0da:	4b0f      	ldr	r3, [pc, #60]	; (800a118 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d903      	bls.n	800a0ea <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e6:	4a0c      	ldr	r2, [pc, #48]	; (800a118 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a0e8:	6013      	str	r3, [r2, #0]
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ee:	4613      	mov	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	4413      	add	r3, r2
 800a0f4:	009b      	lsls	r3, r3, #2
 800a0f6:	4a07      	ldr	r2, [pc, #28]	; (800a114 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a0f8:	441a      	add	r2, r3
 800a0fa:	69bb      	ldr	r3, [r7, #24]
 800a0fc:	3304      	adds	r3, #4
 800a0fe:	4619      	mov	r1, r3
 800a100:	4610      	mov	r0, r2
 800a102:	f7fd fbd6 	bl	80078b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a106:	bf00      	nop
 800a108:	3720      	adds	r7, #32
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	20000b74 	.word	0x20000b74
 800a114:	20000b78 	.word	0x20000b78
 800a118:	20001050 	.word	0x20001050

0800a11c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800a126:	6839      	ldr	r1, [r7, #0]
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f002 f9d9 	bl	800c4e0 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7f6 f856 	bl	80001e0 <strlen>
 800a134:	60f8      	str	r0, [r7, #12]
 800a136:	e007      	b.n	800a148 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	4413      	add	r3, r2
 800a13e:	2220      	movs	r2, #32
 800a140:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	3301      	adds	r3, #1
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b1e      	cmp	r3, #30
 800a14c:	d9f4      	bls.n	800a138 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4413      	add	r3, r2
 800a154:	2200      	movs	r2, #0
 800a156:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	4413      	add	r3, r2
	}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
	...

0800a168 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800a168:	b590      	push	{r4, r7, lr}
 800a16a:	b089      	sub	sp, #36	; 0x24
 800a16c:	af02      	add	r7, sp, #8
 800a16e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800a176:	4b45      	ldr	r3, [pc, #276]	; (800a28c <vTaskList+0x124>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800a17c:	4b43      	ldr	r3, [pc, #268]	; (800a28c <vTaskList+0x124>)
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	4613      	mov	r3, r2
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	4413      	add	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	4618      	mov	r0, r3
 800a18a:	f001 f8ad 	bl	800b2e8 <pvPortMalloc>
 800a18e:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d076      	beq.n	800a284 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800a196:	2200      	movs	r2, #0
 800a198:	68f9      	ldr	r1, [r7, #12]
 800a19a:	68b8      	ldr	r0, [r7, #8]
 800a19c:	f7ff f9a6 	bl	80094ec <uxTaskGetSystemState>
 800a1a0:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	617b      	str	r3, [r7, #20]
 800a1a6:	e066      	b.n	800a276 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800a1a8:	697a      	ldr	r2, [r7, #20]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	00db      	lsls	r3, r3, #3
 800a1ae:	4413      	add	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	4413      	add	r3, r2
 800a1b8:	7b1b      	ldrb	r3, [r3, #12]
 800a1ba:	2b04      	cmp	r3, #4
 800a1bc:	d81b      	bhi.n	800a1f6 <vTaskList+0x8e>
 800a1be:	a201      	add	r2, pc, #4	; (adr r2, 800a1c4 <vTaskList+0x5c>)
 800a1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c4:	0800a1d9 	.word	0x0800a1d9
 800a1c8:	0800a1df 	.word	0x0800a1df
 800a1cc:	0800a1e5 	.word	0x0800a1e5
 800a1d0:	0800a1eb 	.word	0x0800a1eb
 800a1d4:	0800a1f1 	.word	0x0800a1f1
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800a1d8:	2358      	movs	r3, #88	; 0x58
 800a1da:	74fb      	strb	r3, [r7, #19]
										break;
 800a1dc:	e00e      	b.n	800a1fc <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800a1de:	2352      	movs	r3, #82	; 0x52
 800a1e0:	74fb      	strb	r3, [r7, #19]
										break;
 800a1e2:	e00b      	b.n	800a1fc <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800a1e4:	2342      	movs	r3, #66	; 0x42
 800a1e6:	74fb      	strb	r3, [r7, #19]
										break;
 800a1e8:	e008      	b.n	800a1fc <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800a1ea:	2353      	movs	r3, #83	; 0x53
 800a1ec:	74fb      	strb	r3, [r7, #19]
										break;
 800a1ee:	e005      	b.n	800a1fc <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800a1f0:	2344      	movs	r3, #68	; 0x44
 800a1f2:	74fb      	strb	r3, [r7, #19]
										break;
 800a1f4:	e002      	b.n	800a1fc <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	74fb      	strb	r3, [r7, #19]
										break;
 800a1fa:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	4613      	mov	r3, r2
 800a200:	00db      	lsls	r3, r3, #3
 800a202:	4413      	add	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	461a      	mov	r2, r3
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	4413      	add	r3, r2
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	4619      	mov	r1, r3
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f7ff ff83 	bl	800a11c <prvWriteNameToBuffer>
 800a216:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800a218:	7cf9      	ldrb	r1, [r7, #19]
 800a21a:	697a      	ldr	r2, [r7, #20]
 800a21c:	4613      	mov	r3, r2
 800a21e:	00db      	lsls	r3, r3, #3
 800a220:	4413      	add	r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	461a      	mov	r2, r3
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	4413      	add	r3, r2
 800a22a:	6918      	ldr	r0, [r3, #16]
 800a22c:	697a      	ldr	r2, [r7, #20]
 800a22e:	4613      	mov	r3, r2
 800a230:	00db      	lsls	r3, r3, #3
 800a232:	4413      	add	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	461a      	mov	r2, r3
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	4413      	add	r3, r2
 800a23c:	8c1b      	ldrh	r3, [r3, #32]
 800a23e:	461c      	mov	r4, r3
 800a240:	697a      	ldr	r2, [r7, #20]
 800a242:	4613      	mov	r3, r2
 800a244:	00db      	lsls	r3, r3, #3
 800a246:	4413      	add	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	461a      	mov	r2, r3
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	4413      	add	r3, r2
 800a250:	689b      	ldr	r3, [r3, #8]
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	9400      	str	r4, [sp, #0]
 800a256:	4603      	mov	r3, r0
 800a258:	460a      	mov	r2, r1
 800a25a:	490d      	ldr	r1, [pc, #52]	; (800a290 <vTaskList+0x128>)
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f002 f91f 	bl	800c4a0 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f7f5 ffbc 	bl	80001e0 <strlen>
 800a268:	4602      	mov	r2, r0
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4413      	add	r3, r2
 800a26e:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	3301      	adds	r3, #1
 800a274:	617b      	str	r3, [r7, #20]
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d394      	bcc.n	800a1a8 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800a27e:	68b8      	ldr	r0, [r7, #8]
 800a280:	f001 f8fe 	bl	800b480 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a284:	bf00      	nop
 800a286:	371c      	adds	r7, #28
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd90      	pop	{r4, r7, pc}
 800a28c:	20001048 	.word	0x20001048
 800a290:	0800ce20 	.word	0x0800ce20

0800a294 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a294:	b480      	push	{r7}
 800a296:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a298:	4b07      	ldr	r3, [pc, #28]	; (800a2b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d004      	beq.n	800a2aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a2a0:	4b05      	ldr	r3, [pc, #20]	; (800a2b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a2a6:	3201      	adds	r2, #1
 800a2a8:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 800a2aa:	4b03      	ldr	r3, [pc, #12]	; (800a2b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
	}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	20000b74 	.word	0x20000b74

0800a2bc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b086      	sub	sp, #24
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
 800a2c8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a2ca:	f000 feeb 	bl	800b0a4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a2ce:	4b29      	ldr	r3, [pc, #164]	; (800a374 <xTaskNotifyWait+0xb8>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800a2d6:	b2db      	uxtb	r3, r3
 800a2d8:	2b02      	cmp	r3, #2
 800a2da:	d01c      	beq.n	800a316 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a2dc:	4b25      	ldr	r3, [pc, #148]	; (800a374 <xTaskNotifyWait+0xb8>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	43d2      	mvns	r2, r2
 800a2e8:	400a      	ands	r2, r1
 800a2ea:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a2ee:	4b21      	ldr	r3, [pc, #132]	; (800a374 <xTaskNotifyWait+0xb8>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

				if( xTicksToWait > ( TickType_t ) 0 )
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00b      	beq.n	800a316 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a2fe:	2101      	movs	r1, #1
 800a300:	6838      	ldr	r0, [r7, #0]
 800a302:	f000 fa03 	bl	800a70c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a306:	4b1c      	ldr	r3, [pc, #112]	; (800a378 <xTaskNotifyWait+0xbc>)
 800a308:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a30c:	601a      	str	r2, [r3, #0]
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a316:	f000 fef5 	bl	800b104 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a31a:	f000 fec3 	bl	800b0a4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d005      	beq.n	800a330 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a324:	4b13      	ldr	r3, [pc, #76]	; (800a374 <xTaskNotifyWait+0xb8>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a330:	4b10      	ldr	r3, [pc, #64]	; (800a374 <xTaskNotifyWait+0xb8>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d002      	beq.n	800a344 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a33e:	2300      	movs	r3, #0
 800a340:	617b      	str	r3, [r7, #20]
 800a342:	e00a      	b.n	800a35a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a344:	4b0b      	ldr	r3, [pc, #44]	; (800a374 <xTaskNotifyWait+0xb8>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	43d2      	mvns	r2, r2
 800a350:	400a      	ands	r2, r1
 800a352:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				xReturn = pdTRUE;
 800a356:	2301      	movs	r3, #1
 800a358:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a35a:	4b06      	ldr	r3, [pc, #24]	; (800a374 <xTaskNotifyWait+0xb8>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		}
		taskEXIT_CRITICAL();
 800a364:	f000 fece 	bl	800b104 <vPortExitCritical>

		return xReturn;
 800a368:	697b      	ldr	r3, [r7, #20]
	}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3718      	adds	r7, #24
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
 800a372:	bf00      	nop
 800a374:	20000b74 	.word	0x20000b74
 800a378:	e000ed04 	.word	0xe000ed04

0800a37c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b08a      	sub	sp, #40	; 0x28
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	603b      	str	r3, [r7, #0]
 800a388:	4613      	mov	r3, r2
 800a38a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a38c:	2301      	movs	r3, #1
 800a38e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10a      	bne.n	800a3ac <xTaskGenericNotify+0x30>
	__asm volatile
 800a396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	61bb      	str	r3, [r7, #24]
}
 800a3a8:	bf00      	nop
 800a3aa:	e7fe      	b.n	800a3aa <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a3b0:	f000 fe78 	bl	800b0a4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d004      	beq.n	800a3c4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a3c4:	6a3b      	ldr	r3, [r7, #32]
 800a3c6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800a3ca:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a3cc:	6a3b      	ldr	r3, [r7, #32]
 800a3ce:	2202      	movs	r2, #2
 800a3d0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 800a3d4:	79fb      	ldrb	r3, [r7, #7]
 800a3d6:	2b04      	cmp	r3, #4
 800a3d8:	d82d      	bhi.n	800a436 <xTaskGenericNotify+0xba>
 800a3da:	a201      	add	r2, pc, #4	; (adr r2, 800a3e0 <xTaskGenericNotify+0x64>)
 800a3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e0:	0800a459 	.word	0x0800a459
 800a3e4:	0800a3f5 	.word	0x0800a3f5
 800a3e8:	0800a407 	.word	0x0800a407
 800a3ec:	0800a417 	.word	0x0800a417
 800a3f0:	0800a421 	.word	0x0800a421
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a3f4:	6a3b      	ldr	r3, [r7, #32]
 800a3f6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	431a      	orrs	r2, r3
 800a3fe:	6a3b      	ldr	r3, [r7, #32]
 800a400:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800a404:	e02b      	b.n	800a45e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a406:	6a3b      	ldr	r3, [r7, #32]
 800a408:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	6a3b      	ldr	r3, [r7, #32]
 800a410:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800a414:	e023      	b.n	800a45e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a416:	6a3b      	ldr	r3, [r7, #32]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800a41e:	e01e      	b.n	800a45e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a420:	7ffb      	ldrb	r3, [r7, #31]
 800a422:	2b02      	cmp	r3, #2
 800a424:	d004      	beq.n	800a430 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a42e:	e016      	b.n	800a45e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800a430:	2300      	movs	r3, #0
 800a432:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a434:	e013      	b.n	800a45e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a43c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a440:	d00c      	beq.n	800a45c <xTaskGenericNotify+0xe0>
	__asm volatile
 800a442:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a446:	f383 8811 	msr	BASEPRI, r3
 800a44a:	f3bf 8f6f 	isb	sy
 800a44e:	f3bf 8f4f 	dsb	sy
 800a452:	617b      	str	r3, [r7, #20]
}
 800a454:	bf00      	nop
 800a456:	e7fe      	b.n	800a456 <xTaskGenericNotify+0xda>
					break;
 800a458:	bf00      	nop
 800a45a:	e000      	b.n	800a45e <xTaskGenericNotify+0xe2>

					break;
 800a45c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a45e:	7ffb      	ldrb	r3, [r7, #31]
 800a460:	2b01      	cmp	r3, #1
 800a462:	d13a      	bne.n	800a4da <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	3304      	adds	r3, #4
 800a468:	4618      	mov	r0, r3
 800a46a:	f7fd fa7f 	bl	800796c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a46e:	6a3b      	ldr	r3, [r7, #32]
 800a470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a472:	4b1d      	ldr	r3, [pc, #116]	; (800a4e8 <xTaskGenericNotify+0x16c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	429a      	cmp	r2, r3
 800a478:	d903      	bls.n	800a482 <xTaskGenericNotify+0x106>
 800a47a:	6a3b      	ldr	r3, [r7, #32]
 800a47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47e:	4a1a      	ldr	r2, [pc, #104]	; (800a4e8 <xTaskGenericNotify+0x16c>)
 800a480:	6013      	str	r3, [r2, #0]
 800a482:	6a3b      	ldr	r3, [r7, #32]
 800a484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a486:	4613      	mov	r3, r2
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	4413      	add	r3, r2
 800a48c:	009b      	lsls	r3, r3, #2
 800a48e:	4a17      	ldr	r2, [pc, #92]	; (800a4ec <xTaskGenericNotify+0x170>)
 800a490:	441a      	add	r2, r3
 800a492:	6a3b      	ldr	r3, [r7, #32]
 800a494:	3304      	adds	r3, #4
 800a496:	4619      	mov	r1, r3
 800a498:	4610      	mov	r0, r2
 800a49a:	f7fd fa0a 	bl	80078b2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a49e:	6a3b      	ldr	r3, [r7, #32]
 800a4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00a      	beq.n	800a4bc <xTaskGenericNotify+0x140>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	613b      	str	r3, [r7, #16]
}
 800a4b8:	bf00      	nop
 800a4ba:	e7fe      	b.n	800a4ba <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a4bc:	6a3b      	ldr	r3, [r7, #32]
 800a4be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4c0:	4b0b      	ldr	r3, [pc, #44]	; (800a4f0 <xTaskGenericNotify+0x174>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d907      	bls.n	800a4da <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a4ca:	4b0a      	ldr	r3, [pc, #40]	; (800a4f4 <xTaskGenericNotify+0x178>)
 800a4cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d0:	601a      	str	r2, [r3, #0]
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a4da:	f000 fe13 	bl	800b104 <vPortExitCritical>

		return xReturn;
 800a4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3728      	adds	r7, #40	; 0x28
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	20001050 	.word	0x20001050
 800a4ec:	20000b78 	.word	0x20000b78
 800a4f0:	20000b74 	.word	0x20000b74
 800a4f4:	e000ed04 	.word	0xe000ed04

0800a4f8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b08e      	sub	sp, #56	; 0x38
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	603b      	str	r3, [r7, #0]
 800a504:	4613      	mov	r3, r2
 800a506:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a508:	2301      	movs	r3, #1
 800a50a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d10a      	bne.n	800a528 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800a512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a516:	f383 8811 	msr	BASEPRI, r3
 800a51a:	f3bf 8f6f 	isb	sy
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a524:	bf00      	nop
 800a526:	e7fe      	b.n	800a526 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a528:	f000 fe9e 	bl	800b268 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800a530:	f3ef 8211 	mrs	r2, BASEPRI
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	623a      	str	r2, [r7, #32]
 800a546:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a548:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a54a:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d004      	beq.n	800a55c <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a55c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55e:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800a562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a568:	2202      	movs	r2, #2
 800a56a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	2b04      	cmp	r3, #4
 800a572:	d82f      	bhi.n	800a5d4 <xTaskGenericNotifyFromISR+0xdc>
 800a574:	a201      	add	r2, pc, #4	; (adr r2, 800a57c <xTaskGenericNotifyFromISR+0x84>)
 800a576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57a:	bf00      	nop
 800a57c:	0800a5f7 	.word	0x0800a5f7
 800a580:	0800a591 	.word	0x0800a591
 800a584:	0800a5a3 	.word	0x0800a5a3
 800a588:	0800a5b3 	.word	0x0800a5b3
 800a58c:	0800a5bd 	.word	0x0800a5bd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a592:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	431a      	orrs	r2, r3
 800a59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800a5a0:	e02c      	b.n	800a5fc <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a5a8:	1c5a      	adds	r2, r3, #1
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ac:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800a5b0:	e024      	b.n	800a5fc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	68ba      	ldr	r2, [r7, #8]
 800a5b6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800a5ba:	e01f      	b.n	800a5fc <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a5bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d004      	beq.n	800a5ce <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c6:	68ba      	ldr	r2, [r7, #8]
 800a5c8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a5cc:	e016      	b.n	800a5fc <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800a5d2:	e013      	b.n	800a5fc <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800a5da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5de:	d00c      	beq.n	800a5fa <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800a5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e4:	f383 8811 	msr	BASEPRI, r3
 800a5e8:	f3bf 8f6f 	isb	sy
 800a5ec:	f3bf 8f4f 	dsb	sy
 800a5f0:	61bb      	str	r3, [r7, #24]
}
 800a5f2:	bf00      	nop
 800a5f4:	e7fe      	b.n	800a5f4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800a5f6:	bf00      	nop
 800a5f8:	e000      	b.n	800a5fc <xTaskGenericNotifyFromISR+0x104>
					break;
 800a5fa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a5fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a600:	2b01      	cmp	r3, #1
 800a602:	d146      	bne.n	800a692 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00a      	beq.n	800a622 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	617b      	str	r3, [r7, #20]
}
 800a61e:	bf00      	nop
 800a620:	e7fe      	b.n	800a620 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a622:	4b21      	ldr	r3, [pc, #132]	; (800a6a8 <xTaskGenericNotifyFromISR+0x1b0>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d11d      	bne.n	800a666 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	3304      	adds	r3, #4
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fd f99c 	bl	800796c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a638:	4b1c      	ldr	r3, [pc, #112]	; (800a6ac <xTaskGenericNotifyFromISR+0x1b4>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d903      	bls.n	800a648 <xTaskGenericNotifyFromISR+0x150>
 800a640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a644:	4a19      	ldr	r2, [pc, #100]	; (800a6ac <xTaskGenericNotifyFromISR+0x1b4>)
 800a646:	6013      	str	r3, [r2, #0]
 800a648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a64c:	4613      	mov	r3, r2
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	4413      	add	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4a16      	ldr	r2, [pc, #88]	; (800a6b0 <xTaskGenericNotifyFromISR+0x1b8>)
 800a656:	441a      	add	r2, r3
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	3304      	adds	r3, #4
 800a65c:	4619      	mov	r1, r3
 800a65e:	4610      	mov	r0, r2
 800a660:	f7fd f927 	bl	80078b2 <vListInsertEnd>
 800a664:	e005      	b.n	800a672 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	3318      	adds	r3, #24
 800a66a:	4619      	mov	r1, r3
 800a66c:	4811      	ldr	r0, [pc, #68]	; (800a6b4 <xTaskGenericNotifyFromISR+0x1bc>)
 800a66e:	f7fd f920 	bl	80078b2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a676:	4b10      	ldr	r3, [pc, #64]	; (800a6b8 <xTaskGenericNotifyFromISR+0x1c0>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d908      	bls.n	800a692 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800a680:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a682:	2b00      	cmp	r3, #0
 800a684:	d002      	beq.n	800a68c <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800a686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a688:	2201      	movs	r2, #1
 800a68a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800a68c:	4b0b      	ldr	r3, [pc, #44]	; (800a6bc <xTaskGenericNotifyFromISR+0x1c4>)
 800a68e:	2201      	movs	r2, #1
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a694:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	f383 8811 	msr	BASEPRI, r3
}
 800a69c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800a69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3738      	adds	r7, #56	; 0x38
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	20001070 	.word	0x20001070
 800a6ac:	20001050 	.word	0x20001050
 800a6b0:	20000b78 	.word	0x20000b78
 800a6b4:	20001008 	.word	0x20001008
 800a6b8:	20000b74 	.word	0x20000b74
 800a6bc:	2000105c 	.word	0x2000105c

0800a6c0 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d102      	bne.n	800a6d4 <xTaskNotifyStateClear+0x14>
 800a6ce:	4b0e      	ldr	r3, [pc, #56]	; (800a708 <xTaskNotifyStateClear+0x48>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	e000      	b.n	800a6d6 <xTaskNotifyStateClear+0x16>
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800a6d8:	f000 fce4 	bl	800b0a4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	d106      	bne.n	800a6f6 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				xReturn = pdPASS;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	60fb      	str	r3, [r7, #12]
 800a6f4:	e001      	b.n	800a6fa <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800a6fa:	f000 fd03 	bl	800b104 <vPortExitCritical>

		return xReturn;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
	}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}
 800a708:	20000b74 	.word	0x20000b74

0800a70c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a716:	4b21      	ldr	r3, [pc, #132]	; (800a79c <prvAddCurrentTaskToDelayedList+0x90>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a71c:	4b20      	ldr	r3, [pc, #128]	; (800a7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	3304      	adds	r3, #4
 800a722:	4618      	mov	r0, r3
 800a724:	f7fd f922 	bl	800796c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a72e:	d10a      	bne.n	800a746 <prvAddCurrentTaskToDelayedList+0x3a>
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d007      	beq.n	800a746 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a736:	4b1a      	ldr	r3, [pc, #104]	; (800a7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3304      	adds	r3, #4
 800a73c:	4619      	mov	r1, r3
 800a73e:	4819      	ldr	r0, [pc, #100]	; (800a7a4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a740:	f7fd f8b7 	bl	80078b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a744:	e026      	b.n	800a794 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a746:	68fa      	ldr	r2, [r7, #12]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4413      	add	r3, r2
 800a74c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a74e:	4b14      	ldr	r3, [pc, #80]	; (800a7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	68ba      	ldr	r2, [r7, #8]
 800a754:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d209      	bcs.n	800a772 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a75e:	4b12      	ldr	r3, [pc, #72]	; (800a7a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	4b0f      	ldr	r3, [pc, #60]	; (800a7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	3304      	adds	r3, #4
 800a768:	4619      	mov	r1, r3
 800a76a:	4610      	mov	r0, r2
 800a76c:	f7fd f8c5 	bl	80078fa <vListInsert>
}
 800a770:	e010      	b.n	800a794 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a772:	4b0e      	ldr	r3, [pc, #56]	; (800a7ac <prvAddCurrentTaskToDelayedList+0xa0>)
 800a774:	681a      	ldr	r2, [r3, #0]
 800a776:	4b0a      	ldr	r3, [pc, #40]	; (800a7a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	3304      	adds	r3, #4
 800a77c:	4619      	mov	r1, r3
 800a77e:	4610      	mov	r0, r2
 800a780:	f7fd f8bb 	bl	80078fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a784:	4b0a      	ldr	r3, [pc, #40]	; (800a7b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68ba      	ldr	r2, [r7, #8]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d202      	bcs.n	800a794 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a78e:	4a08      	ldr	r2, [pc, #32]	; (800a7b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	6013      	str	r3, [r2, #0]
}
 800a794:	bf00      	nop
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	2000104c 	.word	0x2000104c
 800a7a0:	20000b74 	.word	0x20000b74
 800a7a4:	20001034 	.word	0x20001034
 800a7a8:	20001004 	.word	0x20001004
 800a7ac:	20001000 	.word	0x20001000
 800a7b0:	20001068 	.word	0x20001068

0800a7b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b08a      	sub	sp, #40	; 0x28
 800a7b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a7be:	f000 fb07 	bl	800add0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a7c2:	4b1c      	ldr	r3, [pc, #112]	; (800a834 <xTimerCreateTimerTask+0x80>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d021      	beq.n	800a80e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a7d2:	1d3a      	adds	r2, r7, #4
 800a7d4:	f107 0108 	add.w	r1, r7, #8
 800a7d8:	f107 030c 	add.w	r3, r7, #12
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f7fd f821 	bl	8007824 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a7e2:	6879      	ldr	r1, [r7, #4]
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	9202      	str	r2, [sp, #8]
 800a7ea:	9301      	str	r3, [sp, #4]
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	9300      	str	r3, [sp, #0]
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	460a      	mov	r2, r1
 800a7f4:	4910      	ldr	r1, [pc, #64]	; (800a838 <xTimerCreateTimerTask+0x84>)
 800a7f6:	4811      	ldr	r0, [pc, #68]	; (800a83c <xTimerCreateTimerTask+0x88>)
 800a7f8:	f7fe fafa 	bl	8008df0 <xTaskCreateStatic>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	4a10      	ldr	r2, [pc, #64]	; (800a840 <xTimerCreateTimerTask+0x8c>)
 800a800:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a802:	4b0f      	ldr	r3, [pc, #60]	; (800a840 <xTimerCreateTimerTask+0x8c>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d001      	beq.n	800a80e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a80a:	2301      	movs	r3, #1
 800a80c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10a      	bne.n	800a82a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	613b      	str	r3, [r7, #16]
}
 800a826:	bf00      	nop
 800a828:	e7fe      	b.n	800a828 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a82a:	697b      	ldr	r3, [r7, #20]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3718      	adds	r7, #24
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	200010a4 	.word	0x200010a4
 800a838:	0800ce30 	.word	0x0800ce30
 800a83c:	0800a979 	.word	0x0800a979
 800a840:	200010a8 	.word	0x200010a8

0800a844 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b08a      	sub	sp, #40	; 0x28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a852:	2300      	movs	r3, #0
 800a854:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d10a      	bne.n	800a872 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a860:	f383 8811 	msr	BASEPRI, r3
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	f3bf 8f4f 	dsb	sy
 800a86c:	623b      	str	r3, [r7, #32]
}
 800a86e:	bf00      	nop
 800a870:	e7fe      	b.n	800a870 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a872:	4b1a      	ldr	r3, [pc, #104]	; (800a8dc <xTimerGenericCommand+0x98>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d02a      	beq.n	800a8d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a87a:	68bb      	ldr	r3, [r7, #8]
 800a87c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	2b05      	cmp	r3, #5
 800a88a:	dc18      	bgt.n	800a8be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a88c:	f7ff fad0 	bl	8009e30 <xTaskGetSchedulerState>
 800a890:	4603      	mov	r3, r0
 800a892:	2b02      	cmp	r3, #2
 800a894:	d109      	bne.n	800a8aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a896:	4b11      	ldr	r3, [pc, #68]	; (800a8dc <xTimerGenericCommand+0x98>)
 800a898:	6818      	ldr	r0, [r3, #0]
 800a89a:	f107 0110 	add.w	r1, r7, #16
 800a89e:	2300      	movs	r3, #0
 800a8a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8a2:	f7fd f9cb 	bl	8007c3c <xQueueGenericSend>
 800a8a6:	6278      	str	r0, [r7, #36]	; 0x24
 800a8a8:	e012      	b.n	800a8d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a8aa:	4b0c      	ldr	r3, [pc, #48]	; (800a8dc <xTimerGenericCommand+0x98>)
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	f107 0110 	add.w	r1, r7, #16
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f7fd f9c1 	bl	8007c3c <xQueueGenericSend>
 800a8ba:	6278      	str	r0, [r7, #36]	; 0x24
 800a8bc:	e008      	b.n	800a8d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8be:	4b07      	ldr	r3, [pc, #28]	; (800a8dc <xTimerGenericCommand+0x98>)
 800a8c0:	6818      	ldr	r0, [r3, #0]
 800a8c2:	f107 0110 	add.w	r1, r7, #16
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	683a      	ldr	r2, [r7, #0]
 800a8ca:	f7fd fab5 	bl	8007e38 <xQueueGenericSendFromISR>
 800a8ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3728      	adds	r7, #40	; 0x28
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	200010a4 	.word	0x200010a4

0800a8e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b088      	sub	sp, #32
 800a8e4:	af02      	add	r7, sp, #8
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ea:	4b22      	ldr	r3, [pc, #136]	; (800a974 <prvProcessExpiredTimer+0x94>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7fd f837 	bl	800796c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a904:	f003 0304 	and.w	r3, r3, #4
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d022      	beq.n	800a952 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	699a      	ldr	r2, [r3, #24]
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	18d1      	adds	r1, r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	683a      	ldr	r2, [r7, #0]
 800a918:	6978      	ldr	r0, [r7, #20]
 800a91a:	f000 f8d1 	bl	800aac0 <prvInsertTimerInActiveList>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d01f      	beq.n	800a964 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a924:	2300      	movs	r3, #0
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	2300      	movs	r3, #0
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	2100      	movs	r1, #0
 800a92e:	6978      	ldr	r0, [r7, #20]
 800a930:	f7ff ff88 	bl	800a844 <xTimerGenericCommand>
 800a934:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d113      	bne.n	800a964 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a940:	f383 8811 	msr	BASEPRI, r3
 800a944:	f3bf 8f6f 	isb	sy
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	60fb      	str	r3, [r7, #12]
}
 800a94e:	bf00      	nop
 800a950:	e7fe      	b.n	800a950 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a958:	f023 0301 	bic.w	r3, r3, #1
 800a95c:	b2da      	uxtb	r2, r3
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	6a1b      	ldr	r3, [r3, #32]
 800a968:	6978      	ldr	r0, [r7, #20]
 800a96a:	4798      	blx	r3
}
 800a96c:	bf00      	nop
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	2000109c 	.word	0x2000109c

0800a978 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b084      	sub	sp, #16
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a980:	f107 0308 	add.w	r3, r7, #8
 800a984:	4618      	mov	r0, r3
 800a986:	f000 f857 	bl	800aa38 <prvGetNextExpireTime>
 800a98a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	4619      	mov	r1, r3
 800a990:	68f8      	ldr	r0, [r7, #12]
 800a992:	f000 f803 	bl	800a99c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a996:	f000 f8d5 	bl	800ab44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a99a:	e7f1      	b.n	800a980 <prvTimerTask+0x8>

0800a99c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a9a6:	f7fe fce5 	bl	8009374 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9aa:	f107 0308 	add.w	r3, r7, #8
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 f866 	bl	800aa80 <prvSampleTimeNow>
 800a9b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d130      	bne.n	800aa1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10a      	bne.n	800a9d8 <prvProcessTimerOrBlockTask+0x3c>
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d806      	bhi.n	800a9d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a9ca:	f7fe fce1 	bl	8009390 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a9ce:	68f9      	ldr	r1, [r7, #12]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f7ff ff85 	bl	800a8e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a9d6:	e024      	b.n	800aa22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d008      	beq.n	800a9f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9de:	4b13      	ldr	r3, [pc, #76]	; (800aa2c <prvProcessTimerOrBlockTask+0x90>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d101      	bne.n	800a9ec <prvProcessTimerOrBlockTask+0x50>
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e000      	b.n	800a9ee <prvProcessTimerOrBlockTask+0x52>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a9f0:	4b0f      	ldr	r3, [pc, #60]	; (800aa30 <prvProcessTimerOrBlockTask+0x94>)
 800a9f2:	6818      	ldr	r0, [r3, #0]
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	1ad3      	subs	r3, r2, r3
 800a9fa:	683a      	ldr	r2, [r7, #0]
 800a9fc:	4619      	mov	r1, r3
 800a9fe:	f7fd fe81 	bl	8008704 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800aa02:	f7fe fcc5 	bl	8009390 <xTaskResumeAll>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10a      	bne.n	800aa22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aa0c:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <prvProcessTimerOrBlockTask+0x98>)
 800aa0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa12:	601a      	str	r2, [r3, #0]
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	f3bf 8f6f 	isb	sy
}
 800aa1c:	e001      	b.n	800aa22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800aa1e:	f7fe fcb7 	bl	8009390 <xTaskResumeAll>
}
 800aa22:	bf00      	nop
 800aa24:	3710      	adds	r7, #16
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	200010a0 	.word	0x200010a0
 800aa30:	200010a4 	.word	0x200010a4
 800aa34:	e000ed04 	.word	0xe000ed04

0800aa38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa40:	4b0e      	ldr	r3, [pc, #56]	; (800aa7c <prvGetNextExpireTime+0x44>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d101      	bne.n	800aa4e <prvGetNextExpireTime+0x16>
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	e000      	b.n	800aa50 <prvGetNextExpireTime+0x18>
 800aa4e:	2200      	movs	r2, #0
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d105      	bne.n	800aa68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa5c:	4b07      	ldr	r3, [pc, #28]	; (800aa7c <prvGetNextExpireTime+0x44>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	60fb      	str	r3, [r7, #12]
 800aa66:	e001      	b.n	800aa6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3714      	adds	r7, #20
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop
 800aa7c:	2000109c 	.word	0x2000109c

0800aa80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aa88:	f7fe fd20 	bl	80094cc <xTaskGetTickCount>
 800aa8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aa8e:	4b0b      	ldr	r3, [pc, #44]	; (800aabc <prvSampleTimeNow+0x3c>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	68fa      	ldr	r2, [r7, #12]
 800aa94:	429a      	cmp	r2, r3
 800aa96:	d205      	bcs.n	800aaa4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aa98:	f000 f936 	bl	800ad08 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	601a      	str	r2, [r3, #0]
 800aaa2:	e002      	b.n	800aaaa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aaaa:	4a04      	ldr	r2, [pc, #16]	; (800aabc <prvSampleTimeNow+0x3c>)
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aab0:	68fb      	ldr	r3, [r7, #12]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3710      	adds	r7, #16
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	200010ac 	.word	0x200010ac

0800aac0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b086      	sub	sp, #24
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
 800aacc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800aace:	2300      	movs	r3, #0
 800aad0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d812      	bhi.n	800ab0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	1ad2      	subs	r2, r2, r3
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	699b      	ldr	r3, [r3, #24]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d302      	bcc.n	800aafa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	617b      	str	r3, [r7, #20]
 800aaf8:	e01b      	b.n	800ab32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aafa:	4b10      	ldr	r3, [pc, #64]	; (800ab3c <prvInsertTimerInActiveList+0x7c>)
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3304      	adds	r3, #4
 800ab02:	4619      	mov	r1, r3
 800ab04:	4610      	mov	r0, r2
 800ab06:	f7fc fef8 	bl	80078fa <vListInsert>
 800ab0a:	e012      	b.n	800ab32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ab0c:	687a      	ldr	r2, [r7, #4]
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d206      	bcs.n	800ab22 <prvInsertTimerInActiveList+0x62>
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d302      	bcc.n	800ab22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	617b      	str	r3, [r7, #20]
 800ab20:	e007      	b.n	800ab32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab22:	4b07      	ldr	r3, [pc, #28]	; (800ab40 <prvInsertTimerInActiveList+0x80>)
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	3304      	adds	r3, #4
 800ab2a:	4619      	mov	r1, r3
 800ab2c:	4610      	mov	r0, r2
 800ab2e:	f7fc fee4 	bl	80078fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ab32:	697b      	ldr	r3, [r7, #20]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	200010a0 	.word	0x200010a0
 800ab40:	2000109c 	.word	0x2000109c

0800ab44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b08e      	sub	sp, #56	; 0x38
 800ab48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab4a:	e0ca      	b.n	800ace2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	da18      	bge.n	800ab84 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ab52:	1d3b      	adds	r3, r7, #4
 800ab54:	3304      	adds	r3, #4
 800ab56:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10a      	bne.n	800ab74 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	61fb      	str	r3, [r7, #28]
}
 800ab70:	bf00      	nop
 800ab72:	e7fe      	b.n	800ab72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ab74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab7a:	6850      	ldr	r0, [r2, #4]
 800ab7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab7e:	6892      	ldr	r2, [r2, #8]
 800ab80:	4611      	mov	r1, r2
 800ab82:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f2c0 80aa 	blt.w	800ace0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab92:	695b      	ldr	r3, [r3, #20]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d004      	beq.n	800aba2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	f7fc fee5 	bl	800796c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aba2:	463b      	mov	r3, r7
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7ff ff6b 	bl	800aa80 <prvSampleTimeNow>
 800abaa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b09      	cmp	r3, #9
 800abb0:	f200 8097 	bhi.w	800ace2 <prvProcessReceivedCommands+0x19e>
 800abb4:	a201      	add	r2, pc, #4	; (adr r2, 800abbc <prvProcessReceivedCommands+0x78>)
 800abb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abba:	bf00      	nop
 800abbc:	0800abe5 	.word	0x0800abe5
 800abc0:	0800abe5 	.word	0x0800abe5
 800abc4:	0800abe5 	.word	0x0800abe5
 800abc8:	0800ac59 	.word	0x0800ac59
 800abcc:	0800ac6d 	.word	0x0800ac6d
 800abd0:	0800acb7 	.word	0x0800acb7
 800abd4:	0800abe5 	.word	0x0800abe5
 800abd8:	0800abe5 	.word	0x0800abe5
 800abdc:	0800ac59 	.word	0x0800ac59
 800abe0:	0800ac6d 	.word	0x0800ac6d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800abe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abea:	f043 0301 	orr.w	r3, r3, #1
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfa:	699b      	ldr	r3, [r3, #24]
 800abfc:	18d1      	adds	r1, r2, r3
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac04:	f7ff ff5c 	bl	800aac0 <prvInsertTimerInActiveList>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d069      	beq.n	800ace2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac1c:	f003 0304 	and.w	r3, r3, #4
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d05e      	beq.n	800ace2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac28:	699b      	ldr	r3, [r3, #24]
 800ac2a:	441a      	add	r2, r3
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	2300      	movs	r3, #0
 800ac32:	2100      	movs	r1, #0
 800ac34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac36:	f7ff fe05 	bl	800a844 <xTimerGenericCommand>
 800ac3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ac3c:	6a3b      	ldr	r3, [r7, #32]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d14f      	bne.n	800ace2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac46:	f383 8811 	msr	BASEPRI, r3
 800ac4a:	f3bf 8f6f 	isb	sy
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	61bb      	str	r3, [r7, #24]
}
 800ac54:	bf00      	nop
 800ac56:	e7fe      	b.n	800ac56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac5e:	f023 0301 	bic.w	r3, r3, #1
 800ac62:	b2da      	uxtb	r2, r3
 800ac64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ac6a:	e03a      	b.n	800ace2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac72:	f043 0301 	orr.w	r3, r3, #1
 800ac76:	b2da      	uxtb	r2, r3
 800ac78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac7e:	68ba      	ldr	r2, [r7, #8]
 800ac80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac82:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac86:	699b      	ldr	r3, [r3, #24]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10a      	bne.n	800aca2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ac8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac90:	f383 8811 	msr	BASEPRI, r3
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	617b      	str	r3, [r7, #20]
}
 800ac9e:	bf00      	nop
 800aca0:	e7fe      	b.n	800aca0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	699a      	ldr	r2, [r3, #24]
 800aca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca8:	18d1      	adds	r1, r2, r3
 800acaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acb0:	f7ff ff06 	bl	800aac0 <prvInsertTimerInActiveList>
					break;
 800acb4:	e015      	b.n	800ace2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800acb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acbc:	f003 0302 	and.w	r3, r3, #2
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d103      	bne.n	800accc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800acc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acc6:	f000 fbdb 	bl	800b480 <vPortFree>
 800acca:	e00a      	b.n	800ace2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800accc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800acd2:	f023 0301 	bic.w	r3, r3, #1
 800acd6:	b2da      	uxtb	r2, r3
 800acd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800acde:	e000      	b.n	800ace2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ace0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ace2:	4b08      	ldr	r3, [pc, #32]	; (800ad04 <prvProcessReceivedCommands+0x1c0>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	1d39      	adds	r1, r7, #4
 800ace8:	2200      	movs	r2, #0
 800acea:	4618      	mov	r0, r3
 800acec:	f7fd f9cc 	bl	8008088 <xQueueReceive>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f47f af2a 	bne.w	800ab4c <prvProcessReceivedCommands+0x8>
	}
}
 800acf8:	bf00      	nop
 800acfa:	bf00      	nop
 800acfc:	3730      	adds	r7, #48	; 0x30
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	200010a4 	.word	0x200010a4

0800ad08 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b088      	sub	sp, #32
 800ad0c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad0e:	e048      	b.n	800ada2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ad10:	4b2d      	ldr	r3, [pc, #180]	; (800adc8 <prvSwitchTimerLists+0xc0>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad1a:	4b2b      	ldr	r3, [pc, #172]	; (800adc8 <prvSwitchTimerLists+0xc0>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	68db      	ldr	r3, [r3, #12]
 800ad22:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	3304      	adds	r3, #4
 800ad28:	4618      	mov	r0, r3
 800ad2a:	f7fc fe1f 	bl	800796c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	6a1b      	ldr	r3, [r3, #32]
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad3c:	f003 0304 	and.w	r3, r3, #4
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d02e      	beq.n	800ada2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	699b      	ldr	r3, [r3, #24]
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d90e      	bls.n	800ad74 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	68ba      	ldr	r2, [r7, #8]
 800ad5a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad62:	4b19      	ldr	r3, [pc, #100]	; (800adc8 <prvSwitchTimerLists+0xc0>)
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3304      	adds	r3, #4
 800ad6a:	4619      	mov	r1, r3
 800ad6c:	4610      	mov	r0, r2
 800ad6e:	f7fc fdc4 	bl	80078fa <vListInsert>
 800ad72:	e016      	b.n	800ada2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad74:	2300      	movs	r3, #0
 800ad76:	9300      	str	r3, [sp, #0]
 800ad78:	2300      	movs	r3, #0
 800ad7a:	693a      	ldr	r2, [r7, #16]
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	68f8      	ldr	r0, [r7, #12]
 800ad80:	f7ff fd60 	bl	800a844 <xTimerGenericCommand>
 800ad84:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10a      	bne.n	800ada2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	603b      	str	r3, [r7, #0]
}
 800ad9e:	bf00      	nop
 800ada0:	e7fe      	b.n	800ada0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ada2:	4b09      	ldr	r3, [pc, #36]	; (800adc8 <prvSwitchTimerLists+0xc0>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d1b1      	bne.n	800ad10 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800adac:	4b06      	ldr	r3, [pc, #24]	; (800adc8 <prvSwitchTimerLists+0xc0>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800adb2:	4b06      	ldr	r3, [pc, #24]	; (800adcc <prvSwitchTimerLists+0xc4>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a04      	ldr	r2, [pc, #16]	; (800adc8 <prvSwitchTimerLists+0xc0>)
 800adb8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800adba:	4a04      	ldr	r2, [pc, #16]	; (800adcc <prvSwitchTimerLists+0xc4>)
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	6013      	str	r3, [r2, #0]
}
 800adc0:	bf00      	nop
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	2000109c 	.word	0x2000109c
 800adcc:	200010a0 	.word	0x200010a0

0800add0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b082      	sub	sp, #8
 800add4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800add6:	f000 f965 	bl	800b0a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800adda:	4b15      	ldr	r3, [pc, #84]	; (800ae30 <prvCheckForValidListAndQueue+0x60>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d120      	bne.n	800ae24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ade2:	4814      	ldr	r0, [pc, #80]	; (800ae34 <prvCheckForValidListAndQueue+0x64>)
 800ade4:	f7fc fd38 	bl	8007858 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ade8:	4813      	ldr	r0, [pc, #76]	; (800ae38 <prvCheckForValidListAndQueue+0x68>)
 800adea:	f7fc fd35 	bl	8007858 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800adee:	4b13      	ldr	r3, [pc, #76]	; (800ae3c <prvCheckForValidListAndQueue+0x6c>)
 800adf0:	4a10      	ldr	r2, [pc, #64]	; (800ae34 <prvCheckForValidListAndQueue+0x64>)
 800adf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800adf4:	4b12      	ldr	r3, [pc, #72]	; (800ae40 <prvCheckForValidListAndQueue+0x70>)
 800adf6:	4a10      	ldr	r2, [pc, #64]	; (800ae38 <prvCheckForValidListAndQueue+0x68>)
 800adf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800adfa:	2300      	movs	r3, #0
 800adfc:	9300      	str	r3, [sp, #0]
 800adfe:	4b11      	ldr	r3, [pc, #68]	; (800ae44 <prvCheckForValidListAndQueue+0x74>)
 800ae00:	4a11      	ldr	r2, [pc, #68]	; (800ae48 <prvCheckForValidListAndQueue+0x78>)
 800ae02:	2110      	movs	r1, #16
 800ae04:	200a      	movs	r0, #10
 800ae06:	f7fc fe43 	bl	8007a90 <xQueueGenericCreateStatic>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	4a08      	ldr	r2, [pc, #32]	; (800ae30 <prvCheckForValidListAndQueue+0x60>)
 800ae0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ae10:	4b07      	ldr	r3, [pc, #28]	; (800ae30 <prvCheckForValidListAndQueue+0x60>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d005      	beq.n	800ae24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ae18:	4b05      	ldr	r3, [pc, #20]	; (800ae30 <prvCheckForValidListAndQueue+0x60>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	490b      	ldr	r1, [pc, #44]	; (800ae4c <prvCheckForValidListAndQueue+0x7c>)
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7fd fc46 	bl	80086b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae24:	f000 f96e 	bl	800b104 <vPortExitCritical>
}
 800ae28:	bf00      	nop
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	200010a4 	.word	0x200010a4
 800ae34:	20001074 	.word	0x20001074
 800ae38:	20001088 	.word	0x20001088
 800ae3c:	2000109c 	.word	0x2000109c
 800ae40:	200010a0 	.word	0x200010a0
 800ae44:	20001150 	.word	0x20001150
 800ae48:	200010b0 	.word	0x200010b0
 800ae4c:	0800ce38 	.word	0x0800ce38

0800ae50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	3b04      	subs	r3, #4
 800ae60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ae68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	3b04      	subs	r3, #4
 800ae6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	f023 0201 	bic.w	r2, r3, #1
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	3b04      	subs	r3, #4
 800ae7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ae80:	4a0c      	ldr	r2, [pc, #48]	; (800aeb4 <pxPortInitialiseStack+0x64>)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	3b14      	subs	r3, #20
 800ae8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ae8c:	687a      	ldr	r2, [r7, #4]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	3b04      	subs	r3, #4
 800ae96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f06f 0202 	mvn.w	r2, #2
 800ae9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	3b20      	subs	r3, #32
 800aea4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800aea6:	68fb      	ldr	r3, [r7, #12]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	0800aeb9 	.word	0x0800aeb9

0800aeb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b085      	sub	sp, #20
 800aebc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800aec2:	4b12      	ldr	r3, [pc, #72]	; (800af0c <prvTaskExitError+0x54>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aeca:	d00a      	beq.n	800aee2 <prvTaskExitError+0x2a>
	__asm volatile
 800aecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed0:	f383 8811 	msr	BASEPRI, r3
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	60fb      	str	r3, [r7, #12]
}
 800aede:	bf00      	nop
 800aee0:	e7fe      	b.n	800aee0 <prvTaskExitError+0x28>
	__asm volatile
 800aee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee6:	f383 8811 	msr	BASEPRI, r3
 800aeea:	f3bf 8f6f 	isb	sy
 800aeee:	f3bf 8f4f 	dsb	sy
 800aef2:	60bb      	str	r3, [r7, #8]
}
 800aef4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800aef6:	bf00      	nop
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d0fc      	beq.n	800aef8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aefe:	bf00      	nop
 800af00:	bf00      	nop
 800af02:	3714      	adds	r7, #20
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	200000a4 	.word	0x200000a4

0800af10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800af10:	4b07      	ldr	r3, [pc, #28]	; (800af30 <pxCurrentTCBConst2>)
 800af12:	6819      	ldr	r1, [r3, #0]
 800af14:	6808      	ldr	r0, [r1, #0]
 800af16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1a:	f380 8809 	msr	PSP, r0
 800af1e:	f3bf 8f6f 	isb	sy
 800af22:	f04f 0000 	mov.w	r0, #0
 800af26:	f380 8811 	msr	BASEPRI, r0
 800af2a:	4770      	bx	lr
 800af2c:	f3af 8000 	nop.w

0800af30 <pxCurrentTCBConst2>:
 800af30:	20000b74 	.word	0x20000b74
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800af34:	bf00      	nop
 800af36:	bf00      	nop

0800af38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800af38:	4808      	ldr	r0, [pc, #32]	; (800af5c <prvPortStartFirstTask+0x24>)
 800af3a:	6800      	ldr	r0, [r0, #0]
 800af3c:	6800      	ldr	r0, [r0, #0]
 800af3e:	f380 8808 	msr	MSP, r0
 800af42:	f04f 0000 	mov.w	r0, #0
 800af46:	f380 8814 	msr	CONTROL, r0
 800af4a:	b662      	cpsie	i
 800af4c:	b661      	cpsie	f
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	df00      	svc	0
 800af58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800af5a:	bf00      	nop
 800af5c:	e000ed08 	.word	0xe000ed08

0800af60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af66:	4b46      	ldr	r3, [pc, #280]	; (800b080 <xPortStartScheduler+0x120>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4a46      	ldr	r2, [pc, #280]	; (800b084 <xPortStartScheduler+0x124>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d10a      	bne.n	800af86 <xPortStartScheduler+0x26>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	613b      	str	r3, [r7, #16]
}
 800af82:	bf00      	nop
 800af84:	e7fe      	b.n	800af84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af86:	4b3e      	ldr	r3, [pc, #248]	; (800b080 <xPortStartScheduler+0x120>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a3f      	ldr	r2, [pc, #252]	; (800b088 <xPortStartScheduler+0x128>)
 800af8c:	4293      	cmp	r3, r2
 800af8e:	d10a      	bne.n	800afa6 <xPortStartScheduler+0x46>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af94:	f383 8811 	msr	BASEPRI, r3
 800af98:	f3bf 8f6f 	isb	sy
 800af9c:	f3bf 8f4f 	dsb	sy
 800afa0:	60fb      	str	r3, [r7, #12]
}
 800afa2:	bf00      	nop
 800afa4:	e7fe      	b.n	800afa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800afa6:	4b39      	ldr	r3, [pc, #228]	; (800b08c <xPortStartScheduler+0x12c>)
 800afa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	22ff      	movs	r2, #255	; 0xff
 800afb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800afc0:	78fb      	ldrb	r3, [r7, #3]
 800afc2:	b2db      	uxtb	r3, r3
 800afc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	4b31      	ldr	r3, [pc, #196]	; (800b090 <xPortStartScheduler+0x130>)
 800afcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800afce:	4b31      	ldr	r3, [pc, #196]	; (800b094 <xPortStartScheduler+0x134>)
 800afd0:	2207      	movs	r2, #7
 800afd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afd4:	e009      	b.n	800afea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800afd6:	4b2f      	ldr	r3, [pc, #188]	; (800b094 <xPortStartScheduler+0x134>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3b01      	subs	r3, #1
 800afdc:	4a2d      	ldr	r2, [pc, #180]	; (800b094 <xPortStartScheduler+0x134>)
 800afde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800afe0:	78fb      	ldrb	r3, [r7, #3]
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	005b      	lsls	r3, r3, #1
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afea:	78fb      	ldrb	r3, [r7, #3]
 800afec:	b2db      	uxtb	r3, r3
 800afee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aff2:	2b80      	cmp	r3, #128	; 0x80
 800aff4:	d0ef      	beq.n	800afd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aff6:	4b27      	ldr	r3, [pc, #156]	; (800b094 <xPortStartScheduler+0x134>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f1c3 0307 	rsb	r3, r3, #7
 800affe:	2b04      	cmp	r3, #4
 800b000:	d00a      	beq.n	800b018 <xPortStartScheduler+0xb8>
	__asm volatile
 800b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b006:	f383 8811 	msr	BASEPRI, r3
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	60bb      	str	r3, [r7, #8]
}
 800b014:	bf00      	nop
 800b016:	e7fe      	b.n	800b016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b018:	4b1e      	ldr	r3, [pc, #120]	; (800b094 <xPortStartScheduler+0x134>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	021b      	lsls	r3, r3, #8
 800b01e:	4a1d      	ldr	r2, [pc, #116]	; (800b094 <xPortStartScheduler+0x134>)
 800b020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b022:	4b1c      	ldr	r3, [pc, #112]	; (800b094 <xPortStartScheduler+0x134>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b02a:	4a1a      	ldr	r2, [pc, #104]	; (800b094 <xPortStartScheduler+0x134>)
 800b02c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	b2da      	uxtb	r2, r3
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b036:	4b18      	ldr	r3, [pc, #96]	; (800b098 <xPortStartScheduler+0x138>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a17      	ldr	r2, [pc, #92]	; (800b098 <xPortStartScheduler+0x138>)
 800b03c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b042:	4b15      	ldr	r3, [pc, #84]	; (800b098 <xPortStartScheduler+0x138>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a14      	ldr	r2, [pc, #80]	; (800b098 <xPortStartScheduler+0x138>)
 800b048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b04c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b04e:	f000 f8dd 	bl	800b20c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b052:	4b12      	ldr	r3, [pc, #72]	; (800b09c <xPortStartScheduler+0x13c>)
 800b054:	2200      	movs	r2, #0
 800b056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b058:	f000 f8fc 	bl	800b254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b05c:	4b10      	ldr	r3, [pc, #64]	; (800b0a0 <xPortStartScheduler+0x140>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a0f      	ldr	r2, [pc, #60]	; (800b0a0 <xPortStartScheduler+0x140>)
 800b062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b068:	f7ff ff66 	bl	800af38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b06c:	f7fe fb86 	bl	800977c <vTaskSwitchContext>
	prvTaskExitError();
 800b070:	f7ff ff22 	bl	800aeb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3718      	adds	r7, #24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	e000ed00 	.word	0xe000ed00
 800b084:	410fc271 	.word	0x410fc271
 800b088:	410fc270 	.word	0x410fc270
 800b08c:	e000e400 	.word	0xe000e400
 800b090:	200011a0 	.word	0x200011a0
 800b094:	200011a4 	.word	0x200011a4
 800b098:	e000ed20 	.word	0xe000ed20
 800b09c:	200000a4 	.word	0x200000a4
 800b0a0:	e000ef34 	.word	0xe000ef34

0800b0a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
	__asm volatile
 800b0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ae:	f383 8811 	msr	BASEPRI, r3
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	607b      	str	r3, [r7, #4]
}
 800b0bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b0be:	4b0f      	ldr	r3, [pc, #60]	; (800b0fc <vPortEnterCritical+0x58>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	4a0d      	ldr	r2, [pc, #52]	; (800b0fc <vPortEnterCritical+0x58>)
 800b0c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b0c8:	4b0c      	ldr	r3, [pc, #48]	; (800b0fc <vPortEnterCritical+0x58>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	2b01      	cmp	r3, #1
 800b0ce:	d10f      	bne.n	800b0f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b0d0:	4b0b      	ldr	r3, [pc, #44]	; (800b100 <vPortEnterCritical+0x5c>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d00a      	beq.n	800b0f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800b0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0de:	f383 8811 	msr	BASEPRI, r3
 800b0e2:	f3bf 8f6f 	isb	sy
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	603b      	str	r3, [r7, #0]
}
 800b0ec:	bf00      	nop
 800b0ee:	e7fe      	b.n	800b0ee <vPortEnterCritical+0x4a>
	}
}
 800b0f0:	bf00      	nop
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr
 800b0fc:	200000a4 	.word	0x200000a4
 800b100:	e000ed04 	.word	0xe000ed04

0800b104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b104:	b480      	push	{r7}
 800b106:	b083      	sub	sp, #12
 800b108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b10a:	4b12      	ldr	r3, [pc, #72]	; (800b154 <vPortExitCritical+0x50>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10a      	bne.n	800b128 <vPortExitCritical+0x24>
	__asm volatile
 800b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	607b      	str	r3, [r7, #4]
}
 800b124:	bf00      	nop
 800b126:	e7fe      	b.n	800b126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b128:	4b0a      	ldr	r3, [pc, #40]	; (800b154 <vPortExitCritical+0x50>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	4a09      	ldr	r2, [pc, #36]	; (800b154 <vPortExitCritical+0x50>)
 800b130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b132:	4b08      	ldr	r3, [pc, #32]	; (800b154 <vPortExitCritical+0x50>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d105      	bne.n	800b146 <vPortExitCritical+0x42>
 800b13a:	2300      	movs	r3, #0
 800b13c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	f383 8811 	msr	BASEPRI, r3
}
 800b144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b146:	bf00      	nop
 800b148:	370c      	adds	r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
 800b152:	bf00      	nop
 800b154:	200000a4 	.word	0x200000a4
	...

0800b160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b160:	f3ef 8009 	mrs	r0, PSP
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	4b15      	ldr	r3, [pc, #84]	; (800b1c0 <pxCurrentTCBConst>)
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	f01e 0f10 	tst.w	lr, #16
 800b170:	bf08      	it	eq
 800b172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17a:	6010      	str	r0, [r2, #0]
 800b17c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b180:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b184:	f380 8811 	msr	BASEPRI, r0
 800b188:	f3bf 8f4f 	dsb	sy
 800b18c:	f3bf 8f6f 	isb	sy
 800b190:	f7fe faf4 	bl	800977c <vTaskSwitchContext>
 800b194:	f04f 0000 	mov.w	r0, #0
 800b198:	f380 8811 	msr	BASEPRI, r0
 800b19c:	bc09      	pop	{r0, r3}
 800b19e:	6819      	ldr	r1, [r3, #0]
 800b1a0:	6808      	ldr	r0, [r1, #0]
 800b1a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a6:	f01e 0f10 	tst.w	lr, #16
 800b1aa:	bf08      	it	eq
 800b1ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b1b0:	f380 8809 	msr	PSP, r0
 800b1b4:	f3bf 8f6f 	isb	sy
 800b1b8:	4770      	bx	lr
 800b1ba:	bf00      	nop
 800b1bc:	f3af 8000 	nop.w

0800b1c0 <pxCurrentTCBConst>:
 800b1c0:	20000b74 	.word	0x20000b74
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b1c4:	bf00      	nop
 800b1c6:	bf00      	nop

0800b1c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b082      	sub	sp, #8
 800b1cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b1ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d2:	f383 8811 	msr	BASEPRI, r3
 800b1d6:	f3bf 8f6f 	isb	sy
 800b1da:	f3bf 8f4f 	dsb	sy
 800b1de:	607b      	str	r3, [r7, #4]
}
 800b1e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b1e2:	f7fe fa11 	bl	8009608 <xTaskIncrementTick>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d003      	beq.n	800b1f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b1ec:	4b06      	ldr	r3, [pc, #24]	; (800b208 <xPortSysTickHandler+0x40>)
 800b1ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1f2:	601a      	str	r2, [r3, #0]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	f383 8811 	msr	BASEPRI, r3
}
 800b1fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b200:	bf00      	nop
 800b202:	3708      	adds	r7, #8
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	e000ed04 	.word	0xe000ed04

0800b20c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b20c:	b480      	push	{r7}
 800b20e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b210:	4b0b      	ldr	r3, [pc, #44]	; (800b240 <vPortSetupTimerInterrupt+0x34>)
 800b212:	2200      	movs	r2, #0
 800b214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b216:	4b0b      	ldr	r3, [pc, #44]	; (800b244 <vPortSetupTimerInterrupt+0x38>)
 800b218:	2200      	movs	r2, #0
 800b21a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b21c:	4b0a      	ldr	r3, [pc, #40]	; (800b248 <vPortSetupTimerInterrupt+0x3c>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	4a0a      	ldr	r2, [pc, #40]	; (800b24c <vPortSetupTimerInterrupt+0x40>)
 800b222:	fba2 2303 	umull	r2, r3, r2, r3
 800b226:	099b      	lsrs	r3, r3, #6
 800b228:	4a09      	ldr	r2, [pc, #36]	; (800b250 <vPortSetupTimerInterrupt+0x44>)
 800b22a:	3b01      	subs	r3, #1
 800b22c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b22e:	4b04      	ldr	r3, [pc, #16]	; (800b240 <vPortSetupTimerInterrupt+0x34>)
 800b230:	2207      	movs	r2, #7
 800b232:	601a      	str	r2, [r3, #0]
}
 800b234:	bf00      	nop
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	e000e010 	.word	0xe000e010
 800b244:	e000e018 	.word	0xe000e018
 800b248:	2000000c 	.word	0x2000000c
 800b24c:	10624dd3 	.word	0x10624dd3
 800b250:	e000e014 	.word	0xe000e014

0800b254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b264 <vPortEnableVFP+0x10>
 800b258:	6801      	ldr	r1, [r0, #0]
 800b25a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b25e:	6001      	str	r1, [r0, #0]
 800b260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b262:	bf00      	nop
 800b264:	e000ed88 	.word	0xe000ed88

0800b268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b26e:	f3ef 8305 	mrs	r3, IPSR
 800b272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	2b0f      	cmp	r3, #15
 800b278:	d914      	bls.n	800b2a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b27a:	4a17      	ldr	r2, [pc, #92]	; (800b2d8 <vPortValidateInterruptPriority+0x70>)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4413      	add	r3, r2
 800b280:	781b      	ldrb	r3, [r3, #0]
 800b282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b284:	4b15      	ldr	r3, [pc, #84]	; (800b2dc <vPortValidateInterruptPriority+0x74>)
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	7afa      	ldrb	r2, [r7, #11]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d20a      	bcs.n	800b2a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b292:	f383 8811 	msr	BASEPRI, r3
 800b296:	f3bf 8f6f 	isb	sy
 800b29a:	f3bf 8f4f 	dsb	sy
 800b29e:	607b      	str	r3, [r7, #4]
}
 800b2a0:	bf00      	nop
 800b2a2:	e7fe      	b.n	800b2a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b2a4:	4b0e      	ldr	r3, [pc, #56]	; (800b2e0 <vPortValidateInterruptPriority+0x78>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b2ac:	4b0d      	ldr	r3, [pc, #52]	; (800b2e4 <vPortValidateInterruptPriority+0x7c>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d90a      	bls.n	800b2ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	603b      	str	r3, [r7, #0]
}
 800b2c6:	bf00      	nop
 800b2c8:	e7fe      	b.n	800b2c8 <vPortValidateInterruptPriority+0x60>
	}
 800b2ca:	bf00      	nop
 800b2cc:	3714      	adds	r7, #20
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	e000e3f0 	.word	0xe000e3f0
 800b2dc:	200011a0 	.word	0x200011a0
 800b2e0:	e000ed0c 	.word	0xe000ed0c
 800b2e4:	200011a4 	.word	0x200011a4

0800b2e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b08a      	sub	sp, #40	; 0x28
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b2f4:	f7fe f83e 	bl	8009374 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b2f8:	4b5b      	ldr	r3, [pc, #364]	; (800b468 <pvPortMalloc+0x180>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d101      	bne.n	800b304 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b300:	f000 f920 	bl	800b544 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b304:	4b59      	ldr	r3, [pc, #356]	; (800b46c <pvPortMalloc+0x184>)
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4013      	ands	r3, r2
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f040 8093 	bne.w	800b438 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d01d      	beq.n	800b354 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b318:	2208      	movs	r2, #8
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	4413      	add	r3, r2
 800b31e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f003 0307 	and.w	r3, r3, #7
 800b326:	2b00      	cmp	r3, #0
 800b328:	d014      	beq.n	800b354 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f023 0307 	bic.w	r3, r3, #7
 800b330:	3308      	adds	r3, #8
 800b332:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f003 0307 	and.w	r3, r3, #7
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d00a      	beq.n	800b354 <pvPortMalloc+0x6c>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	f383 8811 	msr	BASEPRI, r3
 800b346:	f3bf 8f6f 	isb	sy
 800b34a:	f3bf 8f4f 	dsb	sy
 800b34e:	617b      	str	r3, [r7, #20]
}
 800b350:	bf00      	nop
 800b352:	e7fe      	b.n	800b352 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d06e      	beq.n	800b438 <pvPortMalloc+0x150>
 800b35a:	4b45      	ldr	r3, [pc, #276]	; (800b470 <pvPortMalloc+0x188>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	429a      	cmp	r2, r3
 800b362:	d869      	bhi.n	800b438 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b364:	4b43      	ldr	r3, [pc, #268]	; (800b474 <pvPortMalloc+0x18c>)
 800b366:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b368:	4b42      	ldr	r3, [pc, #264]	; (800b474 <pvPortMalloc+0x18c>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b36e:	e004      	b.n	800b37a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	429a      	cmp	r2, r3
 800b382:	d903      	bls.n	800b38c <pvPortMalloc+0xa4>
 800b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1f1      	bne.n	800b370 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b38c:	4b36      	ldr	r3, [pc, #216]	; (800b468 <pvPortMalloc+0x180>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b392:	429a      	cmp	r2, r3
 800b394:	d050      	beq.n	800b438 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b396:	6a3b      	ldr	r3, [r7, #32]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	2208      	movs	r2, #8
 800b39c:	4413      	add	r3, r2
 800b39e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	6a3b      	ldr	r3, [r7, #32]
 800b3a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3aa:	685a      	ldr	r2, [r3, #4]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	1ad2      	subs	r2, r2, r3
 800b3b0:	2308      	movs	r3, #8
 800b3b2:	005b      	lsls	r3, r3, #1
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d91f      	bls.n	800b3f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	4413      	add	r3, r2
 800b3be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	f003 0307 	and.w	r3, r3, #7
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00a      	beq.n	800b3e0 <pvPortMalloc+0xf8>
	__asm volatile
 800b3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	613b      	str	r3, [r7, #16]
}
 800b3dc:	bf00      	nop
 800b3de:	e7fe      	b.n	800b3de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e2:	685a      	ldr	r2, [r3, #4]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	1ad2      	subs	r2, r2, r3
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b3f2:	69b8      	ldr	r0, [r7, #24]
 800b3f4:	f000 f908 	bl	800b608 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b3f8:	4b1d      	ldr	r3, [pc, #116]	; (800b470 <pvPortMalloc+0x188>)
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	4a1b      	ldr	r2, [pc, #108]	; (800b470 <pvPortMalloc+0x188>)
 800b404:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b406:	4b1a      	ldr	r3, [pc, #104]	; (800b470 <pvPortMalloc+0x188>)
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	4b1b      	ldr	r3, [pc, #108]	; (800b478 <pvPortMalloc+0x190>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	429a      	cmp	r2, r3
 800b410:	d203      	bcs.n	800b41a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b412:	4b17      	ldr	r3, [pc, #92]	; (800b470 <pvPortMalloc+0x188>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a18      	ldr	r2, [pc, #96]	; (800b478 <pvPortMalloc+0x190>)
 800b418:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b41c:	685a      	ldr	r2, [r3, #4]
 800b41e:	4b13      	ldr	r3, [pc, #76]	; (800b46c <pvPortMalloc+0x184>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	431a      	orrs	r2, r3
 800b424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b426:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42a:	2200      	movs	r2, #0
 800b42c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b42e:	4b13      	ldr	r3, [pc, #76]	; (800b47c <pvPortMalloc+0x194>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	3301      	adds	r3, #1
 800b434:	4a11      	ldr	r2, [pc, #68]	; (800b47c <pvPortMalloc+0x194>)
 800b436:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b438:	f7fd ffaa 	bl	8009390 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	f003 0307 	and.w	r3, r3, #7
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00a      	beq.n	800b45c <pvPortMalloc+0x174>
	__asm volatile
 800b446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44a:	f383 8811 	msr	BASEPRI, r3
 800b44e:	f3bf 8f6f 	isb	sy
 800b452:	f3bf 8f4f 	dsb	sy
 800b456:	60fb      	str	r3, [r7, #12]
}
 800b458:	bf00      	nop
 800b45a:	e7fe      	b.n	800b45a <pvPortMalloc+0x172>
	return pvReturn;
 800b45c:	69fb      	ldr	r3, [r7, #28]
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3728      	adds	r7, #40	; 0x28
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	200091b0 	.word	0x200091b0
 800b46c:	200091c4 	.word	0x200091c4
 800b470:	200091b4 	.word	0x200091b4
 800b474:	200091a8 	.word	0x200091a8
 800b478:	200091b8 	.word	0x200091b8
 800b47c:	200091bc 	.word	0x200091bc

0800b480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d04d      	beq.n	800b52e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b492:	2308      	movs	r3, #8
 800b494:	425b      	negs	r3, r3
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	4413      	add	r3, r2
 800b49a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	685a      	ldr	r2, [r3, #4]
 800b4a4:	4b24      	ldr	r3, [pc, #144]	; (800b538 <vPortFree+0xb8>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10a      	bne.n	800b4c4 <vPortFree+0x44>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	60fb      	str	r3, [r7, #12]
}
 800b4c0:	bf00      	nop
 800b4c2:	e7fe      	b.n	800b4c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b4c4:	693b      	ldr	r3, [r7, #16]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00a      	beq.n	800b4e2 <vPortFree+0x62>
	__asm volatile
 800b4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d0:	f383 8811 	msr	BASEPRI, r3
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	f3bf 8f4f 	dsb	sy
 800b4dc:	60bb      	str	r3, [r7, #8]
}
 800b4de:	bf00      	nop
 800b4e0:	e7fe      	b.n	800b4e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	685a      	ldr	r2, [r3, #4]
 800b4e6:	4b14      	ldr	r3, [pc, #80]	; (800b538 <vPortFree+0xb8>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d01e      	beq.n	800b52e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d11a      	bne.n	800b52e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	685a      	ldr	r2, [r3, #4]
 800b4fc:	4b0e      	ldr	r3, [pc, #56]	; (800b538 <vPortFree+0xb8>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	43db      	mvns	r3, r3
 800b502:	401a      	ands	r2, r3
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b508:	f7fd ff34 	bl	8009374 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	685a      	ldr	r2, [r3, #4]
 800b510:	4b0a      	ldr	r3, [pc, #40]	; (800b53c <vPortFree+0xbc>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4413      	add	r3, r2
 800b516:	4a09      	ldr	r2, [pc, #36]	; (800b53c <vPortFree+0xbc>)
 800b518:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b51a:	6938      	ldr	r0, [r7, #16]
 800b51c:	f000 f874 	bl	800b608 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b520:	4b07      	ldr	r3, [pc, #28]	; (800b540 <vPortFree+0xc0>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	3301      	adds	r3, #1
 800b526:	4a06      	ldr	r2, [pc, #24]	; (800b540 <vPortFree+0xc0>)
 800b528:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b52a:	f7fd ff31 	bl	8009390 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b52e:	bf00      	nop
 800b530:	3718      	adds	r7, #24
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	200091c4 	.word	0x200091c4
 800b53c:	200091b4 	.word	0x200091b4
 800b540:	200091c0 	.word	0x200091c0

0800b544 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b54a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b54e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b550:	4b27      	ldr	r3, [pc, #156]	; (800b5f0 <prvHeapInit+0xac>)
 800b552:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f003 0307 	and.w	r3, r3, #7
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00c      	beq.n	800b578 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3307      	adds	r3, #7
 800b562:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f023 0307 	bic.w	r3, r3, #7
 800b56a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b56c:	68ba      	ldr	r2, [r7, #8]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	1ad3      	subs	r3, r2, r3
 800b572:	4a1f      	ldr	r2, [pc, #124]	; (800b5f0 <prvHeapInit+0xac>)
 800b574:	4413      	add	r3, r2
 800b576:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b57c:	4a1d      	ldr	r2, [pc, #116]	; (800b5f4 <prvHeapInit+0xb0>)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b582:	4b1c      	ldr	r3, [pc, #112]	; (800b5f4 <prvHeapInit+0xb0>)
 800b584:	2200      	movs	r2, #0
 800b586:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	4413      	add	r3, r2
 800b58e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b590:	2208      	movs	r2, #8
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	1a9b      	subs	r3, r3, r2
 800b596:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f023 0307 	bic.w	r3, r3, #7
 800b59e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	4a15      	ldr	r2, [pc, #84]	; (800b5f8 <prvHeapInit+0xb4>)
 800b5a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b5a6:	4b14      	ldr	r3, [pc, #80]	; (800b5f8 <prvHeapInit+0xb4>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b5ae:	4b12      	ldr	r3, [pc, #72]	; (800b5f8 <prvHeapInit+0xb4>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	1ad2      	subs	r2, r2, r3
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b5c4:	4b0c      	ldr	r3, [pc, #48]	; (800b5f8 <prvHeapInit+0xb4>)
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	4a0a      	ldr	r2, [pc, #40]	; (800b5fc <prvHeapInit+0xb8>)
 800b5d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	4a09      	ldr	r2, [pc, #36]	; (800b600 <prvHeapInit+0xbc>)
 800b5da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b5dc:	4b09      	ldr	r3, [pc, #36]	; (800b604 <prvHeapInit+0xc0>)
 800b5de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b5e2:	601a      	str	r2, [r3, #0]
}
 800b5e4:	bf00      	nop
 800b5e6:	3714      	adds	r7, #20
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr
 800b5f0:	200011a8 	.word	0x200011a8
 800b5f4:	200091a8 	.word	0x200091a8
 800b5f8:	200091b0 	.word	0x200091b0
 800b5fc:	200091b8 	.word	0x200091b8
 800b600:	200091b4 	.word	0x200091b4
 800b604:	200091c4 	.word	0x200091c4

0800b608 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b610:	4b28      	ldr	r3, [pc, #160]	; (800b6b4 <prvInsertBlockIntoFreeList+0xac>)
 800b612:	60fb      	str	r3, [r7, #12]
 800b614:	e002      	b.n	800b61c <prvInsertBlockIntoFreeList+0x14>
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	60fb      	str	r3, [r7, #12]
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	429a      	cmp	r2, r3
 800b624:	d8f7      	bhi.n	800b616 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	68ba      	ldr	r2, [r7, #8]
 800b630:	4413      	add	r3, r2
 800b632:	687a      	ldr	r2, [r7, #4]
 800b634:	429a      	cmp	r2, r3
 800b636:	d108      	bne.n	800b64a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	685a      	ldr	r2, [r3, #4]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	685b      	ldr	r3, [r3, #4]
 800b640:	441a      	add	r2, r3
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	68ba      	ldr	r2, [r7, #8]
 800b654:	441a      	add	r2, r3
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d118      	bne.n	800b690 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	4b15      	ldr	r3, [pc, #84]	; (800b6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	429a      	cmp	r2, r3
 800b668:	d00d      	beq.n	800b686 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	441a      	add	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	601a      	str	r2, [r3, #0]
 800b684:	e008      	b.n	800b698 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b686:	4b0c      	ldr	r3, [pc, #48]	; (800b6b8 <prvInsertBlockIntoFreeList+0xb0>)
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	601a      	str	r2, [r3, #0]
 800b68e:	e003      	b.n	800b698 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b698:	68fa      	ldr	r2, [r7, #12]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d002      	beq.n	800b6a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	687a      	ldr	r2, [r7, #4]
 800b6a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6a6:	bf00      	nop
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	200091a8 	.word	0x200091a8
 800b6b8:	200091b0 	.word	0x200091b0

0800b6bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	4912      	ldr	r1, [pc, #72]	; (800b70c <MX_USB_DEVICE_Init+0x50>)
 800b6c4:	4812      	ldr	r0, [pc, #72]	; (800b710 <MX_USB_DEVICE_Init+0x54>)
 800b6c6:	f7fa fc91 	bl	8005fec <USBD_Init>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b6d0:	f7f5 fabe 	bl	8000c50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b6d4:	490f      	ldr	r1, [pc, #60]	; (800b714 <MX_USB_DEVICE_Init+0x58>)
 800b6d6:	480e      	ldr	r0, [pc, #56]	; (800b710 <MX_USB_DEVICE_Init+0x54>)
 800b6d8:	f7fa fcb8 	bl	800604c <USBD_RegisterClass>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d001      	beq.n	800b6e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b6e2:	f7f5 fab5 	bl	8000c50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b6e6:	490c      	ldr	r1, [pc, #48]	; (800b718 <MX_USB_DEVICE_Init+0x5c>)
 800b6e8:	4809      	ldr	r0, [pc, #36]	; (800b710 <MX_USB_DEVICE_Init+0x54>)
 800b6ea:	f7fa fba9 	bl	8005e40 <USBD_CDC_RegisterInterface>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d001      	beq.n	800b6f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b6f4:	f7f5 faac 	bl	8000c50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b6f8:	4805      	ldr	r0, [pc, #20]	; (800b710 <MX_USB_DEVICE_Init+0x54>)
 800b6fa:	f7fa fcdd 	bl	80060b8 <USBD_Start>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b704:	f7f5 faa4 	bl	8000c50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b708:	bf00      	nop
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	200000bc 	.word	0x200000bc
 800b710:	200091c8 	.word	0x200091c8
 800b714:	20000024 	.word	0x20000024
 800b718:	200000a8 	.word	0x200000a8

0800b71c <init_usb_rtos_obj>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

void init_usb_rtos_obj(void){
 800b71c:	b580      	push	{r7, lr}
 800b71e:	af00      	add	r7, sp, #0
	sem_usb_tx = xSemaphoreCreateBinary();
 800b720:	2203      	movs	r2, #3
 800b722:	2100      	movs	r1, #0
 800b724:	2001      	movs	r0, #1
 800b726:	f7fc fa2b 	bl	8007b80 <xQueueGenericCreate>
 800b72a:	4603      	mov	r3, r0
 800b72c:	4a07      	ldr	r2, [pc, #28]	; (800b74c <init_usb_rtos_obj+0x30>)
 800b72e:	6013      	str	r3, [r2, #0]
	msg_buf_rx = xMessageBufferCreate(768);
 800b730:	2201      	movs	r2, #1
 800b732:	2100      	movs	r1, #0
 800b734:	f44f 7040 	mov.w	r0, #768	; 0x300
 800b738:	f7fd f818 	bl	800876c <xStreamBufferGenericCreate>
 800b73c:	4603      	mov	r3, r0
 800b73e:	4a04      	ldr	r2, [pc, #16]	; (800b750 <init_usb_rtos_obj+0x34>)
 800b740:	6013      	str	r3, [r2, #0]
	usb_on = 1;
 800b742:	4b04      	ldr	r3, [pc, #16]	; (800b754 <init_usb_rtos_obj+0x38>)
 800b744:	2201      	movs	r2, #1
 800b746:	601a      	str	r2, [r3, #0]
}
 800b748:	bf00      	nop
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	2000a4a8 	.word	0x2000a4a8
 800b750:	200094a4 	.word	0x200094a4
 800b754:	2000a4ac 	.word	0x2000a4ac

0800b758 <read_usb_cdc>:
/*
BaseType_t CDC_Receiveq_MS(char *data, TickType_t timeout){
	return xQueueReceive(queue_usb, data, timeout);
}*/

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout){
 800b758:	b580      	push	{r7, lr}
 800b75a:	b084      	sub	sp, #16
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	60b9      	str	r1, [r7, #8]
 800b762:	607a      	str	r2, [r7, #4]
	return xMessageBufferReceive(msg_buf_rx, buffer, buf_len, timeout);
 800b764:	4b06      	ldr	r3, [pc, #24]	; (800b780 <read_usb_cdc+0x28>)
 800b766:	6818      	ldr	r0, [r3, #0]
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	68f9      	ldr	r1, [r7, #12]
 800b76e:	f7fd f939 	bl	80089e4 <xStreamBufferReceive>
 800b772:	4603      	mov	r3, r0
 800b774:	b2db      	uxtb	r3, r3
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	200094a4 	.word	0x200094a4

0800b784 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b788:	2200      	movs	r2, #0
 800b78a:	4905      	ldr	r1, [pc, #20]	; (800b7a0 <CDC_Init_FS+0x1c>)
 800b78c:	4805      	ldr	r0, [pc, #20]	; (800b7a4 <CDC_Init_FS+0x20>)
 800b78e:	f7fa fb71 	bl	8005e74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b792:	4905      	ldr	r1, [pc, #20]	; (800b7a8 <CDC_Init_FS+0x24>)
 800b794:	4803      	ldr	r0, [pc, #12]	; (800b7a4 <CDC_Init_FS+0x20>)
 800b796:	f7fa fb8f 	bl	8005eb8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b79a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	20009ca8 	.word	0x20009ca8
 800b7a4:	200091c8 	.word	0x200091c8
 800b7a8:	200094a8 	.word	0x200094a8

0800b7ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b7b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	6039      	str	r1, [r7, #0]
 800b7c6:	71fb      	strb	r3, [r7, #7]
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  portBASE_TYPE yield = pdFALSE;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	60fb      	str	r3, [r7, #12]
  char data = 0;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	72fb      	strb	r3, [r7, #11]
  switch(cmd)
 800b7d4:	79fb      	ldrb	r3, [r7, #7]
 800b7d6:	2b23      	cmp	r3, #35	; 0x23
 800b7d8:	d85f      	bhi.n	800b89a <CDC_Control_FS+0xde>
 800b7da:	a201      	add	r2, pc, #4	; (adr r2, 800b7e0 <CDC_Control_FS+0x24>)
 800b7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e0:	0800b89b 	.word	0x0800b89b
 800b7e4:	0800b89b 	.word	0x0800b89b
 800b7e8:	0800b89b 	.word	0x0800b89b
 800b7ec:	0800b89b 	.word	0x0800b89b
 800b7f0:	0800b89b 	.word	0x0800b89b
 800b7f4:	0800b89b 	.word	0x0800b89b
 800b7f8:	0800b89b 	.word	0x0800b89b
 800b7fc:	0800b89b 	.word	0x0800b89b
 800b800:	0800b89b 	.word	0x0800b89b
 800b804:	0800b89b 	.word	0x0800b89b
 800b808:	0800b89b 	.word	0x0800b89b
 800b80c:	0800b89b 	.word	0x0800b89b
 800b810:	0800b89b 	.word	0x0800b89b
 800b814:	0800b89b 	.word	0x0800b89b
 800b818:	0800b89b 	.word	0x0800b89b
 800b81c:	0800b89b 	.word	0x0800b89b
 800b820:	0800b89b 	.word	0x0800b89b
 800b824:	0800b89b 	.word	0x0800b89b
 800b828:	0800b89b 	.word	0x0800b89b
 800b82c:	0800b89b 	.word	0x0800b89b
 800b830:	0800b89b 	.word	0x0800b89b
 800b834:	0800b89b 	.word	0x0800b89b
 800b838:	0800b89b 	.word	0x0800b89b
 800b83c:	0800b89b 	.word	0x0800b89b
 800b840:	0800b89b 	.word	0x0800b89b
 800b844:	0800b89b 	.word	0x0800b89b
 800b848:	0800b89b 	.word	0x0800b89b
 800b84c:	0800b89b 	.word	0x0800b89b
 800b850:	0800b89b 	.word	0x0800b89b
 800b854:	0800b89b 	.word	0x0800b89b
 800b858:	0800b89b 	.word	0x0800b89b
 800b85c:	0800b89b 	.word	0x0800b89b
 800b860:	0800b89b 	.word	0x0800b89b
 800b864:	0800b89b 	.word	0x0800b89b
 800b868:	0800b871 	.word	0x0800b871
 800b86c:	0800b89b 	.word	0x0800b89b
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
  	  xMessageBufferSendFromISR(msg_buf_rx, &data, 1, &yield);
 800b870:	4b0e      	ldr	r3, [pc, #56]	; (800b8ac <CDC_Control_FS+0xf0>)
 800b872:	6818      	ldr	r0, [r3, #0]
 800b874:	f107 030c 	add.w	r3, r7, #12
 800b878:	f107 010b 	add.w	r1, r7, #11
 800b87c:	2201      	movs	r2, #1
 800b87e:	f7fd f803 	bl	8008888 <xStreamBufferSendFromISR>
  	  portYIELD_FROM_ISR(yield);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d00a      	beq.n	800b89e <CDC_Control_FS+0xe2>
 800b888:	4b09      	ldr	r3, [pc, #36]	; (800b8b0 <CDC_Control_FS+0xf4>)
 800b88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b88e:	601a      	str	r2, [r3, #0]
 800b890:	f3bf 8f4f 	dsb	sy
 800b894:	f3bf 8f6f 	isb	sy

    break;
 800b898:	e001      	b.n	800b89e <CDC_Control_FS+0xe2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b89a:	bf00      	nop
 800b89c:	e000      	b.n	800b8a0 <CDC_Control_FS+0xe4>
    break;
 800b89e:	bf00      	nop
  }

  return (USBD_OK);
 800b8a0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3710      	adds	r7, #16
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	200094a4 	.word	0x200094a4
 800b8b0:	e000ed04 	.word	0xe000ed04

0800b8b4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	portBASE_TYPE yield = pdFALSE;
 800b8be:	2300      	movs	r3, #0
 800b8c0:	60fb      	str	r3, [r7, #12]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b8c2:	6879      	ldr	r1, [r7, #4]
 800b8c4:	480f      	ldr	r0, [pc, #60]	; (800b904 <CDC_Receive_FS+0x50>)
 800b8c6:	f7fa faf7 	bl	8005eb8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b8ca:	480e      	ldr	r0, [pc, #56]	; (800b904 <CDC_Receive_FS+0x50>)
 800b8cc:	f7fa fb58 	bl	8005f80 <USBD_CDC_ReceivePacket>

	  xMessageBufferSendFromISR(msg_buf_rx, Buf, *Len, &yield);
 800b8d0:	4b0d      	ldr	r3, [pc, #52]	; (800b908 <CDC_Receive_FS+0x54>)
 800b8d2:	6818      	ldr	r0, [r3, #0]
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	f107 030c 	add.w	r3, r7, #12
 800b8dc:	6879      	ldr	r1, [r7, #4]
 800b8de:	f7fc ffd3 	bl	8008888 <xStreamBufferSendFromISR>
	  portYIELD_FROM_ISR(yield);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d007      	beq.n	800b8f8 <CDC_Receive_FS+0x44>
 800b8e8:	4b08      	ldr	r3, [pc, #32]	; (800b90c <CDC_Receive_FS+0x58>)
 800b8ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8ee:	601a      	str	r2, [r3, #0]
 800b8f0:	f3bf 8f4f 	dsb	sy
 800b8f4:	f3bf 8f6f 	isb	sy

	return (USBD_OK);
 800b8f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	200091c8 	.word	0x200091c8
 800b908:	200094a4 	.word	0x200094a4
 800b90c:	e000ed04 	.word	0xe000ed04

0800b910 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	460b      	mov	r3, r1
 800b91a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b91c:	2300      	movs	r3, #0
 800b91e:	73fb      	strb	r3, [r7, #15]
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
	  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
	  xSemaphoreGive(mutex_usb);
  }*/
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b920:	4b10      	ldr	r3, [pc, #64]	; (800b964 <CDC_Transmit_FS+0x54>)
 800b922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b926:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d001      	beq.n	800b936 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b932:	2301      	movs	r3, #1
 800b934:	e012      	b.n	800b95c <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b936:	887b      	ldrh	r3, [r7, #2]
 800b938:	461a      	mov	r2, r3
 800b93a:	6879      	ldr	r1, [r7, #4]
 800b93c:	4809      	ldr	r0, [pc, #36]	; (800b964 <CDC_Transmit_FS+0x54>)
 800b93e:	f7fa fa99 	bl	8005e74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b942:	4808      	ldr	r0, [pc, #32]	; (800b964 <CDC_Transmit_FS+0x54>)
 800b944:	f7fa fad6 	bl	8005ef4 <USBD_CDC_TransmitPacket>
 800b948:	4603      	mov	r3, r0
 800b94a:	73fb      	strb	r3, [r7, #15]
  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 800b94c:	4b06      	ldr	r3, [pc, #24]	; (800b968 <CDC_Transmit_FS+0x58>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b954:	4618      	mov	r0, r3
 800b956:	f7fc fc77 	bl	8008248 <xQueueSemaphoreTake>
  /* USER CODE END 7 */
  return result;
 800b95a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3710      	adds	r7, #16
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	200091c8 	.word	0x200091c8
 800b968:	2000a4a8 	.word	0x2000a4a8

0800b96c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	60f8      	str	r0, [r7, #12]
 800b974:	60b9      	str	r1, [r7, #8]
 800b976:	4613      	mov	r3, r2
 800b978:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b97a:	2300      	movs	r3, #0
 800b97c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 800b97e:	2300      	movs	r3, #0
 800b980:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 800b982:	4b0b      	ldr	r3, [pc, #44]	; (800b9b0 <CDC_TransmitCplt_FS+0x44>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f107 0210 	add.w	r2, r7, #16
 800b98a:	4611      	mov	r1, r2
 800b98c:	4618      	mov	r0, r3
 800b98e:	f7fc faee 	bl	8007f6e <xQueueGiveFromISR>
  portYIELD_FROM_ISR(&tmp);
 800b992:	4b08      	ldr	r3, [pc, #32]	; (800b9b4 <CDC_TransmitCplt_FS+0x48>)
 800b994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b998:	601a      	str	r2, [r3, #0]
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 800b9a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3718      	adds	r7, #24
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	2000a4a8 	.word	0x2000a4a8
 800b9b4:	e000ed04 	.word	0xe000ed04

0800b9b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	4603      	mov	r3, r0
 800b9c0:	6039      	str	r1, [r7, #0]
 800b9c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	2212      	movs	r2, #18
 800b9c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b9ca:	4b03      	ldr	r3, [pc, #12]	; (800b9d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	370c      	adds	r7, #12
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d6:	4770      	bx	lr
 800b9d8:	200000d8 	.word	0x200000d8

0800b9dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	6039      	str	r1, [r7, #0]
 800b9e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	2204      	movs	r2, #4
 800b9ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b9ee:	4b03      	ldr	r3, [pc, #12]	; (800b9fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr
 800b9fc:	200000ec 	.word	0x200000ec

0800ba00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b082      	sub	sp, #8
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	4603      	mov	r3, r0
 800ba08:	6039      	str	r1, [r7, #0]
 800ba0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ba0c:	79fb      	ldrb	r3, [r7, #7]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d105      	bne.n	800ba1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	4907      	ldr	r1, [pc, #28]	; (800ba34 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba16:	4808      	ldr	r0, [pc, #32]	; (800ba38 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba18:	f7fb fcfa 	bl	8007410 <USBD_GetString>
 800ba1c:	e004      	b.n	800ba28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ba1e:	683a      	ldr	r2, [r7, #0]
 800ba20:	4904      	ldr	r1, [pc, #16]	; (800ba34 <USBD_FS_ProductStrDescriptor+0x34>)
 800ba22:	4805      	ldr	r0, [pc, #20]	; (800ba38 <USBD_FS_ProductStrDescriptor+0x38>)
 800ba24:	f7fb fcf4 	bl	8007410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ba28:	4b02      	ldr	r3, [pc, #8]	; (800ba34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	2000a4b0 	.word	0x2000a4b0
 800ba38:	0800ce40 	.word	0x0800ce40

0800ba3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	4603      	mov	r3, r0
 800ba44:	6039      	str	r1, [r7, #0]
 800ba46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	4904      	ldr	r1, [pc, #16]	; (800ba5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ba4c:	4804      	ldr	r0, [pc, #16]	; (800ba60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ba4e:	f7fb fcdf 	bl	8007410 <USBD_GetString>
  return USBD_StrDesc;
 800ba52:	4b02      	ldr	r3, [pc, #8]	; (800ba5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	2000a4b0 	.word	0x2000a4b0
 800ba60:	0800ce58 	.word	0x0800ce58

0800ba64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	6039      	str	r1, [r7, #0]
 800ba6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	221a      	movs	r2, #26
 800ba74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ba76:	f000 f843 	bl	800bb00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ba7a:	4b02      	ldr	r3, [pc, #8]	; (800ba84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3708      	adds	r7, #8
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	200000f0 	.word	0x200000f0

0800ba88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	4603      	mov	r3, r0
 800ba90:	6039      	str	r1, [r7, #0]
 800ba92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d105      	bne.n	800baa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ba9a:	683a      	ldr	r2, [r7, #0]
 800ba9c:	4907      	ldr	r1, [pc, #28]	; (800babc <USBD_FS_ConfigStrDescriptor+0x34>)
 800ba9e:	4808      	ldr	r0, [pc, #32]	; (800bac0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800baa0:	f7fb fcb6 	bl	8007410 <USBD_GetString>
 800baa4:	e004      	b.n	800bab0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800baa6:	683a      	ldr	r2, [r7, #0]
 800baa8:	4904      	ldr	r1, [pc, #16]	; (800babc <USBD_FS_ConfigStrDescriptor+0x34>)
 800baaa:	4805      	ldr	r0, [pc, #20]	; (800bac0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800baac:	f7fb fcb0 	bl	8007410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bab0:	4b02      	ldr	r3, [pc, #8]	; (800babc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3708      	adds	r7, #8
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	2000a4b0 	.word	0x2000a4b0
 800bac0:	0800ce6c 	.word	0x0800ce6c

0800bac4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	4603      	mov	r3, r0
 800bacc:	6039      	str	r1, [r7, #0]
 800bace:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bad0:	79fb      	ldrb	r3, [r7, #7]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d105      	bne.n	800bae2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	4907      	ldr	r1, [pc, #28]	; (800baf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bada:	4808      	ldr	r0, [pc, #32]	; (800bafc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800badc:	f7fb fc98 	bl	8007410 <USBD_GetString>
 800bae0:	e004      	b.n	800baec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bae2:	683a      	ldr	r2, [r7, #0]
 800bae4:	4904      	ldr	r1, [pc, #16]	; (800baf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bae6:	4805      	ldr	r0, [pc, #20]	; (800bafc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bae8:	f7fb fc92 	bl	8007410 <USBD_GetString>
  }
  return USBD_StrDesc;
 800baec:	4b02      	ldr	r3, [pc, #8]	; (800baf8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
 800baf6:	bf00      	nop
 800baf8:	2000a4b0 	.word	0x2000a4b0
 800bafc:	0800ce78 	.word	0x0800ce78

0800bb00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bb06:	4b0f      	ldr	r3, [pc, #60]	; (800bb44 <Get_SerialNum+0x44>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bb0c:	4b0e      	ldr	r3, [pc, #56]	; (800bb48 <Get_SerialNum+0x48>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bb12:	4b0e      	ldr	r3, [pc, #56]	; (800bb4c <Get_SerialNum+0x4c>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d009      	beq.n	800bb3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bb26:	2208      	movs	r2, #8
 800bb28:	4909      	ldr	r1, [pc, #36]	; (800bb50 <Get_SerialNum+0x50>)
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f000 f814 	bl	800bb58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bb30:	2204      	movs	r2, #4
 800bb32:	4908      	ldr	r1, [pc, #32]	; (800bb54 <Get_SerialNum+0x54>)
 800bb34:	68b8      	ldr	r0, [r7, #8]
 800bb36:	f000 f80f 	bl	800bb58 <IntToUnicode>
  }
}
 800bb3a:	bf00      	nop
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	1fff7a10 	.word	0x1fff7a10
 800bb48:	1fff7a14 	.word	0x1fff7a14
 800bb4c:	1fff7a18 	.word	0x1fff7a18
 800bb50:	200000f2 	.word	0x200000f2
 800bb54:	20000102 	.word	0x20000102

0800bb58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b087      	sub	sp, #28
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	4613      	mov	r3, r2
 800bb64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bb66:	2300      	movs	r3, #0
 800bb68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	75fb      	strb	r3, [r7, #23]
 800bb6e:	e027      	b.n	800bbc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	0f1b      	lsrs	r3, r3, #28
 800bb74:	2b09      	cmp	r3, #9
 800bb76:	d80b      	bhi.n	800bb90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	0f1b      	lsrs	r3, r3, #28
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	7dfb      	ldrb	r3, [r7, #23]
 800bb80:	005b      	lsls	r3, r3, #1
 800bb82:	4619      	mov	r1, r3
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	440b      	add	r3, r1
 800bb88:	3230      	adds	r2, #48	; 0x30
 800bb8a:	b2d2      	uxtb	r2, r2
 800bb8c:	701a      	strb	r2, [r3, #0]
 800bb8e:	e00a      	b.n	800bba6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	0f1b      	lsrs	r3, r3, #28
 800bb94:	b2da      	uxtb	r2, r3
 800bb96:	7dfb      	ldrb	r3, [r7, #23]
 800bb98:	005b      	lsls	r3, r3, #1
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	440b      	add	r3, r1
 800bba0:	3237      	adds	r2, #55	; 0x37
 800bba2:	b2d2      	uxtb	r2, r2
 800bba4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	011b      	lsls	r3, r3, #4
 800bbaa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bbac:	7dfb      	ldrb	r3, [r7, #23]
 800bbae:	005b      	lsls	r3, r3, #1
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	68ba      	ldr	r2, [r7, #8]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bbba:	7dfb      	ldrb	r3, [r7, #23]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	75fb      	strb	r3, [r7, #23]
 800bbc0:	7dfa      	ldrb	r2, [r7, #23]
 800bbc2:	79fb      	ldrb	r3, [r7, #7]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d3d3      	bcc.n	800bb70 <IntToUnicode+0x18>
  }
}
 800bbc8:	bf00      	nop
 800bbca:	bf00      	nop
 800bbcc:	371c      	adds	r7, #28
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr
	...

0800bbd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b08a      	sub	sp, #40	; 0x28
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bbe0:	f107 0314 	add.w	r3, r7, #20
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	601a      	str	r2, [r3, #0]
 800bbe8:	605a      	str	r2, [r3, #4]
 800bbea:	609a      	str	r2, [r3, #8]
 800bbec:	60da      	str	r2, [r3, #12]
 800bbee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbf8:	d13a      	bne.n	800bc70 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	613b      	str	r3, [r7, #16]
 800bbfe:	4b1e      	ldr	r3, [pc, #120]	; (800bc78 <HAL_PCD_MspInit+0xa0>)
 800bc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc02:	4a1d      	ldr	r2, [pc, #116]	; (800bc78 <HAL_PCD_MspInit+0xa0>)
 800bc04:	f043 0301 	orr.w	r3, r3, #1
 800bc08:	6313      	str	r3, [r2, #48]	; 0x30
 800bc0a:	4b1b      	ldr	r3, [pc, #108]	; (800bc78 <HAL_PCD_MspInit+0xa0>)
 800bc0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc0e:	f003 0301 	and.w	r3, r3, #1
 800bc12:	613b      	str	r3, [r7, #16]
 800bc14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bc16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800bc1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bc1c:	2302      	movs	r3, #2
 800bc1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bc20:	2300      	movs	r3, #0
 800bc22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bc24:	2303      	movs	r3, #3
 800bc26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc28:	230a      	movs	r3, #10
 800bc2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc2c:	f107 0314 	add.w	r3, r7, #20
 800bc30:	4619      	mov	r1, r3
 800bc32:	4812      	ldr	r0, [pc, #72]	; (800bc7c <HAL_PCD_MspInit+0xa4>)
 800bc34:	f7f6 f852 	bl	8001cdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc38:	4b0f      	ldr	r3, [pc, #60]	; (800bc78 <HAL_PCD_MspInit+0xa0>)
 800bc3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc3c:	4a0e      	ldr	r2, [pc, #56]	; (800bc78 <HAL_PCD_MspInit+0xa0>)
 800bc3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc42:	6353      	str	r3, [r2, #52]	; 0x34
 800bc44:	2300      	movs	r3, #0
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	4b0b      	ldr	r3, [pc, #44]	; (800bc78 <HAL_PCD_MspInit+0xa0>)
 800bc4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc4c:	4a0a      	ldr	r2, [pc, #40]	; (800bc78 <HAL_PCD_MspInit+0xa0>)
 800bc4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bc52:	6453      	str	r3, [r2, #68]	; 0x44
 800bc54:	4b08      	ldr	r3, [pc, #32]	; (800bc78 <HAL_PCD_MspInit+0xa0>)
 800bc56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc5c:	60fb      	str	r3, [r7, #12]
 800bc5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800bc60:	2200      	movs	r2, #0
 800bc62:	2105      	movs	r1, #5
 800bc64:	2043      	movs	r0, #67	; 0x43
 800bc66:	f7f5 fd18 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc6a:	2043      	movs	r0, #67	; 0x43
 800bc6c:	f7f5 fd31 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc70:	bf00      	nop
 800bc72:	3728      	adds	r7, #40	; 0x28
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}
 800bc78:	40023800 	.word	0x40023800
 800bc7c:	40020000 	.word	0x40020000

0800bc80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bc94:	4619      	mov	r1, r3
 800bc96:	4610      	mov	r0, r2
 800bc98:	f7fa fa5b 	bl	8006152 <USBD_LL_SetupStage>
}
 800bc9c:	bf00      	nop
 800bc9e:	3708      	adds	r7, #8
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	460b      	mov	r3, r1
 800bcae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bcb6:	78fa      	ldrb	r2, [r7, #3]
 800bcb8:	6879      	ldr	r1, [r7, #4]
 800bcba:	4613      	mov	r3, r2
 800bcbc:	00db      	lsls	r3, r3, #3
 800bcbe:	4413      	add	r3, r2
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	440b      	add	r3, r1
 800bcc4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	78fb      	ldrb	r3, [r7, #3]
 800bccc:	4619      	mov	r1, r3
 800bcce:	f7fa fa95 	bl	80061fc <USBD_LL_DataOutStage>
}
 800bcd2:	bf00      	nop
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcda:	b580      	push	{r7, lr}
 800bcdc:	b082      	sub	sp, #8
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
 800bce2:	460b      	mov	r3, r1
 800bce4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800bcec:	78fa      	ldrb	r2, [r7, #3]
 800bcee:	6879      	ldr	r1, [r7, #4]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	00db      	lsls	r3, r3, #3
 800bcf4:	4413      	add	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	440b      	add	r3, r1
 800bcfa:	334c      	adds	r3, #76	; 0x4c
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	78fb      	ldrb	r3, [r7, #3]
 800bd00:	4619      	mov	r1, r3
 800bd02:	f7fa fb2e 	bl	8006362 <USBD_LL_DataInStage>
}
 800bd06:	bf00      	nop
 800bd08:	3708      	adds	r7, #8
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	bd80      	pop	{r7, pc}

0800bd0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd0e:	b580      	push	{r7, lr}
 800bd10:	b082      	sub	sp, #8
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7fa fc62 	bl	80065e6 <USBD_LL_SOF>
}
 800bd22:	bf00      	nop
 800bd24:	3708      	adds	r7, #8
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b084      	sub	sp, #16
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bd32:	2301      	movs	r3, #1
 800bd34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d102      	bne.n	800bd44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	73fb      	strb	r3, [r7, #15]
 800bd42:	e008      	b.n	800bd56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	2b02      	cmp	r3, #2
 800bd4a:	d102      	bne.n	800bd52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	73fb      	strb	r3, [r7, #15]
 800bd50:	e001      	b.n	800bd56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bd52:	f7f4 ff7d 	bl	8000c50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd5c:	7bfa      	ldrb	r2, [r7, #15]
 800bd5e:	4611      	mov	r1, r2
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7fa fc02 	bl	800656a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7fa fbaa 	bl	80064c6 <USBD_LL_Reset>
}
 800bd72:	bf00      	nop
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
	...

0800bd7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fa fbfd 	bl	800658a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	6812      	ldr	r2, [r2, #0]
 800bd9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bda2:	f043 0301 	orr.w	r3, r3, #1
 800bda6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6a1b      	ldr	r3, [r3, #32]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d005      	beq.n	800bdbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bdb0:	4b04      	ldr	r3, [pc, #16]	; (800bdc4 <HAL_PCD_SuspendCallback+0x48>)
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	4a03      	ldr	r2, [pc, #12]	; (800bdc4 <HAL_PCD_SuspendCallback+0x48>)
 800bdb6:	f043 0306 	orr.w	r3, r3, #6
 800bdba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bdbc:	bf00      	nop
 800bdbe:	3708      	adds	r7, #8
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	e000ed00 	.word	0xe000ed00

0800bdc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b082      	sub	sp, #8
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f7fa fbed 	bl	80065b6 <USBD_LL_Resume>
}
 800bddc:	bf00      	nop
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	460b      	mov	r3, r1
 800bdee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800bdf6:	78fa      	ldrb	r2, [r7, #3]
 800bdf8:	4611      	mov	r1, r2
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fa fc45 	bl	800668a <USBD_LL_IsoOUTIncomplete>
}
 800be00:	bf00      	nop
 800be02:	3708      	adds	r7, #8
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b082      	sub	sp, #8
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	460b      	mov	r3, r1
 800be12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be1a:	78fa      	ldrb	r2, [r7, #3]
 800be1c:	4611      	mov	r1, r2
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fa fc01 	bl	8006626 <USBD_LL_IsoINIncomplete>
}
 800be24:	bf00      	nop
 800be26:	3708      	adds	r7, #8
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}

0800be2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fa fc57 	bl	80066ee <USBD_LL_DevConnected>
}
 800be40:	bf00      	nop
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800be56:	4618      	mov	r0, r3
 800be58:	f7fa fc54 	bl	8006704 <USBD_LL_DevDisconnected>
}
 800be5c:	bf00      	nop
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b082      	sub	sp, #8
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	781b      	ldrb	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d13c      	bne.n	800beee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800be74:	4a20      	ldr	r2, [pc, #128]	; (800bef8 <USBD_LL_Init+0x94>)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a1e      	ldr	r2, [pc, #120]	; (800bef8 <USBD_LL_Init+0x94>)
 800be80:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800be84:	4b1c      	ldr	r3, [pc, #112]	; (800bef8 <USBD_LL_Init+0x94>)
 800be86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800be8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800be8c:	4b1a      	ldr	r3, [pc, #104]	; (800bef8 <USBD_LL_Init+0x94>)
 800be8e:	2204      	movs	r2, #4
 800be90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800be92:	4b19      	ldr	r3, [pc, #100]	; (800bef8 <USBD_LL_Init+0x94>)
 800be94:	2202      	movs	r2, #2
 800be96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800be98:	4b17      	ldr	r3, [pc, #92]	; (800bef8 <USBD_LL_Init+0x94>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800be9e:	4b16      	ldr	r3, [pc, #88]	; (800bef8 <USBD_LL_Init+0x94>)
 800bea0:	2202      	movs	r2, #2
 800bea2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bea4:	4b14      	ldr	r3, [pc, #80]	; (800bef8 <USBD_LL_Init+0x94>)
 800bea6:	2200      	movs	r2, #0
 800bea8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800beaa:	4b13      	ldr	r3, [pc, #76]	; (800bef8 <USBD_LL_Init+0x94>)
 800beac:	2200      	movs	r2, #0
 800beae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800beb0:	4b11      	ldr	r3, [pc, #68]	; (800bef8 <USBD_LL_Init+0x94>)
 800beb2:	2200      	movs	r2, #0
 800beb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800beb6:	4b10      	ldr	r3, [pc, #64]	; (800bef8 <USBD_LL_Init+0x94>)
 800beb8:	2200      	movs	r2, #0
 800beba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bebc:	4b0e      	ldr	r3, [pc, #56]	; (800bef8 <USBD_LL_Init+0x94>)
 800bebe:	2200      	movs	r2, #0
 800bec0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bec2:	480d      	ldr	r0, [pc, #52]	; (800bef8 <USBD_LL_Init+0x94>)
 800bec4:	f7f6 f8c1 	bl	800204a <HAL_PCD_Init>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d001      	beq.n	800bed2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bece:	f7f4 febf 	bl	8000c50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bed2:	2180      	movs	r1, #128	; 0x80
 800bed4:	4808      	ldr	r0, [pc, #32]	; (800bef8 <USBD_LL_Init+0x94>)
 800bed6:	f7f7 fb18 	bl	800350a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800beda:	2240      	movs	r2, #64	; 0x40
 800bedc:	2100      	movs	r1, #0
 800bede:	4806      	ldr	r0, [pc, #24]	; (800bef8 <USBD_LL_Init+0x94>)
 800bee0:	f7f7 facc 	bl	800347c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bee4:	2280      	movs	r2, #128	; 0x80
 800bee6:	2101      	movs	r1, #1
 800bee8:	4803      	ldr	r0, [pc, #12]	; (800bef8 <USBD_LL_Init+0x94>)
 800beea:	f7f7 fac7 	bl	800347c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800beee:	2300      	movs	r3, #0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	2000a6b0 	.word	0x2000a6b0

0800befc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf04:	2300      	movs	r3, #0
 800bf06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7f6 f9b6 	bl	8002284 <HAL_PCD_Start>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf1c:	7bfb      	ldrb	r3, [r7, #15]
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 f942 	bl	800c1a8 <USBD_Get_USB_Status>
 800bf24:	4603      	mov	r3, r0
 800bf26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf28:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bf32:	b580      	push	{r7, lr}
 800bf34:	b084      	sub	sp, #16
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
 800bf3a:	4608      	mov	r0, r1
 800bf3c:	4611      	mov	r1, r2
 800bf3e:	461a      	mov	r2, r3
 800bf40:	4603      	mov	r3, r0
 800bf42:	70fb      	strb	r3, [r7, #3]
 800bf44:	460b      	mov	r3, r1
 800bf46:	70bb      	strb	r3, [r7, #2]
 800bf48:	4613      	mov	r3, r2
 800bf4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf50:	2300      	movs	r3, #0
 800bf52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf5a:	78bb      	ldrb	r3, [r7, #2]
 800bf5c:	883a      	ldrh	r2, [r7, #0]
 800bf5e:	78f9      	ldrb	r1, [r7, #3]
 800bf60:	f7f6 fe87 	bl	8002c72 <HAL_PCD_EP_Open>
 800bf64:	4603      	mov	r3, r0
 800bf66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf68:	7bfb      	ldrb	r3, [r7, #15]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 f91c 	bl	800c1a8 <USBD_Get_USB_Status>
 800bf70:	4603      	mov	r3, r0
 800bf72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf74:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf76:	4618      	mov	r0, r3
 800bf78:	3710      	adds	r7, #16
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}

0800bf7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf7e:	b580      	push	{r7, lr}
 800bf80:	b084      	sub	sp, #16
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]
 800bf86:	460b      	mov	r3, r1
 800bf88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bf98:	78fa      	ldrb	r2, [r7, #3]
 800bf9a:	4611      	mov	r1, r2
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7f6 fed0 	bl	8002d42 <HAL_PCD_EP_Close>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfa6:	7bfb      	ldrb	r3, [r7, #15]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f000 f8fd 	bl	800c1a8 <USBD_Get_USB_Status>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bfb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	3710      	adds	r7, #16
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	460b      	mov	r3, r1
 800bfc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bfd6:	78fa      	ldrb	r2, [r7, #3]
 800bfd8:	4611      	mov	r1, r2
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f7f6 ffa8 	bl	8002f30 <HAL_PCD_EP_SetStall>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bfe4:	7bfb      	ldrb	r3, [r7, #15]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f000 f8de 	bl	800c1a8 <USBD_Get_USB_Status>
 800bfec:	4603      	mov	r3, r0
 800bfee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bff0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bffa:	b580      	push	{r7, lr}
 800bffc:	b084      	sub	sp, #16
 800bffe:	af00      	add	r7, sp, #0
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	460b      	mov	r3, r1
 800c004:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c006:	2300      	movs	r3, #0
 800c008:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c00a:	2300      	movs	r3, #0
 800c00c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c014:	78fa      	ldrb	r2, [r7, #3]
 800c016:	4611      	mov	r1, r2
 800c018:	4618      	mov	r0, r3
 800c01a:	f7f6 ffed 	bl	8002ff8 <HAL_PCD_EP_ClrStall>
 800c01e:	4603      	mov	r3, r0
 800c020:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c022:	7bfb      	ldrb	r3, [r7, #15]
 800c024:	4618      	mov	r0, r3
 800c026:	f000 f8bf 	bl	800c1a8 <USBD_Get_USB_Status>
 800c02a:	4603      	mov	r3, r0
 800c02c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c02e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c030:	4618      	mov	r0, r3
 800c032:	3710      	adds	r7, #16
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}

0800c038 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
 800c040:	460b      	mov	r3, r1
 800c042:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c04a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c04c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c050:	2b00      	cmp	r3, #0
 800c052:	da0b      	bge.n	800c06c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c054:	78fb      	ldrb	r3, [r7, #3]
 800c056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c05a:	68f9      	ldr	r1, [r7, #12]
 800c05c:	4613      	mov	r3, r2
 800c05e:	00db      	lsls	r3, r3, #3
 800c060:	4413      	add	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	440b      	add	r3, r1
 800c066:	333e      	adds	r3, #62	; 0x3e
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	e00b      	b.n	800c084 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c06c:	78fb      	ldrb	r3, [r7, #3]
 800c06e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c072:	68f9      	ldr	r1, [r7, #12]
 800c074:	4613      	mov	r3, r2
 800c076:	00db      	lsls	r3, r3, #3
 800c078:	4413      	add	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	440b      	add	r3, r1
 800c07e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c082:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c084:	4618      	mov	r0, r3
 800c086:	3714      	adds	r7, #20
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b084      	sub	sp, #16
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	460b      	mov	r3, r1
 800c09a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c09c:	2300      	movs	r3, #0
 800c09e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0aa:	78fa      	ldrb	r2, [r7, #3]
 800c0ac:	4611      	mov	r1, r2
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7f6 fdba 	bl	8002c28 <HAL_PCD_SetAddress>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0b8:	7bfb      	ldrb	r3, [r7, #15]
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f000 f874 	bl	800c1a8 <USBD_Get_USB_Status>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b086      	sub	sp, #24
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	60f8      	str	r0, [r7, #12]
 800c0d6:	607a      	str	r2, [r7, #4]
 800c0d8:	603b      	str	r3, [r7, #0]
 800c0da:	460b      	mov	r3, r1
 800c0dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c0ec:	7af9      	ldrb	r1, [r7, #11]
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	f7f6 fed3 	bl	8002e9c <HAL_PCD_EP_Transmit>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0fa:	7dfb      	ldrb	r3, [r7, #23]
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 f853 	bl	800c1a8 <USBD_Get_USB_Status>
 800c102:	4603      	mov	r3, r0
 800c104:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c106:	7dbb      	ldrb	r3, [r7, #22]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3718      	adds	r7, #24
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	607a      	str	r2, [r7, #4]
 800c11a:	603b      	str	r3, [r7, #0]
 800c11c:	460b      	mov	r3, r1
 800c11e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c120:	2300      	movs	r3, #0
 800c122:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c124:	2300      	movs	r3, #0
 800c126:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c12e:	7af9      	ldrb	r1, [r7, #11]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	f7f6 fe4f 	bl	8002dd6 <HAL_PCD_EP_Receive>
 800c138:	4603      	mov	r3, r0
 800c13a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c13c:	7dfb      	ldrb	r3, [r7, #23]
 800c13e:	4618      	mov	r0, r3
 800c140:	f000 f832 	bl	800c1a8 <USBD_Get_USB_Status>
 800c144:	4603      	mov	r3, r0
 800c146:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c148:	7dbb      	ldrb	r3, [r7, #22]
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3718      	adds	r7, #24
 800c14e:	46bd      	mov	sp, r7
 800c150:	bd80      	pop	{r7, pc}

0800c152 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c152:	b580      	push	{r7, lr}
 800c154:	b082      	sub	sp, #8
 800c156:	af00      	add	r7, sp, #0
 800c158:	6078      	str	r0, [r7, #4]
 800c15a:	460b      	mov	r3, r1
 800c15c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c164:	78fa      	ldrb	r2, [r7, #3]
 800c166:	4611      	mov	r1, r2
 800c168:	4618      	mov	r0, r3
 800c16a:	f7f6 fe7f 	bl	8002e6c <HAL_PCD_EP_GetRxCount>
 800c16e:	4603      	mov	r3, r0
}
 800c170:	4618      	mov	r0, r3
 800c172:	3708      	adds	r7, #8
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c178:	b480      	push	{r7}
 800c17a:	b083      	sub	sp, #12
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c180:	4b03      	ldr	r3, [pc, #12]	; (800c190 <USBD_static_malloc+0x18>)
}
 800c182:	4618      	mov	r0, r3
 800c184:	370c      	adds	r7, #12
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	2000abbc 	.word	0x2000abbc

0800c194 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]

}
 800c19c:	bf00      	nop
 800c19e:	370c      	adds	r7, #12
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr

0800c1a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c1b6:	79fb      	ldrb	r3, [r7, #7]
 800c1b8:	2b03      	cmp	r3, #3
 800c1ba:	d817      	bhi.n	800c1ec <USBD_Get_USB_Status+0x44>
 800c1bc:	a201      	add	r2, pc, #4	; (adr r2, 800c1c4 <USBD_Get_USB_Status+0x1c>)
 800c1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c2:	bf00      	nop
 800c1c4:	0800c1d5 	.word	0x0800c1d5
 800c1c8:	0800c1db 	.word	0x0800c1db
 800c1cc:	0800c1e1 	.word	0x0800c1e1
 800c1d0:	0800c1e7 	.word	0x0800c1e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	73fb      	strb	r3, [r7, #15]
    break;
 800c1d8:	e00b      	b.n	800c1f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c1da:	2303      	movs	r3, #3
 800c1dc:	73fb      	strb	r3, [r7, #15]
    break;
 800c1de:	e008      	b.n	800c1f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	73fb      	strb	r3, [r7, #15]
    break;
 800c1e4:	e005      	b.n	800c1f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c1e6:	2303      	movs	r3, #3
 800c1e8:	73fb      	strb	r3, [r7, #15]
    break;
 800c1ea:	e002      	b.n	800c1f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c1ec:	2303      	movs	r3, #3
 800c1ee:	73fb      	strb	r3, [r7, #15]
    break;
 800c1f0:	bf00      	nop
  }
  return usb_status;
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3714      	adds	r7, #20
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fe:	4770      	bx	lr

0800c200 <__errno>:
 800c200:	4b01      	ldr	r3, [pc, #4]	; (800c208 <__errno+0x8>)
 800c202:	6818      	ldr	r0, [r3, #0]
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	2000010c 	.word	0x2000010c

0800c20c <__libc_init_array>:
 800c20c:	b570      	push	{r4, r5, r6, lr}
 800c20e:	4d0d      	ldr	r5, [pc, #52]	; (800c244 <__libc_init_array+0x38>)
 800c210:	4c0d      	ldr	r4, [pc, #52]	; (800c248 <__libc_init_array+0x3c>)
 800c212:	1b64      	subs	r4, r4, r5
 800c214:	10a4      	asrs	r4, r4, #2
 800c216:	2600      	movs	r6, #0
 800c218:	42a6      	cmp	r6, r4
 800c21a:	d109      	bne.n	800c230 <__libc_init_array+0x24>
 800c21c:	4d0b      	ldr	r5, [pc, #44]	; (800c24c <__libc_init_array+0x40>)
 800c21e:	4c0c      	ldr	r4, [pc, #48]	; (800c250 <__libc_init_array+0x44>)
 800c220:	f000 fd28 	bl	800cc74 <_init>
 800c224:	1b64      	subs	r4, r4, r5
 800c226:	10a4      	asrs	r4, r4, #2
 800c228:	2600      	movs	r6, #0
 800c22a:	42a6      	cmp	r6, r4
 800c22c:	d105      	bne.n	800c23a <__libc_init_array+0x2e>
 800c22e:	bd70      	pop	{r4, r5, r6, pc}
 800c230:	f855 3b04 	ldr.w	r3, [r5], #4
 800c234:	4798      	blx	r3
 800c236:	3601      	adds	r6, #1
 800c238:	e7ee      	b.n	800c218 <__libc_init_array+0xc>
 800c23a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c23e:	4798      	blx	r3
 800c240:	3601      	adds	r6, #1
 800c242:	e7f2      	b.n	800c22a <__libc_init_array+0x1e>
 800c244:	0800cf80 	.word	0x0800cf80
 800c248:	0800cf80 	.word	0x0800cf80
 800c24c:	0800cf80 	.word	0x0800cf80
 800c250:	0800cf84 	.word	0x0800cf84

0800c254 <__retarget_lock_acquire_recursive>:
 800c254:	4770      	bx	lr

0800c256 <__retarget_lock_release_recursive>:
 800c256:	4770      	bx	lr

0800c258 <memcpy>:
 800c258:	440a      	add	r2, r1
 800c25a:	4291      	cmp	r1, r2
 800c25c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c260:	d100      	bne.n	800c264 <memcpy+0xc>
 800c262:	4770      	bx	lr
 800c264:	b510      	push	{r4, lr}
 800c266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c26a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c26e:	4291      	cmp	r1, r2
 800c270:	d1f9      	bne.n	800c266 <memcpy+0xe>
 800c272:	bd10      	pop	{r4, pc}

0800c274 <memset>:
 800c274:	4402      	add	r2, r0
 800c276:	4603      	mov	r3, r0
 800c278:	4293      	cmp	r3, r2
 800c27a:	d100      	bne.n	800c27e <memset+0xa>
 800c27c:	4770      	bx	lr
 800c27e:	f803 1b01 	strb.w	r1, [r3], #1
 800c282:	e7f9      	b.n	800c278 <memset+0x4>

0800c284 <sbrk_aligned>:
 800c284:	b570      	push	{r4, r5, r6, lr}
 800c286:	4e0e      	ldr	r6, [pc, #56]	; (800c2c0 <sbrk_aligned+0x3c>)
 800c288:	460c      	mov	r4, r1
 800c28a:	6831      	ldr	r1, [r6, #0]
 800c28c:	4605      	mov	r5, r0
 800c28e:	b911      	cbnz	r1, 800c296 <sbrk_aligned+0x12>
 800c290:	f000 f8f6 	bl	800c480 <_sbrk_r>
 800c294:	6030      	str	r0, [r6, #0]
 800c296:	4621      	mov	r1, r4
 800c298:	4628      	mov	r0, r5
 800c29a:	f000 f8f1 	bl	800c480 <_sbrk_r>
 800c29e:	1c43      	adds	r3, r0, #1
 800c2a0:	d00a      	beq.n	800c2b8 <sbrk_aligned+0x34>
 800c2a2:	1cc4      	adds	r4, r0, #3
 800c2a4:	f024 0403 	bic.w	r4, r4, #3
 800c2a8:	42a0      	cmp	r0, r4
 800c2aa:	d007      	beq.n	800c2bc <sbrk_aligned+0x38>
 800c2ac:	1a21      	subs	r1, r4, r0
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	f000 f8e6 	bl	800c480 <_sbrk_r>
 800c2b4:	3001      	adds	r0, #1
 800c2b6:	d101      	bne.n	800c2bc <sbrk_aligned+0x38>
 800c2b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c2bc:	4620      	mov	r0, r4
 800c2be:	bd70      	pop	{r4, r5, r6, pc}
 800c2c0:	2000ade4 	.word	0x2000ade4

0800c2c4 <_malloc_r>:
 800c2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c8:	1ccd      	adds	r5, r1, #3
 800c2ca:	f025 0503 	bic.w	r5, r5, #3
 800c2ce:	3508      	adds	r5, #8
 800c2d0:	2d0c      	cmp	r5, #12
 800c2d2:	bf38      	it	cc
 800c2d4:	250c      	movcc	r5, #12
 800c2d6:	2d00      	cmp	r5, #0
 800c2d8:	4607      	mov	r7, r0
 800c2da:	db01      	blt.n	800c2e0 <_malloc_r+0x1c>
 800c2dc:	42a9      	cmp	r1, r5
 800c2de:	d905      	bls.n	800c2ec <_malloc_r+0x28>
 800c2e0:	230c      	movs	r3, #12
 800c2e2:	603b      	str	r3, [r7, #0]
 800c2e4:	2600      	movs	r6, #0
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2ec:	4e2e      	ldr	r6, [pc, #184]	; (800c3a8 <_malloc_r+0xe4>)
 800c2ee:	f000 f927 	bl	800c540 <__malloc_lock>
 800c2f2:	6833      	ldr	r3, [r6, #0]
 800c2f4:	461c      	mov	r4, r3
 800c2f6:	bb34      	cbnz	r4, 800c346 <_malloc_r+0x82>
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4638      	mov	r0, r7
 800c2fc:	f7ff ffc2 	bl	800c284 <sbrk_aligned>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	4604      	mov	r4, r0
 800c304:	d14d      	bne.n	800c3a2 <_malloc_r+0xde>
 800c306:	6834      	ldr	r4, [r6, #0]
 800c308:	4626      	mov	r6, r4
 800c30a:	2e00      	cmp	r6, #0
 800c30c:	d140      	bne.n	800c390 <_malloc_r+0xcc>
 800c30e:	6823      	ldr	r3, [r4, #0]
 800c310:	4631      	mov	r1, r6
 800c312:	4638      	mov	r0, r7
 800c314:	eb04 0803 	add.w	r8, r4, r3
 800c318:	f000 f8b2 	bl	800c480 <_sbrk_r>
 800c31c:	4580      	cmp	r8, r0
 800c31e:	d13a      	bne.n	800c396 <_malloc_r+0xd2>
 800c320:	6821      	ldr	r1, [r4, #0]
 800c322:	3503      	adds	r5, #3
 800c324:	1a6d      	subs	r5, r5, r1
 800c326:	f025 0503 	bic.w	r5, r5, #3
 800c32a:	3508      	adds	r5, #8
 800c32c:	2d0c      	cmp	r5, #12
 800c32e:	bf38      	it	cc
 800c330:	250c      	movcc	r5, #12
 800c332:	4629      	mov	r1, r5
 800c334:	4638      	mov	r0, r7
 800c336:	f7ff ffa5 	bl	800c284 <sbrk_aligned>
 800c33a:	3001      	adds	r0, #1
 800c33c:	d02b      	beq.n	800c396 <_malloc_r+0xd2>
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	442b      	add	r3, r5
 800c342:	6023      	str	r3, [r4, #0]
 800c344:	e00e      	b.n	800c364 <_malloc_r+0xa0>
 800c346:	6822      	ldr	r2, [r4, #0]
 800c348:	1b52      	subs	r2, r2, r5
 800c34a:	d41e      	bmi.n	800c38a <_malloc_r+0xc6>
 800c34c:	2a0b      	cmp	r2, #11
 800c34e:	d916      	bls.n	800c37e <_malloc_r+0xba>
 800c350:	1961      	adds	r1, r4, r5
 800c352:	42a3      	cmp	r3, r4
 800c354:	6025      	str	r5, [r4, #0]
 800c356:	bf18      	it	ne
 800c358:	6059      	strne	r1, [r3, #4]
 800c35a:	6863      	ldr	r3, [r4, #4]
 800c35c:	bf08      	it	eq
 800c35e:	6031      	streq	r1, [r6, #0]
 800c360:	5162      	str	r2, [r4, r5]
 800c362:	604b      	str	r3, [r1, #4]
 800c364:	4638      	mov	r0, r7
 800c366:	f104 060b 	add.w	r6, r4, #11
 800c36a:	f000 f8ef 	bl	800c54c <__malloc_unlock>
 800c36e:	f026 0607 	bic.w	r6, r6, #7
 800c372:	1d23      	adds	r3, r4, #4
 800c374:	1af2      	subs	r2, r6, r3
 800c376:	d0b6      	beq.n	800c2e6 <_malloc_r+0x22>
 800c378:	1b9b      	subs	r3, r3, r6
 800c37a:	50a3      	str	r3, [r4, r2]
 800c37c:	e7b3      	b.n	800c2e6 <_malloc_r+0x22>
 800c37e:	6862      	ldr	r2, [r4, #4]
 800c380:	42a3      	cmp	r3, r4
 800c382:	bf0c      	ite	eq
 800c384:	6032      	streq	r2, [r6, #0]
 800c386:	605a      	strne	r2, [r3, #4]
 800c388:	e7ec      	b.n	800c364 <_malloc_r+0xa0>
 800c38a:	4623      	mov	r3, r4
 800c38c:	6864      	ldr	r4, [r4, #4]
 800c38e:	e7b2      	b.n	800c2f6 <_malloc_r+0x32>
 800c390:	4634      	mov	r4, r6
 800c392:	6876      	ldr	r6, [r6, #4]
 800c394:	e7b9      	b.n	800c30a <_malloc_r+0x46>
 800c396:	230c      	movs	r3, #12
 800c398:	603b      	str	r3, [r7, #0]
 800c39a:	4638      	mov	r0, r7
 800c39c:	f000 f8d6 	bl	800c54c <__malloc_unlock>
 800c3a0:	e7a1      	b.n	800c2e6 <_malloc_r+0x22>
 800c3a2:	6025      	str	r5, [r4, #0]
 800c3a4:	e7de      	b.n	800c364 <_malloc_r+0xa0>
 800c3a6:	bf00      	nop
 800c3a8:	2000ade0 	.word	0x2000ade0

0800c3ac <cleanup_glue>:
 800c3ac:	b538      	push	{r3, r4, r5, lr}
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	6809      	ldr	r1, [r1, #0]
 800c3b2:	4605      	mov	r5, r0
 800c3b4:	b109      	cbz	r1, 800c3ba <cleanup_glue+0xe>
 800c3b6:	f7ff fff9 	bl	800c3ac <cleanup_glue>
 800c3ba:	4621      	mov	r1, r4
 800c3bc:	4628      	mov	r0, r5
 800c3be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3c2:	f000 b8c9 	b.w	800c558 <_free_r>
	...

0800c3c8 <_reclaim_reent>:
 800c3c8:	4b2c      	ldr	r3, [pc, #176]	; (800c47c <_reclaim_reent+0xb4>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4283      	cmp	r3, r0
 800c3ce:	b570      	push	{r4, r5, r6, lr}
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	d051      	beq.n	800c478 <_reclaim_reent+0xb0>
 800c3d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c3d6:	b143      	cbz	r3, 800c3ea <_reclaim_reent+0x22>
 800c3d8:	68db      	ldr	r3, [r3, #12]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d14a      	bne.n	800c474 <_reclaim_reent+0xac>
 800c3de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3e0:	6819      	ldr	r1, [r3, #0]
 800c3e2:	b111      	cbz	r1, 800c3ea <_reclaim_reent+0x22>
 800c3e4:	4620      	mov	r0, r4
 800c3e6:	f000 f8b7 	bl	800c558 <_free_r>
 800c3ea:	6961      	ldr	r1, [r4, #20]
 800c3ec:	b111      	cbz	r1, 800c3f4 <_reclaim_reent+0x2c>
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f000 f8b2 	bl	800c558 <_free_r>
 800c3f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c3f6:	b111      	cbz	r1, 800c3fe <_reclaim_reent+0x36>
 800c3f8:	4620      	mov	r0, r4
 800c3fa:	f000 f8ad 	bl	800c558 <_free_r>
 800c3fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c400:	b111      	cbz	r1, 800c408 <_reclaim_reent+0x40>
 800c402:	4620      	mov	r0, r4
 800c404:	f000 f8a8 	bl	800c558 <_free_r>
 800c408:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c40a:	b111      	cbz	r1, 800c412 <_reclaim_reent+0x4a>
 800c40c:	4620      	mov	r0, r4
 800c40e:	f000 f8a3 	bl	800c558 <_free_r>
 800c412:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c414:	b111      	cbz	r1, 800c41c <_reclaim_reent+0x54>
 800c416:	4620      	mov	r0, r4
 800c418:	f000 f89e 	bl	800c558 <_free_r>
 800c41c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c41e:	b111      	cbz	r1, 800c426 <_reclaim_reent+0x5e>
 800c420:	4620      	mov	r0, r4
 800c422:	f000 f899 	bl	800c558 <_free_r>
 800c426:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c428:	b111      	cbz	r1, 800c430 <_reclaim_reent+0x68>
 800c42a:	4620      	mov	r0, r4
 800c42c:	f000 f894 	bl	800c558 <_free_r>
 800c430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c432:	b111      	cbz	r1, 800c43a <_reclaim_reent+0x72>
 800c434:	4620      	mov	r0, r4
 800c436:	f000 f88f 	bl	800c558 <_free_r>
 800c43a:	69a3      	ldr	r3, [r4, #24]
 800c43c:	b1e3      	cbz	r3, 800c478 <_reclaim_reent+0xb0>
 800c43e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c440:	4620      	mov	r0, r4
 800c442:	4798      	blx	r3
 800c444:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c446:	b1b9      	cbz	r1, 800c478 <_reclaim_reent+0xb0>
 800c448:	4620      	mov	r0, r4
 800c44a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c44e:	f7ff bfad 	b.w	800c3ac <cleanup_glue>
 800c452:	5949      	ldr	r1, [r1, r5]
 800c454:	b941      	cbnz	r1, 800c468 <_reclaim_reent+0xa0>
 800c456:	3504      	adds	r5, #4
 800c458:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c45a:	2d80      	cmp	r5, #128	; 0x80
 800c45c:	68d9      	ldr	r1, [r3, #12]
 800c45e:	d1f8      	bne.n	800c452 <_reclaim_reent+0x8a>
 800c460:	4620      	mov	r0, r4
 800c462:	f000 f879 	bl	800c558 <_free_r>
 800c466:	e7ba      	b.n	800c3de <_reclaim_reent+0x16>
 800c468:	680e      	ldr	r6, [r1, #0]
 800c46a:	4620      	mov	r0, r4
 800c46c:	f000 f874 	bl	800c558 <_free_r>
 800c470:	4631      	mov	r1, r6
 800c472:	e7ef      	b.n	800c454 <_reclaim_reent+0x8c>
 800c474:	2500      	movs	r5, #0
 800c476:	e7ef      	b.n	800c458 <_reclaim_reent+0x90>
 800c478:	bd70      	pop	{r4, r5, r6, pc}
 800c47a:	bf00      	nop
 800c47c:	2000010c 	.word	0x2000010c

0800c480 <_sbrk_r>:
 800c480:	b538      	push	{r3, r4, r5, lr}
 800c482:	4d06      	ldr	r5, [pc, #24]	; (800c49c <_sbrk_r+0x1c>)
 800c484:	2300      	movs	r3, #0
 800c486:	4604      	mov	r4, r0
 800c488:	4608      	mov	r0, r1
 800c48a:	602b      	str	r3, [r5, #0]
 800c48c:	f7f4 fcc0 	bl	8000e10 <_sbrk>
 800c490:	1c43      	adds	r3, r0, #1
 800c492:	d102      	bne.n	800c49a <_sbrk_r+0x1a>
 800c494:	682b      	ldr	r3, [r5, #0]
 800c496:	b103      	cbz	r3, 800c49a <_sbrk_r+0x1a>
 800c498:	6023      	str	r3, [r4, #0]
 800c49a:	bd38      	pop	{r3, r4, r5, pc}
 800c49c:	2000ade8 	.word	0x2000ade8

0800c4a0 <siprintf>:
 800c4a0:	b40e      	push	{r1, r2, r3}
 800c4a2:	b500      	push	{lr}
 800c4a4:	b09c      	sub	sp, #112	; 0x70
 800c4a6:	ab1d      	add	r3, sp, #116	; 0x74
 800c4a8:	9002      	str	r0, [sp, #8]
 800c4aa:	9006      	str	r0, [sp, #24]
 800c4ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4b0:	4809      	ldr	r0, [pc, #36]	; (800c4d8 <siprintf+0x38>)
 800c4b2:	9107      	str	r1, [sp, #28]
 800c4b4:	9104      	str	r1, [sp, #16]
 800c4b6:	4909      	ldr	r1, [pc, #36]	; (800c4dc <siprintf+0x3c>)
 800c4b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4bc:	9105      	str	r1, [sp, #20]
 800c4be:	6800      	ldr	r0, [r0, #0]
 800c4c0:	9301      	str	r3, [sp, #4]
 800c4c2:	a902      	add	r1, sp, #8
 800c4c4:	f000 f8f0 	bl	800c6a8 <_svfiprintf_r>
 800c4c8:	9b02      	ldr	r3, [sp, #8]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	701a      	strb	r2, [r3, #0]
 800c4ce:	b01c      	add	sp, #112	; 0x70
 800c4d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4d4:	b003      	add	sp, #12
 800c4d6:	4770      	bx	lr
 800c4d8:	2000010c 	.word	0x2000010c
 800c4dc:	ffff0208 	.word	0xffff0208

0800c4e0 <strcpy>:
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4e6:	f803 2b01 	strb.w	r2, [r3], #1
 800c4ea:	2a00      	cmp	r2, #0
 800c4ec:	d1f9      	bne.n	800c4e2 <strcpy+0x2>
 800c4ee:	4770      	bx	lr

0800c4f0 <strncmp>:
 800c4f0:	b510      	push	{r4, lr}
 800c4f2:	b17a      	cbz	r2, 800c514 <strncmp+0x24>
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	3901      	subs	r1, #1
 800c4f8:	1884      	adds	r4, r0, r2
 800c4fa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c4fe:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c502:	4290      	cmp	r0, r2
 800c504:	d101      	bne.n	800c50a <strncmp+0x1a>
 800c506:	42a3      	cmp	r3, r4
 800c508:	d101      	bne.n	800c50e <strncmp+0x1e>
 800c50a:	1a80      	subs	r0, r0, r2
 800c50c:	bd10      	pop	{r4, pc}
 800c50e:	2800      	cmp	r0, #0
 800c510:	d1f3      	bne.n	800c4fa <strncmp+0xa>
 800c512:	e7fa      	b.n	800c50a <strncmp+0x1a>
 800c514:	4610      	mov	r0, r2
 800c516:	e7f9      	b.n	800c50c <strncmp+0x1c>

0800c518 <strncpy>:
 800c518:	b510      	push	{r4, lr}
 800c51a:	3901      	subs	r1, #1
 800c51c:	4603      	mov	r3, r0
 800c51e:	b132      	cbz	r2, 800c52e <strncpy+0x16>
 800c520:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c524:	f803 4b01 	strb.w	r4, [r3], #1
 800c528:	3a01      	subs	r2, #1
 800c52a:	2c00      	cmp	r4, #0
 800c52c:	d1f7      	bne.n	800c51e <strncpy+0x6>
 800c52e:	441a      	add	r2, r3
 800c530:	2100      	movs	r1, #0
 800c532:	4293      	cmp	r3, r2
 800c534:	d100      	bne.n	800c538 <strncpy+0x20>
 800c536:	bd10      	pop	{r4, pc}
 800c538:	f803 1b01 	strb.w	r1, [r3], #1
 800c53c:	e7f9      	b.n	800c532 <strncpy+0x1a>
	...

0800c540 <__malloc_lock>:
 800c540:	4801      	ldr	r0, [pc, #4]	; (800c548 <__malloc_lock+0x8>)
 800c542:	f7ff be87 	b.w	800c254 <__retarget_lock_acquire_recursive>
 800c546:	bf00      	nop
 800c548:	2000addc 	.word	0x2000addc

0800c54c <__malloc_unlock>:
 800c54c:	4801      	ldr	r0, [pc, #4]	; (800c554 <__malloc_unlock+0x8>)
 800c54e:	f7ff be82 	b.w	800c256 <__retarget_lock_release_recursive>
 800c552:	bf00      	nop
 800c554:	2000addc 	.word	0x2000addc

0800c558 <_free_r>:
 800c558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c55a:	2900      	cmp	r1, #0
 800c55c:	d044      	beq.n	800c5e8 <_free_r+0x90>
 800c55e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c562:	9001      	str	r0, [sp, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	f1a1 0404 	sub.w	r4, r1, #4
 800c56a:	bfb8      	it	lt
 800c56c:	18e4      	addlt	r4, r4, r3
 800c56e:	f7ff ffe7 	bl	800c540 <__malloc_lock>
 800c572:	4a1e      	ldr	r2, [pc, #120]	; (800c5ec <_free_r+0x94>)
 800c574:	9801      	ldr	r0, [sp, #4]
 800c576:	6813      	ldr	r3, [r2, #0]
 800c578:	b933      	cbnz	r3, 800c588 <_free_r+0x30>
 800c57a:	6063      	str	r3, [r4, #4]
 800c57c:	6014      	str	r4, [r2, #0]
 800c57e:	b003      	add	sp, #12
 800c580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c584:	f7ff bfe2 	b.w	800c54c <__malloc_unlock>
 800c588:	42a3      	cmp	r3, r4
 800c58a:	d908      	bls.n	800c59e <_free_r+0x46>
 800c58c:	6825      	ldr	r5, [r4, #0]
 800c58e:	1961      	adds	r1, r4, r5
 800c590:	428b      	cmp	r3, r1
 800c592:	bf01      	itttt	eq
 800c594:	6819      	ldreq	r1, [r3, #0]
 800c596:	685b      	ldreq	r3, [r3, #4]
 800c598:	1949      	addeq	r1, r1, r5
 800c59a:	6021      	streq	r1, [r4, #0]
 800c59c:	e7ed      	b.n	800c57a <_free_r+0x22>
 800c59e:	461a      	mov	r2, r3
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	b10b      	cbz	r3, 800c5a8 <_free_r+0x50>
 800c5a4:	42a3      	cmp	r3, r4
 800c5a6:	d9fa      	bls.n	800c59e <_free_r+0x46>
 800c5a8:	6811      	ldr	r1, [r2, #0]
 800c5aa:	1855      	adds	r5, r2, r1
 800c5ac:	42a5      	cmp	r5, r4
 800c5ae:	d10b      	bne.n	800c5c8 <_free_r+0x70>
 800c5b0:	6824      	ldr	r4, [r4, #0]
 800c5b2:	4421      	add	r1, r4
 800c5b4:	1854      	adds	r4, r2, r1
 800c5b6:	42a3      	cmp	r3, r4
 800c5b8:	6011      	str	r1, [r2, #0]
 800c5ba:	d1e0      	bne.n	800c57e <_free_r+0x26>
 800c5bc:	681c      	ldr	r4, [r3, #0]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	6053      	str	r3, [r2, #4]
 800c5c2:	4421      	add	r1, r4
 800c5c4:	6011      	str	r1, [r2, #0]
 800c5c6:	e7da      	b.n	800c57e <_free_r+0x26>
 800c5c8:	d902      	bls.n	800c5d0 <_free_r+0x78>
 800c5ca:	230c      	movs	r3, #12
 800c5cc:	6003      	str	r3, [r0, #0]
 800c5ce:	e7d6      	b.n	800c57e <_free_r+0x26>
 800c5d0:	6825      	ldr	r5, [r4, #0]
 800c5d2:	1961      	adds	r1, r4, r5
 800c5d4:	428b      	cmp	r3, r1
 800c5d6:	bf04      	itt	eq
 800c5d8:	6819      	ldreq	r1, [r3, #0]
 800c5da:	685b      	ldreq	r3, [r3, #4]
 800c5dc:	6063      	str	r3, [r4, #4]
 800c5de:	bf04      	itt	eq
 800c5e0:	1949      	addeq	r1, r1, r5
 800c5e2:	6021      	streq	r1, [r4, #0]
 800c5e4:	6054      	str	r4, [r2, #4]
 800c5e6:	e7ca      	b.n	800c57e <_free_r+0x26>
 800c5e8:	b003      	add	sp, #12
 800c5ea:	bd30      	pop	{r4, r5, pc}
 800c5ec:	2000ade0 	.word	0x2000ade0

0800c5f0 <__ssputs_r>:
 800c5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f4:	688e      	ldr	r6, [r1, #8]
 800c5f6:	429e      	cmp	r6, r3
 800c5f8:	4682      	mov	sl, r0
 800c5fa:	460c      	mov	r4, r1
 800c5fc:	4690      	mov	r8, r2
 800c5fe:	461f      	mov	r7, r3
 800c600:	d838      	bhi.n	800c674 <__ssputs_r+0x84>
 800c602:	898a      	ldrh	r2, [r1, #12]
 800c604:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c608:	d032      	beq.n	800c670 <__ssputs_r+0x80>
 800c60a:	6825      	ldr	r5, [r4, #0]
 800c60c:	6909      	ldr	r1, [r1, #16]
 800c60e:	eba5 0901 	sub.w	r9, r5, r1
 800c612:	6965      	ldr	r5, [r4, #20]
 800c614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c618:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c61c:	3301      	adds	r3, #1
 800c61e:	444b      	add	r3, r9
 800c620:	106d      	asrs	r5, r5, #1
 800c622:	429d      	cmp	r5, r3
 800c624:	bf38      	it	cc
 800c626:	461d      	movcc	r5, r3
 800c628:	0553      	lsls	r3, r2, #21
 800c62a:	d531      	bpl.n	800c690 <__ssputs_r+0xa0>
 800c62c:	4629      	mov	r1, r5
 800c62e:	f7ff fe49 	bl	800c2c4 <_malloc_r>
 800c632:	4606      	mov	r6, r0
 800c634:	b950      	cbnz	r0, 800c64c <__ssputs_r+0x5c>
 800c636:	230c      	movs	r3, #12
 800c638:	f8ca 3000 	str.w	r3, [sl]
 800c63c:	89a3      	ldrh	r3, [r4, #12]
 800c63e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c642:	81a3      	strh	r3, [r4, #12]
 800c644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c64c:	6921      	ldr	r1, [r4, #16]
 800c64e:	464a      	mov	r2, r9
 800c650:	f7ff fe02 	bl	800c258 <memcpy>
 800c654:	89a3      	ldrh	r3, [r4, #12]
 800c656:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c65a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c65e:	81a3      	strh	r3, [r4, #12]
 800c660:	6126      	str	r6, [r4, #16]
 800c662:	6165      	str	r5, [r4, #20]
 800c664:	444e      	add	r6, r9
 800c666:	eba5 0509 	sub.w	r5, r5, r9
 800c66a:	6026      	str	r6, [r4, #0]
 800c66c:	60a5      	str	r5, [r4, #8]
 800c66e:	463e      	mov	r6, r7
 800c670:	42be      	cmp	r6, r7
 800c672:	d900      	bls.n	800c676 <__ssputs_r+0x86>
 800c674:	463e      	mov	r6, r7
 800c676:	6820      	ldr	r0, [r4, #0]
 800c678:	4632      	mov	r2, r6
 800c67a:	4641      	mov	r1, r8
 800c67c:	f000 faa8 	bl	800cbd0 <memmove>
 800c680:	68a3      	ldr	r3, [r4, #8]
 800c682:	1b9b      	subs	r3, r3, r6
 800c684:	60a3      	str	r3, [r4, #8]
 800c686:	6823      	ldr	r3, [r4, #0]
 800c688:	4433      	add	r3, r6
 800c68a:	6023      	str	r3, [r4, #0]
 800c68c:	2000      	movs	r0, #0
 800c68e:	e7db      	b.n	800c648 <__ssputs_r+0x58>
 800c690:	462a      	mov	r2, r5
 800c692:	f000 fab7 	bl	800cc04 <_realloc_r>
 800c696:	4606      	mov	r6, r0
 800c698:	2800      	cmp	r0, #0
 800c69a:	d1e1      	bne.n	800c660 <__ssputs_r+0x70>
 800c69c:	6921      	ldr	r1, [r4, #16]
 800c69e:	4650      	mov	r0, sl
 800c6a0:	f7ff ff5a 	bl	800c558 <_free_r>
 800c6a4:	e7c7      	b.n	800c636 <__ssputs_r+0x46>
	...

0800c6a8 <_svfiprintf_r>:
 800c6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	4698      	mov	r8, r3
 800c6ae:	898b      	ldrh	r3, [r1, #12]
 800c6b0:	061b      	lsls	r3, r3, #24
 800c6b2:	b09d      	sub	sp, #116	; 0x74
 800c6b4:	4607      	mov	r7, r0
 800c6b6:	460d      	mov	r5, r1
 800c6b8:	4614      	mov	r4, r2
 800c6ba:	d50e      	bpl.n	800c6da <_svfiprintf_r+0x32>
 800c6bc:	690b      	ldr	r3, [r1, #16]
 800c6be:	b963      	cbnz	r3, 800c6da <_svfiprintf_r+0x32>
 800c6c0:	2140      	movs	r1, #64	; 0x40
 800c6c2:	f7ff fdff 	bl	800c2c4 <_malloc_r>
 800c6c6:	6028      	str	r0, [r5, #0]
 800c6c8:	6128      	str	r0, [r5, #16]
 800c6ca:	b920      	cbnz	r0, 800c6d6 <_svfiprintf_r+0x2e>
 800c6cc:	230c      	movs	r3, #12
 800c6ce:	603b      	str	r3, [r7, #0]
 800c6d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6d4:	e0d1      	b.n	800c87a <_svfiprintf_r+0x1d2>
 800c6d6:	2340      	movs	r3, #64	; 0x40
 800c6d8:	616b      	str	r3, [r5, #20]
 800c6da:	2300      	movs	r3, #0
 800c6dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c6de:	2320      	movs	r3, #32
 800c6e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6e8:	2330      	movs	r3, #48	; 0x30
 800c6ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c894 <_svfiprintf_r+0x1ec>
 800c6ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6f2:	f04f 0901 	mov.w	r9, #1
 800c6f6:	4623      	mov	r3, r4
 800c6f8:	469a      	mov	sl, r3
 800c6fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6fe:	b10a      	cbz	r2, 800c704 <_svfiprintf_r+0x5c>
 800c700:	2a25      	cmp	r2, #37	; 0x25
 800c702:	d1f9      	bne.n	800c6f8 <_svfiprintf_r+0x50>
 800c704:	ebba 0b04 	subs.w	fp, sl, r4
 800c708:	d00b      	beq.n	800c722 <_svfiprintf_r+0x7a>
 800c70a:	465b      	mov	r3, fp
 800c70c:	4622      	mov	r2, r4
 800c70e:	4629      	mov	r1, r5
 800c710:	4638      	mov	r0, r7
 800c712:	f7ff ff6d 	bl	800c5f0 <__ssputs_r>
 800c716:	3001      	adds	r0, #1
 800c718:	f000 80aa 	beq.w	800c870 <_svfiprintf_r+0x1c8>
 800c71c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c71e:	445a      	add	r2, fp
 800c720:	9209      	str	r2, [sp, #36]	; 0x24
 800c722:	f89a 3000 	ldrb.w	r3, [sl]
 800c726:	2b00      	cmp	r3, #0
 800c728:	f000 80a2 	beq.w	800c870 <_svfiprintf_r+0x1c8>
 800c72c:	2300      	movs	r3, #0
 800c72e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c736:	f10a 0a01 	add.w	sl, sl, #1
 800c73a:	9304      	str	r3, [sp, #16]
 800c73c:	9307      	str	r3, [sp, #28]
 800c73e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c742:	931a      	str	r3, [sp, #104]	; 0x68
 800c744:	4654      	mov	r4, sl
 800c746:	2205      	movs	r2, #5
 800c748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c74c:	4851      	ldr	r0, [pc, #324]	; (800c894 <_svfiprintf_r+0x1ec>)
 800c74e:	f7f3 fd4f 	bl	80001f0 <memchr>
 800c752:	9a04      	ldr	r2, [sp, #16]
 800c754:	b9d8      	cbnz	r0, 800c78e <_svfiprintf_r+0xe6>
 800c756:	06d0      	lsls	r0, r2, #27
 800c758:	bf44      	itt	mi
 800c75a:	2320      	movmi	r3, #32
 800c75c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c760:	0711      	lsls	r1, r2, #28
 800c762:	bf44      	itt	mi
 800c764:	232b      	movmi	r3, #43	; 0x2b
 800c766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c76a:	f89a 3000 	ldrb.w	r3, [sl]
 800c76e:	2b2a      	cmp	r3, #42	; 0x2a
 800c770:	d015      	beq.n	800c79e <_svfiprintf_r+0xf6>
 800c772:	9a07      	ldr	r2, [sp, #28]
 800c774:	4654      	mov	r4, sl
 800c776:	2000      	movs	r0, #0
 800c778:	f04f 0c0a 	mov.w	ip, #10
 800c77c:	4621      	mov	r1, r4
 800c77e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c782:	3b30      	subs	r3, #48	; 0x30
 800c784:	2b09      	cmp	r3, #9
 800c786:	d94e      	bls.n	800c826 <_svfiprintf_r+0x17e>
 800c788:	b1b0      	cbz	r0, 800c7b8 <_svfiprintf_r+0x110>
 800c78a:	9207      	str	r2, [sp, #28]
 800c78c:	e014      	b.n	800c7b8 <_svfiprintf_r+0x110>
 800c78e:	eba0 0308 	sub.w	r3, r0, r8
 800c792:	fa09 f303 	lsl.w	r3, r9, r3
 800c796:	4313      	orrs	r3, r2
 800c798:	9304      	str	r3, [sp, #16]
 800c79a:	46a2      	mov	sl, r4
 800c79c:	e7d2      	b.n	800c744 <_svfiprintf_r+0x9c>
 800c79e:	9b03      	ldr	r3, [sp, #12]
 800c7a0:	1d19      	adds	r1, r3, #4
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	9103      	str	r1, [sp, #12]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	bfbb      	ittet	lt
 800c7aa:	425b      	neglt	r3, r3
 800c7ac:	f042 0202 	orrlt.w	r2, r2, #2
 800c7b0:	9307      	strge	r3, [sp, #28]
 800c7b2:	9307      	strlt	r3, [sp, #28]
 800c7b4:	bfb8      	it	lt
 800c7b6:	9204      	strlt	r2, [sp, #16]
 800c7b8:	7823      	ldrb	r3, [r4, #0]
 800c7ba:	2b2e      	cmp	r3, #46	; 0x2e
 800c7bc:	d10c      	bne.n	800c7d8 <_svfiprintf_r+0x130>
 800c7be:	7863      	ldrb	r3, [r4, #1]
 800c7c0:	2b2a      	cmp	r3, #42	; 0x2a
 800c7c2:	d135      	bne.n	800c830 <_svfiprintf_r+0x188>
 800c7c4:	9b03      	ldr	r3, [sp, #12]
 800c7c6:	1d1a      	adds	r2, r3, #4
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	9203      	str	r2, [sp, #12]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	bfb8      	it	lt
 800c7d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c7d4:	3402      	adds	r4, #2
 800c7d6:	9305      	str	r3, [sp, #20]
 800c7d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c8a4 <_svfiprintf_r+0x1fc>
 800c7dc:	7821      	ldrb	r1, [r4, #0]
 800c7de:	2203      	movs	r2, #3
 800c7e0:	4650      	mov	r0, sl
 800c7e2:	f7f3 fd05 	bl	80001f0 <memchr>
 800c7e6:	b140      	cbz	r0, 800c7fa <_svfiprintf_r+0x152>
 800c7e8:	2340      	movs	r3, #64	; 0x40
 800c7ea:	eba0 000a 	sub.w	r0, r0, sl
 800c7ee:	fa03 f000 	lsl.w	r0, r3, r0
 800c7f2:	9b04      	ldr	r3, [sp, #16]
 800c7f4:	4303      	orrs	r3, r0
 800c7f6:	3401      	adds	r4, #1
 800c7f8:	9304      	str	r3, [sp, #16]
 800c7fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7fe:	4826      	ldr	r0, [pc, #152]	; (800c898 <_svfiprintf_r+0x1f0>)
 800c800:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c804:	2206      	movs	r2, #6
 800c806:	f7f3 fcf3 	bl	80001f0 <memchr>
 800c80a:	2800      	cmp	r0, #0
 800c80c:	d038      	beq.n	800c880 <_svfiprintf_r+0x1d8>
 800c80e:	4b23      	ldr	r3, [pc, #140]	; (800c89c <_svfiprintf_r+0x1f4>)
 800c810:	bb1b      	cbnz	r3, 800c85a <_svfiprintf_r+0x1b2>
 800c812:	9b03      	ldr	r3, [sp, #12]
 800c814:	3307      	adds	r3, #7
 800c816:	f023 0307 	bic.w	r3, r3, #7
 800c81a:	3308      	adds	r3, #8
 800c81c:	9303      	str	r3, [sp, #12]
 800c81e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c820:	4433      	add	r3, r6
 800c822:	9309      	str	r3, [sp, #36]	; 0x24
 800c824:	e767      	b.n	800c6f6 <_svfiprintf_r+0x4e>
 800c826:	fb0c 3202 	mla	r2, ip, r2, r3
 800c82a:	460c      	mov	r4, r1
 800c82c:	2001      	movs	r0, #1
 800c82e:	e7a5      	b.n	800c77c <_svfiprintf_r+0xd4>
 800c830:	2300      	movs	r3, #0
 800c832:	3401      	adds	r4, #1
 800c834:	9305      	str	r3, [sp, #20]
 800c836:	4619      	mov	r1, r3
 800c838:	f04f 0c0a 	mov.w	ip, #10
 800c83c:	4620      	mov	r0, r4
 800c83e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c842:	3a30      	subs	r2, #48	; 0x30
 800c844:	2a09      	cmp	r2, #9
 800c846:	d903      	bls.n	800c850 <_svfiprintf_r+0x1a8>
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d0c5      	beq.n	800c7d8 <_svfiprintf_r+0x130>
 800c84c:	9105      	str	r1, [sp, #20]
 800c84e:	e7c3      	b.n	800c7d8 <_svfiprintf_r+0x130>
 800c850:	fb0c 2101 	mla	r1, ip, r1, r2
 800c854:	4604      	mov	r4, r0
 800c856:	2301      	movs	r3, #1
 800c858:	e7f0      	b.n	800c83c <_svfiprintf_r+0x194>
 800c85a:	ab03      	add	r3, sp, #12
 800c85c:	9300      	str	r3, [sp, #0]
 800c85e:	462a      	mov	r2, r5
 800c860:	4b0f      	ldr	r3, [pc, #60]	; (800c8a0 <_svfiprintf_r+0x1f8>)
 800c862:	a904      	add	r1, sp, #16
 800c864:	4638      	mov	r0, r7
 800c866:	f3af 8000 	nop.w
 800c86a:	1c42      	adds	r2, r0, #1
 800c86c:	4606      	mov	r6, r0
 800c86e:	d1d6      	bne.n	800c81e <_svfiprintf_r+0x176>
 800c870:	89ab      	ldrh	r3, [r5, #12]
 800c872:	065b      	lsls	r3, r3, #25
 800c874:	f53f af2c 	bmi.w	800c6d0 <_svfiprintf_r+0x28>
 800c878:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c87a:	b01d      	add	sp, #116	; 0x74
 800c87c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c880:	ab03      	add	r3, sp, #12
 800c882:	9300      	str	r3, [sp, #0]
 800c884:	462a      	mov	r2, r5
 800c886:	4b06      	ldr	r3, [pc, #24]	; (800c8a0 <_svfiprintf_r+0x1f8>)
 800c888:	a904      	add	r1, sp, #16
 800c88a:	4638      	mov	r0, r7
 800c88c:	f000 f87a 	bl	800c984 <_printf_i>
 800c890:	e7eb      	b.n	800c86a <_svfiprintf_r+0x1c2>
 800c892:	bf00      	nop
 800c894:	0800cf44 	.word	0x0800cf44
 800c898:	0800cf4e 	.word	0x0800cf4e
 800c89c:	00000000 	.word	0x00000000
 800c8a0:	0800c5f1 	.word	0x0800c5f1
 800c8a4:	0800cf4a 	.word	0x0800cf4a

0800c8a8 <_printf_common>:
 800c8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8ac:	4616      	mov	r6, r2
 800c8ae:	4699      	mov	r9, r3
 800c8b0:	688a      	ldr	r2, [r1, #8]
 800c8b2:	690b      	ldr	r3, [r1, #16]
 800c8b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	bfb8      	it	lt
 800c8bc:	4613      	movlt	r3, r2
 800c8be:	6033      	str	r3, [r6, #0]
 800c8c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c8c4:	4607      	mov	r7, r0
 800c8c6:	460c      	mov	r4, r1
 800c8c8:	b10a      	cbz	r2, 800c8ce <_printf_common+0x26>
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	6033      	str	r3, [r6, #0]
 800c8ce:	6823      	ldr	r3, [r4, #0]
 800c8d0:	0699      	lsls	r1, r3, #26
 800c8d2:	bf42      	ittt	mi
 800c8d4:	6833      	ldrmi	r3, [r6, #0]
 800c8d6:	3302      	addmi	r3, #2
 800c8d8:	6033      	strmi	r3, [r6, #0]
 800c8da:	6825      	ldr	r5, [r4, #0]
 800c8dc:	f015 0506 	ands.w	r5, r5, #6
 800c8e0:	d106      	bne.n	800c8f0 <_printf_common+0x48>
 800c8e2:	f104 0a19 	add.w	sl, r4, #25
 800c8e6:	68e3      	ldr	r3, [r4, #12]
 800c8e8:	6832      	ldr	r2, [r6, #0]
 800c8ea:	1a9b      	subs	r3, r3, r2
 800c8ec:	42ab      	cmp	r3, r5
 800c8ee:	dc26      	bgt.n	800c93e <_printf_common+0x96>
 800c8f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c8f4:	1e13      	subs	r3, r2, #0
 800c8f6:	6822      	ldr	r2, [r4, #0]
 800c8f8:	bf18      	it	ne
 800c8fa:	2301      	movne	r3, #1
 800c8fc:	0692      	lsls	r2, r2, #26
 800c8fe:	d42b      	bmi.n	800c958 <_printf_common+0xb0>
 800c900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c904:	4649      	mov	r1, r9
 800c906:	4638      	mov	r0, r7
 800c908:	47c0      	blx	r8
 800c90a:	3001      	adds	r0, #1
 800c90c:	d01e      	beq.n	800c94c <_printf_common+0xa4>
 800c90e:	6823      	ldr	r3, [r4, #0]
 800c910:	68e5      	ldr	r5, [r4, #12]
 800c912:	6832      	ldr	r2, [r6, #0]
 800c914:	f003 0306 	and.w	r3, r3, #6
 800c918:	2b04      	cmp	r3, #4
 800c91a:	bf08      	it	eq
 800c91c:	1aad      	subeq	r5, r5, r2
 800c91e:	68a3      	ldr	r3, [r4, #8]
 800c920:	6922      	ldr	r2, [r4, #16]
 800c922:	bf0c      	ite	eq
 800c924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c928:	2500      	movne	r5, #0
 800c92a:	4293      	cmp	r3, r2
 800c92c:	bfc4      	itt	gt
 800c92e:	1a9b      	subgt	r3, r3, r2
 800c930:	18ed      	addgt	r5, r5, r3
 800c932:	2600      	movs	r6, #0
 800c934:	341a      	adds	r4, #26
 800c936:	42b5      	cmp	r5, r6
 800c938:	d11a      	bne.n	800c970 <_printf_common+0xc8>
 800c93a:	2000      	movs	r0, #0
 800c93c:	e008      	b.n	800c950 <_printf_common+0xa8>
 800c93e:	2301      	movs	r3, #1
 800c940:	4652      	mov	r2, sl
 800c942:	4649      	mov	r1, r9
 800c944:	4638      	mov	r0, r7
 800c946:	47c0      	blx	r8
 800c948:	3001      	adds	r0, #1
 800c94a:	d103      	bne.n	800c954 <_printf_common+0xac>
 800c94c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c954:	3501      	adds	r5, #1
 800c956:	e7c6      	b.n	800c8e6 <_printf_common+0x3e>
 800c958:	18e1      	adds	r1, r4, r3
 800c95a:	1c5a      	adds	r2, r3, #1
 800c95c:	2030      	movs	r0, #48	; 0x30
 800c95e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c962:	4422      	add	r2, r4
 800c964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c96c:	3302      	adds	r3, #2
 800c96e:	e7c7      	b.n	800c900 <_printf_common+0x58>
 800c970:	2301      	movs	r3, #1
 800c972:	4622      	mov	r2, r4
 800c974:	4649      	mov	r1, r9
 800c976:	4638      	mov	r0, r7
 800c978:	47c0      	blx	r8
 800c97a:	3001      	adds	r0, #1
 800c97c:	d0e6      	beq.n	800c94c <_printf_common+0xa4>
 800c97e:	3601      	adds	r6, #1
 800c980:	e7d9      	b.n	800c936 <_printf_common+0x8e>
	...

0800c984 <_printf_i>:
 800c984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c988:	7e0f      	ldrb	r7, [r1, #24]
 800c98a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c98c:	2f78      	cmp	r7, #120	; 0x78
 800c98e:	4691      	mov	r9, r2
 800c990:	4680      	mov	r8, r0
 800c992:	460c      	mov	r4, r1
 800c994:	469a      	mov	sl, r3
 800c996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c99a:	d807      	bhi.n	800c9ac <_printf_i+0x28>
 800c99c:	2f62      	cmp	r7, #98	; 0x62
 800c99e:	d80a      	bhi.n	800c9b6 <_printf_i+0x32>
 800c9a0:	2f00      	cmp	r7, #0
 800c9a2:	f000 80d8 	beq.w	800cb56 <_printf_i+0x1d2>
 800c9a6:	2f58      	cmp	r7, #88	; 0x58
 800c9a8:	f000 80a3 	beq.w	800caf2 <_printf_i+0x16e>
 800c9ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c9b4:	e03a      	b.n	800ca2c <_printf_i+0xa8>
 800c9b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c9ba:	2b15      	cmp	r3, #21
 800c9bc:	d8f6      	bhi.n	800c9ac <_printf_i+0x28>
 800c9be:	a101      	add	r1, pc, #4	; (adr r1, 800c9c4 <_printf_i+0x40>)
 800c9c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c9c4:	0800ca1d 	.word	0x0800ca1d
 800c9c8:	0800ca31 	.word	0x0800ca31
 800c9cc:	0800c9ad 	.word	0x0800c9ad
 800c9d0:	0800c9ad 	.word	0x0800c9ad
 800c9d4:	0800c9ad 	.word	0x0800c9ad
 800c9d8:	0800c9ad 	.word	0x0800c9ad
 800c9dc:	0800ca31 	.word	0x0800ca31
 800c9e0:	0800c9ad 	.word	0x0800c9ad
 800c9e4:	0800c9ad 	.word	0x0800c9ad
 800c9e8:	0800c9ad 	.word	0x0800c9ad
 800c9ec:	0800c9ad 	.word	0x0800c9ad
 800c9f0:	0800cb3d 	.word	0x0800cb3d
 800c9f4:	0800ca61 	.word	0x0800ca61
 800c9f8:	0800cb1f 	.word	0x0800cb1f
 800c9fc:	0800c9ad 	.word	0x0800c9ad
 800ca00:	0800c9ad 	.word	0x0800c9ad
 800ca04:	0800cb5f 	.word	0x0800cb5f
 800ca08:	0800c9ad 	.word	0x0800c9ad
 800ca0c:	0800ca61 	.word	0x0800ca61
 800ca10:	0800c9ad 	.word	0x0800c9ad
 800ca14:	0800c9ad 	.word	0x0800c9ad
 800ca18:	0800cb27 	.word	0x0800cb27
 800ca1c:	682b      	ldr	r3, [r5, #0]
 800ca1e:	1d1a      	adds	r2, r3, #4
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	602a      	str	r2, [r5, #0]
 800ca24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ca28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ca2c:	2301      	movs	r3, #1
 800ca2e:	e0a3      	b.n	800cb78 <_printf_i+0x1f4>
 800ca30:	6820      	ldr	r0, [r4, #0]
 800ca32:	6829      	ldr	r1, [r5, #0]
 800ca34:	0606      	lsls	r6, r0, #24
 800ca36:	f101 0304 	add.w	r3, r1, #4
 800ca3a:	d50a      	bpl.n	800ca52 <_printf_i+0xce>
 800ca3c:	680e      	ldr	r6, [r1, #0]
 800ca3e:	602b      	str	r3, [r5, #0]
 800ca40:	2e00      	cmp	r6, #0
 800ca42:	da03      	bge.n	800ca4c <_printf_i+0xc8>
 800ca44:	232d      	movs	r3, #45	; 0x2d
 800ca46:	4276      	negs	r6, r6
 800ca48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca4c:	485e      	ldr	r0, [pc, #376]	; (800cbc8 <_printf_i+0x244>)
 800ca4e:	230a      	movs	r3, #10
 800ca50:	e019      	b.n	800ca86 <_printf_i+0x102>
 800ca52:	680e      	ldr	r6, [r1, #0]
 800ca54:	602b      	str	r3, [r5, #0]
 800ca56:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca5a:	bf18      	it	ne
 800ca5c:	b236      	sxthne	r6, r6
 800ca5e:	e7ef      	b.n	800ca40 <_printf_i+0xbc>
 800ca60:	682b      	ldr	r3, [r5, #0]
 800ca62:	6820      	ldr	r0, [r4, #0]
 800ca64:	1d19      	adds	r1, r3, #4
 800ca66:	6029      	str	r1, [r5, #0]
 800ca68:	0601      	lsls	r1, r0, #24
 800ca6a:	d501      	bpl.n	800ca70 <_printf_i+0xec>
 800ca6c:	681e      	ldr	r6, [r3, #0]
 800ca6e:	e002      	b.n	800ca76 <_printf_i+0xf2>
 800ca70:	0646      	lsls	r6, r0, #25
 800ca72:	d5fb      	bpl.n	800ca6c <_printf_i+0xe8>
 800ca74:	881e      	ldrh	r6, [r3, #0]
 800ca76:	4854      	ldr	r0, [pc, #336]	; (800cbc8 <_printf_i+0x244>)
 800ca78:	2f6f      	cmp	r7, #111	; 0x6f
 800ca7a:	bf0c      	ite	eq
 800ca7c:	2308      	moveq	r3, #8
 800ca7e:	230a      	movne	r3, #10
 800ca80:	2100      	movs	r1, #0
 800ca82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca86:	6865      	ldr	r5, [r4, #4]
 800ca88:	60a5      	str	r5, [r4, #8]
 800ca8a:	2d00      	cmp	r5, #0
 800ca8c:	bfa2      	ittt	ge
 800ca8e:	6821      	ldrge	r1, [r4, #0]
 800ca90:	f021 0104 	bicge.w	r1, r1, #4
 800ca94:	6021      	strge	r1, [r4, #0]
 800ca96:	b90e      	cbnz	r6, 800ca9c <_printf_i+0x118>
 800ca98:	2d00      	cmp	r5, #0
 800ca9a:	d04d      	beq.n	800cb38 <_printf_i+0x1b4>
 800ca9c:	4615      	mov	r5, r2
 800ca9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800caa2:	fb03 6711 	mls	r7, r3, r1, r6
 800caa6:	5dc7      	ldrb	r7, [r0, r7]
 800caa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800caac:	4637      	mov	r7, r6
 800caae:	42bb      	cmp	r3, r7
 800cab0:	460e      	mov	r6, r1
 800cab2:	d9f4      	bls.n	800ca9e <_printf_i+0x11a>
 800cab4:	2b08      	cmp	r3, #8
 800cab6:	d10b      	bne.n	800cad0 <_printf_i+0x14c>
 800cab8:	6823      	ldr	r3, [r4, #0]
 800caba:	07de      	lsls	r6, r3, #31
 800cabc:	d508      	bpl.n	800cad0 <_printf_i+0x14c>
 800cabe:	6923      	ldr	r3, [r4, #16]
 800cac0:	6861      	ldr	r1, [r4, #4]
 800cac2:	4299      	cmp	r1, r3
 800cac4:	bfde      	ittt	le
 800cac6:	2330      	movle	r3, #48	; 0x30
 800cac8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cacc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cad0:	1b52      	subs	r2, r2, r5
 800cad2:	6122      	str	r2, [r4, #16]
 800cad4:	f8cd a000 	str.w	sl, [sp]
 800cad8:	464b      	mov	r3, r9
 800cada:	aa03      	add	r2, sp, #12
 800cadc:	4621      	mov	r1, r4
 800cade:	4640      	mov	r0, r8
 800cae0:	f7ff fee2 	bl	800c8a8 <_printf_common>
 800cae4:	3001      	adds	r0, #1
 800cae6:	d14c      	bne.n	800cb82 <_printf_i+0x1fe>
 800cae8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800caec:	b004      	add	sp, #16
 800caee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf2:	4835      	ldr	r0, [pc, #212]	; (800cbc8 <_printf_i+0x244>)
 800caf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800caf8:	6829      	ldr	r1, [r5, #0]
 800cafa:	6823      	ldr	r3, [r4, #0]
 800cafc:	f851 6b04 	ldr.w	r6, [r1], #4
 800cb00:	6029      	str	r1, [r5, #0]
 800cb02:	061d      	lsls	r5, r3, #24
 800cb04:	d514      	bpl.n	800cb30 <_printf_i+0x1ac>
 800cb06:	07df      	lsls	r7, r3, #31
 800cb08:	bf44      	itt	mi
 800cb0a:	f043 0320 	orrmi.w	r3, r3, #32
 800cb0e:	6023      	strmi	r3, [r4, #0]
 800cb10:	b91e      	cbnz	r6, 800cb1a <_printf_i+0x196>
 800cb12:	6823      	ldr	r3, [r4, #0]
 800cb14:	f023 0320 	bic.w	r3, r3, #32
 800cb18:	6023      	str	r3, [r4, #0]
 800cb1a:	2310      	movs	r3, #16
 800cb1c:	e7b0      	b.n	800ca80 <_printf_i+0xfc>
 800cb1e:	6823      	ldr	r3, [r4, #0]
 800cb20:	f043 0320 	orr.w	r3, r3, #32
 800cb24:	6023      	str	r3, [r4, #0]
 800cb26:	2378      	movs	r3, #120	; 0x78
 800cb28:	4828      	ldr	r0, [pc, #160]	; (800cbcc <_printf_i+0x248>)
 800cb2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cb2e:	e7e3      	b.n	800caf8 <_printf_i+0x174>
 800cb30:	0659      	lsls	r1, r3, #25
 800cb32:	bf48      	it	mi
 800cb34:	b2b6      	uxthmi	r6, r6
 800cb36:	e7e6      	b.n	800cb06 <_printf_i+0x182>
 800cb38:	4615      	mov	r5, r2
 800cb3a:	e7bb      	b.n	800cab4 <_printf_i+0x130>
 800cb3c:	682b      	ldr	r3, [r5, #0]
 800cb3e:	6826      	ldr	r6, [r4, #0]
 800cb40:	6961      	ldr	r1, [r4, #20]
 800cb42:	1d18      	adds	r0, r3, #4
 800cb44:	6028      	str	r0, [r5, #0]
 800cb46:	0635      	lsls	r5, r6, #24
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	d501      	bpl.n	800cb50 <_printf_i+0x1cc>
 800cb4c:	6019      	str	r1, [r3, #0]
 800cb4e:	e002      	b.n	800cb56 <_printf_i+0x1d2>
 800cb50:	0670      	lsls	r0, r6, #25
 800cb52:	d5fb      	bpl.n	800cb4c <_printf_i+0x1c8>
 800cb54:	8019      	strh	r1, [r3, #0]
 800cb56:	2300      	movs	r3, #0
 800cb58:	6123      	str	r3, [r4, #16]
 800cb5a:	4615      	mov	r5, r2
 800cb5c:	e7ba      	b.n	800cad4 <_printf_i+0x150>
 800cb5e:	682b      	ldr	r3, [r5, #0]
 800cb60:	1d1a      	adds	r2, r3, #4
 800cb62:	602a      	str	r2, [r5, #0]
 800cb64:	681d      	ldr	r5, [r3, #0]
 800cb66:	6862      	ldr	r2, [r4, #4]
 800cb68:	2100      	movs	r1, #0
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	f7f3 fb40 	bl	80001f0 <memchr>
 800cb70:	b108      	cbz	r0, 800cb76 <_printf_i+0x1f2>
 800cb72:	1b40      	subs	r0, r0, r5
 800cb74:	6060      	str	r0, [r4, #4]
 800cb76:	6863      	ldr	r3, [r4, #4]
 800cb78:	6123      	str	r3, [r4, #16]
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb80:	e7a8      	b.n	800cad4 <_printf_i+0x150>
 800cb82:	6923      	ldr	r3, [r4, #16]
 800cb84:	462a      	mov	r2, r5
 800cb86:	4649      	mov	r1, r9
 800cb88:	4640      	mov	r0, r8
 800cb8a:	47d0      	blx	sl
 800cb8c:	3001      	adds	r0, #1
 800cb8e:	d0ab      	beq.n	800cae8 <_printf_i+0x164>
 800cb90:	6823      	ldr	r3, [r4, #0]
 800cb92:	079b      	lsls	r3, r3, #30
 800cb94:	d413      	bmi.n	800cbbe <_printf_i+0x23a>
 800cb96:	68e0      	ldr	r0, [r4, #12]
 800cb98:	9b03      	ldr	r3, [sp, #12]
 800cb9a:	4298      	cmp	r0, r3
 800cb9c:	bfb8      	it	lt
 800cb9e:	4618      	movlt	r0, r3
 800cba0:	e7a4      	b.n	800caec <_printf_i+0x168>
 800cba2:	2301      	movs	r3, #1
 800cba4:	4632      	mov	r2, r6
 800cba6:	4649      	mov	r1, r9
 800cba8:	4640      	mov	r0, r8
 800cbaa:	47d0      	blx	sl
 800cbac:	3001      	adds	r0, #1
 800cbae:	d09b      	beq.n	800cae8 <_printf_i+0x164>
 800cbb0:	3501      	adds	r5, #1
 800cbb2:	68e3      	ldr	r3, [r4, #12]
 800cbb4:	9903      	ldr	r1, [sp, #12]
 800cbb6:	1a5b      	subs	r3, r3, r1
 800cbb8:	42ab      	cmp	r3, r5
 800cbba:	dcf2      	bgt.n	800cba2 <_printf_i+0x21e>
 800cbbc:	e7eb      	b.n	800cb96 <_printf_i+0x212>
 800cbbe:	2500      	movs	r5, #0
 800cbc0:	f104 0619 	add.w	r6, r4, #25
 800cbc4:	e7f5      	b.n	800cbb2 <_printf_i+0x22e>
 800cbc6:	bf00      	nop
 800cbc8:	0800cf55 	.word	0x0800cf55
 800cbcc:	0800cf66 	.word	0x0800cf66

0800cbd0 <memmove>:
 800cbd0:	4288      	cmp	r0, r1
 800cbd2:	b510      	push	{r4, lr}
 800cbd4:	eb01 0402 	add.w	r4, r1, r2
 800cbd8:	d902      	bls.n	800cbe0 <memmove+0x10>
 800cbda:	4284      	cmp	r4, r0
 800cbdc:	4623      	mov	r3, r4
 800cbde:	d807      	bhi.n	800cbf0 <memmove+0x20>
 800cbe0:	1e43      	subs	r3, r0, #1
 800cbe2:	42a1      	cmp	r1, r4
 800cbe4:	d008      	beq.n	800cbf8 <memmove+0x28>
 800cbe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbee:	e7f8      	b.n	800cbe2 <memmove+0x12>
 800cbf0:	4402      	add	r2, r0
 800cbf2:	4601      	mov	r1, r0
 800cbf4:	428a      	cmp	r2, r1
 800cbf6:	d100      	bne.n	800cbfa <memmove+0x2a>
 800cbf8:	bd10      	pop	{r4, pc}
 800cbfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc02:	e7f7      	b.n	800cbf4 <memmove+0x24>

0800cc04 <_realloc_r>:
 800cc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc08:	4680      	mov	r8, r0
 800cc0a:	4614      	mov	r4, r2
 800cc0c:	460e      	mov	r6, r1
 800cc0e:	b921      	cbnz	r1, 800cc1a <_realloc_r+0x16>
 800cc10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc14:	4611      	mov	r1, r2
 800cc16:	f7ff bb55 	b.w	800c2c4 <_malloc_r>
 800cc1a:	b92a      	cbnz	r2, 800cc28 <_realloc_r+0x24>
 800cc1c:	f7ff fc9c 	bl	800c558 <_free_r>
 800cc20:	4625      	mov	r5, r4
 800cc22:	4628      	mov	r0, r5
 800cc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc28:	f000 f81b 	bl	800cc62 <_malloc_usable_size_r>
 800cc2c:	4284      	cmp	r4, r0
 800cc2e:	4607      	mov	r7, r0
 800cc30:	d802      	bhi.n	800cc38 <_realloc_r+0x34>
 800cc32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cc36:	d812      	bhi.n	800cc5e <_realloc_r+0x5a>
 800cc38:	4621      	mov	r1, r4
 800cc3a:	4640      	mov	r0, r8
 800cc3c:	f7ff fb42 	bl	800c2c4 <_malloc_r>
 800cc40:	4605      	mov	r5, r0
 800cc42:	2800      	cmp	r0, #0
 800cc44:	d0ed      	beq.n	800cc22 <_realloc_r+0x1e>
 800cc46:	42bc      	cmp	r4, r7
 800cc48:	4622      	mov	r2, r4
 800cc4a:	4631      	mov	r1, r6
 800cc4c:	bf28      	it	cs
 800cc4e:	463a      	movcs	r2, r7
 800cc50:	f7ff fb02 	bl	800c258 <memcpy>
 800cc54:	4631      	mov	r1, r6
 800cc56:	4640      	mov	r0, r8
 800cc58:	f7ff fc7e 	bl	800c558 <_free_r>
 800cc5c:	e7e1      	b.n	800cc22 <_realloc_r+0x1e>
 800cc5e:	4635      	mov	r5, r6
 800cc60:	e7df      	b.n	800cc22 <_realloc_r+0x1e>

0800cc62 <_malloc_usable_size_r>:
 800cc62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc66:	1f18      	subs	r0, r3, #4
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	bfbc      	itt	lt
 800cc6c:	580b      	ldrlt	r3, [r1, r0]
 800cc6e:	18c0      	addlt	r0, r0, r3
 800cc70:	4770      	bx	lr
	...

0800cc74 <_init>:
 800cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc76:	bf00      	nop
 800cc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc7a:	bc08      	pop	{r3}
 800cc7c:	469e      	mov	lr, r3
 800cc7e:	4770      	bx	lr

0800cc80 <_fini>:
 800cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc82:	bf00      	nop
 800cc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc86:	bc08      	pop	{r3}
 800cc88:	469e      	mov	lr, r3
 800cc8a:	4770      	bx	lr
