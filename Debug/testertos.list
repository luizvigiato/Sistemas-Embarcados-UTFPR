
testertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010334  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011cc  080104d4  080104d4  000204d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116a0  080116a0  00030170  2**0
                  CONTENTS
  4 .ARM          00000008  080116a0  080116a0  000216a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116a8  080116a8  00030170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116a8  080116a8  000216a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080116ac  080116ac  000216ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  080116b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b9d8  20000170  08011820  00030170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000bb48  08011820  0003bb48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002551a  00000000  00000000  000301a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055e6  00000000  00000000  000556ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd8  00000000  00000000  0005aca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001af0  00000000  00000000  0005c978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000969d  00000000  00000000  0005e468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021c84  00000000  00000000  00067b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a950e  00000000  00000000  00089789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  00132c97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000802c  00000000  00000000  00132d58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002316  00000000  00000000  0013ad84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000170 	.word	0x20000170
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080104bc 	.word	0x080104bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000174 	.word	0x20000174
 80001dc:	080104bc 	.word	0x080104bc

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <strcmp>:
 80002a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002a8:	2a01      	cmp	r2, #1
 80002aa:	bf28      	it	cs
 80002ac:	429a      	cmpcs	r2, r3
 80002ae:	d0f7      	beq.n	80002a0 <strcmp>
 80002b0:	1ad0      	subs	r0, r2, r3
 80002b2:	4770      	bx	lr

080002b4 <strlen>:
 80002b4:	4603      	mov	r3, r0
 80002b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ba:	2a00      	cmp	r2, #0
 80002bc:	d1fb      	bne.n	80002b6 <strlen+0x2>
 80002be:	1a18      	subs	r0, r3, r0
 80002c0:	3801      	subs	r0, #1
 80002c2:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	3c01      	subs	r4, #1
 80004ac:	bf28      	it	cs
 80004ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004b2:	d2e9      	bcs.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468e      	mov	lr, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14d      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4694      	mov	ip, r2
 8000bee:	d969      	bls.n	8000cc4 <__udivmoddi4+0xe8>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b152      	cbz	r2, 8000c0c <__udivmoddi4+0x30>
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	f1c2 0120 	rsb	r1, r2, #32
 8000bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000c02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c06:	ea41 0e03 	orr.w	lr, r1, r3
 8000c0a:	4094      	lsls	r4, r2
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	0c21      	lsrs	r1, r4, #16
 8000c12:	fbbe f6f8 	udiv	r6, lr, r8
 8000c16:	fa1f f78c 	uxth.w	r7, ip
 8000c1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c22:	fb06 f107 	mul.w	r1, r6, r7
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c32:	f080 811f 	bcs.w	8000e74 <__udivmoddi4+0x298>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 811c 	bls.w	8000e74 <__udivmoddi4+0x298>
 8000c3c:	3e02      	subs	r6, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x92>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c60:	f080 810a 	bcs.w	8000e78 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8107 	bls.w	8000e78 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c72:	1be4      	subs	r4, r4, r7
 8000c74:	2600      	movs	r6, #0
 8000c76:	b11d      	cbz	r5, 8000c80 <__udivmoddi4+0xa4>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xc2>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80ef 	beq.w	8000e6e <__udivmoddi4+0x292>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x160>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd4>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80f9 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	469e      	mov	lr, r3
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa4>
 8000cbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xec>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 8092 	bne.w	8000df6 <__udivmoddi4+0x21a>
 8000cd2:	eba1 010c 	sub.w	r1, r1, ip
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb0e f003 	mul.w	r0, lr, r3
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x12c>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x12a>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2c0>
 8000d06:	4643      	mov	r3, r8
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d10:	fb07 1110 	mls	r1, r7, r0, r1
 8000d14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x156>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x154>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2ca>
 8000d30:	4608      	mov	r0, r1
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3a:	e79c      	b.n	8000c76 <__udivmoddi4+0x9a>
 8000d3c:	f1c6 0720 	rsb	r7, r6, #32
 8000d40:	40b3      	lsls	r3, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	431c      	orrs	r4, r3
 8000d54:	40f9      	lsrs	r1, r7
 8000d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d62:	0c20      	lsrs	r0, r4, #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	fb08 f00e 	mul.w	r0, r8, lr
 8000d74:	4288      	cmp	r0, r1
 8000d76:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b8>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2bc>
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2bc>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000da0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	458e      	cmp	lr, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1e2>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2b4>
 8000db6:	458e      	cmp	lr, r1
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2b4>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc6:	eba1 010e 	sub.w	r1, r1, lr
 8000dca:	42a1      	cmp	r1, r4
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46a6      	mov	lr, r4
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x2a4>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x2a0>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x212>
 8000dd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dda:	eb61 010e 	sbc.w	r1, r1, lr
 8000dde:	fa01 f707 	lsl.w	r7, r1, r7
 8000de2:	fa22 f306 	lsr.w	r3, r2, r6
 8000de6:	40f1      	lsrs	r1, r6
 8000de8:	431f      	orrs	r7, r3
 8000dea:	e9c5 7100 	strd	r7, r1, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	40d8      	lsrs	r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa21 f303 	lsr.w	r3, r1, r3
 8000e04:	4091      	lsls	r1, r2
 8000e06:	4301      	orrs	r1, r0
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e14:	fb07 3610 	mls	r6, r7, r0, r3
 8000e18:	0c0b      	lsrs	r3, r1, #16
 8000e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e22:	429e      	cmp	r6, r3
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x260>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b8>
 8000e34:	429e      	cmp	r6, r3
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b8>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1b9b      	subs	r3, r3, r6
 8000e3e:	b289      	uxth	r1, r1
 8000e40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e44:	fb07 3316 	mls	r3, r7, r6, r3
 8000e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x28a>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e62:	3e02      	subs	r6, #2
 8000e64:	4461      	add	r1, ip
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0x104>
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e705      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e3      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6f8      	b.n	8000c6e <__udivmoddi4+0x92>
 8000e7c:	454b      	cmp	r3, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x28a>
 8000e90:	4620      	mov	r0, r4
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1e2>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b8>
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x12c>
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	e709      	b.n	8000cba <__udivmoddi4+0xde>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x156>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d10a      	bne.n	8000ed8 <FreeRTOS_CLIRegisterCommand+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ec6:	f383 8811 	msr	BASEPRI, r3
 8000eca:	f3bf 8f6f 	isb	sy
 8000ece:	f3bf 8f4f 	dsb	sy
 8000ed2:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ed4:	bf00      	nop
 8000ed6:	e7fe      	b.n	8000ed6 <FreeRTOS_CLIRegisterCommand+0x26>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 8000ed8:	2008      	movs	r0, #8
 8000eda:	f00c fb0d 	bl	800d4f8 <pvPortMalloc>
 8000ede:	6138      	str	r0, [r7, #16]
	configASSERT( pxNewListItem );
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10a      	bne.n	8000efc <FreeRTOS_CLIRegisterCommand+0x4c>
	__asm volatile
 8000ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eea:	f383 8811 	msr	BASEPRI, r3
 8000eee:	f3bf 8f6f 	isb	sy
 8000ef2:	f3bf 8f4f 	dsb	sy
 8000ef6:	60bb      	str	r3, [r7, #8]
}
 8000ef8:	bf00      	nop
 8000efa:	e7fe      	b.n	8000efa <FreeRTOS_CLIRegisterCommand+0x4a>

	if( pxNewListItem != NULL )
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d012      	beq.n	8000f28 <FreeRTOS_CLIRegisterCommand+0x78>
	{
		taskENTER_CRITICAL();
 8000f02:	f00c f9d7 	bl	800d2b4 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <FreeRTOS_CLIRegisterCommand+0x84>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 8000f1a:	4a06      	ldr	r2, [pc, #24]	; (8000f34 <FreeRTOS_CLIRegisterCommand+0x84>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	6013      	str	r3, [r2, #0]
		}
		taskEXIT_CRITICAL();
 8000f20:	f00c f9f8 	bl	800d314 <vPortExitCritical>

		xReturn = pdPASS;
 8000f24:	2301      	movs	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8000f28:	697b      	ldr	r3, [r7, #20]
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000008 	.word	0x20000008

08000f38 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 8000f48:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d141      	bne.n	8000fd4 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000f50:	4b38      	ldr	r3, [pc, #224]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f52:	4a39      	ldr	r2, [pc, #228]	; (8001038 <FreeRTOS_CLIProcessCommand+0x100>)
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	e037      	b.n	8000fc8 <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8000f58:	4b36      	ldr	r3, [pc, #216]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8000f62:	69b8      	ldr	r0, [r7, #24]
 8000f64:	f7ff f9a6 	bl	80002b4 <strlen>
 8000f68:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	69b9      	ldr	r1, [r7, #24]
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f00e fc74 	bl	800f85c <strncmp>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d121      	bne.n	8000fbe <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	4413      	add	r3, r2
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b20      	cmp	r3, #32
 8000f84:	d005      	beq.n	8000f92 <FreeRTOS_CLIProcessCommand+0x5a>
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d115      	bne.n	8000fbe <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8000f92:	4b28      	ldr	r3, [pc, #160]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db18      	blt.n	8000fd2 <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f000 f8d7 	bl	8001154 <prvGetNumberOfParameters>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d00c      	beq.n	8000fd2 <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
 8000fbc:	e009      	b.n	8000fd2 <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8000fbe:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fc6:	6013      	str	r3, [r2, #0]
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d1c3      	bne.n	8000f58 <FreeRTOS_CLIProcessCommand+0x20>
 8000fd0:	e000      	b.n	8000fd4 <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 8000fd2:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d00b      	beq.n	8000ff4 <FreeRTOS_CLIProcessCommand+0xbc>
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d108      	bne.n	8000ff4 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4915      	ldr	r1, [pc, #84]	; (800103c <FreeRTOS_CLIProcessCommand+0x104>)
 8000fe6:	68b8      	ldr	r0, [r7, #8]
 8000fe8:	f00e fc4c 	bl	800f884 <strncpy>
		pxCommand = NULL;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	e01a      	b.n	800102a <FreeRTOS_CLIProcessCommand+0xf2>
	}
	else if( pxCommand != NULL )
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00f      	beq.n	800101c <FreeRTOS_CLIProcessCommand+0xe4>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	68b8      	ldr	r0, [r7, #8]
 800100a:	4798      	blx	r3
 800100c:	61f8      	str	r0, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10a      	bne.n	800102a <FreeRTOS_CLIProcessCommand+0xf2>
		{
			pxCommand = NULL;
 8001014:	4b07      	ldr	r3, [pc, #28]	; (8001034 <FreeRTOS_CLIProcessCommand+0xfc>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	e006      	b.n	800102a <FreeRTOS_CLIProcessCommand+0xf2>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <FreeRTOS_CLIProcessCommand+0x108>)
 8001020:	68b8      	ldr	r0, [r7, #8]
 8001022:	f00e fc2f 	bl	800f884 <strncpy>
		xReturn = pdFALSE;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
 800102a:	69fb      	ldr	r3, [r7, #28]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3720      	adds	r7, #32
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000018c 	.word	0x2000018c
 8001038:	20000000 	.word	0x20000000
 800103c:	0801050c 	.word	0x0801050c
 8001040:	08010564 	.word	0x08010564

08001044 <FreeRTOS_CLIGetParameter>:
	return cOutputBuffer;
}
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
UBaseType_t uxParametersFound = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
const char *pcReturn = NULL;
 8001054:	2300      	movs	r3, #0
 8001056:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 800105e:	e03b      	b.n	80010d8 <FreeRTOS_CLIGetParameter+0x94>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3301      	adds	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d007      	beq.n	800107e <FreeRTOS_CLIGetParameter+0x3a>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b20      	cmp	r3, #32
 8001074:	d1f4      	bne.n	8001060 <FreeRTOS_CLIGetParameter+0x1c>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001076:	e002      	b.n	800107e <FreeRTOS_CLIGetParameter+0x3a>
		{
			pcCommandString++;
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3301      	adds	r3, #1
 800107c:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <FreeRTOS_CLIGetParameter+0x4a>
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b20      	cmp	r3, #32
 800108c:	d0f4      	beq.n	8001078 <FreeRTOS_CLIGetParameter+0x34>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d025      	beq.n	80010e2 <FreeRTOS_CLIGetParameter+0x9e>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	3301      	adds	r3, #1
 800109a:	617b      	str	r3, [r7, #20]

			if( uxParametersFound == uxWantedParameter )
 800109c:	697a      	ldr	r2, [r7, #20]
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d119      	bne.n	80010d8 <FreeRTOS_CLIGetParameter+0x94>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80010a8:	e007      	b.n	80010ba <FreeRTOS_CLIGetParameter+0x76>
				{
					( *pxParameterStringLength )++;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	601a      	str	r2, [r3, #0]
					pcCommandString++;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <FreeRTOS_CLIGetParameter+0x86>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b20      	cmp	r3, #32
 80010c8:	d1ef      	bne.n	80010aa <FreeRTOS_CLIGetParameter+0x66>
				}

				if( *pxParameterStringLength == 0 )
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d109      	bne.n	80010e6 <FreeRTOS_CLIGetParameter+0xa2>
				{
					pcReturn = NULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
				}

				break;
 80010d6:	e006      	b.n	80010e6 <FreeRTOS_CLIGetParameter+0xa2>
	while( uxParametersFound < uxWantedParameter )
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d3c2      	bcc.n	8001066 <FreeRTOS_CLIGetParameter+0x22>
 80010e0:	e002      	b.n	80010e8 <FreeRTOS_CLIGetParameter+0xa4>
			}
		}
		else
		{
			break;
 80010e2:	bf00      	nop
 80010e4:	e000      	b.n	80010e8 <FreeRTOS_CLIGetParameter+0xa4>
				break;
 80010e6:	bf00      	nop
		}
	}

	return pcReturn;
 80010e8:	693b      	ldr	r3, [r7, #16]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	371c      	adds	r7, #28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
	...

080010f8 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <prvHelpCommand+0x54>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <prvHelpCommand+0x54>)
 800110e:	4a10      	ldr	r2, [pc, #64]	; (8001150 <prvHelpCommand+0x58>)
 8001110:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8001112:	4b0e      	ldr	r3, [pc, #56]	; (800114c <prvHelpCommand+0x54>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	4619      	mov	r1, r3
 800111e:	68f8      	ldr	r0, [r7, #12]
 8001120:	f00e fbb0 	bl	800f884 <strncpy>
	pxCommand = pxCommand->pxNext;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <prvHelpCommand+0x54>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <prvHelpCommand+0x54>)
 800112c:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <prvHelpCommand+0x54>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e001      	b.n	8001140 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 800113c:	2301      	movs	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001140:	697b      	ldr	r3, [r7, #20]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000190 	.word	0x20000190
 8001150:	20000000 	.word	0x20000000

08001154 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8001164:	e014      	b.n	8001190 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b20      	cmp	r3, #32
 800116c:	d10b      	bne.n	8001186 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d00a      	beq.n	800118a <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8001174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	3301      	adds	r3, #1
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8001180:	2301      	movs	r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	e001      	b.n	800118a <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8001186:	2300      	movs	r3, #0
 8001188:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3301      	adds	r3, #1
 800118e:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e6      	bne.n	8001166 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2b01      	cmp	r3, #1
 800119c:	d105      	bne.n	80011aa <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	3b01      	subs	r3, #1
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <task_led>:

float ReIm[256*2];
float mod[256];
float fase;

void task_led(void *param){
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b084      	sub	sp, #16
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *)param;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(led->port,led->pin);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	889b      	ldrh	r3, [r3, #4]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4610      	mov	r0, r2
 80011d2:	f002 f986 	bl	80034e2 <HAL_GPIO_TogglePin>
		vTaskDelay(led->timeout);
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	4618      	mov	r0, r3
 80011dc:	f00a f8c4 	bl	800b368 <vTaskDelay>
		HAL_GPIO_TogglePin(led->port,led->pin);
 80011e0:	e7f1      	b.n	80011c6 <task_led+0xc>
 80011e2:	0000      	movs	r0, r0
 80011e4:	0000      	movs	r0, r0
	...

080011e8 <task_adc>:
	}
}

void task_adc(void *param){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuffer, 256);
 80011f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011f4:	4940      	ldr	r1, [pc, #256]	; (80012f8 <task_adc+0x110>)
 80011f6:	4841      	ldr	r0, [pc, #260]	; (80012fc <task_adc+0x114>)
 80011f8:	f000 ffa6 	bl	8002148 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 80011fc:	4840      	ldr	r0, [pc, #256]	; (8001300 <task_adc+0x118>)
 80011fe:	f004 f887 	bl	8005310 <HAL_TIM_Base_Start>
	while(1){
		int k = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 256; i++){
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
 800120a:	e02a      	b.n	8001262 <task_adc+0x7a>
			ReIm[k] = (float) adcBuffer[i] * 0.0007326007;
 800120c:	4a3a      	ldr	r2, [pc, #232]	; (80012f8 <task_adc+0x110>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001214:	ee07 3a90 	vmov	s15, r3
 8001218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff fa0a 	bl	8000638 <__aeabi_f2d>
 8001224:	a330      	add	r3, pc, #192	; (adr r3, 80012e8 <task_adc+0x100>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff fa5d 	bl	80006e8 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	f7ff fc69 	bl	8000b0c <__aeabi_d2f>
 800123a:	4602      	mov	r2, r0
 800123c:	4931      	ldr	r1, [pc, #196]	; (8001304 <task_adc+0x11c>)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	440b      	add	r3, r1
 8001244:	601a      	str	r2, [r3, #0]
			ReIm[k+1] = 0.0;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	3301      	adds	r3, #1
 800124a:	4a2e      	ldr	r2, [pc, #184]	; (8001304 <task_adc+0x11c>)
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	601a      	str	r2, [r3, #0]
			k += 2;
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	3302      	adds	r3, #2
 800125a:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 256; i++){
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	3301      	adds	r3, #1
 8001260:	613b      	str	r3, [r7, #16]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	2bff      	cmp	r3, #255	; 0xff
 8001266:	ddd1      	ble.n	800120c <task_adc+0x24>
		}

		arm_cfft_f32(&arm_cfft_sR_f32_len256,ReIm,0,1);
 8001268:	2301      	movs	r3, #1
 800126a:	2200      	movs	r2, #0
 800126c:	4925      	ldr	r1, [pc, #148]	; (8001304 <task_adc+0x11c>)
 800126e:	4826      	ldr	r0, [pc, #152]	; (8001308 <task_adc+0x120>)
 8001270:	f00d fce4 	bl	800ec3c <arm_cfft_f32>
		arm_cmplx_mag_f32(ReIm,mod,256);
 8001274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001278:	4924      	ldr	r1, [pc, #144]	; (800130c <task_adc+0x124>)
 800127a:	4822      	ldr	r0, [pc, #136]	; (8001304 <task_adc+0x11c>)
 800127c:	f00d fd58 	bl	800ed30 <arm_cmplx_mag_f32>
		arm_scale_f32(mod, 0.0078125, mod, 128); /* vertor, por quem quero multiplicar, vetor final, quantos pontos */
 8001280:	2280      	movs	r2, #128	; 0x80
 8001282:	4922      	ldr	r1, [pc, #136]	; (800130c <task_adc+0x124>)
 8001284:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8001310 <task_adc+0x128>
 8001288:	4820      	ldr	r0, [pc, #128]	; (800130c <task_adc+0x124>)
 800128a:	f00d fe39 	bl	800ef00 <arm_scale_f32>

		volatile float fund_phase = atan2f(ReIm[3],ReIm[2])*180/M_PI;
 800128e:	4b1d      	ldr	r3, [pc, #116]	; (8001304 <task_adc+0x11c>)
 8001290:	edd3 7a03 	vldr	s15, [r3, #12]
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <task_adc+0x11c>)
 8001296:	ed93 7a02 	vldr	s14, [r3, #8]
 800129a:	eef0 0a47 	vmov.f32	s1, s14
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	f00e ff6a 	bl	801017a <atan2f>
 80012a6:	eef0 7a40 	vmov.f32	s15, s0
 80012aa:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001314 <task_adc+0x12c>
 80012ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b2:	ee17 0a90 	vmov	r0, s15
 80012b6:	f7ff f9bf 	bl	8000638 <__aeabi_f2d>
 80012ba:	a30d      	add	r3, pc, #52	; (adr r3, 80012f0 <task_adc+0x108>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff fb3c 	bl	800093c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff fc1e 	bl	8000b0c <__aeabi_d2f>
 80012d0:	4603      	mov	r3, r0
 80012d2:	60fb      	str	r3, [r7, #12]
		fase = fund_phase;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4a10      	ldr	r2, [pc, #64]	; (8001318 <task_adc+0x130>)
 80012d8:	6013      	str	r3, [r2, #0]
		vTaskDelay(5);
 80012da:	2005      	movs	r0, #5
 80012dc:	f00a f844 	bl	800b368 <vTaskDelay>
	while(1){
 80012e0:	e78f      	b.n	8001202 <task_adc+0x1a>
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	06155aeb 	.word	0x06155aeb
 80012ec:	3f480180 	.word	0x3f480180
 80012f0:	54442d18 	.word	0x54442d18
 80012f4:	400921fb 	.word	0x400921fb
 80012f8:	200002e0 	.word	0x200002e0
 80012fc:	20000194 	.word	0x20000194
 8001300:	2000023c 	.word	0x2000023c
 8001304:	200004e0 	.word	0x200004e0
 8001308:	0801092c 	.word	0x0801092c
 800130c:	20000ce0 	.word	0x20000ce0
 8001310:	3c000000 	.word	0x3c000000
 8001314:	43340000 	.word	0x43340000
 8001318:	200010e0 	.word	0x200010e0

0800131c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001322:	f000 fe37 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001326:	f000 f867 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132a:	f000 fa25 	bl	8001778 <MX_GPIO_Init>
  MX_DMA_Init();
 800132e:	f000 fa03 	bl	8001738 <MX_DMA_Init>
  MX_ADC1_Init();
 8001332:	f000 f8cd 	bl	80014d0 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001336:	f000 f91d 	bl	8001574 <MX_TIM2_Init>
  MX_TIM3_Init();
 800133a:	f000 f969 	bl	8001610 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800133e:	2100      	movs	r1, #0
 8001340:	4822      	ldr	r0, [pc, #136]	; (80013cc <main+0xb0>)
 8001342:	f004 f8bf 	bl	80054c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001346:	2104      	movs	r1, #4
 8001348:	4820      	ldr	r0, [pc, #128]	; (80013cc <main+0xb0>)
 800134a:	f004 f8bb 	bl	80054c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800134e:	2108      	movs	r1, #8
 8001350:	481e      	ldr	r0, [pc, #120]	; (80013cc <main+0xb0>)
 8001352:	f004 f8b7 	bl	80054c4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001356:	f008 fa73 	bl	8009840 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800135a:	4a1d      	ldr	r2, [pc, #116]	; (80013d0 <main+0xb4>)
 800135c:	2100      	movs	r1, #0
 800135e:	481d      	ldr	r0, [pc, #116]	; (80013d4 <main+0xb8>)
 8001360:	f008 fab8 	bl	80098d4 <osThreadNew>
 8001364:	4603      	mov	r3, r0
 8001366:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <main+0xbc>)
 8001368:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  green_led.timeout = 500;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <main+0xc0>)
 800136c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001370:	609a      	str	r2, [r3, #8]
  green_led.port = LED_GPIO_Port;
 8001372:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <main+0xc0>)
 8001374:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <main+0xc4>)
 8001376:	601a      	str	r2, [r3, #0]
  green_led.pin = LED_Pin;
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <main+0xc0>)
 800137a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800137e:	809a      	strh	r2, [r3, #4]
  rgb.red = 200;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <main+0xc8>)
 8001382:	22c8      	movs	r2, #200	; 0xc8
 8001384:	705a      	strb	r2, [r3, #1]
  rgb.green = 200;
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <main+0xc8>)
 8001388:	22c8      	movs	r2, #200	; 0xc8
 800138a:	709a      	strb	r2, [r3, #2]
  rgb.blue = 200;
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <main+0xc8>)
 800138e:	22c8      	movs	r2, #200	; 0xc8
 8001390:	70da      	strb	r2, [r3, #3]
  rgb.brilho = 200;
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <main+0xc8>)
 8001394:	22c8      	movs	r2, #200	; 0xc8
 8001396:	701a      	strb	r2, [r3, #0]
  xTaskCreate(task_led,"Tarefa Led",256, &green_led, 1, NULL);
 8001398:	2300      	movs	r3, #0
 800139a:	9301      	str	r3, [sp, #4]
 800139c:	2301      	movs	r3, #1
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <main+0xc0>)
 80013a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013a6:	4910      	ldr	r1, [pc, #64]	; (80013e8 <main+0xcc>)
 80013a8:	4810      	ldr	r0, [pc, #64]	; (80013ec <main+0xd0>)
 80013aa:	f009 fe82 	bl	800b0b2 <xTaskCreate>
  xTaskCreate(task_adc,"Tarefa ADC",256, &green_led, 2, NULL);
 80013ae:	2300      	movs	r3, #0
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	2302      	movs	r3, #2
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <main+0xc0>)
 80013b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013bc:	490c      	ldr	r1, [pc, #48]	; (80013f0 <main+0xd4>)
 80013be:	480d      	ldr	r0, [pc, #52]	; (80013f4 <main+0xd8>)
 80013c0:	f009 fe77 	bl	800b0b2 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013c4:	f008 fa60 	bl	8009888 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <main+0xac>
 80013ca:	bf00      	nop
 80013cc:	20000284 	.word	0x20000284
 80013d0:	080108b0 	.word	0x080108b0
 80013d4:	08001b89 	.word	0x08001b89
 80013d8:	200002cc 	.word	0x200002cc
 80013dc:	200002d0 	.word	0x200002d0
 80013e0:	40020800 	.word	0x40020800
 80013e4:	200002dc 	.word	0x200002dc
 80013e8:	080105c0 	.word	0x080105c0
 80013ec:	080011bb 	.word	0x080011bb
 80013f0:	080105cc 	.word	0x080105cc
 80013f4:	080011e9 	.word	0x080011e9

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b094      	sub	sp, #80	; 0x50
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2230      	movs	r2, #48	; 0x30
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f00e f8ea 	bl	800f5e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	f107 030c 	add.w	r3, r7, #12
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <SystemClock_Config+0xd0>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	4a28      	ldr	r2, [pc, #160]	; (80014c8 <SystemClock_Config+0xd0>)
 8001426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142a:	6413      	str	r3, [r2, #64]	; 0x40
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <SystemClock_Config+0xd0>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <SystemClock_Config+0xd4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001444:	4a21      	ldr	r2, [pc, #132]	; (80014cc <SystemClock_Config+0xd4>)
 8001446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	4b1f      	ldr	r3, [pc, #124]	; (80014cc <SystemClock_Config+0xd4>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001458:	2301      	movs	r3, #1
 800145a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800145c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001462:	2302      	movs	r3, #2
 8001464:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001466:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800146a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800146c:	2319      	movs	r3, #25
 800146e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001470:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001474:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001476:	2304      	movs	r3, #4
 8001478:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800147a:	2307      	movs	r3, #7
 800147c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	4618      	mov	r0, r3
 8001484:	f003 fac4 	bl	8004a10 <HAL_RCC_OscConfig>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800148e:	f000 fb9f 	bl	8001bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001492:	230f      	movs	r3, #15
 8001494:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001496:	2302      	movs	r3, #2
 8001498:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	2102      	movs	r1, #2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f003 fd26 	bl	8004f00 <HAL_RCC_ClockConfig>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80014ba:	f000 fb89 	bl	8001bd0 <Error_Handler>
  }
}
 80014be:	bf00      	nop
 80014c0:	3750      	adds	r7, #80	; 0x50
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40007000 	.word	0x40007000

080014d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014d6:	463b      	mov	r3, r7
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <MX_ADC1_Init+0x9c>)
 80014e4:	4a22      	ldr	r2, [pc, #136]	; (8001570 <MX_ADC1_Init+0xa0>)
 80014e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014e8:	4b20      	ldr	r3, [pc, #128]	; (800156c <MX_ADC1_Init+0x9c>)
 80014ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <MX_ADC1_Init+0x9c>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <MX_ADC1_Init+0x9c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	; (800156c <MX_ADC1_Init+0x9c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_ADC1_Init+0x9c>)
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800150a:	4b18      	ldr	r3, [pc, #96]	; (800156c <MX_ADC1_Init+0x9c>)
 800150c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001510:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <MX_ADC1_Init+0x9c>)
 8001514:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800151a:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_ADC1_Init+0x9c>)
 800151c:	2200      	movs	r2, #0
 800151e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001520:	4b12      	ldr	r3, [pc, #72]	; (800156c <MX_ADC1_Init+0x9c>)
 8001522:	2201      	movs	r2, #1
 8001524:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_ADC1_Init+0x9c>)
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_ADC1_Init+0x9c>)
 8001530:	2201      	movs	r2, #1
 8001532:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001534:	480d      	ldr	r0, [pc, #52]	; (800156c <MX_ADC1_Init+0x9c>)
 8001536:	f000 fdc3 	bl	80020c0 <HAL_ADC_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001540:	f000 fb46 	bl	8001bd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001544:	2301      	movs	r3, #1
 8001546:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001548:	2301      	movs	r3, #1
 800154a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001550:	463b      	mov	r3, r7
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_ADC1_Init+0x9c>)
 8001556:	f000 ff05 	bl	8002364 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001560:	f000 fb36 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20000194 	.word	0x20000194
 8001570:	40012000 	.word	0x40012000

08001574 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_TIM2_Init+0x94>)
 8001592:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001596:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001598:	4b1b      	ldr	r3, [pc, #108]	; (8001608 <MX_TIM2_Init+0x94>)
 800159a:	2200      	movs	r2, #0
 800159c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_TIM2_Init+0x94>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 21000000;
 80015a4:	4b18      	ldr	r3, [pc, #96]	; (8001608 <MX_TIM2_Init+0x94>)
 80015a6:	4a19      	ldr	r2, [pc, #100]	; (800160c <MX_TIM2_Init+0x98>)
 80015a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_TIM2_Init+0x94>)
 80015ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <MX_TIM2_Init+0x94>)
 80015b4:	2280      	movs	r2, #128	; 0x80
 80015b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015b8:	4813      	ldr	r0, [pc, #76]	; (8001608 <MX_TIM2_Init+0x94>)
 80015ba:	f003 fe59 	bl	8005270 <HAL_TIM_Base_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80015c4:	f000 fb04 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015ce:	f107 0308 	add.w	r3, r7, #8
 80015d2:	4619      	mov	r1, r3
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <MX_TIM2_Init+0x94>)
 80015d6:	f004 f8e7 	bl	80057a8 <HAL_TIM_ConfigClockSource>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015e0:	f000 faf6 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e4:	2300      	movs	r3, #0
 80015e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	4619      	mov	r1, r3
 80015f0:	4805      	ldr	r0, [pc, #20]	; (8001608 <MX_TIM2_Init+0x94>)
 80015f2:	f004 fc6d 	bl	8005ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015fc:	f000 fae8 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001600:	bf00      	nop
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000023c 	.word	0x2000023c
 800160c:	01406f40 	.word	0x01406f40

08001610 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08e      	sub	sp, #56	; 0x38
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001624:	f107 0320 	add.w	r3, r7, #32
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
 800163c:	615a      	str	r2, [r3, #20]
 800163e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001640:	4b3b      	ldr	r3, [pc, #236]	; (8001730 <MX_TIM3_Init+0x120>)
 8001642:	4a3c      	ldr	r2, [pc, #240]	; (8001734 <MX_TIM3_Init+0x124>)
 8001644:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <MX_TIM3_Init+0x120>)
 8001648:	2214      	movs	r2, #20
 800164a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164c:	4b38      	ldr	r3, [pc, #224]	; (8001730 <MX_TIM3_Init+0x120>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001652:	4b37      	ldr	r3, [pc, #220]	; (8001730 <MX_TIM3_Init+0x120>)
 8001654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001658:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800165a:	4b35      	ldr	r3, [pc, #212]	; (8001730 <MX_TIM3_Init+0x120>)
 800165c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001660:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001662:	4b33      	ldr	r3, [pc, #204]	; (8001730 <MX_TIM3_Init+0x120>)
 8001664:	2280      	movs	r2, #128	; 0x80
 8001666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001668:	4831      	ldr	r0, [pc, #196]	; (8001730 <MX_TIM3_Init+0x120>)
 800166a:	f003 fe01 	bl	8005270 <HAL_TIM_Base_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001674:	f000 faac 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800167e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001682:	4619      	mov	r1, r3
 8001684:	482a      	ldr	r0, [pc, #168]	; (8001730 <MX_TIM3_Init+0x120>)
 8001686:	f004 f88f 	bl	80057a8 <HAL_TIM_ConfigClockSource>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001690:	f000 fa9e 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001694:	4826      	ldr	r0, [pc, #152]	; (8001730 <MX_TIM3_Init+0x120>)
 8001696:	f003 febc 	bl	8005412 <HAL_TIM_PWM_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016a0:	f000 fa96 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016ac:	f107 0320 	add.w	r3, r7, #32
 80016b0:	4619      	mov	r1, r3
 80016b2:	481f      	ldr	r0, [pc, #124]	; (8001730 <MX_TIM3_Init+0x120>)
 80016b4:	f004 fc0c 	bl	8005ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80016be:	f000 fa87 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c2:	2360      	movs	r3, #96	; 0x60
 80016c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50000;
 80016c6:	f24c 3350 	movw	r3, #50000	; 0xc350
 80016ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	4619      	mov	r1, r3
 80016da:	4815      	ldr	r0, [pc, #84]	; (8001730 <MX_TIM3_Init+0x120>)
 80016dc:	f003 ffa2 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80016e6:	f000 fa73 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.Pulse = 32700;
 80016ea:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 80016ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2204      	movs	r2, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	480e      	ldr	r0, [pc, #56]	; (8001730 <MX_TIM3_Init+0x120>)
 80016f8:	f003 ff94 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8001702:	f000 fa65 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.Pulse = 20000;
 8001706:	f644 6320 	movw	r3, #20000	; 0x4e20
 800170a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2208      	movs	r2, #8
 8001710:	4619      	mov	r1, r3
 8001712:	4807      	ldr	r0, [pc, #28]	; (8001730 <MX_TIM3_Init+0x120>)
 8001714:	f003 ff86 	bl	8005624 <HAL_TIM_PWM_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM3_Init+0x112>
  {
    Error_Handler();
 800171e:	f000 fa57 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001722:	4803      	ldr	r0, [pc, #12]	; (8001730 <MX_TIM3_Init+0x120>)
 8001724:	f000 fb32 	bl	8001d8c <HAL_TIM_MspPostInit>

}
 8001728:	bf00      	nop
 800172a:	3738      	adds	r7, #56	; 0x38
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000284 	.word	0x20000284
 8001734:	40000400 	.word	0x40000400

08001738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_DMA_Init+0x3c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <MX_DMA_Init+0x3c>)
 8001748:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_DMA_Init+0x3c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2105      	movs	r1, #5
 800175e:	2038      	movs	r0, #56	; 0x38
 8001760:	f001 f97b 	bl	8002a5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001764:	2038      	movs	r0, #56	; 0x38
 8001766:	f001 f994 	bl	8002a92 <HAL_NVIC_EnableIRQ>

}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <MX_GPIO_Init+0xb8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a26      	ldr	r2, [pc, #152]	; (8001830 <MX_GPIO_Init+0xb8>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b24      	ldr	r3, [pc, #144]	; (8001830 <MX_GPIO_Init+0xb8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b20      	ldr	r3, [pc, #128]	; (8001830 <MX_GPIO_Init+0xb8>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a1f      	ldr	r2, [pc, #124]	; (8001830 <MX_GPIO_Init+0xb8>)
 80017b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <MX_GPIO_Init+0xb8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	4b19      	ldr	r3, [pc, #100]	; (8001830 <MX_GPIO_Init+0xb8>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a18      	ldr	r2, [pc, #96]	; (8001830 <MX_GPIO_Init+0xb8>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b16      	ldr	r3, [pc, #88]	; (8001830 <MX_GPIO_Init+0xb8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_GPIO_Init+0xb8>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a11      	ldr	r2, [pc, #68]	; (8001830 <MX_GPIO_Init+0xb8>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_GPIO_Init+0xb8>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001804:	480b      	ldr	r0, [pc, #44]	; (8001834 <MX_GPIO_Init+0xbc>)
 8001806:	f001 fe53 	bl	80034b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800180a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800180e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001810:	2301      	movs	r3, #1
 8001812:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_GPIO_Init+0xbc>)
 8001824:	f001 fcc0 	bl	80031a8 <HAL_GPIO_Init>

}
 8001828:	bf00      	nop
 800182a:	3728      	adds	r7, #40	; 0x28
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40020800 	.word	0x40020800

08001838 <prvTaskStatsCommand>:
//uint8_t buffer[128];
uint32_t len;

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout);

static BaseType_t prvTaskStatsCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]


        /* For simplicity, this function assumes the output buffer is large enough
        to hold all the text generated by executing the vTaskList() API function,
        so the xWriteBufferLen parameter is not used. */
        char *head = "Name\t\t\t\tState  Priority  Stack  Number\n\r";
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <prvTaskStatsCommand+0x34>)
 8001846:	617b      	str	r3, [r7, #20]
        ( void ) xWriteBufferLen;

        /* pcWriteBuffer is used directly as the vTaskList() parameter, so the table
        generated by executing vTaskList() is written directly into the output
        buffer. */
        strcpy(pcWriteBuffer, head);
 8001848:	6979      	ldr	r1, [r7, #20]
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f00d fffe 	bl	800f84c <strcpy>
        vTaskList( pcWriteBuffer + strlen(head));
 8001850:	6978      	ldr	r0, [r7, #20]
 8001852:	f7fe fd2f 	bl	80002b4 <strlen>
 8001856:	4602      	mov	r2, r0
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f00a fd87 	bl	800c370 <vTaskList>

        /* The entire table was written directly to the output buffer.  Execution
        of this command is complete, so return pdFALSE. */
        return pdFALSE;
 8001862:	2300      	movs	r3, #0
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	080105d8 	.word	0x080105d8

08001870 <prvTaskStatsTexto>:

static BaseType_t prvTaskStatsTexto( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8001870:	b4b0      	push	{r4, r5, r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
//	uint32_t teste;
//	teste = TIM3->CCR1;
	TIM3->CCR1 = 32000;
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);*/
	strcpy(pcWriteBuffer,(char*)"Este e um texto teste\r\n");
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4a08      	ldr	r2, [pc, #32]	; (80018a0 <prvTaskStatsTexto+0x30>)
 8001880:	461d      	mov	r5, r3
 8001882:	4614      	mov	r4, r2
 8001884:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001886:	6028      	str	r0, [r5, #0]
 8001888:	6069      	str	r1, [r5, #4]
 800188a:	60aa      	str	r2, [r5, #8]
 800188c:	60eb      	str	r3, [r5, #12]
 800188e:	cc03      	ldmia	r4!, {r0, r1}
 8001890:	6128      	str	r0, [r5, #16]
 8001892:	6169      	str	r1, [r5, #20]
	return pdFALSE;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	bcb0      	pop	{r4, r5, r7}
 800189e:	4770      	bx	lr
 80018a0:	08010604 	.word	0x08010604

080018a4 <prvTaskStatsRGB>:

static BaseType_t prvTaskStatsRGB( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 80018a4:	b5b0      	push	{r4, r5, r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	60b9      	str	r1, [r7, #8]
 80018ae:	607a      	str	r2, [r7, #4]
	const char *pcParameterAux;;
	BaseType_t xParameter1StringLength;
	char comando1[7];
	int16_t brilho;
	int16_t red,green,blue;
	comando1[0] = '\0';
 80018b0:	2300      	movs	r3, #0
 80018b2:	753b      	strb	r3, [r7, #20]
	pcParameter1 = FreeRTOS_CLIGetParameter
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	461a      	mov	r2, r3
 80018ba:	2101      	movs	r1, #1
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fbc1 	bl	8001044 <FreeRTOS_CLIGetParameter>
 80018c2:	62f8      	str	r0, [r7, #44]	; 0x2c
	                          1,
	                          /* Store the parameter string length. */
	                          &xParameter1StringLength
	                        );

	strncpy(comando1,pcParameter1,xParameter1StringLength);
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	461a      	mov	r2, r3
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00d ffd8 	bl	800f884 <strncpy>
	if(strcmp(comando1,(const char *)"on") == (int)0){
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4982      	ldr	r1, [pc, #520]	; (8001ae4 <prvTaskStatsRGB+0x240>)
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fce0 	bl	80002a0 <strcmp>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10d      	bne.n	8001902 <prvTaskStatsRGB+0x5e>
//		Habilitar o led RGB
//		Basicamente iniciar o TIM3
		HAL_TIM_Base_Start(&htim3);
 80018e6:	4880      	ldr	r0, [pc, #512]	; (8001ae8 <prvTaskStatsRGB+0x244>)
 80018e8:	f003 fd12 	bl	8005310 <HAL_TIM_Base_Start>
		strcpy(pcWriteBuffer,"Led Ligado \n\r");
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4a7f      	ldr	r2, [pc, #508]	; (8001aec <prvTaskStatsRGB+0x248>)
 80018f0:	461c      	mov	r4, r3
 80018f2:	4613      	mov	r3, r2
 80018f4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80018f6:	6020      	str	r0, [r4, #0]
 80018f8:	6061      	str	r1, [r4, #4]
 80018fa:	60a2      	str	r2, [r4, #8]
 80018fc:	881b      	ldrh	r3, [r3, #0]
 80018fe:	81a3      	strh	r3, [r4, #12]
 8001900:	e0cf      	b.n	8001aa2 <prvTaskStatsRGB+0x1fe>
	} else if(strcmp(comando1,(const char *)"off") == 0){
 8001902:	f107 0314 	add.w	r3, r7, #20
 8001906:	497a      	ldr	r1, [pc, #488]	; (8001af0 <prvTaskStatsRGB+0x24c>)
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fcc9 	bl	80002a0 <strcmp>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d10e      	bne.n	8001932 <prvTaskStatsRGB+0x8e>
//		Desabilitar o led RGB
//		Basicamente parar o TIM3
		HAL_TIM_Base_Stop(&htim3);
 8001914:	4874      	ldr	r0, [pc, #464]	; (8001ae8 <prvTaskStatsRGB+0x244>)
 8001916:	f003 fd55 	bl	80053c4 <HAL_TIM_Base_Stop>
		strcpy(pcWriteBuffer,"Led Desligado \n\r");
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4a75      	ldr	r2, [pc, #468]	; (8001af4 <prvTaskStatsRGB+0x250>)
 800191e:	461d      	mov	r5, r3
 8001920:	4614      	mov	r4, r2
 8001922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001924:	6028      	str	r0, [r5, #0]
 8001926:	6069      	str	r1, [r5, #4]
 8001928:	60aa      	str	r2, [r5, #8]
 800192a:	60eb      	str	r3, [r5, #12]
 800192c:	7823      	ldrb	r3, [r4, #0]
 800192e:	742b      	strb	r3, [r5, #16]
 8001930:	e0b7      	b.n	8001aa2 <prvTaskStatsRGB+0x1fe>
	} else if(strcmp(comando1,(const char *)"brilho") == 0){
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4970      	ldr	r1, [pc, #448]	; (8001af8 <prvTaskStatsRGB+0x254>)
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fcb1 	bl	80002a0 <strcmp>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d13c      	bne.n	80019be <prvTaskStatsRGB+0x11a>
//		calculo do brilho do led RGB

		pcParameterAux = FreeRTOS_CLIGetParameter
 8001944:	f107 031c 	add.w	r3, r7, #28
 8001948:	461a      	mov	r2, r3
 800194a:	2102      	movs	r1, #2
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fb79 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001952:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          2,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	461a      	mov	r2, r3
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800195e:	4618      	mov	r0, r3
 8001960:	f00d ff90 	bl	800f884 <strncpy>
		brilho = atoi(comando1);
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4618      	mov	r0, r3
 800196a:	f00d fde1 	bl	800f530 <atoi>
 800196e:	4603      	mov	r3, r0
 8001970:	843b      	strh	r3, [r7, #32]
		if(brilho >= 0 && brilho < 256){
 8001972:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db15      	blt.n	80019a6 <prvTaskStatsRGB+0x102>
 800197a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800197e:	2bff      	cmp	r3, #255	; 0xff
 8001980:	dc11      	bgt.n	80019a6 <prvTaskStatsRGB+0x102>
			rgb.brilho = brilho;
 8001982:	8c3b      	ldrh	r3, [r7, #32]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4b5d      	ldr	r3, [pc, #372]	; (8001afc <prvTaskStatsRGB+0x258>)
 8001988:	701a      	strb	r2, [r3, #0]
			strcpy(pcWriteBuffer,"Brilho redefinido \n\r");
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4a5c      	ldr	r2, [pc, #368]	; (8001b00 <prvTaskStatsRGB+0x25c>)
 800198e:	461d      	mov	r5, r3
 8001990:	4614      	mov	r4, r2
 8001992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001994:	6028      	str	r0, [r5, #0]
 8001996:	6069      	str	r1, [r5, #4]
 8001998:	60aa      	str	r2, [r5, #8]
 800199a:	60eb      	str	r3, [r5, #12]
 800199c:	6820      	ldr	r0, [r4, #0]
 800199e:	6128      	str	r0, [r5, #16]
 80019a0:	7923      	ldrb	r3, [r4, #4]
 80019a2:	752b      	strb	r3, [r5, #20]
 80019a4:	e07d      	b.n	8001aa2 <prvTaskStatsRGB+0x1fe>
		} else {
			strcpy(pcWriteBuffer,"Valor invalido \n\r");
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4a56      	ldr	r2, [pc, #344]	; (8001b04 <prvTaskStatsRGB+0x260>)
 80019aa:	461d      	mov	r5, r3
 80019ac:	4614      	mov	r4, r2
 80019ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b0:	6028      	str	r0, [r5, #0]
 80019b2:	6069      	str	r1, [r5, #4]
 80019b4:	60aa      	str	r2, [r5, #8]
 80019b6:	60eb      	str	r3, [r5, #12]
 80019b8:	8823      	ldrh	r3, [r4, #0]
 80019ba:	822b      	strh	r3, [r5, #16]
 80019bc:	e071      	b.n	8001aa2 <prvTaskStatsRGB+0x1fe>
		}

	} else if(strcmp(comando1,(const char *)"color") == 0){
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4951      	ldr	r1, [pc, #324]	; (8001b08 <prvTaskStatsRGB+0x264>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fc6b 	bl	80002a0 <strcmp>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d168      	bne.n	8001aa2 <prvTaskStatsRGB+0x1fe>
		pcParameterAux = FreeRTOS_CLIGetParameter
 80019d0:	f107 031c 	add.w	r3, r7, #28
 80019d4:	461a      	mov	r2, r3
 80019d6:	2102      	movs	r1, #2
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff fb33 	bl	8001044 <FreeRTOS_CLIGetParameter>
 80019de:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          2,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	461a      	mov	r2, r3
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019ea:	4618      	mov	r0, r3
 80019ec:	f00d ff4a 	bl	800f884 <strncpy>
		red = atoi(comando1);
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	4618      	mov	r0, r3
 80019f6:	f00d fd9b 	bl	800f530 <atoi>
 80019fa:	4603      	mov	r3, r0
 80019fc:	84fb      	strh	r3, [r7, #38]	; 0x26
		pcParameterAux = FreeRTOS_CLIGetParameter
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	461a      	mov	r2, r3
 8001a04:	2103      	movs	r1, #3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff fb1c 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001a0c:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          3,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	461a      	mov	r2, r3
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f00d ff33 	bl	800f884 <strncpy>
		green = atoi(comando1);
 8001a1e:	f107 0314 	add.w	r3, r7, #20
 8001a22:	4618      	mov	r0, r3
 8001a24:	f00d fd84 	bl	800f530 <atoi>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	84bb      	strh	r3, [r7, #36]	; 0x24
		pcParameterAux = FreeRTOS_CLIGetParameter
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	461a      	mov	r2, r3
 8001a32:	2104      	movs	r1, #4
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff fb05 	bl	8001044 <FreeRTOS_CLIGetParameter>
 8001a3a:	62b8      	str	r0, [r7, #40]	; 0x28
		                          /* Return the first parameter. */
		                          4,
		                          /* Store the parameter string length. */
		                          &xParameter1StringLength
		                        );
		strncpy(comando1,pcParameterAux,xParameter1StringLength);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a46:	4618      	mov	r0, r3
 8001a48:	f00d ff1c 	bl	800f884 <strncpy>
		blue = atoi(comando1);
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	4618      	mov	r0, r3
 8001a52:	f00d fd6d 	bl	800f530 <atoi>
 8001a56:	4603      	mov	r3, r0
 8001a58:	847b      	strh	r3, [r7, #34]	; 0x22
		if(blue >= 0 && blue < 256 && red >= 0 && red < 256 && blue >=0 && blue < 256){
 8001a5a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	db1f      	blt.n	8001aa2 <prvTaskStatsRGB+0x1fe>
 8001a62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001a66:	2bff      	cmp	r3, #255	; 0xff
 8001a68:	dc1b      	bgt.n	8001aa2 <prvTaskStatsRGB+0x1fe>
 8001a6a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	db17      	blt.n	8001aa2 <prvTaskStatsRGB+0x1fe>
 8001a72:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001a76:	2bff      	cmp	r3, #255	; 0xff
 8001a78:	dc13      	bgt.n	8001aa2 <prvTaskStatsRGB+0x1fe>
 8001a7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0f      	blt.n	8001aa2 <prvTaskStatsRGB+0x1fe>
 8001a82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001a86:	2bff      	cmp	r3, #255	; 0xff
 8001a88:	dc0b      	bgt.n	8001aa2 <prvTaskStatsRGB+0x1fe>
			rgb.blue = blue;
 8001a8a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <prvTaskStatsRGB+0x258>)
 8001a90:	70da      	strb	r2, [r3, #3]
			rgb.red = red;
 8001a92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b19      	ldr	r3, [pc, #100]	; (8001afc <prvTaskStatsRGB+0x258>)
 8001a98:	705a      	strb	r2, [r3, #1]
			rgb.green = green;
 8001a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4b17      	ldr	r3, [pc, #92]	; (8001afc <prvTaskStatsRGB+0x258>)
 8001aa0:	709a      	strb	r2, [r3, #2]
		}
	}
//	strcpy(pcWriteBuffer,valor);

	TIM3->CCR1 = rgb.brilho*rgb.red;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <prvTaskStatsRGB+0x258>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <prvTaskStatsRGB+0x258>)
 8001aaa:	785b      	ldrb	r3, [r3, #1]
 8001aac:	fb03 f202 	mul.w	r2, r3, r2
 8001ab0:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <prvTaskStatsRGB+0x268>)
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = rgb.brilho*rgb.green;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <prvTaskStatsRGB+0x258>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <prvTaskStatsRGB+0x258>)
 8001abc:	789b      	ldrb	r3, [r3, #2]
 8001abe:	fb03 f202 	mul.w	r2, r3, r2
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <prvTaskStatsRGB+0x268>)
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = rgb.brilho*rgb.blue;
 8001ac6:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <prvTaskStatsRGB+0x258>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <prvTaskStatsRGB+0x258>)
 8001ace:	78db      	ldrb	r3, [r3, #3]
 8001ad0:	fb03 f202 	mul.w	r2, r3, r2
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <prvTaskStatsRGB+0x268>)
 8001ad6:	63da      	str	r2, [r3, #60]	; 0x3c
	return pdFALSE;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3730      	adds	r7, #48	; 0x30
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	0801061c 	.word	0x0801061c
 8001ae8:	20000284 	.word	0x20000284
 8001aec:	08010620 	.word	0x08010620
 8001af0:	08010630 	.word	0x08010630
 8001af4:	08010634 	.word	0x08010634
 8001af8:	08010648 	.word	0x08010648
 8001afc:	200002dc 	.word	0x200002dc
 8001b00:	08010650 	.word	0x08010650
 8001b04:	08010668 	.word	0x08010668
 8001b08:	0801067c 	.word	0x0801067c
 8001b0c:	40000400 	.word	0x40000400

08001b10 <prvTaskStatsHarmonica>:


static BaseType_t prvTaskStatsHarmonica( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString ){
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
	strcpy(pcWriteBuffer,(char*)"Este e Harmonica XXXXX\r\n");
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <prvTaskStatsHarmonica+0x70>)
 8001b20:	461d      	mov	r5, r3
 8001b22:	4614      	mov	r4, r2
 8001b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b26:	6028      	str	r0, [r5, #0]
 8001b28:	6069      	str	r1, [r5, #4]
 8001b2a:	60aa      	str	r2, [r5, #8]
 8001b2c:	60eb      	str	r3, [r5, #12]
 8001b2e:	cc03      	ldmia	r4!, {r0, r1}
 8001b30:	6128      	str	r0, [r5, #16]
 8001b32:	6169      	str	r1, [r5, #20]
 8001b34:	7823      	ldrb	r3, [r4, #0]
 8001b36:	762b      	strb	r3, [r5, #24]
	char valor[15];
	int positivo = (int) fase*100;
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <prvTaskStatsHarmonica+0x74>)
 8001b3a:	edd3 7a00 	vldr	s15, [r3]
 8001b3e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b42:	ee17 2a90 	vmov	r2, s15
 8001b46:	2364      	movs	r3, #100	; 0x64
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	627b      	str	r3, [r7, #36]	; 0x24
	itoa(positivo,valor,10);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	220a      	movs	r2, #10
 8001b54:	4619      	mov	r1, r3
 8001b56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b58:	f00d fd30 	bl	800f5bc <itoa>
	strcpy(pcWriteBuffer + strlen(pcWriteBuffer),valor);
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f7fe fba9 	bl	80002b4 <strlen>
 8001b62:	4602      	mov	r2, r0
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	f107 0214 	add.w	r2, r7, #20
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f00d fe6c 	bl	800f84c <strcpy>
	return pdFALSE;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3728      	adds	r7, #40	; 0x28
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	08010684 	.word	0x08010684
 8001b84:	200010e0 	.word	0x200010e0

08001b88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b0a2      	sub	sp, #136	; 0x88
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001b90:	f00b fe9c 	bl	800d8cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 8001b94:	f00b feca 	bl	800d92c <init_usb_rtos_obj>

//  static uint8_t pcOutputString[ MAX_OUTPUT_LENGTH ], pcInputString[ MAX_INPUT_LENGTH ];

  FreeRTOS_CLIRegisterCommand( &xTasksCommand );
 8001b98:	4809      	ldr	r0, [pc, #36]	; (8001bc0 <StartDefaultTask+0x38>)
 8001b9a:	f7ff f989 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xTasksTexto );
 8001b9e:	4809      	ldr	r0, [pc, #36]	; (8001bc4 <StartDefaultTask+0x3c>)
 8001ba0:	f7ff f986 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xTasksRGB );
 8001ba4:	4808      	ldr	r0, [pc, #32]	; (8001bc8 <StartDefaultTask+0x40>)
 8001ba6:	f7ff f983 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xTasksHarmonica );
 8001baa:	4808      	ldr	r0, [pc, #32]	; (8001bcc <StartDefaultTask+0x44>)
 8001bac:	f7ff f980 	bl	8000eb0 <FreeRTOS_CLIRegisterCommand>

  char data[128];
  /* Infinite loop */
  for(;;)
  {
	  queue_print(data,1);
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f00b ff06 	bl	800d9c8 <queue_print>
 8001bbc:	e7f8      	b.n	8001bb0 <StartDefaultTask+0x28>
 8001bbe:	bf00      	nop
 8001bc0:	080108d4 	.word	0x080108d4
 8001bc4:	080108e4 	.word	0x080108e4
 8001bc8:	080108f4 	.word	0x080108f4
 8001bcc:	08010904 	.word	0x08010904

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <Error_Handler+0x8>
	...

08001bdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_MspInit+0x54>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a11      	ldr	r2, [pc, #68]	; (8001c30 <HAL_MspInit+0x54>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <HAL_MspInit+0x54>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_MspInit+0x54>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <HAL_MspInit+0x54>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_MspInit+0x54>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	210f      	movs	r1, #15
 8001c1e:	f06f 0001 	mvn.w	r0, #1
 8001c22:	f000 ff1a 	bl	8002a5a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800

08001c34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a2e      	ldr	r2, [pc, #184]	; (8001d0c <HAL_ADC_MspInit+0xd8>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d156      	bne.n	8001d04 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_ADC_MspInit+0xdc>)
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	4a2c      	ldr	r2, [pc, #176]	; (8001d10 <HAL_ADC_MspInit+0xdc>)
 8001c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c64:	6453      	str	r3, [r2, #68]	; 0x44
 8001c66:	4b2a      	ldr	r3, [pc, #168]	; (8001d10 <HAL_ADC_MspInit+0xdc>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	613b      	str	r3, [r7, #16]
 8001c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
 8001c76:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <HAL_ADC_MspInit+0xdc>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a25      	ldr	r2, [pc, #148]	; (8001d10 <HAL_ADC_MspInit+0xdc>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b23      	ldr	r3, [pc, #140]	; (8001d10 <HAL_ADC_MspInit+0xdc>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_Pin;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c92:	2303      	movs	r3, #3
 8001c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	481c      	ldr	r0, [pc, #112]	; (8001d14 <HAL_ADC_MspInit+0xe0>)
 8001ca2:	f001 fa81 	bl	80031a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ca6:	4b1c      	ldr	r3, [pc, #112]	; (8001d18 <HAL_ADC_MspInit+0xe4>)
 8001ca8:	4a1c      	ldr	r2, [pc, #112]	; (8001d1c <HAL_ADC_MspInit+0xe8>)
 8001caa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cac:	4b1a      	ldr	r3, [pc, #104]	; (8001d18 <HAL_ADC_MspInit+0xe4>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cb2:	4b19      	ldr	r3, [pc, #100]	; (8001d18 <HAL_ADC_MspInit+0xe4>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cb8:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <HAL_ADC_MspInit+0xe4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <HAL_ADC_MspInit+0xe4>)
 8001cc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cc4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <HAL_ADC_MspInit+0xe4>)
 8001cc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ccc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cce:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_ADC_MspInit+0xe4>)
 8001cd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_ADC_MspInit+0xe4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cdc:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_ADC_MspInit+0xe4>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_ADC_MspInit+0xe4>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ce8:	480b      	ldr	r0, [pc, #44]	; (8001d18 <HAL_ADC_MspInit+0xe4>)
 8001cea:	f000 feed 	bl	8002ac8 <HAL_DMA_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001cf4:	f7ff ff6c 	bl	8001bd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <HAL_ADC_MspInit+0xe4>)
 8001cfc:	639a      	str	r2, [r3, #56]	; 0x38
 8001cfe:	4a06      	ldr	r2, [pc, #24]	; (8001d18 <HAL_ADC_MspInit+0xe4>)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40012000 	.word	0x40012000
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020000 	.word	0x40020000
 8001d18:	200001dc 	.word	0x200001dc
 8001d1c:	40026410 	.word	0x40026410

08001d20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d30:	d10e      	bne.n	8001d50 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <HAL_TIM_Base_MspInit+0x64>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <HAL_TIM_Base_MspInit+0x64>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <HAL_TIM_Base_MspInit+0x64>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d4e:	e012      	b.n	8001d76 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <HAL_TIM_Base_MspInit+0x68>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10d      	bne.n	8001d76 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_TIM_Base_MspInit+0x64>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_TIM_Base_MspInit+0x64>)
 8001d64:	f043 0302 	orr.w	r3, r3, #2
 8001d68:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <HAL_TIM_Base_MspInit+0x64>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40000400 	.word	0x40000400

08001d8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b08a      	sub	sp, #40	; 0x28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a21      	ldr	r2, [pc, #132]	; (8001e30 <HAL_TIM_MspPostInit+0xa4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d13b      	bne.n	8001e26 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	613b      	str	r3, [r7, #16]
 8001db2:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <HAL_TIM_MspPostInit+0xa8>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a1f      	ldr	r2, [pc, #124]	; (8001e34 <HAL_TIM_MspPostInit+0xa8>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_TIM_MspPostInit+0xa8>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_TIM_MspPostInit+0xa8>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a18      	ldr	r2, [pc, #96]	; (8001e34 <HAL_TIM_MspPostInit+0xa8>)
 8001dd4:	f043 0302 	orr.w	r3, r3, #2
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <HAL_TIM_MspPostInit+0xa8>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	60fb      	str	r3, [r7, #12]
 8001de4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin;
 8001de6:	23c0      	movs	r3, #192	; 0xc0
 8001de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df2:	2300      	movs	r3, #0
 8001df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001df6:	2302      	movs	r3, #2
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	f107 0314 	add.w	r3, r7, #20
 8001dfe:	4619      	mov	r1, r3
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <HAL_TIM_MspPostInit+0xac>)
 8001e02:	f001 f9d1 	bl	80031a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BLUE_Pin;
 8001e06:	2301      	movs	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e16:	2302      	movs	r3, #2
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BLUE_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4806      	ldr	r0, [pc, #24]	; (8001e3c <HAL_TIM_MspPostInit+0xb0>)
 8001e22:	f001 f9c1 	bl	80031a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e26:	bf00      	nop
 8001e28:	3728      	adds	r7, #40	; 0x28
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400

08001e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <NMI_Handler+0x4>

08001e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <MemManage_Handler+0x4>

08001e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <BusFault_Handler+0x4>

08001e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <UsageFault_Handler+0x4>

08001e5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e70:	f000 f8e2 	bl	8002038 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001e74:	f00a f8e0 	bl	800c038 <xTaskGetSchedulerState>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d001      	beq.n	8001e82 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001e7e:	f00b faab 	bl	800d3d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
	...

08001e88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <DMA2_Stream0_IRQHandler+0x10>)
 8001e8e:	f000 ff21 	bl	8002cd4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200001dc 	.word	0x200001dc

08001e9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <OTG_FS_IRQHandler+0x10>)
 8001ea2:	f001 fc88 	bl	80037b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2000b40c 	.word	0x2000b40c

08001eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <_sbrk+0x5c>)
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <_sbrk+0x60>)
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <_sbrk+0x64>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <_sbrk+0x68>)
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d207      	bcs.n	8001ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee0:	f00d fb2a 	bl	800f538 <__errno>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eee:	e009      	b.n	8001f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <_sbrk+0x64>)
 8001f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20018000 	.word	0x20018000
 8001f10:	00000400 	.word	0x00000400
 8001f14:	200010e4 	.word	0x200010e4
 8001f18:	2000bb48 	.word	0x2000bb48

08001f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <SystemInit+0x20>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <SystemInit+0x20>)
 8001f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f44:	480d      	ldr	r0, [pc, #52]	; (8001f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f46:	490e      	ldr	r1, [pc, #56]	; (8001f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f48:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f4c:	e002      	b.n	8001f54 <LoopCopyDataInit>

08001f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f52:	3304      	adds	r3, #4

08001f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f58:	d3f9      	bcc.n	8001f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f5c:	4c0b      	ldr	r4, [pc, #44]	; (8001f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f60:	e001      	b.n	8001f66 <LoopFillZerobss>

08001f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f64:	3204      	adds	r2, #4

08001f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f68:	d3fb      	bcc.n	8001f62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f6a:	f7ff ffd7 	bl	8001f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6e:	f00d fae9 	bl	800f544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f72:	f7ff f9d3 	bl	800131c <main>
  bx  lr    
 8001f76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f80:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001f84:	080116b0 	.word	0x080116b0
  ldr r2, =_sbss
 8001f88:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001f8c:	2000bb48 	.word	0x2000bb48

08001f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <HAL_Init+0x40>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_Init+0x40>)
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_Init+0x40>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 fd41 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	200f      	movs	r0, #15
 8001fc4:	f000 f808 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff fe08 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x54>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x58>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fd59 	bl	8002aae <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002014:	f000 fd21 	bl	8002a5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_InitTick+0x5c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	2000000c 	.word	0x2000000c
 8002030:	20000014 	.word	0x20000014
 8002034:	20000010 	.word	0x20000010

08002038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x24>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_IncTick+0x24>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	20000014 	.word	0x20000014
 800205c:	200010e8 	.word	0x200010e8

08002060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_GetTick+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	200010e8 	.word	0x200010e8

08002078 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002080:	f7ff ffee 	bl	8002060 <HAL_GetTick>
 8002084:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002090:	d005      	beq.n	800209e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_Delay+0x44>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4413      	add	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800209e:	bf00      	nop
 80020a0:	f7ff ffde 	bl	8002060 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d8f7      	bhi.n	80020a0 <HAL_Delay+0x28>
  {
  }
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000014 	.word	0x20000014

080020c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e033      	b.n	800213e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff fda8 	bl	8001c34 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d118      	bne.n	8002130 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002106:	f023 0302 	bic.w	r3, r3, #2
 800210a:	f043 0202 	orr.w	r2, r3, #2
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fa48 	bl	80025a8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f023 0303 	bic.w	r3, r3, #3
 8002126:	f043 0201 	orr.w	r2, r3, #1
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
 800212e:	e001      	b.n	8002134 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800213c:	7bfb      	ldrb	r3, [r7, #15]
}
 800213e:	4618      	mov	r0, r3
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
	...

08002148 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_ADC_Start_DMA+0x1e>
 8002162:	2302      	movs	r3, #2
 8002164:	e0ce      	b.n	8002304 <HAL_ADC_Start_DMA+0x1bc>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b01      	cmp	r3, #1
 800217a:	d018      	beq.n	80021ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800218c:	4b5f      	ldr	r3, [pc, #380]	; (800230c <HAL_ADC_Start_DMA+0x1c4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a5f      	ldr	r2, [pc, #380]	; (8002310 <HAL_ADC_Start_DMA+0x1c8>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	0c9a      	lsrs	r2, r3, #18
 8002198:	4613      	mov	r3, r2
 800219a:	005b      	lsls	r3, r3, #1
 800219c:	4413      	add	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80021a0:	e002      	b.n	80021a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f9      	bne.n	80021a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021bc:	d107      	bne.n	80021ce <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	f040 8086 	bne.w	80022ea <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021e6:	f023 0301 	bic.w	r3, r3, #1
 80021ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d007      	beq.n	8002210 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002208:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800221c:	d106      	bne.n	800222c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002222:	f023 0206 	bic.w	r2, r3, #6
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	645a      	str	r2, [r3, #68]	; 0x44
 800222a:	e002      	b.n	8002232 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800223a:	4b36      	ldr	r3, [pc, #216]	; (8002314 <HAL_ADC_Start_DMA+0x1cc>)
 800223c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002242:	4a35      	ldr	r2, [pc, #212]	; (8002318 <HAL_ADC_Start_DMA+0x1d0>)
 8002244:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224a:	4a34      	ldr	r2, [pc, #208]	; (800231c <HAL_ADC_Start_DMA+0x1d4>)
 800224c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002252:	4a33      	ldr	r2, [pc, #204]	; (8002320 <HAL_ADC_Start_DMA+0x1d8>)
 8002254:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800225e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800226e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689a      	ldr	r2, [r3, #8]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800227e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	334c      	adds	r3, #76	; 0x4c
 800228a:	4619      	mov	r1, r3
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f000 fcc8 	bl	8002c24 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10f      	bne.n	80022c0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d129      	bne.n	8002302 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	e020      	b.n	8002302 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a17      	ldr	r2, [pc, #92]	; (8002324 <HAL_ADC_Start_DMA+0x1dc>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d11b      	bne.n	8002302 <HAL_ADC_Start_DMA+0x1ba>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d114      	bne.n	8002302 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	e00b      	b.n	8002302 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	2000000c 	.word	0x2000000c
 8002310:	431bde83 	.word	0x431bde83
 8002314:	40012300 	.word	0x40012300
 8002318:	080027a1 	.word	0x080027a1
 800231c:	0800285b 	.word	0x0800285b
 8002320:	08002877 	.word	0x08002877
 8002324:	40012000 	.word	0x40012000

08002328 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002378:	2b01      	cmp	r3, #1
 800237a:	d101      	bne.n	8002380 <HAL_ADC_ConfigChannel+0x1c>
 800237c:	2302      	movs	r3, #2
 800237e:	e105      	b.n	800258c <HAL_ADC_ConfigChannel+0x228>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b09      	cmp	r3, #9
 800238e:	d925      	bls.n	80023dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68d9      	ldr	r1, [r3, #12]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	b29b      	uxth	r3, r3
 800239c:	461a      	mov	r2, r3
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	3b1e      	subs	r3, #30
 80023a6:	2207      	movs	r2, #7
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43da      	mvns	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	400a      	ands	r2, r1
 80023b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68d9      	ldr	r1, [r3, #12]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4618      	mov	r0, r3
 80023c8:	4603      	mov	r3, r0
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4403      	add	r3, r0
 80023ce:	3b1e      	subs	r3, #30
 80023d0:	409a      	lsls	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	e022      	b.n	8002422 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6919      	ldr	r1, [r3, #16]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	4613      	mov	r3, r2
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	4413      	add	r3, r2
 80023f0:	2207      	movs	r2, #7
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	43da      	mvns	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	400a      	ands	r2, r1
 80023fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6919      	ldr	r1, [r3, #16]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	4618      	mov	r0, r3
 8002412:	4603      	mov	r3, r0
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	4403      	add	r3, r0
 8002418:	409a      	lsls	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b06      	cmp	r3, #6
 8002428:	d824      	bhi.n	8002474 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	3b05      	subs	r3, #5
 800243c:	221f      	movs	r2, #31
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	400a      	ands	r2, r1
 800244a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	4618      	mov	r0, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	4413      	add	r3, r2
 8002464:	3b05      	subs	r3, #5
 8002466:	fa00 f203 	lsl.w	r2, r0, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	635a      	str	r2, [r3, #52]	; 0x34
 8002472:	e04c      	b.n	800250e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b0c      	cmp	r3, #12
 800247a:	d824      	bhi.n	80024c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	4613      	mov	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4413      	add	r3, r2
 800248c:	3b23      	subs	r3, #35	; 0x23
 800248e:	221f      	movs	r2, #31
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43da      	mvns	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	400a      	ands	r2, r1
 800249c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	3b23      	subs	r3, #35	; 0x23
 80024b8:	fa00 f203 	lsl.w	r2, r0, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
 80024c4:	e023      	b.n	800250e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	3b41      	subs	r3, #65	; 0x41
 80024d8:	221f      	movs	r2, #31
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	400a      	ands	r2, r1
 80024e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	4618      	mov	r0, r3
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	3b41      	subs	r3, #65	; 0x41
 8002502:	fa00 f203 	lsl.w	r2, r0, r3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800250e:	4b22      	ldr	r3, [pc, #136]	; (8002598 <HAL_ADC_ConfigChannel+0x234>)
 8002510:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a21      	ldr	r2, [pc, #132]	; (800259c <HAL_ADC_ConfigChannel+0x238>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d109      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x1cc>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2b12      	cmp	r3, #18
 8002522:	d105      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a19      	ldr	r2, [pc, #100]	; (800259c <HAL_ADC_ConfigChannel+0x238>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d123      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x21e>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2b10      	cmp	r3, #16
 8002540:	d003      	beq.n	800254a <HAL_ADC_ConfigChannel+0x1e6>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b11      	cmp	r3, #17
 8002548:	d11b      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b10      	cmp	r3, #16
 800255c:	d111      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_ADC_ConfigChannel+0x23c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a10      	ldr	r2, [pc, #64]	; (80025a4 <HAL_ADC_ConfigChannel+0x240>)
 8002564:	fba2 2303 	umull	r2, r3, r2, r3
 8002568:	0c9a      	lsrs	r2, r3, #18
 800256a:	4613      	mov	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002574:	e002      	b.n	800257c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	3b01      	subs	r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f9      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	40012300 	.word	0x40012300
 800259c:	40012000 	.word	0x40012000
 80025a0:	2000000c 	.word	0x2000000c
 80025a4:	431bde83 	.word	0x431bde83

080025a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025b0:	4b79      	ldr	r3, [pc, #484]	; (8002798 <ADC_Init+0x1f0>)
 80025b2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	431a      	orrs	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	021a      	lsls	r2, r3, #8
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002600:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002622:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6899      	ldr	r1, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	430a      	orrs	r2, r1
 8002634:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263a:	4a58      	ldr	r2, [pc, #352]	; (800279c <ADC_Init+0x1f4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d022      	beq.n	8002686 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800264e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6899      	ldr	r1, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	609a      	str	r2, [r3, #8]
 8002684:	e00f      	b.n	80026a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002694:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0202 	bic.w	r2, r2, #2
 80026b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6899      	ldr	r1, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	7e1b      	ldrb	r3, [r3, #24]
 80026c0:	005a      	lsls	r2, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01b      	beq.n	800270c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6859      	ldr	r1, [r3, #4]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	3b01      	subs	r3, #1
 8002700:	035a      	lsls	r2, r3, #13
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]
 800270a:	e007      	b.n	800271c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800271a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800272a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	3b01      	subs	r3, #1
 8002738:	051a      	lsls	r2, r3, #20
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	430a      	orrs	r2, r1
 8002740:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002750:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6899      	ldr	r1, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800275e:	025a      	lsls	r2, r3, #9
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002776:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	6899      	ldr	r1, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	029a      	lsls	r2, r3, #10
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	609a      	str	r2, [r3, #8]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	40012300 	.word	0x40012300
 800279c:	0f000001 	.word	0x0f000001

080027a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d13c      	bne.n	8002834 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d12b      	bne.n	800282c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d127      	bne.n	800282c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d006      	beq.n	80027f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d119      	bne.n	800282c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0220 	bic.w	r2, r2, #32
 8002806:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f043 0201 	orr.w	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7ff fd7b 	bl	8002328 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002832:	e00e      	b.n	8002852 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f7ff fd85 	bl	8002350 <HAL_ADC_ErrorCallback>
}
 8002846:	e004      	b.n	8002852 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f7ff fd67 	bl	800233c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2240      	movs	r2, #64	; 0x40
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f043 0204 	orr.w	r2, r3, #4
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff fd5a 	bl	8002350 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	db0b      	blt.n	8002932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4907      	ldr	r1, [pc, #28]	; (8002940 <__NVIC_EnableIRQ+0x38>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2001      	movs	r0, #1
 800292a:	fa00 f202 	lsl.w	r2, r0, r2
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000e100 	.word	0xe000e100

08002944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	2b00      	cmp	r3, #0
 8002956:	db0a      	blt.n	800296e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	490c      	ldr	r1, [pc, #48]	; (8002990 <__NVIC_SetPriority+0x4c>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	0112      	lsls	r2, r2, #4
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	440b      	add	r3, r1
 8002968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800296c:	e00a      	b.n	8002984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4908      	ldr	r1, [pc, #32]	; (8002994 <__NVIC_SetPriority+0x50>)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	3b04      	subs	r3, #4
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	440b      	add	r3, r1
 8002982:	761a      	strb	r2, [r3, #24]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000e100 	.word	0xe000e100
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f1c3 0307 	rsb	r3, r3, #7
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	bf28      	it	cs
 80029b6:	2304      	movcs	r3, #4
 80029b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3304      	adds	r3, #4
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d902      	bls.n	80029c8 <NVIC_EncodePriority+0x30>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3b03      	subs	r3, #3
 80029c6:	e000      	b.n	80029ca <NVIC_EncodePriority+0x32>
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	401a      	ands	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	4313      	orrs	r3, r2
         );
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3724      	adds	r7, #36	; 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a10:	d301      	bcc.n	8002a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00f      	b.n	8002a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <SysTick_Config+0x40>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1e:	210f      	movs	r1, #15
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a24:	f7ff ff8e 	bl	8002944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <SysTick_Config+0x40>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <SysTick_Config+0x40>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000e010 	.word	0xe000e010

08002a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff29 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6c:	f7ff ff3e 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f7ff ff8e 	bl	8002998 <NVIC_EncodePriority>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5d 	bl	8002944 <__NVIC_SetPriority>
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff31 	bl	8002908 <__NVIC_EnableIRQ>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffa2 	bl	8002a00 <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff fac4 	bl	8002060 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e099      	b.n	8002c18 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0201 	bic.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b04:	e00f      	b.n	8002b26 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b06:	f7ff faab 	bl	8002060 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b05      	cmp	r3, #5
 8002b12:	d908      	bls.n	8002b26 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e078      	b.n	8002c18 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1e8      	bne.n	8002b06 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4b38      	ldr	r3, [pc, #224]	; (8002c20 <HAL_DMA_Init+0x158>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d107      	bne.n	8002b90 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f023 0307 	bic.w	r3, r3, #7
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	d117      	bne.n	8002bea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00e      	beq.n	8002bea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 fa6f 	bl	80030b0 <DMA_CheckFifoParam>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d008      	beq.n	8002bea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2240      	movs	r2, #64	; 0x40
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002be6:	2301      	movs	r3, #1
 8002be8:	e016      	b.n	8002c18 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fa26 	bl	8003044 <DMA_CalcBaseAndBitshift>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	223f      	movs	r2, #63	; 0x3f
 8002c02:	409a      	lsls	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	f010803f 	.word	0xf010803f

08002c24 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_DMA_Start_IT+0x26>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e040      	b.n	8002ccc <HAL_DMA_Start_IT+0xa8>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d12f      	bne.n	8002cbe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2202      	movs	r2, #2
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 f9b8 	bl	8002fe8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7c:	223f      	movs	r2, #63	; 0x3f
 8002c7e:	409a      	lsls	r2, r3
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0216 	orr.w	r2, r2, #22
 8002c92:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0208 	orr.w	r2, r2, #8
 8002caa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e005      	b.n	8002cca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ce0:	4b8e      	ldr	r3, [pc, #568]	; (8002f1c <HAL_DMA_IRQHandler+0x248>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a8e      	ldr	r2, [pc, #568]	; (8002f20 <HAL_DMA_IRQHandler+0x24c>)
 8002ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cea:	0a9b      	lsrs	r3, r3, #10
 8002cec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	2208      	movs	r2, #8
 8002d00:	409a      	lsls	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01a      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d013      	beq.n	8002d40 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0204 	bic.w	r2, r2, #4
 8002d26:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	409a      	lsls	r2, r3
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d38:	f043 0201 	orr.w	r2, r3, #1
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	2201      	movs	r2, #1
 8002d46:	409a      	lsls	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00b      	beq.n	8002d76 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d62:	2201      	movs	r2, #1
 8002d64:	409a      	lsls	r2, r3
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f043 0202 	orr.w	r2, r3, #2
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	4013      	ands	r3, r2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d012      	beq.n	8002dac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00b      	beq.n	8002dac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	2204      	movs	r2, #4
 8002d9a:	409a      	lsls	r2, r3
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da4:	f043 0204 	orr.w	r2, r3, #4
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	2210      	movs	r2, #16
 8002db2:	409a      	lsls	r2, r3
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d043      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d03c      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	2210      	movs	r2, #16
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d018      	beq.n	8002e16 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d108      	bne.n	8002e04 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d024      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	4798      	blx	r3
 8002e02:	e01f      	b.n	8002e44 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d01b      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	4798      	blx	r3
 8002e14:	e016      	b.n	8002e44 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f022 0208 	bic.w	r2, r2, #8
 8002e32:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	2220      	movs	r2, #32
 8002e4a:	409a      	lsls	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 808f 	beq.w	8002f74 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0310 	and.w	r3, r3, #16
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8087 	beq.w	8002f74 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b05      	cmp	r3, #5
 8002e7c:	d136      	bne.n	8002eec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0216 	bic.w	r2, r2, #22
 8002e8c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e9c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d103      	bne.n	8002eae <HAL_DMA_IRQHandler+0x1da>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d007      	beq.n	8002ebe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f022 0208 	bic.w	r2, r2, #8
 8002ebc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec2:	223f      	movs	r2, #63	; 0x3f
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d07e      	beq.n	8002fe0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	4798      	blx	r3
        }
        return;
 8002eea:	e079      	b.n	8002fe0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01d      	beq.n	8002f36 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10d      	bne.n	8002f24 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d031      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
 8002f18:	e02c      	b.n	8002f74 <HAL_DMA_IRQHandler+0x2a0>
 8002f1a:	bf00      	nop
 8002f1c:	2000000c 	.word	0x2000000c
 8002f20:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d023      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	4798      	blx	r3
 8002f34:	e01e      	b.n	8002f74 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10f      	bne.n	8002f64 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0210 	bic.w	r2, r2, #16
 8002f52:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d032      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d022      	beq.n	8002fce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2205      	movs	r2, #5
 8002f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0201 	bic.w	r2, r2, #1
 8002f9e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d307      	bcc.n	8002fbc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f2      	bne.n	8002fa0 <HAL_DMA_IRQHandler+0x2cc>
 8002fba:	e000      	b.n	8002fbe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fbc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	4798      	blx	r3
 8002fde:	e000      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fe0:	bf00      	nop
    }
  }
}
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003004:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b40      	cmp	r3, #64	; 0x40
 8003014:	d108      	bne.n	8003028 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003026:	e007      	b.n	8003038 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	60da      	str	r2, [r3, #12]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	3b10      	subs	r3, #16
 8003054:	4a14      	ldr	r2, [pc, #80]	; (80030a8 <DMA_CalcBaseAndBitshift+0x64>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	091b      	lsrs	r3, r3, #4
 800305c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800305e:	4a13      	ldr	r2, [pc, #76]	; (80030ac <DMA_CalcBaseAndBitshift+0x68>)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d909      	bls.n	8003086 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	1d1a      	adds	r2, r3, #4
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	659a      	str	r2, [r3, #88]	; 0x58
 8003084:	e007      	b.n	8003096 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800308e:	f023 0303 	bic.w	r3, r3, #3
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800309a:	4618      	mov	r0, r3
 800309c:	3714      	adds	r7, #20
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	aaaaaaab 	.word	0xaaaaaaab
 80030ac:	08010924 	.word	0x08010924

080030b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b8:	2300      	movs	r3, #0
 80030ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d11f      	bne.n	800310a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d856      	bhi.n	800317e <DMA_CheckFifoParam+0xce>
 80030d0:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <DMA_CheckFifoParam+0x28>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030fb 	.word	0x080030fb
 80030e0:	080030e9 	.word	0x080030e9
 80030e4:	0800317f 	.word	0x0800317f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d046      	beq.n	8003182 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030f8:	e043      	b.n	8003182 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003102:	d140      	bne.n	8003186 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003108:	e03d      	b.n	8003186 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003112:	d121      	bne.n	8003158 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b03      	cmp	r3, #3
 8003118:	d837      	bhi.n	800318a <DMA_CheckFifoParam+0xda>
 800311a:	a201      	add	r2, pc, #4	; (adr r2, 8003120 <DMA_CheckFifoParam+0x70>)
 800311c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003120:	08003131 	.word	0x08003131
 8003124:	08003137 	.word	0x08003137
 8003128:	08003131 	.word	0x08003131
 800312c:	08003149 	.word	0x08003149
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e030      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d025      	beq.n	800318e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003146:	e022      	b.n	800318e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003150:	d11f      	bne.n	8003192 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003156:	e01c      	b.n	8003192 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d903      	bls.n	8003166 <DMA_CheckFifoParam+0xb6>
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b03      	cmp	r3, #3
 8003162:	d003      	beq.n	800316c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003164:	e018      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
      break;
 800316a:	e015      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00e      	beq.n	8003196 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      break;
 800317c:	e00b      	b.n	8003196 <DMA_CheckFifoParam+0xe6>
      break;
 800317e:	bf00      	nop
 8003180:	e00a      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003182:	bf00      	nop
 8003184:	e008      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003186:	bf00      	nop
 8003188:	e006      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 800318a:	bf00      	nop
 800318c:	e004      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 800318e:	bf00      	nop
 8003190:	e002      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;   
 8003192:	bf00      	nop
 8003194:	e000      	b.n	8003198 <DMA_CheckFifoParam+0xe8>
      break;
 8003196:	bf00      	nop
    }
  } 
  
  return status; 
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop

080031a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e159      	b.n	8003478 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c4:	2201      	movs	r2, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	429a      	cmp	r2, r3
 80031de:	f040 8148 	bne.w	8003472 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d005      	beq.n	80031fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d130      	bne.n	800325c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	2203      	movs	r2, #3
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	68da      	ldr	r2, [r3, #12]
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003230:	2201      	movs	r2, #1
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 0201 	and.w	r2, r3, #1
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b03      	cmp	r3, #3
 8003266:	d017      	beq.n	8003298 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	2203      	movs	r2, #3
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d123      	bne.n	80032ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	08da      	lsrs	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3208      	adds	r2, #8
 80032ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	220f      	movs	r2, #15
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	08da      	lsrs	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3208      	adds	r2, #8
 80032e6:	69b9      	ldr	r1, [r7, #24]
 80032e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2203      	movs	r2, #3
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0203 	and.w	r2, r3, #3
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80a2 	beq.w	8003472 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b57      	ldr	r3, [pc, #348]	; (8003490 <HAL_GPIO_Init+0x2e8>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	4a56      	ldr	r2, [pc, #344]	; (8003490 <HAL_GPIO_Init+0x2e8>)
 8003338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800333c:	6453      	str	r3, [r2, #68]	; 0x44
 800333e:	4b54      	ldr	r3, [pc, #336]	; (8003490 <HAL_GPIO_Init+0x2e8>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800334a:	4a52      	ldr	r2, [pc, #328]	; (8003494 <HAL_GPIO_Init+0x2ec>)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	3302      	adds	r3, #2
 8003352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	220f      	movs	r2, #15
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a49      	ldr	r2, [pc, #292]	; (8003498 <HAL_GPIO_Init+0x2f0>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d019      	beq.n	80033aa <HAL_GPIO_Init+0x202>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a48      	ldr	r2, [pc, #288]	; (800349c <HAL_GPIO_Init+0x2f4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <HAL_GPIO_Init+0x1fe>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a47      	ldr	r2, [pc, #284]	; (80034a0 <HAL_GPIO_Init+0x2f8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00d      	beq.n	80033a2 <HAL_GPIO_Init+0x1fa>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a46      	ldr	r2, [pc, #280]	; (80034a4 <HAL_GPIO_Init+0x2fc>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <HAL_GPIO_Init+0x1f6>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a45      	ldr	r2, [pc, #276]	; (80034a8 <HAL_GPIO_Init+0x300>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d101      	bne.n	800339a <HAL_GPIO_Init+0x1f2>
 8003396:	2304      	movs	r3, #4
 8003398:	e008      	b.n	80033ac <HAL_GPIO_Init+0x204>
 800339a:	2307      	movs	r3, #7
 800339c:	e006      	b.n	80033ac <HAL_GPIO_Init+0x204>
 800339e:	2303      	movs	r3, #3
 80033a0:	e004      	b.n	80033ac <HAL_GPIO_Init+0x204>
 80033a2:	2302      	movs	r3, #2
 80033a4:	e002      	b.n	80033ac <HAL_GPIO_Init+0x204>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <HAL_GPIO_Init+0x204>
 80033aa:	2300      	movs	r3, #0
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	f002 0203 	and.w	r2, r2, #3
 80033b2:	0092      	lsls	r2, r2, #2
 80033b4:	4093      	lsls	r3, r2
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033bc:	4935      	ldr	r1, [pc, #212]	; (8003494 <HAL_GPIO_Init+0x2ec>)
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	089b      	lsrs	r3, r3, #2
 80033c2:	3302      	adds	r3, #2
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ca:	4b38      	ldr	r3, [pc, #224]	; (80034ac <HAL_GPIO_Init+0x304>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	43db      	mvns	r3, r3
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4013      	ands	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80033e6:	69ba      	ldr	r2, [r7, #24]
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033ee:	4a2f      	ldr	r2, [pc, #188]	; (80034ac <HAL_GPIO_Init+0x304>)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033f4:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <HAL_GPIO_Init+0x304>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003418:	4a24      	ldr	r2, [pc, #144]	; (80034ac <HAL_GPIO_Init+0x304>)
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <HAL_GPIO_Init+0x304>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	43db      	mvns	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003442:	4a1a      	ldr	r2, [pc, #104]	; (80034ac <HAL_GPIO_Init+0x304>)
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003448:	4b18      	ldr	r3, [pc, #96]	; (80034ac <HAL_GPIO_Init+0x304>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800346c:	4a0f      	ldr	r2, [pc, #60]	; (80034ac <HAL_GPIO_Init+0x304>)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	3301      	adds	r3, #1
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2b0f      	cmp	r3, #15
 800347c:	f67f aea2 	bls.w	80031c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	3724      	adds	r7, #36	; 0x24
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	40013800 	.word	0x40013800
 8003498:	40020000 	.word	0x40020000
 800349c:	40020400 	.word	0x40020400
 80034a0:	40020800 	.word	0x40020800
 80034a4:	40020c00 	.word	0x40020c00
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40013c00 	.word	0x40013c00

080034b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	807b      	strh	r3, [r7, #2]
 80034bc:	4613      	mov	r3, r2
 80034be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034c0:	787b      	ldrb	r3, [r7, #1]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034cc:	e003      	b.n	80034d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ce:	887b      	ldrh	r3, [r7, #2]
 80034d0:	041a      	lsls	r2, r3, #16
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	619a      	str	r2, [r3, #24]
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034f4:	887a      	ldrh	r2, [r7, #2]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4013      	ands	r3, r2
 80034fa:	041a      	lsls	r2, r3, #16
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	43d9      	mvns	r1, r3
 8003500:	887b      	ldrh	r3, [r7, #2]
 8003502:	400b      	ands	r3, r1
 8003504:	431a      	orrs	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	619a      	str	r2, [r3, #24]
}
 800350a:	bf00      	nop
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003516:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003518:	b08f      	sub	sp, #60	; 0x3c
 800351a:	af0a      	add	r7, sp, #40	; 0x28
 800351c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e10f      	b.n	8003748 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d106      	bne.n	8003548 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f00a fd36 	bl	800dfb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2203      	movs	r2, #3
 800354c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f002 fe35 	bl	80061d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	603b      	str	r3, [r7, #0]
 8003572:	687e      	ldr	r6, [r7, #4]
 8003574:	466d      	mov	r5, sp
 8003576:	f106 0410 	add.w	r4, r6, #16
 800357a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800357c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800357e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003580:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003582:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003586:	e885 0003 	stmia.w	r5, {r0, r1}
 800358a:	1d33      	adds	r3, r6, #4
 800358c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800358e:	6838      	ldr	r0, [r7, #0]
 8003590:	f002 fd0c 	bl	8005fac <USB_CoreInit>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d005      	beq.n	80035a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2202      	movs	r2, #2
 800359e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e0d0      	b.n	8003748 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f002 fe23 	bl	80061f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
 80035b6:	e04a      	b.n	800364e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035b8:	7bfa      	ldrb	r2, [r7, #15]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	333d      	adds	r3, #61	; 0x3d
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	333c      	adds	r3, #60	; 0x3c
 80035dc:	7bfa      	ldrb	r2, [r7, #15]
 80035de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	b298      	uxth	r0, r3
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	3344      	adds	r3, #68	; 0x44
 80035f4:	4602      	mov	r2, r0
 80035f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035f8:	7bfa      	ldrb	r2, [r7, #15]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	00db      	lsls	r3, r3, #3
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	3340      	adds	r3, #64	; 0x40
 8003608:	2200      	movs	r2, #0
 800360a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	3348      	adds	r3, #72	; 0x48
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003620:	7bfa      	ldrb	r2, [r7, #15]
 8003622:	6879      	ldr	r1, [r7, #4]
 8003624:	4613      	mov	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4413      	add	r3, r2
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	334c      	adds	r3, #76	; 0x4c
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003634:	7bfa      	ldrb	r2, [r7, #15]
 8003636:	6879      	ldr	r1, [r7, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	4413      	add	r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	3354      	adds	r3, #84	; 0x54
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	3301      	adds	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
 800364e:	7bfa      	ldrb	r2, [r7, #15]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	429a      	cmp	r2, r3
 8003656:	d3af      	bcc.n	80035b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003658:	2300      	movs	r3, #0
 800365a:	73fb      	strb	r3, [r7, #15]
 800365c:	e044      	b.n	80036e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800365e:	7bfa      	ldrb	r2, [r7, #15]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003686:	7bfa      	ldrb	r2, [r7, #15]
 8003688:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800368a:	7bfa      	ldrb	r2, [r7, #15]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036b6:	7bfa      	ldrb	r2, [r7, #15]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036cc:	7bfa      	ldrb	r2, [r7, #15]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	3301      	adds	r3, #1
 80036e6:	73fb      	strb	r3, [r7, #15]
 80036e8:	7bfa      	ldrb	r2, [r7, #15]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d3b5      	bcc.n	800365e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	687e      	ldr	r6, [r7, #4]
 80036fa:	466d      	mov	r5, sp
 80036fc:	f106 0410 	add.w	r4, r6, #16
 8003700:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003702:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003708:	e894 0003 	ldmia.w	r4, {r0, r1}
 800370c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003710:	1d33      	adds	r3, r6, #4
 8003712:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003714:	6838      	ldr	r0, [r7, #0]
 8003716:	f002 fdbb 	bl	8006290 <USB_DevInit>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e00d      	b.n	8003748 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f003 ff0a 	bl	800755a <USB_DevDisconnect>

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003750 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_PCD_Start+0x1c>
 8003768:	2302      	movs	r3, #2
 800376a:	e020      	b.n	80037ae <HAL_PCD_Start+0x5e>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	2b01      	cmp	r3, #1
 800377a:	d109      	bne.n	8003790 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003780:	2b01      	cmp	r3, #1
 8003782:	d005      	beq.n	8003790 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4618      	mov	r0, r3
 8003796:	f002 fd0d 	bl	80061b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f003 feba 	bl	8007518 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037b6:	b590      	push	{r4, r7, lr}
 80037b8:	b08d      	sub	sp, #52	; 0x34
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f003 ff78 	bl	80076c2 <USB_GetMode>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f040 848a 	bne.w	80040ee <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f003 fedc 	bl	800759c <USB_ReadInterrupts>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	f000 8480 	beq.w	80040ec <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	0a1b      	lsrs	r3, r3, #8
 80037f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f003 fec9 	bl	800759c <USB_ReadInterrupts>
 800380a:	4603      	mov	r3, r0
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b02      	cmp	r3, #2
 8003812:	d107      	bne.n	8003824 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695a      	ldr	r2, [r3, #20]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f002 0202 	and.w	r2, r2, #2
 8003822:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f003 feb7 	bl	800759c <USB_ReadInterrupts>
 800382e:	4603      	mov	r3, r0
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b10      	cmp	r3, #16
 8003836:	d161      	bne.n	80038fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0210 	bic.w	r2, r2, #16
 8003846:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f003 020f 	and.w	r2, r3, #15
 8003854:	4613      	mov	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4413      	add	r3, r2
 8003864:	3304      	adds	r3, #4
 8003866:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	0c5b      	lsrs	r3, r3, #17
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	2b02      	cmp	r3, #2
 8003872:	d124      	bne.n	80038be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d035      	beq.n	80038ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800388a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800388e:	b29b      	uxth	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	6a38      	ldr	r0, [r7, #32]
 8003894:	f003 fcee 	bl	8007274 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	691a      	ldr	r2, [r3, #16]
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a4:	441a      	add	r2, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	6a1a      	ldr	r2, [r3, #32]
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038b6:	441a      	add	r2, r3
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	621a      	str	r2, [r3, #32]
 80038bc:	e016      	b.n	80038ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	0c5b      	lsrs	r3, r3, #17
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	2b06      	cmp	r3, #6
 80038c8:	d110      	bne.n	80038ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038d0:	2208      	movs	r2, #8
 80038d2:	4619      	mov	r1, r3
 80038d4:	6a38      	ldr	r0, [r7, #32]
 80038d6:	f003 fccd 	bl	8007274 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	6a1a      	ldr	r2, [r3, #32]
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038e6:	441a      	add	r2, r3
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699a      	ldr	r2, [r3, #24]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0210 	orr.w	r2, r2, #16
 80038fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f003 fe4b 	bl	800759c <USB_ReadInterrupts>
 8003906:	4603      	mov	r3, r0
 8003908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800390c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003910:	f040 80a7 	bne.w	8003a62 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f003 fe50 	bl	80075c2 <USB_ReadDevAllOutEpInterrupt>
 8003922:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003924:	e099      	b.n	8003a5a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 808e 	beq.w	8003a4e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f003 fe74 	bl	800762a <USB_ReadDevOutEPInterrupt>
 8003942:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00c      	beq.n	8003968 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800395a:	461a      	mov	r2, r3
 800395c:	2301      	movs	r3, #1
 800395e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003960:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fec2 	bl	80046ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00c      	beq.n	800398c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	4413      	add	r3, r2
 800397a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397e:	461a      	mov	r2, r3
 8003980:	2308      	movs	r3, #8
 8003982:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 ff98 	bl	80048bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f003 0310 	and.w	r3, r3, #16
 8003992:	2b00      	cmp	r3, #0
 8003994:	d008      	beq.n	80039a8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	015a      	lsls	r2, r3, #5
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	4413      	add	r3, r2
 800399e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a2:	461a      	mov	r2, r3
 80039a4:	2310      	movs	r3, #16
 80039a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d030      	beq.n	8003a14 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ba:	2b80      	cmp	r3, #128	; 0x80
 80039bc:	d109      	bne.n	80039d2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039d0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80039d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	4413      	add	r3, r2
 80039e4:	3304      	adds	r3, #4
 80039e6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	78db      	ldrb	r3, [r3, #3]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d108      	bne.n	8003a02 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	2200      	movs	r2, #0
 80039f4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	4619      	mov	r1, r3
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f00a fbdf 	bl	800e1c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2302      	movs	r3, #2
 8003a12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d008      	beq.n	8003a30 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	2320      	movs	r3, #32
 8003a2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d009      	beq.n	8003a4e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a46:	461a      	mov	r2, r3
 8003a48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a4c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	3301      	adds	r3, #1
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a56:	085b      	lsrs	r3, r3, #1
 8003a58:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f47f af62 	bne.w	8003926 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f003 fd98 	bl	800759c <USB_ReadInterrupts>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a76:	f040 80db 	bne.w	8003c30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f003 fdb9 	bl	80075f6 <USB_ReadDevAllInEpInterrupt>
 8003a84:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a8a:	e0cd      	b.n	8003c28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 80c2 	beq.w	8003c1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 fddf 	bl	8007666 <USB_ReadDevInEPInterrupt>
 8003aa8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d057      	beq.n	8003b64 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	2201      	movs	r2, #1
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69f9      	ldr	r1, [r7, #28]
 8003ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d132      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af6:	4613      	mov	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	4413      	add	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	334c      	adds	r3, #76	; 0x4c
 8003b02:	6819      	ldr	r1, [r3, #0]
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4403      	add	r3, r0
 8003b12:	3348      	adds	r3, #72	; 0x48
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4419      	add	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4403      	add	r3, r0
 8003b26:	334c      	adds	r3, #76	; 0x4c
 8003b28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d113      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x3a2>
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	3354      	adds	r3, #84	; 0x54
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d108      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b50:	461a      	mov	r2, r3
 8003b52:	2101      	movs	r1, #1
 8003b54:	f003 fde6 	bl	8007724 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f00a faa9 	bl	800e0b6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2308      	movs	r3, #8
 8003b7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b96:	461a      	mov	r2, r3
 8003b98:	2310      	movs	r3, #16
 8003b9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2340      	movs	r3, #64	; 0x40
 8003bb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d023      	beq.n	8003c0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003bc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bc4:	6a38      	ldr	r0, [r7, #32]
 8003bc6:	f002 fcc7 	bl	8006558 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	3338      	adds	r3, #56	; 0x38
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	3304      	adds	r3, #4
 8003bdc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	78db      	ldrb	r3, [r3, #3]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d108      	bne.n	8003bf8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	2200      	movs	r2, #0
 8003bea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f00a faf6 	bl	800e1e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c04:	461a      	mov	r2, r3
 8003c06:	2302      	movs	r3, #2
 8003c08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fcdb 	bl	80045d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	3301      	adds	r3, #1
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	f47f af2e 	bne.w	8003a8c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f003 fcb1 	bl	800759c <USB_ReadInterrupts>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c44:	d122      	bne.n	8003c8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c54:	f023 0301 	bic.w	r3, r3, #1
 8003c58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d108      	bne.n	8003c76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fec2 	bl	80049f8 <HAL_PCDEx_LPM_Callback>
 8003c74:	e002      	b.n	8003c7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f00a fa94 	bl	800e1a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4618      	mov	r0, r3
 8003c92:	f003 fc83 	bl	800759c <USB_ReadInterrupts>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca0:	d112      	bne.n	8003cc8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d102      	bne.n	8003cb8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f00a fa50 	bl	800e158 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003cc6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f003 fc65 	bl	800759c <USB_ReadInterrupts>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cdc:	f040 80b7 	bne.w	8003e4e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	69fa      	ldr	r2, [r7, #28]
 8003cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2110      	movs	r1, #16
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f002 fc2c 	bl	8006558 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d04:	e046      	b.n	8003d94 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d12:	461a      	mov	r2, r3
 8003d14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	015a      	lsls	r2, r3, #5
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	4413      	add	r3, r2
 8003d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d2a:	0151      	lsls	r1, r2, #5
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	440a      	add	r2, r1
 8003d30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d46:	461a      	mov	r2, r3
 8003d48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d5e:	0151      	lsls	r1, r2, #5
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	440a      	add	r2, r1
 8003d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d7e:	0151      	lsls	r1, r2, #5
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	440a      	add	r2, r1
 8003d84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d90:	3301      	adds	r3, #1
 8003d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d3b3      	bcc.n	8003d06 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dac:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003db0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d016      	beq.n	8003de8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dca:	f043 030b 	orr.w	r3, r3, #11
 8003dce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003de0:	f043 030b 	orr.w	r3, r3, #11
 8003de4:	6453      	str	r3, [r2, #68]	; 0x44
 8003de6:	e015      	b.n	8003e14 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003df6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003dfa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003dfe:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e0e:	f043 030b 	orr.w	r3, r3, #11
 8003e12:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e22:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e26:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6818      	ldr	r0, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f003 fc73 	bl	8007724 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695a      	ldr	r2, [r3, #20]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f003 fba2 	bl	800759c <USB_ReadInterrupts>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e62:	d124      	bne.n	8003eae <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f003 fc38 	bl	80076de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f002 fbed 	bl	8006652 <USB_GetDevSpeed>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681c      	ldr	r4, [r3, #0]
 8003e84:	f001 f9e8 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 8003e88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	4620      	mov	r0, r4
 8003e94:	f002 f8ec 	bl	8006070 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f00a f934 	bl	800e106 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003eac:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f003 fb72 	bl	800759c <USB_ReadInterrupts>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	f003 0308 	and.w	r3, r3, #8
 8003ebe:	2b08      	cmp	r3, #8
 8003ec0:	d10a      	bne.n	8003ed8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f00a f911 	bl	800e0ea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f002 0208 	and.w	r2, r2, #8
 8003ed6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f003 fb5d 	bl	800759c <USB_ReadInterrupts>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee8:	2b80      	cmp	r3, #128	; 0x80
 8003eea:	d122      	bne.n	8003f32 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ef8:	2301      	movs	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
 8003efc:	e014      	b.n	8003f28 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003efe:	6879      	ldr	r1, [r7, #4]
 8003f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f02:	4613      	mov	r3, r2
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4413      	add	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d105      	bne.n	8003f22 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fb27 	bl	8004570 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	3301      	adds	r3, #1
 8003f26:	627b      	str	r3, [r7, #36]	; 0x24
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d3e5      	bcc.n	8003efe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f003 fb30 	bl	800759c <USB_ReadInterrupts>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f46:	d13b      	bne.n	8003fc0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f48:	2301      	movs	r3, #1
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4c:	e02b      	b.n	8003fa6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	3340      	adds	r3, #64	; 0x40
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d115      	bne.n	8003fa0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003f74:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	da12      	bge.n	8003fa0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	440b      	add	r3, r1
 8003f88:	333f      	adds	r3, #63	; 0x3f
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fae8 	bl	8004570 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d3ce      	bcc.n	8003f4e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f003 fae9 	bl	800759c <USB_ReadInterrupts>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fd4:	d155      	bne.n	8004082 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fda:	e045      	b.n	8004068 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d12e      	bne.n	8004062 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004004:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004006:	2b00      	cmp	r3, #0
 8004008:	da2b      	bge.n	8004062 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004016:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800401a:	429a      	cmp	r2, r3
 800401c:	d121      	bne.n	8004062 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004030:	2201      	movs	r2, #1
 8004032:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800405a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800405e:	6053      	str	r3, [r2, #4]
            break;
 8004060:	e007      	b.n	8004072 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	3301      	adds	r3, #1
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406e:	429a      	cmp	r2, r3
 8004070:	d3b4      	bcc.n	8003fdc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004080:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f003 fa88 	bl	800759c <USB_ReadInterrupts>
 800408c:	4603      	mov	r3, r0
 800408e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004096:	d10a      	bne.n	80040ae <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f00a f8b5 	bl	800e208 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695a      	ldr	r2, [r3, #20]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f003 fa72 	bl	800759c <USB_ReadInterrupts>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f003 0304 	and.w	r3, r3, #4
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d115      	bne.n	80040ee <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d002      	beq.n	80040da <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f00a f8a5 	bl	800e224 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	605a      	str	r2, [r3, #4]
 80040ea:	e000      	b.n	80040ee <HAL_PCD_IRQHandler+0x938>
      return;
 80040ec:	bf00      	nop
    }
  }
}
 80040ee:	3734      	adds	r7, #52	; 0x34
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd90      	pop	{r4, r7, pc}

080040f4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_PCD_SetAddress+0x1a>
 800410a:	2302      	movs	r3, #2
 800410c:	e013      	b.n	8004136 <HAL_PCD_SetAddress+0x42>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	78fa      	ldrb	r2, [r7, #3]
 800411a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	4611      	mov	r1, r2
 8004126:	4618      	mov	r0, r3
 8004128:	f003 f9d0 	bl	80074cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	4608      	mov	r0, r1
 8004148:	4611      	mov	r1, r2
 800414a:	461a      	mov	r2, r3
 800414c:	4603      	mov	r3, r0
 800414e:	70fb      	strb	r3, [r7, #3]
 8004150:	460b      	mov	r3, r1
 8004152:	803b      	strh	r3, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800415c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004160:	2b00      	cmp	r3, #0
 8004162:	da0f      	bge.n	8004184 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	f003 020f 	and.w	r2, r3, #15
 800416a:	4613      	mov	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	3338      	adds	r3, #56	; 0x38
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	4413      	add	r3, r2
 8004178:	3304      	adds	r3, #4
 800417a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	705a      	strb	r2, [r3, #1]
 8004182:	e00f      	b.n	80041a4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004184:	78fb      	ldrb	r3, [r7, #3]
 8004186:	f003 020f 	and.w	r2, r3, #15
 800418a:	4613      	mov	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4413      	add	r3, r2
 800419a:	3304      	adds	r3, #4
 800419c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041a4:	78fb      	ldrb	r3, [r7, #3]
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80041b0:	883a      	ldrh	r2, [r7, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	78ba      	ldrb	r2, [r7, #2]
 80041ba:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	785b      	ldrb	r3, [r3, #1]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d004      	beq.n	80041ce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80041ce:	78bb      	ldrb	r3, [r7, #2]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d102      	bne.n	80041da <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_PCD_EP_Open+0xaa>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e00e      	b.n	8004206 <HAL_PCD_EP_Open+0xc8>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68f9      	ldr	r1, [r7, #12]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f002 fa50 	bl	800669c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004204:	7afb      	ldrb	r3, [r7, #11]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800421a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800421e:	2b00      	cmp	r3, #0
 8004220:	da0f      	bge.n	8004242 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	f003 020f 	and.w	r2, r3, #15
 8004228:	4613      	mov	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	3338      	adds	r3, #56	; 0x38
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4413      	add	r3, r2
 8004236:	3304      	adds	r3, #4
 8004238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2201      	movs	r2, #1
 800423e:	705a      	strb	r2, [r3, #1]
 8004240:	e00f      	b.n	8004262 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004242:	78fb      	ldrb	r3, [r7, #3]
 8004244:	f003 020f 	and.w	r2, r3, #15
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	4413      	add	r3, r2
 8004258:	3304      	adds	r3, #4
 800425a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	b2da      	uxtb	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_PCD_EP_Close+0x6e>
 8004278:	2302      	movs	r3, #2
 800427a:	e00e      	b.n	800429a <HAL_PCD_EP_Close+0x8c>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68f9      	ldr	r1, [r7, #12]
 800428a:	4618      	mov	r0, r3
 800428c:	f002 fa8e 	bl	80067ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b086      	sub	sp, #24
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
 80042ae:	460b      	mov	r3, r1
 80042b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b2:	7afb      	ldrb	r3, [r7, #11]
 80042b4:	f003 020f 	and.w	r2, r3, #15
 80042b8:	4613      	mov	r3, r2
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	3304      	adds	r3, #4
 80042ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	2200      	movs	r2, #0
 80042dc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2200      	movs	r2, #0
 80042e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042e4:	7afb      	ldrb	r3, [r7, #11]
 80042e6:	f003 030f 	and.w	r3, r3, #15
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d102      	bne.n	80042fe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042fe:	7afb      	ldrb	r3, [r7, #11]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	2b00      	cmp	r3, #0
 8004306:	d109      	bne.n	800431c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6818      	ldr	r0, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	461a      	mov	r2, r3
 8004314:	6979      	ldr	r1, [r7, #20]
 8004316:	f002 fd6d 	bl	8006df4 <USB_EP0StartXfer>
 800431a:	e008      	b.n	800432e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	691b      	ldr	r3, [r3, #16]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	461a      	mov	r2, r3
 8004328:	6979      	ldr	r1, [r7, #20]
 800432a:	f002 fb1b 	bl	8006964 <USB_EPStartXfer>
  }

  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004344:	78fb      	ldrb	r3, [r7, #3]
 8004346:	f003 020f 	and.w	r2, r3, #15
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	4613      	mov	r3, r2
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800435a:	681b      	ldr	r3, [r3, #0]
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	460b      	mov	r3, r1
 8004376:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004378:	7afb      	ldrb	r3, [r7, #11]
 800437a:	f003 020f 	and.w	r2, r3, #15
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	3338      	adds	r3, #56	; 0x38
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4413      	add	r3, r2
 800438c:	3304      	adds	r3, #4
 800438e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2200      	movs	r2, #0
 80043a0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	2201      	movs	r2, #1
 80043a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043a8:	7afb      	ldrb	r3, [r7, #11]
 80043aa:	f003 030f 	and.w	r3, r3, #15
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d102      	bne.n	80043c2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043c2:	7afb      	ldrb	r3, [r7, #11]
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d109      	bne.n	80043e0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	6979      	ldr	r1, [r7, #20]
 80043da:	f002 fd0b 	bl	8006df4 <USB_EP0StartXfer>
 80043de:	e008      	b.n	80043f2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6818      	ldr	r0, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	6979      	ldr	r1, [r7, #20]
 80043ee:	f002 fab9 	bl	8006964 <USB_EPStartXfer>
  }

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3718      	adds	r7, #24
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	460b      	mov	r3, r1
 8004406:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	f003 020f 	and.w	r2, r3, #15
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	429a      	cmp	r2, r3
 8004414:	d901      	bls.n	800441a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e050      	b.n	80044bc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800441a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800441e:	2b00      	cmp	r3, #0
 8004420:	da0f      	bge.n	8004442 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	f003 020f 	and.w	r2, r3, #15
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	3338      	adds	r3, #56	; 0x38
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	3304      	adds	r3, #4
 8004438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2201      	movs	r2, #1
 800443e:	705a      	strb	r2, [r3, #1]
 8004440:	e00d      	b.n	800445e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004442:	78fa      	ldrb	r2, [r7, #3]
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	4413      	add	r3, r2
 8004454:	3304      	adds	r3, #4
 8004456:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	b2da      	uxtb	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_PCD_EP_SetStall+0x82>
 800447a:	2302      	movs	r3, #2
 800447c:	e01e      	b.n	80044bc <HAL_PCD_EP_SetStall+0xc0>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68f9      	ldr	r1, [r7, #12]
 800448c:	4618      	mov	r0, r3
 800448e:	f002 ff49 	bl	8007324 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10a      	bne.n	80044b2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	b2d9      	uxtb	r1, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044ac:	461a      	mov	r2, r3
 80044ae:	f003 f939 	bl	8007724 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3710      	adds	r7, #16
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	f003 020f 	and.w	r2, r3, #15
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d901      	bls.n	80044e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e042      	b.n	8004568 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80044e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	da0f      	bge.n	800450a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ea:	78fb      	ldrb	r3, [r7, #3]
 80044ec:	f003 020f 	and.w	r2, r3, #15
 80044f0:	4613      	mov	r3, r2
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	3338      	adds	r3, #56	; 0x38
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	4413      	add	r3, r2
 80044fe:	3304      	adds	r3, #4
 8004500:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	705a      	strb	r2, [r3, #1]
 8004508:	e00f      	b.n	800452a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	f003 020f 	and.w	r2, r3, #15
 8004510:	4613      	mov	r3, r2
 8004512:	00db      	lsls	r3, r3, #3
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	4413      	add	r3, r2
 8004520:	3304      	adds	r3, #4
 8004522:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	b2da      	uxtb	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_PCD_EP_ClrStall+0x86>
 8004546:	2302      	movs	r3, #2
 8004548:	e00e      	b.n	8004568 <HAL_PCD_EP_ClrStall+0xa4>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68f9      	ldr	r1, [r7, #12]
 8004558:	4618      	mov	r0, r3
 800455a:	f002 ff51 	bl	8007400 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800457c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004580:	2b00      	cmp	r3, #0
 8004582:	da0c      	bge.n	800459e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	f003 020f 	and.w	r2, r3, #15
 800458a:	4613      	mov	r3, r2
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	4413      	add	r3, r2
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	3338      	adds	r3, #56	; 0x38
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	4413      	add	r3, r2
 8004598:	3304      	adds	r3, #4
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	e00c      	b.n	80045b8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800459e:	78fb      	ldrb	r3, [r7, #3]
 80045a0:	f003 020f 	and.w	r2, r3, #15
 80045a4:	4613      	mov	r3, r2
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	4413      	add	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	4413      	add	r3, r2
 80045b4:	3304      	adds	r3, #4
 80045b6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68f9      	ldr	r1, [r7, #12]
 80045be:	4618      	mov	r0, r3
 80045c0:	f002 fd70 	bl	80070a4 <USB_EPStopXfer>
 80045c4:	4603      	mov	r3, r0
 80045c6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80045c8:	7afb      	ldrb	r3, [r7, #11]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b08a      	sub	sp, #40	; 0x28
 80045d6:	af02      	add	r7, sp, #8
 80045d8:	6078      	str	r0, [r7, #4]
 80045da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	4613      	mov	r3, r2
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	3338      	adds	r3, #56	; 0x38
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	3304      	adds	r3, #4
 80045f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a1a      	ldr	r2, [r3, #32]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	429a      	cmp	r2, r3
 8004604:	d901      	bls.n	800460a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e06c      	b.n	80046e4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	699a      	ldr	r2, [r3, #24]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	69fa      	ldr	r2, [r7, #28]
 800461c:	429a      	cmp	r2, r3
 800461e:	d902      	bls.n	8004626 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	3303      	adds	r3, #3
 800462a:	089b      	lsrs	r3, r3, #2
 800462c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800462e:	e02b      	b.n	8004688 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	699a      	ldr	r2, [r3, #24]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	69fa      	ldr	r2, [r7, #28]
 8004642:	429a      	cmp	r2, r3
 8004644:	d902      	bls.n	800464c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	3303      	adds	r3, #3
 8004650:	089b      	lsrs	r3, r3, #2
 8004652:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6919      	ldr	r1, [r3, #16]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	b2da      	uxtb	r2, r3
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004664:	b2db      	uxtb	r3, r3
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	4603      	mov	r3, r0
 800466a:	6978      	ldr	r0, [r7, #20]
 800466c:	f002 fdc4 	bl	80071f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	441a      	add	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a1a      	ldr	r2, [r3, #32]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	441a      	add	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	b29b      	uxth	r3, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	429a      	cmp	r2, r3
 800469c:	d809      	bhi.n	80046b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6a1a      	ldr	r2, [r3, #32]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d203      	bcs.n	80046b2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1be      	bne.n	8004630 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	699a      	ldr	r2, [r3, #24]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d811      	bhi.n	80046e2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	2201      	movs	r2, #1
 80046c6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ca:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	43db      	mvns	r3, r3
 80046d8:	6939      	ldr	r1, [r7, #16]
 80046da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046de:	4013      	ands	r3, r2
 80046e0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3720      	adds	r7, #32
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b088      	sub	sp, #32
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	333c      	adds	r3, #60	; 0x3c
 8004704:	3304      	adds	r3, #4
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d17b      	bne.n	800481a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d015      	beq.n	8004758 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	4a61      	ldr	r2, [pc, #388]	; (80048b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004730:	4293      	cmp	r3, r2
 8004732:	f240 80b9 	bls.w	80048a8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80b3 	beq.w	80048a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474e:	461a      	mov	r2, r3
 8004750:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004754:	6093      	str	r3, [r2, #8]
 8004756:	e0a7      	b.n	80048a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476e:	461a      	mov	r2, r3
 8004770:	2320      	movs	r3, #32
 8004772:	6093      	str	r3, [r2, #8]
 8004774:	e098      	b.n	80048a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800477c:	2b00      	cmp	r3, #0
 800477e:	f040 8093 	bne.w	80048a8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	4a4b      	ldr	r2, [pc, #300]	; (80048b4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d90f      	bls.n	80047aa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a0:	461a      	mov	r2, r3
 80047a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a6:	6093      	str	r3, [r2, #8]
 80047a8:	e07e      	b.n	80048a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	4413      	add	r3, r2
 80047bc:	3304      	adds	r3, #4
 80047be:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	0159      	lsls	r1, r3, #5
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	440b      	add	r3, r1
 80047cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047d6:	1ad2      	subs	r2, r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d114      	bne.n	800480c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80047f4:	461a      	mov	r2, r3
 80047f6:	2101      	movs	r1, #1
 80047f8:	f002 ff94 	bl	8007724 <USB_EP0_OutStart>
 80047fc:	e006      	b.n	800480c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	441a      	add	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	4619      	mov	r1, r3
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f009 fc34 	bl	800e080 <HAL_PCD_DataOutStageCallback>
 8004818:	e046      	b.n	80048a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	4a26      	ldr	r2, [pc, #152]	; (80048b8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d124      	bne.n	800486c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004838:	461a      	mov	r2, r3
 800483a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800483e:	6093      	str	r3, [r2, #8]
 8004840:	e032      	b.n	80048a8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f003 0320 	and.w	r3, r3, #32
 8004848:	2b00      	cmp	r3, #0
 800484a:	d008      	beq.n	800485e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004858:	461a      	mov	r2, r3
 800485a:	2320      	movs	r3, #32
 800485c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	b2db      	uxtb	r3, r3
 8004862:	4619      	mov	r1, r3
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f009 fc0b 	bl	800e080 <HAL_PCD_DataOutStageCallback>
 800486a:	e01d      	b.n	80048a8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d114      	bne.n	800489c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	4613      	mov	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	4413      	add	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d108      	bne.n	800489c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6818      	ldr	r0, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004894:	461a      	mov	r2, r3
 8004896:	2100      	movs	r1, #0
 8004898:	f002 ff44 	bl	8007724 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	4619      	mov	r1, r3
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f009 fbec 	bl	800e080 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	4f54300a 	.word	0x4f54300a
 80048b8:	4f54310a 	.word	0x4f54310a

080048bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	333c      	adds	r3, #60	; 0x3c
 80048d4:	3304      	adds	r3, #4
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4a15      	ldr	r2, [pc, #84]	; (8004944 <PCD_EP_OutSetupPacket_int+0x88>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d90e      	bls.n	8004910 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d009      	beq.n	8004910 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004908:	461a      	mov	r2, r3
 800490a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800490e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f009 fba3 	bl	800e05c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	4a0a      	ldr	r2, [pc, #40]	; (8004944 <PCD_EP_OutSetupPacket_int+0x88>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d90c      	bls.n	8004938 <PCD_EP_OutSetupPacket_int+0x7c>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	2b01      	cmp	r3, #1
 8004924:	d108      	bne.n	8004938 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004930:	461a      	mov	r2, r3
 8004932:	2101      	movs	r1, #1
 8004934:	f002 fef6 	bl	8007724 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	bf00      	nop
 8004944:	4f54300a 	.word	0x4f54300a

08004948 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	460b      	mov	r3, r1
 8004952:	70fb      	strb	r3, [r7, #3]
 8004954:	4613      	mov	r3, r2
 8004956:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004960:	78fb      	ldrb	r3, [r7, #3]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d107      	bne.n	8004976 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004966:	883b      	ldrh	r3, [r7, #0]
 8004968:	0419      	lsls	r1, r3, #16
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	430a      	orrs	r2, r1
 8004972:	629a      	str	r2, [r3, #40]	; 0x28
 8004974:	e028      	b.n	80049c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497c:	0c1b      	lsrs	r3, r3, #16
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	4413      	add	r3, r2
 8004982:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004984:	2300      	movs	r3, #0
 8004986:	73fb      	strb	r3, [r7, #15]
 8004988:	e00d      	b.n	80049a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	3340      	adds	r3, #64	; 0x40
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4413      	add	r3, r2
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	0c1b      	lsrs	r3, r3, #16
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	4413      	add	r3, r2
 800499e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	3301      	adds	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
 80049a6:	7bfa      	ldrb	r2, [r7, #15]
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d3ec      	bcc.n	800498a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049b0:	883b      	ldrh	r3, [r7, #0]
 80049b2:	0418      	lsls	r0, r3, #16
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6819      	ldr	r1, [r3, #0]
 80049b8:	78fb      	ldrb	r3, [r7, #3]
 80049ba:	3b01      	subs	r3, #1
 80049bc:	68ba      	ldr	r2, [r7, #8]
 80049be:	4302      	orrs	r2, r0
 80049c0:	3340      	adds	r3, #64	; 0x40
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	460b      	mov	r3, r1
 80049e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	887a      	ldrh	r2, [r7, #2]
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	e267      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d075      	beq.n	8004b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a2e:	4b88      	ldr	r3, [pc, #544]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d00c      	beq.n	8004a54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a3a:	4b85      	ldr	r3, [pc, #532]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d112      	bne.n	8004a6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a46:	4b82      	ldr	r3, [pc, #520]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a52:	d10b      	bne.n	8004a6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a54:	4b7e      	ldr	r3, [pc, #504]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d05b      	beq.n	8004b18 <HAL_RCC_OscConfig+0x108>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d157      	bne.n	8004b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e242      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a74:	d106      	bne.n	8004a84 <HAL_RCC_OscConfig+0x74>
 8004a76:	4b76      	ldr	r3, [pc, #472]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a75      	ldr	r2, [pc, #468]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e01d      	b.n	8004ac0 <HAL_RCC_OscConfig+0xb0>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x98>
 8004a8e:	4b70      	ldr	r3, [pc, #448]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a6f      	ldr	r2, [pc, #444]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	4b6d      	ldr	r3, [pc, #436]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a6c      	ldr	r2, [pc, #432]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	e00b      	b.n	8004ac0 <HAL_RCC_OscConfig+0xb0>
 8004aa8:	4b69      	ldr	r3, [pc, #420]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a68      	ldr	r2, [pc, #416]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab2:	6013      	str	r3, [r2, #0]
 8004ab4:	4b66      	ldr	r3, [pc, #408]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a65      	ldr	r2, [pc, #404]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d013      	beq.n	8004af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac8:	f7fd faca 	bl	8002060 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ad0:	f7fd fac6 	bl	8002060 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b64      	cmp	r3, #100	; 0x64
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e207      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	4b5b      	ldr	r3, [pc, #364]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0xc0>
 8004aee:	e014      	b.n	8004b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af0:	f7fd fab6 	bl	8002060 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004af8:	f7fd fab2 	bl	8002060 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b64      	cmp	r3, #100	; 0x64
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e1f3      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0a:	4b51      	ldr	r3, [pc, #324]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0xe8>
 8004b16:	e000      	b.n	8004b1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d063      	beq.n	8004bee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b26:	4b4a      	ldr	r3, [pc, #296]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 030c 	and.w	r3, r3, #12
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b32:	4b47      	ldr	r3, [pc, #284]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d11c      	bne.n	8004b78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b3e:	4b44      	ldr	r3, [pc, #272]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d116      	bne.n	8004b78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4a:	4b41      	ldr	r3, [pc, #260]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <HAL_RCC_OscConfig+0x152>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d001      	beq.n	8004b62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e1c7      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b62:	4b3b      	ldr	r3, [pc, #236]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4937      	ldr	r1, [pc, #220]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b76:	e03a      	b.n	8004bee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d020      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b80:	4b34      	ldr	r3, [pc, #208]	; (8004c54 <HAL_RCC_OscConfig+0x244>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b86:	f7fd fa6b 	bl	8002060 <HAL_GetTick>
 8004b8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b8e:	f7fd fa67 	bl	8002060 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e1a8      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba0:	4b2b      	ldr	r3, [pc, #172]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f0      	beq.n	8004b8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bac:	4b28      	ldr	r3, [pc, #160]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	4925      	ldr	r1, [pc, #148]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	600b      	str	r3, [r1, #0]
 8004bc0:	e015      	b.n	8004bee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc2:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <HAL_RCC_OscConfig+0x244>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc8:	f7fd fa4a 	bl	8002060 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd0:	f7fd fa46 	bl	8002060 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e187      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be2:	4b1b      	ldr	r3, [pc, #108]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d036      	beq.n	8004c68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d016      	beq.n	8004c30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c02:	4b15      	ldr	r3, [pc, #84]	; (8004c58 <HAL_RCC_OscConfig+0x248>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c08:	f7fd fa2a 	bl	8002060 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c10:	f7fd fa26 	bl	8002060 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e167      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c22:	4b0b      	ldr	r3, [pc, #44]	; (8004c50 <HAL_RCC_OscConfig+0x240>)
 8004c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x200>
 8004c2e:	e01b      	b.n	8004c68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c30:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <HAL_RCC_OscConfig+0x248>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c36:	f7fd fa13 	bl	8002060 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c3c:	e00e      	b.n	8004c5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c3e:	f7fd fa0f 	bl	8002060 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d907      	bls.n	8004c5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e150      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
 8004c50:	40023800 	.word	0x40023800
 8004c54:	42470000 	.word	0x42470000
 8004c58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c5c:	4b88      	ldr	r3, [pc, #544]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1ea      	bne.n	8004c3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0304 	and.w	r3, r3, #4
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 8097 	beq.w	8004da4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c76:	2300      	movs	r3, #0
 8004c78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c7a:	4b81      	ldr	r3, [pc, #516]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10f      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c86:	2300      	movs	r3, #0
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	4b7d      	ldr	r3, [pc, #500]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	4a7c      	ldr	r2, [pc, #496]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c94:	6413      	str	r3, [r2, #64]	; 0x40
 8004c96:	4b7a      	ldr	r3, [pc, #488]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca6:	4b77      	ldr	r3, [pc, #476]	; (8004e84 <HAL_RCC_OscConfig+0x474>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d118      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cb2:	4b74      	ldr	r3, [pc, #464]	; (8004e84 <HAL_RCC_OscConfig+0x474>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a73      	ldr	r2, [pc, #460]	; (8004e84 <HAL_RCC_OscConfig+0x474>)
 8004cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cbe:	f7fd f9cf 	bl	8002060 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc6:	f7fd f9cb 	bl	8002060 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e10c      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd8:	4b6a      	ldr	r3, [pc, #424]	; (8004e84 <HAL_RCC_OscConfig+0x474>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d106      	bne.n	8004cfa <HAL_RCC_OscConfig+0x2ea>
 8004cec:	4b64      	ldr	r3, [pc, #400]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf0:	4a63      	ldr	r2, [pc, #396]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	f043 0301 	orr.w	r3, r3, #1
 8004cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cf8:	e01c      	b.n	8004d34 <HAL_RCC_OscConfig+0x324>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	2b05      	cmp	r3, #5
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCC_OscConfig+0x30c>
 8004d02:	4b5f      	ldr	r3, [pc, #380]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	4a5e      	ldr	r2, [pc, #376]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d08:	f043 0304 	orr.w	r3, r3, #4
 8004d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d0e:	4b5c      	ldr	r3, [pc, #368]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d12:	4a5b      	ldr	r2, [pc, #364]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d14:	f043 0301 	orr.w	r3, r3, #1
 8004d18:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1a:	e00b      	b.n	8004d34 <HAL_RCC_OscConfig+0x324>
 8004d1c:	4b58      	ldr	r3, [pc, #352]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d20:	4a57      	ldr	r2, [pc, #348]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	6713      	str	r3, [r2, #112]	; 0x70
 8004d28:	4b55      	ldr	r3, [pc, #340]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d2c:	4a54      	ldr	r2, [pc, #336]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d2e:	f023 0304 	bic.w	r3, r3, #4
 8004d32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d015      	beq.n	8004d68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d3c:	f7fd f990 	bl	8002060 <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d42:	e00a      	b.n	8004d5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d44:	f7fd f98c 	bl	8002060 <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e0cb      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5a:	4b49      	ldr	r3, [pc, #292]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0ee      	beq.n	8004d44 <HAL_RCC_OscConfig+0x334>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d68:	f7fd f97a 	bl	8002060 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d6e:	e00a      	b.n	8004d86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d70:	f7fd f976 	bl	8002060 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e0b5      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d86:	4b3e      	ldr	r3, [pc, #248]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1ee      	bne.n	8004d70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d105      	bne.n	8004da4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d98:	4b39      	ldr	r3, [pc, #228]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	4a38      	ldr	r2, [pc, #224]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004d9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80a1 	beq.w	8004ef0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dae:	4b34      	ldr	r3, [pc, #208]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	f003 030c 	and.w	r3, r3, #12
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d05c      	beq.n	8004e74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	d141      	bne.n	8004e46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc2:	4b31      	ldr	r3, [pc, #196]	; (8004e88 <HAL_RCC_OscConfig+0x478>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fd f94a 	bl	8002060 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd0:	f7fd f946 	bl	8002060 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e087      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de2:	4b27      	ldr	r3, [pc, #156]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f0      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69da      	ldr	r2, [r3, #28]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	019b      	lsls	r3, r3, #6
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	3b01      	subs	r3, #1
 8004e08:	041b      	lsls	r3, r3, #16
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	061b      	lsls	r3, r3, #24
 8004e12:	491b      	ldr	r1, [pc, #108]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e18:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <HAL_RCC_OscConfig+0x478>)
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e1e:	f7fd f91f 	bl	8002060 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e26:	f7fd f91b 	bl	8002060 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e05c      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e38:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0f0      	beq.n	8004e26 <HAL_RCC_OscConfig+0x416>
 8004e44:	e054      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e46:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <HAL_RCC_OscConfig+0x478>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e4c:	f7fd f908 	bl	8002060 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e54:	f7fd f904 	bl	8002060 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e045      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e66:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <HAL_RCC_OscConfig+0x470>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x444>
 8004e72:	e03d      	b.n	8004ef0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d107      	bne.n	8004e8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e038      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
 8004e80:	40023800 	.word	0x40023800
 8004e84:	40007000 	.word	0x40007000
 8004e88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e8c:	4b1b      	ldr	r3, [pc, #108]	; (8004efc <HAL_RCC_OscConfig+0x4ec>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d028      	beq.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d121      	bne.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d11a      	bne.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	687a      	ldr	r2, [r7, #4]
 8004ec0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ec2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d111      	bne.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed2:	085b      	lsrs	r3, r3, #1
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d107      	bne.n	8004eec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d001      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e000      	b.n	8004ef2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3718      	adds	r7, #24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40023800 	.word	0x40023800

08004f00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e0cc      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f14:	4b68      	ldr	r3, [pc, #416]	; (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d90c      	bls.n	8004f3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f22:	4b65      	ldr	r3, [pc, #404]	; (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2a:	4b63      	ldr	r3, [pc, #396]	; (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d001      	beq.n	8004f3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e0b8      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d020      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f54:	4b59      	ldr	r3, [pc, #356]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	4a58      	ldr	r2, [pc, #352]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f6c:	4b53      	ldr	r3, [pc, #332]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	4a52      	ldr	r2, [pc, #328]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f78:	4b50      	ldr	r3, [pc, #320]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	494d      	ldr	r1, [pc, #308]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d044      	beq.n	8005020 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d107      	bne.n	8004fae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f9e:	4b47      	ldr	r3, [pc, #284]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d119      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e07f      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fbe:	4b3f      	ldr	r3, [pc, #252]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e06f      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fce:	4b3b      	ldr	r3, [pc, #236]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e067      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fde:	4b37      	ldr	r3, [pc, #220]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f023 0203 	bic.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	4934      	ldr	r1, [pc, #208]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff0:	f7fd f836 	bl	8002060 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ff6:	e00a      	b.n	800500e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ff8:	f7fd f832 	bl	8002060 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	f241 3288 	movw	r2, #5000	; 0x1388
 8005006:	4293      	cmp	r3, r2
 8005008:	d901      	bls.n	800500e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e04f      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500e:	4b2b      	ldr	r3, [pc, #172]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 020c 	and.w	r2, r3, #12
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	429a      	cmp	r2, r3
 800501e:	d1eb      	bne.n	8004ff8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005020:	4b25      	ldr	r3, [pc, #148]	; (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	683a      	ldr	r2, [r7, #0]
 800502a:	429a      	cmp	r2, r3
 800502c:	d20c      	bcs.n	8005048 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800502e:	4b22      	ldr	r3, [pc, #136]	; (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	b2d2      	uxtb	r2, r2
 8005034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005036:	4b20      	ldr	r3, [pc, #128]	; (80050b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	683a      	ldr	r2, [r7, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d001      	beq.n	8005048 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e032      	b.n	80050ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d008      	beq.n	8005066 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005054:	4b19      	ldr	r3, [pc, #100]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	4916      	ldr	r1, [pc, #88]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	4313      	orrs	r3, r2
 8005064:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d009      	beq.n	8005086 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005072:	4b12      	ldr	r3, [pc, #72]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	490e      	ldr	r1, [pc, #56]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005086:	f000 f821 	bl	80050cc <HAL_RCC_GetSysClockFreq>
 800508a:	4602      	mov	r2, r0
 800508c:	4b0b      	ldr	r3, [pc, #44]	; (80050bc <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	091b      	lsrs	r3, r3, #4
 8005092:	f003 030f 	and.w	r3, r3, #15
 8005096:	490a      	ldr	r1, [pc, #40]	; (80050c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005098:	5ccb      	ldrb	r3, [r1, r3]
 800509a:	fa22 f303 	lsr.w	r3, r2, r3
 800509e:	4a09      	ldr	r2, [pc, #36]	; (80050c4 <HAL_RCC_ClockConfig+0x1c4>)
 80050a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050a2:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <HAL_RCC_ClockConfig+0x1c8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fc ff96 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40023c00 	.word	0x40023c00
 80050bc:	40023800 	.word	0x40023800
 80050c0:	08010914 	.word	0x08010914
 80050c4:	2000000c 	.word	0x2000000c
 80050c8:	20000010 	.word	0x20000010

080050cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d0:	b090      	sub	sp, #64	; 0x40
 80050d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	637b      	str	r3, [r7, #52]	; 0x34
 80050d8:	2300      	movs	r3, #0
 80050da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050dc:	2300      	movs	r3, #0
 80050de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050e4:	4b59      	ldr	r3, [pc, #356]	; (800524c <HAL_RCC_GetSysClockFreq+0x180>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 030c 	and.w	r3, r3, #12
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d00d      	beq.n	800510c <HAL_RCC_GetSysClockFreq+0x40>
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	f200 80a1 	bhi.w	8005238 <HAL_RCC_GetSysClockFreq+0x16c>
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_RCC_GetSysClockFreq+0x34>
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d003      	beq.n	8005106 <HAL_RCC_GetSysClockFreq+0x3a>
 80050fe:	e09b      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005100:	4b53      	ldr	r3, [pc, #332]	; (8005250 <HAL_RCC_GetSysClockFreq+0x184>)
 8005102:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005104:	e09b      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005106:	4b53      	ldr	r3, [pc, #332]	; (8005254 <HAL_RCC_GetSysClockFreq+0x188>)
 8005108:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800510a:	e098      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800510c:	4b4f      	ldr	r3, [pc, #316]	; (800524c <HAL_RCC_GetSysClockFreq+0x180>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005114:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005116:	4b4d      	ldr	r3, [pc, #308]	; (800524c <HAL_RCC_GetSysClockFreq+0x180>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d028      	beq.n	8005174 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005122:	4b4a      	ldr	r3, [pc, #296]	; (800524c <HAL_RCC_GetSysClockFreq+0x180>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	099b      	lsrs	r3, r3, #6
 8005128:	2200      	movs	r2, #0
 800512a:	623b      	str	r3, [r7, #32]
 800512c:	627a      	str	r2, [r7, #36]	; 0x24
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005134:	2100      	movs	r1, #0
 8005136:	4b47      	ldr	r3, [pc, #284]	; (8005254 <HAL_RCC_GetSysClockFreq+0x188>)
 8005138:	fb03 f201 	mul.w	r2, r3, r1
 800513c:	2300      	movs	r3, #0
 800513e:	fb00 f303 	mul.w	r3, r0, r3
 8005142:	4413      	add	r3, r2
 8005144:	4a43      	ldr	r2, [pc, #268]	; (8005254 <HAL_RCC_GetSysClockFreq+0x188>)
 8005146:	fba0 1202 	umull	r1, r2, r0, r2
 800514a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800514c:	460a      	mov	r2, r1
 800514e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005152:	4413      	add	r3, r2
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005158:	2200      	movs	r2, #0
 800515a:	61bb      	str	r3, [r7, #24]
 800515c:	61fa      	str	r2, [r7, #28]
 800515e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005162:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005166:	f7fb fd21 	bl	8000bac <__aeabi_uldivmod>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4613      	mov	r3, r2
 8005170:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005172:	e053      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005174:	4b35      	ldr	r3, [pc, #212]	; (800524c <HAL_RCC_GetSysClockFreq+0x180>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	099b      	lsrs	r3, r3, #6
 800517a:	2200      	movs	r2, #0
 800517c:	613b      	str	r3, [r7, #16]
 800517e:	617a      	str	r2, [r7, #20]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005186:	f04f 0b00 	mov.w	fp, #0
 800518a:	4652      	mov	r2, sl
 800518c:	465b      	mov	r3, fp
 800518e:	f04f 0000 	mov.w	r0, #0
 8005192:	f04f 0100 	mov.w	r1, #0
 8005196:	0159      	lsls	r1, r3, #5
 8005198:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800519c:	0150      	lsls	r0, r2, #5
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	ebb2 080a 	subs.w	r8, r2, sl
 80051a6:	eb63 090b 	sbc.w	r9, r3, fp
 80051aa:	f04f 0200 	mov.w	r2, #0
 80051ae:	f04f 0300 	mov.w	r3, #0
 80051b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80051b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80051ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80051be:	ebb2 0408 	subs.w	r4, r2, r8
 80051c2:	eb63 0509 	sbc.w	r5, r3, r9
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	00eb      	lsls	r3, r5, #3
 80051d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051d4:	00e2      	lsls	r2, r4, #3
 80051d6:	4614      	mov	r4, r2
 80051d8:	461d      	mov	r5, r3
 80051da:	eb14 030a 	adds.w	r3, r4, sl
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	eb45 030b 	adc.w	r3, r5, fp
 80051e4:	607b      	str	r3, [r7, #4]
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051f2:	4629      	mov	r1, r5
 80051f4:	028b      	lsls	r3, r1, #10
 80051f6:	4621      	mov	r1, r4
 80051f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051fc:	4621      	mov	r1, r4
 80051fe:	028a      	lsls	r2, r1, #10
 8005200:	4610      	mov	r0, r2
 8005202:	4619      	mov	r1, r3
 8005204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005206:	2200      	movs	r2, #0
 8005208:	60bb      	str	r3, [r7, #8]
 800520a:	60fa      	str	r2, [r7, #12]
 800520c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005210:	f7fb fccc 	bl	8000bac <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4613      	mov	r3, r2
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800521c:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_RCC_GetSysClockFreq+0x180>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	3301      	adds	r3, #1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800522c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800522e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005236:	e002      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <HAL_RCC_GetSysClockFreq+0x184>)
 800523a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800523c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005240:	4618      	mov	r0, r3
 8005242:	3740      	adds	r7, #64	; 0x40
 8005244:	46bd      	mov	sp, r7
 8005246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800
 8005250:	00f42400 	.word	0x00f42400
 8005254:	017d7840 	.word	0x017d7840

08005258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <HAL_RCC_GetHCLKFreq+0x14>)
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	2000000c 	.word	0x2000000c

08005270 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e041      	b.n	8005306 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fc fd42 	bl	8001d20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4619      	mov	r1, r3
 80052ae:	4610      	mov	r0, r2
 80052b0:	f000 fb42 	bl	8005938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	d001      	beq.n	8005328 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e03c      	b.n	80053a2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a1e      	ldr	r2, [pc, #120]	; (80053b0 <HAL_TIM_Base_Start+0xa0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d018      	beq.n	800536c <HAL_TIM_Base_Start+0x5c>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005342:	d013      	beq.n	800536c <HAL_TIM_Base_Start+0x5c>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a1a      	ldr	r2, [pc, #104]	; (80053b4 <HAL_TIM_Base_Start+0xa4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00e      	beq.n	800536c <HAL_TIM_Base_Start+0x5c>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a19      	ldr	r2, [pc, #100]	; (80053b8 <HAL_TIM_Base_Start+0xa8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d009      	beq.n	800536c <HAL_TIM_Base_Start+0x5c>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a17      	ldr	r2, [pc, #92]	; (80053bc <HAL_TIM_Base_Start+0xac>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d004      	beq.n	800536c <HAL_TIM_Base_Start+0x5c>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a16      	ldr	r2, [pc, #88]	; (80053c0 <HAL_TIM_Base_Start+0xb0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d111      	bne.n	8005390 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2b06      	cmp	r3, #6
 800537c:	d010      	beq.n	80053a0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f042 0201 	orr.w	r2, r2, #1
 800538c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800538e:	e007      	b.n	80053a0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f042 0201 	orr.w	r2, r2, #1
 800539e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40010000 	.word	0x40010000
 80053b4:	40000400 	.word	0x40000400
 80053b8:	40000800 	.word	0x40000800
 80053bc:	40000c00 	.word	0x40000c00
 80053c0:	40014000 	.word	0x40014000

080053c4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6a1a      	ldr	r2, [r3, #32]
 80053d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10f      	bne.n	80053fc <HAL_TIM_Base_Stop+0x38>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6a1a      	ldr	r2, [r3, #32]
 80053e2:	f240 4344 	movw	r3, #1092	; 0x444
 80053e6:	4013      	ands	r3, r2
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d107      	bne.n	80053fc <HAL_TIM_Base_Stop+0x38>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0201 	bic.w	r2, r2, #1
 80053fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e041      	b.n	80054a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d106      	bne.n	800543e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f839 	bl	80054b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2202      	movs	r2, #2
 8005442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	3304      	adds	r3, #4
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	f000 fa71 	bl	8005938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d109      	bne.n	80054e8 <HAL_TIM_PWM_Start+0x24>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	bf14      	ite	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	2300      	moveq	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e022      	b.n	800552e <HAL_TIM_PWM_Start+0x6a>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d109      	bne.n	8005502 <HAL_TIM_PWM_Start+0x3e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	bf14      	ite	ne
 80054fa:	2301      	movne	r3, #1
 80054fc:	2300      	moveq	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	e015      	b.n	800552e <HAL_TIM_PWM_Start+0x6a>
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b08      	cmp	r3, #8
 8005506:	d109      	bne.n	800551c <HAL_TIM_PWM_Start+0x58>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800550e:	b2db      	uxtb	r3, r3
 8005510:	2b01      	cmp	r3, #1
 8005512:	bf14      	ite	ne
 8005514:	2301      	movne	r3, #1
 8005516:	2300      	moveq	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	e008      	b.n	800552e <HAL_TIM_PWM_Start+0x6a>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b01      	cmp	r3, #1
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e068      	b.n	8005608 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d104      	bne.n	8005546 <HAL_TIM_PWM_Start+0x82>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005544:	e013      	b.n	800556e <HAL_TIM_PWM_Start+0xaa>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b04      	cmp	r3, #4
 800554a:	d104      	bne.n	8005556 <HAL_TIM_PWM_Start+0x92>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005554:	e00b      	b.n	800556e <HAL_TIM_PWM_Start+0xaa>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d104      	bne.n	8005566 <HAL_TIM_PWM_Start+0xa2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005564:	e003      	b.n	800556e <HAL_TIM_PWM_Start+0xaa>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2202      	movs	r2, #2
 800556a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2201      	movs	r2, #1
 8005574:	6839      	ldr	r1, [r7, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fc84 	bl	8005e84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a23      	ldr	r2, [pc, #140]	; (8005610 <HAL_TIM_PWM_Start+0x14c>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d107      	bne.n	8005596 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005594:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1d      	ldr	r2, [pc, #116]	; (8005610 <HAL_TIM_PWM_Start+0x14c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d018      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x10e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a8:	d013      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x10e>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a19      	ldr	r2, [pc, #100]	; (8005614 <HAL_TIM_PWM_Start+0x150>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x10e>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a17      	ldr	r2, [pc, #92]	; (8005618 <HAL_TIM_PWM_Start+0x154>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x10e>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a16      	ldr	r2, [pc, #88]	; (800561c <HAL_TIM_PWM_Start+0x158>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_TIM_PWM_Start+0x10e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a14      	ldr	r2, [pc, #80]	; (8005620 <HAL_TIM_PWM_Start+0x15c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d111      	bne.n	80055f6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b06      	cmp	r3, #6
 80055e2:	d010      	beq.n	8005606 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f042 0201 	orr.w	r2, r2, #1
 80055f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f4:	e007      	b.n	8005606 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f042 0201 	orr.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40010000 	.word	0x40010000
 8005614:	40000400 	.word	0x40000400
 8005618:	40000800 	.word	0x40000800
 800561c:	40000c00 	.word	0x40000c00
 8005620:	40014000 	.word	0x40014000

08005624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005630:	2300      	movs	r3, #0
 8005632:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800563e:	2302      	movs	r3, #2
 8005640:	e0ae      	b.n	80057a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b0c      	cmp	r3, #12
 800564e:	f200 809f 	bhi.w	8005790 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005652:	a201      	add	r2, pc, #4	; (adr r2, 8005658 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005658:	0800568d 	.word	0x0800568d
 800565c:	08005791 	.word	0x08005791
 8005660:	08005791 	.word	0x08005791
 8005664:	08005791 	.word	0x08005791
 8005668:	080056cd 	.word	0x080056cd
 800566c:	08005791 	.word	0x08005791
 8005670:	08005791 	.word	0x08005791
 8005674:	08005791 	.word	0x08005791
 8005678:	0800570f 	.word	0x0800570f
 800567c:	08005791 	.word	0x08005791
 8005680:	08005791 	.word	0x08005791
 8005684:	08005791 	.word	0x08005791
 8005688:	0800574f 	.word	0x0800574f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 f9d0 	bl	8005a38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0208 	orr.w	r2, r2, #8
 80056a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f022 0204 	bic.w	r2, r2, #4
 80056b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6999      	ldr	r1, [r3, #24]
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	619a      	str	r2, [r3, #24]
      break;
 80056ca:	e064      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fa16 	bl	8005b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	699a      	ldr	r2, [r3, #24]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6999      	ldr	r1, [r3, #24]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	021a      	lsls	r2, r3, #8
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	619a      	str	r2, [r3, #24]
      break;
 800570c:	e043      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	4618      	mov	r0, r3
 8005716:	f000 fa61 	bl	8005bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f042 0208 	orr.w	r2, r2, #8
 8005728:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0204 	bic.w	r2, r2, #4
 8005738:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69d9      	ldr	r1, [r3, #28]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	61da      	str	r2, [r3, #28]
      break;
 800574c:	e023      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68b9      	ldr	r1, [r7, #8]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 faab 	bl	8005cb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69da      	ldr	r2, [r3, #28]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005768:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005778:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	69d9      	ldr	r1, [r3, #28]
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	691b      	ldr	r3, [r3, #16]
 8005784:	021a      	lsls	r2, r3, #8
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	61da      	str	r2, [r3, #28]
      break;
 800578e:	e002      	b.n	8005796 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	75fb      	strb	r3, [r7, #23]
      break;
 8005794:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800579e:	7dfb      	ldrb	r3, [r7, #23]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_TIM_ConfigClockSource+0x1c>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e0b4      	b.n	800592e <HAL_TIM_ConfigClockSource+0x186>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fc:	d03e      	beq.n	800587c <HAL_TIM_ConfigClockSource+0xd4>
 80057fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005802:	f200 8087 	bhi.w	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580a:	f000 8086 	beq.w	800591a <HAL_TIM_ConfigClockSource+0x172>
 800580e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005812:	d87f      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005814:	2b70      	cmp	r3, #112	; 0x70
 8005816:	d01a      	beq.n	800584e <HAL_TIM_ConfigClockSource+0xa6>
 8005818:	2b70      	cmp	r3, #112	; 0x70
 800581a:	d87b      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 800581c:	2b60      	cmp	r3, #96	; 0x60
 800581e:	d050      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005820:	2b60      	cmp	r3, #96	; 0x60
 8005822:	d877      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005824:	2b50      	cmp	r3, #80	; 0x50
 8005826:	d03c      	beq.n	80058a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005828:	2b50      	cmp	r3, #80	; 0x50
 800582a:	d873      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d058      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d86f      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005834:	2b30      	cmp	r3, #48	; 0x30
 8005836:	d064      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 8005838:	2b30      	cmp	r3, #48	; 0x30
 800583a:	d86b      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 800583c:	2b20      	cmp	r3, #32
 800583e:	d060      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 8005840:	2b20      	cmp	r3, #32
 8005842:	d867      	bhi.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
 8005844:	2b00      	cmp	r3, #0
 8005846:	d05c      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 8005848:	2b10      	cmp	r3, #16
 800584a:	d05a      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x15a>
 800584c:	e062      	b.n	8005914 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	6899      	ldr	r1, [r3, #8]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f000 faf1 	bl	8005e44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	609a      	str	r2, [r3, #8]
      break;
 800587a:	e04f      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	6899      	ldr	r1, [r3, #8]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f000 fada 	bl	8005e44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689a      	ldr	r2, [r3, #8]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800589e:	609a      	str	r2, [r3, #8]
      break;
 80058a0:	e03c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	6859      	ldr	r1, [r3, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	461a      	mov	r2, r3
 80058b0:	f000 fa4e 	bl	8005d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2150      	movs	r1, #80	; 0x50
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 faa7 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 80058c0:	e02c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	461a      	mov	r2, r3
 80058d0:	f000 fa6d 	bl	8005dae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2160      	movs	r1, #96	; 0x60
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fa97 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 80058e0:	e01c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6859      	ldr	r1, [r3, #4]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	461a      	mov	r2, r3
 80058f0:	f000 fa2e 	bl	8005d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2140      	movs	r1, #64	; 0x40
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 fa87 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 8005900:	e00c      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f000 fa7e 	bl	8005e0e <TIM_ITRx_SetConfig>
      break;
 8005912:	e003      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	73fb      	strb	r3, [r7, #15]
      break;
 8005918:	e000      	b.n	800591c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800591a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a34      	ldr	r2, [pc, #208]	; (8005a1c <TIM_Base_SetConfig+0xe4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00f      	beq.n	8005970 <TIM_Base_SetConfig+0x38>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005956:	d00b      	beq.n	8005970 <TIM_Base_SetConfig+0x38>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a31      	ldr	r2, [pc, #196]	; (8005a20 <TIM_Base_SetConfig+0xe8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d007      	beq.n	8005970 <TIM_Base_SetConfig+0x38>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a30      	ldr	r2, [pc, #192]	; (8005a24 <TIM_Base_SetConfig+0xec>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d003      	beq.n	8005970 <TIM_Base_SetConfig+0x38>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a2f      	ldr	r2, [pc, #188]	; (8005a28 <TIM_Base_SetConfig+0xf0>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d108      	bne.n	8005982 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a25      	ldr	r2, [pc, #148]	; (8005a1c <TIM_Base_SetConfig+0xe4>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d01b      	beq.n	80059c2 <TIM_Base_SetConfig+0x8a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005990:	d017      	beq.n	80059c2 <TIM_Base_SetConfig+0x8a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <TIM_Base_SetConfig+0xe8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <TIM_Base_SetConfig+0x8a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a21      	ldr	r2, [pc, #132]	; (8005a24 <TIM_Base_SetConfig+0xec>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00f      	beq.n	80059c2 <TIM_Base_SetConfig+0x8a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a20      	ldr	r2, [pc, #128]	; (8005a28 <TIM_Base_SetConfig+0xf0>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00b      	beq.n	80059c2 <TIM_Base_SetConfig+0x8a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a1f      	ldr	r2, [pc, #124]	; (8005a2c <TIM_Base_SetConfig+0xf4>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d007      	beq.n	80059c2 <TIM_Base_SetConfig+0x8a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a1e      	ldr	r2, [pc, #120]	; (8005a30 <TIM_Base_SetConfig+0xf8>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d003      	beq.n	80059c2 <TIM_Base_SetConfig+0x8a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1d      	ldr	r2, [pc, #116]	; (8005a34 <TIM_Base_SetConfig+0xfc>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d108      	bne.n	80059d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a08      	ldr	r2, [pc, #32]	; (8005a1c <TIM_Base_SetConfig+0xe4>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d103      	bne.n	8005a08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	615a      	str	r2, [r3, #20]
}
 8005a0e:	bf00      	nop
 8005a10:	3714      	adds	r7, #20
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	40010000 	.word	0x40010000
 8005a20:	40000400 	.word	0x40000400
 8005a24:	40000800 	.word	0x40000800
 8005a28:	40000c00 	.word	0x40000c00
 8005a2c:	40014000 	.word	0x40014000
 8005a30:	40014400 	.word	0x40014400
 8005a34:	40014800 	.word	0x40014800

08005a38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f023 0201 	bic.w	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f023 0302 	bic.w	r3, r3, #2
 8005a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a1c      	ldr	r2, [pc, #112]	; (8005b00 <TIM_OC1_SetConfig+0xc8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d10c      	bne.n	8005aae <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	f023 0308 	bic.w	r3, r3, #8
 8005a9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f023 0304 	bic.w	r3, r3, #4
 8005aac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a13      	ldr	r2, [pc, #76]	; (8005b00 <TIM_OC1_SetConfig+0xc8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d111      	bne.n	8005ada <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005abc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	695b      	ldr	r3, [r3, #20]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	621a      	str	r2, [r3, #32]
}
 8005af4:	bf00      	nop
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	40010000 	.word	0x40010000

08005b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	f023 0210 	bic.w	r2, r3, #16
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	699b      	ldr	r3, [r3, #24]
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	021b      	lsls	r3, r3, #8
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0320 	bic.w	r3, r3, #32
 8005b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a1e      	ldr	r2, [pc, #120]	; (8005bd8 <TIM_OC2_SetConfig+0xd4>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d10d      	bne.n	8005b80 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a15      	ldr	r2, [pc, #84]	; (8005bd8 <TIM_OC2_SetConfig+0xd4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d113      	bne.n	8005bb0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	621a      	str	r2, [r3, #32]
}
 8005bca:	bf00      	nop
 8005bcc:	371c      	adds	r7, #28
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40010000 	.word	0x40010000

08005bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 0303 	bic.w	r3, r3, #3
 8005c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1d      	ldr	r2, [pc, #116]	; (8005cac <TIM_OC3_SetConfig+0xd0>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d10d      	bne.n	8005c56 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	021b      	lsls	r3, r3, #8
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a14      	ldr	r2, [pc, #80]	; (8005cac <TIM_OC3_SetConfig+0xd0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d113      	bne.n	8005c86 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	011b      	lsls	r3, r3, #4
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	699b      	ldr	r3, [r3, #24]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	697a      	ldr	r2, [r7, #20]
 8005c9e:	621a      	str	r2, [r3, #32]
}
 8005ca0:	bf00      	nop
 8005ca2:	371c      	adds	r7, #28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	40010000 	.word	0x40010000

08005cb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	031b      	lsls	r3, r3, #12
 8005d02:	693a      	ldr	r2, [r7, #16]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a10      	ldr	r2, [pc, #64]	; (8005d4c <TIM_OC4_SetConfig+0x9c>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d109      	bne.n	8005d24 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	695b      	ldr	r3, [r3, #20]
 8005d1c:	019b      	lsls	r3, r3, #6
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	621a      	str	r2, [r3, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	40010000 	.word	0x40010000

08005d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f023 0201 	bic.w	r2, r3, #1
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f023 030a 	bic.w	r3, r3, #10
 8005d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b087      	sub	sp, #28
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	f023 0210 	bic.w	r2, r3, #16
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	031b      	lsls	r3, r3, #12
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	011b      	lsls	r3, r3, #4
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	621a      	str	r2, [r3, #32]
}
 8005e02:	bf00      	nop
 8005e04:	371c      	adds	r7, #28
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
 8005e16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	f043 0307 	orr.w	r3, r3, #7
 8005e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	609a      	str	r2, [r3, #8]
}
 8005e38:	bf00      	nop
 8005e3a:	3714      	adds	r7, #20
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	021a      	lsls	r2, r3, #8
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	431a      	orrs	r2, r3
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f003 031f 	and.w	r3, r3, #31
 8005e96:	2201      	movs	r2, #1
 8005e98:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1a      	ldr	r2, [r3, #32]
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	401a      	ands	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1a      	ldr	r2, [r3, #32]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebc:	431a      	orrs	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	621a      	str	r2, [r3, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr
	...

08005ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d101      	bne.n	8005ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ee4:	2302      	movs	r3, #2
 8005ee6:	e050      	b.n	8005f8a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a1c      	ldr	r2, [pc, #112]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d018      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f34:	d013      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a18      	ldr	r2, [pc, #96]	; (8005f9c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00e      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a16      	ldr	r2, [pc, #88]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d009      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a15      	ldr	r2, [pc, #84]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d004      	beq.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a13      	ldr	r2, [pc, #76]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d10c      	bne.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	40010000 	.word	0x40010000
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40000c00 	.word	0x40000c00
 8005fa8:	40014000 	.word	0x40014000

08005fac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fac:	b084      	sub	sp, #16
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	f107 001c 	add.w	r0, r7, #28
 8005fba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d122      	bne.n	800600a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d105      	bne.n	8005ffe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f001 fbee 	bl	80077e0 <USB_CoreReset>
 8006004:	4603      	mov	r3, r0
 8006006:	73fb      	strb	r3, [r7, #15]
 8006008:	e01a      	b.n	8006040 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f001 fbe2 	bl	80077e0 <USB_CoreReset>
 800601c:	4603      	mov	r3, r0
 800601e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006020:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	d106      	bne.n	8006034 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	639a      	str	r2, [r3, #56]	; 0x38
 8006032:	e005      	b.n	8006040 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006038:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	2b01      	cmp	r3, #1
 8006044:	d10b      	bne.n	800605e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f043 0206 	orr.w	r2, r3, #6
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f043 0220 	orr.w	r2, r3, #32
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800605e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800606a:	b004      	add	sp, #16
 800606c:	4770      	bx	lr
	...

08006070 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	4613      	mov	r3, r2
 800607c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800607e:	79fb      	ldrb	r3, [r7, #7]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d165      	bne.n	8006150 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4a41      	ldr	r2, [pc, #260]	; (800618c <USB_SetTurnaroundTime+0x11c>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d906      	bls.n	800609a <USB_SetTurnaroundTime+0x2a>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	4a40      	ldr	r2, [pc, #256]	; (8006190 <USB_SetTurnaroundTime+0x120>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d202      	bcs.n	800609a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006094:	230f      	movs	r3, #15
 8006096:	617b      	str	r3, [r7, #20]
 8006098:	e062      	b.n	8006160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	4a3c      	ldr	r2, [pc, #240]	; (8006190 <USB_SetTurnaroundTime+0x120>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d306      	bcc.n	80060b0 <USB_SetTurnaroundTime+0x40>
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	4a3b      	ldr	r2, [pc, #236]	; (8006194 <USB_SetTurnaroundTime+0x124>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d202      	bcs.n	80060b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80060aa:	230e      	movs	r3, #14
 80060ac:	617b      	str	r3, [r7, #20]
 80060ae:	e057      	b.n	8006160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4a38      	ldr	r2, [pc, #224]	; (8006194 <USB_SetTurnaroundTime+0x124>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d306      	bcc.n	80060c6 <USB_SetTurnaroundTime+0x56>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	4a37      	ldr	r2, [pc, #220]	; (8006198 <USB_SetTurnaroundTime+0x128>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d202      	bcs.n	80060c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80060c0:	230d      	movs	r3, #13
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	e04c      	b.n	8006160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	4a33      	ldr	r2, [pc, #204]	; (8006198 <USB_SetTurnaroundTime+0x128>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d306      	bcc.n	80060dc <USB_SetTurnaroundTime+0x6c>
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	4a32      	ldr	r2, [pc, #200]	; (800619c <USB_SetTurnaroundTime+0x12c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d802      	bhi.n	80060dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80060d6:	230c      	movs	r3, #12
 80060d8:	617b      	str	r3, [r7, #20]
 80060da:	e041      	b.n	8006160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4a2f      	ldr	r2, [pc, #188]	; (800619c <USB_SetTurnaroundTime+0x12c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d906      	bls.n	80060f2 <USB_SetTurnaroundTime+0x82>
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4a2e      	ldr	r2, [pc, #184]	; (80061a0 <USB_SetTurnaroundTime+0x130>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d802      	bhi.n	80060f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80060ec:	230b      	movs	r3, #11
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	e036      	b.n	8006160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	4a2a      	ldr	r2, [pc, #168]	; (80061a0 <USB_SetTurnaroundTime+0x130>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d906      	bls.n	8006108 <USB_SetTurnaroundTime+0x98>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	4a29      	ldr	r2, [pc, #164]	; (80061a4 <USB_SetTurnaroundTime+0x134>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d802      	bhi.n	8006108 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006102:	230a      	movs	r3, #10
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	e02b      	b.n	8006160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	4a26      	ldr	r2, [pc, #152]	; (80061a4 <USB_SetTurnaroundTime+0x134>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d906      	bls.n	800611e <USB_SetTurnaroundTime+0xae>
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	4a25      	ldr	r2, [pc, #148]	; (80061a8 <USB_SetTurnaroundTime+0x138>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d202      	bcs.n	800611e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006118:	2309      	movs	r3, #9
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	e020      	b.n	8006160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4a21      	ldr	r2, [pc, #132]	; (80061a8 <USB_SetTurnaroundTime+0x138>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d306      	bcc.n	8006134 <USB_SetTurnaroundTime+0xc4>
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	4a20      	ldr	r2, [pc, #128]	; (80061ac <USB_SetTurnaroundTime+0x13c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d802      	bhi.n	8006134 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800612e:	2308      	movs	r3, #8
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	e015      	b.n	8006160 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4a1d      	ldr	r2, [pc, #116]	; (80061ac <USB_SetTurnaroundTime+0x13c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d906      	bls.n	800614a <USB_SetTurnaroundTime+0xda>
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4a1c      	ldr	r2, [pc, #112]	; (80061b0 <USB_SetTurnaroundTime+0x140>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d202      	bcs.n	800614a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006144:	2307      	movs	r3, #7
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	e00a      	b.n	8006160 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800614a:	2306      	movs	r3, #6
 800614c:	617b      	str	r3, [r7, #20]
 800614e:	e007      	b.n	8006160 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d102      	bne.n	800615c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006156:	2309      	movs	r3, #9
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	e001      	b.n	8006160 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800615c:	2309      	movs	r3, #9
 800615e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	029b      	lsls	r3, r3, #10
 8006174:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006178:	431a      	orrs	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	371c      	adds	r7, #28
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	00d8acbf 	.word	0x00d8acbf
 8006190:	00e4e1c0 	.word	0x00e4e1c0
 8006194:	00f42400 	.word	0x00f42400
 8006198:	01067380 	.word	0x01067380
 800619c:	011a499f 	.word	0x011a499f
 80061a0:	01312cff 	.word	0x01312cff
 80061a4:	014ca43f 	.word	0x014ca43f
 80061a8:	016e3600 	.word	0x016e3600
 80061ac:	01a6ab1f 	.word	0x01a6ab1f
 80061b0:	01e84800 	.word	0x01e84800

080061b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f043 0201 	orr.w	r2, r3, #1
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f023 0201 	bic.w	r2, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	460b      	mov	r3, r1
 8006202:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d115      	bne.n	8006246 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006226:	2001      	movs	r0, #1
 8006228:	f7fb ff26 	bl	8002078 <HAL_Delay>
      ms++;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3301      	adds	r3, #1
 8006230:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f001 fa45 	bl	80076c2 <USB_GetMode>
 8006238:	4603      	mov	r3, r0
 800623a:	2b01      	cmp	r3, #1
 800623c:	d01e      	beq.n	800627c <USB_SetCurrentMode+0x84>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b31      	cmp	r3, #49	; 0x31
 8006242:	d9f0      	bls.n	8006226 <USB_SetCurrentMode+0x2e>
 8006244:	e01a      	b.n	800627c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d115      	bne.n	8006278 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006258:	2001      	movs	r0, #1
 800625a:	f7fb ff0d 	bl	8002078 <HAL_Delay>
      ms++;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	3301      	adds	r3, #1
 8006262:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f001 fa2c 	bl	80076c2 <USB_GetMode>
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d005      	beq.n	800627c <USB_SetCurrentMode+0x84>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b31      	cmp	r3, #49	; 0x31
 8006274:	d9f0      	bls.n	8006258 <USB_SetCurrentMode+0x60>
 8006276:	e001      	b.n	800627c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e005      	b.n	8006288 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b32      	cmp	r3, #50	; 0x32
 8006280:	d101      	bne.n	8006286 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006286:	2300      	movs	r3, #0
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006290:	b084      	sub	sp, #16
 8006292:	b580      	push	{r7, lr}
 8006294:	b086      	sub	sp, #24
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800629e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80062a2:	2300      	movs	r3, #0
 80062a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80062aa:	2300      	movs	r3, #0
 80062ac:	613b      	str	r3, [r7, #16]
 80062ae:	e009      	b.n	80062c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	3340      	adds	r3, #64	; 0x40
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	2200      	movs	r2, #0
 80062bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	3301      	adds	r3, #1
 80062c2:	613b      	str	r3, [r7, #16]
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	2b0e      	cmp	r3, #14
 80062c8:	d9f2      	bls.n	80062b0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80062ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d11c      	bne.n	800630a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062de:	f043 0302 	orr.w	r3, r3, #2
 80062e2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	639a      	str	r2, [r3, #56]	; 0x38
 8006308:	e00b      	b.n	8006322 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006328:	461a      	mov	r2, r3
 800632a:	2300      	movs	r3, #0
 800632c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006334:	4619      	mov	r1, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633c:	461a      	mov	r2, r3
 800633e:	680b      	ldr	r3, [r1, #0]
 8006340:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	2b01      	cmp	r3, #1
 8006346:	d10c      	bne.n	8006362 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d104      	bne.n	8006358 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800634e:	2100      	movs	r1, #0
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 f965 	bl	8006620 <USB_SetDevSpeed>
 8006356:	e008      	b.n	800636a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006358:	2101      	movs	r1, #1
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f960 	bl	8006620 <USB_SetDevSpeed>
 8006360:	e003      	b.n	800636a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006362:	2103      	movs	r1, #3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f95b 	bl	8006620 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800636a:	2110      	movs	r1, #16
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f8f3 	bl	8006558 <USB_FlushTxFifo>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f91f 	bl	80065c0 <USB_FlushRxFifo>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006392:	461a      	mov	r2, r3
 8006394:	2300      	movs	r3, #0
 8006396:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639e:	461a      	mov	r2, r3
 80063a0:	2300      	movs	r3, #0
 80063a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063aa:	461a      	mov	r2, r3
 80063ac:	2300      	movs	r3, #0
 80063ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063b0:	2300      	movs	r3, #0
 80063b2:	613b      	str	r3, [r7, #16]
 80063b4:	e043      	b.n	800643e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063cc:	d118      	bne.n	8006400 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10a      	bne.n	80063ea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	461a      	mov	r2, r3
 80063e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	e013      	b.n	8006412 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	015a      	lsls	r2, r3, #5
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4413      	add	r3, r2
 80063f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063f6:	461a      	mov	r2, r3
 80063f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	e008      	b.n	8006412 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	015a      	lsls	r2, r3, #5
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640c:	461a      	mov	r2, r3
 800640e:	2300      	movs	r3, #0
 8006410:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641e:	461a      	mov	r2, r3
 8006420:	2300      	movs	r3, #0
 8006422:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4413      	add	r3, r2
 800642c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006430:	461a      	mov	r2, r3
 8006432:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006436:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	3301      	adds	r3, #1
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	429a      	cmp	r2, r3
 8006444:	d3b7      	bcc.n	80063b6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006446:	2300      	movs	r3, #0
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	e043      	b.n	80064d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800645e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006462:	d118      	bne.n	8006496 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d10a      	bne.n	8006480 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006476:	461a      	mov	r2, r3
 8006478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	e013      	b.n	80064a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648c:	461a      	mov	r2, r3
 800648e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006492:	6013      	str	r3, [r2, #0]
 8006494:	e008      	b.n	80064a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a2:	461a      	mov	r2, r3
 80064a4:	2300      	movs	r3, #0
 80064a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b4:	461a      	mov	r2, r3
 80064b6:	2300      	movs	r3, #0
 80064b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c6:	461a      	mov	r2, r3
 80064c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	3301      	adds	r3, #1
 80064d2:	613b      	str	r3, [r7, #16]
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d3b7      	bcc.n	800644c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80064fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	f043 0210 	orr.w	r2, r3, #16
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699a      	ldr	r2, [r3, #24]
 8006514:	4b0f      	ldr	r3, [pc, #60]	; (8006554 <USB_DevInit+0x2c4>)
 8006516:	4313      	orrs	r3, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800651c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d005      	beq.n	800652e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	f043 0208 	orr.w	r2, r3, #8
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800652e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006530:	2b01      	cmp	r3, #1
 8006532:	d107      	bne.n	8006544 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	699b      	ldr	r3, [r3, #24]
 8006538:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800653c:	f043 0304 	orr.w	r3, r3, #4
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006544:	7dfb      	ldrb	r3, [r7, #23]
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006550:	b004      	add	sp, #16
 8006552:	4770      	bx	lr
 8006554:	803c3800 	.word	0x803c3800

08006558 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3301      	adds	r3, #1
 800656a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4a13      	ldr	r2, [pc, #76]	; (80065bc <USB_FlushTxFifo+0x64>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d901      	bls.n	8006578 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006574:	2303      	movs	r3, #3
 8006576:	e01b      	b.n	80065b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	daf2      	bge.n	8006566 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	019b      	lsls	r3, r3, #6
 8006588:	f043 0220 	orr.w	r2, r3, #32
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3301      	adds	r3, #1
 8006594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	4a08      	ldr	r2, [pc, #32]	; (80065bc <USB_FlushTxFifo+0x64>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d901      	bls.n	80065a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e006      	b.n	80065b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b20      	cmp	r3, #32
 80065ac:	d0f0      	beq.n	8006590 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr
 80065bc:	00030d40 	.word	0x00030d40

080065c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	4a11      	ldr	r2, [pc, #68]	; (800661c <USB_FlushRxFifo+0x5c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d901      	bls.n	80065de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e018      	b.n	8006610 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	daf2      	bge.n	80065cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2210      	movs	r2, #16
 80065ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	4a08      	ldr	r2, [pc, #32]	; (800661c <USB_FlushRxFifo+0x5c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d901      	bls.n	8006602 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	e006      	b.n	8006610 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 0310 	and.w	r3, r3, #16
 800660a:	2b10      	cmp	r3, #16
 800660c:	d0f0      	beq.n	80065f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	00030d40 	.word	0x00030d40

08006620 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	460b      	mov	r3, r1
 800662a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	68f9      	ldr	r1, [r7, #12]
 800663c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006640:	4313      	orrs	r3, r2
 8006642:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006652:	b480      	push	{r7}
 8006654:	b087      	sub	sp, #28
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f003 0306 	and.w	r3, r3, #6
 800666a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d102      	bne.n	8006678 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006672:	2300      	movs	r3, #0
 8006674:	75fb      	strb	r3, [r7, #23]
 8006676:	e00a      	b.n	800668e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b02      	cmp	r3, #2
 800667c:	d002      	beq.n	8006684 <USB_GetDevSpeed+0x32>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b06      	cmp	r3, #6
 8006682:	d102      	bne.n	800668a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006684:	2302      	movs	r3, #2
 8006686:	75fb      	strb	r3, [r7, #23]
 8006688:	e001      	b.n	800668e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800668a:	230f      	movs	r3, #15
 800668c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800668e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006690:	4618      	mov	r0, r3
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	785b      	ldrb	r3, [r3, #1]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d13a      	bne.n	800672e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066be:	69da      	ldr	r2, [r3, #28]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	f003 030f 	and.w	r3, r3, #15
 80066c8:	2101      	movs	r1, #1
 80066ca:	fa01 f303 	lsl.w	r3, r1, r3
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	68f9      	ldr	r1, [r7, #12]
 80066d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066d6:	4313      	orrs	r3, r2
 80066d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d155      	bne.n	800679c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	791b      	ldrb	r3, [r3, #4]
 800670a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800670c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	059b      	lsls	r3, r3, #22
 8006712:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006714:	4313      	orrs	r3, r2
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	e036      	b.n	800679c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006734:	69da      	ldr	r2, [r3, #28]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	2101      	movs	r1, #1
 8006740:	fa01 f303 	lsl.w	r3, r1, r3
 8006744:	041b      	lsls	r3, r3, #16
 8006746:	68f9      	ldr	r1, [r7, #12]
 8006748:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800674c:	4313      	orrs	r3, r2
 800674e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	015a      	lsls	r2, r3, #5
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d11a      	bne.n	800679c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	791b      	ldrb	r3, [r3, #4]
 8006780:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006782:	430b      	orrs	r3, r1
 8006784:	4313      	orrs	r3, r2
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	0151      	lsls	r1, r2, #5
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	440a      	add	r2, r1
 800678e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800679a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	785b      	ldrb	r3, [r3, #1]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d161      	bne.n	800688c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067de:	d11f      	bne.n	8006820 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	015a      	lsls	r2, r3, #5
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	4413      	add	r3, r2
 80067e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	0151      	lsls	r1, r2, #5
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	440a      	add	r2, r1
 80067f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68ba      	ldr	r2, [r7, #8]
 8006810:	0151      	lsls	r1, r2, #5
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	440a      	add	r2, r1
 8006816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800681a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800681e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	f003 030f 	and.w	r3, r3, #15
 8006830:	2101      	movs	r1, #1
 8006832:	fa01 f303 	lsl.w	r3, r1, r3
 8006836:	b29b      	uxth	r3, r3
 8006838:	43db      	mvns	r3, r3
 800683a:	68f9      	ldr	r1, [r7, #12]
 800683c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006840:	4013      	ands	r3, r2
 8006842:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	69da      	ldr	r2, [r3, #28]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	2101      	movs	r1, #1
 8006856:	fa01 f303 	lsl.w	r3, r1, r3
 800685a:	b29b      	uxth	r3, r3
 800685c:	43db      	mvns	r3, r3
 800685e:	68f9      	ldr	r1, [r7, #12]
 8006860:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006864:	4013      	ands	r3, r2
 8006866:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	0159      	lsls	r1, r3, #5
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	440b      	add	r3, r1
 800687e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006882:	4619      	mov	r1, r3
 8006884:	4b35      	ldr	r3, [pc, #212]	; (800695c <USB_DeactivateEndpoint+0x1b0>)
 8006886:	4013      	ands	r3, r2
 8006888:	600b      	str	r3, [r1, #0]
 800688a:	e060      	b.n	800694e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800689e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068a2:	d11f      	bne.n	80068e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	0151      	lsls	r1, r2, #5
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	440a      	add	r2, r1
 80068ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	0151      	lsls	r1, r2, #5
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	440a      	add	r2, r1
 80068da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	2101      	movs	r1, #1
 80068f6:	fa01 f303 	lsl.w	r3, r1, r3
 80068fa:	041b      	lsls	r3, r3, #16
 80068fc:	43db      	mvns	r3, r3
 80068fe:	68f9      	ldr	r1, [r7, #12]
 8006900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006904:	4013      	ands	r3, r2
 8006906:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800690e:	69da      	ldr	r2, [r3, #28]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	f003 030f 	and.w	r3, r3, #15
 8006918:	2101      	movs	r1, #1
 800691a:	fa01 f303 	lsl.w	r3, r1, r3
 800691e:	041b      	lsls	r3, r3, #16
 8006920:	43db      	mvns	r3, r3
 8006922:	68f9      	ldr	r1, [r7, #12]
 8006924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006928:	4013      	ands	r3, r2
 800692a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	0159      	lsls	r1, r3, #5
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	440b      	add	r3, r1
 8006942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006946:	4619      	mov	r1, r3
 8006948:	4b05      	ldr	r3, [pc, #20]	; (8006960 <USB_DeactivateEndpoint+0x1b4>)
 800694a:	4013      	ands	r3, r2
 800694c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	ec337800 	.word	0xec337800
 8006960:	eff37800 	.word	0xeff37800

08006964 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08a      	sub	sp, #40	; 0x28
 8006968:	af02      	add	r7, sp, #8
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	4613      	mov	r3, r2
 8006970:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	785b      	ldrb	r3, [r3, #1]
 8006980:	2b01      	cmp	r3, #1
 8006982:	f040 815c 	bne.w	8006c3e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d132      	bne.n	80069f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	4413      	add	r3, r2
 8006996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	69ba      	ldr	r2, [r7, #24]
 800699e:	0151      	lsls	r1, r2, #5
 80069a0:	69fa      	ldr	r2, [r7, #28]
 80069a2:	440a      	add	r2, r1
 80069a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	69ba      	ldr	r2, [r7, #24]
 80069c2:	0151      	lsls	r1, r2, #5
 80069c4:	69fa      	ldr	r2, [r7, #28]
 80069c6:	440a      	add	r2, r1
 80069c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	015a      	lsls	r2, r3, #5
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	4413      	add	r3, r2
 80069da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	0151      	lsls	r1, r2, #5
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	440a      	add	r2, r1
 80069e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ec:	0cdb      	lsrs	r3, r3, #19
 80069ee:	04db      	lsls	r3, r3, #19
 80069f0:	6113      	str	r3, [r2, #16]
 80069f2:	e074      	b.n	8006ade <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	0151      	lsls	r1, r2, #5
 8006a06:	69fa      	ldr	r2, [r7, #28]
 8006a08:	440a      	add	r2, r1
 8006a0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a0e:	0cdb      	lsrs	r3, r3, #19
 8006a10:	04db      	lsls	r3, r3, #19
 8006a12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a2e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a32:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a44:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	6999      	ldr	r1, [r3, #24]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	440b      	add	r3, r1
 8006a50:	1e59      	subs	r1, r3, #1
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a5a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006a5c:	4b9d      	ldr	r3, [pc, #628]	; (8006cd4 <USB_EPStartXfer+0x370>)
 8006a5e:	400b      	ands	r3, r1
 8006a60:	69b9      	ldr	r1, [r7, #24]
 8006a62:	0148      	lsls	r0, r1, #5
 8006a64:	69f9      	ldr	r1, [r7, #28]
 8006a66:	4401      	add	r1, r0
 8006a68:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7c:	691a      	ldr	r2, [r3, #16]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a86:	69b9      	ldr	r1, [r7, #24]
 8006a88:	0148      	lsls	r0, r1, #5
 8006a8a:	69f9      	ldr	r1, [r7, #28]
 8006a8c:	4401      	add	r1, r0
 8006a8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a92:	4313      	orrs	r3, r2
 8006a94:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	791b      	ldrb	r3, [r3, #4]
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d11f      	bne.n	8006ade <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	015a      	lsls	r2, r3, #5
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	0151      	lsls	r1, r2, #5
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	440a      	add	r2, r1
 8006ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006abc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	0151      	lsls	r1, r2, #5
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006adc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006ade:	79fb      	ldrb	r3, [r7, #7]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d14b      	bne.n	8006b7c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d009      	beq.n	8006b00 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	015a      	lsls	r2, r3, #5
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	4413      	add	r3, r2
 8006af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006af8:	461a      	mov	r2, r3
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	791b      	ldrb	r3, [r3, #4]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d128      	bne.n	8006b5a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d110      	bne.n	8006b3a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	0151      	lsls	r1, r2, #5
 8006b2a:	69fa      	ldr	r2, [r7, #28]
 8006b2c:	440a      	add	r2, r1
 8006b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b32:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006b36:	6013      	str	r3, [r2, #0]
 8006b38:	e00f      	b.n	8006b5a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	69ba      	ldr	r2, [r7, #24]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b58:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	0151      	lsls	r1, r2, #5
 8006b6c:	69fa      	ldr	r2, [r7, #28]
 8006b6e:	440a      	add	r2, r1
 8006b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b78:	6013      	str	r3, [r2, #0]
 8006b7a:	e133      	b.n	8006de4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	0151      	lsls	r1, r2, #5
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	440a      	add	r2, r1
 8006b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b9a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	791b      	ldrb	r3, [r3, #4]
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d015      	beq.n	8006bd0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 811b 	beq.w	8006de4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	f003 030f 	and.w	r3, r3, #15
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc4:	69f9      	ldr	r1, [r7, #28]
 8006bc6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	634b      	str	r3, [r1, #52]	; 0x34
 8006bce:	e109      	b.n	8006de4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d110      	bne.n	8006c02 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	015a      	lsls	r2, r3, #5
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	0151      	lsls	r1, r2, #5
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	440a      	add	r2, r1
 8006bf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bfa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006bfe:	6013      	str	r3, [r2, #0]
 8006c00:	e00f      	b.n	8006c22 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	0151      	lsls	r1, r2, #5
 8006c14:	69fa      	ldr	r2, [r7, #28]
 8006c16:	440a      	add	r2, r1
 8006c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c20:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6919      	ldr	r1, [r3, #16]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	781a      	ldrb	r2, [r3, #0]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	b298      	uxth	r0, r3
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	4603      	mov	r3, r0
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f000 fade 	bl	80071f8 <USB_WritePacket>
 8006c3c:	e0d2      	b.n	8006de4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	015a      	lsls	r2, r3, #5
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	0151      	lsls	r1, r2, #5
 8006c50:	69fa      	ldr	r2, [r7, #28]
 8006c52:	440a      	add	r2, r1
 8006c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c58:	0cdb      	lsrs	r3, r3, #19
 8006c5a:	04db      	lsls	r3, r3, #19
 8006c5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	015a      	lsls	r2, r3, #5
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	4413      	add	r3, r2
 8006c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	69ba      	ldr	r2, [r7, #24]
 8006c6e:	0151      	lsls	r1, r2, #5
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	440a      	add	r2, r1
 8006c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c80:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d126      	bne.n	8006cd8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	69fb      	ldr	r3, [r7, #28]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c96:	691a      	ldr	r2, [r3, #16]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ca0:	69b9      	ldr	r1, [r7, #24]
 8006ca2:	0148      	lsls	r0, r1, #5
 8006ca4:	69f9      	ldr	r1, [r7, #28]
 8006ca6:	4401      	add	r1, r0
 8006ca8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cac:	4313      	orrs	r3, r2
 8006cae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	69ba      	ldr	r2, [r7, #24]
 8006cc0:	0151      	lsls	r1, r2, #5
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cce:	6113      	str	r3, [r2, #16]
 8006cd0:	e03a      	b.n	8006d48 <USB_EPStartXfer+0x3e4>
 8006cd2:	bf00      	nop
 8006cd4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	699a      	ldr	r2, [r3, #24]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	1e5a      	subs	r2, r3, #1
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cec:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	8afa      	ldrh	r2, [r7, #22]
 8006cf4:	fb03 f202 	mul.w	r2, r3, r2
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	69fb      	ldr	r3, [r7, #28]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d08:	691a      	ldr	r2, [r3, #16]
 8006d0a:	8afb      	ldrh	r3, [r7, #22]
 8006d0c:	04d9      	lsls	r1, r3, #19
 8006d0e:	4b38      	ldr	r3, [pc, #224]	; (8006df0 <USB_EPStartXfer+0x48c>)
 8006d10:	400b      	ands	r3, r1
 8006d12:	69b9      	ldr	r1, [r7, #24]
 8006d14:	0148      	lsls	r0, r1, #5
 8006d16:	69f9      	ldr	r1, [r7, #28]
 8006d18:	4401      	add	r1, r0
 8006d1a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	015a      	lsls	r2, r3, #5
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	4413      	add	r3, r2
 8006d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d2e:	691a      	ldr	r2, [r3, #16]
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d38:	69b9      	ldr	r1, [r7, #24]
 8006d3a:	0148      	lsls	r0, r1, #5
 8006d3c:	69f9      	ldr	r1, [r7, #28]
 8006d3e:	4401      	add	r1, r0
 8006d40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d44:	4313      	orrs	r3, r2
 8006d46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006d48:	79fb      	ldrb	r3, [r7, #7]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d10d      	bne.n	8006d6a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	691b      	ldr	r3, [r3, #16]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d009      	beq.n	8006d6a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6919      	ldr	r1, [r3, #16]
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d66:	460a      	mov	r2, r1
 8006d68:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	791b      	ldrb	r3, [r3, #4]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d128      	bne.n	8006dc4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d110      	bne.n	8006da4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	0151      	lsls	r1, r2, #5
 8006d94:	69fa      	ldr	r2, [r7, #28]
 8006d96:	440a      	add	r2, r1
 8006d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006da0:	6013      	str	r3, [r2, #0]
 8006da2:	e00f      	b.n	8006dc4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	0151      	lsls	r1, r2, #5
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	440a      	add	r2, r1
 8006dba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dc2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	015a      	lsls	r2, r3, #5
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	4413      	add	r3, r2
 8006dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	69ba      	ldr	r2, [r7, #24]
 8006dd4:	0151      	lsls	r1, r2, #5
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	440a      	add	r2, r1
 8006dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006de2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006de4:	2300      	movs	r3, #0
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3720      	adds	r7, #32
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	1ff80000 	.word	0x1ff80000

08006df4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	785b      	ldrb	r3, [r3, #1]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	f040 80ce 	bne.w	8006fb2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d132      	bne.n	8006e84 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	0151      	lsls	r1, r2, #5
 8006e30:	697a      	ldr	r2, [r7, #20]
 8006e32:	440a      	add	r2, r1
 8006e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006e3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006e40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	0151      	lsls	r1, r2, #5
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	440a      	add	r2, r1
 8006e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e60:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	0151      	lsls	r1, r2, #5
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	440a      	add	r2, r1
 8006e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e7c:	0cdb      	lsrs	r3, r3, #19
 8006e7e:	04db      	lsls	r3, r3, #19
 8006e80:	6113      	str	r3, [r2, #16]
 8006e82:	e04e      	b.n	8006f22 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	015a      	lsls	r2, r3, #5
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	0151      	lsls	r1, r2, #5
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	440a      	add	r2, r1
 8006e9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e9e:	0cdb      	lsrs	r3, r3, #19
 8006ea0:	04db      	lsls	r3, r3, #19
 8006ea2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	0151      	lsls	r1, r2, #5
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	440a      	add	r2, r1
 8006eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ebe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ec2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ec6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	699a      	ldr	r2, [r3, #24]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	68db      	ldr	r3, [r3, #12]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d903      	bls.n	8006edc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006efa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f08:	691a      	ldr	r2, [r3, #16]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f12:	6939      	ldr	r1, [r7, #16]
 8006f14:	0148      	lsls	r0, r1, #5
 8006f16:	6979      	ldr	r1, [r7, #20]
 8006f18:	4401      	add	r1, r0
 8006f1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d11e      	bne.n	8006f66 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d009      	beq.n	8006f44 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	015a      	lsls	r2, r3, #5
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	015a      	lsls	r2, r3, #5
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	0151      	lsls	r1, r2, #5
 8006f56:	697a      	ldr	r2, [r7, #20]
 8006f58:	440a      	add	r2, r1
 8006f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f62:	6013      	str	r3, [r2, #0]
 8006f64:	e097      	b.n	8007096 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	693a      	ldr	r2, [r7, #16]
 8006f76:	0151      	lsls	r1, r2, #5
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	440a      	add	r2, r1
 8006f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006f84:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 8083 	beq.w	8007096 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	f003 030f 	and.w	r3, r3, #15
 8006fa0:	2101      	movs	r1, #1
 8006fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa6:	6979      	ldr	r1, [r7, #20]
 8006fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fac:	4313      	orrs	r3, r2
 8006fae:	634b      	str	r3, [r1, #52]	; 0x34
 8006fb0:	e071      	b.n	8007096 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	015a      	lsls	r2, r3, #5
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	4413      	add	r3, r2
 8006fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	0151      	lsls	r1, r2, #5
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	440a      	add	r2, r1
 8006fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fcc:	0cdb      	lsrs	r3, r3, #19
 8006fce:	04db      	lsls	r3, r3, #19
 8006fd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ff0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ff4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	68da      	ldr	r2, [r3, #12]
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	440a      	add	r2, r1
 8007024:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800702c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800703a:	691a      	ldr	r2, [r3, #16]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	69db      	ldr	r3, [r3, #28]
 8007040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007044:	6939      	ldr	r1, [r7, #16]
 8007046:	0148      	lsls	r0, r1, #5
 8007048:	6979      	ldr	r1, [r7, #20]
 800704a:	4401      	add	r1, r0
 800704c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007050:	4313      	orrs	r3, r2
 8007052:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007054:	79fb      	ldrb	r3, [r7, #7]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d10d      	bne.n	8007076 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d009      	beq.n	8007076 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	6919      	ldr	r1, [r3, #16]
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007072:	460a      	mov	r2, r1
 8007074:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	0151      	lsls	r1, r2, #5
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	440a      	add	r2, r1
 800708c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007090:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007094:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	371c      	adds	r7, #28
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80070b2:	2300      	movs	r3, #0
 80070b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	785b      	ldrb	r3, [r3, #1]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d14a      	bne.n	8007158 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070da:	f040 8086 	bne.w	80071ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	015a      	lsls	r2, r3, #5
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	4413      	add	r3, r2
 80070e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	7812      	ldrb	r2, [r2, #0]
 80070f2:	0151      	lsls	r1, r2, #5
 80070f4:	693a      	ldr	r2, [r7, #16]
 80070f6:	440a      	add	r2, r1
 80070f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007100:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	7812      	ldrb	r2, [r2, #0]
 8007116:	0151      	lsls	r1, r2, #5
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	440a      	add	r2, r1
 800711c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007120:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007124:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3301      	adds	r3, #1
 800712a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007132:	4293      	cmp	r3, r2
 8007134:	d902      	bls.n	800713c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	75fb      	strb	r3, [r7, #23]
          break;
 800713a:	e056      	b.n	80071ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	015a      	lsls	r2, r3, #5
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	4413      	add	r3, r2
 8007146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007150:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007154:	d0e7      	beq.n	8007126 <USB_EPStopXfer+0x82>
 8007156:	e048      	b.n	80071ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800716c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007170:	d13b      	bne.n	80071ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	7812      	ldrb	r2, [r2, #0]
 8007186:	0151      	lsls	r1, r2, #5
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	440a      	add	r2, r1
 800718c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007190:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007194:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	683a      	ldr	r2, [r7, #0]
 80071a8:	7812      	ldrb	r2, [r2, #0]
 80071aa:	0151      	lsls	r1, r2, #5
 80071ac:	693a      	ldr	r2, [r7, #16]
 80071ae:	440a      	add	r2, r1
 80071b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3301      	adds	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d902      	bls.n	80071d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	75fb      	strb	r3, [r7, #23]
          break;
 80071ce:	e00c      	b.n	80071ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	015a      	lsls	r2, r3, #5
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	4413      	add	r3, r2
 80071da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071e8:	d0e7      	beq.n	80071ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	371c      	adds	r7, #28
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b089      	sub	sp, #36	; 0x24
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	4611      	mov	r1, r2
 8007204:	461a      	mov	r2, r3
 8007206:	460b      	mov	r3, r1
 8007208:	71fb      	strb	r3, [r7, #7]
 800720a:	4613      	mov	r3, r2
 800720c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007216:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800721a:	2b00      	cmp	r3, #0
 800721c:	d123      	bne.n	8007266 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800721e:	88bb      	ldrh	r3, [r7, #4]
 8007220:	3303      	adds	r3, #3
 8007222:	089b      	lsrs	r3, r3, #2
 8007224:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007226:	2300      	movs	r3, #0
 8007228:	61bb      	str	r3, [r7, #24]
 800722a:	e018      	b.n	800725e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800722c:	79fb      	ldrb	r3, [r7, #7]
 800722e:	031a      	lsls	r2, r3, #12
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	4413      	add	r3, r2
 8007234:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007238:	461a      	mov	r2, r3
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	3301      	adds	r3, #1
 8007244:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	3301      	adds	r3, #1
 800724a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	3301      	adds	r3, #1
 8007250:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	3301      	adds	r3, #1
 8007256:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	3301      	adds	r3, #1
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	69ba      	ldr	r2, [r7, #24]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	429a      	cmp	r2, r3
 8007264:	d3e2      	bcc.n	800722c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3724      	adds	r7, #36	; 0x24
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007274:	b480      	push	{r7}
 8007276:	b08b      	sub	sp, #44	; 0x2c
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4613      	mov	r3, r2
 8007280:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800728a:	88fb      	ldrh	r3, [r7, #6]
 800728c:	089b      	lsrs	r3, r3, #2
 800728e:	b29b      	uxth	r3, r3
 8007290:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007292:	88fb      	ldrh	r3, [r7, #6]
 8007294:	f003 0303 	and.w	r3, r3, #3
 8007298:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800729a:	2300      	movs	r3, #0
 800729c:	623b      	str	r3, [r7, #32]
 800729e:	e014      	b.n	80072ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	3301      	adds	r3, #1
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80072b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b4:	3301      	adds	r3, #1
 80072b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	3301      	adds	r3, #1
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80072be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c0:	3301      	adds	r3, #1
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	3301      	adds	r3, #1
 80072c8:	623b      	str	r3, [r7, #32]
 80072ca:	6a3a      	ldr	r2, [r7, #32]
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d3e6      	bcc.n	80072a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80072d2:	8bfb      	ldrh	r3, [r7, #30]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01e      	beq.n	8007316 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072e2:	461a      	mov	r2, r3
 80072e4:	f107 0310 	add.w	r3, r7, #16
 80072e8:	6812      	ldr	r2, [r2, #0]
 80072ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	fa22 f303 	lsr.w	r3, r2, r3
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	701a      	strb	r2, [r3, #0]
      i++;
 80072fe:	6a3b      	ldr	r3, [r7, #32]
 8007300:	3301      	adds	r3, #1
 8007302:	623b      	str	r3, [r7, #32]
      pDest++;
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	3301      	adds	r3, #1
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800730a:	8bfb      	ldrh	r3, [r7, #30]
 800730c:	3b01      	subs	r3, #1
 800730e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007310:	8bfb      	ldrh	r3, [r7, #30]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1ea      	bne.n	80072ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007318:	4618      	mov	r0, r3
 800731a:	372c      	adds	r7, #44	; 0x2c
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	785b      	ldrb	r3, [r3, #1]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d12c      	bne.n	800739a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	015a      	lsls	r2, r3, #5
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	db12      	blt.n	8007378 <USB_EPSetStall+0x54>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00f      	beq.n	8007378 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68ba      	ldr	r2, [r7, #8]
 8007368:	0151      	lsls	r1, r2, #5
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	440a      	add	r2, r1
 800736e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007372:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007376:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	015a      	lsls	r2, r3, #5
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	0151      	lsls	r1, r2, #5
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	440a      	add	r2, r1
 800738e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007392:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007396:	6013      	str	r3, [r2, #0]
 8007398:	e02b      	b.n	80073f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	db12      	blt.n	80073d2 <USB_EPSetStall+0xae>
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00f      	beq.n	80073d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	0151      	lsls	r1, r2, #5
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	440a      	add	r2, r1
 80073c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	0151      	lsls	r1, r2, #5
 80073e4:	68fa      	ldr	r2, [r7, #12]
 80073e6:	440a      	add	r2, r1
 80073e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	785b      	ldrb	r3, [r3, #1]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d128      	bne.n	800746e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	0151      	lsls	r1, r2, #5
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	440a      	add	r2, r1
 8007432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007436:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800743a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	791b      	ldrb	r3, [r3, #4]
 8007440:	2b03      	cmp	r3, #3
 8007442:	d003      	beq.n	800744c <USB_EPClearStall+0x4c>
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	791b      	ldrb	r3, [r3, #4]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d138      	bne.n	80074be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4413      	add	r3, r2
 8007454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	0151      	lsls	r1, r2, #5
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	440a      	add	r2, r1
 8007462:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800746a:	6013      	str	r3, [r2, #0]
 800746c:	e027      	b.n	80074be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	4413      	add	r3, r2
 8007476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	0151      	lsls	r1, r2, #5
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	440a      	add	r2, r1
 8007484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007488:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800748c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	791b      	ldrb	r3, [r3, #4]
 8007492:	2b03      	cmp	r3, #3
 8007494:	d003      	beq.n	800749e <USB_EPClearStall+0x9e>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	791b      	ldrb	r3, [r3, #4]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d10f      	bne.n	80074be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	68ba      	ldr	r2, [r7, #8]
 80074ae:	0151      	lsls	r1, r2, #5
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	440a      	add	r2, r1
 80074b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80074ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	78fb      	ldrb	r3, [r7, #3]
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007500:	68f9      	ldr	r1, [r7, #12]
 8007502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007506:	4313      	orrs	r3, r2
 8007508:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3714      	adds	r7, #20
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007532:	f023 0303 	bic.w	r3, r3, #3
 8007536:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007546:	f023 0302 	bic.w	r3, r3, #2
 800754a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3714      	adds	r7, #20
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800755a:	b480      	push	{r7}
 800755c:	b085      	sub	sp, #20
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007574:	f023 0303 	bic.w	r3, r3, #3
 8007578:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007588:	f043 0302 	orr.w	r3, r3, #2
 800758c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4013      	ands	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80075b4:	68fb      	ldr	r3, [r7, #12]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3714      	adds	r7, #20
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b085      	sub	sp, #20
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075de:	69db      	ldr	r3, [r3, #28]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	4013      	ands	r3, r2
 80075e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	0c1b      	lsrs	r3, r3, #16
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b085      	sub	sp, #20
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007612:	69db      	ldr	r3, [r3, #28]
 8007614:	68ba      	ldr	r2, [r7, #8]
 8007616:	4013      	ands	r3, r2
 8007618:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	b29b      	uxth	r3, r3
}
 800761e:	4618      	mov	r0, r3
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800762a:	b480      	push	{r7}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	460b      	mov	r3, r1
 8007634:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	015a      	lsls	r2, r3, #5
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	4013      	ands	r3, r2
 8007656:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007658:	68bb      	ldr	r3, [r7, #8]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3714      	adds	r7, #20
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007666:	b480      	push	{r7}
 8007668:	b087      	sub	sp, #28
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	460b      	mov	r3, r1
 8007670:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007688:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	f003 030f 	and.w	r3, r3, #15
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	fa22 f303 	lsr.w	r3, r2, r3
 8007696:	01db      	lsls	r3, r3, #7
 8007698:	b2db      	uxtb	r3, r3
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	4313      	orrs	r3, r2
 800769e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	4013      	ands	r3, r2
 80076b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076b4:	68bb      	ldr	r3, [r7, #8]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	371c      	adds	r7, #28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b083      	sub	sp, #12
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	695b      	ldr	r3, [r3, #20]
 80076ce:	f003 0301 	and.w	r3, r3, #1
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80076de:	b480      	push	{r7}
 80076e0:	b085      	sub	sp, #20
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80076fc:	f023 0307 	bic.w	r3, r3, #7
 8007700:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007714:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3714      	adds	r7, #20
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007724:	b480      	push	{r7}
 8007726:	b087      	sub	sp, #28
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	460b      	mov	r3, r1
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	333c      	adds	r3, #60	; 0x3c
 800773a:	3304      	adds	r3, #4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	4a26      	ldr	r2, [pc, #152]	; (80077dc <USB_EP0_OutStart+0xb8>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d90a      	bls.n	800775e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007758:	d101      	bne.n	800775e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800775a:	2300      	movs	r3, #0
 800775c:	e037      	b.n	80077ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007764:	461a      	mov	r2, r3
 8007766:	2300      	movs	r3, #0
 8007768:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800777c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800778c:	f043 0318 	orr.w	r3, r3, #24
 8007790:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80077a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80077a6:	7afb      	ldrb	r3, [r7, #11]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d10f      	bne.n	80077cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077b2:	461a      	mov	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80077ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	371c      	adds	r7, #28
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	4f54300a 	.word	0x4f54300a

080077e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3301      	adds	r3, #1
 80077f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	4a13      	ldr	r2, [pc, #76]	; (8007844 <USB_CoreReset+0x64>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d901      	bls.n	80077fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e01b      	b.n	8007836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	daf2      	bge.n	80077ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f043 0201 	orr.w	r2, r3, #1
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3301      	adds	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	4a09      	ldr	r2, [pc, #36]	; (8007844 <USB_CoreReset+0x64>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d901      	bls.n	8007828 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e006      	b.n	8007836 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b01      	cmp	r3, #1
 8007832:	d0f0      	beq.n	8007816 <USB_CoreReset+0x36>

  return HAL_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3714      	adds	r7, #20
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	00030d40 	.word	0x00030d40

08007848 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	460b      	mov	r3, r1
 8007852:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007854:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007858:	f006 fe7c 	bl	800e554 <USBD_static_malloc>
 800785c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d109      	bne.n	8007878 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	32b0      	adds	r2, #176	; 0xb0
 800786e:	2100      	movs	r1, #0
 8007870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007874:	2302      	movs	r3, #2
 8007876:	e0d4      	b.n	8007a22 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007878:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800787c:	2100      	movs	r1, #0
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f007 feae 	bl	800f5e0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	32b0      	adds	r2, #176	; 0xb0
 800788e:	68f9      	ldr	r1, [r7, #12]
 8007890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	32b0      	adds	r2, #176	; 0xb0
 800789e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	7c1b      	ldrb	r3, [r3, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d138      	bne.n	8007922 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80078b0:	4b5e      	ldr	r3, [pc, #376]	; (8007a2c <USBD_CDC_Init+0x1e4>)
 80078b2:	7819      	ldrb	r1, [r3, #0]
 80078b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078b8:	2202      	movs	r2, #2
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f006 fd27 	bl	800e30e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80078c0:	4b5a      	ldr	r3, [pc, #360]	; (8007a2c <USBD_CDC_Init+0x1e4>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	f003 020f 	and.w	r2, r3, #15
 80078c8:	6879      	ldr	r1, [r7, #4]
 80078ca:	4613      	mov	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4413      	add	r3, r2
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	440b      	add	r3, r1
 80078d4:	3324      	adds	r3, #36	; 0x24
 80078d6:	2201      	movs	r2, #1
 80078d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80078da:	4b55      	ldr	r3, [pc, #340]	; (8007a30 <USBD_CDC_Init+0x1e8>)
 80078dc:	7819      	ldrb	r1, [r3, #0]
 80078de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078e2:	2202      	movs	r2, #2
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f006 fd12 	bl	800e30e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80078ea:	4b51      	ldr	r3, [pc, #324]	; (8007a30 <USBD_CDC_Init+0x1e8>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	f003 020f 	and.w	r2, r3, #15
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	4613      	mov	r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	4413      	add	r3, r2
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	440b      	add	r3, r1
 80078fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007902:	2201      	movs	r2, #1
 8007904:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007906:	4b4b      	ldr	r3, [pc, #300]	; (8007a34 <USBD_CDC_Init+0x1ec>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	f003 020f 	and.w	r2, r3, #15
 800790e:	6879      	ldr	r1, [r7, #4]
 8007910:	4613      	mov	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	440b      	add	r3, r1
 800791a:	3326      	adds	r3, #38	; 0x26
 800791c:	2210      	movs	r2, #16
 800791e:	801a      	strh	r2, [r3, #0]
 8007920:	e035      	b.n	800798e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007922:	4b42      	ldr	r3, [pc, #264]	; (8007a2c <USBD_CDC_Init+0x1e4>)
 8007924:	7819      	ldrb	r1, [r3, #0]
 8007926:	2340      	movs	r3, #64	; 0x40
 8007928:	2202      	movs	r2, #2
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f006 fcef 	bl	800e30e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007930:	4b3e      	ldr	r3, [pc, #248]	; (8007a2c <USBD_CDC_Init+0x1e4>)
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	f003 020f 	and.w	r2, r3, #15
 8007938:	6879      	ldr	r1, [r7, #4]
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	440b      	add	r3, r1
 8007944:	3324      	adds	r3, #36	; 0x24
 8007946:	2201      	movs	r2, #1
 8007948:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800794a:	4b39      	ldr	r3, [pc, #228]	; (8007a30 <USBD_CDC_Init+0x1e8>)
 800794c:	7819      	ldrb	r1, [r3, #0]
 800794e:	2340      	movs	r3, #64	; 0x40
 8007950:	2202      	movs	r2, #2
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f006 fcdb 	bl	800e30e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007958:	4b35      	ldr	r3, [pc, #212]	; (8007a30 <USBD_CDC_Init+0x1e8>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	f003 020f 	and.w	r2, r3, #15
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	4613      	mov	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	4413      	add	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	440b      	add	r3, r1
 800796c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007970:	2201      	movs	r2, #1
 8007972:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007974:	4b2f      	ldr	r3, [pc, #188]	; (8007a34 <USBD_CDC_Init+0x1ec>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	f003 020f 	and.w	r2, r3, #15
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	440b      	add	r3, r1
 8007988:	3326      	adds	r3, #38	; 0x26
 800798a:	2210      	movs	r2, #16
 800798c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800798e:	4b29      	ldr	r3, [pc, #164]	; (8007a34 <USBD_CDC_Init+0x1ec>)
 8007990:	7819      	ldrb	r1, [r3, #0]
 8007992:	2308      	movs	r3, #8
 8007994:	2203      	movs	r2, #3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f006 fcb9 	bl	800e30e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800799c:	4b25      	ldr	r3, [pc, #148]	; (8007a34 <USBD_CDC_Init+0x1ec>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	f003 020f 	and.w	r2, r3, #15
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	4613      	mov	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	440b      	add	r3, r1
 80079b0:	3324      	adds	r3, #36	; 0x24
 80079b2:	2201      	movs	r2, #1
 80079b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	33b0      	adds	r3, #176	; 0xb0
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	4413      	add	r3, r2
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80079ec:	2302      	movs	r3, #2
 80079ee:	e018      	b.n	8007a22 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	7c1b      	ldrb	r3, [r3, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d10a      	bne.n	8007a0e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079f8:	4b0d      	ldr	r3, [pc, #52]	; (8007a30 <USBD_CDC_Init+0x1e8>)
 80079fa:	7819      	ldrb	r1, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f006 fd70 	bl	800e4ec <USBD_LL_PrepareReceive>
 8007a0c:	e008      	b.n	8007a20 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a0e:	4b08      	ldr	r3, [pc, #32]	; (8007a30 <USBD_CDC_Init+0x1e8>)
 8007a10:	7819      	ldrb	r1, [r3, #0]
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007a18:	2340      	movs	r3, #64	; 0x40
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f006 fd66 	bl	800e4ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	2000009f 	.word	0x2000009f
 8007a30:	200000a0 	.word	0x200000a0
 8007a34:	200000a1 	.word	0x200000a1

08007a38 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007a44:	4b3a      	ldr	r3, [pc, #232]	; (8007b30 <USBD_CDC_DeInit+0xf8>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f006 fc85 	bl	800e35a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007a50:	4b37      	ldr	r3, [pc, #220]	; (8007b30 <USBD_CDC_DeInit+0xf8>)
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	f003 020f 	and.w	r2, r3, #15
 8007a58:	6879      	ldr	r1, [r7, #4]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	440b      	add	r3, r1
 8007a64:	3324      	adds	r3, #36	; 0x24
 8007a66:	2200      	movs	r2, #0
 8007a68:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007a6a:	4b32      	ldr	r3, [pc, #200]	; (8007b34 <USBD_CDC_DeInit+0xfc>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f006 fc72 	bl	800e35a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007a76:	4b2f      	ldr	r3, [pc, #188]	; (8007b34 <USBD_CDC_DeInit+0xfc>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	f003 020f 	and.w	r2, r3, #15
 8007a7e:	6879      	ldr	r1, [r7, #4]
 8007a80:	4613      	mov	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	440b      	add	r3, r1
 8007a8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a8e:	2200      	movs	r2, #0
 8007a90:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007a92:	4b29      	ldr	r3, [pc, #164]	; (8007b38 <USBD_CDC_DeInit+0x100>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f006 fc5e 	bl	800e35a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007a9e:	4b26      	ldr	r3, [pc, #152]	; (8007b38 <USBD_CDC_DeInit+0x100>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	f003 020f 	and.w	r2, r3, #15
 8007aa6:	6879      	ldr	r1, [r7, #4]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	440b      	add	r3, r1
 8007ab2:	3324      	adds	r3, #36	; 0x24
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007ab8:	4b1f      	ldr	r3, [pc, #124]	; (8007b38 <USBD_CDC_DeInit+0x100>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	f003 020f 	and.w	r2, r3, #15
 8007ac0:	6879      	ldr	r1, [r7, #4]
 8007ac2:	4613      	mov	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4413      	add	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	440b      	add	r3, r1
 8007acc:	3326      	adds	r3, #38	; 0x26
 8007ace:	2200      	movs	r2, #0
 8007ad0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	32b0      	adds	r2, #176	; 0xb0
 8007adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d01f      	beq.n	8007b24 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	33b0      	adds	r3, #176	; 0xb0
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4413      	add	r3, r2
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	32b0      	adds	r2, #176	; 0xb0
 8007b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f006 fd32 	bl	800e570 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	32b0      	adds	r2, #176	; 0xb0
 8007b16:	2100      	movs	r1, #0
 8007b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	2000009f 	.word	0x2000009f
 8007b34:	200000a0 	.word	0x200000a0
 8007b38:	200000a1 	.word	0x200000a1

08007b3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	32b0      	adds	r2, #176	; 0xb0
 8007b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b54:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007b56:	2300      	movs	r3, #0
 8007b58:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e0bf      	b.n	8007cec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d050      	beq.n	8007c1a <USBD_CDC_Setup+0xde>
 8007b78:	2b20      	cmp	r3, #32
 8007b7a:	f040 80af 	bne.w	8007cdc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	88db      	ldrh	r3, [r3, #6]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d03a      	beq.n	8007bfc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	b25b      	sxtb	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	da1b      	bge.n	8007bc8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	33b0      	adds	r3, #176	; 0xb0
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007ba6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ba8:	683a      	ldr	r2, [r7, #0]
 8007baa:	88d2      	ldrh	r2, [r2, #6]
 8007bac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	88db      	ldrh	r3, [r3, #6]
 8007bb2:	2b07      	cmp	r3, #7
 8007bb4:	bf28      	it	cs
 8007bb6:	2307      	movcs	r3, #7
 8007bb8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	89fa      	ldrh	r2, [r7, #14]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f001 fd89 	bl	80096d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007bc6:	e090      	b.n	8007cea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	785a      	ldrb	r2, [r3, #1]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	88db      	ldrh	r3, [r3, #6]
 8007bd6:	2b3f      	cmp	r3, #63	; 0x3f
 8007bd8:	d803      	bhi.n	8007be2 <USBD_CDC_Setup+0xa6>
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	88db      	ldrh	r3, [r3, #6]
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	e000      	b.n	8007be4 <USBD_CDC_Setup+0xa8>
 8007be2:	2240      	movs	r2, #64	; 0x40
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007bea:	6939      	ldr	r1, [r7, #16]
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f001 fd9b 	bl	8009730 <USBD_CtlPrepareRx>
      break;
 8007bfa:	e076      	b.n	8007cea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	33b0      	adds	r3, #176	; 0xb0
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	683a      	ldr	r2, [r7, #0]
 8007c10:	7850      	ldrb	r0, [r2, #1]
 8007c12:	2200      	movs	r2, #0
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	4798      	blx	r3
      break;
 8007c18:	e067      	b.n	8007cea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	785b      	ldrb	r3, [r3, #1]
 8007c1e:	2b0b      	cmp	r3, #11
 8007c20:	d851      	bhi.n	8007cc6 <USBD_CDC_Setup+0x18a>
 8007c22:	a201      	add	r2, pc, #4	; (adr r2, 8007c28 <USBD_CDC_Setup+0xec>)
 8007c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c28:	08007c59 	.word	0x08007c59
 8007c2c:	08007cd5 	.word	0x08007cd5
 8007c30:	08007cc7 	.word	0x08007cc7
 8007c34:	08007cc7 	.word	0x08007cc7
 8007c38:	08007cc7 	.word	0x08007cc7
 8007c3c:	08007cc7 	.word	0x08007cc7
 8007c40:	08007cc7 	.word	0x08007cc7
 8007c44:	08007cc7 	.word	0x08007cc7
 8007c48:	08007cc7 	.word	0x08007cc7
 8007c4c:	08007cc7 	.word	0x08007cc7
 8007c50:	08007c83 	.word	0x08007c83
 8007c54:	08007cad 	.word	0x08007cad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b03      	cmp	r3, #3
 8007c62:	d107      	bne.n	8007c74 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007c64:	f107 030a 	add.w	r3, r7, #10
 8007c68:	2202      	movs	r2, #2
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 fd33 	bl	80096d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c72:	e032      	b.n	8007cda <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f001 fcbd 	bl	80095f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	75fb      	strb	r3, [r7, #23]
          break;
 8007c80:	e02b      	b.n	8007cda <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b03      	cmp	r3, #3
 8007c8c:	d107      	bne.n	8007c9e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007c8e:	f107 030d 	add.w	r3, r7, #13
 8007c92:	2201      	movs	r2, #1
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f001 fd1e 	bl	80096d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c9c:	e01d      	b.n	8007cda <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f001 fca8 	bl	80095f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	75fb      	strb	r3, [r7, #23]
          break;
 8007caa:	e016      	b.n	8007cda <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	2b03      	cmp	r3, #3
 8007cb6:	d00f      	beq.n	8007cd8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007cb8:	6839      	ldr	r1, [r7, #0]
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f001 fc9b 	bl	80095f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007cc4:	e008      	b.n	8007cd8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f001 fc94 	bl	80095f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	75fb      	strb	r3, [r7, #23]
          break;
 8007cd2:	e002      	b.n	8007cda <USBD_CDC_Setup+0x19e>
          break;
 8007cd4:	bf00      	nop
 8007cd6:	e008      	b.n	8007cea <USBD_CDC_Setup+0x1ae>
          break;
 8007cd8:	bf00      	nop
      }
      break;
 8007cda:	e006      	b.n	8007cea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 fc89 	bl	80095f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce8:	bf00      	nop
  }

  return (uint8_t)ret;
 8007cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3718      	adds	r7, #24
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}

08007cf4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	32b0      	adds	r2, #176	; 0xb0
 8007d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e065      	b.n	8007dea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	32b0      	adds	r2, #176	; 0xb0
 8007d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d2c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d2e:	78fb      	ldrb	r3, [r7, #3]
 8007d30:	f003 020f 	and.w	r2, r3, #15
 8007d34:	6879      	ldr	r1, [r7, #4]
 8007d36:	4613      	mov	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	440b      	add	r3, r1
 8007d40:	3318      	adds	r3, #24
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d02f      	beq.n	8007da8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007d48:	78fb      	ldrb	r3, [r7, #3]
 8007d4a:	f003 020f 	and.w	r2, r3, #15
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	4613      	mov	r3, r2
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	4413      	add	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	440b      	add	r3, r1
 8007d5a:	3318      	adds	r3, #24
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	78fb      	ldrb	r3, [r7, #3]
 8007d60:	f003 010f 	and.w	r1, r3, #15
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	460b      	mov	r3, r1
 8007d68:	00db      	lsls	r3, r3, #3
 8007d6a:	440b      	add	r3, r1
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	4403      	add	r3, r0
 8007d70:	3348      	adds	r3, #72	; 0x48
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	fbb2 f1f3 	udiv	r1, r2, r3
 8007d78:	fb01 f303 	mul.w	r3, r1, r3
 8007d7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d112      	bne.n	8007da8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007d82:	78fb      	ldrb	r3, [r7, #3]
 8007d84:	f003 020f 	and.w	r2, r3, #15
 8007d88:	6879      	ldr	r1, [r7, #4]
 8007d8a:	4613      	mov	r3, r2
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	4413      	add	r3, r2
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	440b      	add	r3, r1
 8007d94:	3318      	adds	r3, #24
 8007d96:	2200      	movs	r2, #0
 8007d98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007d9a:	78f9      	ldrb	r1, [r7, #3]
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	2200      	movs	r2, #0
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f006 fb82 	bl	800e4aa <USBD_LL_Transmit>
 8007da6:	e01f      	b.n	8007de8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	33b0      	adds	r3, #176	; 0xb0
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4413      	add	r3, r2
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d010      	beq.n	8007de8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	33b0      	adds	r3, #176	; 0xb0
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	4413      	add	r3, r2
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	68ba      	ldr	r2, [r7, #8]
 8007dda:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007de4:	78fa      	ldrb	r2, [r7, #3]
 8007de6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	32b0      	adds	r2, #176	; 0xb0
 8007e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	32b0      	adds	r2, #176	; 0xb0
 8007e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007e20:	2303      	movs	r3, #3
 8007e22:	e01a      	b.n	8007e5a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007e24:	78fb      	ldrb	r3, [r7, #3]
 8007e26:	4619      	mov	r1, r3
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f006 fb80 	bl	800e52e <USBD_LL_GetRxDataSize>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	33b0      	adds	r3, #176	; 0xb0
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007e54:	4611      	mov	r1, r2
 8007e56:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	32b0      	adds	r2, #176	; 0xb0
 8007e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e025      	b.n	8007ed0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	33b0      	adds	r3, #176	; 0xb0
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d01a      	beq.n	8007ece <USBD_CDC_EP0_RxReady+0x6c>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007e9e:	2bff      	cmp	r3, #255	; 0xff
 8007ea0:	d015      	beq.n	8007ece <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	33b0      	adds	r3, #176	; 0xb0
 8007eac:	009b      	lsls	r3, r3, #2
 8007eae:	4413      	add	r3, r2
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007eba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007ec2:	b292      	uxth	r2, r2
 8007ec4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	22ff      	movs	r2, #255	; 0xff
 8007eca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ee0:	2182      	movs	r1, #130	; 0x82
 8007ee2:	4818      	ldr	r0, [pc, #96]	; (8007f44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ee4:	f000 fd4f 	bl	8008986 <USBD_GetEpDesc>
 8007ee8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007eea:	2101      	movs	r1, #1
 8007eec:	4815      	ldr	r0, [pc, #84]	; (8007f44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007eee:	f000 fd4a 	bl	8008986 <USBD_GetEpDesc>
 8007ef2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ef4:	2181      	movs	r1, #129	; 0x81
 8007ef6:	4813      	ldr	r0, [pc, #76]	; (8007f44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ef8:	f000 fd45 	bl	8008986 <USBD_GetEpDesc>
 8007efc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d002      	beq.n	8007f0a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	2210      	movs	r2, #16
 8007f08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d006      	beq.n	8007f1e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f18:	711a      	strb	r2, [r3, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d006      	beq.n	8007f32 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f2c:	711a      	strb	r2, [r3, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2243      	movs	r2, #67	; 0x43
 8007f36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f38:	4b02      	ldr	r3, [pc, #8]	; (8007f44 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3718      	adds	r7, #24
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	2000005c 	.word	0x2000005c

08007f48 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b086      	sub	sp, #24
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007f50:	2182      	movs	r1, #130	; 0x82
 8007f52:	4818      	ldr	r0, [pc, #96]	; (8007fb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f54:	f000 fd17 	bl	8008986 <USBD_GetEpDesc>
 8007f58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f5a:	2101      	movs	r1, #1
 8007f5c:	4815      	ldr	r0, [pc, #84]	; (8007fb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f5e:	f000 fd12 	bl	8008986 <USBD_GetEpDesc>
 8007f62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f64:	2181      	movs	r1, #129	; 0x81
 8007f66:	4813      	ldr	r0, [pc, #76]	; (8007fb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007f68:	f000 fd0d 	bl	8008986 <USBD_GetEpDesc>
 8007f6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2210      	movs	r2, #16
 8007f78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d006      	beq.n	8007f8e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	2200      	movs	r2, #0
 8007f84:	711a      	strb	r2, [r3, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	f042 0202 	orr.w	r2, r2, #2
 8007f8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d006      	beq.n	8007fa2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	711a      	strb	r2, [r3, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f042 0202 	orr.w	r2, r2, #2
 8007fa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2243      	movs	r2, #67	; 0x43
 8007fa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007fa8:	4b02      	ldr	r3, [pc, #8]	; (8007fb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	2000005c 	.word	0x2000005c

08007fb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007fc0:	2182      	movs	r1, #130	; 0x82
 8007fc2:	4818      	ldr	r0, [pc, #96]	; (8008024 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007fc4:	f000 fcdf 	bl	8008986 <USBD_GetEpDesc>
 8007fc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007fca:	2101      	movs	r1, #1
 8007fcc:	4815      	ldr	r0, [pc, #84]	; (8008024 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007fce:	f000 fcda 	bl	8008986 <USBD_GetEpDesc>
 8007fd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007fd4:	2181      	movs	r1, #129	; 0x81
 8007fd6:	4813      	ldr	r0, [pc, #76]	; (8008024 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007fd8:	f000 fcd5 	bl	8008986 <USBD_GetEpDesc>
 8007fdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	2210      	movs	r2, #16
 8007fe8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d006      	beq.n	8007ffe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ff8:	711a      	strb	r2, [r3, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d006      	beq.n	8008012 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800800c:	711a      	strb	r2, [r3, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2243      	movs	r2, #67	; 0x43
 8008016:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008018:	4b02      	ldr	r3, [pc, #8]	; (8008024 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	2000005c 	.word	0x2000005c

08008028 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	220a      	movs	r2, #10
 8008034:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008036:	4b03      	ldr	r3, [pc, #12]	; (8008044 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008038:	4618      	mov	r0, r3
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr
 8008044:	20000018 	.word	0x20000018

08008048 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008058:	2303      	movs	r3, #3
 800805a:	e009      	b.n	8008070 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	33b0      	adds	r3, #176	; 0xb0
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	32b0      	adds	r2, #176	; 0xb0
 8008092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008096:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800809e:	2303      	movs	r3, #3
 80080a0:	e008      	b.n	80080b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	371c      	adds	r7, #28
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	32b0      	adds	r2, #176	; 0xb0
 80080d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e004      	b.n	80080ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
	...

080080fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	32b0      	adds	r2, #176	; 0xb0
 800810e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008112:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008114:	2301      	movs	r3, #1
 8008116:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	32b0      	adds	r2, #176	; 0xb0
 8008122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d101      	bne.n	800812e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800812a:	2303      	movs	r3, #3
 800812c:	e025      	b.n	800817a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008134:	2b00      	cmp	r3, #0
 8008136:	d11f      	bne.n	8008178 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2201      	movs	r2, #1
 800813c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008140:	4b10      	ldr	r3, [pc, #64]	; (8008184 <USBD_CDC_TransmitPacket+0x88>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	f003 020f 	and.w	r2, r3, #15
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	4613      	mov	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	4413      	add	r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4403      	add	r3, r0
 800815a:	3318      	adds	r3, #24
 800815c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800815e:	4b09      	ldr	r3, [pc, #36]	; (8008184 <USBD_CDC_TransmitPacket+0x88>)
 8008160:	7819      	ldrb	r1, [r3, #0]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f006 f99b 	bl	800e4aa <USBD_LL_Transmit>

    ret = USBD_OK;
 8008174:	2300      	movs	r3, #0
 8008176:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	2000009f 	.word	0x2000009f

08008188 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	32b0      	adds	r2, #176	; 0xb0
 800819a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	32b0      	adds	r2, #176	; 0xb0
 80081aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d101      	bne.n	80081b6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e018      	b.n	80081e8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	7c1b      	ldrb	r3, [r3, #16]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10a      	bne.n	80081d4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081be:	4b0c      	ldr	r3, [pc, #48]	; (80081f0 <USBD_CDC_ReceivePacket+0x68>)
 80081c0:	7819      	ldrb	r1, [r3, #0]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f006 f98d 	bl	800e4ec <USBD_LL_PrepareReceive>
 80081d2:	e008      	b.n	80081e6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081d4:	4b06      	ldr	r3, [pc, #24]	; (80081f0 <USBD_CDC_ReceivePacket+0x68>)
 80081d6:	7819      	ldrb	r1, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081de:	2340      	movs	r3, #64	; 0x40
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f006 f983 	bl	800e4ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	200000a0 	.word	0x200000a0

080081f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b086      	sub	sp, #24
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	60f8      	str	r0, [r7, #12]
 80081fc:	60b9      	str	r1, [r7, #8]
 80081fe:	4613      	mov	r3, r2
 8008200:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008208:	2303      	movs	r3, #3
 800820a:	e01f      	b.n	800824c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	79fa      	ldrb	r2, [r7, #7]
 800823e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f005 fffd 	bl	800e240 <USBD_LL_Init>
 8008246:	4603      	mov	r3, r0
 8008248:	75fb      	strb	r3, [r7, #23]

  return ret;
 800824a:	7dfb      	ldrb	r3, [r7, #23]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3718      	adds	r7, #24
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800825e:	2300      	movs	r3, #0
 8008260:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d101      	bne.n	800826c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008268:	2303      	movs	r3, #3
 800826a:	e025      	b.n	80082b8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	32ae      	adds	r2, #174	; 0xae
 800827e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d00f      	beq.n	80082a8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	32ae      	adds	r2, #174	; 0xae
 8008292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008298:	f107 020e 	add.w	r2, r7, #14
 800829c:	4610      	mov	r0, r2
 800829e:	4798      	blx	r3
 80082a0:	4602      	mov	r2, r0
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f006 f805 	bl	800e2d8 <USBD_LL_Start>
 80082ce:	4603      	mov	r3, r0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80082e0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	460b      	mov	r3, r1
 80082f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008304:	2b00      	cmp	r3, #0
 8008306:	d009      	beq.n	800831c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	78fa      	ldrb	r2, [r7, #3]
 8008312:	4611      	mov	r1, r2
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	4798      	blx	r3
 8008318:	4603      	mov	r3, r0
 800831a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800831c:	7bfb      	ldrb	r3, [r7, #15]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	78fa      	ldrb	r2, [r7, #3]
 8008340:	4611      	mov	r1, r2
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	4798      	blx	r3
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800834c:	2303      	movs	r3, #3
 800834e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
 8008362:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800836a:	6839      	ldr	r1, [r7, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	f001 f908 	bl	8009582 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2201      	movs	r2, #1
 8008376:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008380:	461a      	mov	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800838e:	f003 031f 	and.w	r3, r3, #31
 8008392:	2b02      	cmp	r3, #2
 8008394:	d01a      	beq.n	80083cc <USBD_LL_SetupStage+0x72>
 8008396:	2b02      	cmp	r3, #2
 8008398:	d822      	bhi.n	80083e0 <USBD_LL_SetupStage+0x86>
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <USBD_LL_SetupStage+0x4a>
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d00a      	beq.n	80083b8 <USBD_LL_SetupStage+0x5e>
 80083a2:	e01d      	b.n	80083e0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fb5f 	bl	8008a70 <USBD_StdDevReq>
 80083b2:	4603      	mov	r3, r0
 80083b4:	73fb      	strb	r3, [r7, #15]
      break;
 80083b6:	e020      	b.n	80083fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 fbc7 	bl	8008b54 <USBD_StdItfReq>
 80083c6:	4603      	mov	r3, r0
 80083c8:	73fb      	strb	r3, [r7, #15]
      break;
 80083ca:	e016      	b.n	80083fa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 fc29 	bl	8008c2c <USBD_StdEPReq>
 80083da:	4603      	mov	r3, r0
 80083dc:	73fb      	strb	r3, [r7, #15]
      break;
 80083de:	e00c      	b.n	80083fa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80083e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	4619      	mov	r1, r3
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f005 ffd2 	bl	800e398 <USBD_LL_StallEP>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73fb      	strb	r3, [r7, #15]
      break;
 80083f8:	bf00      	nop
  }

  return ret;
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af00      	add	r7, sp, #0
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	460b      	mov	r3, r1
 800840e:	607a      	str	r2, [r7, #4]
 8008410:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008416:	7afb      	ldrb	r3, [r7, #11]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d16e      	bne.n	80084fa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008422:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800842a:	2b03      	cmp	r3, #3
 800842c:	f040 8098 	bne.w	8008560 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008430:	693b      	ldr	r3, [r7, #16]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	429a      	cmp	r2, r3
 800843a:	d913      	bls.n	8008464 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	68db      	ldr	r3, [r3, #12]
 8008444:	1ad2      	subs	r2, r2, r3
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	68da      	ldr	r2, [r3, #12]
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	4293      	cmp	r3, r2
 8008454:	bf28      	it	cs
 8008456:	4613      	movcs	r3, r2
 8008458:	461a      	mov	r2, r3
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f001 f984 	bl	800976a <USBD_CtlContinueRx>
 8008462:	e07d      	b.n	8008560 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800846a:	f003 031f 	and.w	r3, r3, #31
 800846e:	2b02      	cmp	r3, #2
 8008470:	d014      	beq.n	800849c <USBD_LL_DataOutStage+0x98>
 8008472:	2b02      	cmp	r3, #2
 8008474:	d81d      	bhi.n	80084b2 <USBD_LL_DataOutStage+0xae>
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <USBD_LL_DataOutStage+0x7c>
 800847a:	2b01      	cmp	r3, #1
 800847c:	d003      	beq.n	8008486 <USBD_LL_DataOutStage+0x82>
 800847e:	e018      	b.n	80084b2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	75bb      	strb	r3, [r7, #22]
            break;
 8008484:	e018      	b.n	80084b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800848c:	b2db      	uxtb	r3, r3
 800848e:	4619      	mov	r1, r3
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f000 fa5e 	bl	8008952 <USBD_CoreFindIF>
 8008496:	4603      	mov	r3, r0
 8008498:	75bb      	strb	r3, [r7, #22]
            break;
 800849a:	e00d      	b.n	80084b8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	4619      	mov	r1, r3
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 fa60 	bl	800896c <USBD_CoreFindEP>
 80084ac:	4603      	mov	r3, r0
 80084ae:	75bb      	strb	r3, [r7, #22]
            break;
 80084b0:	e002      	b.n	80084b8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	75bb      	strb	r3, [r7, #22]
            break;
 80084b6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80084b8:	7dbb      	ldrb	r3, [r7, #22]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d119      	bne.n	80084f2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d113      	bne.n	80084f2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80084ca:	7dba      	ldrb	r2, [r7, #22]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	32ae      	adds	r2, #174	; 0xae
 80084d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00b      	beq.n	80084f2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80084da:	7dba      	ldrb	r2, [r7, #22]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80084e2:	7dba      	ldrb	r2, [r7, #22]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	32ae      	adds	r2, #174	; 0xae
 80084e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f001 f94a 	bl	800978c <USBD_CtlSendStatus>
 80084f8:	e032      	b.n	8008560 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80084fa:	7afb      	ldrb	r3, [r7, #11]
 80084fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008500:	b2db      	uxtb	r3, r3
 8008502:	4619      	mov	r1, r3
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 fa31 	bl	800896c <USBD_CoreFindEP>
 800850a:	4603      	mov	r3, r0
 800850c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800850e:	7dbb      	ldrb	r3, [r7, #22]
 8008510:	2bff      	cmp	r3, #255	; 0xff
 8008512:	d025      	beq.n	8008560 <USBD_LL_DataOutStage+0x15c>
 8008514:	7dbb      	ldrb	r3, [r7, #22]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d122      	bne.n	8008560 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b03      	cmp	r3, #3
 8008524:	d117      	bne.n	8008556 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008526:	7dba      	ldrb	r2, [r7, #22]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	32ae      	adds	r2, #174	; 0xae
 800852c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00f      	beq.n	8008556 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008536:	7dba      	ldrb	r2, [r7, #22]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800853e:	7dba      	ldrb	r2, [r7, #22]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	32ae      	adds	r2, #174	; 0xae
 8008544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	7afa      	ldrb	r2, [r7, #11]
 800854c:	4611      	mov	r1, r2
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	4798      	blx	r3
 8008552:	4603      	mov	r3, r0
 8008554:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800855c:	7dfb      	ldrb	r3, [r7, #23]
 800855e:	e000      	b.n	8008562 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b086      	sub	sp, #24
 800856e:	af00      	add	r7, sp, #0
 8008570:	60f8      	str	r0, [r7, #12]
 8008572:	460b      	mov	r3, r1
 8008574:	607a      	str	r2, [r7, #4]
 8008576:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008578:	7afb      	ldrb	r3, [r7, #11]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d16f      	bne.n	800865e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3314      	adds	r3, #20
 8008582:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800858a:	2b02      	cmp	r3, #2
 800858c:	d15a      	bne.n	8008644 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	689a      	ldr	r2, [r3, #8]
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	429a      	cmp	r2, r3
 8008598:	d914      	bls.n	80085c4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	689a      	ldr	r2, [r3, #8]
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	1ad2      	subs	r2, r2, r3
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	461a      	mov	r2, r3
 80085ae:	6879      	ldr	r1, [r7, #4]
 80085b0:	68f8      	ldr	r0, [r7, #12]
 80085b2:	f001 f8ac 	bl	800970e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085b6:	2300      	movs	r3, #0
 80085b8:	2200      	movs	r2, #0
 80085ba:	2100      	movs	r1, #0
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f005 ff95 	bl	800e4ec <USBD_LL_PrepareReceive>
 80085c2:	e03f      	b.n	8008644 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	68da      	ldr	r2, [r3, #12]
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d11c      	bne.n	800860a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80085d8:	429a      	cmp	r2, r3
 80085da:	d316      	bcc.n	800860a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d20f      	bcs.n	800860a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085ea:	2200      	movs	r2, #0
 80085ec:	2100      	movs	r1, #0
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f001 f88d 	bl	800970e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085fc:	2300      	movs	r3, #0
 80085fe:	2200      	movs	r2, #0
 8008600:	2100      	movs	r1, #0
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f005 ff72 	bl	800e4ec <USBD_LL_PrepareReceive>
 8008608:	e01c      	b.n	8008644 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b03      	cmp	r3, #3
 8008614:	d10f      	bne.n	8008636 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d009      	beq.n	8008636 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008636:	2180      	movs	r1, #128	; 0x80
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f005 fead 	bl	800e398 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f001 f8b7 	bl	80097b2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d03a      	beq.n	80086c4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f7ff fe42 	bl	80082d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800865c:	e032      	b.n	80086c4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800865e:	7afb      	ldrb	r3, [r7, #11]
 8008660:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008664:	b2db      	uxtb	r3, r3
 8008666:	4619      	mov	r1, r3
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 f97f 	bl	800896c <USBD_CoreFindEP>
 800866e:	4603      	mov	r3, r0
 8008670:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008672:	7dfb      	ldrb	r3, [r7, #23]
 8008674:	2bff      	cmp	r3, #255	; 0xff
 8008676:	d025      	beq.n	80086c4 <USBD_LL_DataInStage+0x15a>
 8008678:	7dfb      	ldrb	r3, [r7, #23]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d122      	bne.n	80086c4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b03      	cmp	r3, #3
 8008688:	d11c      	bne.n	80086c4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800868a:	7dfa      	ldrb	r2, [r7, #23]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	32ae      	adds	r2, #174	; 0xae
 8008690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d014      	beq.n	80086c4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800869a:	7dfa      	ldrb	r2, [r7, #23]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80086a2:	7dfa      	ldrb	r2, [r7, #23]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	32ae      	adds	r2, #174	; 0xae
 80086a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	7afa      	ldrb	r2, [r7, #11]
 80086b0:	4611      	mov	r1, r2
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	4798      	blx	r3
 80086b6:	4603      	mov	r3, r0
 80086b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80086ba:	7dbb      	ldrb	r3, [r7, #22]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80086c0:	7dbb      	ldrb	r3, [r7, #22]
 80086c2:	e000      	b.n	80086c6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80086ce:	b580      	push	{r7, lr}
 80086d0:	b084      	sub	sp, #16
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008706:	2b00      	cmp	r3, #0
 8008708:	d014      	beq.n	8008734 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d00e      	beq.n	8008734 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	6852      	ldr	r2, [r2, #4]
 8008722:	b2d2      	uxtb	r2, r2
 8008724:	4611      	mov	r1, r2
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	4798      	blx	r3
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d001      	beq.n	8008734 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008730:	2303      	movs	r3, #3
 8008732:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008734:	2340      	movs	r3, #64	; 0x40
 8008736:	2200      	movs	r2, #0
 8008738:	2100      	movs	r1, #0
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f005 fde7 	bl	800e30e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2240      	movs	r2, #64	; 0x40
 800874c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008750:	2340      	movs	r3, #64	; 0x40
 8008752:	2200      	movs	r2, #0
 8008754:	2180      	movs	r1, #128	; 0x80
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f005 fdd9 	bl	800e30e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2240      	movs	r2, #64	; 0x40
 8008766:	621a      	str	r2, [r3, #32]

  return ret;
 8008768:	7bfb      	ldrb	r3, [r7, #15]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	460b      	mov	r3, r1
 800877c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	78fa      	ldrb	r2, [r7, #3]
 8008782:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008792:	b480      	push	{r7}
 8008794:	b083      	sub	sp, #12
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2204      	movs	r2, #4
 80087ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d106      	bne.n	80087e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b03      	cmp	r3, #3
 8008800:	d110      	bne.n	8008824 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00b      	beq.n	8008824 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008812:	69db      	ldr	r3, [r3, #28]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d005      	beq.n	8008824 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800881e:	69db      	ldr	r3, [r3, #28]
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b082      	sub	sp, #8
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	460b      	mov	r3, r1
 8008838:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	32ae      	adds	r2, #174	; 0xae
 8008844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800884c:	2303      	movs	r3, #3
 800884e:	e01c      	b.n	800888a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b03      	cmp	r3, #3
 800885a:	d115      	bne.n	8008888 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	32ae      	adds	r2, #174	; 0xae
 8008866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800886a:	6a1b      	ldr	r3, [r3, #32]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d00b      	beq.n	8008888 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	32ae      	adds	r2, #174	; 0xae
 800887a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800887e:	6a1b      	ldr	r3, [r3, #32]
 8008880:	78fa      	ldrb	r2, [r7, #3]
 8008882:	4611      	mov	r1, r2
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008888:	2300      	movs	r3, #0
}
 800888a:	4618      	mov	r0, r3
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	460b      	mov	r3, r1
 800889c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	32ae      	adds	r2, #174	; 0xae
 80088a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d101      	bne.n	80088b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e01c      	b.n	80088ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d115      	bne.n	80088ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	32ae      	adds	r2, #174	; 0xae
 80088ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00b      	beq.n	80088ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	32ae      	adds	r2, #174	; 0xae
 80088de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	4611      	mov	r1, r2
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80088f6:	b480      	push	{r7}
 80088f8:	b083      	sub	sp, #12
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00e      	beq.n	8008948 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	6852      	ldr	r2, [r2, #4]
 8008936:	b2d2      	uxtb	r2, r2
 8008938:	4611      	mov	r1, r2
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4798      	blx	r3
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008944:	2303      	movs	r3, #3
 8008946:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008948:	7bfb      	ldrb	r3, [r7, #15]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}

08008952 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008952:	b480      	push	{r7}
 8008954:	b083      	sub	sp, #12
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	460b      	mov	r3, r1
 800895c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800895e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008960:	4618      	mov	r0, r3
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	460b      	mov	r3, r1
 8008976:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008978:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800897a:	4618      	mov	r0, r3
 800897c:	370c      	adds	r7, #12
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr

08008986 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b086      	sub	sp, #24
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
 800898e:	460b      	mov	r3, r1
 8008990:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800899a:	2300      	movs	r3, #0
 800899c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	885b      	ldrh	r3, [r3, #2]
 80089a2:	b29a      	uxth	r2, r3
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d920      	bls.n	80089f0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80089b6:	e013      	b.n	80089e0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80089b8:	f107 030a 	add.w	r3, r7, #10
 80089bc:	4619      	mov	r1, r3
 80089be:	6978      	ldr	r0, [r7, #20]
 80089c0:	f000 f81b 	bl	80089fa <USBD_GetNextDesc>
 80089c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	785b      	ldrb	r3, [r3, #1]
 80089ca:	2b05      	cmp	r3, #5
 80089cc:	d108      	bne.n	80089e0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	789b      	ldrb	r3, [r3, #2]
 80089d6:	78fa      	ldrb	r2, [r7, #3]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d008      	beq.n	80089ee <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	885b      	ldrh	r3, [r3, #2]
 80089e4:	b29a      	uxth	r2, r3
 80089e6:	897b      	ldrh	r3, [r7, #10]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d8e5      	bhi.n	80089b8 <USBD_GetEpDesc+0x32>
 80089ec:	e000      	b.n	80089f0 <USBD_GetEpDesc+0x6a>
          break;
 80089ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80089f0:	693b      	ldr	r3, [r7, #16]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3718      	adds	r7, #24
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}

080089fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80089fa:	b480      	push	{r7}
 80089fc:	b085      	sub	sp, #20
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
 8008a02:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	881a      	ldrh	r2, [r3, #0]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	781b      	ldrb	r3, [r3, #0]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	4413      	add	r3, r2
 8008a14:	b29a      	uxth	r2, r3
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	781b      	ldrb	r3, [r3, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	4413      	add	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008a26:	68fb      	ldr	r3, [r7, #12]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3714      	adds	r7, #20
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	3301      	adds	r3, #1
 8008a4a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a52:	8a3b      	ldrh	r3, [r7, #16]
 8008a54:	021b      	lsls	r3, r3, #8
 8008a56:	b21a      	sxth	r2, r3
 8008a58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	b21b      	sxth	r3, r3
 8008a60:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a62:	89fb      	ldrh	r3, [r7, #14]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	371c      	adds	r7, #28
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a86:	2b40      	cmp	r3, #64	; 0x40
 8008a88:	d005      	beq.n	8008a96 <USBD_StdDevReq+0x26>
 8008a8a:	2b40      	cmp	r3, #64	; 0x40
 8008a8c:	d857      	bhi.n	8008b3e <USBD_StdDevReq+0xce>
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00f      	beq.n	8008ab2 <USBD_StdDevReq+0x42>
 8008a92:	2b20      	cmp	r3, #32
 8008a94:	d153      	bne.n	8008b3e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	32ae      	adds	r2, #174	; 0xae
 8008aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	4798      	blx	r3
 8008aac:	4603      	mov	r3, r0
 8008aae:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab0:	e04a      	b.n	8008b48 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	785b      	ldrb	r3, [r3, #1]
 8008ab6:	2b09      	cmp	r3, #9
 8008ab8:	d83b      	bhi.n	8008b32 <USBD_StdDevReq+0xc2>
 8008aba:	a201      	add	r2, pc, #4	; (adr r2, 8008ac0 <USBD_StdDevReq+0x50>)
 8008abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac0:	08008b15 	.word	0x08008b15
 8008ac4:	08008b29 	.word	0x08008b29
 8008ac8:	08008b33 	.word	0x08008b33
 8008acc:	08008b1f 	.word	0x08008b1f
 8008ad0:	08008b33 	.word	0x08008b33
 8008ad4:	08008af3 	.word	0x08008af3
 8008ad8:	08008ae9 	.word	0x08008ae9
 8008adc:	08008b33 	.word	0x08008b33
 8008ae0:	08008b0b 	.word	0x08008b0b
 8008ae4:	08008afd 	.word	0x08008afd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ae8:	6839      	ldr	r1, [r7, #0]
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 fa3c 	bl	8008f68 <USBD_GetDescriptor>
          break;
 8008af0:	e024      	b.n	8008b3c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008af2:	6839      	ldr	r1, [r7, #0]
 8008af4:	6878      	ldr	r0, [r7, #4]
 8008af6:	f000 fba1 	bl	800923c <USBD_SetAddress>
          break;
 8008afa:	e01f      	b.n	8008b3c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008afc:	6839      	ldr	r1, [r7, #0]
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fbe0 	bl	80092c4 <USBD_SetConfig>
 8008b04:	4603      	mov	r3, r0
 8008b06:	73fb      	strb	r3, [r7, #15]
          break;
 8008b08:	e018      	b.n	8008b3c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fc83 	bl	8009418 <USBD_GetConfig>
          break;
 8008b12:	e013      	b.n	8008b3c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fcb4 	bl	8009484 <USBD_GetStatus>
          break;
 8008b1c:	e00e      	b.n	8008b3c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b1e:	6839      	ldr	r1, [r7, #0]
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fce3 	bl	80094ec <USBD_SetFeature>
          break;
 8008b26:	e009      	b.n	8008b3c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fd07 	bl	800953e <USBD_ClrFeature>
          break;
 8008b30:	e004      	b.n	8008b3c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fd5e 	bl	80095f6 <USBD_CtlError>
          break;
 8008b3a:	bf00      	nop
      }
      break;
 8008b3c:	e004      	b.n	8008b48 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008b3e:	6839      	ldr	r1, [r7, #0]
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f000 fd58 	bl	80095f6 <USBD_CtlError>
      break;
 8008b46:	bf00      	nop
  }

  return ret;
 8008b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	bf00      	nop

08008b54 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b6a:	2b40      	cmp	r3, #64	; 0x40
 8008b6c:	d005      	beq.n	8008b7a <USBD_StdItfReq+0x26>
 8008b6e:	2b40      	cmp	r3, #64	; 0x40
 8008b70:	d852      	bhi.n	8008c18 <USBD_StdItfReq+0xc4>
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <USBD_StdItfReq+0x26>
 8008b76:	2b20      	cmp	r3, #32
 8008b78:	d14e      	bne.n	8008c18 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	3b01      	subs	r3, #1
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d840      	bhi.n	8008c0a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	889b      	ldrh	r3, [r3, #4]
 8008b8c:	b2db      	uxtb	r3, r3
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d836      	bhi.n	8008c00 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	889b      	ldrh	r3, [r3, #4]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff fed9 	bl	8008952 <USBD_CoreFindIF>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
 8008ba6:	2bff      	cmp	r3, #255	; 0xff
 8008ba8:	d01d      	beq.n	8008be6 <USBD_StdItfReq+0x92>
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d11a      	bne.n	8008be6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008bb0:	7bba      	ldrb	r2, [r7, #14]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	32ae      	adds	r2, #174	; 0xae
 8008bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00f      	beq.n	8008be0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008bc0:	7bba      	ldrb	r2, [r7, #14]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008bc8:	7bba      	ldrb	r2, [r7, #14]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	32ae      	adds	r2, #174	; 0xae
 8008bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	4798      	blx	r3
 8008bda:	4603      	mov	r3, r0
 8008bdc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008bde:	e004      	b.n	8008bea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008be0:	2303      	movs	r3, #3
 8008be2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008be4:	e001      	b.n	8008bea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008be6:	2303      	movs	r3, #3
 8008be8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	88db      	ldrh	r3, [r3, #6]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d110      	bne.n	8008c14 <USBD_StdItfReq+0xc0>
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10d      	bne.n	8008c14 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fdc7 	bl	800978c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008bfe:	e009      	b.n	8008c14 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fcf7 	bl	80095f6 <USBD_CtlError>
          break;
 8008c08:	e004      	b.n	8008c14 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008c0a:	6839      	ldr	r1, [r7, #0]
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fcf2 	bl	80095f6 <USBD_CtlError>
          break;
 8008c12:	e000      	b.n	8008c16 <USBD_StdItfReq+0xc2>
          break;
 8008c14:	bf00      	nop
      }
      break;
 8008c16:	e004      	b.n	8008c22 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008c18:	6839      	ldr	r1, [r7, #0]
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fceb 	bl	80095f6 <USBD_CtlError>
      break;
 8008c20:	bf00      	nop
  }

  return ret;
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	889b      	ldrh	r3, [r3, #4]
 8008c3e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c48:	2b40      	cmp	r3, #64	; 0x40
 8008c4a:	d007      	beq.n	8008c5c <USBD_StdEPReq+0x30>
 8008c4c:	2b40      	cmp	r3, #64	; 0x40
 8008c4e:	f200 817f 	bhi.w	8008f50 <USBD_StdEPReq+0x324>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d02a      	beq.n	8008cac <USBD_StdEPReq+0x80>
 8008c56:	2b20      	cmp	r3, #32
 8008c58:	f040 817a 	bne.w	8008f50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7ff fe83 	bl	800896c <USBD_CoreFindEP>
 8008c66:	4603      	mov	r3, r0
 8008c68:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c6a:	7b7b      	ldrb	r3, [r7, #13]
 8008c6c:	2bff      	cmp	r3, #255	; 0xff
 8008c6e:	f000 8174 	beq.w	8008f5a <USBD_StdEPReq+0x32e>
 8008c72:	7b7b      	ldrb	r3, [r7, #13]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f040 8170 	bne.w	8008f5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008c7a:	7b7a      	ldrb	r2, [r7, #13]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008c82:	7b7a      	ldrb	r2, [r7, #13]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	32ae      	adds	r2, #174	; 0xae
 8008c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f000 8163 	beq.w	8008f5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008c94:	7b7a      	ldrb	r2, [r7, #13]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	32ae      	adds	r2, #174	; 0xae
 8008c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	4798      	blx	r3
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008caa:	e156      	b.n	8008f5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	785b      	ldrb	r3, [r3, #1]
 8008cb0:	2b03      	cmp	r3, #3
 8008cb2:	d008      	beq.n	8008cc6 <USBD_StdEPReq+0x9a>
 8008cb4:	2b03      	cmp	r3, #3
 8008cb6:	f300 8145 	bgt.w	8008f44 <USBD_StdEPReq+0x318>
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 809b 	beq.w	8008df6 <USBD_StdEPReq+0x1ca>
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d03c      	beq.n	8008d3e <USBD_StdEPReq+0x112>
 8008cc4:	e13e      	b.n	8008f44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b02      	cmp	r3, #2
 8008cd0:	d002      	beq.n	8008cd8 <USBD_StdEPReq+0xac>
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	d016      	beq.n	8008d04 <USBD_StdEPReq+0xd8>
 8008cd6:	e02c      	b.n	8008d32 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cd8:	7bbb      	ldrb	r3, [r7, #14]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00d      	beq.n	8008cfa <USBD_StdEPReq+0xce>
 8008cde:	7bbb      	ldrb	r3, [r7, #14]
 8008ce0:	2b80      	cmp	r3, #128	; 0x80
 8008ce2:	d00a      	beq.n	8008cfa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ce4:	7bbb      	ldrb	r3, [r7, #14]
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f005 fb55 	bl	800e398 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cee:	2180      	movs	r1, #128	; 0x80
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f005 fb51 	bl	800e398 <USBD_LL_StallEP>
 8008cf6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cf8:	e020      	b.n	8008d3c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fc7a 	bl	80095f6 <USBD_CtlError>
              break;
 8008d02:	e01b      	b.n	8008d3c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	885b      	ldrh	r3, [r3, #2]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d10e      	bne.n	8008d2a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00b      	beq.n	8008d2a <USBD_StdEPReq+0xfe>
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	2b80      	cmp	r3, #128	; 0x80
 8008d16:	d008      	beq.n	8008d2a <USBD_StdEPReq+0xfe>
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	88db      	ldrh	r3, [r3, #6]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d104      	bne.n	8008d2a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f005 fb37 	bl	800e398 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fd2e 	bl	800978c <USBD_CtlSendStatus>

              break;
 8008d30:	e004      	b.n	8008d3c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fc5e 	bl	80095f6 <USBD_CtlError>
              break;
 8008d3a:	bf00      	nop
          }
          break;
 8008d3c:	e107      	b.n	8008f4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d002      	beq.n	8008d50 <USBD_StdEPReq+0x124>
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d016      	beq.n	8008d7c <USBD_StdEPReq+0x150>
 8008d4e:	e04b      	b.n	8008de8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d50:	7bbb      	ldrb	r3, [r7, #14]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00d      	beq.n	8008d72 <USBD_StdEPReq+0x146>
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	2b80      	cmp	r3, #128	; 0x80
 8008d5a:	d00a      	beq.n	8008d72 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
 8008d5e:	4619      	mov	r1, r3
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f005 fb19 	bl	800e398 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d66:	2180      	movs	r1, #128	; 0x80
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f005 fb15 	bl	800e398 <USBD_LL_StallEP>
 8008d6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d70:	e040      	b.n	8008df4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008d72:	6839      	ldr	r1, [r7, #0]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fc3e 	bl	80095f6 <USBD_CtlError>
              break;
 8008d7a:	e03b      	b.n	8008df4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	885b      	ldrh	r3, [r3, #2]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d136      	bne.n	8008df2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
 8008d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d004      	beq.n	8008d98 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f005 fb1f 	bl	800e3d6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fcf7 	bl	800978c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d9e:	7bbb      	ldrb	r3, [r7, #14]
 8008da0:	4619      	mov	r1, r3
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f7ff fde2 	bl	800896c <USBD_CoreFindEP>
 8008da8:	4603      	mov	r3, r0
 8008daa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dac:	7b7b      	ldrb	r3, [r7, #13]
 8008dae:	2bff      	cmp	r3, #255	; 0xff
 8008db0:	d01f      	beq.n	8008df2 <USBD_StdEPReq+0x1c6>
 8008db2:	7b7b      	ldrb	r3, [r7, #13]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d11c      	bne.n	8008df2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008db8:	7b7a      	ldrb	r2, [r7, #13]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008dc0:	7b7a      	ldrb	r2, [r7, #13]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	32ae      	adds	r2, #174	; 0xae
 8008dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dca:	689b      	ldr	r3, [r3, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d010      	beq.n	8008df2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008dd0:	7b7a      	ldrb	r2, [r7, #13]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	32ae      	adds	r2, #174	; 0xae
 8008dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dda:	689b      	ldr	r3, [r3, #8]
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	4798      	blx	r3
 8008de2:	4603      	mov	r3, r0
 8008de4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008de6:	e004      	b.n	8008df2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fc03 	bl	80095f6 <USBD_CtlError>
              break;
 8008df0:	e000      	b.n	8008df4 <USBD_StdEPReq+0x1c8>
              break;
 8008df2:	bf00      	nop
          }
          break;
 8008df4:	e0ab      	b.n	8008f4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d002      	beq.n	8008e08 <USBD_StdEPReq+0x1dc>
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	d032      	beq.n	8008e6c <USBD_StdEPReq+0x240>
 8008e06:	e097      	b.n	8008f38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e08:	7bbb      	ldrb	r3, [r7, #14]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d007      	beq.n	8008e1e <USBD_StdEPReq+0x1f2>
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	2b80      	cmp	r3, #128	; 0x80
 8008e12:	d004      	beq.n	8008e1e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fbed 	bl	80095f6 <USBD_CtlError>
                break;
 8008e1c:	e091      	b.n	8008f42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	da0b      	bge.n	8008e3e <USBD_StdEPReq+0x212>
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	4413      	add	r3, r2
 8008e32:	009b      	lsls	r3, r3, #2
 8008e34:	3310      	adds	r3, #16
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	4413      	add	r3, r2
 8008e3a:	3304      	adds	r3, #4
 8008e3c:	e00b      	b.n	8008e56 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e44:	4613      	mov	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4413      	add	r3, r2
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	4413      	add	r3, r2
 8008e54:	3304      	adds	r3, #4
 8008e56:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2202      	movs	r2, #2
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fc37 	bl	80096d8 <USBD_CtlSendData>
              break;
 8008e6a:	e06a      	b.n	8008f42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	da11      	bge.n	8008e98 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e74:	7bbb      	ldrb	r3, [r7, #14]
 8008e76:	f003 020f 	and.w	r2, r3, #15
 8008e7a:	6879      	ldr	r1, [r7, #4]
 8008e7c:	4613      	mov	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	4413      	add	r3, r2
 8008e82:	009b      	lsls	r3, r3, #2
 8008e84:	440b      	add	r3, r1
 8008e86:	3324      	adds	r3, #36	; 0x24
 8008e88:	881b      	ldrh	r3, [r3, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d117      	bne.n	8008ebe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fbb0 	bl	80095f6 <USBD_CtlError>
                  break;
 8008e96:	e054      	b.n	8008f42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	f003 020f 	and.w	r2, r3, #15
 8008e9e:	6879      	ldr	r1, [r7, #4]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	440b      	add	r3, r1
 8008eaa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d104      	bne.n	8008ebe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fb9d 	bl	80095f6 <USBD_CtlError>
                  break;
 8008ebc:	e041      	b.n	8008f42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ebe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	da0b      	bge.n	8008ede <USBD_StdEPReq+0x2b2>
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ecc:	4613      	mov	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	3310      	adds	r3, #16
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	4413      	add	r3, r2
 8008eda:	3304      	adds	r3, #4
 8008edc:	e00b      	b.n	8008ef6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ef8:	7bbb      	ldrb	r3, [r7, #14]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d002      	beq.n	8008f04 <USBD_StdEPReq+0x2d8>
 8008efe:	7bbb      	ldrb	r3, [r7, #14]
 8008f00:	2b80      	cmp	r3, #128	; 0x80
 8008f02:	d103      	bne.n	8008f0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2200      	movs	r2, #0
 8008f08:	601a      	str	r2, [r3, #0]
 8008f0a:	e00e      	b.n	8008f2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f0c:	7bbb      	ldrb	r3, [r7, #14]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f005 fa7f 	bl	800e414 <USBD_LL_IsStallEP>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d003      	beq.n	8008f24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	601a      	str	r2, [r3, #0]
 8008f22:	e002      	b.n	8008f2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	2200      	movs	r2, #0
 8008f28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fbd1 	bl	80096d8 <USBD_CtlSendData>
              break;
 8008f36:	e004      	b.n	8008f42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008f38:	6839      	ldr	r1, [r7, #0]
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f000 fb5b 	bl	80095f6 <USBD_CtlError>
              break;
 8008f40:	bf00      	nop
          }
          break;
 8008f42:	e004      	b.n	8008f4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fb55 	bl	80095f6 <USBD_CtlError>
          break;
 8008f4c:	bf00      	nop
      }
      break;
 8008f4e:	e005      	b.n	8008f5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fb4f 	bl	80095f6 <USBD_CtlError>
      break;
 8008f58:	e000      	b.n	8008f5c <USBD_StdEPReq+0x330>
      break;
 8008f5a:	bf00      	nop
  }

  return ret;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f72:	2300      	movs	r3, #0
 8008f74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	885b      	ldrh	r3, [r3, #2]
 8008f82:	0a1b      	lsrs	r3, r3, #8
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	3b01      	subs	r3, #1
 8008f88:	2b06      	cmp	r3, #6
 8008f8a:	f200 8128 	bhi.w	80091de <USBD_GetDescriptor+0x276>
 8008f8e:	a201      	add	r2, pc, #4	; (adr r2, 8008f94 <USBD_GetDescriptor+0x2c>)
 8008f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f94:	08008fb1 	.word	0x08008fb1
 8008f98:	08008fc9 	.word	0x08008fc9
 8008f9c:	08009009 	.word	0x08009009
 8008fa0:	080091df 	.word	0x080091df
 8008fa4:	080091df 	.word	0x080091df
 8008fa8:	0800917f 	.word	0x0800917f
 8008fac:	080091ab 	.word	0x080091ab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	7c12      	ldrb	r2, [r2, #16]
 8008fbc:	f107 0108 	add.w	r1, r7, #8
 8008fc0:	4610      	mov	r0, r2
 8008fc2:	4798      	blx	r3
 8008fc4:	60f8      	str	r0, [r7, #12]
      break;
 8008fc6:	e112      	b.n	80091ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	7c1b      	ldrb	r3, [r3, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10d      	bne.n	8008fec <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd8:	f107 0208 	add.w	r2, r7, #8
 8008fdc:	4610      	mov	r0, r2
 8008fde:	4798      	blx	r3
 8008fe0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	2202      	movs	r2, #2
 8008fe8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008fea:	e100      	b.n	80091ee <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	f107 0208 	add.w	r2, r7, #8
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	4798      	blx	r3
 8008ffc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3301      	adds	r3, #1
 8009002:	2202      	movs	r2, #2
 8009004:	701a      	strb	r2, [r3, #0]
      break;
 8009006:	e0f2      	b.n	80091ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	885b      	ldrh	r3, [r3, #2]
 800900c:	b2db      	uxtb	r3, r3
 800900e:	2b05      	cmp	r3, #5
 8009010:	f200 80ac 	bhi.w	800916c <USBD_GetDescriptor+0x204>
 8009014:	a201      	add	r2, pc, #4	; (adr r2, 800901c <USBD_GetDescriptor+0xb4>)
 8009016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901a:	bf00      	nop
 800901c:	08009035 	.word	0x08009035
 8009020:	08009069 	.word	0x08009069
 8009024:	0800909d 	.word	0x0800909d
 8009028:	080090d1 	.word	0x080090d1
 800902c:	08009105 	.word	0x08009105
 8009030:	08009139 	.word	0x08009139
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00b      	beq.n	8009058 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	7c12      	ldrb	r2, [r2, #16]
 800904c:	f107 0108 	add.w	r1, r7, #8
 8009050:	4610      	mov	r0, r2
 8009052:	4798      	blx	r3
 8009054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009056:	e091      	b.n	800917c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 facb 	bl	80095f6 <USBD_CtlError>
            err++;
 8009060:	7afb      	ldrb	r3, [r7, #11]
 8009062:	3301      	adds	r3, #1
 8009064:	72fb      	strb	r3, [r7, #11]
          break;
 8009066:	e089      	b.n	800917c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00b      	beq.n	800908c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	7c12      	ldrb	r2, [r2, #16]
 8009080:	f107 0108 	add.w	r1, r7, #8
 8009084:	4610      	mov	r0, r2
 8009086:	4798      	blx	r3
 8009088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800908a:	e077      	b.n	800917c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fab1 	bl	80095f6 <USBD_CtlError>
            err++;
 8009094:	7afb      	ldrb	r3, [r7, #11]
 8009096:	3301      	adds	r3, #1
 8009098:	72fb      	strb	r3, [r7, #11]
          break;
 800909a:	e06f      	b.n	800917c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00b      	beq.n	80090c0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	7c12      	ldrb	r2, [r2, #16]
 80090b4:	f107 0108 	add.w	r1, r7, #8
 80090b8:	4610      	mov	r0, r2
 80090ba:	4798      	blx	r3
 80090bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090be:	e05d      	b.n	800917c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090c0:	6839      	ldr	r1, [r7, #0]
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fa97 	bl	80095f6 <USBD_CtlError>
            err++;
 80090c8:	7afb      	ldrb	r3, [r7, #11]
 80090ca:	3301      	adds	r3, #1
 80090cc:	72fb      	strb	r3, [r7, #11]
          break;
 80090ce:	e055      	b.n	800917c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d6:	691b      	ldr	r3, [r3, #16]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00b      	beq.n	80090f4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	7c12      	ldrb	r2, [r2, #16]
 80090e8:	f107 0108 	add.w	r1, r7, #8
 80090ec:	4610      	mov	r0, r2
 80090ee:	4798      	blx	r3
 80090f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090f2:	e043      	b.n	800917c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090f4:	6839      	ldr	r1, [r7, #0]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fa7d 	bl	80095f6 <USBD_CtlError>
            err++;
 80090fc:	7afb      	ldrb	r3, [r7, #11]
 80090fe:	3301      	adds	r3, #1
 8009100:	72fb      	strb	r3, [r7, #11]
          break;
 8009102:	e03b      	b.n	800917c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00b      	beq.n	8009128 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009116:	695b      	ldr	r3, [r3, #20]
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	7c12      	ldrb	r2, [r2, #16]
 800911c:	f107 0108 	add.w	r1, r7, #8
 8009120:	4610      	mov	r0, r2
 8009122:	4798      	blx	r3
 8009124:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009126:	e029      	b.n	800917c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009128:	6839      	ldr	r1, [r7, #0]
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fa63 	bl	80095f6 <USBD_CtlError>
            err++;
 8009130:	7afb      	ldrb	r3, [r7, #11]
 8009132:	3301      	adds	r3, #1
 8009134:	72fb      	strb	r3, [r7, #11]
          break;
 8009136:	e021      	b.n	800917c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00b      	beq.n	800915c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	7c12      	ldrb	r2, [r2, #16]
 8009150:	f107 0108 	add.w	r1, r7, #8
 8009154:	4610      	mov	r0, r2
 8009156:	4798      	blx	r3
 8009158:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800915a:	e00f      	b.n	800917c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fa49 	bl	80095f6 <USBD_CtlError>
            err++;
 8009164:	7afb      	ldrb	r3, [r7, #11]
 8009166:	3301      	adds	r3, #1
 8009168:	72fb      	strb	r3, [r7, #11]
          break;
 800916a:	e007      	b.n	800917c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800916c:	6839      	ldr	r1, [r7, #0]
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fa41 	bl	80095f6 <USBD_CtlError>
          err++;
 8009174:	7afb      	ldrb	r3, [r7, #11]
 8009176:	3301      	adds	r3, #1
 8009178:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800917a:	bf00      	nop
      }
      break;
 800917c:	e037      	b.n	80091ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	7c1b      	ldrb	r3, [r3, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d109      	bne.n	800919a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800918c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800918e:	f107 0208 	add.w	r2, r7, #8
 8009192:	4610      	mov	r0, r2
 8009194:	4798      	blx	r3
 8009196:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009198:	e029      	b.n	80091ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fa2a 	bl	80095f6 <USBD_CtlError>
        err++;
 80091a2:	7afb      	ldrb	r3, [r7, #11]
 80091a4:	3301      	adds	r3, #1
 80091a6:	72fb      	strb	r3, [r7, #11]
      break;
 80091a8:	e021      	b.n	80091ee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	7c1b      	ldrb	r3, [r3, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10d      	bne.n	80091ce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ba:	f107 0208 	add.w	r2, r7, #8
 80091be:	4610      	mov	r0, r2
 80091c0:	4798      	blx	r3
 80091c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	3301      	adds	r3, #1
 80091c8:	2207      	movs	r2, #7
 80091ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091cc:	e00f      	b.n	80091ee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fa10 	bl	80095f6 <USBD_CtlError>
        err++;
 80091d6:	7afb      	ldrb	r3, [r7, #11]
 80091d8:	3301      	adds	r3, #1
 80091da:	72fb      	strb	r3, [r7, #11]
      break;
 80091dc:	e007      	b.n	80091ee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80091de:	6839      	ldr	r1, [r7, #0]
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fa08 	bl	80095f6 <USBD_CtlError>
      err++;
 80091e6:	7afb      	ldrb	r3, [r7, #11]
 80091e8:	3301      	adds	r3, #1
 80091ea:	72fb      	strb	r3, [r7, #11]
      break;
 80091ec:	bf00      	nop
  }

  if (err != 0U)
 80091ee:	7afb      	ldrb	r3, [r7, #11]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d11e      	bne.n	8009232 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	88db      	ldrh	r3, [r3, #6]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d016      	beq.n	800922a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80091fc:	893b      	ldrh	r3, [r7, #8]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00e      	beq.n	8009220 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	88da      	ldrh	r2, [r3, #6]
 8009206:	893b      	ldrh	r3, [r7, #8]
 8009208:	4293      	cmp	r3, r2
 800920a:	bf28      	it	cs
 800920c:	4613      	movcs	r3, r2
 800920e:	b29b      	uxth	r3, r3
 8009210:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009212:	893b      	ldrh	r3, [r7, #8]
 8009214:	461a      	mov	r2, r3
 8009216:	68f9      	ldr	r1, [r7, #12]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 fa5d 	bl	80096d8 <USBD_CtlSendData>
 800921e:	e009      	b.n	8009234 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f9e7 	bl	80095f6 <USBD_CtlError>
 8009228:	e004      	b.n	8009234 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 faae 	bl	800978c <USBD_CtlSendStatus>
 8009230:	e000      	b.n	8009234 <USBD_GetDescriptor+0x2cc>
    return;
 8009232:	bf00      	nop
  }
}
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop

0800923c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	889b      	ldrh	r3, [r3, #4]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d131      	bne.n	80092b2 <USBD_SetAddress+0x76>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	88db      	ldrh	r3, [r3, #6]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d12d      	bne.n	80092b2 <USBD_SetAddress+0x76>
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	885b      	ldrh	r3, [r3, #2]
 800925a:	2b7f      	cmp	r3, #127	; 0x7f
 800925c:	d829      	bhi.n	80092b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	885b      	ldrh	r3, [r3, #2]
 8009262:	b2db      	uxtb	r3, r3
 8009264:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009268:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b03      	cmp	r3, #3
 8009274:	d104      	bne.n	8009280 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009276:	6839      	ldr	r1, [r7, #0]
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f9bc 	bl	80095f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800927e:	e01d      	b.n	80092bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	7bfa      	ldrb	r2, [r7, #15]
 8009284:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009288:	7bfb      	ldrb	r3, [r7, #15]
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f005 f8ed 	bl	800e46c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fa7a 	bl	800978c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d004      	beq.n	80092a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2202      	movs	r2, #2
 80092a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092a6:	e009      	b.n	80092bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092b0:	e004      	b.n	80092bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80092b2:	6839      	ldr	r1, [r7, #0]
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f000 f99e 	bl	80095f6 <USBD_CtlError>
  }
}
 80092ba:	bf00      	nop
 80092bc:	bf00      	nop
 80092be:	3710      	adds	r7, #16
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
 80092cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	885b      	ldrh	r3, [r3, #2]
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	4b4e      	ldr	r3, [pc, #312]	; (8009414 <USBD_SetConfig+0x150>)
 80092da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80092dc:	4b4d      	ldr	r3, [pc, #308]	; (8009414 <USBD_SetConfig+0x150>)
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d905      	bls.n	80092f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f985 	bl	80095f6 <USBD_CtlError>
    return USBD_FAIL;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e08c      	b.n	800940a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	d002      	beq.n	8009302 <USBD_SetConfig+0x3e>
 80092fc:	2b03      	cmp	r3, #3
 80092fe:	d029      	beq.n	8009354 <USBD_SetConfig+0x90>
 8009300:	e075      	b.n	80093ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009302:	4b44      	ldr	r3, [pc, #272]	; (8009414 <USBD_SetConfig+0x150>)
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d020      	beq.n	800934c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800930a:	4b42      	ldr	r3, [pc, #264]	; (8009414 <USBD_SetConfig+0x150>)
 800930c:	781b      	ldrb	r3, [r3, #0]
 800930e:	461a      	mov	r2, r3
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009314:	4b3f      	ldr	r3, [pc, #252]	; (8009414 <USBD_SetConfig+0x150>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7fe ffe7 	bl	80082ee <USBD_SetClassConfig>
 8009320:	4603      	mov	r3, r0
 8009322:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009324:	7bfb      	ldrb	r3, [r7, #15]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d008      	beq.n	800933c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f962 	bl	80095f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2202      	movs	r2, #2
 8009336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800933a:	e065      	b.n	8009408 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fa25 	bl	800978c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2203      	movs	r2, #3
 8009346:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800934a:	e05d      	b.n	8009408 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fa1d 	bl	800978c <USBD_CtlSendStatus>
      break;
 8009352:	e059      	b.n	8009408 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009354:	4b2f      	ldr	r3, [pc, #188]	; (8009414 <USBD_SetConfig+0x150>)
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d112      	bne.n	8009382 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2202      	movs	r2, #2
 8009360:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009364:	4b2b      	ldr	r3, [pc, #172]	; (8009414 <USBD_SetConfig+0x150>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	461a      	mov	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800936e:	4b29      	ldr	r3, [pc, #164]	; (8009414 <USBD_SetConfig+0x150>)
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7fe ffd6 	bl	8008326 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fa06 	bl	800978c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009380:	e042      	b.n	8009408 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009382:	4b24      	ldr	r3, [pc, #144]	; (8009414 <USBD_SetConfig+0x150>)
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	461a      	mov	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	429a      	cmp	r2, r3
 800938e:	d02a      	beq.n	80093e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	b2db      	uxtb	r3, r3
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7fe ffc4 	bl	8008326 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800939e:	4b1d      	ldr	r3, [pc, #116]	; (8009414 <USBD_SetConfig+0x150>)
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	461a      	mov	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093a8:	4b1a      	ldr	r3, [pc, #104]	; (8009414 <USBD_SetConfig+0x150>)
 80093aa:	781b      	ldrb	r3, [r3, #0]
 80093ac:	4619      	mov	r1, r3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f7fe ff9d 	bl	80082ee <USBD_SetClassConfig>
 80093b4:	4603      	mov	r3, r0
 80093b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80093b8:	7bfb      	ldrb	r3, [r7, #15]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00f      	beq.n	80093de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f918 	bl	80095f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7fe ffa9 	bl	8008326 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2202      	movs	r2, #2
 80093d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80093dc:	e014      	b.n	8009408 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f9d4 	bl	800978c <USBD_CtlSendStatus>
      break;
 80093e4:	e010      	b.n	8009408 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f9d0 	bl	800978c <USBD_CtlSendStatus>
      break;
 80093ec:	e00c      	b.n	8009408 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f900 	bl	80095f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093f6:	4b07      	ldr	r3, [pc, #28]	; (8009414 <USBD_SetConfig+0x150>)
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	4619      	mov	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f7fe ff92 	bl	8008326 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009402:	2303      	movs	r3, #3
 8009404:	73fb      	strb	r3, [r7, #15]
      break;
 8009406:	bf00      	nop
  }

  return ret;
 8009408:	7bfb      	ldrb	r3, [r7, #15]
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop
 8009414:	200010ec 	.word	0x200010ec

08009418 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	88db      	ldrh	r3, [r3, #6]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d004      	beq.n	8009434 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800942a:	6839      	ldr	r1, [r7, #0]
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 f8e2 	bl	80095f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009432:	e023      	b.n	800947c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800943a:	b2db      	uxtb	r3, r3
 800943c:	2b02      	cmp	r3, #2
 800943e:	dc02      	bgt.n	8009446 <USBD_GetConfig+0x2e>
 8009440:	2b00      	cmp	r3, #0
 8009442:	dc03      	bgt.n	800944c <USBD_GetConfig+0x34>
 8009444:	e015      	b.n	8009472 <USBD_GetConfig+0x5a>
 8009446:	2b03      	cmp	r3, #3
 8009448:	d00b      	beq.n	8009462 <USBD_GetConfig+0x4a>
 800944a:	e012      	b.n	8009472 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	3308      	adds	r3, #8
 8009456:	2201      	movs	r2, #1
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f93c 	bl	80096d8 <USBD_CtlSendData>
        break;
 8009460:	e00c      	b.n	800947c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	3304      	adds	r3, #4
 8009466:	2201      	movs	r2, #1
 8009468:	4619      	mov	r1, r3
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f000 f934 	bl	80096d8 <USBD_CtlSendData>
        break;
 8009470:	e004      	b.n	800947c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009472:	6839      	ldr	r1, [r7, #0]
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f8be 	bl	80095f6 <USBD_CtlError>
        break;
 800947a:	bf00      	nop
}
 800947c:	bf00      	nop
 800947e:	3708      	adds	r7, #8
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}

08009484 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009494:	b2db      	uxtb	r3, r3
 8009496:	3b01      	subs	r3, #1
 8009498:	2b02      	cmp	r3, #2
 800949a:	d81e      	bhi.n	80094da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	88db      	ldrh	r3, [r3, #6]
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d004      	beq.n	80094ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 f8a5 	bl	80095f6 <USBD_CtlError>
        break;
 80094ac:	e01a      	b.n	80094e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2201      	movs	r2, #1
 80094b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d005      	beq.n	80094ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	f043 0202 	orr.w	r2, r3, #2
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	330c      	adds	r3, #12
 80094ce:	2202      	movs	r2, #2
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f900 	bl	80096d8 <USBD_CtlSendData>
      break;
 80094d8:	e004      	b.n	80094e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f88a 	bl	80095f6 <USBD_CtlError>
      break;
 80094e2:	bf00      	nop
  }
}
 80094e4:	bf00      	nop
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	885b      	ldrh	r3, [r3, #2]
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d107      	bne.n	800950e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 f940 	bl	800978c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800950c:	e013      	b.n	8009536 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	885b      	ldrh	r3, [r3, #2]
 8009512:	2b02      	cmp	r3, #2
 8009514:	d10b      	bne.n	800952e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	889b      	ldrh	r3, [r3, #4]
 800951a:	0a1b      	lsrs	r3, r3, #8
 800951c:	b29b      	uxth	r3, r3
 800951e:	b2da      	uxtb	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f930 	bl	800978c <USBD_CtlSendStatus>
}
 800952c:	e003      	b.n	8009536 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800952e:	6839      	ldr	r1, [r7, #0]
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f860 	bl	80095f6 <USBD_CtlError>
}
 8009536:	bf00      	nop
 8009538:	3708      	adds	r7, #8
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b082      	sub	sp, #8
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800954e:	b2db      	uxtb	r3, r3
 8009550:	3b01      	subs	r3, #1
 8009552:	2b02      	cmp	r3, #2
 8009554:	d80b      	bhi.n	800956e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	885b      	ldrh	r3, [r3, #2]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d10c      	bne.n	8009578 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	f000 f910 	bl	800978c <USBD_CtlSendStatus>
      }
      break;
 800956c:	e004      	b.n	8009578 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800956e:	6839      	ldr	r1, [r7, #0]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f840 	bl	80095f6 <USBD_CtlError>
      break;
 8009576:	e000      	b.n	800957a <USBD_ClrFeature+0x3c>
      break;
 8009578:	bf00      	nop
  }
}
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b084      	sub	sp, #16
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	781a      	ldrb	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	3301      	adds	r3, #1
 800959c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	781a      	ldrb	r2, [r3, #0]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	3301      	adds	r3, #1
 80095aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f7ff fa41 	bl	8008a34 <SWAPBYTE>
 80095b2:	4603      	mov	r3, r0
 80095b4:	461a      	mov	r2, r3
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	3301      	adds	r3, #1
 80095be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	3301      	adds	r3, #1
 80095c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f7ff fa34 	bl	8008a34 <SWAPBYTE>
 80095cc:	4603      	mov	r3, r0
 80095ce:	461a      	mov	r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	3301      	adds	r3, #1
 80095d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	3301      	adds	r3, #1
 80095de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f7ff fa27 	bl	8008a34 <SWAPBYTE>
 80095e6:	4603      	mov	r3, r0
 80095e8:	461a      	mov	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	80da      	strh	r2, [r3, #6]
}
 80095ee:	bf00      	nop
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b082      	sub	sp, #8
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
 80095fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009600:	2180      	movs	r1, #128	; 0x80
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f004 fec8 	bl	800e398 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009608:	2100      	movs	r1, #0
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f004 fec4 	bl	800e398 <USBD_LL_StallEP>
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b086      	sub	sp, #24
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009624:	2300      	movs	r3, #0
 8009626:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d036      	beq.n	800969c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009632:	6938      	ldr	r0, [r7, #16]
 8009634:	f000 f836 	bl	80096a4 <USBD_GetLen>
 8009638:	4603      	mov	r3, r0
 800963a:	3301      	adds	r3, #1
 800963c:	b29b      	uxth	r3, r3
 800963e:	005b      	lsls	r3, r3, #1
 8009640:	b29a      	uxth	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009646:	7dfb      	ldrb	r3, [r7, #23]
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	4413      	add	r3, r2
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	7812      	ldrb	r2, [r2, #0]
 8009650:	701a      	strb	r2, [r3, #0]
  idx++;
 8009652:	7dfb      	ldrb	r3, [r7, #23]
 8009654:	3301      	adds	r3, #1
 8009656:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009658:	7dfb      	ldrb	r3, [r7, #23]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	4413      	add	r3, r2
 800965e:	2203      	movs	r2, #3
 8009660:	701a      	strb	r2, [r3, #0]
  idx++;
 8009662:	7dfb      	ldrb	r3, [r7, #23]
 8009664:	3301      	adds	r3, #1
 8009666:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009668:	e013      	b.n	8009692 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800966a:	7dfb      	ldrb	r3, [r7, #23]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	4413      	add	r3, r2
 8009670:	693a      	ldr	r2, [r7, #16]
 8009672:	7812      	ldrb	r2, [r2, #0]
 8009674:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	3301      	adds	r3, #1
 800967a:	613b      	str	r3, [r7, #16]
    idx++;
 800967c:	7dfb      	ldrb	r3, [r7, #23]
 800967e:	3301      	adds	r3, #1
 8009680:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009682:	7dfb      	ldrb	r3, [r7, #23]
 8009684:	68ba      	ldr	r2, [r7, #8]
 8009686:	4413      	add	r3, r2
 8009688:	2200      	movs	r2, #0
 800968a:	701a      	strb	r2, [r3, #0]
    idx++;
 800968c:	7dfb      	ldrb	r3, [r7, #23]
 800968e:	3301      	adds	r3, #1
 8009690:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d1e7      	bne.n	800966a <USBD_GetString+0x52>
 800969a:	e000      	b.n	800969e <USBD_GetString+0x86>
    return;
 800969c:	bf00      	nop
  }
}
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80096b4:	e005      	b.n	80096c2 <USBD_GetLen+0x1e>
  {
    len++;
 80096b6:	7bfb      	ldrb	r3, [r7, #15]
 80096b8:	3301      	adds	r3, #1
 80096ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	3301      	adds	r3, #1
 80096c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1f5      	bne.n	80096b6 <USBD_GetLen+0x12>
  }

  return len;
 80096ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3714      	adds	r7, #20
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2202      	movs	r2, #2
 80096e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	2100      	movs	r1, #0
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f004 fed3 	bl	800e4aa <USBD_LL_Transmit>

  return USBD_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}

0800970e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800970e:	b580      	push	{r7, lr}
 8009710:	b084      	sub	sp, #16
 8009712:	af00      	add	r7, sp, #0
 8009714:	60f8      	str	r0, [r7, #12]
 8009716:	60b9      	str	r1, [r7, #8]
 8009718:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	2100      	movs	r1, #0
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f004 fec2 	bl	800e4aa <USBD_LL_Transmit>

  return USBD_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3710      	adds	r7, #16
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2203      	movs	r2, #3
 8009740:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68ba      	ldr	r2, [r7, #8]
 8009758:	2100      	movs	r1, #0
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f004 fec6 	bl	800e4ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b084      	sub	sp, #16
 800976e:	af00      	add	r7, sp, #0
 8009770:	60f8      	str	r0, [r7, #12]
 8009772:	60b9      	str	r1, [r7, #8]
 8009774:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68ba      	ldr	r2, [r7, #8]
 800977a:	2100      	movs	r1, #0
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	f004 feb5 	bl	800e4ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009782:	2300      	movs	r3, #0
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2204      	movs	r2, #4
 8009798:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800979c:	2300      	movs	r3, #0
 800979e:	2200      	movs	r2, #0
 80097a0:	2100      	movs	r1, #0
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f004 fe81 	bl	800e4aa <USBD_LL_Transmit>

  return USBD_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b082      	sub	sp, #8
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2205      	movs	r2, #5
 80097be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097c2:	2300      	movs	r3, #0
 80097c4:	2200      	movs	r2, #0
 80097c6:	2100      	movs	r1, #0
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f004 fe8f 	bl	800e4ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097ce:	2300      	movs	r3, #0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <__NVIC_SetPriority>:
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	4603      	mov	r3, r0
 80097e0:	6039      	str	r1, [r7, #0]
 80097e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80097e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	db0a      	blt.n	8009802 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	b2da      	uxtb	r2, r3
 80097f0:	490c      	ldr	r1, [pc, #48]	; (8009824 <__NVIC_SetPriority+0x4c>)
 80097f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097f6:	0112      	lsls	r2, r2, #4
 80097f8:	b2d2      	uxtb	r2, r2
 80097fa:	440b      	add	r3, r1
 80097fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009800:	e00a      	b.n	8009818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	b2da      	uxtb	r2, r3
 8009806:	4908      	ldr	r1, [pc, #32]	; (8009828 <__NVIC_SetPriority+0x50>)
 8009808:	79fb      	ldrb	r3, [r7, #7]
 800980a:	f003 030f 	and.w	r3, r3, #15
 800980e:	3b04      	subs	r3, #4
 8009810:	0112      	lsls	r2, r2, #4
 8009812:	b2d2      	uxtb	r2, r2
 8009814:	440b      	add	r3, r1
 8009816:	761a      	strb	r2, [r3, #24]
}
 8009818:	bf00      	nop
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr
 8009824:	e000e100 	.word	0xe000e100
 8009828:	e000ed00 	.word	0xe000ed00

0800982c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009830:	2100      	movs	r1, #0
 8009832:	f06f 0004 	mvn.w	r0, #4
 8009836:	f7ff ffcf 	bl	80097d8 <__NVIC_SetPriority>
#endif
}
 800983a:	bf00      	nop
 800983c:	bd80      	pop	{r7, pc}
	...

08009840 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009846:	f3ef 8305 	mrs	r3, IPSR
 800984a:	603b      	str	r3, [r7, #0]
  return(result);
 800984c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800984e:	2b00      	cmp	r3, #0
 8009850:	d003      	beq.n	800985a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009852:	f06f 0305 	mvn.w	r3, #5
 8009856:	607b      	str	r3, [r7, #4]
 8009858:	e00c      	b.n	8009874 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800985a:	4b0a      	ldr	r3, [pc, #40]	; (8009884 <osKernelInitialize+0x44>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d105      	bne.n	800986e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009862:	4b08      	ldr	r3, [pc, #32]	; (8009884 <osKernelInitialize+0x44>)
 8009864:	2201      	movs	r2, #1
 8009866:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009868:	2300      	movs	r3, #0
 800986a:	607b      	str	r3, [r7, #4]
 800986c:	e002      	b.n	8009874 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800986e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009872:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009874:	687b      	ldr	r3, [r7, #4]
}
 8009876:	4618      	mov	r0, r3
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	200010f0 	.word	0x200010f0

08009888 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800988e:	f3ef 8305 	mrs	r3, IPSR
 8009892:	603b      	str	r3, [r7, #0]
  return(result);
 8009894:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009896:	2b00      	cmp	r3, #0
 8009898:	d003      	beq.n	80098a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800989a:	f06f 0305 	mvn.w	r3, #5
 800989e:	607b      	str	r3, [r7, #4]
 80098a0:	e010      	b.n	80098c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80098a2:	4b0b      	ldr	r3, [pc, #44]	; (80098d0 <osKernelStart+0x48>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d109      	bne.n	80098be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80098aa:	f7ff ffbf 	bl	800982c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80098ae:	4b08      	ldr	r3, [pc, #32]	; (80098d0 <osKernelStart+0x48>)
 80098b0:	2202      	movs	r2, #2
 80098b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80098b4:	f001 fdf2 	bl	800b49c <vTaskStartScheduler>
      stat = osOK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	607b      	str	r3, [r7, #4]
 80098bc:	e002      	b.n	80098c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80098be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80098c4:	687b      	ldr	r3, [r7, #4]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	200010f0 	.word	0x200010f0

080098d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08e      	sub	sp, #56	; 0x38
 80098d8:	af04      	add	r7, sp, #16
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80098e0:	2300      	movs	r3, #0
 80098e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098e4:	f3ef 8305 	mrs	r3, IPSR
 80098e8:	617b      	str	r3, [r7, #20]
  return(result);
 80098ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d17e      	bne.n	80099ee <osThreadNew+0x11a>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d07b      	beq.n	80099ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80098f6:	2380      	movs	r3, #128	; 0x80
 80098f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80098fa:	2318      	movs	r3, #24
 80098fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80098fe:	2300      	movs	r3, #0
 8009900:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009906:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d045      	beq.n	800999a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d002      	beq.n	800991c <osThreadNew+0x48>
        name = attr->name;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	699b      	ldr	r3, [r3, #24]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d008      	beq.n	8009942 <osThreadNew+0x6e>
 8009930:	69fb      	ldr	r3, [r7, #28]
 8009932:	2b38      	cmp	r3, #56	; 0x38
 8009934:	d805      	bhi.n	8009942 <osThreadNew+0x6e>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d001      	beq.n	8009946 <osThreadNew+0x72>
        return (NULL);
 8009942:	2300      	movs	r3, #0
 8009944:	e054      	b.n	80099f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d003      	beq.n	8009956 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	089b      	lsrs	r3, r3, #2
 8009954:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00e      	beq.n	800997c <osThreadNew+0xa8>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	2bcb      	cmp	r3, #203	; 0xcb
 8009964:	d90a      	bls.n	800997c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800996a:	2b00      	cmp	r3, #0
 800996c:	d006      	beq.n	800997c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d002      	beq.n	800997c <osThreadNew+0xa8>
        mem = 1;
 8009976:	2301      	movs	r3, #1
 8009978:	61bb      	str	r3, [r7, #24]
 800997a:	e010      	b.n	800999e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10c      	bne.n	800999e <osThreadNew+0xca>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	68db      	ldr	r3, [r3, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d108      	bne.n	800999e <osThreadNew+0xca>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d104      	bne.n	800999e <osThreadNew+0xca>
          mem = 0;
 8009994:	2300      	movs	r3, #0
 8009996:	61bb      	str	r3, [r7, #24]
 8009998:	e001      	b.n	800999e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d110      	bne.n	80099c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80099ac:	9202      	str	r2, [sp, #8]
 80099ae:	9301      	str	r3, [sp, #4]
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	9300      	str	r3, [sp, #0]
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	6a3a      	ldr	r2, [r7, #32]
 80099b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099ba:	68f8      	ldr	r0, [r7, #12]
 80099bc:	f001 fb1c 	bl	800aff8 <xTaskCreateStatic>
 80099c0:	4603      	mov	r3, r0
 80099c2:	613b      	str	r3, [r7, #16]
 80099c4:	e013      	b.n	80099ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d110      	bne.n	80099ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80099cc:	6a3b      	ldr	r3, [r7, #32]
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	f107 0310 	add.w	r3, r7, #16
 80099d4:	9301      	str	r3, [sp, #4]
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f001 fb67 	bl	800b0b2 <xTaskCreate>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d001      	beq.n	80099ee <osThreadNew+0x11a>
            hTask = NULL;
 80099ea:	2300      	movs	r3, #0
 80099ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80099ee:	693b      	ldr	r3, [r7, #16]
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3728      	adds	r7, #40	; 0x28
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80099f8:	b480      	push	{r7}
 80099fa:	b085      	sub	sp, #20
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4a07      	ldr	r2, [pc, #28]	; (8009a24 <vApplicationGetIdleTaskMemory+0x2c>)
 8009a08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	4a06      	ldr	r2, [pc, #24]	; (8009a28 <vApplicationGetIdleTaskMemory+0x30>)
 8009a0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2280      	movs	r2, #128	; 0x80
 8009a14:	601a      	str	r2, [r3, #0]
}
 8009a16:	bf00      	nop
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	200010f4 	.word	0x200010f4
 8009a28:	200011c0 	.word	0x200011c0

08009a2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	4a07      	ldr	r2, [pc, #28]	; (8009a58 <vApplicationGetTimerTaskMemory+0x2c>)
 8009a3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	4a06      	ldr	r2, [pc, #24]	; (8009a5c <vApplicationGetTimerTaskMemory+0x30>)
 8009a42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a4a:	601a      	str	r2, [r3, #0]
}
 8009a4c:	bf00      	nop
 8009a4e:	3714      	adds	r7, #20
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr
 8009a58:	200013c0 	.word	0x200013c0
 8009a5c:	2000148c 	.word	0x2000148c

08009a60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f103 0208 	add.w	r2, r3, #8
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f103 0208 	add.w	r2, r3, #8
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f103 0208 	add.w	r2, r3, #8
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a94:	bf00      	nop
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009aae:	bf00      	nop
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab8:	4770      	bx	lr

08009aba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009aba:	b480      	push	{r7}
 8009abc:	b085      	sub	sp, #20
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
 8009ac2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	683a      	ldr	r2, [r7, #0]
 8009ade:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	601a      	str	r2, [r3, #0]
}
 8009af6:	bf00      	nop
 8009af8:	3714      	adds	r7, #20
 8009afa:	46bd      	mov	sp, r7
 8009afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b00:	4770      	bx	lr

08009b02 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b02:	b480      	push	{r7}
 8009b04:	b085      	sub	sp, #20
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b18:	d103      	bne.n	8009b22 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	60fb      	str	r3, [r7, #12]
 8009b20:	e00c      	b.n	8009b3c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	3308      	adds	r3, #8
 8009b26:	60fb      	str	r3, [r7, #12]
 8009b28:	e002      	b.n	8009b30 <vListInsert+0x2e>
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	685b      	ldr	r3, [r3, #4]
 8009b2e:	60fb      	str	r3, [r7, #12]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d2f6      	bcs.n	8009b2a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	685a      	ldr	r2, [r3, #4]
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	683a      	ldr	r2, [r7, #0]
 8009b56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	1c5a      	adds	r2, r3, #1
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	601a      	str	r2, [r3, #0]
}
 8009b68:	bf00      	nop
 8009b6a:	3714      	adds	r7, #20
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	6892      	ldr	r2, [r2, #8]
 8009b8a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	689b      	ldr	r3, [r3, #8]
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	6852      	ldr	r2, [r2, #4]
 8009b94:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d103      	bne.n	8009ba8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	689a      	ldr	r2, [r3, #8]
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	1e5a      	subs	r2, r3, #1
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10a      	bne.n	8009bf2 <xQueueGenericReset+0x2a>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	60bb      	str	r3, [r7, #8]
}
 8009bee:	bf00      	nop
 8009bf0:	e7fe      	b.n	8009bf0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009bf2:	f003 fb5f 	bl	800d2b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfe:	68f9      	ldr	r1, [r7, #12]
 8009c00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c02:	fb01 f303 	mul.w	r3, r1, r3
 8009c06:	441a      	add	r2, r3
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c22:	3b01      	subs	r3, #1
 8009c24:	68f9      	ldr	r1, [r7, #12]
 8009c26:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c28:	fb01 f303 	mul.w	r3, r1, r3
 8009c2c:	441a      	add	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	22ff      	movs	r2, #255	; 0xff
 8009c36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	22ff      	movs	r2, #255	; 0xff
 8009c3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d114      	bne.n	8009c72 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d01a      	beq.n	8009c86 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	3310      	adds	r3, #16
 8009c54:	4618      	mov	r0, r3
 8009c56:	f001 ff49 	bl	800baec <xTaskRemoveFromEventList>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d012      	beq.n	8009c86 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c60:	4b0c      	ldr	r3, [pc, #48]	; (8009c94 <xQueueGenericReset+0xcc>)
 8009c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	e009      	b.n	8009c86 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	3310      	adds	r3, #16
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7ff fef2 	bl	8009a60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3324      	adds	r3, #36	; 0x24
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7ff feed 	bl	8009a60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009c86:	f003 fb45 	bl	800d314 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009c8a:	2301      	movs	r3, #1
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3710      	adds	r7, #16
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	e000ed04 	.word	0xe000ed04

08009c98 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b08e      	sub	sp, #56	; 0x38
 8009c9c:	af02      	add	r7, sp, #8
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
 8009ca4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d10a      	bne.n	8009cc2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb0:	f383 8811 	msr	BASEPRI, r3
 8009cb4:	f3bf 8f6f 	isb	sy
 8009cb8:	f3bf 8f4f 	dsb	sy
 8009cbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009cbe:	bf00      	nop
 8009cc0:	e7fe      	b.n	8009cc0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d10a      	bne.n	8009cde <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009cda:	bf00      	nop
 8009cdc:	e7fe      	b.n	8009cdc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d002      	beq.n	8009cea <xQueueGenericCreateStatic+0x52>
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d001      	beq.n	8009cee <xQueueGenericCreateStatic+0x56>
 8009cea:	2301      	movs	r3, #1
 8009cec:	e000      	b.n	8009cf0 <xQueueGenericCreateStatic+0x58>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10a      	bne.n	8009d0a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	623b      	str	r3, [r7, #32]
}
 8009d06:	bf00      	nop
 8009d08:	e7fe      	b.n	8009d08 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d102      	bne.n	8009d16 <xQueueGenericCreateStatic+0x7e>
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d101      	bne.n	8009d1a <xQueueGenericCreateStatic+0x82>
 8009d16:	2301      	movs	r3, #1
 8009d18:	e000      	b.n	8009d1c <xQueueGenericCreateStatic+0x84>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10a      	bne.n	8009d36 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	61fb      	str	r3, [r7, #28]
}
 8009d32:	bf00      	nop
 8009d34:	e7fe      	b.n	8009d34 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d36:	2350      	movs	r3, #80	; 0x50
 8009d38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b50      	cmp	r3, #80	; 0x50
 8009d3e:	d00a      	beq.n	8009d56 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d44:	f383 8811 	msr	BASEPRI, r3
 8009d48:	f3bf 8f6f 	isb	sy
 8009d4c:	f3bf 8f4f 	dsb	sy
 8009d50:	61bb      	str	r3, [r7, #24]
}
 8009d52:	bf00      	nop
 8009d54:	e7fe      	b.n	8009d54 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009d56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d00d      	beq.n	8009d7e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d64:	2201      	movs	r2, #1
 8009d66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	4613      	mov	r3, r2
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	68b9      	ldr	r1, [r7, #8]
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 f83f 	bl	8009dfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3730      	adds	r7, #48	; 0x30
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08a      	sub	sp, #40	; 0x28
 8009d8c:	af02      	add	r7, sp, #8
 8009d8e:	60f8      	str	r0, [r7, #12]
 8009d90:	60b9      	str	r1, [r7, #8]
 8009d92:	4613      	mov	r3, r2
 8009d94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d10a      	bne.n	8009db2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da0:	f383 8811 	msr	BASEPRI, r3
 8009da4:	f3bf 8f6f 	isb	sy
 8009da8:	f3bf 8f4f 	dsb	sy
 8009dac:	613b      	str	r3, [r7, #16]
}
 8009dae:	bf00      	nop
 8009db0:	e7fe      	b.n	8009db0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	fb02 f303 	mul.w	r3, r2, r3
 8009dba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009dbc:	69fb      	ldr	r3, [r7, #28]
 8009dbe:	3350      	adds	r3, #80	; 0x50
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f003 fb99 	bl	800d4f8 <pvPortMalloc>
 8009dc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d011      	beq.n	8009df2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	3350      	adds	r3, #80	; 0x50
 8009dd6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009de0:	79fa      	ldrb	r2, [r7, #7]
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	9300      	str	r3, [sp, #0]
 8009de6:	4613      	mov	r3, r2
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	68b9      	ldr	r1, [r7, #8]
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f000 f805 	bl	8009dfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009df2:	69bb      	ldr	r3, [r7, #24]
	}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3720      	adds	r7, #32
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d103      	bne.n	8009e18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009e10:	69bb      	ldr	r3, [r7, #24]
 8009e12:	69ba      	ldr	r2, [r7, #24]
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	e002      	b.n	8009e1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	687a      	ldr	r2, [r7, #4]
 8009e1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	68ba      	ldr	r2, [r7, #8]
 8009e28:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e2a:	2101      	movs	r1, #1
 8009e2c:	69b8      	ldr	r0, [r7, #24]
 8009e2e:	f7ff fecb 	bl	8009bc8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	78fa      	ldrb	r2, [r7, #3]
 8009e36:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009e3a:	bf00      	nop
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
	...

08009e44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b08e      	sub	sp, #56	; 0x38
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e52:	2300      	movs	r3, #0
 8009e54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d10a      	bne.n	8009e76 <xQueueGenericSend+0x32>
	__asm volatile
 8009e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e72:	bf00      	nop
 8009e74:	e7fe      	b.n	8009e74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d103      	bne.n	8009e84 <xQueueGenericSend+0x40>
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d101      	bne.n	8009e88 <xQueueGenericSend+0x44>
 8009e84:	2301      	movs	r3, #1
 8009e86:	e000      	b.n	8009e8a <xQueueGenericSend+0x46>
 8009e88:	2300      	movs	r3, #0
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d10a      	bne.n	8009ea4 <xQueueGenericSend+0x60>
	__asm volatile
 8009e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e92:	f383 8811 	msr	BASEPRI, r3
 8009e96:	f3bf 8f6f 	isb	sy
 8009e9a:	f3bf 8f4f 	dsb	sy
 8009e9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ea0:	bf00      	nop
 8009ea2:	e7fe      	b.n	8009ea2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d103      	bne.n	8009eb2 <xQueueGenericSend+0x6e>
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d101      	bne.n	8009eb6 <xQueueGenericSend+0x72>
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e000      	b.n	8009eb8 <xQueueGenericSend+0x74>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10a      	bne.n	8009ed2 <xQueueGenericSend+0x8e>
	__asm volatile
 8009ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	623b      	str	r3, [r7, #32]
}
 8009ece:	bf00      	nop
 8009ed0:	e7fe      	b.n	8009ed0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ed2:	f002 f8b1 	bl	800c038 <xTaskGetSchedulerState>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d102      	bne.n	8009ee2 <xQueueGenericSend+0x9e>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d101      	bne.n	8009ee6 <xQueueGenericSend+0xa2>
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e000      	b.n	8009ee8 <xQueueGenericSend+0xa4>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10a      	bne.n	8009f02 <xQueueGenericSend+0xbe>
	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	f383 8811 	msr	BASEPRI, r3
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	f3bf 8f4f 	dsb	sy
 8009efc:	61fb      	str	r3, [r7, #28]
}
 8009efe:	bf00      	nop
 8009f00:	e7fe      	b.n	8009f00 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f02:	f003 f9d7 	bl	800d2b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d302      	bcc.n	8009f18 <xQueueGenericSend+0xd4>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d129      	bne.n	8009f6c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f18:	683a      	ldr	r2, [r7, #0]
 8009f1a:	68b9      	ldr	r1, [r7, #8]
 8009f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f1e:	f000 fbbb 	bl	800a698 <prvCopyDataToQueue>
 8009f22:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d010      	beq.n	8009f4e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2e:	3324      	adds	r3, #36	; 0x24
 8009f30:	4618      	mov	r0, r3
 8009f32:	f001 fddb 	bl	800baec <xTaskRemoveFromEventList>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d013      	beq.n	8009f64 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f3c:	4b3f      	ldr	r3, [pc, #252]	; (800a03c <xQueueGenericSend+0x1f8>)
 8009f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	e00a      	b.n	8009f64 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d007      	beq.n	8009f64 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f54:	4b39      	ldr	r3, [pc, #228]	; (800a03c <xQueueGenericSend+0x1f8>)
 8009f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f5a:	601a      	str	r2, [r3, #0]
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f64:	f003 f9d6 	bl	800d314 <vPortExitCritical>
				return pdPASS;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e063      	b.n	800a034 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d103      	bne.n	8009f7a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f72:	f003 f9cf 	bl	800d314 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f76:	2300      	movs	r3, #0
 8009f78:	e05c      	b.n	800a034 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d106      	bne.n	8009f8e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f80:	f107 0314 	add.w	r3, r7, #20
 8009f84:	4618      	mov	r0, r3
 8009f86:	f001 fe15 	bl	800bbb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f8e:	f003 f9c1 	bl	800d314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f92:	f001 faf3 	bl	800b57c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f96:	f003 f98d 	bl	800d2b4 <vPortEnterCritical>
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fa0:	b25b      	sxtb	r3, r3
 8009fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fa6:	d103      	bne.n	8009fb0 <xQueueGenericSend+0x16c>
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	2200      	movs	r2, #0
 8009fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fb6:	b25b      	sxtb	r3, r3
 8009fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fbc:	d103      	bne.n	8009fc6 <xQueueGenericSend+0x182>
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fc6:	f003 f9a5 	bl	800d314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fca:	1d3a      	adds	r2, r7, #4
 8009fcc:	f107 0314 	add.w	r3, r7, #20
 8009fd0:	4611      	mov	r1, r2
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f001 fe04 	bl	800bbe0 <xTaskCheckForTimeOut>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d124      	bne.n	800a028 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009fde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fe0:	f000 fc52 	bl	800a888 <prvIsQueueFull>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d018      	beq.n	800a01c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fec:	3310      	adds	r3, #16
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	4611      	mov	r1, r2
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f001 fd2a 	bl	800ba4c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ff8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ffa:	f000 fbdd 	bl	800a7b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009ffe:	f001 facb 	bl	800b598 <xTaskResumeAll>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	f47f af7c 	bne.w	8009f02 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a00a:	4b0c      	ldr	r3, [pc, #48]	; (800a03c <xQueueGenericSend+0x1f8>)
 800a00c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	e772      	b.n	8009f02 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a01c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a01e:	f000 fbcb 	bl	800a7b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a022:	f001 fab9 	bl	800b598 <xTaskResumeAll>
 800a026:	e76c      	b.n	8009f02 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a02a:	f000 fbc5 	bl	800a7b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a02e:	f001 fab3 	bl	800b598 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a032:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a034:	4618      	mov	r0, r3
 800a036:	3738      	adds	r7, #56	; 0x38
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	e000ed04 	.word	0xe000ed04

0800a040 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b090      	sub	sp, #64	; 0x40
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10a      	bne.n	800a06e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d103      	bne.n	800a07c <xQueueGenericSendFromISR+0x3c>
 800a074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d101      	bne.n	800a080 <xQueueGenericSendFromISR+0x40>
 800a07c:	2301      	movs	r3, #1
 800a07e:	e000      	b.n	800a082 <xQueueGenericSendFromISR+0x42>
 800a080:	2300      	movs	r3, #0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10a      	bne.n	800a09c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a098:	bf00      	nop
 800a09a:	e7fe      	b.n	800a09a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d103      	bne.n	800a0aa <xQueueGenericSendFromISR+0x6a>
 800a0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d101      	bne.n	800a0ae <xQueueGenericSendFromISR+0x6e>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e000      	b.n	800a0b0 <xQueueGenericSendFromISR+0x70>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10a      	bne.n	800a0ca <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b8:	f383 8811 	msr	BASEPRI, r3
 800a0bc:	f3bf 8f6f 	isb	sy
 800a0c0:	f3bf 8f4f 	dsb	sy
 800a0c4:	623b      	str	r3, [r7, #32]
}
 800a0c6:	bf00      	nop
 800a0c8:	e7fe      	b.n	800a0c8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0ca:	f003 f9d5 	bl	800d478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a0ce:	f3ef 8211 	mrs	r2, BASEPRI
 800a0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	61fa      	str	r2, [r7, #28]
 800a0e4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a0e6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0e8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d302      	bcc.n	800a0fc <xQueueGenericSendFromISR+0xbc>
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d12f      	bne.n	800a15c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a10a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a10c:	683a      	ldr	r2, [r7, #0]
 800a10e:	68b9      	ldr	r1, [r7, #8]
 800a110:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a112:	f000 fac1 	bl	800a698 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a116:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a11a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a11e:	d112      	bne.n	800a146 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a124:	2b00      	cmp	r3, #0
 800a126:	d016      	beq.n	800a156 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12a:	3324      	adds	r3, #36	; 0x24
 800a12c:	4618      	mov	r0, r3
 800a12e:	f001 fcdd 	bl	800baec <xTaskRemoveFromEventList>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00e      	beq.n	800a156 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00b      	beq.n	800a156 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2201      	movs	r2, #1
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	e007      	b.n	800a156 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a146:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a14a:	3301      	adds	r3, #1
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	b25a      	sxtb	r2, r3
 800a150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a156:	2301      	movs	r3, #1
 800a158:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a15a:	e001      	b.n	800a160 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a15c:	2300      	movs	r3, #0
 800a15e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a162:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a16a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3740      	adds	r7, #64	; 0x40
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a176:	b580      	push	{r7, lr}
 800a178:	b08e      	sub	sp, #56	; 0x38
 800a17a:	af00      	add	r7, sp, #0
 800a17c:	6078      	str	r0, [r7, #4]
 800a17e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10a      	bne.n	800a1a0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	623b      	str	r3, [r7, #32]
}
 800a19c:	bf00      	nop
 800a19e:	e7fe      	b.n	800a19e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00a      	beq.n	800a1be <xQueueGiveFromISR+0x48>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ac:	f383 8811 	msr	BASEPRI, r3
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	f3bf 8f4f 	dsb	sy
 800a1b8:	61fb      	str	r3, [r7, #28]
}
 800a1ba:	bf00      	nop
 800a1bc:	e7fe      	b.n	800a1bc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d103      	bne.n	800a1ce <xQueueGiveFromISR+0x58>
 800a1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d101      	bne.n	800a1d2 <xQueueGiveFromISR+0x5c>
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e000      	b.n	800a1d4 <xQueueGiveFromISR+0x5e>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10a      	bne.n	800a1ee <xQueueGiveFromISR+0x78>
	__asm volatile
 800a1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	61bb      	str	r3, [r7, #24]
}
 800a1ea:	bf00      	nop
 800a1ec:	e7fe      	b.n	800a1ec <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1ee:	f003 f943 	bl	800d478 <vPortValidateInterruptPriority>
	__asm volatile
 800a1f2:	f3ef 8211 	mrs	r2, BASEPRI
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	617a      	str	r2, [r7, #20]
 800a208:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a20a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a20c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a212:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a218:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d22b      	bcs.n	800a276 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22a:	1c5a      	adds	r2, r3, #1
 800a22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a230:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a238:	d112      	bne.n	800a260 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d016      	beq.n	800a270 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a244:	3324      	adds	r3, #36	; 0x24
 800a246:	4618      	mov	r0, r3
 800a248:	f001 fc50 	bl	800baec <xTaskRemoveFromEventList>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d00e      	beq.n	800a270 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00b      	beq.n	800a270 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	2201      	movs	r2, #1
 800a25c:	601a      	str	r2, [r3, #0]
 800a25e:	e007      	b.n	800a270 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a264:	3301      	adds	r3, #1
 800a266:	b2db      	uxtb	r3, r3
 800a268:	b25a      	sxtb	r2, r3
 800a26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a270:	2301      	movs	r3, #1
 800a272:	637b      	str	r3, [r7, #52]	; 0x34
 800a274:	e001      	b.n	800a27a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a276:	2300      	movs	r3, #0
 800a278:	637b      	str	r3, [r7, #52]	; 0x34
 800a27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f383 8811 	msr	BASEPRI, r3
}
 800a284:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3738      	adds	r7, #56	; 0x38
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b08c      	sub	sp, #48	; 0x30
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a29c:	2300      	movs	r3, #0
 800a29e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d10a      	bne.n	800a2c0 <xQueueReceive+0x30>
	__asm volatile
 800a2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ae:	f383 8811 	msr	BASEPRI, r3
 800a2b2:	f3bf 8f6f 	isb	sy
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	623b      	str	r3, [r7, #32]
}
 800a2bc:	bf00      	nop
 800a2be:	e7fe      	b.n	800a2be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d103      	bne.n	800a2ce <xQueueReceive+0x3e>
 800a2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d101      	bne.n	800a2d2 <xQueueReceive+0x42>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e000      	b.n	800a2d4 <xQueueReceive+0x44>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10a      	bne.n	800a2ee <xQueueReceive+0x5e>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	61fb      	str	r3, [r7, #28]
}
 800a2ea:	bf00      	nop
 800a2ec:	e7fe      	b.n	800a2ec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2ee:	f001 fea3 	bl	800c038 <xTaskGetSchedulerState>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d102      	bne.n	800a2fe <xQueueReceive+0x6e>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d101      	bne.n	800a302 <xQueueReceive+0x72>
 800a2fe:	2301      	movs	r3, #1
 800a300:	e000      	b.n	800a304 <xQueueReceive+0x74>
 800a302:	2300      	movs	r3, #0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d10a      	bne.n	800a31e <xQueueReceive+0x8e>
	__asm volatile
 800a308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30c:	f383 8811 	msr	BASEPRI, r3
 800a310:	f3bf 8f6f 	isb	sy
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	61bb      	str	r3, [r7, #24]
}
 800a31a:	bf00      	nop
 800a31c:	e7fe      	b.n	800a31c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a31e:	f002 ffc9 	bl	800d2b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a326:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d01f      	beq.n	800a36e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a32e:	68b9      	ldr	r1, [r7, #8]
 800a330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a332:	f000 fa1b 	bl	800a76c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a338:	1e5a      	subs	r2, r3, #1
 800a33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a33c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d00f      	beq.n	800a366 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a348:	3310      	adds	r3, #16
 800a34a:	4618      	mov	r0, r3
 800a34c:	f001 fbce 	bl	800baec <xTaskRemoveFromEventList>
 800a350:	4603      	mov	r3, r0
 800a352:	2b00      	cmp	r3, #0
 800a354:	d007      	beq.n	800a366 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a356:	4b3d      	ldr	r3, [pc, #244]	; (800a44c <xQueueReceive+0x1bc>)
 800a358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a366:	f002 ffd5 	bl	800d314 <vPortExitCritical>
				return pdPASS;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e069      	b.n	800a442 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d103      	bne.n	800a37c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a374:	f002 ffce 	bl	800d314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a378:	2300      	movs	r3, #0
 800a37a:	e062      	b.n	800a442 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a37c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d106      	bne.n	800a390 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a382:	f107 0310 	add.w	r3, r7, #16
 800a386:	4618      	mov	r0, r3
 800a388:	f001 fc14 	bl	800bbb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a38c:	2301      	movs	r3, #1
 800a38e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a390:	f002 ffc0 	bl	800d314 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a394:	f001 f8f2 	bl	800b57c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a398:	f002 ff8c 	bl	800d2b4 <vPortEnterCritical>
 800a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3a2:	b25b      	sxtb	r3, r3
 800a3a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3a8:	d103      	bne.n	800a3b2 <xQueueReceive+0x122>
 800a3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3b8:	b25b      	sxtb	r3, r3
 800a3ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3be:	d103      	bne.n	800a3c8 <xQueueReceive+0x138>
 800a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3c8:	f002 ffa4 	bl	800d314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3cc:	1d3a      	adds	r2, r7, #4
 800a3ce:	f107 0310 	add.w	r3, r7, #16
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f001 fc03 	bl	800bbe0 <xTaskCheckForTimeOut>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d123      	bne.n	800a428 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3e2:	f000 fa3b 	bl	800a85c <prvIsQueueEmpty>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d017      	beq.n	800a41c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ee:	3324      	adds	r3, #36	; 0x24
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	4611      	mov	r1, r2
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f001 fb29 	bl	800ba4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3fc:	f000 f9dc 	bl	800a7b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a400:	f001 f8ca 	bl	800b598 <xTaskResumeAll>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d189      	bne.n	800a31e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a40a:	4b10      	ldr	r3, [pc, #64]	; (800a44c <xQueueReceive+0x1bc>)
 800a40c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a410:	601a      	str	r2, [r3, #0]
 800a412:	f3bf 8f4f 	dsb	sy
 800a416:	f3bf 8f6f 	isb	sy
 800a41a:	e780      	b.n	800a31e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a41c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a41e:	f000 f9cb 	bl	800a7b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a422:	f001 f8b9 	bl	800b598 <xTaskResumeAll>
 800a426:	e77a      	b.n	800a31e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a42a:	f000 f9c5 	bl	800a7b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a42e:	f001 f8b3 	bl	800b598 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a432:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a434:	f000 fa12 	bl	800a85c <prvIsQueueEmpty>
 800a438:	4603      	mov	r3, r0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f43f af6f 	beq.w	800a31e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a440:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a442:	4618      	mov	r0, r3
 800a444:	3730      	adds	r7, #48	; 0x30
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	e000ed04 	.word	0xe000ed04

0800a450 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b08e      	sub	sp, #56	; 0x38
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
 800a458:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a45a:	2300      	movs	r3, #0
 800a45c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a462:	2300      	movs	r3, #0
 800a464:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10a      	bne.n	800a482 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a46c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a470:	f383 8811 	msr	BASEPRI, r3
 800a474:	f3bf 8f6f 	isb	sy
 800a478:	f3bf 8f4f 	dsb	sy
 800a47c:	623b      	str	r3, [r7, #32]
}
 800a47e:	bf00      	nop
 800a480:	e7fe      	b.n	800a480 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00a      	beq.n	800a4a0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	61fb      	str	r3, [r7, #28]
}
 800a49c:	bf00      	nop
 800a49e:	e7fe      	b.n	800a49e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4a0:	f001 fdca 	bl	800c038 <xTaskGetSchedulerState>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d102      	bne.n	800a4b0 <xQueueSemaphoreTake+0x60>
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <xQueueSemaphoreTake+0x64>
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e000      	b.n	800a4b6 <xQueueSemaphoreTake+0x66>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10a      	bne.n	800a4d0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4be:	f383 8811 	msr	BASEPRI, r3
 800a4c2:	f3bf 8f6f 	isb	sy
 800a4c6:	f3bf 8f4f 	dsb	sy
 800a4ca:	61bb      	str	r3, [r7, #24]
}
 800a4cc:	bf00      	nop
 800a4ce:	e7fe      	b.n	800a4ce <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4d0:	f002 fef0 	bl	800d2b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d024      	beq.n	800a52a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	1e5a      	subs	r2, r3, #1
 800a4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d104      	bne.n	800a4fa <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a4f0:	f001 ffd4 	bl	800c49c <pvTaskIncrementMutexHeldCount>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00f      	beq.n	800a522 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a504:	3310      	adds	r3, #16
 800a506:	4618      	mov	r0, r3
 800a508:	f001 faf0 	bl	800baec <xTaskRemoveFromEventList>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d007      	beq.n	800a522 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a512:	4b54      	ldr	r3, [pc, #336]	; (800a664 <xQueueSemaphoreTake+0x214>)
 800a514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a518:	601a      	str	r2, [r3, #0]
 800a51a:	f3bf 8f4f 	dsb	sy
 800a51e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a522:	f002 fef7 	bl	800d314 <vPortExitCritical>
				return pdPASS;
 800a526:	2301      	movs	r3, #1
 800a528:	e097      	b.n	800a65a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d111      	bne.n	800a554 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a532:	2b00      	cmp	r3, #0
 800a534:	d00a      	beq.n	800a54c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a53a:	f383 8811 	msr	BASEPRI, r3
 800a53e:	f3bf 8f6f 	isb	sy
 800a542:	f3bf 8f4f 	dsb	sy
 800a546:	617b      	str	r3, [r7, #20]
}
 800a548:	bf00      	nop
 800a54a:	e7fe      	b.n	800a54a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a54c:	f002 fee2 	bl	800d314 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a550:	2300      	movs	r3, #0
 800a552:	e082      	b.n	800a65a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a556:	2b00      	cmp	r3, #0
 800a558:	d106      	bne.n	800a568 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a55a:	f107 030c 	add.w	r3, r7, #12
 800a55e:	4618      	mov	r0, r3
 800a560:	f001 fb28 	bl	800bbb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a564:	2301      	movs	r3, #1
 800a566:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a568:	f002 fed4 	bl	800d314 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a56c:	f001 f806 	bl	800b57c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a570:	f002 fea0 	bl	800d2b4 <vPortEnterCritical>
 800a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a576:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a57a:	b25b      	sxtb	r3, r3
 800a57c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a580:	d103      	bne.n	800a58a <xQueueSemaphoreTake+0x13a>
 800a582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a584:	2200      	movs	r2, #0
 800a586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a590:	b25b      	sxtb	r3, r3
 800a592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a596:	d103      	bne.n	800a5a0 <xQueueSemaphoreTake+0x150>
 800a598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5a0:	f002 feb8 	bl	800d314 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5a4:	463a      	mov	r2, r7
 800a5a6:	f107 030c 	add.w	r3, r7, #12
 800a5aa:	4611      	mov	r1, r2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f001 fb17 	bl	800bbe0 <xTaskCheckForTimeOut>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d132      	bne.n	800a61e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5ba:	f000 f94f 	bl	800a85c <prvIsQueueEmpty>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d026      	beq.n	800a612 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d109      	bne.n	800a5e0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a5cc:	f002 fe72 	bl	800d2b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f001 fd4d 	bl	800c074 <xTaskPriorityInherit>
 800a5da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a5dc:	f002 fe9a 	bl	800d314 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e2:	3324      	adds	r3, #36	; 0x24
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f001 fa2f 	bl	800ba4c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5f0:	f000 f8e2 	bl	800a7b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5f4:	f000 ffd0 	bl	800b598 <xTaskResumeAll>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f47f af68 	bne.w	800a4d0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a600:	4b18      	ldr	r3, [pc, #96]	; (800a664 <xQueueSemaphoreTake+0x214>)
 800a602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a606:	601a      	str	r2, [r3, #0]
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	e75e      	b.n	800a4d0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a614:	f000 f8d0 	bl	800a7b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a618:	f000 ffbe 	bl	800b598 <xTaskResumeAll>
 800a61c:	e758      	b.n	800a4d0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a61e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a620:	f000 f8ca 	bl	800a7b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a624:	f000 ffb8 	bl	800b598 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a62a:	f000 f917 	bl	800a85c <prvIsQueueEmpty>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	f43f af4d 	beq.w	800a4d0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00d      	beq.n	800a658 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a63c:	f002 fe3a 	bl	800d2b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a642:	f000 f811 	bl	800a668 <prvGetDisinheritPriorityAfterTimeout>
 800a646:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a64e:	4618      	mov	r0, r3
 800a650:	f001 fde6 	bl	800c220 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a654:	f002 fe5e 	bl	800d314 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a658:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3738      	adds	r7, #56	; 0x38
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	e000ed04 	.word	0xe000ed04

0800a668 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	2b00      	cmp	r3, #0
 800a676:	d006      	beq.n	800a686 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a682:	60fb      	str	r3, [r7, #12]
 800a684:	e001      	b.n	800a68a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a686:	2300      	movs	r3, #0
 800a688:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a68a:	68fb      	ldr	r3, [r7, #12]
	}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3714      	adds	r7, #20
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b086      	sub	sp, #24
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d10d      	bne.n	800a6d2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d14d      	bne.n	800a75a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f001 fd3e 	bl	800c144 <xTaskPriorityDisinherit>
 800a6c8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	609a      	str	r2, [r3, #8]
 800a6d0:	e043      	b.n	800a75a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d119      	bne.n	800a70c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6858      	ldr	r0, [r3, #4]
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	68b9      	ldr	r1, [r7, #8]
 800a6e4:	f004 ff6e 	bl	800f5c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f0:	441a      	add	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	685a      	ldr	r2, [r3, #4]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d32b      	bcc.n	800a75a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	605a      	str	r2, [r3, #4]
 800a70a:	e026      	b.n	800a75a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	68d8      	ldr	r0, [r3, #12]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a714:	461a      	mov	r2, r3
 800a716:	68b9      	ldr	r1, [r7, #8]
 800a718:	f004 ff54 	bl	800f5c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	68da      	ldr	r2, [r3, #12]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a724:	425b      	negs	r3, r3
 800a726:	441a      	add	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	68da      	ldr	r2, [r3, #12]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	429a      	cmp	r2, r3
 800a736:	d207      	bcs.n	800a748 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	689a      	ldr	r2, [r3, #8]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a740:	425b      	negs	r3, r3
 800a742:	441a      	add	r2, r3
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2b02      	cmp	r3, #2
 800a74c:	d105      	bne.n	800a75a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d002      	beq.n	800a75a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	3b01      	subs	r3, #1
 800a758:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	1c5a      	adds	r2, r3, #1
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a762:	697b      	ldr	r3, [r7, #20]
}
 800a764:	4618      	mov	r0, r3
 800a766:	3718      	adds	r7, #24
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}

0800a76c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d018      	beq.n	800a7b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68da      	ldr	r2, [r3, #12]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a786:	441a      	add	r2, r3
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	68da      	ldr	r2, [r3, #12]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	689b      	ldr	r3, [r3, #8]
 800a794:	429a      	cmp	r2, r3
 800a796:	d303      	bcc.n	800a7a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	68d9      	ldr	r1, [r3, #12]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	6838      	ldr	r0, [r7, #0]
 800a7ac:	f004 ff0a 	bl	800f5c4 <memcpy>
	}
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b084      	sub	sp, #16
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7c0:	f002 fd78 	bl	800d2b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7cc:	e011      	b.n	800a7f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d012      	beq.n	800a7fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	3324      	adds	r3, #36	; 0x24
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f001 f986 	bl	800baec <xTaskRemoveFromEventList>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d001      	beq.n	800a7ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a7e6:	f001 fa5d 	bl	800bca4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a7ea:	7bfb      	ldrb	r3, [r7, #15]
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	b2db      	uxtb	r3, r3
 800a7f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	dce9      	bgt.n	800a7ce <prvUnlockQueue+0x16>
 800a7fa:	e000      	b.n	800a7fe <prvUnlockQueue+0x46>
					break;
 800a7fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	22ff      	movs	r2, #255	; 0xff
 800a802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a806:	f002 fd85 	bl	800d314 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a80a:	f002 fd53 	bl	800d2b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a814:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a816:	e011      	b.n	800a83c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	691b      	ldr	r3, [r3, #16]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d012      	beq.n	800a846 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	3310      	adds	r3, #16
 800a824:	4618      	mov	r0, r3
 800a826:	f001 f961 	bl	800baec <xTaskRemoveFromEventList>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a830:	f001 fa38 	bl	800bca4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a834:	7bbb      	ldrb	r3, [r7, #14]
 800a836:	3b01      	subs	r3, #1
 800a838:	b2db      	uxtb	r3, r3
 800a83a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a83c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a840:	2b00      	cmp	r3, #0
 800a842:	dce9      	bgt.n	800a818 <prvUnlockQueue+0x60>
 800a844:	e000      	b.n	800a848 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a846:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	22ff      	movs	r2, #255	; 0xff
 800a84c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a850:	f002 fd60 	bl	800d314 <vPortExitCritical>
}
 800a854:	bf00      	nop
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a864:	f002 fd26 	bl	800d2b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d102      	bne.n	800a876 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a870:	2301      	movs	r3, #1
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	e001      	b.n	800a87a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a876:	2300      	movs	r3, #0
 800a878:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a87a:	f002 fd4b 	bl	800d314 <vPortExitCritical>

	return xReturn;
 800a87e:	68fb      	ldr	r3, [r7, #12]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3710      	adds	r7, #16
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a890:	f002 fd10 	bl	800d2b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d102      	bne.n	800a8a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	60fb      	str	r3, [r7, #12]
 800a8a4:	e001      	b.n	800a8aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8aa:	f002 fd33 	bl	800d314 <vPortExitCritical>

	return xReturn;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3710      	adds	r7, #16
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60fb      	str	r3, [r7, #12]
 800a8c6:	e014      	b.n	800a8f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a8c8:	4a0f      	ldr	r2, [pc, #60]	; (800a908 <vQueueAddToRegistry+0x50>)
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d10b      	bne.n	800a8ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a8d4:	490c      	ldr	r1, [pc, #48]	; (800a908 <vQueueAddToRegistry+0x50>)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a8de:	4a0a      	ldr	r2, [pc, #40]	; (800a908 <vQueueAddToRegistry+0x50>)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	00db      	lsls	r3, r3, #3
 800a8e4:	4413      	add	r3, r2
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a8ea:	e006      	b.n	800a8fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	60fb      	str	r3, [r7, #12]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2b07      	cmp	r3, #7
 800a8f6:	d9e7      	bls.n	800a8c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a8f8:	bf00      	nop
 800a8fa:	bf00      	nop
 800a8fc:	3714      	adds	r7, #20
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	2000188c 	.word	0x2000188c

0800a90c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b086      	sub	sp, #24
 800a910:	af00      	add	r7, sp, #0
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a91c:	f002 fcca 	bl	800d2b4 <vPortEnterCritical>
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a926:	b25b      	sxtb	r3, r3
 800a928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a92c:	d103      	bne.n	800a936 <vQueueWaitForMessageRestricted+0x2a>
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2200      	movs	r2, #0
 800a932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a93c:	b25b      	sxtb	r3, r3
 800a93e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a942:	d103      	bne.n	800a94c <vQueueWaitForMessageRestricted+0x40>
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	2200      	movs	r2, #0
 800a948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a94c:	f002 fce2 	bl	800d314 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a954:	2b00      	cmp	r3, #0
 800a956:	d106      	bne.n	800a966 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	3324      	adds	r3, #36	; 0x24
 800a95c:	687a      	ldr	r2, [r7, #4]
 800a95e:	68b9      	ldr	r1, [r7, #8]
 800a960:	4618      	mov	r0, r3
 800a962:	f001 f897 	bl	800ba94 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a966:	6978      	ldr	r0, [r7, #20]
 800a968:	f7ff ff26 	bl	800a7b8 <prvUnlockQueue>
	}
 800a96c:	bf00      	nop
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800a974:	b580      	push	{r7, lr}
 800a976:	b08c      	sub	sp, #48	; 0x30
 800a978:	af02      	add	r7, sp, #8
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	2b01      	cmp	r3, #1
 800a984:	d110      	bne.n	800a9a8 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800a986:	2301      	movs	r3, #1
 800a988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2b04      	cmp	r3, #4
 800a990:	d81b      	bhi.n	800a9ca <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	61fb      	str	r3, [r7, #28]
}
 800a9a4:	bf00      	nop
 800a9a6:	e7fe      	b.n	800a9a6 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d10a      	bne.n	800a9ca <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800a9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b8:	f383 8811 	msr	BASEPRI, r3
 800a9bc:	f3bf 8f6f 	isb	sy
 800a9c0:	f3bf 8f4f 	dsb	sy
 800a9c4:	61bb      	str	r3, [r7, #24]
}
 800a9c6:	bf00      	nop
 800a9c8:	e7fe      	b.n	800a9c8 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d90a      	bls.n	800a9e8 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800a9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d6:	f383 8811 	msr	BASEPRI, r3
 800a9da:	f3bf 8f6f 	isb	sy
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	617b      	str	r3, [r7, #20]
}
 800a9e4:	bf00      	nop
 800a9e6:	e7fe      	b.n	800a9e6 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	3324      	adds	r3, #36	; 0x24
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f002 fd7b 	bl	800d4f8 <pvPortMalloc>
 800aa02:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800aa04:	6a3b      	ldr	r3, [r7, #32]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00a      	beq.n	800aa20 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800aa0a:	6a3b      	ldr	r3, [r7, #32]
 800aa0c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800aa10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	6a38      	ldr	r0, [r7, #32]
 800aa1c:	f000 fab9 	bl	800af92 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800aa20:	6a3b      	ldr	r3, [r7, #32]
	}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3728      	adds	r7, #40	; 0x28
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800aa2a:	b480      	push	{r7}
 800aa2c:	b087      	sub	sp, #28
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10a      	bne.n	800aa52 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	60fb      	str	r3, [r7, #12]
}
 800aa4e:	bf00      	nop
 800aa50:	e7fe      	b.n	800aa50 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	689a      	ldr	r2, [r3, #8]
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	1ad3      	subs	r3, r2, r3
 800aa66:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	3b01      	subs	r3, #1
 800aa6c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	697a      	ldr	r2, [r7, #20]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d304      	bcc.n	800aa82 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	697a      	ldr	r2, [r7, #20]
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800aa82:	697b      	ldr	r3, [r7, #20]
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	371c      	adds	r7, #28
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8e:	4770      	bx	lr

0800aa90 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b090      	sub	sp, #64	; 0x40
 800aa94:	af02      	add	r7, sp, #8
 800aa96:	60f8      	str	r0, [r7, #12]
 800aa98:	60b9      	str	r1, [r7, #8]
 800aa9a:	607a      	str	r2, [r7, #4]
 800aa9c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d10a      	bne.n	800aac2 <xStreamBufferSendFromISR+0x32>
	__asm volatile
 800aaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab0:	f383 8811 	msr	BASEPRI, r3
 800aab4:	f3bf 8f6f 	isb	sy
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	623b      	str	r3, [r7, #32]
}
 800aabe:	bf00      	nop
 800aac0:	e7fe      	b.n	800aac0 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 800aac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d10a      	bne.n	800aade <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 800aac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aacc:	f383 8811 	msr	BASEPRI, r3
 800aad0:	f3bf 8f6f 	isb	sy
 800aad4:	f3bf 8f4f 	dsb	sy
 800aad8:	61fb      	str	r3, [r7, #28]
}
 800aada:	bf00      	nop
 800aadc:	e7fe      	b.n	800aadc <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	7f1b      	ldrb	r3, [r3, #28]
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d002      	beq.n	800aaf0 <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800aaea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaec:	3304      	adds	r3, #4
 800aaee:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800aaf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aaf2:	f7ff ff9a 	bl	800aa2a <xStreamBufferSpacesAvailable>
 800aaf6:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800aaf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafe:	687a      	ldr	r2, [r7, #4]
 800ab00:	68b9      	ldr	r1, [r7, #8]
 800ab02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab04:	f000 f835 	bl	800ab72 <prvWriteMessageToBuffer>
 800ab08:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 800ab0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d02b      	beq.n	800ab68 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800ab10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ab12:	f000 fa1e 	bl	800af52 <prvBytesInBuffer>
 800ab16:	4602      	mov	r2, r0
 800ab18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d323      	bcc.n	800ab68 <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 800ab20:	f3ef 8211 	mrs	r2, BASEPRI
 800ab24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab28:	f383 8811 	msr	BASEPRI, r3
 800ab2c:	f3bf 8f6f 	isb	sy
 800ab30:	f3bf 8f4f 	dsb	sy
 800ab34:	61ba      	str	r2, [r7, #24]
 800ab36:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab38:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800ab3a:	627b      	str	r3, [r7, #36]	; 0x24
 800ab3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3e:	691b      	ldr	r3, [r3, #16]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00b      	beq.n	800ab5c <xStreamBufferSendFromISR+0xcc>
 800ab44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab46:	6918      	ldr	r0, [r3, #16]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	2200      	movs	r2, #0
 800ab50:	2100      	movs	r1, #0
 800ab52:	f001 fdd5 	bl	800c700 <xTaskGenericNotifyFromISR>
 800ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab58:	2200      	movs	r2, #0
 800ab5a:	611a      	str	r2, [r3, #16]
 800ab5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5e:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	f383 8811 	msr	BASEPRI, r3
}
 800ab66:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 800ab68:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3738      	adds	r7, #56	; 0x38
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b086      	sub	sp, #24
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	60f8      	str	r0, [r7, #12]
 800ab7a:	60b9      	str	r1, [r7, #8]
 800ab7c:	607a      	str	r2, [r7, #4]
 800ab7e:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800ab80:	683b      	ldr	r3, [r7, #0]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d102      	bne.n	800ab8c <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800ab86:	2300      	movs	r3, #0
 800ab88:	617b      	str	r3, [r7, #20]
 800ab8a:	e01d      	b.n	800abc8 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	7f1b      	ldrb	r3, [r3, #28]
 800ab90:	f003 0301 	and.w	r3, r3, #1
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d108      	bne.n	800abaa <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	4293      	cmp	r3, r2
 800aba2:	bf28      	it	cs
 800aba4:	4613      	movcs	r3, r2
 800aba6:	607b      	str	r3, [r7, #4]
 800aba8:	e00e      	b.n	800abc8 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800abaa:	683a      	ldr	r2, [r7, #0]
 800abac:	6a3b      	ldr	r3, [r7, #32]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d308      	bcc.n	800abc4 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800abb2:	2301      	movs	r3, #1
 800abb4:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800abb6:	1d3b      	adds	r3, r7, #4
 800abb8:	2204      	movs	r2, #4
 800abba:	4619      	mov	r1, r3
 800abbc:	68f8      	ldr	r0, [r7, #12]
 800abbe:	f000 f8dc 	bl	800ad7a <prvWriteBytesToBuffer>
 800abc2:	e001      	b.n	800abc8 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800abc4:	2300      	movs	r3, #0
 800abc6:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d007      	beq.n	800abde <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	461a      	mov	r2, r3
 800abd2:	68b9      	ldr	r1, [r7, #8]
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f000 f8d0 	bl	800ad7a <prvWriteBytesToBuffer>
 800abda:	6138      	str	r0, [r7, #16]
 800abdc:	e001      	b.n	800abe2 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800abde:	2300      	movs	r3, #0
 800abe0:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800abe2:	693b      	ldr	r3, [r7, #16]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3718      	adds	r7, #24
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b08e      	sub	sp, #56	; 0x38
 800abf0:	af02      	add	r7, sp, #8
 800abf2:	60f8      	str	r0, [r7, #12]
 800abf4:	60b9      	str	r1, [r7, #8]
 800abf6:	607a      	str	r2, [r7, #4]
 800abf8:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800abfe:	2300      	movs	r3, #0
 800ac00:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10a      	bne.n	800ac1e <xStreamBufferReceive+0x32>
	__asm volatile
 800ac08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0c:	f383 8811 	msr	BASEPRI, r3
 800ac10:	f3bf 8f6f 	isb	sy
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	61fb      	str	r3, [r7, #28]
}
 800ac1a:	bf00      	nop
 800ac1c:	e7fe      	b.n	800ac1c <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800ac1e:	6a3b      	ldr	r3, [r7, #32]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10a      	bne.n	800ac3a <xStreamBufferReceive+0x4e>
	__asm volatile
 800ac24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac28:	f383 8811 	msr	BASEPRI, r3
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	61bb      	str	r3, [r7, #24]
}
 800ac36:	bf00      	nop
 800ac38:	e7fe      	b.n	800ac38 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800ac3a:	6a3b      	ldr	r3, [r7, #32]
 800ac3c:	7f1b      	ldrb	r3, [r3, #28]
 800ac3e:	f003 0301 	and.w	r3, r3, #1
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d002      	beq.n	800ac4c <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800ac46:	2304      	movs	r3, #4
 800ac48:	627b      	str	r3, [r7, #36]	; 0x24
 800ac4a:	e001      	b.n	800ac50 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d034      	beq.n	800acc0 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800ac56:	f002 fb2d 	bl	800d2b4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800ac5a:	6a38      	ldr	r0, [r7, #32]
 800ac5c:	f000 f979 	bl	800af52 <prvBytesInBuffer>
 800ac60:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800ac62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d816      	bhi.n	800ac98 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	f001 fe2c 	bl	800c8c8 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800ac70:	6a3b      	ldr	r3, [r7, #32]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00a      	beq.n	800ac8e <xStreamBufferReceive+0xa2>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	617b      	str	r3, [r7, #20]
}
 800ac8a:	bf00      	nop
 800ac8c:	e7fe      	b.n	800ac8c <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800ac8e:	f001 f9c3 	bl	800c018 <xTaskGetCurrentTaskHandle>
 800ac92:	4602      	mov	r2, r0
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ac98:	f002 fb3c 	bl	800d314 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800ac9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d811      	bhi.n	800acc8 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2200      	movs	r2, #0
 800aca8:	2100      	movs	r1, #0
 800acaa:	2000      	movs	r0, #0
 800acac:	f001 fc0a 	bl	800c4c4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800acb0:	6a3b      	ldr	r3, [r7, #32]
 800acb2:	2200      	movs	r2, #0
 800acb4:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800acb6:	6a38      	ldr	r0, [r7, #32]
 800acb8:	f000 f94b 	bl	800af52 <prvBytesInBuffer>
 800acbc:	62b8      	str	r0, [r7, #40]	; 0x28
 800acbe:	e003      	b.n	800acc8 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800acc0:	6a38      	ldr	r0, [r7, #32]
 800acc2:	f000 f946 	bl	800af52 <prvBytesInBuffer>
 800acc6:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800acc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800acca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800accc:	429a      	cmp	r2, r3
 800acce:	d91d      	bls.n	800ad0c <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800acd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd2:	9300      	str	r3, [sp, #0]
 800acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd6:	687a      	ldr	r2, [r7, #4]
 800acd8:	68b9      	ldr	r1, [r7, #8]
 800acda:	6a38      	ldr	r0, [r7, #32]
 800acdc:	f000 f81b 	bl	800ad16 <prvReadMessageFromBuffer>
 800ace0:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800ace2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d011      	beq.n	800ad0c <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800ace8:	f000 fc48 	bl	800b57c <vTaskSuspendAll>
 800acec:	6a3b      	ldr	r3, [r7, #32]
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d009      	beq.n	800ad08 <xStreamBufferReceive+0x11c>
 800acf4:	6a3b      	ldr	r3, [r7, #32]
 800acf6:	6958      	ldr	r0, [r3, #20]
 800acf8:	2300      	movs	r3, #0
 800acfa:	2200      	movs	r2, #0
 800acfc:	2100      	movs	r1, #0
 800acfe:	f001 fc41 	bl	800c584 <xTaskGenericNotify>
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	2200      	movs	r2, #0
 800ad06:	615a      	str	r2, [r3, #20]
 800ad08:	f000 fc46 	bl	800b598 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800ad0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800ad0e:	4618      	mov	r0, r3
 800ad10:	3730      	adds	r7, #48	; 0x30
 800ad12:	46bd      	mov	sp, r7
 800ad14:	bd80      	pop	{r7, pc}

0800ad16 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b088      	sub	sp, #32
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	60f8      	str	r0, [r7, #12]
 800ad1e:	60b9      	str	r1, [r7, #8]
 800ad20:	607a      	str	r2, [r7, #4]
 800ad22:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d019      	beq.n	800ad5e <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800ad30:	f107 0110 	add.w	r1, r7, #16
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f000 f890 	bl	800ae5e <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad46:	1ad3      	subs	r3, r2, r3
 800ad48:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800ad4a:	69fa      	ldr	r2, [r7, #28]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d907      	bls.n	800ad62 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	69ba      	ldr	r2, [r7, #24]
 800ad56:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800ad58:	2300      	movs	r3, #0
 800ad5a:	61fb      	str	r3, [r7, #28]
 800ad5c:	e001      	b.n	800ad62 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	69fa      	ldr	r2, [r7, #28]
 800ad66:	68b9      	ldr	r1, [r7, #8]
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f000 f878 	bl	800ae5e <prvReadBytesFromBuffer>
 800ad6e:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800ad70:	697b      	ldr	r3, [r7, #20]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3720      	adds	r7, #32
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800ad7a:	b580      	push	{r7, lr}
 800ad7c:	b08a      	sub	sp, #40	; 0x28
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	60f8      	str	r0, [r7, #12]
 800ad82:	60b9      	str	r1, [r7, #8]
 800ad84:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10a      	bne.n	800ada2 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	61fb      	str	r3, [r7, #28]
}
 800ad9e:	bf00      	nop
 800ada0:	e7fe      	b.n	800ada0 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	689a      	ldr	r2, [r3, #8]
 800adac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adae:	1ad3      	subs	r3, r2, r3
 800adb0:	687a      	ldr	r2, [r7, #4]
 800adb2:	4293      	cmp	r3, r2
 800adb4:	bf28      	it	cs
 800adb6:	4613      	movcs	r3, r2
 800adb8:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800adba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adbc:	6a3b      	ldr	r3, [r7, #32]
 800adbe:	441a      	add	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d90a      	bls.n	800adde <prvWriteBytesToBuffer+0x64>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	61bb      	str	r3, [r7, #24]
}
 800adda:	bf00      	nop
 800addc:	e7fe      	b.n	800addc <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	699a      	ldr	r2, [r3, #24]
 800ade2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade4:	4413      	add	r3, r2
 800ade6:	6a3a      	ldr	r2, [r7, #32]
 800ade8:	68b9      	ldr	r1, [r7, #8]
 800adea:	4618      	mov	r0, r3
 800adec:	f004 fbea 	bl	800f5c4 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	6a3b      	ldr	r3, [r7, #32]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d91c      	bls.n	800ae32 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	6a3b      	ldr	r3, [r7, #32]
 800adfc:	1ad2      	subs	r2, r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d90a      	bls.n	800ae1c <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 800ae06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0a:	f383 8811 	msr	BASEPRI, r3
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f3bf 8f4f 	dsb	sy
 800ae16:	617b      	str	r3, [r7, #20]
}
 800ae18:	bf00      	nop
 800ae1a:	e7fe      	b.n	800ae1a <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	6998      	ldr	r0, [r3, #24]
 800ae20:	68ba      	ldr	r2, [r7, #8]
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	18d1      	adds	r1, r2, r3
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	6a3b      	ldr	r3, [r7, #32]
 800ae2a:	1ad3      	subs	r3, r2, r3
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	f004 fbc9 	bl	800f5c4 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800ae32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4413      	add	r3, r2
 800ae38:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d304      	bcc.n	800ae4e <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae4a:	1ad3      	subs	r3, r2, r3
 800ae4c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae52:	605a      	str	r2, [r3, #4]

	return xCount;
 800ae54:	687b      	ldr	r3, [r7, #4]
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3728      	adds	r7, #40	; 0x28
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b08a      	sub	sp, #40	; 0x28
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	60f8      	str	r0, [r7, #12]
 800ae66:	60b9      	str	r1, [r7, #8]
 800ae68:	607a      	str	r2, [r7, #4]
 800ae6a:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	4293      	cmp	r3, r2
 800ae72:	bf28      	it	cs
 800ae74:	4613      	movcs	r3, r2
 800ae76:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800ae78:	6a3b      	ldr	r3, [r7, #32]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d064      	beq.n	800af48 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8a:	1ad3      	subs	r3, r2, r3
 800ae8c:	6a3a      	ldr	r2, [r7, #32]
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	bf28      	it	cs
 800ae92:	4613      	movcs	r3, r2
 800ae94:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800ae96:	69fa      	ldr	r2, [r7, #28]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d90a      	bls.n	800aeb4 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800ae9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	61bb      	str	r3, [r7, #24]
}
 800aeb0:	bf00      	nop
 800aeb2:	e7fe      	b.n	800aeb2 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800aeb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	441a      	add	r2, r3
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d90a      	bls.n	800aed8 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 800aec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	617b      	str	r3, [r7, #20]
}
 800aed4:	bf00      	nop
 800aed6:	e7fe      	b.n	800aed6 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	699a      	ldr	r2, [r3, #24]
 800aedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aede:	4413      	add	r3, r2
 800aee0:	69fa      	ldr	r2, [r7, #28]
 800aee2:	4619      	mov	r1, r3
 800aee4:	68b8      	ldr	r0, [r7, #8]
 800aee6:	f004 fb6d 	bl	800f5c4 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800aeea:	6a3a      	ldr	r2, [r7, #32]
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d919      	bls.n	800af26 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800aef2:	6a3a      	ldr	r2, [r7, #32]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d90a      	bls.n	800af10 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	613b      	str	r3, [r7, #16]
}
 800af0c:	bf00      	nop
 800af0e:	e7fe      	b.n	800af0e <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800af10:	68ba      	ldr	r2, [r7, #8]
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	18d0      	adds	r0, r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	6999      	ldr	r1, [r3, #24]
 800af1a:	6a3a      	ldr	r2, [r7, #32]
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	1ad3      	subs	r3, r2, r3
 800af20:	461a      	mov	r2, r3
 800af22:	f004 fb4f 	bl	800f5c4 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800af26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	4413      	add	r3, r2
 800af2c:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af34:	429a      	cmp	r2, r3
 800af36:	d304      	bcc.n	800af42 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af46:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800af48:	6a3b      	ldr	r3, [r7, #32]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3728      	adds	r7, #40	; 0x28
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800af52:	b480      	push	{r7}
 800af54:	b085      	sub	sp, #20
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	689a      	ldr	r2, [r3, #8]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	4413      	add	r3, r2
 800af64:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68fa      	ldr	r2, [r7, #12]
 800af6c:	1ad3      	subs	r3, r2, r3
 800af6e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	429a      	cmp	r2, r3
 800af78:	d304      	bcc.n	800af84 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800af84:	68fb      	ldr	r3, [r7, #12]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3714      	adds	r7, #20
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b086      	sub	sp, #24
 800af96:	af00      	add	r7, sp, #0
 800af98:	60f8      	str	r0, [r7, #12]
 800af9a:	60b9      	str	r1, [r7, #8]
 800af9c:	607a      	str	r2, [r7, #4]
 800af9e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800afa0:	2355      	movs	r3, #85	; 0x55
 800afa2:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	6979      	ldr	r1, [r7, #20]
 800afa8:	68b8      	ldr	r0, [r7, #8]
 800afaa:	f004 fb19 	bl	800f5e0 <memset>
 800afae:	4602      	mov	r2, r0
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d00a      	beq.n	800afcc <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800afb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	613b      	str	r3, [r7, #16]
}
 800afc8:	bf00      	nop
 800afca:	e7fe      	b.n	800afca <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800afcc:	2224      	movs	r2, #36	; 0x24
 800afce:	2100      	movs	r1, #0
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f004 fb05 	bl	800f5e0 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	68ba      	ldr	r2, [r7, #8]
 800afda:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	687a      	ldr	r2, [r7, #4]
 800afe0:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f897 2020 	ldrb.w	r2, [r7, #32]
 800afee:	771a      	strb	r2, [r3, #28]
}
 800aff0:	bf00      	nop
 800aff2:	3718      	adds	r7, #24
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b08e      	sub	sp, #56	; 0x38
 800affc:	af04      	add	r7, sp, #16
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	607a      	str	r2, [r7, #4]
 800b004:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d10a      	bne.n	800b022 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	623b      	str	r3, [r7, #32]
}
 800b01e:	bf00      	nop
 800b020:	e7fe      	b.n	800b020 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10a      	bne.n	800b03e <xTaskCreateStatic+0x46>
	__asm volatile
 800b028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02c:	f383 8811 	msr	BASEPRI, r3
 800b030:	f3bf 8f6f 	isb	sy
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	61fb      	str	r3, [r7, #28]
}
 800b03a:	bf00      	nop
 800b03c:	e7fe      	b.n	800b03c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b03e:	23cc      	movs	r3, #204	; 0xcc
 800b040:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	2bcc      	cmp	r3, #204	; 0xcc
 800b046:	d00a      	beq.n	800b05e <xTaskCreateStatic+0x66>
	__asm volatile
 800b048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04c:	f383 8811 	msr	BASEPRI, r3
 800b050:	f3bf 8f6f 	isb	sy
 800b054:	f3bf 8f4f 	dsb	sy
 800b058:	61bb      	str	r3, [r7, #24]
}
 800b05a:	bf00      	nop
 800b05c:	e7fe      	b.n	800b05c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b05e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b062:	2b00      	cmp	r3, #0
 800b064:	d01e      	beq.n	800b0a4 <xTaskCreateStatic+0xac>
 800b066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d01b      	beq.n	800b0a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b074:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b078:	2202      	movs	r2, #2
 800b07a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b07e:	2300      	movs	r3, #0
 800b080:	9303      	str	r3, [sp, #12]
 800b082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b084:	9302      	str	r3, [sp, #8]
 800b086:	f107 0314 	add.w	r3, r7, #20
 800b08a:	9301      	str	r3, [sp, #4]
 800b08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	68b9      	ldr	r1, [r7, #8]
 800b096:	68f8      	ldr	r0, [r7, #12]
 800b098:	f000 f850 	bl	800b13c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b09c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b09e:	f000 f8f3 	bl	800b288 <prvAddNewTaskToReadyList>
 800b0a2:	e001      	b.n	800b0a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b0a8:	697b      	ldr	r3, [r7, #20]
	}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3728      	adds	r7, #40	; 0x28
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}

0800b0b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b0b2:	b580      	push	{r7, lr}
 800b0b4:	b08c      	sub	sp, #48	; 0x30
 800b0b6:	af04      	add	r7, sp, #16
 800b0b8:	60f8      	str	r0, [r7, #12]
 800b0ba:	60b9      	str	r1, [r7, #8]
 800b0bc:	603b      	str	r3, [r7, #0]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b0c2:	88fb      	ldrh	r3, [r7, #6]
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f002 fa16 	bl	800d4f8 <pvPortMalloc>
 800b0cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00e      	beq.n	800b0f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b0d4:	20cc      	movs	r0, #204	; 0xcc
 800b0d6:	f002 fa0f 	bl	800d4f8 <pvPortMalloc>
 800b0da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	697a      	ldr	r2, [r7, #20]
 800b0e6:	631a      	str	r2, [r3, #48]	; 0x30
 800b0e8:	e005      	b.n	800b0f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b0ea:	6978      	ldr	r0, [r7, #20]
 800b0ec:	f002 fad0 	bl	800d690 <vPortFree>
 800b0f0:	e001      	b.n	800b0f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d017      	beq.n	800b12c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b0fc:	69fb      	ldr	r3, [r7, #28]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b104:	88fa      	ldrh	r2, [r7, #6]
 800b106:	2300      	movs	r3, #0
 800b108:	9303      	str	r3, [sp, #12]
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	9302      	str	r3, [sp, #8]
 800b10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b110:	9301      	str	r3, [sp, #4]
 800b112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b114:	9300      	str	r3, [sp, #0]
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	68b9      	ldr	r1, [r7, #8]
 800b11a:	68f8      	ldr	r0, [r7, #12]
 800b11c:	f000 f80e 	bl	800b13c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b120:	69f8      	ldr	r0, [r7, #28]
 800b122:	f000 f8b1 	bl	800b288 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b126:	2301      	movs	r3, #1
 800b128:	61bb      	str	r3, [r7, #24]
 800b12a:	e002      	b.n	800b132 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b12c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b130:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b132:	69bb      	ldr	r3, [r7, #24]
	}
 800b134:	4618      	mov	r0, r3
 800b136:	3720      	adds	r7, #32
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b088      	sub	sp, #32
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
 800b148:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	461a      	mov	r2, r3
 800b154:	21a5      	movs	r1, #165	; 0xa5
 800b156:	f004 fa43 	bl	800f5e0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b164:	3b01      	subs	r3, #1
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	4413      	add	r3, r2
 800b16a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	f023 0307 	bic.w	r3, r3, #7
 800b172:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	f003 0307 	and.w	r3, r3, #7
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00a      	beq.n	800b194 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	617b      	str	r3, [r7, #20]
}
 800b190:	bf00      	nop
 800b192:	e7fe      	b.n	800b192 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d01f      	beq.n	800b1da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b19a:	2300      	movs	r3, #0
 800b19c:	61fb      	str	r3, [r7, #28]
 800b19e:	e012      	b.n	800b1c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	7819      	ldrb	r1, [r3, #0]
 800b1a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	3334      	adds	r3, #52	; 0x34
 800b1b0:	460a      	mov	r2, r1
 800b1b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b1b4:	68ba      	ldr	r2, [r7, #8]
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d006      	beq.n	800b1ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	61fb      	str	r3, [r7, #28]
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	2b1f      	cmp	r3, #31
 800b1ca:	d9e9      	bls.n	800b1a0 <prvInitialiseNewTask+0x64>
 800b1cc:	e000      	b.n	800b1d0 <prvInitialiseNewTask+0x94>
			{
				break;
 800b1ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800b1d8:	e003      	b.n	800b1e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e4:	2b37      	cmp	r3, #55	; 0x37
 800b1e6:	d901      	bls.n	800b1ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1e8:	2337      	movs	r3, #55	; 0x37
 800b1ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1f6:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 800b1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b200:	3304      	adds	r3, #4
 800b202:	4618      	mov	r0, r3
 800b204:	f7fe fc4c 	bl	8009aa0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b20a:	3318      	adds	r3, #24
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7fe fc47 	bl	8009aa0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b216:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b220:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b226:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22a:	2200      	movs	r2, #0
 800b22c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b232:	2200      	movs	r2, #0
 800b234:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b23a:	3364      	adds	r3, #100	; 0x64
 800b23c:	2260      	movs	r2, #96	; 0x60
 800b23e:	2100      	movs	r1, #0
 800b240:	4618      	mov	r0, r3
 800b242:	f004 f9cd 	bl	800f5e0 <memset>
 800b246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b248:	4a0c      	ldr	r2, [pc, #48]	; (800b27c <prvInitialiseNewTask+0x140>)
 800b24a:	669a      	str	r2, [r3, #104]	; 0x68
 800b24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24e:	4a0c      	ldr	r2, [pc, #48]	; (800b280 <prvInitialiseNewTask+0x144>)
 800b250:	66da      	str	r2, [r3, #108]	; 0x6c
 800b252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b254:	4a0b      	ldr	r2, [pc, #44]	; (800b284 <prvInitialiseNewTask+0x148>)
 800b256:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b258:	683a      	ldr	r2, [r7, #0]
 800b25a:	68f9      	ldr	r1, [r7, #12]
 800b25c:	69b8      	ldr	r0, [r7, #24]
 800b25e:	f001 fefb 	bl	800d058 <pxPortInitialiseStack>
 800b262:	4602      	mov	r2, r0
 800b264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b266:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d002      	beq.n	800b274 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b26e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b272:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b274:	bf00      	nop
 800b276:	3720      	adds	r7, #32
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	080114cc 	.word	0x080114cc
 800b280:	080114ec 	.word	0x080114ec
 800b284:	080114ac 	.word	0x080114ac

0800b288 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b082      	sub	sp, #8
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b290:	f002 f810 	bl	800d2b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b294:	4b2d      	ldr	r3, [pc, #180]	; (800b34c <prvAddNewTaskToReadyList+0xc4>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	3301      	adds	r3, #1
 800b29a:	4a2c      	ldr	r2, [pc, #176]	; (800b34c <prvAddNewTaskToReadyList+0xc4>)
 800b29c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b29e:	4b2c      	ldr	r3, [pc, #176]	; (800b350 <prvAddNewTaskToReadyList+0xc8>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d109      	bne.n	800b2ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2a6:	4a2a      	ldr	r2, [pc, #168]	; (800b350 <prvAddNewTaskToReadyList+0xc8>)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2ac:	4b27      	ldr	r3, [pc, #156]	; (800b34c <prvAddNewTaskToReadyList+0xc4>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d110      	bne.n	800b2d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b2b4:	f000 fd1a 	bl	800bcec <prvInitialiseTaskLists>
 800b2b8:	e00d      	b.n	800b2d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b2ba:	4b26      	ldr	r3, [pc, #152]	; (800b354 <prvAddNewTaskToReadyList+0xcc>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d109      	bne.n	800b2d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2c2:	4b23      	ldr	r3, [pc, #140]	; (800b350 <prvAddNewTaskToReadyList+0xc8>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d802      	bhi.n	800b2d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2d0:	4a1f      	ldr	r2, [pc, #124]	; (800b350 <prvAddNewTaskToReadyList+0xc8>)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2d6:	4b20      	ldr	r3, [pc, #128]	; (800b358 <prvAddNewTaskToReadyList+0xd0>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	4a1e      	ldr	r2, [pc, #120]	; (800b358 <prvAddNewTaskToReadyList+0xd0>)
 800b2de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b2e0:	4b1d      	ldr	r3, [pc, #116]	; (800b358 <prvAddNewTaskToReadyList+0xd0>)
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2ec:	4b1b      	ldr	r3, [pc, #108]	; (800b35c <prvAddNewTaskToReadyList+0xd4>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d903      	bls.n	800b2fc <prvAddNewTaskToReadyList+0x74>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f8:	4a18      	ldr	r2, [pc, #96]	; (800b35c <prvAddNewTaskToReadyList+0xd4>)
 800b2fa:	6013      	str	r3, [r2, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b300:	4613      	mov	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4a15      	ldr	r2, [pc, #84]	; (800b360 <prvAddNewTaskToReadyList+0xd8>)
 800b30a:	441a      	add	r2, r3
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	3304      	adds	r3, #4
 800b310:	4619      	mov	r1, r3
 800b312:	4610      	mov	r0, r2
 800b314:	f7fe fbd1 	bl	8009aba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b318:	f001 fffc 	bl	800d314 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b31c:	4b0d      	ldr	r3, [pc, #52]	; (800b354 <prvAddNewTaskToReadyList+0xcc>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00e      	beq.n	800b342 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b324:	4b0a      	ldr	r3, [pc, #40]	; (800b350 <prvAddNewTaskToReadyList+0xc8>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b32e:	429a      	cmp	r2, r3
 800b330:	d207      	bcs.n	800b342 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b332:	4b0c      	ldr	r3, [pc, #48]	; (800b364 <prvAddNewTaskToReadyList+0xdc>)
 800b334:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b338:	601a      	str	r2, [r3, #0]
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b342:	bf00      	nop
 800b344:	3708      	adds	r7, #8
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	20001da0 	.word	0x20001da0
 800b350:	200018cc 	.word	0x200018cc
 800b354:	20001dac 	.word	0x20001dac
 800b358:	20001dbc 	.word	0x20001dbc
 800b35c:	20001da8 	.word	0x20001da8
 800b360:	200018d0 	.word	0x200018d0
 800b364:	e000ed04 	.word	0xe000ed04

0800b368 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b370:	2300      	movs	r3, #0
 800b372:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d017      	beq.n	800b3aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b37a:	4b13      	ldr	r3, [pc, #76]	; (800b3c8 <vTaskDelay+0x60>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d00a      	beq.n	800b398 <vTaskDelay+0x30>
	__asm volatile
 800b382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b386:	f383 8811 	msr	BASEPRI, r3
 800b38a:	f3bf 8f6f 	isb	sy
 800b38e:	f3bf 8f4f 	dsb	sy
 800b392:	60bb      	str	r3, [r7, #8]
}
 800b394:	bf00      	nop
 800b396:	e7fe      	b.n	800b396 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b398:	f000 f8f0 	bl	800b57c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b39c:	2100      	movs	r1, #0
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f001 fab8 	bl	800c914 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3a4:	f000 f8f8 	bl	800b598 <xTaskResumeAll>
 800b3a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d107      	bne.n	800b3c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b3b0:	4b06      	ldr	r3, [pc, #24]	; (800b3cc <vTaskDelay+0x64>)
 800b3b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3b6:	601a      	str	r2, [r3, #0]
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3c0:	bf00      	nop
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	20001dc8 	.word	0x20001dc8
 800b3cc:	e000ed04 	.word	0xe000ed04

0800b3d0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d10a      	bne.n	800b3f8 <eTaskGetState+0x28>
	__asm volatile
 800b3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e6:	f383 8811 	msr	BASEPRI, r3
 800b3ea:	f3bf 8f6f 	isb	sy
 800b3ee:	f3bf 8f4f 	dsb	sy
 800b3f2:	60bb      	str	r3, [r7, #8]
}
 800b3f4:	bf00      	nop
 800b3f6:	e7fe      	b.n	800b3f6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 800b3f8:	4b23      	ldr	r3, [pc, #140]	; (800b488 <eTaskGetState+0xb8>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	69ba      	ldr	r2, [r7, #24]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d102      	bne.n	800b408 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800b402:	2300      	movs	r3, #0
 800b404:	77fb      	strb	r3, [r7, #31]
 800b406:	e03a      	b.n	800b47e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 800b408:	f001 ff54 	bl	800d2b4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	695b      	ldr	r3, [r3, #20]
 800b410:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800b412:	4b1e      	ldr	r3, [pc, #120]	; (800b48c <eTaskGetState+0xbc>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800b418:	4b1d      	ldr	r3, [pc, #116]	; (800b490 <eTaskGetState+0xc0>)
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800b41e:	f001 ff79 	bl	800d314 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800b422:	697a      	ldr	r2, [r7, #20]
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	429a      	cmp	r2, r3
 800b428:	d003      	beq.n	800b432 <eTaskGetState+0x62>
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	429a      	cmp	r2, r3
 800b430:	d102      	bne.n	800b438 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800b432:	2302      	movs	r3, #2
 800b434:	77fb      	strb	r3, [r7, #31]
 800b436:	e022      	b.n	800b47e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	4a16      	ldr	r2, [pc, #88]	; (800b494 <eTaskGetState+0xc4>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d112      	bne.n	800b466 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800b440:	69bb      	ldr	r3, [r7, #24]
 800b442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10b      	bne.n	800b460 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	2b01      	cmp	r3, #1
 800b452:	d102      	bne.n	800b45a <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800b454:	2302      	movs	r3, #2
 800b456:	77fb      	strb	r3, [r7, #31]
 800b458:	e011      	b.n	800b47e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800b45a:	2303      	movs	r3, #3
 800b45c:	77fb      	strb	r3, [r7, #31]
 800b45e:	e00e      	b.n	800b47e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800b460:	2302      	movs	r3, #2
 800b462:	77fb      	strb	r3, [r7, #31]
 800b464:	e00b      	b.n	800b47e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	4a0b      	ldr	r2, [pc, #44]	; (800b498 <eTaskGetState+0xc8>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d002      	beq.n	800b474 <eTaskGetState+0xa4>
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d102      	bne.n	800b47a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800b474:	2304      	movs	r3, #4
 800b476:	77fb      	strb	r3, [r7, #31]
 800b478:	e001      	b.n	800b47e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800b47a:	2301      	movs	r3, #1
 800b47c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800b47e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800b480:	4618      	mov	r0, r3
 800b482:	3720      	adds	r7, #32
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	200018cc 	.word	0x200018cc
 800b48c:	20001d58 	.word	0x20001d58
 800b490:	20001d5c 	.word	0x20001d5c
 800b494:	20001d8c 	.word	0x20001d8c
 800b498:	20001d74 	.word	0x20001d74

0800b49c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08a      	sub	sp, #40	; 0x28
 800b4a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4aa:	463a      	mov	r2, r7
 800b4ac:	1d39      	adds	r1, r7, #4
 800b4ae:	f107 0308 	add.w	r3, r7, #8
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fe faa0 	bl	80099f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4b8:	6839      	ldr	r1, [r7, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	9202      	str	r2, [sp, #8]
 800b4c0:	9301      	str	r3, [sp, #4]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	460a      	mov	r2, r1
 800b4ca:	4924      	ldr	r1, [pc, #144]	; (800b55c <vTaskStartScheduler+0xc0>)
 800b4cc:	4824      	ldr	r0, [pc, #144]	; (800b560 <vTaskStartScheduler+0xc4>)
 800b4ce:	f7ff fd93 	bl	800aff8 <xTaskCreateStatic>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	4a23      	ldr	r2, [pc, #140]	; (800b564 <vTaskStartScheduler+0xc8>)
 800b4d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4d8:	4b22      	ldr	r3, [pc, #136]	; (800b564 <vTaskStartScheduler+0xc8>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	617b      	str	r3, [r7, #20]
 800b4e4:	e001      	b.n	800b4ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d102      	bne.n	800b4f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b4f0:	f001 fa64 	bl	800c9bc <xTimerCreateTimerTask>
 800b4f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d11b      	bne.n	800b534 <vTaskStartScheduler+0x98>
	__asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b500:	f383 8811 	msr	BASEPRI, r3
 800b504:	f3bf 8f6f 	isb	sy
 800b508:	f3bf 8f4f 	dsb	sy
 800b50c:	613b      	str	r3, [r7, #16]
}
 800b50e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b510:	4b15      	ldr	r3, [pc, #84]	; (800b568 <vTaskStartScheduler+0xcc>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	3364      	adds	r3, #100	; 0x64
 800b516:	4a15      	ldr	r2, [pc, #84]	; (800b56c <vTaskStartScheduler+0xd0>)
 800b518:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b51a:	4b15      	ldr	r3, [pc, #84]	; (800b570 <vTaskStartScheduler+0xd4>)
 800b51c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b520:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b522:	4b14      	ldr	r3, [pc, #80]	; (800b574 <vTaskStartScheduler+0xd8>)
 800b524:	2201      	movs	r2, #1
 800b526:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b528:	4b13      	ldr	r3, [pc, #76]	; (800b578 <vTaskStartScheduler+0xdc>)
 800b52a:	2200      	movs	r2, #0
 800b52c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b52e:	f001 fe1f 	bl	800d170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b532:	e00e      	b.n	800b552 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b53a:	d10a      	bne.n	800b552 <vTaskStartScheduler+0xb6>
	__asm volatile
 800b53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b540:	f383 8811 	msr	BASEPRI, r3
 800b544:	f3bf 8f6f 	isb	sy
 800b548:	f3bf 8f4f 	dsb	sy
 800b54c:	60fb      	str	r3, [r7, #12]
}
 800b54e:	bf00      	nop
 800b550:	e7fe      	b.n	800b550 <vTaskStartScheduler+0xb4>
}
 800b552:	bf00      	nop
 800b554:	3718      	adds	r7, #24
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	080107fc 	.word	0x080107fc
 800b560:	0800bcbd 	.word	0x0800bcbd
 800b564:	20001dc4 	.word	0x20001dc4
 800b568:	200018cc 	.word	0x200018cc
 800b56c:	2000010c 	.word	0x2000010c
 800b570:	20001dc0 	.word	0x20001dc0
 800b574:	20001dac 	.word	0x20001dac
 800b578:	20001da4 	.word	0x20001da4

0800b57c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b57c:	b480      	push	{r7}
 800b57e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b580:	4b04      	ldr	r3, [pc, #16]	; (800b594 <vTaskSuspendAll+0x18>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3301      	adds	r3, #1
 800b586:	4a03      	ldr	r2, [pc, #12]	; (800b594 <vTaskSuspendAll+0x18>)
 800b588:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b58a:	bf00      	nop
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr
 800b594:	20001dc8 	.word	0x20001dc8

0800b598 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b084      	sub	sp, #16
 800b59c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5a6:	4b42      	ldr	r3, [pc, #264]	; (800b6b0 <xTaskResumeAll+0x118>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d10a      	bne.n	800b5c4 <xTaskResumeAll+0x2c>
	__asm volatile
 800b5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	603b      	str	r3, [r7, #0]
}
 800b5c0:	bf00      	nop
 800b5c2:	e7fe      	b.n	800b5c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5c4:	f001 fe76 	bl	800d2b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5c8:	4b39      	ldr	r3, [pc, #228]	; (800b6b0 <xTaskResumeAll+0x118>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	4a38      	ldr	r2, [pc, #224]	; (800b6b0 <xTaskResumeAll+0x118>)
 800b5d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5d2:	4b37      	ldr	r3, [pc, #220]	; (800b6b0 <xTaskResumeAll+0x118>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d162      	bne.n	800b6a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b5da:	4b36      	ldr	r3, [pc, #216]	; (800b6b4 <xTaskResumeAll+0x11c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d05e      	beq.n	800b6a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5e2:	e02f      	b.n	800b644 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5e4:	4b34      	ldr	r3, [pc, #208]	; (800b6b8 <xTaskResumeAll+0x120>)
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	68db      	ldr	r3, [r3, #12]
 800b5ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	3318      	adds	r3, #24
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fe fabf 	bl	8009b74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	3304      	adds	r3, #4
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7fe faba 	bl	8009b74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b604:	4b2d      	ldr	r3, [pc, #180]	; (800b6bc <xTaskResumeAll+0x124>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d903      	bls.n	800b614 <xTaskResumeAll+0x7c>
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b610:	4a2a      	ldr	r2, [pc, #168]	; (800b6bc <xTaskResumeAll+0x124>)
 800b612:	6013      	str	r3, [r2, #0]
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b618:	4613      	mov	r3, r2
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4413      	add	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4a27      	ldr	r2, [pc, #156]	; (800b6c0 <xTaskResumeAll+0x128>)
 800b622:	441a      	add	r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	3304      	adds	r3, #4
 800b628:	4619      	mov	r1, r3
 800b62a:	4610      	mov	r0, r2
 800b62c:	f7fe fa45 	bl	8009aba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b634:	4b23      	ldr	r3, [pc, #140]	; (800b6c4 <xTaskResumeAll+0x12c>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d302      	bcc.n	800b644 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b63e:	4b22      	ldr	r3, [pc, #136]	; (800b6c8 <xTaskResumeAll+0x130>)
 800b640:	2201      	movs	r2, #1
 800b642:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b644:	4b1c      	ldr	r3, [pc, #112]	; (800b6b8 <xTaskResumeAll+0x120>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1cb      	bne.n	800b5e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d001      	beq.n	800b656 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b652:	f000 fcc1 	bl	800bfd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b656:	4b1d      	ldr	r3, [pc, #116]	; (800b6cc <xTaskResumeAll+0x134>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d010      	beq.n	800b684 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b662:	f000 f8d5 	bl	800b810 <xTaskIncrementTick>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b66c:	4b16      	ldr	r3, [pc, #88]	; (800b6c8 <xTaskResumeAll+0x130>)
 800b66e:	2201      	movs	r2, #1
 800b670:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	3b01      	subs	r3, #1
 800b676:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1f1      	bne.n	800b662 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b67e:	4b13      	ldr	r3, [pc, #76]	; (800b6cc <xTaskResumeAll+0x134>)
 800b680:	2200      	movs	r2, #0
 800b682:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b684:	4b10      	ldr	r3, [pc, #64]	; (800b6c8 <xTaskResumeAll+0x130>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d009      	beq.n	800b6a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b68c:	2301      	movs	r3, #1
 800b68e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b690:	4b0f      	ldr	r3, [pc, #60]	; (800b6d0 <xTaskResumeAll+0x138>)
 800b692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b696:	601a      	str	r2, [r3, #0]
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6a0:	f001 fe38 	bl	800d314 <vPortExitCritical>

	return xAlreadyYielded;
 800b6a4:	68bb      	ldr	r3, [r7, #8]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20001dc8 	.word	0x20001dc8
 800b6b4:	20001da0 	.word	0x20001da0
 800b6b8:	20001d60 	.word	0x20001d60
 800b6bc:	20001da8 	.word	0x20001da8
 800b6c0:	200018d0 	.word	0x200018d0
 800b6c4:	200018cc 	.word	0x200018cc
 800b6c8:	20001db4 	.word	0x20001db4
 800b6cc:	20001db0 	.word	0x20001db0
 800b6d0:	e000ed04 	.word	0xe000ed04

0800b6d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b6da:	4b05      	ldr	r3, [pc, #20]	; (800b6f0 <xTaskGetTickCount+0x1c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b6e0:	687b      	ldr	r3, [r7, #4]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	370c      	adds	r7, #12
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	20001da4 	.word	0x20001da4

0800b6f4 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800b700:	2300      	movs	r3, #0
 800b702:	617b      	str	r3, [r7, #20]
 800b704:	2338      	movs	r3, #56	; 0x38
 800b706:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 800b708:	f7ff ff38 	bl	800b57c <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800b70c:	4b3a      	ldr	r3, [pc, #232]	; (800b7f8 <uxTaskGetSystemState+0x104>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	429a      	cmp	r2, r3
 800b714:	d368      	bcc.n	800b7e8 <uxTaskGetSystemState+0xf4>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 800b716:	693b      	ldr	r3, [r7, #16]
 800b718:	3b01      	subs	r3, #1
 800b71a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800b71c:	697a      	ldr	r2, [r7, #20]
 800b71e:	4613      	mov	r3, r2
 800b720:	00db      	lsls	r3, r3, #3
 800b722:	4413      	add	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	461a      	mov	r2, r3
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	1898      	adds	r0, r3, r2
 800b72c:	693a      	ldr	r2, [r7, #16]
 800b72e:	4613      	mov	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	4413      	add	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	4a31      	ldr	r2, [pc, #196]	; (800b7fc <uxTaskGetSystemState+0x108>)
 800b738:	4413      	add	r3, r2
 800b73a:	2201      	movs	r2, #1
 800b73c:	4619      	mov	r1, r3
 800b73e:	f000 fba9 	bl	800be94 <prvListTasksWithinSingleList>
 800b742:	4602      	mov	r2, r0
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	4413      	add	r3, r2
 800b748:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d1e2      	bne.n	800b716 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800b750:	697a      	ldr	r2, [r7, #20]
 800b752:	4613      	mov	r3, r2
 800b754:	00db      	lsls	r3, r3, #3
 800b756:	4413      	add	r3, r2
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	461a      	mov	r2, r3
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	4413      	add	r3, r2
 800b760:	4a27      	ldr	r2, [pc, #156]	; (800b800 <uxTaskGetSystemState+0x10c>)
 800b762:	6811      	ldr	r1, [r2, #0]
 800b764:	2202      	movs	r2, #2
 800b766:	4618      	mov	r0, r3
 800b768:	f000 fb94 	bl	800be94 <prvListTasksWithinSingleList>
 800b76c:	4602      	mov	r2, r0
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	4413      	add	r3, r2
 800b772:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800b774:	697a      	ldr	r2, [r7, #20]
 800b776:	4613      	mov	r3, r2
 800b778:	00db      	lsls	r3, r3, #3
 800b77a:	4413      	add	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	461a      	mov	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	4413      	add	r3, r2
 800b784:	4a1f      	ldr	r2, [pc, #124]	; (800b804 <uxTaskGetSystemState+0x110>)
 800b786:	6811      	ldr	r1, [r2, #0]
 800b788:	2202      	movs	r2, #2
 800b78a:	4618      	mov	r0, r3
 800b78c:	f000 fb82 	bl	800be94 <prvListTasksWithinSingleList>
 800b790:	4602      	mov	r2, r0
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	4413      	add	r3, r2
 800b796:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800b798:	697a      	ldr	r2, [r7, #20]
 800b79a:	4613      	mov	r3, r2
 800b79c:	00db      	lsls	r3, r3, #3
 800b79e:	4413      	add	r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	2204      	movs	r2, #4
 800b7aa:	4917      	ldr	r1, [pc, #92]	; (800b808 <uxTaskGetSystemState+0x114>)
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f000 fb71 	bl	800be94 <prvListTasksWithinSingleList>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	4413      	add	r3, r2
 800b7b8:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	4613      	mov	r3, r2
 800b7be:	00db      	lsls	r3, r3, #3
 800b7c0:	4413      	add	r3, r2
 800b7c2:	009b      	lsls	r3, r3, #2
 800b7c4:	461a      	mov	r2, r3
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	2203      	movs	r2, #3
 800b7cc:	490f      	ldr	r1, [pc, #60]	; (800b80c <uxTaskGetSystemState+0x118>)
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f000 fb60 	bl	800be94 <prvListTasksWithinSingleList>
 800b7d4:	4602      	mov	r2, r0
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	4413      	add	r3, r2
 800b7da:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d002      	beq.n	800b7e8 <uxTaskGetSystemState+0xf4>
					{
						*pulTotalRunTime = 0;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800b7e8:	f7ff fed6 	bl	800b598 <xTaskResumeAll>

		return uxTask;
 800b7ec:	697b      	ldr	r3, [r7, #20]
	}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20001da0 	.word	0x20001da0
 800b7fc:	200018d0 	.word	0x200018d0
 800b800:	20001d58 	.word	0x20001d58
 800b804:	20001d5c 	.word	0x20001d5c
 800b808:	20001d74 	.word	0x20001d74
 800b80c:	20001d8c 	.word	0x20001d8c

0800b810 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b086      	sub	sp, #24
 800b814:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b816:	2300      	movs	r3, #0
 800b818:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b81a:	4b4f      	ldr	r3, [pc, #316]	; (800b958 <xTaskIncrementTick+0x148>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f040 808f 	bne.w	800b942 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b824:	4b4d      	ldr	r3, [pc, #308]	; (800b95c <xTaskIncrementTick+0x14c>)
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3301      	adds	r3, #1
 800b82a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b82c:	4a4b      	ldr	r2, [pc, #300]	; (800b95c <xTaskIncrementTick+0x14c>)
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b832:	693b      	ldr	r3, [r7, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d120      	bne.n	800b87a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b838:	4b49      	ldr	r3, [pc, #292]	; (800b960 <xTaskIncrementTick+0x150>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00a      	beq.n	800b858 <xTaskIncrementTick+0x48>
	__asm volatile
 800b842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b846:	f383 8811 	msr	BASEPRI, r3
 800b84a:	f3bf 8f6f 	isb	sy
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	603b      	str	r3, [r7, #0]
}
 800b854:	bf00      	nop
 800b856:	e7fe      	b.n	800b856 <xTaskIncrementTick+0x46>
 800b858:	4b41      	ldr	r3, [pc, #260]	; (800b960 <xTaskIncrementTick+0x150>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	60fb      	str	r3, [r7, #12]
 800b85e:	4b41      	ldr	r3, [pc, #260]	; (800b964 <xTaskIncrementTick+0x154>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a3f      	ldr	r2, [pc, #252]	; (800b960 <xTaskIncrementTick+0x150>)
 800b864:	6013      	str	r3, [r2, #0]
 800b866:	4a3f      	ldr	r2, [pc, #252]	; (800b964 <xTaskIncrementTick+0x154>)
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6013      	str	r3, [r2, #0]
 800b86c:	4b3e      	ldr	r3, [pc, #248]	; (800b968 <xTaskIncrementTick+0x158>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	3301      	adds	r3, #1
 800b872:	4a3d      	ldr	r2, [pc, #244]	; (800b968 <xTaskIncrementTick+0x158>)
 800b874:	6013      	str	r3, [r2, #0]
 800b876:	f000 fbaf 	bl	800bfd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b87a:	4b3c      	ldr	r3, [pc, #240]	; (800b96c <xTaskIncrementTick+0x15c>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	693a      	ldr	r2, [r7, #16]
 800b880:	429a      	cmp	r2, r3
 800b882:	d349      	bcc.n	800b918 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b884:	4b36      	ldr	r3, [pc, #216]	; (800b960 <xTaskIncrementTick+0x150>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d104      	bne.n	800b898 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b88e:	4b37      	ldr	r3, [pc, #220]	; (800b96c <xTaskIncrementTick+0x15c>)
 800b890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b894:	601a      	str	r2, [r3, #0]
					break;
 800b896:	e03f      	b.n	800b918 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b898:	4b31      	ldr	r3, [pc, #196]	; (800b960 <xTaskIncrementTick+0x150>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	68db      	ldr	r3, [r3, #12]
 800b8a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d203      	bcs.n	800b8b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b8b0:	4a2e      	ldr	r2, [pc, #184]	; (800b96c <xTaskIncrementTick+0x15c>)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b8b6:	e02f      	b.n	800b918 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	3304      	adds	r3, #4
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7fe f959 	bl	8009b74 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d004      	beq.n	800b8d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	3318      	adds	r3, #24
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fe f950 	bl	8009b74 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d8:	4b25      	ldr	r3, [pc, #148]	; (800b970 <xTaskIncrementTick+0x160>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d903      	bls.n	800b8e8 <xTaskIncrementTick+0xd8>
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e4:	4a22      	ldr	r2, [pc, #136]	; (800b970 <xTaskIncrementTick+0x160>)
 800b8e6:	6013      	str	r3, [r2, #0]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4413      	add	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4a1f      	ldr	r2, [pc, #124]	; (800b974 <xTaskIncrementTick+0x164>)
 800b8f6:	441a      	add	r2, r3
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	4610      	mov	r0, r2
 800b900:	f7fe f8db 	bl	8009aba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b908:	4b1b      	ldr	r3, [pc, #108]	; (800b978 <xTaskIncrementTick+0x168>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b90e:	429a      	cmp	r2, r3
 800b910:	d3b8      	bcc.n	800b884 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b912:	2301      	movs	r3, #1
 800b914:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b916:	e7b5      	b.n	800b884 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b918:	4b17      	ldr	r3, [pc, #92]	; (800b978 <xTaskIncrementTick+0x168>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b91e:	4915      	ldr	r1, [pc, #84]	; (800b974 <xTaskIncrementTick+0x164>)
 800b920:	4613      	mov	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4413      	add	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	440b      	add	r3, r1
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d901      	bls.n	800b934 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b930:	2301      	movs	r3, #1
 800b932:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b934:	4b11      	ldr	r3, [pc, #68]	; (800b97c <xTaskIncrementTick+0x16c>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d007      	beq.n	800b94c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b93c:	2301      	movs	r3, #1
 800b93e:	617b      	str	r3, [r7, #20]
 800b940:	e004      	b.n	800b94c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b942:	4b0f      	ldr	r3, [pc, #60]	; (800b980 <xTaskIncrementTick+0x170>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	3301      	adds	r3, #1
 800b948:	4a0d      	ldr	r2, [pc, #52]	; (800b980 <xTaskIncrementTick+0x170>)
 800b94a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b94c:	697b      	ldr	r3, [r7, #20]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	3718      	adds	r7, #24
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20001dc8 	.word	0x20001dc8
 800b95c:	20001da4 	.word	0x20001da4
 800b960:	20001d58 	.word	0x20001d58
 800b964:	20001d5c 	.word	0x20001d5c
 800b968:	20001db8 	.word	0x20001db8
 800b96c:	20001dc0 	.word	0x20001dc0
 800b970:	20001da8 	.word	0x20001da8
 800b974:	200018d0 	.word	0x200018d0
 800b978:	200018cc 	.word	0x200018cc
 800b97c:	20001db4 	.word	0x20001db4
 800b980:	20001db0 	.word	0x20001db0

0800b984 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b984:	b480      	push	{r7}
 800b986:	b085      	sub	sp, #20
 800b988:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b98a:	4b2a      	ldr	r3, [pc, #168]	; (800ba34 <vTaskSwitchContext+0xb0>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d003      	beq.n	800b99a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b992:	4b29      	ldr	r3, [pc, #164]	; (800ba38 <vTaskSwitchContext+0xb4>)
 800b994:	2201      	movs	r2, #1
 800b996:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b998:	e046      	b.n	800ba28 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b99a:	4b27      	ldr	r3, [pc, #156]	; (800ba38 <vTaskSwitchContext+0xb4>)
 800b99c:	2200      	movs	r2, #0
 800b99e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9a0:	4b26      	ldr	r3, [pc, #152]	; (800ba3c <vTaskSwitchContext+0xb8>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	60fb      	str	r3, [r7, #12]
 800b9a6:	e010      	b.n	800b9ca <vTaskSwitchContext+0x46>
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d10a      	bne.n	800b9c4 <vTaskSwitchContext+0x40>
	__asm volatile
 800b9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b2:	f383 8811 	msr	BASEPRI, r3
 800b9b6:	f3bf 8f6f 	isb	sy
 800b9ba:	f3bf 8f4f 	dsb	sy
 800b9be:	607b      	str	r3, [r7, #4]
}
 800b9c0:	bf00      	nop
 800b9c2:	e7fe      	b.n	800b9c2 <vTaskSwitchContext+0x3e>
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	60fb      	str	r3, [r7, #12]
 800b9ca:	491d      	ldr	r1, [pc, #116]	; (800ba40 <vTaskSwitchContext+0xbc>)
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	4613      	mov	r3, r2
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	4413      	add	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	440b      	add	r3, r1
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d0e4      	beq.n	800b9a8 <vTaskSwitchContext+0x24>
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	4613      	mov	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	4413      	add	r3, r2
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	4a15      	ldr	r2, [pc, #84]	; (800ba40 <vTaskSwitchContext+0xbc>)
 800b9ea:	4413      	add	r3, r2
 800b9ec:	60bb      	str	r3, [r7, #8]
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	685a      	ldr	r2, [r3, #4]
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	605a      	str	r2, [r3, #4]
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	685a      	ldr	r2, [r3, #4]
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	3308      	adds	r3, #8
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d104      	bne.n	800ba0e <vTaskSwitchContext+0x8a>
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	685a      	ldr	r2, [r3, #4]
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	605a      	str	r2, [r3, #4]
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	4a0b      	ldr	r2, [pc, #44]	; (800ba44 <vTaskSwitchContext+0xc0>)
 800ba16:	6013      	str	r3, [r2, #0]
 800ba18:	4a08      	ldr	r2, [pc, #32]	; (800ba3c <vTaskSwitchContext+0xb8>)
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ba1e:	4b09      	ldr	r3, [pc, #36]	; (800ba44 <vTaskSwitchContext+0xc0>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	3364      	adds	r3, #100	; 0x64
 800ba24:	4a08      	ldr	r2, [pc, #32]	; (800ba48 <vTaskSwitchContext+0xc4>)
 800ba26:	6013      	str	r3, [r2, #0]
}
 800ba28:	bf00      	nop
 800ba2a:	3714      	adds	r7, #20
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr
 800ba34:	20001dc8 	.word	0x20001dc8
 800ba38:	20001db4 	.word	0x20001db4
 800ba3c:	20001da8 	.word	0x20001da8
 800ba40:	200018d0 	.word	0x200018d0
 800ba44:	200018cc 	.word	0x200018cc
 800ba48:	2000010c 	.word	0x2000010c

0800ba4c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10a      	bne.n	800ba72 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ba5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	60fb      	str	r3, [r7, #12]
}
 800ba6e:	bf00      	nop
 800ba70:	e7fe      	b.n	800ba70 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ba72:	4b07      	ldr	r3, [pc, #28]	; (800ba90 <vTaskPlaceOnEventList+0x44>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	3318      	adds	r3, #24
 800ba78:	4619      	mov	r1, r3
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f7fe f841 	bl	8009b02 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ba80:	2101      	movs	r1, #1
 800ba82:	6838      	ldr	r0, [r7, #0]
 800ba84:	f000 ff46 	bl	800c914 <prvAddCurrentTaskToDelayedList>
}
 800ba88:	bf00      	nop
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	200018cc 	.word	0x200018cc

0800ba94 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b086      	sub	sp, #24
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	60f8      	str	r0, [r7, #12]
 800ba9c:	60b9      	str	r1, [r7, #8]
 800ba9e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10a      	bne.n	800babc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800baa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baaa:	f383 8811 	msr	BASEPRI, r3
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	617b      	str	r3, [r7, #20]
}
 800bab8:	bf00      	nop
 800baba:	e7fe      	b.n	800baba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800babc:	4b0a      	ldr	r3, [pc, #40]	; (800bae8 <vTaskPlaceOnEventListRestricted+0x54>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	3318      	adds	r3, #24
 800bac2:	4619      	mov	r1, r3
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f7fd fff8 	bl	8009aba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d002      	beq.n	800bad6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bad0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bad4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bad6:	6879      	ldr	r1, [r7, #4]
 800bad8:	68b8      	ldr	r0, [r7, #8]
 800bada:	f000 ff1b 	bl	800c914 <prvAddCurrentTaskToDelayedList>
	}
 800bade:	bf00      	nop
 800bae0:	3718      	adds	r7, #24
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	200018cc 	.word	0x200018cc

0800baec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b086      	sub	sp, #24
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10a      	bne.n	800bb18 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	60fb      	str	r3, [r7, #12]
}
 800bb14:	bf00      	nop
 800bb16:	e7fe      	b.n	800bb16 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	3318      	adds	r3, #24
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7fe f829 	bl	8009b74 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb22:	4b1e      	ldr	r3, [pc, #120]	; (800bb9c <xTaskRemoveFromEventList+0xb0>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d11d      	bne.n	800bb66 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	3304      	adds	r3, #4
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f7fe f820 	bl	8009b74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb38:	4b19      	ldr	r3, [pc, #100]	; (800bba0 <xTaskRemoveFromEventList+0xb4>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d903      	bls.n	800bb48 <xTaskRemoveFromEventList+0x5c>
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb44:	4a16      	ldr	r2, [pc, #88]	; (800bba0 <xTaskRemoveFromEventList+0xb4>)
 800bb46:	6013      	str	r3, [r2, #0]
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb4c:	4613      	mov	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	4413      	add	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4a13      	ldr	r2, [pc, #76]	; (800bba4 <xTaskRemoveFromEventList+0xb8>)
 800bb56:	441a      	add	r2, r3
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	3304      	adds	r3, #4
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4610      	mov	r0, r2
 800bb60:	f7fd ffab 	bl	8009aba <vListInsertEnd>
 800bb64:	e005      	b.n	800bb72 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	3318      	adds	r3, #24
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	480e      	ldr	r0, [pc, #56]	; (800bba8 <xTaskRemoveFromEventList+0xbc>)
 800bb6e:	f7fd ffa4 	bl	8009aba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb76:	4b0d      	ldr	r3, [pc, #52]	; (800bbac <xTaskRemoveFromEventList+0xc0>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d905      	bls.n	800bb8c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bb80:	2301      	movs	r3, #1
 800bb82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bb84:	4b0a      	ldr	r3, [pc, #40]	; (800bbb0 <xTaskRemoveFromEventList+0xc4>)
 800bb86:	2201      	movs	r2, #1
 800bb88:	601a      	str	r2, [r3, #0]
 800bb8a:	e001      	b.n	800bb90 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bb90:	697b      	ldr	r3, [r7, #20]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3718      	adds	r7, #24
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20001dc8 	.word	0x20001dc8
 800bba0:	20001da8 	.word	0x20001da8
 800bba4:	200018d0 	.word	0x200018d0
 800bba8:	20001d60 	.word	0x20001d60
 800bbac:	200018cc 	.word	0x200018cc
 800bbb0:	20001db4 	.word	0x20001db4

0800bbb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bbbc:	4b06      	ldr	r3, [pc, #24]	; (800bbd8 <vTaskInternalSetTimeOutState+0x24>)
 800bbbe:	681a      	ldr	r2, [r3, #0]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bbc4:	4b05      	ldr	r3, [pc, #20]	; (800bbdc <vTaskInternalSetTimeOutState+0x28>)
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	605a      	str	r2, [r3, #4]
}
 800bbcc:	bf00      	nop
 800bbce:	370c      	adds	r7, #12
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr
 800bbd8:	20001db8 	.word	0x20001db8
 800bbdc:	20001da4 	.word	0x20001da4

0800bbe0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b088      	sub	sp, #32
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10a      	bne.n	800bc06 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	613b      	str	r3, [r7, #16]
}
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d10a      	bne.n	800bc22 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc10:	f383 8811 	msr	BASEPRI, r3
 800bc14:	f3bf 8f6f 	isb	sy
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	60fb      	str	r3, [r7, #12]
}
 800bc1e:	bf00      	nop
 800bc20:	e7fe      	b.n	800bc20 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bc22:	f001 fb47 	bl	800d2b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bc26:	4b1d      	ldr	r3, [pc, #116]	; (800bc9c <xTaskCheckForTimeOut+0xbc>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	69ba      	ldr	r2, [r7, #24]
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc3e:	d102      	bne.n	800bc46 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bc40:	2300      	movs	r3, #0
 800bc42:	61fb      	str	r3, [r7, #28]
 800bc44:	e023      	b.n	800bc8e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	4b15      	ldr	r3, [pc, #84]	; (800bca0 <xTaskCheckForTimeOut+0xc0>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d007      	beq.n	800bc62 <xTaskCheckForTimeOut+0x82>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	69ba      	ldr	r2, [r7, #24]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d302      	bcc.n	800bc62 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	61fb      	str	r3, [r7, #28]
 800bc60:	e015      	b.n	800bc8e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	697a      	ldr	r2, [r7, #20]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d20b      	bcs.n	800bc84 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	1ad2      	subs	r2, r2, r3
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7ff ff9b 	bl	800bbb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	61fb      	str	r3, [r7, #28]
 800bc82:	e004      	b.n	800bc8e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	2200      	movs	r2, #0
 800bc88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bc8e:	f001 fb41 	bl	800d314 <vPortExitCritical>

	return xReturn;
 800bc92:	69fb      	ldr	r3, [r7, #28]
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3720      	adds	r7, #32
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	20001da4 	.word	0x20001da4
 800bca0:	20001db8 	.word	0x20001db8

0800bca4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bca4:	b480      	push	{r7}
 800bca6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bca8:	4b03      	ldr	r3, [pc, #12]	; (800bcb8 <vTaskMissedYield+0x14>)
 800bcaa:	2201      	movs	r2, #1
 800bcac:	601a      	str	r2, [r3, #0]
}
 800bcae:	bf00      	nop
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr
 800bcb8:	20001db4 	.word	0x20001db4

0800bcbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b082      	sub	sp, #8
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bcc4:	f000 f852 	bl	800bd6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bcc8:	4b06      	ldr	r3, [pc, #24]	; (800bce4 <prvIdleTask+0x28>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d9f9      	bls.n	800bcc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bcd0:	4b05      	ldr	r3, [pc, #20]	; (800bce8 <prvIdleTask+0x2c>)
 800bcd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcd6:	601a      	str	r2, [r3, #0]
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bce0:	e7f0      	b.n	800bcc4 <prvIdleTask+0x8>
 800bce2:	bf00      	nop
 800bce4:	200018d0 	.word	0x200018d0
 800bce8:	e000ed04 	.word	0xe000ed04

0800bcec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	607b      	str	r3, [r7, #4]
 800bcf6:	e00c      	b.n	800bd12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	4413      	add	r3, r2
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4a12      	ldr	r2, [pc, #72]	; (800bd4c <prvInitialiseTaskLists+0x60>)
 800bd04:	4413      	add	r3, r2
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fd feaa 	bl	8009a60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	3301      	adds	r3, #1
 800bd10:	607b      	str	r3, [r7, #4]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b37      	cmp	r3, #55	; 0x37
 800bd16:	d9ef      	bls.n	800bcf8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd18:	480d      	ldr	r0, [pc, #52]	; (800bd50 <prvInitialiseTaskLists+0x64>)
 800bd1a:	f7fd fea1 	bl	8009a60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bd1e:	480d      	ldr	r0, [pc, #52]	; (800bd54 <prvInitialiseTaskLists+0x68>)
 800bd20:	f7fd fe9e 	bl	8009a60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bd24:	480c      	ldr	r0, [pc, #48]	; (800bd58 <prvInitialiseTaskLists+0x6c>)
 800bd26:	f7fd fe9b 	bl	8009a60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bd2a:	480c      	ldr	r0, [pc, #48]	; (800bd5c <prvInitialiseTaskLists+0x70>)
 800bd2c:	f7fd fe98 	bl	8009a60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bd30:	480b      	ldr	r0, [pc, #44]	; (800bd60 <prvInitialiseTaskLists+0x74>)
 800bd32:	f7fd fe95 	bl	8009a60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bd36:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <prvInitialiseTaskLists+0x78>)
 800bd38:	4a05      	ldr	r2, [pc, #20]	; (800bd50 <prvInitialiseTaskLists+0x64>)
 800bd3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bd3c:	4b0a      	ldr	r3, [pc, #40]	; (800bd68 <prvInitialiseTaskLists+0x7c>)
 800bd3e:	4a05      	ldr	r2, [pc, #20]	; (800bd54 <prvInitialiseTaskLists+0x68>)
 800bd40:	601a      	str	r2, [r3, #0]
}
 800bd42:	bf00      	nop
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	200018d0 	.word	0x200018d0
 800bd50:	20001d30 	.word	0x20001d30
 800bd54:	20001d44 	.word	0x20001d44
 800bd58:	20001d60 	.word	0x20001d60
 800bd5c:	20001d74 	.word	0x20001d74
 800bd60:	20001d8c 	.word	0x20001d8c
 800bd64:	20001d58 	.word	0x20001d58
 800bd68:	20001d5c 	.word	0x20001d5c

0800bd6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b082      	sub	sp, #8
 800bd70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bd72:	e019      	b.n	800bda8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bd74:	f001 fa9e 	bl	800d2b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd78:	4b10      	ldr	r3, [pc, #64]	; (800bdbc <prvCheckTasksWaitingTermination+0x50>)
 800bd7a:	68db      	ldr	r3, [r3, #12]
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	3304      	adds	r3, #4
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7fd fef5 	bl	8009b74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bd8a:	4b0d      	ldr	r3, [pc, #52]	; (800bdc0 <prvCheckTasksWaitingTermination+0x54>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	4a0b      	ldr	r2, [pc, #44]	; (800bdc0 <prvCheckTasksWaitingTermination+0x54>)
 800bd92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bd94:	4b0b      	ldr	r3, [pc, #44]	; (800bdc4 <prvCheckTasksWaitingTermination+0x58>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	3b01      	subs	r3, #1
 800bd9a:	4a0a      	ldr	r2, [pc, #40]	; (800bdc4 <prvCheckTasksWaitingTermination+0x58>)
 800bd9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bd9e:	f001 fab9 	bl	800d314 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f000 f8e4 	bl	800bf70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bda8:	4b06      	ldr	r3, [pc, #24]	; (800bdc4 <prvCheckTasksWaitingTermination+0x58>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1e1      	bne.n	800bd74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bdb0:	bf00      	nop
 800bdb2:	bf00      	nop
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	20001d74 	.word	0x20001d74
 800bdc0:	20001da0 	.word	0x20001da0
 800bdc4:	20001d88 	.word	0x20001d88

0800bdc8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]
 800bdd4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d102      	bne.n	800bde2 <vTaskGetInfo+0x1a>
 800bddc:	4b2c      	ldr	r3, [pc, #176]	; (800be90 <vTaskGetInfo+0xc8>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	e000      	b.n	800bde4 <vTaskGetInfo+0x1c>
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	2200      	movs	r2, #0
 800be1a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 800be1c:	78fb      	ldrb	r3, [r7, #3]
 800be1e:	2b05      	cmp	r3, #5
 800be20:	d01a      	beq.n	800be58 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 800be22:	4b1b      	ldr	r3, [pc, #108]	; (800be90 <vTaskGetInfo+0xc8>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d103      	bne.n	800be34 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	2200      	movs	r2, #0
 800be30:	731a      	strb	r2, [r3, #12]
 800be32:	e018      	b.n	800be66 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	78fa      	ldrb	r2, [r7, #3]
 800be38:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 800be3a:	78fb      	ldrb	r3, [r7, #3]
 800be3c:	2b03      	cmp	r3, #3
 800be3e:	d112      	bne.n	800be66 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 800be40:	f7ff fb9c 	bl	800b57c <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d002      	beq.n	800be52 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	2202      	movs	r2, #2
 800be50:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 800be52:	f7ff fba1 	bl	800b598 <xTaskResumeAll>
 800be56:	e006      	b.n	800be66 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 800be58:	6978      	ldr	r0, [r7, #20]
 800be5a:	f7ff fab9 	bl	800b3d0 <eTaskGetState>
 800be5e:	4603      	mov	r3, r0
 800be60:	461a      	mov	r2, r3
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d009      	beq.n	800be80 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be70:	4618      	mov	r0, r3
 800be72:	f000 f861 	bl	800bf38 <prvTaskCheckFreeStackSpace>
 800be76:	4603      	mov	r3, r0
 800be78:	461a      	mov	r2, r3
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 800be7e:	e002      	b.n	800be86 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	2200      	movs	r2, #0
 800be84:	841a      	strh	r2, [r3, #32]
	}
 800be86:	bf00      	nop
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	200018cc 	.word	0x200018cc

0800be94 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800be94:	b580      	push	{r7, lr}
 800be96:	b08a      	sub	sp, #40	; 0x28
 800be98:	af00      	add	r7, sp, #0
 800be9a:	60f8      	str	r0, [r7, #12]
 800be9c:	60b9      	str	r1, [r7, #8]
 800be9e:	4613      	mov	r3, r2
 800bea0:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 800bea2:	2300      	movs	r3, #0
 800bea4:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d03f      	beq.n	800bf2e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	623b      	str	r3, [r7, #32]
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	685a      	ldr	r2, [r3, #4]
 800beb8:	6a3b      	ldr	r3, [r7, #32]
 800beba:	605a      	str	r2, [r3, #4]
 800bebc:	6a3b      	ldr	r3, [r7, #32]
 800bebe:	685a      	ldr	r2, [r3, #4]
 800bec0:	6a3b      	ldr	r3, [r7, #32]
 800bec2:	3308      	adds	r3, #8
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d104      	bne.n	800bed2 <prvListTasksWithinSingleList+0x3e>
 800bec8:	6a3b      	ldr	r3, [r7, #32]
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	685a      	ldr	r2, [r3, #4]
 800bece:	6a3b      	ldr	r3, [r7, #32]
 800bed0:	605a      	str	r2, [r3, #4]
 800bed2:	6a3b      	ldr	r3, [r7, #32]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	61bb      	str	r3, [r7, #24]
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	685b      	ldr	r3, [r3, #4]
 800bee2:	685a      	ldr	r2, [r3, #4]
 800bee4:	69bb      	ldr	r3, [r7, #24]
 800bee6:	605a      	str	r2, [r3, #4]
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	685a      	ldr	r2, [r3, #4]
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	3308      	adds	r3, #8
 800bef0:	429a      	cmp	r2, r3
 800bef2:	d104      	bne.n	800befe <prvListTasksWithinSingleList+0x6a>
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	685a      	ldr	r2, [r3, #4]
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	605a      	str	r2, [r3, #4]
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800bf06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf08:	4613      	mov	r3, r2
 800bf0a:	00db      	lsls	r3, r3, #3
 800bf0c:	4413      	add	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	461a      	mov	r2, r3
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	1899      	adds	r1, r3, r2
 800bf16:	79fb      	ldrb	r3, [r7, #7]
 800bf18:	2201      	movs	r2, #1
 800bf1a:	6978      	ldr	r0, [r7, #20]
 800bf1c:	f7ff ff54 	bl	800bdc8 <vTaskGetInfo>
				uxTask++;
 800bf20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf22:	3301      	adds	r3, #1
 800bf24:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800bf26:	697a      	ldr	r2, [r7, #20]
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d1d5      	bne.n	800beda <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 800bf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3728      	adds	r7, #40	; 0x28
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800bf40:	2300      	movs	r3, #0
 800bf42:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bf44:	e005      	b.n	800bf52 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	3301      	adds	r3, #1
 800bf4a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	3301      	adds	r3, #1
 800bf50:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	2ba5      	cmp	r3, #165	; 0xa5
 800bf58:	d0f5      	beq.n	800bf46 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	089b      	lsrs	r3, r3, #2
 800bf5e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	b29b      	uxth	r3, r3
	}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3714      	adds	r7, #20
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr

0800bf70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b084      	sub	sp, #16
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	3364      	adds	r3, #100	; 0x64
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f003 fbd9 	bl	800f734 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d108      	bne.n	800bf9e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf90:	4618      	mov	r0, r3
 800bf92:	f001 fb7d 	bl	800d690 <vPortFree>
				vPortFree( pxTCB );
 800bf96:	6878      	ldr	r0, [r7, #4]
 800bf98:	f001 fb7a 	bl	800d690 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf9c:	e018      	b.n	800bfd0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800bfa4:	2b01      	cmp	r3, #1
 800bfa6:	d103      	bne.n	800bfb0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f001 fb71 	bl	800d690 <vPortFree>
	}
 800bfae:	e00f      	b.n	800bfd0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	d00a      	beq.n	800bfd0 <prvDeleteTCB+0x60>
	__asm volatile
 800bfba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfbe:	f383 8811 	msr	BASEPRI, r3
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	60fb      	str	r3, [r7, #12]
}
 800bfcc:	bf00      	nop
 800bfce:	e7fe      	b.n	800bfce <prvDeleteTCB+0x5e>
	}
 800bfd0:	bf00      	nop
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfde:	4b0c      	ldr	r3, [pc, #48]	; (800c010 <prvResetNextTaskUnblockTime+0x38>)
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d104      	bne.n	800bff2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bfe8:	4b0a      	ldr	r3, [pc, #40]	; (800c014 <prvResetNextTaskUnblockTime+0x3c>)
 800bfea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bff0:	e008      	b.n	800c004 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bff2:	4b07      	ldr	r3, [pc, #28]	; (800c010 <prvResetNextTaskUnblockTime+0x38>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	685b      	ldr	r3, [r3, #4]
 800c000:	4a04      	ldr	r2, [pc, #16]	; (800c014 <prvResetNextTaskUnblockTime+0x3c>)
 800c002:	6013      	str	r3, [r2, #0]
}
 800c004:	bf00      	nop
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr
 800c010:	20001d58 	.word	0x20001d58
 800c014:	20001dc0 	.word	0x20001dc0

0800c018 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800c01e:	4b05      	ldr	r3, [pc, #20]	; (800c034 <xTaskGetCurrentTaskHandle+0x1c>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	607b      	str	r3, [r7, #4]

		return xReturn;
 800c024:	687b      	ldr	r3, [r7, #4]
	}
 800c026:	4618      	mov	r0, r3
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	200018cc 	.word	0x200018cc

0800c038 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c03e:	4b0b      	ldr	r3, [pc, #44]	; (800c06c <xTaskGetSchedulerState+0x34>)
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d102      	bne.n	800c04c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c046:	2301      	movs	r3, #1
 800c048:	607b      	str	r3, [r7, #4]
 800c04a:	e008      	b.n	800c05e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c04c:	4b08      	ldr	r3, [pc, #32]	; (800c070 <xTaskGetSchedulerState+0x38>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d102      	bne.n	800c05a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c054:	2302      	movs	r3, #2
 800c056:	607b      	str	r3, [r7, #4]
 800c058:	e001      	b.n	800c05e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c05a:	2300      	movs	r3, #0
 800c05c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c05e:	687b      	ldr	r3, [r7, #4]
	}
 800c060:	4618      	mov	r0, r3
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr
 800c06c:	20001dac 	.word	0x20001dac
 800c070:	20001dc8 	.word	0x20001dc8

0800c074 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c080:	2300      	movs	r3, #0
 800c082:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d051      	beq.n	800c12e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08e:	4b2a      	ldr	r3, [pc, #168]	; (800c138 <xTaskPriorityInherit+0xc4>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c094:	429a      	cmp	r2, r3
 800c096:	d241      	bcs.n	800c11c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	699b      	ldr	r3, [r3, #24]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	db06      	blt.n	800c0ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0a0:	4b25      	ldr	r3, [pc, #148]	; (800c138 <xTaskPriorityInherit+0xc4>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	6959      	ldr	r1, [r3, #20]
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	009b      	lsls	r3, r3, #2
 800c0ba:	4413      	add	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4a1f      	ldr	r2, [pc, #124]	; (800c13c <xTaskPriorityInherit+0xc8>)
 800c0c0:	4413      	add	r3, r2
 800c0c2:	4299      	cmp	r1, r3
 800c0c4:	d122      	bne.n	800c10c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7fd fd52 	bl	8009b74 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c0d0:	4b19      	ldr	r3, [pc, #100]	; (800c138 <xTaskPriorityInherit+0xc4>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0de:	4b18      	ldr	r3, [pc, #96]	; (800c140 <xTaskPriorityInherit+0xcc>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d903      	bls.n	800c0ee <xTaskPriorityInherit+0x7a>
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ea:	4a15      	ldr	r2, [pc, #84]	; (800c140 <xTaskPriorityInherit+0xcc>)
 800c0ec:	6013      	str	r3, [r2, #0]
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f2:	4613      	mov	r3, r2
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4413      	add	r3, r2
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	4a10      	ldr	r2, [pc, #64]	; (800c13c <xTaskPriorityInherit+0xc8>)
 800c0fc:	441a      	add	r2, r3
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	3304      	adds	r3, #4
 800c102:	4619      	mov	r1, r3
 800c104:	4610      	mov	r0, r2
 800c106:	f7fd fcd8 	bl	8009aba <vListInsertEnd>
 800c10a:	e004      	b.n	800c116 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c10c:	4b0a      	ldr	r3, [pc, #40]	; (800c138 <xTaskPriorityInherit+0xc4>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c116:	2301      	movs	r3, #1
 800c118:	60fb      	str	r3, [r7, #12]
 800c11a:	e008      	b.n	800c12e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c120:	4b05      	ldr	r3, [pc, #20]	; (800c138 <xTaskPriorityInherit+0xc4>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c126:	429a      	cmp	r2, r3
 800c128:	d201      	bcs.n	800c12e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c12a:	2301      	movs	r3, #1
 800c12c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c12e:	68fb      	ldr	r3, [r7, #12]
	}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}
 800c138:	200018cc 	.word	0x200018cc
 800c13c:	200018d0 	.word	0x200018d0
 800c140:	20001da8 	.word	0x20001da8

0800c144 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c150:	2300      	movs	r3, #0
 800c152:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d056      	beq.n	800c208 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c15a:	4b2e      	ldr	r3, [pc, #184]	; (800c214 <xTaskPriorityDisinherit+0xd0>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	693a      	ldr	r2, [r7, #16]
 800c160:	429a      	cmp	r2, r3
 800c162:	d00a      	beq.n	800c17a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	60fb      	str	r3, [r7, #12]
}
 800c176:	bf00      	nop
 800c178:	e7fe      	b.n	800c178 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10a      	bne.n	800c198 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c182:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	60bb      	str	r3, [r7, #8]
}
 800c194:	bf00      	nop
 800c196:	e7fe      	b.n	800c196 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c19c:	1e5a      	subs	r2, r3, #1
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	d02c      	beq.n	800c208 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d128      	bne.n	800c208 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fd fcda 	bl	8009b74 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d8:	4b0f      	ldr	r3, [pc, #60]	; (800c218 <xTaskPriorityDisinherit+0xd4>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	d903      	bls.n	800c1e8 <xTaskPriorityDisinherit+0xa4>
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e4:	4a0c      	ldr	r2, [pc, #48]	; (800c218 <xTaskPriorityDisinherit+0xd4>)
 800c1e6:	6013      	str	r3, [r2, #0]
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4a09      	ldr	r2, [pc, #36]	; (800c21c <xTaskPriorityDisinherit+0xd8>)
 800c1f6:	441a      	add	r2, r3
 800c1f8:	693b      	ldr	r3, [r7, #16]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	4610      	mov	r0, r2
 800c200:	f7fd fc5b 	bl	8009aba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c204:	2301      	movs	r3, #1
 800c206:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c208:	697b      	ldr	r3, [r7, #20]
	}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3718      	adds	r7, #24
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}
 800c212:	bf00      	nop
 800c214:	200018cc 	.word	0x200018cc
 800c218:	20001da8 	.word	0x20001da8
 800c21c:	200018d0 	.word	0x200018d0

0800c220 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c220:	b580      	push	{r7, lr}
 800c222:	b088      	sub	sp, #32
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c22e:	2301      	movs	r3, #1
 800c230:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d06a      	beq.n	800c30e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c238:	69bb      	ldr	r3, [r7, #24]
 800c23a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10a      	bne.n	800c256 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	60fb      	str	r3, [r7, #12]
}
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c25a:	683a      	ldr	r2, [r7, #0]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d902      	bls.n	800c266 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	61fb      	str	r3, [r7, #28]
 800c264:	e002      	b.n	800c26c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c266:	69bb      	ldr	r3, [r7, #24]
 800c268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c26a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c270:	69fa      	ldr	r2, [r7, #28]
 800c272:	429a      	cmp	r2, r3
 800c274:	d04b      	beq.n	800c30e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c27a:	697a      	ldr	r2, [r7, #20]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d146      	bne.n	800c30e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c280:	4b25      	ldr	r3, [pc, #148]	; (800c318 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	69ba      	ldr	r2, [r7, #24]
 800c286:	429a      	cmp	r2, r3
 800c288:	d10a      	bne.n	800c2a0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28e:	f383 8811 	msr	BASEPRI, r3
 800c292:	f3bf 8f6f 	isb	sy
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	60bb      	str	r3, [r7, #8]
}
 800c29c:	bf00      	nop
 800c29e:	e7fe      	b.n	800c29e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	69fa      	ldr	r2, [r7, #28]
 800c2aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	db04      	blt.n	800c2be <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c2be:	69bb      	ldr	r3, [r7, #24]
 800c2c0:	6959      	ldr	r1, [r3, #20]
 800c2c2:	693a      	ldr	r2, [r7, #16]
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	4413      	add	r3, r2
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4a13      	ldr	r2, [pc, #76]	; (800c31c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c2ce:	4413      	add	r3, r2
 800c2d0:	4299      	cmp	r1, r3
 800c2d2:	d11c      	bne.n	800c30e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7fd fc4b 	bl	8009b74 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c2de:	69bb      	ldr	r3, [r7, #24]
 800c2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2e2:	4b0f      	ldr	r3, [pc, #60]	; (800c320 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	d903      	bls.n	800c2f2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c2ea:	69bb      	ldr	r3, [r7, #24]
 800c2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ee:	4a0c      	ldr	r2, [pc, #48]	; (800c320 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c2f0:	6013      	str	r3, [r2, #0]
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	4413      	add	r3, r2
 800c2fc:	009b      	lsls	r3, r3, #2
 800c2fe:	4a07      	ldr	r2, [pc, #28]	; (800c31c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c300:	441a      	add	r2, r3
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	3304      	adds	r3, #4
 800c306:	4619      	mov	r1, r3
 800c308:	4610      	mov	r0, r2
 800c30a:	f7fd fbd6 	bl	8009aba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c30e:	bf00      	nop
 800c310:	3720      	adds	r7, #32
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	200018cc 	.word	0x200018cc
 800c31c:	200018d0 	.word	0x200018d0
 800c320:	20001da8 	.word	0x20001da8

0800c324 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800c32e:	6839      	ldr	r1, [r7, #0]
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f003 fa8b 	bl	800f84c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f7f3 ffbc 	bl	80002b4 <strlen>
 800c33c:	60f8      	str	r0, [r7, #12]
 800c33e:	e007      	b.n	800c350 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	4413      	add	r3, r2
 800c346:	2220      	movs	r2, #32
 800c348:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	3301      	adds	r3, #1
 800c34e:	60fb      	str	r3, [r7, #12]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	2b1e      	cmp	r3, #30
 800c354:	d9f4      	bls.n	800c340 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	4413      	add	r3, r2
 800c35c:	2200      	movs	r2, #0
 800c35e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	4413      	add	r3, r2
	}
 800c366:	4618      	mov	r0, r3
 800c368:	3710      	adds	r7, #16
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
	...

0800c370 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 800c370:	b590      	push	{r4, r7, lr}
 800c372:	b089      	sub	sp, #36	; 0x24
 800c374:	af02      	add	r7, sp, #8
 800c376:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800c37e:	4b45      	ldr	r3, [pc, #276]	; (800c494 <vTaskList+0x124>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 800c384:	4b43      	ldr	r3, [pc, #268]	; (800c494 <vTaskList+0x124>)
 800c386:	681a      	ldr	r2, [r3, #0]
 800c388:	4613      	mov	r3, r2
 800c38a:	00db      	lsls	r3, r3, #3
 800c38c:	4413      	add	r3, r2
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	4618      	mov	r0, r3
 800c392:	f001 f8b1 	bl	800d4f8 <pvPortMalloc>
 800c396:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d076      	beq.n	800c48c <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800c39e:	2200      	movs	r2, #0
 800c3a0:	68f9      	ldr	r1, [r7, #12]
 800c3a2:	68b8      	ldr	r0, [r7, #8]
 800c3a4:	f7ff f9a6 	bl	800b6f4 <uxTaskGetSystemState>
 800c3a8:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	617b      	str	r3, [r7, #20]
 800c3ae:	e066      	b.n	800c47e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800c3b0:	697a      	ldr	r2, [r7, #20]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	00db      	lsls	r3, r3, #3
 800c3b6:	4413      	add	r3, r2
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	68bb      	ldr	r3, [r7, #8]
 800c3be:	4413      	add	r3, r2
 800c3c0:	7b1b      	ldrb	r3, [r3, #12]
 800c3c2:	2b04      	cmp	r3, #4
 800c3c4:	d81b      	bhi.n	800c3fe <vTaskList+0x8e>
 800c3c6:	a201      	add	r2, pc, #4	; (adr r2, 800c3cc <vTaskList+0x5c>)
 800c3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3cc:	0800c3e1 	.word	0x0800c3e1
 800c3d0:	0800c3e7 	.word	0x0800c3e7
 800c3d4:	0800c3ed 	.word	0x0800c3ed
 800c3d8:	0800c3f3 	.word	0x0800c3f3
 800c3dc:	0800c3f9 	.word	0x0800c3f9
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800c3e0:	2358      	movs	r3, #88	; 0x58
 800c3e2:	74fb      	strb	r3, [r7, #19]
										break;
 800c3e4:	e00e      	b.n	800c404 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 800c3e6:	2352      	movs	r3, #82	; 0x52
 800c3e8:	74fb      	strb	r3, [r7, #19]
										break;
 800c3ea:	e00b      	b.n	800c404 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800c3ec:	2342      	movs	r3, #66	; 0x42
 800c3ee:	74fb      	strb	r3, [r7, #19]
										break;
 800c3f0:	e008      	b.n	800c404 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800c3f2:	2353      	movs	r3, #83	; 0x53
 800c3f4:	74fb      	strb	r3, [r7, #19]
										break;
 800c3f6:	e005      	b.n	800c404 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 800c3f8:	2344      	movs	r3, #68	; 0x44
 800c3fa:	74fb      	strb	r3, [r7, #19]
										break;
 800c3fc:	e002      	b.n	800c404 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800c3fe:	2300      	movs	r3, #0
 800c400:	74fb      	strb	r3, [r7, #19]
										break;
 800c402:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 800c404:	697a      	ldr	r2, [r7, #20]
 800c406:	4613      	mov	r3, r2
 800c408:	00db      	lsls	r3, r3, #3
 800c40a:	4413      	add	r3, r2
 800c40c:	009b      	lsls	r3, r3, #2
 800c40e:	461a      	mov	r2, r3
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	4413      	add	r3, r2
 800c414:	685b      	ldr	r3, [r3, #4]
 800c416:	4619      	mov	r1, r3
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f7ff ff83 	bl	800c324 <prvWriteNameToBuffer>
 800c41e:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800c420:	7cf9      	ldrb	r1, [r7, #19]
 800c422:	697a      	ldr	r2, [r7, #20]
 800c424:	4613      	mov	r3, r2
 800c426:	00db      	lsls	r3, r3, #3
 800c428:	4413      	add	r3, r2
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	461a      	mov	r2, r3
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	4413      	add	r3, r2
 800c432:	6918      	ldr	r0, [r3, #16]
 800c434:	697a      	ldr	r2, [r7, #20]
 800c436:	4613      	mov	r3, r2
 800c438:	00db      	lsls	r3, r3, #3
 800c43a:	4413      	add	r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	461a      	mov	r2, r3
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	4413      	add	r3, r2
 800c444:	8c1b      	ldrh	r3, [r3, #32]
 800c446:	461c      	mov	r4, r3
 800c448:	697a      	ldr	r2, [r7, #20]
 800c44a:	4613      	mov	r3, r2
 800c44c:	00db      	lsls	r3, r3, #3
 800c44e:	4413      	add	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	461a      	mov	r2, r3
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	4413      	add	r3, r2
 800c458:	689b      	ldr	r3, [r3, #8]
 800c45a:	9301      	str	r3, [sp, #4]
 800c45c:	9400      	str	r4, [sp, #0]
 800c45e:	4603      	mov	r3, r0
 800c460:	460a      	mov	r2, r1
 800c462:	490d      	ldr	r1, [pc, #52]	; (800c498 <vTaskList+0x128>)
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f003 f9d1 	bl	800f80c <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f7f3 ff22 	bl	80002b4 <strlen>
 800c470:	4602      	mov	r2, r0
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4413      	add	r3, r2
 800c476:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	3301      	adds	r3, #1
 800c47c:	617b      	str	r3, [r7, #20]
 800c47e:	697a      	ldr	r2, [r7, #20]
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	429a      	cmp	r2, r3
 800c484:	d394      	bcc.n	800c3b0 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 800c486:	68b8      	ldr	r0, [r7, #8]
 800c488:	f001 f902 	bl	800d690 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c48c:	bf00      	nop
 800c48e:	371c      	adds	r7, #28
 800c490:	46bd      	mov	sp, r7
 800c492:	bd90      	pop	{r4, r7, pc}
 800c494:	20001da0 	.word	0x20001da0
 800c498:	08010804 	.word	0x08010804

0800c49c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c49c:	b480      	push	{r7}
 800c49e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c4a0:	4b07      	ldr	r3, [pc, #28]	; (800c4c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d004      	beq.n	800c4b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c4a8:	4b05      	ldr	r3, [pc, #20]	; (800c4c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c4ae:	3201      	adds	r2, #1
 800c4b0:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 800c4b2:	4b03      	ldr	r3, [pc, #12]	; (800c4c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
	}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr
 800c4c0:	200018cc 	.word	0x200018cc

0800c4c4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b086      	sub	sp, #24
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
 800c4d0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c4d2:	f000 feef 	bl	800d2b4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c4d6:	4b29      	ldr	r3, [pc, #164]	; (800c57c <xTaskNotifyWait+0xb8>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d01c      	beq.n	800c51e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c4e4:	4b25      	ldr	r3, [pc, #148]	; (800c57c <xTaskNotifyWait+0xb8>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	43d2      	mvns	r2, r2
 800c4f0:	400a      	ands	r2, r1
 800c4f2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c4f6:	4b21      	ldr	r3, [pc, #132]	; (800c57c <xTaskNotifyWait+0xb8>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

				if( xTicksToWait > ( TickType_t ) 0 )
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00b      	beq.n	800c51e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c506:	2101      	movs	r1, #1
 800c508:	6838      	ldr	r0, [r7, #0]
 800c50a:	f000 fa03 	bl	800c914 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c50e:	4b1c      	ldr	r3, [pc, #112]	; (800c580 <xTaskNotifyWait+0xbc>)
 800c510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c514:	601a      	str	r2, [r3, #0]
 800c516:	f3bf 8f4f 	dsb	sy
 800c51a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c51e:	f000 fef9 	bl	800d314 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c522:	f000 fec7 	bl	800d2b4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d005      	beq.n	800c538 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c52c:	4b13      	ldr	r3, [pc, #76]	; (800c57c <xTaskNotifyWait+0xb8>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c538:	4b10      	ldr	r3, [pc, #64]	; (800c57c <xTaskNotifyWait+0xb8>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800c540:	b2db      	uxtb	r3, r3
 800c542:	2b02      	cmp	r3, #2
 800c544:	d002      	beq.n	800c54c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c546:	2300      	movs	r3, #0
 800c548:	617b      	str	r3, [r7, #20]
 800c54a:	e00a      	b.n	800c562 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c54c:	4b0b      	ldr	r3, [pc, #44]	; (800c57c <xTaskNotifyWait+0xb8>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	43d2      	mvns	r2, r2
 800c558:	400a      	ands	r2, r1
 800c55a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				xReturn = pdTRUE;
 800c55e:	2301      	movs	r3, #1
 800c560:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c562:	4b06      	ldr	r3, [pc, #24]	; (800c57c <xTaskNotifyWait+0xb8>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2200      	movs	r2, #0
 800c568:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		}
		taskEXIT_CRITICAL();
 800c56c:	f000 fed2 	bl	800d314 <vPortExitCritical>

		return xReturn;
 800c570:	697b      	ldr	r3, [r7, #20]
	}
 800c572:	4618      	mov	r0, r3
 800c574:	3718      	adds	r7, #24
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	200018cc 	.word	0x200018cc
 800c580:	e000ed04 	.word	0xe000ed04

0800c584 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c584:	b580      	push	{r7, lr}
 800c586:	b08a      	sub	sp, #40	; 0x28
 800c588:	af00      	add	r7, sp, #0
 800c58a:	60f8      	str	r0, [r7, #12]
 800c58c:	60b9      	str	r1, [r7, #8]
 800c58e:	603b      	str	r3, [r7, #0]
 800c590:	4613      	mov	r3, r2
 800c592:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c594:	2301      	movs	r3, #1
 800c596:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d10a      	bne.n	800c5b4 <xTaskGenericNotify+0x30>
	__asm volatile
 800c59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	61bb      	str	r3, [r7, #24]
}
 800c5b0:	bf00      	nop
 800c5b2:	e7fe      	b.n	800c5b2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c5b8:	f000 fe7c 	bl	800d2b4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d004      	beq.n	800c5cc <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c5c2:	6a3b      	ldr	r3, [r7, #32]
 800c5c4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c5cc:	6a3b      	ldr	r3, [r7, #32]
 800c5ce:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800c5d2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	2202      	movs	r2, #2
 800c5d8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 800c5dc:	79fb      	ldrb	r3, [r7, #7]
 800c5de:	2b04      	cmp	r3, #4
 800c5e0:	d82d      	bhi.n	800c63e <xTaskGenericNotify+0xba>
 800c5e2:	a201      	add	r2, pc, #4	; (adr r2, 800c5e8 <xTaskGenericNotify+0x64>)
 800c5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e8:	0800c661 	.word	0x0800c661
 800c5ec:	0800c5fd 	.word	0x0800c5fd
 800c5f0:	0800c60f 	.word	0x0800c60f
 800c5f4:	0800c61f 	.word	0x0800c61f
 800c5f8:	0800c629 	.word	0x0800c629
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
 800c5fe:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	431a      	orrs	r2, r3
 800c606:	6a3b      	ldr	r3, [r7, #32]
 800c608:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800c60c:	e02b      	b.n	800c666 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c60e:	6a3b      	ldr	r3, [r7, #32]
 800c610:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c614:	1c5a      	adds	r2, r3, #1
 800c616:	6a3b      	ldr	r3, [r7, #32]
 800c618:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800c61c:	e023      	b.n	800c666 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c61e:	6a3b      	ldr	r3, [r7, #32]
 800c620:	68ba      	ldr	r2, [r7, #8]
 800c622:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800c626:	e01e      	b.n	800c666 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c628:	7ffb      	ldrb	r3, [r7, #31]
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d004      	beq.n	800c638 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c62e:	6a3b      	ldr	r3, [r7, #32]
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c636:	e016      	b.n	800c666 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800c638:	2300      	movs	r3, #0
 800c63a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c63c:	e013      	b.n	800c666 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c63e:	6a3b      	ldr	r3, [r7, #32]
 800c640:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c648:	d00c      	beq.n	800c664 <xTaskGenericNotify+0xe0>
	__asm volatile
 800c64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64e:	f383 8811 	msr	BASEPRI, r3
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	617b      	str	r3, [r7, #20]
}
 800c65c:	bf00      	nop
 800c65e:	e7fe      	b.n	800c65e <xTaskGenericNotify+0xda>
					break;
 800c660:	bf00      	nop
 800c662:	e000      	b.n	800c666 <xTaskGenericNotify+0xe2>

					break;
 800c664:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c666:	7ffb      	ldrb	r3, [r7, #31]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d13a      	bne.n	800c6e2 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c66c:	6a3b      	ldr	r3, [r7, #32]
 800c66e:	3304      	adds	r3, #4
 800c670:	4618      	mov	r0, r3
 800c672:	f7fd fa7f 	bl	8009b74 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c676:	6a3b      	ldr	r3, [r7, #32]
 800c678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67a:	4b1d      	ldr	r3, [pc, #116]	; (800c6f0 <xTaskGenericNotify+0x16c>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	429a      	cmp	r2, r3
 800c680:	d903      	bls.n	800c68a <xTaskGenericNotify+0x106>
 800c682:	6a3b      	ldr	r3, [r7, #32]
 800c684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c686:	4a1a      	ldr	r2, [pc, #104]	; (800c6f0 <xTaskGenericNotify+0x16c>)
 800c688:	6013      	str	r3, [r2, #0]
 800c68a:	6a3b      	ldr	r3, [r7, #32]
 800c68c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c68e:	4613      	mov	r3, r2
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	4a17      	ldr	r2, [pc, #92]	; (800c6f4 <xTaskGenericNotify+0x170>)
 800c698:	441a      	add	r2, r3
 800c69a:	6a3b      	ldr	r3, [r7, #32]
 800c69c:	3304      	adds	r3, #4
 800c69e:	4619      	mov	r1, r3
 800c6a0:	4610      	mov	r0, r2
 800c6a2:	f7fd fa0a 	bl	8009aba <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c6a6:	6a3b      	ldr	r3, [r7, #32]
 800c6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00a      	beq.n	800c6c4 <xTaskGenericNotify+0x140>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	613b      	str	r3, [r7, #16]
}
 800c6c0:	bf00      	nop
 800c6c2:	e7fe      	b.n	800c6c2 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c6c4:	6a3b      	ldr	r3, [r7, #32]
 800c6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c8:	4b0b      	ldr	r3, [pc, #44]	; (800c6f8 <xTaskGenericNotify+0x174>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d907      	bls.n	800c6e2 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c6d2:	4b0a      	ldr	r3, [pc, #40]	; (800c6fc <xTaskGenericNotify+0x178>)
 800c6d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d8:	601a      	str	r2, [r3, #0]
 800c6da:	f3bf 8f4f 	dsb	sy
 800c6de:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c6e2:	f000 fe17 	bl	800d314 <vPortExitCritical>

		return xReturn;
 800c6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3728      	adds	r7, #40	; 0x28
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	20001da8 	.word	0x20001da8
 800c6f4:	200018d0 	.word	0x200018d0
 800c6f8:	200018cc 	.word	0x200018cc
 800c6fc:	e000ed04 	.word	0xe000ed04

0800c700 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c700:	b580      	push	{r7, lr}
 800c702:	b08e      	sub	sp, #56	; 0x38
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	603b      	str	r3, [r7, #0]
 800c70c:	4613      	mov	r3, r2
 800c70e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c710:	2301      	movs	r3, #1
 800c712:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d10a      	bne.n	800c730 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71e:	f383 8811 	msr	BASEPRI, r3
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	f3bf 8f4f 	dsb	sy
 800c72a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c72c:	bf00      	nop
 800c72e:	e7fe      	b.n	800c72e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c730:	f000 fea2 	bl	800d478 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c738:	f3ef 8211 	mrs	r2, BASEPRI
 800c73c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c740:	f383 8811 	msr	BASEPRI, r3
 800c744:	f3bf 8f6f 	isb	sy
 800c748:	f3bf 8f4f 	dsb	sy
 800c74c:	623a      	str	r2, [r7, #32]
 800c74e:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c750:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c752:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d004      	beq.n	800c764 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c766:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800c76a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c770:	2202      	movs	r2, #2
 800c772:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 800c776:	79fb      	ldrb	r3, [r7, #7]
 800c778:	2b04      	cmp	r3, #4
 800c77a:	d82f      	bhi.n	800c7dc <xTaskGenericNotifyFromISR+0xdc>
 800c77c:	a201      	add	r2, pc, #4	; (adr r2, 800c784 <xTaskGenericNotifyFromISR+0x84>)
 800c77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c782:	bf00      	nop
 800c784:	0800c7ff 	.word	0x0800c7ff
 800c788:	0800c799 	.word	0x0800c799
 800c78c:	0800c7ab 	.word	0x0800c7ab
 800c790:	0800c7bb 	.word	0x0800c7bb
 800c794:	0800c7c5 	.word	0x0800c7c5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	431a      	orrs	r2, r3
 800c7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800c7a8:	e02c      	b.n	800c804 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c7b0:	1c5a      	adds	r2, r3, #1
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800c7b8:	e024      	b.n	800c804 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 800c7c2:	e01f      	b.n	800c804 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c7c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d004      	beq.n	800c7d6 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c7d4:	e016      	b.n	800c804 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c7da:	e013      	b.n	800c804 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800c7e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7e6:	d00c      	beq.n	800c802 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800c7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ec:	f383 8811 	msr	BASEPRI, r3
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	f3bf 8f4f 	dsb	sy
 800c7f8:	61bb      	str	r3, [r7, #24]
}
 800c7fa:	bf00      	nop
 800c7fc:	e7fe      	b.n	800c7fc <xTaskGenericNotifyFromISR+0xfc>
					break;
 800c7fe:	bf00      	nop
 800c800:	e000      	b.n	800c804 <xTaskGenericNotifyFromISR+0x104>
					break;
 800c802:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c804:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d146      	bne.n	800c89a <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c810:	2b00      	cmp	r3, #0
 800c812:	d00a      	beq.n	800c82a <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800c814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c818:	f383 8811 	msr	BASEPRI, r3
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	f3bf 8f4f 	dsb	sy
 800c824:	617b      	str	r3, [r7, #20]
}
 800c826:	bf00      	nop
 800c828:	e7fe      	b.n	800c828 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c82a:	4b21      	ldr	r3, [pc, #132]	; (800c8b0 <xTaskGenericNotifyFromISR+0x1b0>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d11d      	bne.n	800c86e <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c834:	3304      	adds	r3, #4
 800c836:	4618      	mov	r0, r3
 800c838:	f7fd f99c 	bl	8009b74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c840:	4b1c      	ldr	r3, [pc, #112]	; (800c8b4 <xTaskGenericNotifyFromISR+0x1b4>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	429a      	cmp	r2, r3
 800c846:	d903      	bls.n	800c850 <xTaskGenericNotifyFromISR+0x150>
 800c848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84c:	4a19      	ldr	r2, [pc, #100]	; (800c8b4 <xTaskGenericNotifyFromISR+0x1b4>)
 800c84e:	6013      	str	r3, [r2, #0]
 800c850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c854:	4613      	mov	r3, r2
 800c856:	009b      	lsls	r3, r3, #2
 800c858:	4413      	add	r3, r2
 800c85a:	009b      	lsls	r3, r3, #2
 800c85c:	4a16      	ldr	r2, [pc, #88]	; (800c8b8 <xTaskGenericNotifyFromISR+0x1b8>)
 800c85e:	441a      	add	r2, r3
 800c860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c862:	3304      	adds	r3, #4
 800c864:	4619      	mov	r1, r3
 800c866:	4610      	mov	r0, r2
 800c868:	f7fd f927 	bl	8009aba <vListInsertEnd>
 800c86c:	e005      	b.n	800c87a <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c870:	3318      	adds	r3, #24
 800c872:	4619      	mov	r1, r3
 800c874:	4811      	ldr	r0, [pc, #68]	; (800c8bc <xTaskGenericNotifyFromISR+0x1bc>)
 800c876:	f7fd f920 	bl	8009aba <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c87c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c87e:	4b10      	ldr	r3, [pc, #64]	; (800c8c0 <xTaskGenericNotifyFromISR+0x1c0>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c884:	429a      	cmp	r2, r3
 800c886:	d908      	bls.n	800c89a <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c888:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d002      	beq.n	800c894 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c890:	2201      	movs	r2, #1
 800c892:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c894:	4b0b      	ldr	r3, [pc, #44]	; (800c8c4 <xTaskGenericNotifyFromISR+0x1c4>)
 800c896:	2201      	movs	r2, #1
 800c898:	601a      	str	r2, [r3, #0]
 800c89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	f383 8811 	msr	BASEPRI, r3
}
 800c8a4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3738      	adds	r7, #56	; 0x38
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	20001dc8 	.word	0x20001dc8
 800c8b4:	20001da8 	.word	0x20001da8
 800c8b8:	200018d0 	.word	0x200018d0
 800c8bc:	20001d60 	.word	0x20001d60
 800c8c0:	200018cc 	.word	0x200018cc
 800c8c4:	20001db4 	.word	0x20001db4

0800c8c8 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d102      	bne.n	800c8dc <xTaskNotifyStateClear+0x14>
 800c8d6:	4b0e      	ldr	r3, [pc, #56]	; (800c910 <xTaskNotifyStateClear+0x48>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	e000      	b.n	800c8de <xTaskNotifyStateClear+0x16>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800c8e0:	f000 fce8 	bl	800d2b4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	2b02      	cmp	r3, #2
 800c8ee:	d106      	bne.n	800c8fe <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				xReturn = pdPASS;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	60fb      	str	r3, [r7, #12]
 800c8fc:	e001      	b.n	800c902 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800c8fe:	2300      	movs	r3, #0
 800c900:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800c902:	f000 fd07 	bl	800d314 <vPortExitCritical>

		return xReturn;
 800c906:	68fb      	ldr	r3, [r7, #12]
	}
 800c908:	4618      	mov	r0, r3
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	200018cc 	.word	0x200018cc

0800c914 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c91e:	4b21      	ldr	r3, [pc, #132]	; (800c9a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c924:	4b20      	ldr	r3, [pc, #128]	; (800c9a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	3304      	adds	r3, #4
 800c92a:	4618      	mov	r0, r3
 800c92c:	f7fd f922 	bl	8009b74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c936:	d10a      	bne.n	800c94e <prvAddCurrentTaskToDelayedList+0x3a>
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d007      	beq.n	800c94e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c93e:	4b1a      	ldr	r3, [pc, #104]	; (800c9a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	3304      	adds	r3, #4
 800c944:	4619      	mov	r1, r3
 800c946:	4819      	ldr	r0, [pc, #100]	; (800c9ac <prvAddCurrentTaskToDelayedList+0x98>)
 800c948:	f7fd f8b7 	bl	8009aba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c94c:	e026      	b.n	800c99c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c94e:	68fa      	ldr	r2, [r7, #12]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4413      	add	r3, r2
 800c954:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c956:	4b14      	ldr	r3, [pc, #80]	; (800c9a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	68ba      	ldr	r2, [r7, #8]
 800c95c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c95e:	68ba      	ldr	r2, [r7, #8]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	429a      	cmp	r2, r3
 800c964:	d209      	bcs.n	800c97a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c966:	4b12      	ldr	r3, [pc, #72]	; (800c9b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	4b0f      	ldr	r3, [pc, #60]	; (800c9a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	3304      	adds	r3, #4
 800c970:	4619      	mov	r1, r3
 800c972:	4610      	mov	r0, r2
 800c974:	f7fd f8c5 	bl	8009b02 <vListInsert>
}
 800c978:	e010      	b.n	800c99c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c97a:	4b0e      	ldr	r3, [pc, #56]	; (800c9b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	4b0a      	ldr	r3, [pc, #40]	; (800c9a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	3304      	adds	r3, #4
 800c984:	4619      	mov	r1, r3
 800c986:	4610      	mov	r0, r2
 800c988:	f7fd f8bb 	bl	8009b02 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c98c:	4b0a      	ldr	r3, [pc, #40]	; (800c9b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	68ba      	ldr	r2, [r7, #8]
 800c992:	429a      	cmp	r2, r3
 800c994:	d202      	bcs.n	800c99c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c996:	4a08      	ldr	r2, [pc, #32]	; (800c9b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	6013      	str	r3, [r2, #0]
}
 800c99c:	bf00      	nop
 800c99e:	3710      	adds	r7, #16
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	20001da4 	.word	0x20001da4
 800c9a8:	200018cc 	.word	0x200018cc
 800c9ac:	20001d8c 	.word	0x20001d8c
 800c9b0:	20001d5c 	.word	0x20001d5c
 800c9b4:	20001d58 	.word	0x20001d58
 800c9b8:	20001dc0 	.word	0x20001dc0

0800c9bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b08a      	sub	sp, #40	; 0x28
 800c9c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c9c6:	f000 fb07 	bl	800cfd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c9ca:	4b1c      	ldr	r3, [pc, #112]	; (800ca3c <xTimerCreateTimerTask+0x80>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d021      	beq.n	800ca16 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c9da:	1d3a      	adds	r2, r7, #4
 800c9dc:	f107 0108 	add.w	r1, r7, #8
 800c9e0:	f107 030c 	add.w	r3, r7, #12
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fd f821 	bl	8009a2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c9ea:	6879      	ldr	r1, [r7, #4]
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	68fa      	ldr	r2, [r7, #12]
 800c9f0:	9202      	str	r2, [sp, #8]
 800c9f2:	9301      	str	r3, [sp, #4]
 800c9f4:	2302      	movs	r3, #2
 800c9f6:	9300      	str	r3, [sp, #0]
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	460a      	mov	r2, r1
 800c9fc:	4910      	ldr	r1, [pc, #64]	; (800ca40 <xTimerCreateTimerTask+0x84>)
 800c9fe:	4811      	ldr	r0, [pc, #68]	; (800ca44 <xTimerCreateTimerTask+0x88>)
 800ca00:	f7fe fafa 	bl	800aff8 <xTaskCreateStatic>
 800ca04:	4603      	mov	r3, r0
 800ca06:	4a10      	ldr	r2, [pc, #64]	; (800ca48 <xTimerCreateTimerTask+0x8c>)
 800ca08:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ca0a:	4b0f      	ldr	r3, [pc, #60]	; (800ca48 <xTimerCreateTimerTask+0x8c>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d001      	beq.n	800ca16 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca12:	2301      	movs	r3, #1
 800ca14:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10a      	bne.n	800ca32 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	613b      	str	r3, [r7, #16]
}
 800ca2e:	bf00      	nop
 800ca30:	e7fe      	b.n	800ca30 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ca32:	697b      	ldr	r3, [r7, #20]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3718      	adds	r7, #24
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}
 800ca3c:	20001dfc 	.word	0x20001dfc
 800ca40:	08010814 	.word	0x08010814
 800ca44:	0800cb81 	.word	0x0800cb81
 800ca48:	20001e00 	.word	0x20001e00

0800ca4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b08a      	sub	sp, #40	; 0x28
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
 800ca58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d10a      	bne.n	800ca7a <xTimerGenericCommand+0x2e>
	__asm volatile
 800ca64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca68:	f383 8811 	msr	BASEPRI, r3
 800ca6c:	f3bf 8f6f 	isb	sy
 800ca70:	f3bf 8f4f 	dsb	sy
 800ca74:	623b      	str	r3, [r7, #32]
}
 800ca76:	bf00      	nop
 800ca78:	e7fe      	b.n	800ca78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ca7a:	4b1a      	ldr	r3, [pc, #104]	; (800cae4 <xTimerGenericCommand+0x98>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d02a      	beq.n	800cad8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ca82:	68bb      	ldr	r3, [r7, #8]
 800ca84:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	2b05      	cmp	r3, #5
 800ca92:	dc18      	bgt.n	800cac6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ca94:	f7ff fad0 	bl	800c038 <xTaskGetSchedulerState>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	2b02      	cmp	r3, #2
 800ca9c:	d109      	bne.n	800cab2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ca9e:	4b11      	ldr	r3, [pc, #68]	; (800cae4 <xTimerGenericCommand+0x98>)
 800caa0:	6818      	ldr	r0, [r3, #0]
 800caa2:	f107 0110 	add.w	r1, r7, #16
 800caa6:	2300      	movs	r3, #0
 800caa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caaa:	f7fd f9cb 	bl	8009e44 <xQueueGenericSend>
 800caae:	6278      	str	r0, [r7, #36]	; 0x24
 800cab0:	e012      	b.n	800cad8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cab2:	4b0c      	ldr	r3, [pc, #48]	; (800cae4 <xTimerGenericCommand+0x98>)
 800cab4:	6818      	ldr	r0, [r3, #0]
 800cab6:	f107 0110 	add.w	r1, r7, #16
 800caba:	2300      	movs	r3, #0
 800cabc:	2200      	movs	r2, #0
 800cabe:	f7fd f9c1 	bl	8009e44 <xQueueGenericSend>
 800cac2:	6278      	str	r0, [r7, #36]	; 0x24
 800cac4:	e008      	b.n	800cad8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cac6:	4b07      	ldr	r3, [pc, #28]	; (800cae4 <xTimerGenericCommand+0x98>)
 800cac8:	6818      	ldr	r0, [r3, #0]
 800caca:	f107 0110 	add.w	r1, r7, #16
 800cace:	2300      	movs	r3, #0
 800cad0:	683a      	ldr	r2, [r7, #0]
 800cad2:	f7fd fab5 	bl	800a040 <xQueueGenericSendFromISR>
 800cad6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3728      	adds	r7, #40	; 0x28
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	20001dfc 	.word	0x20001dfc

0800cae8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b088      	sub	sp, #32
 800caec:	af02      	add	r7, sp, #8
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800caf2:	4b22      	ldr	r3, [pc, #136]	; (800cb7c <prvProcessExpiredTimer+0x94>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68db      	ldr	r3, [r3, #12]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	3304      	adds	r3, #4
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7fd f837 	bl	8009b74 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb0c:	f003 0304 	and.w	r3, r3, #4
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d022      	beq.n	800cb5a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	699a      	ldr	r2, [r3, #24]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	18d1      	adds	r1, r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	683a      	ldr	r2, [r7, #0]
 800cb20:	6978      	ldr	r0, [r7, #20]
 800cb22:	f000 f8d1 	bl	800ccc8 <prvInsertTimerInActiveList>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d01f      	beq.n	800cb6c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	2300      	movs	r3, #0
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	2100      	movs	r1, #0
 800cb36:	6978      	ldr	r0, [r7, #20]
 800cb38:	f7ff ff88 	bl	800ca4c <xTimerGenericCommand>
 800cb3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d113      	bne.n	800cb6c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800cb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb48:	f383 8811 	msr	BASEPRI, r3
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f3bf 8f4f 	dsb	sy
 800cb54:	60fb      	str	r3, [r7, #12]
}
 800cb56:	bf00      	nop
 800cb58:	e7fe      	b.n	800cb58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb60:	f023 0301 	bic.w	r3, r3, #1
 800cb64:	b2da      	uxtb	r2, r3
 800cb66:	697b      	ldr	r3, [r7, #20]
 800cb68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	6a1b      	ldr	r3, [r3, #32]
 800cb70:	6978      	ldr	r0, [r7, #20]
 800cb72:	4798      	blx	r3
}
 800cb74:	bf00      	nop
 800cb76:	3718      	adds	r7, #24
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	20001df4 	.word	0x20001df4

0800cb80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cb88:	f107 0308 	add.w	r3, r7, #8
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 f857 	bl	800cc40 <prvGetNextExpireTime>
 800cb92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	4619      	mov	r1, r3
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f000 f803 	bl	800cba4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800cb9e:	f000 f8d5 	bl	800cd4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cba2:	e7f1      	b.n	800cb88 <prvTimerTask+0x8>

0800cba4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cbae:	f7fe fce5 	bl	800b57c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cbb2:	f107 0308 	add.w	r3, r7, #8
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 f866 	bl	800cc88 <prvSampleTimeNow>
 800cbbc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d130      	bne.n	800cc26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d10a      	bne.n	800cbe0 <prvProcessTimerOrBlockTask+0x3c>
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	429a      	cmp	r2, r3
 800cbd0:	d806      	bhi.n	800cbe0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cbd2:	f7fe fce1 	bl	800b598 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cbd6:	68f9      	ldr	r1, [r7, #12]
 800cbd8:	6878      	ldr	r0, [r7, #4]
 800cbda:	f7ff ff85 	bl	800cae8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cbde:	e024      	b.n	800cc2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d008      	beq.n	800cbf8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cbe6:	4b13      	ldr	r3, [pc, #76]	; (800cc34 <prvProcessTimerOrBlockTask+0x90>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d101      	bne.n	800cbf4 <prvProcessTimerOrBlockTask+0x50>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e000      	b.n	800cbf6 <prvProcessTimerOrBlockTask+0x52>
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cbf8:	4b0f      	ldr	r3, [pc, #60]	; (800cc38 <prvProcessTimerOrBlockTask+0x94>)
 800cbfa:	6818      	ldr	r0, [r3, #0]
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	1ad3      	subs	r3, r2, r3
 800cc02:	683a      	ldr	r2, [r7, #0]
 800cc04:	4619      	mov	r1, r3
 800cc06:	f7fd fe81 	bl	800a90c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cc0a:	f7fe fcc5 	bl	800b598 <xTaskResumeAll>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d10a      	bne.n	800cc2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cc14:	4b09      	ldr	r3, [pc, #36]	; (800cc3c <prvProcessTimerOrBlockTask+0x98>)
 800cc16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc1a:	601a      	str	r2, [r3, #0]
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	f3bf 8f6f 	isb	sy
}
 800cc24:	e001      	b.n	800cc2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cc26:	f7fe fcb7 	bl	800b598 <xTaskResumeAll>
}
 800cc2a:	bf00      	nop
 800cc2c:	3710      	adds	r7, #16
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	20001df8 	.word	0x20001df8
 800cc38:	20001dfc 	.word	0x20001dfc
 800cc3c:	e000ed04 	.word	0xe000ed04

0800cc40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cc40:	b480      	push	{r7}
 800cc42:	b085      	sub	sp, #20
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cc48:	4b0e      	ldr	r3, [pc, #56]	; (800cc84 <prvGetNextExpireTime+0x44>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d101      	bne.n	800cc56 <prvGetNextExpireTime+0x16>
 800cc52:	2201      	movs	r2, #1
 800cc54:	e000      	b.n	800cc58 <prvGetNextExpireTime+0x18>
 800cc56:	2200      	movs	r2, #0
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d105      	bne.n	800cc70 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc64:	4b07      	ldr	r3, [pc, #28]	; (800cc84 <prvGetNextExpireTime+0x44>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	68db      	ldr	r3, [r3, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	60fb      	str	r3, [r7, #12]
 800cc6e:	e001      	b.n	800cc74 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cc70:	2300      	movs	r3, #0
 800cc72:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cc74:	68fb      	ldr	r3, [r7, #12]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3714      	adds	r7, #20
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr
 800cc82:	bf00      	nop
 800cc84:	20001df4 	.word	0x20001df4

0800cc88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b084      	sub	sp, #16
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cc90:	f7fe fd20 	bl	800b6d4 <xTaskGetTickCount>
 800cc94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cc96:	4b0b      	ldr	r3, [pc, #44]	; (800ccc4 <prvSampleTimeNow+0x3c>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	68fa      	ldr	r2, [r7, #12]
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d205      	bcs.n	800ccac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cca0:	f000 f936 	bl	800cf10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2201      	movs	r2, #1
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	e002      	b.n	800ccb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ccb2:	4a04      	ldr	r2, [pc, #16]	; (800ccc4 <prvSampleTimeNow+0x3c>)
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ccb8:	68fb      	ldr	r3, [r7, #12]
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	20001e04 	.word	0x20001e04

0800ccc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b086      	sub	sp, #24
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
 800ccd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	68ba      	ldr	r2, [r7, #8]
 800ccde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	68fa      	ldr	r2, [r7, #12]
 800cce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cce6:	68ba      	ldr	r2, [r7, #8]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	429a      	cmp	r2, r3
 800ccec:	d812      	bhi.n	800cd14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	1ad2      	subs	r2, r2, r3
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	699b      	ldr	r3, [r3, #24]
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d302      	bcc.n	800cd02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	617b      	str	r3, [r7, #20]
 800cd00:	e01b      	b.n	800cd3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cd02:	4b10      	ldr	r3, [pc, #64]	; (800cd44 <prvInsertTimerInActiveList+0x7c>)
 800cd04:	681a      	ldr	r2, [r3, #0]
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	3304      	adds	r3, #4
 800cd0a:	4619      	mov	r1, r3
 800cd0c:	4610      	mov	r0, r2
 800cd0e:	f7fc fef8 	bl	8009b02 <vListInsert>
 800cd12:	e012      	b.n	800cd3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d206      	bcs.n	800cd2a <prvInsertTimerInActiveList+0x62>
 800cd1c:	68ba      	ldr	r2, [r7, #8]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d302      	bcc.n	800cd2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cd24:	2301      	movs	r3, #1
 800cd26:	617b      	str	r3, [r7, #20]
 800cd28:	e007      	b.n	800cd3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cd2a:	4b07      	ldr	r3, [pc, #28]	; (800cd48 <prvInsertTimerInActiveList+0x80>)
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	3304      	adds	r3, #4
 800cd32:	4619      	mov	r1, r3
 800cd34:	4610      	mov	r0, r2
 800cd36:	f7fc fee4 	bl	8009b02 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cd3a:	697b      	ldr	r3, [r7, #20]
}
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	3718      	adds	r7, #24
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bd80      	pop	{r7, pc}
 800cd44:	20001df8 	.word	0x20001df8
 800cd48:	20001df4 	.word	0x20001df4

0800cd4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b08e      	sub	sp, #56	; 0x38
 800cd50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd52:	e0ca      	b.n	800ceea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	da18      	bge.n	800cd8c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cd5a:	1d3b      	adds	r3, r7, #4
 800cd5c:	3304      	adds	r3, #4
 800cd5e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d10a      	bne.n	800cd7c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6a:	f383 8811 	msr	BASEPRI, r3
 800cd6e:	f3bf 8f6f 	isb	sy
 800cd72:	f3bf 8f4f 	dsb	sy
 800cd76:	61fb      	str	r3, [r7, #28]
}
 800cd78:	bf00      	nop
 800cd7a:	e7fe      	b.n	800cd7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cd7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd82:	6850      	ldr	r0, [r2, #4]
 800cd84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd86:	6892      	ldr	r2, [r2, #8]
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f2c0 80aa 	blt.w	800cee8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cd98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd9a:	695b      	ldr	r3, [r3, #20]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d004      	beq.n	800cdaa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda2:	3304      	adds	r3, #4
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7fc fee5 	bl	8009b74 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cdaa:	463b      	mov	r3, r7
 800cdac:	4618      	mov	r0, r3
 800cdae:	f7ff ff6b 	bl	800cc88 <prvSampleTimeNow>
 800cdb2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2b09      	cmp	r3, #9
 800cdb8:	f200 8097 	bhi.w	800ceea <prvProcessReceivedCommands+0x19e>
 800cdbc:	a201      	add	r2, pc, #4	; (adr r2, 800cdc4 <prvProcessReceivedCommands+0x78>)
 800cdbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdc2:	bf00      	nop
 800cdc4:	0800cded 	.word	0x0800cded
 800cdc8:	0800cded 	.word	0x0800cded
 800cdcc:	0800cded 	.word	0x0800cded
 800cdd0:	0800ce61 	.word	0x0800ce61
 800cdd4:	0800ce75 	.word	0x0800ce75
 800cdd8:	0800cebf 	.word	0x0800cebf
 800cddc:	0800cded 	.word	0x0800cded
 800cde0:	0800cded 	.word	0x0800cded
 800cde4:	0800ce61 	.word	0x0800ce61
 800cde8:	0800ce75 	.word	0x0800ce75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdf2:	f043 0301 	orr.w	r3, r3, #1
 800cdf6:	b2da      	uxtb	r2, r3
 800cdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce02:	699b      	ldr	r3, [r3, #24]
 800ce04:	18d1      	adds	r1, r2, r3
 800ce06:	68bb      	ldr	r3, [r7, #8]
 800ce08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce0c:	f7ff ff5c 	bl	800ccc8 <prvInsertTimerInActiveList>
 800ce10:	4603      	mov	r3, r0
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d069      	beq.n	800ceea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce18:	6a1b      	ldr	r3, [r3, #32]
 800ce1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce24:	f003 0304 	and.w	r3, r3, #4
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d05e      	beq.n	800ceea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ce2c:	68ba      	ldr	r2, [r7, #8]
 800ce2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce30:	699b      	ldr	r3, [r3, #24]
 800ce32:	441a      	add	r2, r3
 800ce34:	2300      	movs	r3, #0
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	2300      	movs	r3, #0
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce3e:	f7ff fe05 	bl	800ca4c <xTimerGenericCommand>
 800ce42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ce44:	6a3b      	ldr	r3, [r7, #32]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d14f      	bne.n	800ceea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ce4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4e:	f383 8811 	msr	BASEPRI, r3
 800ce52:	f3bf 8f6f 	isb	sy
 800ce56:	f3bf 8f4f 	dsb	sy
 800ce5a:	61bb      	str	r3, [r7, #24]
}
 800ce5c:	bf00      	nop
 800ce5e:	e7fe      	b.n	800ce5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ce60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce66:	f023 0301 	bic.w	r3, r3, #1
 800ce6a:	b2da      	uxtb	r2, r3
 800ce6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ce72:	e03a      	b.n	800ceea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ce74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ce7a:	f043 0301 	orr.w	r3, r3, #1
 800ce7e:	b2da      	uxtb	r2, r3
 800ce80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ce86:	68ba      	ldr	r2, [r7, #8]
 800ce88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ce8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce8e:	699b      	ldr	r3, [r3, #24]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d10a      	bne.n	800ceaa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ce94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce98:	f383 8811 	msr	BASEPRI, r3
 800ce9c:	f3bf 8f6f 	isb	sy
 800cea0:	f3bf 8f4f 	dsb	sy
 800cea4:	617b      	str	r3, [r7, #20]
}
 800cea6:	bf00      	nop
 800cea8:	e7fe      	b.n	800cea8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ceaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceac:	699a      	ldr	r2, [r3, #24]
 800ceae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb0:	18d1      	adds	r1, r2, r3
 800ceb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ceb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceb8:	f7ff ff06 	bl	800ccc8 <prvInsertTimerInActiveList>
					break;
 800cebc:	e015      	b.n	800ceea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cec4:	f003 0302 	and.w	r3, r3, #2
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d103      	bne.n	800ced4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cecc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cece:	f000 fbdf 	bl	800d690 <vPortFree>
 800ced2:	e00a      	b.n	800ceea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ced4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ceda:	f023 0301 	bic.w	r3, r3, #1
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cee6:	e000      	b.n	800ceea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cee8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ceea:	4b08      	ldr	r3, [pc, #32]	; (800cf0c <prvProcessReceivedCommands+0x1c0>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	1d39      	adds	r1, r7, #4
 800cef0:	2200      	movs	r2, #0
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fd f9cc 	bl	800a290 <xQueueReceive>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	f47f af2a 	bne.w	800cd54 <prvProcessReceivedCommands+0x8>
	}
}
 800cf00:	bf00      	nop
 800cf02:	bf00      	nop
 800cf04:	3730      	adds	r7, #48	; 0x30
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}
 800cf0a:	bf00      	nop
 800cf0c:	20001dfc 	.word	0x20001dfc

0800cf10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b088      	sub	sp, #32
 800cf14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf16:	e048      	b.n	800cfaa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cf18:	4b2d      	ldr	r3, [pc, #180]	; (800cfd0 <prvSwitchTimerLists+0xc0>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf22:	4b2b      	ldr	r3, [pc, #172]	; (800cfd0 <prvSwitchTimerLists+0xc0>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	68db      	ldr	r3, [r3, #12]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	3304      	adds	r3, #4
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7fc fe1f 	bl	8009b74 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	6a1b      	ldr	r3, [r3, #32]
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf44:	f003 0304 	and.w	r3, r3, #4
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d02e      	beq.n	800cfaa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	699b      	ldr	r3, [r3, #24]
 800cf50:	693a      	ldr	r2, [r7, #16]
 800cf52:	4413      	add	r3, r2
 800cf54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cf56:	68ba      	ldr	r2, [r7, #8]
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d90e      	bls.n	800cf7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	68fa      	ldr	r2, [r7, #12]
 800cf68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cf6a:	4b19      	ldr	r3, [pc, #100]	; (800cfd0 <prvSwitchTimerLists+0xc0>)
 800cf6c:	681a      	ldr	r2, [r3, #0]
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	3304      	adds	r3, #4
 800cf72:	4619      	mov	r1, r3
 800cf74:	4610      	mov	r0, r2
 800cf76:	f7fc fdc4 	bl	8009b02 <vListInsert>
 800cf7a:	e016      	b.n	800cfaa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	2300      	movs	r3, #0
 800cf82:	693a      	ldr	r2, [r7, #16]
 800cf84:	2100      	movs	r1, #0
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f7ff fd60 	bl	800ca4c <xTimerGenericCommand>
 800cf8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d10a      	bne.n	800cfaa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800cf94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf98:	f383 8811 	msr	BASEPRI, r3
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	f3bf 8f4f 	dsb	sy
 800cfa4:	603b      	str	r3, [r7, #0]
}
 800cfa6:	bf00      	nop
 800cfa8:	e7fe      	b.n	800cfa8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cfaa:	4b09      	ldr	r3, [pc, #36]	; (800cfd0 <prvSwitchTimerLists+0xc0>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d1b1      	bne.n	800cf18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cfb4:	4b06      	ldr	r3, [pc, #24]	; (800cfd0 <prvSwitchTimerLists+0xc0>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cfba:	4b06      	ldr	r3, [pc, #24]	; (800cfd4 <prvSwitchTimerLists+0xc4>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a04      	ldr	r2, [pc, #16]	; (800cfd0 <prvSwitchTimerLists+0xc0>)
 800cfc0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cfc2:	4a04      	ldr	r2, [pc, #16]	; (800cfd4 <prvSwitchTimerLists+0xc4>)
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	6013      	str	r3, [r2, #0]
}
 800cfc8:	bf00      	nop
 800cfca:	3718      	adds	r7, #24
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	20001df4 	.word	0x20001df4
 800cfd4:	20001df8 	.word	0x20001df8

0800cfd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cfde:	f000 f969 	bl	800d2b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cfe2:	4b15      	ldr	r3, [pc, #84]	; (800d038 <prvCheckForValidListAndQueue+0x60>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d120      	bne.n	800d02c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cfea:	4814      	ldr	r0, [pc, #80]	; (800d03c <prvCheckForValidListAndQueue+0x64>)
 800cfec:	f7fc fd38 	bl	8009a60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cff0:	4813      	ldr	r0, [pc, #76]	; (800d040 <prvCheckForValidListAndQueue+0x68>)
 800cff2:	f7fc fd35 	bl	8009a60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cff6:	4b13      	ldr	r3, [pc, #76]	; (800d044 <prvCheckForValidListAndQueue+0x6c>)
 800cff8:	4a10      	ldr	r2, [pc, #64]	; (800d03c <prvCheckForValidListAndQueue+0x64>)
 800cffa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cffc:	4b12      	ldr	r3, [pc, #72]	; (800d048 <prvCheckForValidListAndQueue+0x70>)
 800cffe:	4a10      	ldr	r2, [pc, #64]	; (800d040 <prvCheckForValidListAndQueue+0x68>)
 800d000:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d002:	2300      	movs	r3, #0
 800d004:	9300      	str	r3, [sp, #0]
 800d006:	4b11      	ldr	r3, [pc, #68]	; (800d04c <prvCheckForValidListAndQueue+0x74>)
 800d008:	4a11      	ldr	r2, [pc, #68]	; (800d050 <prvCheckForValidListAndQueue+0x78>)
 800d00a:	2110      	movs	r1, #16
 800d00c:	200a      	movs	r0, #10
 800d00e:	f7fc fe43 	bl	8009c98 <xQueueGenericCreateStatic>
 800d012:	4603      	mov	r3, r0
 800d014:	4a08      	ldr	r2, [pc, #32]	; (800d038 <prvCheckForValidListAndQueue+0x60>)
 800d016:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d018:	4b07      	ldr	r3, [pc, #28]	; (800d038 <prvCheckForValidListAndQueue+0x60>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d005      	beq.n	800d02c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d020:	4b05      	ldr	r3, [pc, #20]	; (800d038 <prvCheckForValidListAndQueue+0x60>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	490b      	ldr	r1, [pc, #44]	; (800d054 <prvCheckForValidListAndQueue+0x7c>)
 800d026:	4618      	mov	r0, r3
 800d028:	f7fd fc46 	bl	800a8b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d02c:	f000 f972 	bl	800d314 <vPortExitCritical>
}
 800d030:	bf00      	nop
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
 800d036:	bf00      	nop
 800d038:	20001dfc 	.word	0x20001dfc
 800d03c:	20001dcc 	.word	0x20001dcc
 800d040:	20001de0 	.word	0x20001de0
 800d044:	20001df4 	.word	0x20001df4
 800d048:	20001df8 	.word	0x20001df8
 800d04c:	20001ea8 	.word	0x20001ea8
 800d050:	20001e08 	.word	0x20001e08
 800d054:	0801081c 	.word	0x0801081c

0800d058 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d058:	b480      	push	{r7}
 800d05a:	b085      	sub	sp, #20
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	3b04      	subs	r3, #4
 800d068:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	3b04      	subs	r3, #4
 800d076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	f023 0201 	bic.w	r2, r3, #1
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	3b04      	subs	r3, #4
 800d086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d088:	4a0c      	ldr	r2, [pc, #48]	; (800d0bc <pxPortInitialiseStack+0x64>)
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	3b14      	subs	r3, #20
 800d092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	3b04      	subs	r3, #4
 800d09e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	f06f 0202 	mvn.w	r2, #2
 800d0a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	3b20      	subs	r3, #32
 800d0ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3714      	adds	r7, #20
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr
 800d0bc:	0800d0c1 	.word	0x0800d0c1

0800d0c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b085      	sub	sp, #20
 800d0c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d0ca:	4b12      	ldr	r3, [pc, #72]	; (800d114 <prvTaskExitError+0x54>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0d2:	d00a      	beq.n	800d0ea <prvTaskExitError+0x2a>
	__asm volatile
 800d0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d8:	f383 8811 	msr	BASEPRI, r3
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	f3bf 8f4f 	dsb	sy
 800d0e4:	60fb      	str	r3, [r7, #12]
}
 800d0e6:	bf00      	nop
 800d0e8:	e7fe      	b.n	800d0e8 <prvTaskExitError+0x28>
	__asm volatile
 800d0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0ee:	f383 8811 	msr	BASEPRI, r3
 800d0f2:	f3bf 8f6f 	isb	sy
 800d0f6:	f3bf 8f4f 	dsb	sy
 800d0fa:	60bb      	str	r3, [r7, #8]
}
 800d0fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d0fe:	bf00      	nop
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d0fc      	beq.n	800d100 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d106:	bf00      	nop
 800d108:	bf00      	nop
 800d10a:	3714      	adds	r7, #20
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr
 800d114:	200000a4 	.word	0x200000a4
	...

0800d120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d120:	4b07      	ldr	r3, [pc, #28]	; (800d140 <pxCurrentTCBConst2>)
 800d122:	6819      	ldr	r1, [r3, #0]
 800d124:	6808      	ldr	r0, [r1, #0]
 800d126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d12a:	f380 8809 	msr	PSP, r0
 800d12e:	f3bf 8f6f 	isb	sy
 800d132:	f04f 0000 	mov.w	r0, #0
 800d136:	f380 8811 	msr	BASEPRI, r0
 800d13a:	4770      	bx	lr
 800d13c:	f3af 8000 	nop.w

0800d140 <pxCurrentTCBConst2>:
 800d140:	200018cc 	.word	0x200018cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d144:	bf00      	nop
 800d146:	bf00      	nop

0800d148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d148:	4808      	ldr	r0, [pc, #32]	; (800d16c <prvPortStartFirstTask+0x24>)
 800d14a:	6800      	ldr	r0, [r0, #0]
 800d14c:	6800      	ldr	r0, [r0, #0]
 800d14e:	f380 8808 	msr	MSP, r0
 800d152:	f04f 0000 	mov.w	r0, #0
 800d156:	f380 8814 	msr	CONTROL, r0
 800d15a:	b662      	cpsie	i
 800d15c:	b661      	cpsie	f
 800d15e:	f3bf 8f4f 	dsb	sy
 800d162:	f3bf 8f6f 	isb	sy
 800d166:	df00      	svc	0
 800d168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d16a:	bf00      	nop
 800d16c:	e000ed08 	.word	0xe000ed08

0800d170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d176:	4b46      	ldr	r3, [pc, #280]	; (800d290 <xPortStartScheduler+0x120>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4a46      	ldr	r2, [pc, #280]	; (800d294 <xPortStartScheduler+0x124>)
 800d17c:	4293      	cmp	r3, r2
 800d17e:	d10a      	bne.n	800d196 <xPortStartScheduler+0x26>
	__asm volatile
 800d180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d184:	f383 8811 	msr	BASEPRI, r3
 800d188:	f3bf 8f6f 	isb	sy
 800d18c:	f3bf 8f4f 	dsb	sy
 800d190:	613b      	str	r3, [r7, #16]
}
 800d192:	bf00      	nop
 800d194:	e7fe      	b.n	800d194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d196:	4b3e      	ldr	r3, [pc, #248]	; (800d290 <xPortStartScheduler+0x120>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	4a3f      	ldr	r2, [pc, #252]	; (800d298 <xPortStartScheduler+0x128>)
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d10a      	bne.n	800d1b6 <xPortStartScheduler+0x46>
	__asm volatile
 800d1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	60fb      	str	r3, [r7, #12]
}
 800d1b2:	bf00      	nop
 800d1b4:	e7fe      	b.n	800d1b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d1b6:	4b39      	ldr	r3, [pc, #228]	; (800d29c <xPortStartScheduler+0x12c>)
 800d1b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	b2db      	uxtb	r3, r3
 800d1c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	22ff      	movs	r2, #255	; 0xff
 800d1c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d1d0:	78fb      	ldrb	r3, [r7, #3]
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d1d8:	b2da      	uxtb	r2, r3
 800d1da:	4b31      	ldr	r3, [pc, #196]	; (800d2a0 <xPortStartScheduler+0x130>)
 800d1dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d1de:	4b31      	ldr	r3, [pc, #196]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d1e0:	2207      	movs	r2, #7
 800d1e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1e4:	e009      	b.n	800d1fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d1e6:	4b2f      	ldr	r3, [pc, #188]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	3b01      	subs	r3, #1
 800d1ec:	4a2d      	ldr	r2, [pc, #180]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d1ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d1f0:	78fb      	ldrb	r3, [r7, #3]
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	005b      	lsls	r3, r3, #1
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d1fa:	78fb      	ldrb	r3, [r7, #3]
 800d1fc:	b2db      	uxtb	r3, r3
 800d1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d202:	2b80      	cmp	r3, #128	; 0x80
 800d204:	d0ef      	beq.n	800d1e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d206:	4b27      	ldr	r3, [pc, #156]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f1c3 0307 	rsb	r3, r3, #7
 800d20e:	2b04      	cmp	r3, #4
 800d210:	d00a      	beq.n	800d228 <xPortStartScheduler+0xb8>
	__asm volatile
 800d212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d216:	f383 8811 	msr	BASEPRI, r3
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	60bb      	str	r3, [r7, #8]
}
 800d224:	bf00      	nop
 800d226:	e7fe      	b.n	800d226 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d228:	4b1e      	ldr	r3, [pc, #120]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	021b      	lsls	r3, r3, #8
 800d22e:	4a1d      	ldr	r2, [pc, #116]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d230:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d232:	4b1c      	ldr	r3, [pc, #112]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d23a:	4a1a      	ldr	r2, [pc, #104]	; (800d2a4 <xPortStartScheduler+0x134>)
 800d23c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	b2da      	uxtb	r2, r3
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d246:	4b18      	ldr	r3, [pc, #96]	; (800d2a8 <xPortStartScheduler+0x138>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4a17      	ldr	r2, [pc, #92]	; (800d2a8 <xPortStartScheduler+0x138>)
 800d24c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d250:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d252:	4b15      	ldr	r3, [pc, #84]	; (800d2a8 <xPortStartScheduler+0x138>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4a14      	ldr	r2, [pc, #80]	; (800d2a8 <xPortStartScheduler+0x138>)
 800d258:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d25c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d25e:	f000 f8dd 	bl	800d41c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d262:	4b12      	ldr	r3, [pc, #72]	; (800d2ac <xPortStartScheduler+0x13c>)
 800d264:	2200      	movs	r2, #0
 800d266:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d268:	f000 f8fc 	bl	800d464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d26c:	4b10      	ldr	r3, [pc, #64]	; (800d2b0 <xPortStartScheduler+0x140>)
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a0f      	ldr	r2, [pc, #60]	; (800d2b0 <xPortStartScheduler+0x140>)
 800d272:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d276:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d278:	f7ff ff66 	bl	800d148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d27c:	f7fe fb82 	bl	800b984 <vTaskSwitchContext>
	prvTaskExitError();
 800d280:	f7ff ff1e 	bl	800d0c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d284:	2300      	movs	r3, #0
}
 800d286:	4618      	mov	r0, r3
 800d288:	3718      	adds	r7, #24
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	e000ed00 	.word	0xe000ed00
 800d294:	410fc271 	.word	0x410fc271
 800d298:	410fc270 	.word	0x410fc270
 800d29c:	e000e400 	.word	0xe000e400
 800d2a0:	20001ef8 	.word	0x20001ef8
 800d2a4:	20001efc 	.word	0x20001efc
 800d2a8:	e000ed20 	.word	0xe000ed20
 800d2ac:	200000a4 	.word	0x200000a4
 800d2b0:	e000ef34 	.word	0xe000ef34

0800d2b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
	__asm volatile
 800d2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2be:	f383 8811 	msr	BASEPRI, r3
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	607b      	str	r3, [r7, #4]
}
 800d2cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d2ce:	4b0f      	ldr	r3, [pc, #60]	; (800d30c <vPortEnterCritical+0x58>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	4a0d      	ldr	r2, [pc, #52]	; (800d30c <vPortEnterCritical+0x58>)
 800d2d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d2d8:	4b0c      	ldr	r3, [pc, #48]	; (800d30c <vPortEnterCritical+0x58>)
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d10f      	bne.n	800d300 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d2e0:	4b0b      	ldr	r3, [pc, #44]	; (800d310 <vPortEnterCritical+0x5c>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	b2db      	uxtb	r3, r3
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d00a      	beq.n	800d300 <vPortEnterCritical+0x4c>
	__asm volatile
 800d2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ee:	f383 8811 	msr	BASEPRI, r3
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	603b      	str	r3, [r7, #0]
}
 800d2fc:	bf00      	nop
 800d2fe:	e7fe      	b.n	800d2fe <vPortEnterCritical+0x4a>
	}
}
 800d300:	bf00      	nop
 800d302:	370c      	adds	r7, #12
 800d304:	46bd      	mov	sp, r7
 800d306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30a:	4770      	bx	lr
 800d30c:	200000a4 	.word	0x200000a4
 800d310:	e000ed04 	.word	0xe000ed04

0800d314 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d31a:	4b12      	ldr	r3, [pc, #72]	; (800d364 <vPortExitCritical+0x50>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d10a      	bne.n	800d338 <vPortExitCritical+0x24>
	__asm volatile
 800d322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d326:	f383 8811 	msr	BASEPRI, r3
 800d32a:	f3bf 8f6f 	isb	sy
 800d32e:	f3bf 8f4f 	dsb	sy
 800d332:	607b      	str	r3, [r7, #4]
}
 800d334:	bf00      	nop
 800d336:	e7fe      	b.n	800d336 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d338:	4b0a      	ldr	r3, [pc, #40]	; (800d364 <vPortExitCritical+0x50>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	3b01      	subs	r3, #1
 800d33e:	4a09      	ldr	r2, [pc, #36]	; (800d364 <vPortExitCritical+0x50>)
 800d340:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d342:	4b08      	ldr	r3, [pc, #32]	; (800d364 <vPortExitCritical+0x50>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d105      	bne.n	800d356 <vPortExitCritical+0x42>
 800d34a:	2300      	movs	r3, #0
 800d34c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	f383 8811 	msr	BASEPRI, r3
}
 800d354:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d356:	bf00      	nop
 800d358:	370c      	adds	r7, #12
 800d35a:	46bd      	mov	sp, r7
 800d35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d360:	4770      	bx	lr
 800d362:	bf00      	nop
 800d364:	200000a4 	.word	0x200000a4
	...

0800d370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d370:	f3ef 8009 	mrs	r0, PSP
 800d374:	f3bf 8f6f 	isb	sy
 800d378:	4b15      	ldr	r3, [pc, #84]	; (800d3d0 <pxCurrentTCBConst>)
 800d37a:	681a      	ldr	r2, [r3, #0]
 800d37c:	f01e 0f10 	tst.w	lr, #16
 800d380:	bf08      	it	eq
 800d382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d38a:	6010      	str	r0, [r2, #0]
 800d38c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d390:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d394:	f380 8811 	msr	BASEPRI, r0
 800d398:	f3bf 8f4f 	dsb	sy
 800d39c:	f3bf 8f6f 	isb	sy
 800d3a0:	f7fe faf0 	bl	800b984 <vTaskSwitchContext>
 800d3a4:	f04f 0000 	mov.w	r0, #0
 800d3a8:	f380 8811 	msr	BASEPRI, r0
 800d3ac:	bc09      	pop	{r0, r3}
 800d3ae:	6819      	ldr	r1, [r3, #0]
 800d3b0:	6808      	ldr	r0, [r1, #0]
 800d3b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3b6:	f01e 0f10 	tst.w	lr, #16
 800d3ba:	bf08      	it	eq
 800d3bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d3c0:	f380 8809 	msr	PSP, r0
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop
 800d3cc:	f3af 8000 	nop.w

0800d3d0 <pxCurrentTCBConst>:
 800d3d0:	200018cc 	.word	0x200018cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d3d4:	bf00      	nop
 800d3d6:	bf00      	nop

0800d3d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b082      	sub	sp, #8
 800d3dc:	af00      	add	r7, sp, #0
	__asm volatile
 800d3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	607b      	str	r3, [r7, #4]
}
 800d3f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d3f2:	f7fe fa0d 	bl	800b810 <xTaskIncrementTick>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d003      	beq.n	800d404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d3fc:	4b06      	ldr	r3, [pc, #24]	; (800d418 <xPortSysTickHandler+0x40>)
 800d3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d402:	601a      	str	r2, [r3, #0]
 800d404:	2300      	movs	r3, #0
 800d406:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	f383 8811 	msr	BASEPRI, r3
}
 800d40e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d410:	bf00      	nop
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	e000ed04 	.word	0xe000ed04

0800d41c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d41c:	b480      	push	{r7}
 800d41e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d420:	4b0b      	ldr	r3, [pc, #44]	; (800d450 <vPortSetupTimerInterrupt+0x34>)
 800d422:	2200      	movs	r2, #0
 800d424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d426:	4b0b      	ldr	r3, [pc, #44]	; (800d454 <vPortSetupTimerInterrupt+0x38>)
 800d428:	2200      	movs	r2, #0
 800d42a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d42c:	4b0a      	ldr	r3, [pc, #40]	; (800d458 <vPortSetupTimerInterrupt+0x3c>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a0a      	ldr	r2, [pc, #40]	; (800d45c <vPortSetupTimerInterrupt+0x40>)
 800d432:	fba2 2303 	umull	r2, r3, r2, r3
 800d436:	099b      	lsrs	r3, r3, #6
 800d438:	4a09      	ldr	r2, [pc, #36]	; (800d460 <vPortSetupTimerInterrupt+0x44>)
 800d43a:	3b01      	subs	r3, #1
 800d43c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d43e:	4b04      	ldr	r3, [pc, #16]	; (800d450 <vPortSetupTimerInterrupt+0x34>)
 800d440:	2207      	movs	r2, #7
 800d442:	601a      	str	r2, [r3, #0]
}
 800d444:	bf00      	nop
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	e000e010 	.word	0xe000e010
 800d454:	e000e018 	.word	0xe000e018
 800d458:	2000000c 	.word	0x2000000c
 800d45c:	10624dd3 	.word	0x10624dd3
 800d460:	e000e014 	.word	0xe000e014

0800d464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d464:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d474 <vPortEnableVFP+0x10>
 800d468:	6801      	ldr	r1, [r0, #0]
 800d46a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d46e:	6001      	str	r1, [r0, #0]
 800d470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d472:	bf00      	nop
 800d474:	e000ed88 	.word	0xe000ed88

0800d478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d478:	b480      	push	{r7}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d47e:	f3ef 8305 	mrs	r3, IPSR
 800d482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	2b0f      	cmp	r3, #15
 800d488:	d914      	bls.n	800d4b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d48a:	4a17      	ldr	r2, [pc, #92]	; (800d4e8 <vPortValidateInterruptPriority+0x70>)
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	4413      	add	r3, r2
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d494:	4b15      	ldr	r3, [pc, #84]	; (800d4ec <vPortValidateInterruptPriority+0x74>)
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	7afa      	ldrb	r2, [r7, #11]
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d20a      	bcs.n	800d4b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	607b      	str	r3, [r7, #4]
}
 800d4b0:	bf00      	nop
 800d4b2:	e7fe      	b.n	800d4b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d4b4:	4b0e      	ldr	r3, [pc, #56]	; (800d4f0 <vPortValidateInterruptPriority+0x78>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d4bc:	4b0d      	ldr	r3, [pc, #52]	; (800d4f4 <vPortValidateInterruptPriority+0x7c>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d90a      	bls.n	800d4da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c8:	f383 8811 	msr	BASEPRI, r3
 800d4cc:	f3bf 8f6f 	isb	sy
 800d4d0:	f3bf 8f4f 	dsb	sy
 800d4d4:	603b      	str	r3, [r7, #0]
}
 800d4d6:	bf00      	nop
 800d4d8:	e7fe      	b.n	800d4d8 <vPortValidateInterruptPriority+0x60>
	}
 800d4da:	bf00      	nop
 800d4dc:	3714      	adds	r7, #20
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	e000e3f0 	.word	0xe000e3f0
 800d4ec:	20001ef8 	.word	0x20001ef8
 800d4f0:	e000ed0c 	.word	0xe000ed0c
 800d4f4:	20001efc 	.word	0x20001efc

0800d4f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b08a      	sub	sp, #40	; 0x28
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d500:	2300      	movs	r3, #0
 800d502:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d504:	f7fe f83a 	bl	800b57c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d508:	4b5b      	ldr	r3, [pc, #364]	; (800d678 <pvPortMalloc+0x180>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d101      	bne.n	800d514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d510:	f000 f920 	bl	800d754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d514:	4b59      	ldr	r3, [pc, #356]	; (800d67c <pvPortMalloc+0x184>)
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4013      	ands	r3, r2
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f040 8093 	bne.w	800d648 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d01d      	beq.n	800d564 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d528:	2208      	movs	r2, #8
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4413      	add	r3, r2
 800d52e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f003 0307 	and.w	r3, r3, #7
 800d536:	2b00      	cmp	r3, #0
 800d538:	d014      	beq.n	800d564 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f023 0307 	bic.w	r3, r3, #7
 800d540:	3308      	adds	r3, #8
 800d542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f003 0307 	and.w	r3, r3, #7
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d00a      	beq.n	800d564 <pvPortMalloc+0x6c>
	__asm volatile
 800d54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d552:	f383 8811 	msr	BASEPRI, r3
 800d556:	f3bf 8f6f 	isb	sy
 800d55a:	f3bf 8f4f 	dsb	sy
 800d55e:	617b      	str	r3, [r7, #20]
}
 800d560:	bf00      	nop
 800d562:	e7fe      	b.n	800d562 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d06e      	beq.n	800d648 <pvPortMalloc+0x150>
 800d56a:	4b45      	ldr	r3, [pc, #276]	; (800d680 <pvPortMalloc+0x188>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	429a      	cmp	r2, r3
 800d572:	d869      	bhi.n	800d648 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d574:	4b43      	ldr	r3, [pc, #268]	; (800d684 <pvPortMalloc+0x18c>)
 800d576:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d578:	4b42      	ldr	r3, [pc, #264]	; (800d684 <pvPortMalloc+0x18c>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d57e:	e004      	b.n	800d58a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d582:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	687a      	ldr	r2, [r7, #4]
 800d590:	429a      	cmp	r2, r3
 800d592:	d903      	bls.n	800d59c <pvPortMalloc+0xa4>
 800d594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d1f1      	bne.n	800d580 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d59c:	4b36      	ldr	r3, [pc, #216]	; (800d678 <pvPortMalloc+0x180>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5a2:	429a      	cmp	r2, r3
 800d5a4:	d050      	beq.n	800d648 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d5a6:	6a3b      	ldr	r3, [r7, #32]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2208      	movs	r2, #8
 800d5ac:	4413      	add	r3, r2
 800d5ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	6a3b      	ldr	r3, [r7, #32]
 800d5b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	685a      	ldr	r2, [r3, #4]
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	1ad2      	subs	r2, r2, r3
 800d5c0:	2308      	movs	r3, #8
 800d5c2:	005b      	lsls	r3, r3, #1
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d91f      	bls.n	800d608 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4413      	add	r3, r2
 800d5ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	f003 0307 	and.w	r3, r3, #7
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d00a      	beq.n	800d5f0 <pvPortMalloc+0xf8>
	__asm volatile
 800d5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5de:	f383 8811 	msr	BASEPRI, r3
 800d5e2:	f3bf 8f6f 	isb	sy
 800d5e6:	f3bf 8f4f 	dsb	sy
 800d5ea:	613b      	str	r3, [r7, #16]
}
 800d5ec:	bf00      	nop
 800d5ee:	e7fe      	b.n	800d5ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f2:	685a      	ldr	r2, [r3, #4]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	1ad2      	subs	r2, r2, r3
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d602:	69b8      	ldr	r0, [r7, #24]
 800d604:	f000 f908 	bl	800d818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d608:	4b1d      	ldr	r3, [pc, #116]	; (800d680 <pvPortMalloc+0x188>)
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	1ad3      	subs	r3, r2, r3
 800d612:	4a1b      	ldr	r2, [pc, #108]	; (800d680 <pvPortMalloc+0x188>)
 800d614:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d616:	4b1a      	ldr	r3, [pc, #104]	; (800d680 <pvPortMalloc+0x188>)
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	4b1b      	ldr	r3, [pc, #108]	; (800d688 <pvPortMalloc+0x190>)
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	429a      	cmp	r2, r3
 800d620:	d203      	bcs.n	800d62a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d622:	4b17      	ldr	r3, [pc, #92]	; (800d680 <pvPortMalloc+0x188>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	4a18      	ldr	r2, [pc, #96]	; (800d688 <pvPortMalloc+0x190>)
 800d628:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	685a      	ldr	r2, [r3, #4]
 800d62e:	4b13      	ldr	r3, [pc, #76]	; (800d67c <pvPortMalloc+0x184>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	431a      	orrs	r2, r3
 800d634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d636:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63a:	2200      	movs	r2, #0
 800d63c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d63e:	4b13      	ldr	r3, [pc, #76]	; (800d68c <pvPortMalloc+0x194>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	3301      	adds	r3, #1
 800d644:	4a11      	ldr	r2, [pc, #68]	; (800d68c <pvPortMalloc+0x194>)
 800d646:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d648:	f7fd ffa6 	bl	800b598 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	f003 0307 	and.w	r3, r3, #7
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00a      	beq.n	800d66c <pvPortMalloc+0x174>
	__asm volatile
 800d656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65a:	f383 8811 	msr	BASEPRI, r3
 800d65e:	f3bf 8f6f 	isb	sy
 800d662:	f3bf 8f4f 	dsb	sy
 800d666:	60fb      	str	r3, [r7, #12]
}
 800d668:	bf00      	nop
 800d66a:	e7fe      	b.n	800d66a <pvPortMalloc+0x172>
	return pvReturn;
 800d66c:	69fb      	ldr	r3, [r7, #28]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3728      	adds	r7, #40	; 0x28
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	20009f08 	.word	0x20009f08
 800d67c:	20009f1c 	.word	0x20009f1c
 800d680:	20009f0c 	.word	0x20009f0c
 800d684:	20009f00 	.word	0x20009f00
 800d688:	20009f10 	.word	0x20009f10
 800d68c:	20009f14 	.word	0x20009f14

0800d690 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d04d      	beq.n	800d73e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d6a2:	2308      	movs	r3, #8
 800d6a4:	425b      	negs	r3, r3
 800d6a6:	697a      	ldr	r2, [r7, #20]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	685a      	ldr	r2, [r3, #4]
 800d6b4:	4b24      	ldr	r3, [pc, #144]	; (800d748 <vPortFree+0xb8>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d10a      	bne.n	800d6d4 <vPortFree+0x44>
	__asm volatile
 800d6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c2:	f383 8811 	msr	BASEPRI, r3
 800d6c6:	f3bf 8f6f 	isb	sy
 800d6ca:	f3bf 8f4f 	dsb	sy
 800d6ce:	60fb      	str	r3, [r7, #12]
}
 800d6d0:	bf00      	nop
 800d6d2:	e7fe      	b.n	800d6d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00a      	beq.n	800d6f2 <vPortFree+0x62>
	__asm volatile
 800d6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e0:	f383 8811 	msr	BASEPRI, r3
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	f3bf 8f4f 	dsb	sy
 800d6ec:	60bb      	str	r3, [r7, #8]
}
 800d6ee:	bf00      	nop
 800d6f0:	e7fe      	b.n	800d6f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	685a      	ldr	r2, [r3, #4]
 800d6f6:	4b14      	ldr	r3, [pc, #80]	; (800d748 <vPortFree+0xb8>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4013      	ands	r3, r2
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d01e      	beq.n	800d73e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d11a      	bne.n	800d73e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	4b0e      	ldr	r3, [pc, #56]	; (800d748 <vPortFree+0xb8>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	43db      	mvns	r3, r3
 800d712:	401a      	ands	r2, r3
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d718:	f7fd ff30 	bl	800b57c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	685a      	ldr	r2, [r3, #4]
 800d720:	4b0a      	ldr	r3, [pc, #40]	; (800d74c <vPortFree+0xbc>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	4413      	add	r3, r2
 800d726:	4a09      	ldr	r2, [pc, #36]	; (800d74c <vPortFree+0xbc>)
 800d728:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d72a:	6938      	ldr	r0, [r7, #16]
 800d72c:	f000 f874 	bl	800d818 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d730:	4b07      	ldr	r3, [pc, #28]	; (800d750 <vPortFree+0xc0>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	3301      	adds	r3, #1
 800d736:	4a06      	ldr	r2, [pc, #24]	; (800d750 <vPortFree+0xc0>)
 800d738:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d73a:	f7fd ff2d 	bl	800b598 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d73e:	bf00      	nop
 800d740:	3718      	adds	r7, #24
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	20009f1c 	.word	0x20009f1c
 800d74c:	20009f0c 	.word	0x20009f0c
 800d750:	20009f18 	.word	0x20009f18

0800d754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d75a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d75e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d760:	4b27      	ldr	r3, [pc, #156]	; (800d800 <prvHeapInit+0xac>)
 800d762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f003 0307 	and.w	r3, r3, #7
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00c      	beq.n	800d788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	3307      	adds	r3, #7
 800d772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f023 0307 	bic.w	r3, r3, #7
 800d77a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	4a1f      	ldr	r2, [pc, #124]	; (800d800 <prvHeapInit+0xac>)
 800d784:	4413      	add	r3, r2
 800d786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d78c:	4a1d      	ldr	r2, [pc, #116]	; (800d804 <prvHeapInit+0xb0>)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d792:	4b1c      	ldr	r3, [pc, #112]	; (800d804 <prvHeapInit+0xb0>)
 800d794:	2200      	movs	r2, #0
 800d796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	68ba      	ldr	r2, [r7, #8]
 800d79c:	4413      	add	r3, r2
 800d79e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d7a0:	2208      	movs	r2, #8
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	1a9b      	subs	r3, r3, r2
 800d7a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f023 0307 	bic.w	r3, r3, #7
 800d7ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	4a15      	ldr	r2, [pc, #84]	; (800d808 <prvHeapInit+0xb4>)
 800d7b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d7b6:	4b14      	ldr	r3, [pc, #80]	; (800d808 <prvHeapInit+0xb4>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d7be:	4b12      	ldr	r3, [pc, #72]	; (800d808 <prvHeapInit+0xb4>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	68fa      	ldr	r2, [r7, #12]
 800d7ce:	1ad2      	subs	r2, r2, r3
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d7d4:	4b0c      	ldr	r3, [pc, #48]	; (800d808 <prvHeapInit+0xb4>)
 800d7d6:	681a      	ldr	r2, [r3, #0]
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7dc:	683b      	ldr	r3, [r7, #0]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	4a0a      	ldr	r2, [pc, #40]	; (800d80c <prvHeapInit+0xb8>)
 800d7e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	4a09      	ldr	r2, [pc, #36]	; (800d810 <prvHeapInit+0xbc>)
 800d7ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d7ec:	4b09      	ldr	r3, [pc, #36]	; (800d814 <prvHeapInit+0xc0>)
 800d7ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d7f2:	601a      	str	r2, [r3, #0]
}
 800d7f4:	bf00      	nop
 800d7f6:	3714      	adds	r7, #20
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr
 800d800:	20001f00 	.word	0x20001f00
 800d804:	20009f00 	.word	0x20009f00
 800d808:	20009f08 	.word	0x20009f08
 800d80c:	20009f10 	.word	0x20009f10
 800d810:	20009f0c 	.word	0x20009f0c
 800d814:	20009f1c 	.word	0x20009f1c

0800d818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d818:	b480      	push	{r7}
 800d81a:	b085      	sub	sp, #20
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d820:	4b28      	ldr	r3, [pc, #160]	; (800d8c4 <prvInsertBlockIntoFreeList+0xac>)
 800d822:	60fb      	str	r3, [r7, #12]
 800d824:	e002      	b.n	800d82c <prvInsertBlockIntoFreeList+0x14>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	60fb      	str	r3, [r7, #12]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	429a      	cmp	r2, r3
 800d834:	d8f7      	bhi.n	800d826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	685b      	ldr	r3, [r3, #4]
 800d83e:	68ba      	ldr	r2, [r7, #8]
 800d840:	4413      	add	r3, r2
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	429a      	cmp	r2, r3
 800d846:	d108      	bne.n	800d85a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	685a      	ldr	r2, [r3, #4]
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	441a      	add	r2, r3
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	68ba      	ldr	r2, [r7, #8]
 800d864:	441a      	add	r2, r3
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d118      	bne.n	800d8a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681a      	ldr	r2, [r3, #0]
 800d872:	4b15      	ldr	r3, [pc, #84]	; (800d8c8 <prvInsertBlockIntoFreeList+0xb0>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	429a      	cmp	r2, r3
 800d878:	d00d      	beq.n	800d896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	685a      	ldr	r2, [r3, #4]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	441a      	add	r2, r3
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	681a      	ldr	r2, [r3, #0]
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	601a      	str	r2, [r3, #0]
 800d894:	e008      	b.n	800d8a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d896:	4b0c      	ldr	r3, [pc, #48]	; (800d8c8 <prvInsertBlockIntoFreeList+0xb0>)
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	601a      	str	r2, [r3, #0]
 800d89e:	e003      	b.n	800d8a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681a      	ldr	r2, [r3, #0]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d8a8:	68fa      	ldr	r2, [r7, #12]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d002      	beq.n	800d8b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8b6:	bf00      	nop
 800d8b8:	3714      	adds	r7, #20
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	20009f00 	.word	0x20009f00
 800d8c8:	20009f08 	.word	0x20009f08

0800d8cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	4912      	ldr	r1, [pc, #72]	; (800d91c <MX_USB_DEVICE_Init+0x50>)
 800d8d4:	4812      	ldr	r0, [pc, #72]	; (800d920 <MX_USB_DEVICE_Init+0x54>)
 800d8d6:	f7fa fc8d 	bl	80081f4 <USBD_Init>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d001      	beq.n	800d8e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d8e0:	f7f4 f976 	bl	8001bd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d8e4:	490f      	ldr	r1, [pc, #60]	; (800d924 <MX_USB_DEVICE_Init+0x58>)
 800d8e6:	480e      	ldr	r0, [pc, #56]	; (800d920 <MX_USB_DEVICE_Init+0x54>)
 800d8e8:	f7fa fcb4 	bl	8008254 <USBD_RegisterClass>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d001      	beq.n	800d8f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d8f2:	f7f4 f96d 	bl	8001bd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d8f6:	490c      	ldr	r1, [pc, #48]	; (800d928 <MX_USB_DEVICE_Init+0x5c>)
 800d8f8:	4809      	ldr	r0, [pc, #36]	; (800d920 <MX_USB_DEVICE_Init+0x54>)
 800d8fa:	f7fa fba5 	bl	8008048 <USBD_CDC_RegisterInterface>
 800d8fe:	4603      	mov	r3, r0
 800d900:	2b00      	cmp	r3, #0
 800d902:	d001      	beq.n	800d908 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d904:	f7f4 f964 	bl	8001bd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d908:	4805      	ldr	r0, [pc, #20]	; (800d920 <MX_USB_DEVICE_Init+0x54>)
 800d90a:	f7fa fcd9 	bl	80082c0 <USBD_Start>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d001      	beq.n	800d918 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d914:	f7f4 f95c 	bl	8001bd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d918:	bf00      	nop
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	200000bc 	.word	0x200000bc
 800d920:	20009f20 	.word	0x20009f20
 800d924:	20000024 	.word	0x20000024
 800d928:	200000a8 	.word	0x200000a8

0800d92c <init_usb_rtos_obj>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */
void Print_Task(void *param);
void init_usb_rtos_obj(void){
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b082      	sub	sp, #8
 800d930:	af02      	add	r7, sp, #8
	sem_usb_tx = xSemaphoreCreateBinary();
 800d932:	2203      	movs	r2, #3
 800d934:	2100      	movs	r1, #0
 800d936:	2001      	movs	r0, #1
 800d938:	f7fc fa26 	bl	8009d88 <xQueueGenericCreate>
 800d93c:	4603      	mov	r3, r0
 800d93e:	4a12      	ldr	r2, [pc, #72]	; (800d988 <init_usb_rtos_obj+0x5c>)
 800d940:	6013      	str	r3, [r2, #0]
	msg_buf_rx = xMessageBufferCreate(768);
 800d942:	2201      	movs	r2, #1
 800d944:	2100      	movs	r1, #0
 800d946:	f44f 7040 	mov.w	r0, #768	; 0x300
 800d94a:	f7fd f813 	bl	800a974 <xStreamBufferGenericCreate>
 800d94e:	4603      	mov	r3, r0
 800d950:	4a0e      	ldr	r2, [pc, #56]	; (800d98c <init_usb_rtos_obj+0x60>)
 800d952:	6013      	str	r3, [r2, #0]
	msg_buf_tx = xMessageBufferCreate(768);
 800d954:	2201      	movs	r2, #1
 800d956:	2100      	movs	r1, #0
 800d958:	f44f 7040 	mov.w	r0, #768	; 0x300
 800d95c:	f7fd f80a 	bl	800a974 <xStreamBufferGenericCreate>
 800d960:	4603      	mov	r3, r0
 800d962:	4a0b      	ldr	r2, [pc, #44]	; (800d990 <init_usb_rtos_obj+0x64>)
 800d964:	6013      	str	r3, [r2, #0]
	/*
	 *
	 */
	xTaskCreate(Print_Task,"Impressao",256, NULL, 1, NULL);
 800d966:	2300      	movs	r3, #0
 800d968:	9301      	str	r3, [sp, #4]
 800d96a:	2301      	movs	r3, #1
 800d96c:	9300      	str	r3, [sp, #0]
 800d96e:	2300      	movs	r3, #0
 800d970:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d974:	4907      	ldr	r1, [pc, #28]	; (800d994 <init_usb_rtos_obj+0x68>)
 800d976:	4808      	ldr	r0, [pc, #32]	; (800d998 <init_usb_rtos_obj+0x6c>)
 800d978:	f7fd fb9b 	bl	800b0b2 <xTaskCreate>
	usb_on = 1;
 800d97c:	4b07      	ldr	r3, [pc, #28]	; (800d99c <init_usb_rtos_obj+0x70>)
 800d97e:	2201      	movs	r2, #1
 800d980:	601a      	str	r2, [r3, #0]
}
 800d982:	bf00      	nop
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	2000b1fc 	.word	0x2000b1fc
 800d98c:	2000b200 	.word	0x2000b200
 800d990:	2000b204 	.word	0x2000b204
 800d994:	08010824 	.word	0x08010824
 800d998:	0800d9e5 	.word	0x0800d9e5
 800d99c:	2000b208 	.word	0x2000b208

0800d9a0 <CDC_Receiveq_FS>:
uint32_t usb_is_on(){
	return usb_on;
}


BaseType_t CDC_Receiveq_FS(char *data, TickType_t timeout){
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
	return xMessageBufferReceive(msg_buf_tx,(void *) data, 128,portMAX_DELAY);
 800d9aa:	4b06      	ldr	r3, [pc, #24]	; (800d9c4 <CDC_Receiveq_FS+0x24>)
 800d9ac:	6818      	ldr	r0, [r3, #0]
 800d9ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d9b2:	2280      	movs	r2, #128	; 0x80
 800d9b4:	6879      	ldr	r1, [r7, #4]
 800d9b6:	f7fd f919 	bl	800abec <xStreamBufferReceive>
 800d9ba:	4603      	mov	r3, r0
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3708      	adds	r7, #8
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}
 800d9c4:	2000b204 	.word	0x2000b204

0800d9c8 <queue_print>:

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout){
	return xMessageBufferReceive(msg_buf_rx, buffer, buf_len, timeout);
}

void queue_print(char *data,int size){
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
	CDC_Receiveq_FS(data,portMAX_DELAY);
 800d9d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f7ff ffe2 	bl	800d9a0 <CDC_Receiveq_FS>
//	xMessageBufferSend(msg_buf_tx,data,size,portMAX_DELAY);
}
 800d9dc:	bf00      	nop
 800d9de:	3708      	adds	r7, #8
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <Print_Task>:

void Print_Task(void * param){
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	f5ad 6db3 	sub.w	sp, sp, #1432	; 0x598
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800d9f0:	f2a3 5394 	subw	r3, r3, #1428	; 0x594
 800d9f4:	6018      	str	r0, [r3, #0]
	char buffer[768];
	uint8_t qtd=0;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	f887 3596 	strb.w	r3, [r7, #1430]	; 0x596
	uint8_t pcInputString[128], pcIndexInput = 0,pcOutputString[512];
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	f887 3597 	strb.w	r3, [r7, #1431]	; 0x597

	BaseType_t xMoreDataToFollow;


	while(1){
		qtd = xMessageBufferReceive(msg_buf_rx,(void *) buffer,sizeof(buffer),portMAX_DELAY);
 800da02:	4b52      	ldr	r3, [pc, #328]	; (800db4c <Print_Task+0x168>)
 800da04:	6818      	ldr	r0, [r3, #0]
 800da06:	f507 7124 	add.w	r1, r7, #656	; 0x290
 800da0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da0e:	f44f 7240 	mov.w	r2, #768	; 0x300
 800da12:	f7fd f8eb 	bl	800abec <xStreamBufferReceive>
 800da16:	4603      	mov	r3, r0
 800da18:	f887 3596 	strb.w	r3, [r7, #1430]	; 0x596
		xRchar = buffer[0];
 800da1c:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800da20:	f5a3 7342 	sub.w	r3, r3, #776	; 0x308
 800da24:	781a      	ldrb	r2, [r3, #0]
 800da26:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800da2a:	f2a3 5389 	subw	r3, r3, #1417	; 0x589
 800da2e:	701a      	strb	r2, [r3, #0]
		if(xRchar == '\r'){
 800da30:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800da34:	f2a3 5389 	subw	r3, r3, #1417	; 0x589
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	2b0d      	cmp	r3, #13
 800da3c:	d137      	bne.n	800daae <Print_Task+0xca>
			CDC_Transmit_FS((uint8_t *)"\n\r", 2);
 800da3e:	2102      	movs	r1, #2
 800da40:	4843      	ldr	r0, [pc, #268]	; (800db50 <Print_Task+0x16c>)
 800da42:	f000 f953 	bl	800dcec <CDC_Transmit_FS>
			pcInputString[pcIndexInput] = '\0';
 800da46:	f897 3597 	ldrb.w	r3, [r7, #1431]	; 0x597
 800da4a:	f507 62b3 	add.w	r2, r7, #1432	; 0x598
 800da4e:	f5a2 7262 	sub.w	r2, r2, #904	; 0x388
 800da52:	2100      	movs	r1, #0
 800da54:	54d1      	strb	r1, [r2, r3]
			do{
							 /* Send the command string to the command interpreter.  Any
							 output generated by the command interpreter will be placed in the
							 pcOutputString buffer. */
				xMoreDataToFollow = FreeRTOS_CLIProcessCommand
 800da56:	f107 0110 	add.w	r1, r7, #16
 800da5a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800da5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da62:	4618      	mov	r0, r3
 800da64:	f7f3 fa68 	bl	8000f38 <FreeRTOS_CLIProcessCommand>
 800da68:	f8c7 0590 	str.w	r0, [r7, #1424]	; 0x590
							   MAX_OUTPUT_LENGTH/* The size of the output buffer. */
						   );

							 /* Write the output generated by the command interpreter to the
							 console. */
				CDC_Transmit_FS((uint8_t *) pcOutputString, strlen((char *) pcOutputString ) );
 800da6c:	f107 0310 	add.w	r3, r7, #16
 800da70:	4618      	mov	r0, r3
 800da72:	f7f2 fc1f 	bl	80002b4 <strlen>
 800da76:	4603      	mov	r3, r0
 800da78:	b29a      	uxth	r2, r3
 800da7a:	f107 0310 	add.w	r3, r7, #16
 800da7e:	4611      	mov	r1, r2
 800da80:	4618      	mov	r0, r3
 800da82:	f000 f933 	bl	800dcec <CDC_Transmit_FS>
			 } while( xMoreDataToFollow != pdFALSE );
 800da86:	f8d7 3590 	ldr.w	r3, [r7, #1424]	; 0x590
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d1e3      	bne.n	800da56 <Print_Task+0x72>


			CDC_Transmit_FS((uint8_t *) "\n\r# ", 4);
 800da8e:	2104      	movs	r1, #4
 800da90:	4830      	ldr	r0, [pc, #192]	; (800db54 <Print_Task+0x170>)
 800da92:	f000 f92b 	bl	800dcec <CDC_Transmit_FS>
//			CDC_Transmit_FS((uint8_t *)pcInputString, pcIndexInput);
			pcIndexInput = 0;
 800da96:	2300      	movs	r3, #0
 800da98:	f887 3597 	strb.w	r3, [r7, #1431]	; 0x597
			pcInputString[pcIndexInput] = '\0';
 800da9c:	f897 3597 	ldrb.w	r3, [r7, #1431]	; 0x597
 800daa0:	f507 62b3 	add.w	r2, r7, #1432	; 0x598
 800daa4:	f5a2 7262 	sub.w	r2, r2, #904	; 0x388
 800daa8:	2100      	movs	r1, #0
 800daaa:	54d1      	strb	r1, [r2, r3]
 800daac:	e7a9      	b.n	800da02 <Print_Task+0x1e>
		} else {
			if( xRchar == '\0' ){
 800daae:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800dab2:	f2a3 5389 	subw	r3, r3, #1417	; 0x589
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d108      	bne.n	800dace <Print_Task+0xea>
				CDC_Transmit_FS((uint8_t *) "Welcome to FreeRTOS\n\r", strlen((char *)"Welcome to FreeRTOS\n\r"));
 800dabc:	2115      	movs	r1, #21
 800dabe:	4826      	ldr	r0, [pc, #152]	; (800db58 <Print_Task+0x174>)
 800dac0:	f000 f914 	bl	800dcec <CDC_Transmit_FS>
				CDC_Transmit_FS((uint8_t *)NewLine, 2);
 800dac4:	2102      	movs	r1, #2
 800dac6:	4825      	ldr	r0, [pc, #148]	; (800db5c <Print_Task+0x178>)
 800dac8:	f000 f910 	bl	800dcec <CDC_Transmit_FS>
 800dacc:	e799      	b.n	800da02 <Print_Task+0x1e>
			} else if (xRchar == 0x7F ){
 800dace:	f507 63b3 	add.w	r3, r7, #1432	; 0x598
 800dad2:	f2a3 5389 	subw	r3, r3, #1417	; 0x589
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	2b7f      	cmp	r3, #127	; 0x7f
 800dada:	d117      	bne.n	800db0c <Print_Task+0x128>
				/*
				 * Backspace was pressed.
				 */
				if(pcIndexInput > 0){
 800dadc:	f897 3597 	ldrb.w	r3, [r7, #1431]	; 0x597
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d08e      	beq.n	800da02 <Print_Task+0x1e>
					CDC_Transmit_FS(&xRchar, 1);
 800dae4:	f107 030f 	add.w	r3, r7, #15
 800dae8:	2101      	movs	r1, #1
 800daea:	4618      	mov	r0, r3
 800daec:	f000 f8fe 	bl	800dcec <CDC_Transmit_FS>

					pcInputString[pcIndexInput] = '\0';
 800daf0:	f897 3597 	ldrb.w	r3, [r7, #1431]	; 0x597
 800daf4:	f507 62b3 	add.w	r2, r7, #1432	; 0x598
 800daf8:	f5a2 7262 	sub.w	r2, r2, #904	; 0x388
 800dafc:	2100      	movs	r1, #0
 800dafe:	54d1      	strb	r1, [r2, r3]
					pcIndexInput--;
 800db00:	f897 3597 	ldrb.w	r3, [r7, #1431]	; 0x597
 800db04:	3b01      	subs	r3, #1
 800db06:	f887 3597 	strb.w	r3, [r7, #1431]	; 0x597
 800db0a:	e77a      	b.n	800da02 <Print_Task+0x1e>
				}
			} else if(pcIndexInput < 64){
 800db0c:	f897 3597 	ldrb.w	r3, [r7, #1431]	; 0x597
 800db10:	2b3f      	cmp	r3, #63	; 0x3f
 800db12:	f63f af76 	bhi.w	800da02 <Print_Task+0x1e>
				(void) qtd;
				CDC_Transmit_FS(&xRchar, qtd);
 800db16:	f897 3596 	ldrb.w	r3, [r7, #1430]	; 0x596
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	f107 030f 	add.w	r3, r7, #15
 800db20:	4611      	mov	r1, r2
 800db22:	4618      	mov	r0, r3
 800db24:	f000 f8e2 	bl	800dcec <CDC_Transmit_FS>
				pcInputString[pcIndexInput] = xRchar;
 800db28:	f897 3597 	ldrb.w	r3, [r7, #1431]	; 0x597
 800db2c:	f507 62b3 	add.w	r2, r7, #1432	; 0x598
 800db30:	f2a2 5289 	subw	r2, r2, #1417	; 0x589
 800db34:	7811      	ldrb	r1, [r2, #0]
 800db36:	f507 62b3 	add.w	r2, r7, #1432	; 0x598
 800db3a:	f5a2 7262 	sub.w	r2, r2, #904	; 0x388
 800db3e:	54d1      	strb	r1, [r2, r3]
				pcIndexInput++;
 800db40:	f897 3597 	ldrb.w	r3, [r7, #1431]	; 0x597
 800db44:	3301      	adds	r3, #1
 800db46:	f887 3597 	strb.w	r3, [r7, #1431]	; 0x597
		qtd = xMessageBufferReceive(msg_buf_rx,(void *) buffer,sizeof(buffer),portMAX_DELAY);
 800db4a:	e75a      	b.n	800da02 <Print_Task+0x1e>
 800db4c:	2000b200 	.word	0x2000b200
 800db50:	08010830 	.word	0x08010830
 800db54:	08010834 	.word	0x08010834
 800db58:	0801083c 	.word	0x0801083c
 800db5c:	08010854 	.word	0x08010854

0800db60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800db64:	2200      	movs	r2, #0
 800db66:	4905      	ldr	r1, [pc, #20]	; (800db7c <CDC_Init_FS+0x1c>)
 800db68:	4805      	ldr	r0, [pc, #20]	; (800db80 <CDC_Init_FS+0x20>)
 800db6a:	f7fa fa87 	bl	800807c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800db6e:	4905      	ldr	r1, [pc, #20]	; (800db84 <CDC_Init_FS+0x24>)
 800db70:	4803      	ldr	r0, [pc, #12]	; (800db80 <CDC_Init_FS+0x20>)
 800db72:	f7fa faa5 	bl	80080c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800db76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800db78:	4618      	mov	r0, r3
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	2000a9fc 	.word	0x2000a9fc
 800db80:	20009f20 	.word	0x20009f20
 800db84:	2000a1fc 	.word	0x2000a1fc

0800db88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800db88:	b480      	push	{r7}
 800db8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800db8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800db8e:	4618      	mov	r0, r3
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	4603      	mov	r3, r0
 800dba0:	6039      	str	r1, [r7, #0]
 800dba2:	71fb      	strb	r3, [r7, #7]
 800dba4:	4613      	mov	r3, r2
 800dba6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  portBASE_TYPE yield = pdFALSE;
 800dba8:	2300      	movs	r3, #0
 800dbaa:	60fb      	str	r3, [r7, #12]
  char data = 0;
 800dbac:	2300      	movs	r3, #0
 800dbae:	72fb      	strb	r3, [r7, #11]
  switch(cmd)
 800dbb0:	79fb      	ldrb	r3, [r7, #7]
 800dbb2:	2b23      	cmp	r3, #35	; 0x23
 800dbb4:	d85f      	bhi.n	800dc76 <CDC_Control_FS+0xde>
 800dbb6:	a201      	add	r2, pc, #4	; (adr r2, 800dbbc <CDC_Control_FS+0x24>)
 800dbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbbc:	0800dc77 	.word	0x0800dc77
 800dbc0:	0800dc77 	.word	0x0800dc77
 800dbc4:	0800dc77 	.word	0x0800dc77
 800dbc8:	0800dc77 	.word	0x0800dc77
 800dbcc:	0800dc77 	.word	0x0800dc77
 800dbd0:	0800dc77 	.word	0x0800dc77
 800dbd4:	0800dc77 	.word	0x0800dc77
 800dbd8:	0800dc77 	.word	0x0800dc77
 800dbdc:	0800dc77 	.word	0x0800dc77
 800dbe0:	0800dc77 	.word	0x0800dc77
 800dbe4:	0800dc77 	.word	0x0800dc77
 800dbe8:	0800dc77 	.word	0x0800dc77
 800dbec:	0800dc77 	.word	0x0800dc77
 800dbf0:	0800dc77 	.word	0x0800dc77
 800dbf4:	0800dc77 	.word	0x0800dc77
 800dbf8:	0800dc77 	.word	0x0800dc77
 800dbfc:	0800dc77 	.word	0x0800dc77
 800dc00:	0800dc77 	.word	0x0800dc77
 800dc04:	0800dc77 	.word	0x0800dc77
 800dc08:	0800dc77 	.word	0x0800dc77
 800dc0c:	0800dc77 	.word	0x0800dc77
 800dc10:	0800dc77 	.word	0x0800dc77
 800dc14:	0800dc77 	.word	0x0800dc77
 800dc18:	0800dc77 	.word	0x0800dc77
 800dc1c:	0800dc77 	.word	0x0800dc77
 800dc20:	0800dc77 	.word	0x0800dc77
 800dc24:	0800dc77 	.word	0x0800dc77
 800dc28:	0800dc77 	.word	0x0800dc77
 800dc2c:	0800dc77 	.word	0x0800dc77
 800dc30:	0800dc77 	.word	0x0800dc77
 800dc34:	0800dc77 	.word	0x0800dc77
 800dc38:	0800dc77 	.word	0x0800dc77
 800dc3c:	0800dc77 	.word	0x0800dc77
 800dc40:	0800dc77 	.word	0x0800dc77
 800dc44:	0800dc4d 	.word	0x0800dc4d
 800dc48:	0800dc77 	.word	0x0800dc77
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
  	  xMessageBufferSendFromISR(msg_buf_rx, &data, 1, &yield);
 800dc4c:	4b0e      	ldr	r3, [pc, #56]	; (800dc88 <CDC_Control_FS+0xf0>)
 800dc4e:	6818      	ldr	r0, [r3, #0]
 800dc50:	f107 030c 	add.w	r3, r7, #12
 800dc54:	f107 010b 	add.w	r1, r7, #11
 800dc58:	2201      	movs	r2, #1
 800dc5a:	f7fc ff19 	bl	800aa90 <xStreamBufferSendFromISR>
  	  portYIELD_FROM_ISR(yield);
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d00a      	beq.n	800dc7a <CDC_Control_FS+0xe2>
 800dc64:	4b09      	ldr	r3, [pc, #36]	; (800dc8c <CDC_Control_FS+0xf4>)
 800dc66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc6a:	601a      	str	r2, [r3, #0]
 800dc6c:	f3bf 8f4f 	dsb	sy
 800dc70:	f3bf 8f6f 	isb	sy

    break;
 800dc74:	e001      	b.n	800dc7a <CDC_Control_FS+0xe2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc76:	bf00      	nop
 800dc78:	e000      	b.n	800dc7c <CDC_Control_FS+0xe4>
    break;
 800dc7a:	bf00      	nop
  }

  return (USBD_OK);
 800dc7c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	2000b200 	.word	0x2000b200
 800dc8c:	e000ed04 	.word	0xe000ed04

0800dc90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b084      	sub	sp, #16
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	portBASE_TYPE yield = pdFALSE;
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	60fb      	str	r3, [r7, #12]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dc9e:	6879      	ldr	r1, [r7, #4]
 800dca0:	480f      	ldr	r0, [pc, #60]	; (800dce0 <CDC_Receive_FS+0x50>)
 800dca2:	f7fa fa0d 	bl	80080c0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dca6:	480e      	ldr	r0, [pc, #56]	; (800dce0 <CDC_Receive_FS+0x50>)
 800dca8:	f7fa fa6e 	bl	8008188 <USBD_CDC_ReceivePacket>

	  xMessageBufferSendFromISR(msg_buf_rx, Buf, *Len, &yield);
 800dcac:	4b0d      	ldr	r3, [pc, #52]	; (800dce4 <CDC_Receive_FS+0x54>)
 800dcae:	6818      	ldr	r0, [r3, #0]
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	f107 030c 	add.w	r3, r7, #12
 800dcb8:	6879      	ldr	r1, [r7, #4]
 800dcba:	f7fc fee9 	bl	800aa90 <xStreamBufferSendFromISR>
	  portYIELD_FROM_ISR(yield);
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d007      	beq.n	800dcd4 <CDC_Receive_FS+0x44>
 800dcc4:	4b08      	ldr	r3, [pc, #32]	; (800dce8 <CDC_Receive_FS+0x58>)
 800dcc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dcca:	601a      	str	r2, [r3, #0]
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	f3bf 8f6f 	isb	sy

	return (USBD_OK);
 800dcd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3710      	adds	r7, #16
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	20009f20 	.word	0x20009f20
 800dce4:	2000b200 	.word	0x2000b200
 800dce8:	e000ed04 	.word	0xe000ed04

0800dcec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dcfc:	4b10      	ldr	r3, [pc, #64]	; (800dd40 <CDC_Transmit_FS+0x54>)
 800dcfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd02:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d001      	beq.n	800dd12 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dd0e:	2301      	movs	r3, #1
 800dd10:	e012      	b.n	800dd38 <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dd12:	887b      	ldrh	r3, [r7, #2]
 800dd14:	461a      	mov	r2, r3
 800dd16:	6879      	ldr	r1, [r7, #4]
 800dd18:	4809      	ldr	r0, [pc, #36]	; (800dd40 <CDC_Transmit_FS+0x54>)
 800dd1a:	f7fa f9af 	bl	800807c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dd1e:	4808      	ldr	r0, [pc, #32]	; (800dd40 <CDC_Transmit_FS+0x54>)
 800dd20:	f7fa f9ec 	bl	80080fc <USBD_CDC_TransmitPacket>
 800dd24:	4603      	mov	r3, r0
 800dd26:	73fb      	strb	r3, [r7, #15]
  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 800dd28:	4b06      	ldr	r3, [pc, #24]	; (800dd44 <CDC_Transmit_FS+0x58>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fc fb8d 	bl	800a450 <xQueueSemaphoreTake>
  /* USER CODE END 7 */
  return result;
 800dd36:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3710      	adds	r7, #16
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}
 800dd40:	20009f20 	.word	0x20009f20
 800dd44:	2000b1fc 	.word	0x2000b1fc

0800dd48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b086      	sub	sp, #24
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	4613      	mov	r3, r2
 800dd54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dd56:	2300      	movs	r3, #0
 800dd58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 800dd5e:	4b0b      	ldr	r3, [pc, #44]	; (800dd8c <CDC_TransmitCplt_FS+0x44>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	f107 0210 	add.w	r2, r7, #16
 800dd66:	4611      	mov	r1, r2
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f7fc fa04 	bl	800a176 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(&tmp);
 800dd6e:	4b08      	ldr	r3, [pc, #32]	; (800dd90 <CDC_TransmitCplt_FS+0x48>)
 800dd70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd74:	601a      	str	r2, [r3, #0]
 800dd76:	f3bf 8f4f 	dsb	sy
 800dd7a:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 800dd7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd82:	4618      	mov	r0, r3
 800dd84:	3718      	adds	r7, #24
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}
 800dd8a:	bf00      	nop
 800dd8c:	2000b1fc 	.word	0x2000b1fc
 800dd90:	e000ed04 	.word	0xe000ed04

0800dd94 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b083      	sub	sp, #12
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	6039      	str	r1, [r7, #0]
 800dd9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	2212      	movs	r2, #18
 800dda4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dda6:	4b03      	ldr	r3, [pc, #12]	; (800ddb4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	370c      	adds	r7, #12
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr
 800ddb4:	200000d8 	.word	0x200000d8

0800ddb8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b083      	sub	sp, #12
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	6039      	str	r1, [r7, #0]
 800ddc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	2204      	movs	r2, #4
 800ddc8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ddca:	4b03      	ldr	r3, [pc, #12]	; (800ddd8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ddcc:	4618      	mov	r0, r3
 800ddce:	370c      	adds	r7, #12
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd6:	4770      	bx	lr
 800ddd8:	200000ec 	.word	0x200000ec

0800dddc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	4603      	mov	r3, r0
 800dde4:	6039      	str	r1, [r7, #0]
 800dde6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dde8:	79fb      	ldrb	r3, [r7, #7]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d105      	bne.n	800ddfa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ddee:	683a      	ldr	r2, [r7, #0]
 800ddf0:	4907      	ldr	r1, [pc, #28]	; (800de10 <USBD_FS_ProductStrDescriptor+0x34>)
 800ddf2:	4808      	ldr	r0, [pc, #32]	; (800de14 <USBD_FS_ProductStrDescriptor+0x38>)
 800ddf4:	f7fb fc10 	bl	8009618 <USBD_GetString>
 800ddf8:	e004      	b.n	800de04 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ddfa:	683a      	ldr	r2, [r7, #0]
 800ddfc:	4904      	ldr	r1, [pc, #16]	; (800de10 <USBD_FS_ProductStrDescriptor+0x34>)
 800ddfe:	4805      	ldr	r0, [pc, #20]	; (800de14 <USBD_FS_ProductStrDescriptor+0x38>)
 800de00:	f7fb fc0a 	bl	8009618 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de04:	4b02      	ldr	r3, [pc, #8]	; (800de10 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800de06:	4618      	mov	r0, r3
 800de08:	3708      	adds	r7, #8
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	2000b20c 	.word	0x2000b20c
 800de14:	08010858 	.word	0x08010858

0800de18 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	4603      	mov	r3, r0
 800de20:	6039      	str	r1, [r7, #0]
 800de22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800de24:	683a      	ldr	r2, [r7, #0]
 800de26:	4904      	ldr	r1, [pc, #16]	; (800de38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800de28:	4804      	ldr	r0, [pc, #16]	; (800de3c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800de2a:	f7fb fbf5 	bl	8009618 <USBD_GetString>
  return USBD_StrDesc;
 800de2e:	4b02      	ldr	r3, [pc, #8]	; (800de38 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800de30:	4618      	mov	r0, r3
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	2000b20c 	.word	0x2000b20c
 800de3c:	08010870 	.word	0x08010870

0800de40 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
 800de46:	4603      	mov	r3, r0
 800de48:	6039      	str	r1, [r7, #0]
 800de4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	221a      	movs	r2, #26
 800de50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800de52:	f000 f843 	bl	800dedc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800de56:	4b02      	ldr	r3, [pc, #8]	; (800de60 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800de58:	4618      	mov	r0, r3
 800de5a:	3708      	adds	r7, #8
 800de5c:	46bd      	mov	sp, r7
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	200000f0 	.word	0x200000f0

0800de64 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	4603      	mov	r3, r0
 800de6c:	6039      	str	r1, [r7, #0]
 800de6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800de70:	79fb      	ldrb	r3, [r7, #7]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d105      	bne.n	800de82 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de76:	683a      	ldr	r2, [r7, #0]
 800de78:	4907      	ldr	r1, [pc, #28]	; (800de98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de7a:	4808      	ldr	r0, [pc, #32]	; (800de9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800de7c:	f7fb fbcc 	bl	8009618 <USBD_GetString>
 800de80:	e004      	b.n	800de8c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de82:	683a      	ldr	r2, [r7, #0]
 800de84:	4904      	ldr	r1, [pc, #16]	; (800de98 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de86:	4805      	ldr	r0, [pc, #20]	; (800de9c <USBD_FS_ConfigStrDescriptor+0x38>)
 800de88:	f7fb fbc6 	bl	8009618 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de8c:	4b02      	ldr	r3, [pc, #8]	; (800de98 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3708      	adds	r7, #8
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	2000b20c 	.word	0x2000b20c
 800de9c:	08010884 	.word	0x08010884

0800dea0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	4603      	mov	r3, r0
 800dea8:	6039      	str	r1, [r7, #0]
 800deaa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800deac:	79fb      	ldrb	r3, [r7, #7]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d105      	bne.n	800debe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800deb2:	683a      	ldr	r2, [r7, #0]
 800deb4:	4907      	ldr	r1, [pc, #28]	; (800ded4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800deb6:	4808      	ldr	r0, [pc, #32]	; (800ded8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800deb8:	f7fb fbae 	bl	8009618 <USBD_GetString>
 800debc:	e004      	b.n	800dec8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800debe:	683a      	ldr	r2, [r7, #0]
 800dec0:	4904      	ldr	r1, [pc, #16]	; (800ded4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dec2:	4805      	ldr	r0, [pc, #20]	; (800ded8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dec4:	f7fb fba8 	bl	8009618 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dec8:	4b02      	ldr	r3, [pc, #8]	; (800ded4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800deca:	4618      	mov	r0, r3
 800decc:	3708      	adds	r7, #8
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	2000b20c 	.word	0x2000b20c
 800ded8:	08010890 	.word	0x08010890

0800dedc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dee2:	4b0f      	ldr	r3, [pc, #60]	; (800df20 <Get_SerialNum+0x44>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dee8:	4b0e      	ldr	r3, [pc, #56]	; (800df24 <Get_SerialNum+0x48>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800deee:	4b0e      	ldr	r3, [pc, #56]	; (800df28 <Get_SerialNum+0x4c>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	4413      	add	r3, r2
 800defa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d009      	beq.n	800df16 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800df02:	2208      	movs	r2, #8
 800df04:	4909      	ldr	r1, [pc, #36]	; (800df2c <Get_SerialNum+0x50>)
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f000 f814 	bl	800df34 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800df0c:	2204      	movs	r2, #4
 800df0e:	4908      	ldr	r1, [pc, #32]	; (800df30 <Get_SerialNum+0x54>)
 800df10:	68b8      	ldr	r0, [r7, #8]
 800df12:	f000 f80f 	bl	800df34 <IntToUnicode>
  }
}
 800df16:	bf00      	nop
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
 800df1e:	bf00      	nop
 800df20:	1fff7a10 	.word	0x1fff7a10
 800df24:	1fff7a14 	.word	0x1fff7a14
 800df28:	1fff7a18 	.word	0x1fff7a18
 800df2c:	200000f2 	.word	0x200000f2
 800df30:	20000102 	.word	0x20000102

0800df34 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800df34:	b480      	push	{r7}
 800df36:	b087      	sub	sp, #28
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	4613      	mov	r3, r2
 800df40:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800df42:	2300      	movs	r3, #0
 800df44:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800df46:	2300      	movs	r3, #0
 800df48:	75fb      	strb	r3, [r7, #23]
 800df4a:	e027      	b.n	800df9c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	0f1b      	lsrs	r3, r3, #28
 800df50:	2b09      	cmp	r3, #9
 800df52:	d80b      	bhi.n	800df6c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	0f1b      	lsrs	r3, r3, #28
 800df58:	b2da      	uxtb	r2, r3
 800df5a:	7dfb      	ldrb	r3, [r7, #23]
 800df5c:	005b      	lsls	r3, r3, #1
 800df5e:	4619      	mov	r1, r3
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	440b      	add	r3, r1
 800df64:	3230      	adds	r2, #48	; 0x30
 800df66:	b2d2      	uxtb	r2, r2
 800df68:	701a      	strb	r2, [r3, #0]
 800df6a:	e00a      	b.n	800df82 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	0f1b      	lsrs	r3, r3, #28
 800df70:	b2da      	uxtb	r2, r3
 800df72:	7dfb      	ldrb	r3, [r7, #23]
 800df74:	005b      	lsls	r3, r3, #1
 800df76:	4619      	mov	r1, r3
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	440b      	add	r3, r1
 800df7c:	3237      	adds	r2, #55	; 0x37
 800df7e:	b2d2      	uxtb	r2, r2
 800df80:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	011b      	lsls	r3, r3, #4
 800df86:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800df88:	7dfb      	ldrb	r3, [r7, #23]
 800df8a:	005b      	lsls	r3, r3, #1
 800df8c:	3301      	adds	r3, #1
 800df8e:	68ba      	ldr	r2, [r7, #8]
 800df90:	4413      	add	r3, r2
 800df92:	2200      	movs	r2, #0
 800df94:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800df96:	7dfb      	ldrb	r3, [r7, #23]
 800df98:	3301      	adds	r3, #1
 800df9a:	75fb      	strb	r3, [r7, #23]
 800df9c:	7dfa      	ldrb	r2, [r7, #23]
 800df9e:	79fb      	ldrb	r3, [r7, #7]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d3d3      	bcc.n	800df4c <IntToUnicode+0x18>
  }
}
 800dfa4:	bf00      	nop
 800dfa6:	bf00      	nop
 800dfa8:	371c      	adds	r7, #28
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
	...

0800dfb4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b08a      	sub	sp, #40	; 0x28
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dfbc:	f107 0314 	add.w	r3, r7, #20
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	601a      	str	r2, [r3, #0]
 800dfc4:	605a      	str	r2, [r3, #4]
 800dfc6:	609a      	str	r2, [r3, #8]
 800dfc8:	60da      	str	r2, [r3, #12]
 800dfca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dfd4:	d13a      	bne.n	800e04c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	613b      	str	r3, [r7, #16]
 800dfda:	4b1e      	ldr	r3, [pc, #120]	; (800e054 <HAL_PCD_MspInit+0xa0>)
 800dfdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfde:	4a1d      	ldr	r2, [pc, #116]	; (800e054 <HAL_PCD_MspInit+0xa0>)
 800dfe0:	f043 0301 	orr.w	r3, r3, #1
 800dfe4:	6313      	str	r3, [r2, #48]	; 0x30
 800dfe6:	4b1b      	ldr	r3, [pc, #108]	; (800e054 <HAL_PCD_MspInit+0xa0>)
 800dfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfea:	f003 0301 	and.w	r3, r3, #1
 800dfee:	613b      	str	r3, [r7, #16]
 800dff0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dff2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dff8:	2302      	movs	r3, #2
 800dffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dffc:	2300      	movs	r3, #0
 800dffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e000:	2303      	movs	r3, #3
 800e002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e004:	230a      	movs	r3, #10
 800e006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e008:	f107 0314 	add.w	r3, r7, #20
 800e00c:	4619      	mov	r1, r3
 800e00e:	4812      	ldr	r0, [pc, #72]	; (800e058 <HAL_PCD_MspInit+0xa4>)
 800e010:	f7f5 f8ca 	bl	80031a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e014:	4b0f      	ldr	r3, [pc, #60]	; (800e054 <HAL_PCD_MspInit+0xa0>)
 800e016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e018:	4a0e      	ldr	r2, [pc, #56]	; (800e054 <HAL_PCD_MspInit+0xa0>)
 800e01a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e01e:	6353      	str	r3, [r2, #52]	; 0x34
 800e020:	2300      	movs	r3, #0
 800e022:	60fb      	str	r3, [r7, #12]
 800e024:	4b0b      	ldr	r3, [pc, #44]	; (800e054 <HAL_PCD_MspInit+0xa0>)
 800e026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e028:	4a0a      	ldr	r2, [pc, #40]	; (800e054 <HAL_PCD_MspInit+0xa0>)
 800e02a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e02e:	6453      	str	r3, [r2, #68]	; 0x44
 800e030:	4b08      	ldr	r3, [pc, #32]	; (800e054 <HAL_PCD_MspInit+0xa0>)
 800e032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e034:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e038:	60fb      	str	r3, [r7, #12]
 800e03a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e03c:	2200      	movs	r2, #0
 800e03e:	2105      	movs	r1, #5
 800e040:	2043      	movs	r0, #67	; 0x43
 800e042:	f7f4 fd0a 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e046:	2043      	movs	r0, #67	; 0x43
 800e048:	f7f4 fd23 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e04c:	bf00      	nop
 800e04e:	3728      	adds	r7, #40	; 0x28
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	40023800 	.word	0x40023800
 800e058:	40020000 	.word	0x40020000

0800e05c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e05c:	b580      	push	{r7, lr}
 800e05e:	b082      	sub	sp, #8
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e070:	4619      	mov	r1, r3
 800e072:	4610      	mov	r0, r2
 800e074:	f7fa f971 	bl	800835a <USBD_LL_SetupStage>
}
 800e078:	bf00      	nop
 800e07a:	3708      	adds	r7, #8
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b082      	sub	sp, #8
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	460b      	mov	r3, r1
 800e08a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e092:	78fa      	ldrb	r2, [r7, #3]
 800e094:	6879      	ldr	r1, [r7, #4]
 800e096:	4613      	mov	r3, r2
 800e098:	00db      	lsls	r3, r3, #3
 800e09a:	4413      	add	r3, r2
 800e09c:	009b      	lsls	r3, r3, #2
 800e09e:	440b      	add	r3, r1
 800e0a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	78fb      	ldrb	r3, [r7, #3]
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	f7fa f9ab 	bl	8008404 <USBD_LL_DataOutStage>
}
 800e0ae:	bf00      	nop
 800e0b0:	3708      	adds	r7, #8
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b082      	sub	sp, #8
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
 800e0be:	460b      	mov	r3, r1
 800e0c0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e0c8:	78fa      	ldrb	r2, [r7, #3]
 800e0ca:	6879      	ldr	r1, [r7, #4]
 800e0cc:	4613      	mov	r3, r2
 800e0ce:	00db      	lsls	r3, r3, #3
 800e0d0:	4413      	add	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	440b      	add	r3, r1
 800e0d6:	334c      	adds	r3, #76	; 0x4c
 800e0d8:	681a      	ldr	r2, [r3, #0]
 800e0da:	78fb      	ldrb	r3, [r7, #3]
 800e0dc:	4619      	mov	r1, r3
 800e0de:	f7fa fa44 	bl	800856a <USBD_LL_DataInStage>
}
 800e0e2:	bf00      	nop
 800e0e4:	3708      	adds	r7, #8
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b082      	sub	sp, #8
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f7fa fb78 	bl	80087ee <USBD_LL_SOF>
}
 800e0fe:	bf00      	nop
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e106:	b580      	push	{r7, lr}
 800e108:	b084      	sub	sp, #16
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e10e:	2301      	movs	r3, #1
 800e110:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	68db      	ldr	r3, [r3, #12]
 800e116:	2b00      	cmp	r3, #0
 800e118:	d102      	bne.n	800e120 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e11a:	2300      	movs	r3, #0
 800e11c:	73fb      	strb	r3, [r7, #15]
 800e11e:	e008      	b.n	800e132 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	68db      	ldr	r3, [r3, #12]
 800e124:	2b02      	cmp	r3, #2
 800e126:	d102      	bne.n	800e12e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e128:	2301      	movs	r3, #1
 800e12a:	73fb      	strb	r3, [r7, #15]
 800e12c:	e001      	b.n	800e132 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e12e:	f7f3 fd4f 	bl	8001bd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e138:	7bfa      	ldrb	r2, [r7, #15]
 800e13a:	4611      	mov	r1, r2
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7fa fb18 	bl	8008772 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e148:	4618      	mov	r0, r3
 800e14a:	f7fa fac0 	bl	80086ce <USBD_LL_Reset>
}
 800e14e:	bf00      	nop
 800e150:	3710      	adds	r7, #16
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}
	...

0800e158 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e166:	4618      	mov	r0, r3
 800e168:	f7fa fb13 	bl	8008792 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	6812      	ldr	r2, [r2, #0]
 800e17a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e17e:	f043 0301 	orr.w	r3, r3, #1
 800e182:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	6a1b      	ldr	r3, [r3, #32]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d005      	beq.n	800e198 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e18c:	4b04      	ldr	r3, [pc, #16]	; (800e1a0 <HAL_PCD_SuspendCallback+0x48>)
 800e18e:	691b      	ldr	r3, [r3, #16]
 800e190:	4a03      	ldr	r2, [pc, #12]	; (800e1a0 <HAL_PCD_SuspendCallback+0x48>)
 800e192:	f043 0306 	orr.w	r3, r3, #6
 800e196:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e198:	bf00      	nop
 800e19a:	3708      	adds	r7, #8
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bd80      	pop	{r7, pc}
 800e1a0:	e000ed00 	.word	0xe000ed00

0800e1a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fa fb03 	bl	80087be <USBD_LL_Resume>
}
 800e1b8:	bf00      	nop
 800e1ba:	3708      	adds	r7, #8
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b082      	sub	sp, #8
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e1d2:	78fa      	ldrb	r2, [r7, #3]
 800e1d4:	4611      	mov	r1, r2
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7fa fb5b 	bl	8008892 <USBD_LL_IsoOUTIncomplete>
}
 800e1dc:	bf00      	nop
 800e1de:	3708      	adds	r7, #8
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e1f6:	78fa      	ldrb	r2, [r7, #3]
 800e1f8:	4611      	mov	r1, r2
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7fa fb17 	bl	800882e <USBD_LL_IsoINIncomplete>
}
 800e200:	bf00      	nop
 800e202:	3708      	adds	r7, #8
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b082      	sub	sp, #8
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e216:	4618      	mov	r0, r3
 800e218:	f7fa fb6d 	bl	80088f6 <USBD_LL_DevConnected>
}
 800e21c:	bf00      	nop
 800e21e:	3708      	adds	r7, #8
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e232:	4618      	mov	r0, r3
 800e234:	f7fa fb6a 	bl	800890c <USBD_LL_DevDisconnected>
}
 800e238:	bf00      	nop
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}

0800e240 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	781b      	ldrb	r3, [r3, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d13c      	bne.n	800e2ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e250:	4a20      	ldr	r2, [pc, #128]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	4a1e      	ldr	r2, [pc, #120]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e25c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e260:	4b1c      	ldr	r3, [pc, #112]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e266:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e268:	4b1a      	ldr	r3, [pc, #104]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e26a:	2204      	movs	r2, #4
 800e26c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e26e:	4b19      	ldr	r3, [pc, #100]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e270:	2202      	movs	r2, #2
 800e272:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e274:	4b17      	ldr	r3, [pc, #92]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e276:	2200      	movs	r2, #0
 800e278:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e27a:	4b16      	ldr	r3, [pc, #88]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e27c:	2202      	movs	r2, #2
 800e27e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e280:	4b14      	ldr	r3, [pc, #80]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e282:	2200      	movs	r2, #0
 800e284:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e286:	4b13      	ldr	r3, [pc, #76]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e288:	2200      	movs	r2, #0
 800e28a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e28c:	4b11      	ldr	r3, [pc, #68]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e28e:	2200      	movs	r2, #0
 800e290:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e292:	4b10      	ldr	r3, [pc, #64]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e294:	2200      	movs	r2, #0
 800e296:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e298:	4b0e      	ldr	r3, [pc, #56]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e29a:	2200      	movs	r2, #0
 800e29c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e29e:	480d      	ldr	r0, [pc, #52]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e2a0:	f7f5 f939 	bl	8003516 <HAL_PCD_Init>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d001      	beq.n	800e2ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e2aa:	f7f3 fc91 	bl	8001bd0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e2ae:	2180      	movs	r1, #128	; 0x80
 800e2b0:	4808      	ldr	r0, [pc, #32]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e2b2:	f7f6 fb90 	bl	80049d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e2b6:	2240      	movs	r2, #64	; 0x40
 800e2b8:	2100      	movs	r1, #0
 800e2ba:	4806      	ldr	r0, [pc, #24]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e2bc:	f7f6 fb44 	bl	8004948 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e2c0:	2280      	movs	r2, #128	; 0x80
 800e2c2:	2101      	movs	r1, #1
 800e2c4:	4803      	ldr	r0, [pc, #12]	; (800e2d4 <USBD_LL_Init+0x94>)
 800e2c6:	f7f6 fb3f 	bl	8004948 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e2ca:	2300      	movs	r3, #0
}
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	3708      	adds	r7, #8
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	2000b40c 	.word	0x2000b40c

0800e2d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	f7f5 fa2e 	bl	8003750 <HAL_PCD_Start>
 800e2f4:	4603      	mov	r3, r0
 800e2f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f000 f942 	bl	800e584 <USBD_Get_USB_Status>
 800e300:	4603      	mov	r3, r0
 800e302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e304:	7bbb      	ldrb	r3, [r7, #14]
}
 800e306:	4618      	mov	r0, r3
 800e308:	3710      	adds	r7, #16
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}

0800e30e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e30e:	b580      	push	{r7, lr}
 800e310:	b084      	sub	sp, #16
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
 800e316:	4608      	mov	r0, r1
 800e318:	4611      	mov	r1, r2
 800e31a:	461a      	mov	r2, r3
 800e31c:	4603      	mov	r3, r0
 800e31e:	70fb      	strb	r3, [r7, #3]
 800e320:	460b      	mov	r3, r1
 800e322:	70bb      	strb	r3, [r7, #2]
 800e324:	4613      	mov	r3, r2
 800e326:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e328:	2300      	movs	r3, #0
 800e32a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e32c:	2300      	movs	r3, #0
 800e32e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e336:	78bb      	ldrb	r3, [r7, #2]
 800e338:	883a      	ldrh	r2, [r7, #0]
 800e33a:	78f9      	ldrb	r1, [r7, #3]
 800e33c:	f7f5 feff 	bl	800413e <HAL_PCD_EP_Open>
 800e340:	4603      	mov	r3, r0
 800e342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e344:	7bfb      	ldrb	r3, [r7, #15]
 800e346:	4618      	mov	r0, r3
 800e348:	f000 f91c 	bl	800e584 <USBD_Get_USB_Status>
 800e34c:	4603      	mov	r3, r0
 800e34e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e350:	7bbb      	ldrb	r3, [r7, #14]
}
 800e352:	4618      	mov	r0, r3
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b084      	sub	sp, #16
 800e35e:	af00      	add	r7, sp, #0
 800e360:	6078      	str	r0, [r7, #4]
 800e362:	460b      	mov	r3, r1
 800e364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e366:	2300      	movs	r3, #0
 800e368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e36a:	2300      	movs	r3, #0
 800e36c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e374:	78fa      	ldrb	r2, [r7, #3]
 800e376:	4611      	mov	r1, r2
 800e378:	4618      	mov	r0, r3
 800e37a:	f7f5 ff48 	bl	800420e <HAL_PCD_EP_Close>
 800e37e:	4603      	mov	r3, r0
 800e380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e382:	7bfb      	ldrb	r3, [r7, #15]
 800e384:	4618      	mov	r0, r3
 800e386:	f000 f8fd 	bl	800e584 <USBD_Get_USB_Status>
 800e38a:	4603      	mov	r3, r0
 800e38c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e38e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e390:	4618      	mov	r0, r3
 800e392:	3710      	adds	r7, #16
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b084      	sub	sp, #16
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3b2:	78fa      	ldrb	r2, [r7, #3]
 800e3b4:	4611      	mov	r1, r2
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	f7f6 f820 	bl	80043fc <HAL_PCD_EP_SetStall>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3c0:	7bfb      	ldrb	r3, [r7, #15]
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f000 f8de 	bl	800e584 <USBD_Get_USB_Status>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	3710      	adds	r7, #16
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}

0800e3d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3d6:	b580      	push	{r7, lr}
 800e3d8:	b084      	sub	sp, #16
 800e3da:	af00      	add	r7, sp, #0
 800e3dc:	6078      	str	r0, [r7, #4]
 800e3de:	460b      	mov	r3, r1
 800e3e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3f0:	78fa      	ldrb	r2, [r7, #3]
 800e3f2:	4611      	mov	r1, r2
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7f6 f865 	bl	80044c4 <HAL_PCD_EP_ClrStall>
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3fe:	7bfb      	ldrb	r3, [r7, #15]
 800e400:	4618      	mov	r0, r3
 800e402:	f000 f8bf 	bl	800e584 <USBD_Get_USB_Status>
 800e406:	4603      	mov	r3, r0
 800e408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e40a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3710      	adds	r7, #16
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e414:	b480      	push	{r7}
 800e416:	b085      	sub	sp, #20
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	460b      	mov	r3, r1
 800e41e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e426:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e428:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	da0b      	bge.n	800e448 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e430:	78fb      	ldrb	r3, [r7, #3]
 800e432:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e436:	68f9      	ldr	r1, [r7, #12]
 800e438:	4613      	mov	r3, r2
 800e43a:	00db      	lsls	r3, r3, #3
 800e43c:	4413      	add	r3, r2
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	440b      	add	r3, r1
 800e442:	333e      	adds	r3, #62	; 0x3e
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	e00b      	b.n	800e460 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e448:	78fb      	ldrb	r3, [r7, #3]
 800e44a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e44e:	68f9      	ldr	r1, [r7, #12]
 800e450:	4613      	mov	r3, r2
 800e452:	00db      	lsls	r3, r3, #3
 800e454:	4413      	add	r3, r2
 800e456:	009b      	lsls	r3, r3, #2
 800e458:	440b      	add	r3, r1
 800e45a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e45e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e460:	4618      	mov	r0, r3
 800e462:	3714      	adds	r7, #20
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr

0800e46c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b084      	sub	sp, #16
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	460b      	mov	r3, r1
 800e476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e478:	2300      	movs	r3, #0
 800e47a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e47c:	2300      	movs	r3, #0
 800e47e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e486:	78fa      	ldrb	r2, [r7, #3]
 800e488:	4611      	mov	r1, r2
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7f5 fe32 	bl	80040f4 <HAL_PCD_SetAddress>
 800e490:	4603      	mov	r3, r0
 800e492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e494:	7bfb      	ldrb	r3, [r7, #15]
 800e496:	4618      	mov	r0, r3
 800e498:	f000 f874 	bl	800e584 <USBD_Get_USB_Status>
 800e49c:	4603      	mov	r3, r0
 800e49e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4a2:	4618      	mov	r0, r3
 800e4a4:	3710      	adds	r7, #16
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}

0800e4aa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b086      	sub	sp, #24
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	60f8      	str	r0, [r7, #12]
 800e4b2:	607a      	str	r2, [r7, #4]
 800e4b4:	603b      	str	r3, [r7, #0]
 800e4b6:	460b      	mov	r3, r1
 800e4b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e4c8:	7af9      	ldrb	r1, [r7, #11]
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	687a      	ldr	r2, [r7, #4]
 800e4ce:	f7f5 ff4b 	bl	8004368 <HAL_PCD_EP_Transmit>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4d6:	7dfb      	ldrb	r3, [r7, #23]
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f000 f853 	bl	800e584 <USBD_Get_USB_Status>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e4e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3718      	adds	r7, #24
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b086      	sub	sp, #24
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	607a      	str	r2, [r7, #4]
 800e4f6:	603b      	str	r3, [r7, #0]
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e500:	2300      	movs	r3, #0
 800e502:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e50a:	7af9      	ldrb	r1, [r7, #11]
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	f7f5 fec7 	bl	80042a2 <HAL_PCD_EP_Receive>
 800e514:	4603      	mov	r3, r0
 800e516:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e518:	7dfb      	ldrb	r3, [r7, #23]
 800e51a:	4618      	mov	r0, r3
 800e51c:	f000 f832 	bl	800e584 <USBD_Get_USB_Status>
 800e520:	4603      	mov	r3, r0
 800e522:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e524:	7dbb      	ldrb	r3, [r7, #22]
}
 800e526:	4618      	mov	r0, r3
 800e528:	3718      	adds	r7, #24
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}

0800e52e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e52e:	b580      	push	{r7, lr}
 800e530:	b082      	sub	sp, #8
 800e532:	af00      	add	r7, sp, #0
 800e534:	6078      	str	r0, [r7, #4]
 800e536:	460b      	mov	r3, r1
 800e538:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e540:	78fa      	ldrb	r2, [r7, #3]
 800e542:	4611      	mov	r1, r2
 800e544:	4618      	mov	r0, r3
 800e546:	f7f5 fef7 	bl	8004338 <HAL_PCD_EP_GetRxCount>
 800e54a:	4603      	mov	r3, r0
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e554:	b480      	push	{r7}
 800e556:	b083      	sub	sp, #12
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e55c:	4b03      	ldr	r3, [pc, #12]	; (800e56c <USBD_static_malloc+0x18>)
}
 800e55e:	4618      	mov	r0, r3
 800e560:	370c      	adds	r7, #12
 800e562:	46bd      	mov	sp, r7
 800e564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e568:	4770      	bx	lr
 800e56a:	bf00      	nop
 800e56c:	2000b918 	.word	0x2000b918

0800e570 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]

}
 800e578:	bf00      	nop
 800e57a:	370c      	adds	r7, #12
 800e57c:	46bd      	mov	sp, r7
 800e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e582:	4770      	bx	lr

0800e584 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e584:	b480      	push	{r7}
 800e586:	b085      	sub	sp, #20
 800e588:	af00      	add	r7, sp, #0
 800e58a:	4603      	mov	r3, r0
 800e58c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e58e:	2300      	movs	r3, #0
 800e590:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e592:	79fb      	ldrb	r3, [r7, #7]
 800e594:	2b03      	cmp	r3, #3
 800e596:	d817      	bhi.n	800e5c8 <USBD_Get_USB_Status+0x44>
 800e598:	a201      	add	r2, pc, #4	; (adr r2, 800e5a0 <USBD_Get_USB_Status+0x1c>)
 800e59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e59e:	bf00      	nop
 800e5a0:	0800e5b1 	.word	0x0800e5b1
 800e5a4:	0800e5b7 	.word	0x0800e5b7
 800e5a8:	0800e5bd 	.word	0x0800e5bd
 800e5ac:	0800e5c3 	.word	0x0800e5c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	73fb      	strb	r3, [r7, #15]
    break;
 800e5b4:	e00b      	b.n	800e5ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e5b6:	2303      	movs	r3, #3
 800e5b8:	73fb      	strb	r3, [r7, #15]
    break;
 800e5ba:	e008      	b.n	800e5ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	73fb      	strb	r3, [r7, #15]
    break;
 800e5c0:	e005      	b.n	800e5ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e5c2:	2303      	movs	r3, #3
 800e5c4:	73fb      	strb	r3, [r7, #15]
    break;
 800e5c6:	e002      	b.n	800e5ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e5c8:	2303      	movs	r3, #3
 800e5ca:	73fb      	strb	r3, [r7, #15]
    break;
 800e5cc:	bf00      	nop
  }
  return usb_status;
 800e5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3714      	adds	r7, #20
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr

0800e5dc <arm_cfft_radix8by2_f32>:
 800e5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e0:	ed2d 8b08 	vpush	{d8-d11}
 800e5e4:	f8b0 e000 	ldrh.w	lr, [r0]
 800e5e8:	6842      	ldr	r2, [r0, #4]
 800e5ea:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 800e5ee:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 800e5f2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 800e5f6:	4607      	mov	r7, r0
 800e5f8:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800e5fc:	f000 80af 	beq.w	800e75e <arm_cfft_radix8by2_f32+0x182>
 800e600:	3310      	adds	r3, #16
 800e602:	18ce      	adds	r6, r1, r3
 800e604:	3210      	adds	r2, #16
 800e606:	4443      	add	r3, r8
 800e608:	f101 0510 	add.w	r5, r1, #16
 800e60c:	f108 0410 	add.w	r4, r8, #16
 800e610:	ed54 1a04 	vldr	s3, [r4, #-16]
 800e614:	ed13 4a04 	vldr	s8, [r3, #-16]
 800e618:	ed53 3a03 	vldr	s7, [r3, #-12]
 800e61c:	ed53 5a02 	vldr	s11, [r3, #-8]
 800e620:	ed13 5a01 	vldr	s10, [r3, #-4]
 800e624:	ed54 6a03 	vldr	s13, [r4, #-12]
 800e628:	ed14 0a02 	vldr	s0, [r4, #-8]
 800e62c:	ed16 2a04 	vldr	s4, [r6, #-16]
 800e630:	ed56 2a03 	vldr	s5, [r6, #-12]
 800e634:	ed15 6a03 	vldr	s12, [r5, #-12]
 800e638:	ed15 7a01 	vldr	s14, [r5, #-4]
 800e63c:	ed15 3a04 	vldr	s6, [r5, #-16]
 800e640:	ed54 7a01 	vldr	s15, [r4, #-4]
 800e644:	ed56 0a02 	vldr	s1, [r6, #-8]
 800e648:	ed16 1a01 	vldr	s2, [r6, #-4]
 800e64c:	ed55 4a02 	vldr	s9, [r5, #-8]
 800e650:	ee73 ba21 	vadd.f32	s23, s6, s3
 800e654:	ee36 ba26 	vadd.f32	s22, s12, s13
 800e658:	ee37 aa27 	vadd.f32	s20, s14, s15
 800e65c:	ee72 9a04 	vadd.f32	s19, s4, s8
 800e660:	ee32 9aa3 	vadd.f32	s18, s5, s7
 800e664:	ee31 8a05 	vadd.f32	s16, s2, s10
 800e668:	ee74 aa80 	vadd.f32	s21, s9, s0
 800e66c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800e670:	ed45 ba04 	vstr	s23, [r5, #-16]
 800e674:	ed05 ba03 	vstr	s22, [r5, #-12]
 800e678:	ed45 aa02 	vstr	s21, [r5, #-8]
 800e67c:	ed05 aa01 	vstr	s20, [r5, #-4]
 800e680:	ed06 8a01 	vstr	s16, [r6, #-4]
 800e684:	ed46 9a04 	vstr	s19, [r6, #-16]
 800e688:	ed06 9a03 	vstr	s18, [r6, #-12]
 800e68c:	ed46 8a02 	vstr	s17, [r6, #-8]
 800e690:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e694:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800e698:	ed12 6a03 	vldr	s12, [r2, #-12]
 800e69c:	ed52 2a04 	vldr	s5, [r2, #-16]
 800e6a0:	ee33 3a61 	vsub.f32	s6, s6, s3
 800e6a4:	ee34 4a42 	vsub.f32	s8, s8, s4
 800e6a8:	ee26 8a86 	vmul.f32	s16, s13, s12
 800e6ac:	ee24 2a06 	vmul.f32	s4, s8, s12
 800e6b0:	ee63 1a22 	vmul.f32	s3, s6, s5
 800e6b4:	ee24 4a22 	vmul.f32	s8, s8, s5
 800e6b8:	ee23 3a06 	vmul.f32	s6, s6, s12
 800e6bc:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800e6c0:	ee23 6a86 	vmul.f32	s12, s7, s12
 800e6c4:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800e6c8:	ee36 6a04 	vadd.f32	s12, s12, s8
 800e6cc:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800e6d0:	ee72 3a63 	vsub.f32	s7, s4, s7
 800e6d4:	ee71 2a88 	vadd.f32	s5, s3, s16
 800e6d8:	ed44 6a03 	vstr	s13, [r4, #-12]
 800e6dc:	ed44 2a04 	vstr	s5, [r4, #-16]
 800e6e0:	ed43 3a04 	vstr	s7, [r3, #-16]
 800e6e4:	ed03 6a03 	vstr	s12, [r3, #-12]
 800e6e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6ec:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800e6f0:	ed12 7a01 	vldr	s14, [r2, #-4]
 800e6f4:	ed52 5a02 	vldr	s11, [r2, #-8]
 800e6f8:	ee35 6a41 	vsub.f32	s12, s10, s2
 800e6fc:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800e700:	ee67 3a87 	vmul.f32	s7, s15, s14
 800e704:	ee26 5a87 	vmul.f32	s10, s13, s14
 800e708:	ee24 4aa5 	vmul.f32	s8, s9, s11
 800e70c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800e710:	ee64 4a87 	vmul.f32	s9, s9, s14
 800e714:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800e718:	ee26 7a07 	vmul.f32	s14, s12, s14
 800e71c:	ee26 6a25 	vmul.f32	s12, s12, s11
 800e720:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800e724:	ee74 5a23 	vadd.f32	s11, s8, s7
 800e728:	ee35 6a46 	vsub.f32	s12, s10, s12
 800e72c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800e730:	f1be 0e01 	subs.w	lr, lr, #1
 800e734:	ed44 5a02 	vstr	s11, [r4, #-8]
 800e738:	f105 0510 	add.w	r5, r5, #16
 800e73c:	ed44 7a01 	vstr	s15, [r4, #-4]
 800e740:	f106 0610 	add.w	r6, r6, #16
 800e744:	ed03 6a02 	vstr	s12, [r3, #-8]
 800e748:	ed03 7a01 	vstr	s14, [r3, #-4]
 800e74c:	f102 0210 	add.w	r2, r2, #16
 800e750:	f104 0410 	add.w	r4, r4, #16
 800e754:	f103 0310 	add.w	r3, r3, #16
 800e758:	f47f af5a 	bne.w	800e610 <arm_cfft_radix8by2_f32+0x34>
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	fa1f f48c 	uxth.w	r4, ip
 800e762:	4608      	mov	r0, r1
 800e764:	2302      	movs	r3, #2
 800e766:	4621      	mov	r1, r4
 800e768:	f000 fc00 	bl	800ef6c <arm_radix8_butterfly_f32>
 800e76c:	ecbd 8b08 	vpop	{d8-d11}
 800e770:	4640      	mov	r0, r8
 800e772:	4621      	mov	r1, r4
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	2302      	movs	r3, #2
 800e778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e77c:	f000 bbf6 	b.w	800ef6c <arm_radix8_butterfly_f32>

0800e780 <arm_cfft_radix8by4_f32>:
 800e780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e784:	ed2d 8b0a 	vpush	{d8-d12}
 800e788:	8802      	ldrh	r2, [r0, #0]
 800e78a:	ed91 6a00 	vldr	s12, [r1]
 800e78e:	b08f      	sub	sp, #60	; 0x3c
 800e790:	460f      	mov	r7, r1
 800e792:	0852      	lsrs	r2, r2, #1
 800e794:	0093      	lsls	r3, r2, #2
 800e796:	900c      	str	r0, [sp, #48]	; 0x30
 800e798:	9103      	str	r1, [sp, #12]
 800e79a:	6841      	ldr	r1, [r0, #4]
 800e79c:	ed97 7a01 	vldr	s14, [r7, #4]
 800e7a0:	4638      	mov	r0, r7
 800e7a2:	4418      	add	r0, r3
 800e7a4:	4606      	mov	r6, r0
 800e7a6:	9009      	str	r0, [sp, #36]	; 0x24
 800e7a8:	4418      	add	r0, r3
 800e7aa:	edd0 6a00 	vldr	s13, [r0]
 800e7ae:	edd6 3a00 	vldr	s7, [r6]
 800e7b2:	edd6 2a01 	vldr	s5, [r6, #4]
 800e7b6:	edd0 7a01 	vldr	s15, [r0, #4]
 800e7ba:	900a      	str	r0, [sp, #40]	; 0x28
 800e7bc:	ee76 5a26 	vadd.f32	s11, s12, s13
 800e7c0:	4604      	mov	r4, r0
 800e7c2:	4625      	mov	r5, r4
 800e7c4:	441c      	add	r4, r3
 800e7c6:	ed94 4a00 	vldr	s8, [r4]
 800e7ca:	ed94 5a01 	vldr	s10, [r4, #4]
 800e7ce:	9401      	str	r4, [sp, #4]
 800e7d0:	ee75 4aa3 	vadd.f32	s9, s11, s7
 800e7d4:	4630      	mov	r0, r6
 800e7d6:	ee74 4a24 	vadd.f32	s9, s8, s9
 800e7da:	463e      	mov	r6, r7
 800e7dc:	ee14 ea90 	vmov	lr, s9
 800e7e0:	ee76 6a66 	vsub.f32	s13, s12, s13
 800e7e4:	f846 eb08 	str.w	lr, [r6], #8
 800e7e8:	ee37 6a27 	vadd.f32	s12, s14, s15
 800e7ec:	edd0 4a01 	vldr	s9, [r0, #4]
 800e7f0:	9604      	str	r6, [sp, #16]
 800e7f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e7f6:	9e01      	ldr	r6, [sp, #4]
 800e7f8:	ee32 3aa6 	vadd.f32	s6, s5, s13
 800e7fc:	ed96 2a01 	vldr	s4, [r6, #4]
 800e800:	ee36 7a24 	vadd.f32	s14, s12, s9
 800e804:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800e808:	ee77 4ae3 	vsub.f32	s9, s15, s7
 800e80c:	ee36 6a62 	vsub.f32	s12, s12, s5
 800e810:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800e814:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800e818:	ee73 3a45 	vsub.f32	s7, s6, s10
 800e81c:	4604      	mov	r4, r0
 800e81e:	ee36 6a45 	vsub.f32	s12, s12, s10
 800e822:	ee75 6a26 	vadd.f32	s13, s10, s13
 800e826:	46a3      	mov	fp, r4
 800e828:	ee37 7a02 	vadd.f32	s14, s14, s4
 800e82c:	ee34 5a84 	vadd.f32	s10, s9, s8
 800e830:	ee13 8a90 	vmov	r8, s7
 800e834:	46a4      	mov	ip, r4
 800e836:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800e83a:	ed87 7a01 	vstr	s14, [r7, #4]
 800e83e:	f84b 8b08 	str.w	r8, [fp], #8
 800e842:	f1ac 0704 	sub.w	r7, ip, #4
 800e846:	ed8c 5a01 	vstr	s10, [ip, #4]
 800e84a:	f101 0c08 	add.w	ip, r1, #8
 800e84e:	462c      	mov	r4, r5
 800e850:	f8cd c014 	str.w	ip, [sp, #20]
 800e854:	ee15 ca90 	vmov	ip, s11
 800e858:	f844 cb08 	str.w	ip, [r4], #8
 800e85c:	9407      	str	r4, [sp, #28]
 800e85e:	f101 0410 	add.w	r4, r1, #16
 800e862:	ed85 6a01 	vstr	s12, [r5, #4]
 800e866:	0852      	lsrs	r2, r2, #1
 800e868:	9402      	str	r4, [sp, #8]
 800e86a:	462c      	mov	r4, r5
 800e86c:	f101 0518 	add.w	r5, r1, #24
 800e870:	920b      	str	r2, [sp, #44]	; 0x2c
 800e872:	46b2      	mov	sl, r6
 800e874:	9506      	str	r5, [sp, #24]
 800e876:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800e87a:	3a02      	subs	r2, #2
 800e87c:	ee16 5a90 	vmov	r5, s13
 800e880:	46b6      	mov	lr, r6
 800e882:	4630      	mov	r0, r6
 800e884:	0852      	lsrs	r2, r2, #1
 800e886:	f84a 5b08 	str.w	r5, [sl], #8
 800e88a:	f1a0 0604 	sub.w	r6, r0, #4
 800e88e:	edce 7a01 	vstr	s15, [lr, #4]
 800e892:	9208      	str	r2, [sp, #32]
 800e894:	f000 8130 	beq.w	800eaf8 <arm_cfft_radix8by4_f32+0x378>
 800e898:	4691      	mov	r9, r2
 800e89a:	9a03      	ldr	r2, [sp, #12]
 800e89c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800e8a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800e8a4:	3b08      	subs	r3, #8
 800e8a6:	f102 0510 	add.w	r5, r2, #16
 800e8aa:	f101 0c20 	add.w	ip, r1, #32
 800e8ae:	f1a4 020c 	sub.w	r2, r4, #12
 800e8b2:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800e8b6:	4433      	add	r3, r6
 800e8b8:	3410      	adds	r4, #16
 800e8ba:	4650      	mov	r0, sl
 800e8bc:	4659      	mov	r1, fp
 800e8be:	ed55 3a02 	vldr	s7, [r5, #-8]
 800e8c2:	ed14 5a02 	vldr	s10, [r4, #-8]
 800e8c6:	ed91 7a00 	vldr	s14, [r1]
 800e8ca:	edd0 7a00 	vldr	s15, [r0]
 800e8ce:	ed15 4a01 	vldr	s8, [r5, #-4]
 800e8d2:	ed54 5a01 	vldr	s11, [r4, #-4]
 800e8d6:	edd0 6a01 	vldr	s13, [r0, #4]
 800e8da:	ed91 6a01 	vldr	s12, [r1, #4]
 800e8de:	ee33 8a85 	vadd.f32	s16, s7, s10
 800e8e2:	ee34 0a25 	vadd.f32	s0, s8, s11
 800e8e6:	ee78 4a07 	vadd.f32	s9, s16, s14
 800e8ea:	ee74 5a65 	vsub.f32	s11, s8, s11
 800e8ee:	ee77 4aa4 	vadd.f32	s9, s15, s9
 800e8f2:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800e8f6:	ed45 4a02 	vstr	s9, [r5, #-8]
 800e8fa:	edd1 4a01 	vldr	s9, [r1, #4]
 800e8fe:	ed90 4a01 	vldr	s8, [r0, #4]
 800e902:	ee70 4a24 	vadd.f32	s9, s0, s9
 800e906:	ee76 aa05 	vadd.f32	s21, s12, s10
 800e90a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800e90e:	ee35 aac7 	vsub.f32	s20, s11, s14
 800e912:	ed45 4a01 	vstr	s9, [r5, #-4]
 800e916:	edd6 1a00 	vldr	s3, [r6]
 800e91a:	edd7 0a00 	vldr	s1, [r7]
 800e91e:	ed92 4a02 	vldr	s8, [r2, #8]
 800e922:	edd3 3a02 	vldr	s7, [r3, #8]
 800e926:	ed93 2a01 	vldr	s4, [r3, #4]
 800e92a:	ed16 1a01 	vldr	s2, [r6, #-4]
 800e92e:	edd2 2a01 	vldr	s5, [r2, #4]
 800e932:	ed57 9a01 	vldr	s19, [r7, #-4]
 800e936:	ee70 4aa1 	vadd.f32	s9, s1, s3
 800e93a:	ee39 3a81 	vadd.f32	s6, s19, s2
 800e93e:	ee74 8a84 	vadd.f32	s17, s9, s8
 800e942:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800e946:	ee73 8aa8 	vadd.f32	s17, s7, s17
 800e94a:	ee7a aae6 	vsub.f32	s21, s21, s13
 800e94e:	ee18 aa90 	vmov	sl, s17
 800e952:	f847 a908 	str.w	sl, [r7], #-8
 800e956:	edd2 8a01 	vldr	s17, [r2, #4]
 800e95a:	ed93 9a01 	vldr	s18, [r3, #4]
 800e95e:	ee73 8a28 	vadd.f32	s17, s6, s17
 800e962:	ee3a aa27 	vadd.f32	s20, s20, s15
 800e966:	ee78 8a89 	vadd.f32	s17, s17, s18
 800e96a:	ee74 0a63 	vsub.f32	s1, s8, s7
 800e96e:	edc7 8a01 	vstr	s17, [r7, #4]
 800e972:	ed18 ba02 	vldr	s22, [r8, #-8]
 800e976:	ed58 8a01 	vldr	s17, [r8, #-4]
 800e97a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800e97e:	ee6a ba28 	vmul.f32	s23, s20, s17
 800e982:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800e986:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800e98a:	ee30 9a81 	vadd.f32	s18, s1, s2
 800e98e:	ee79 9a82 	vadd.f32	s19, s19, s4
 800e992:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800e996:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800e99a:	ee69 baa8 	vmul.f32	s23, s19, s17
 800e99e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800e9a2:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800e9a6:	ee69 8a28 	vmul.f32	s17, s18, s17
 800e9aa:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800e9ae:	ee1c aa10 	vmov	sl, s24
 800e9b2:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800e9b6:	f841 ab08 	str.w	sl, [r1], #8
 800e9ba:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800e9be:	ee3b bacb 	vsub.f32	s22, s23, s22
 800e9c2:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800e9c6:	ee33 3a62 	vsub.f32	s6, s6, s5
 800e9ca:	ed01 aa01 	vstr	s20, [r1, #-4]
 800e9ce:	edc2 8a01 	vstr	s17, [r2, #4]
 800e9d2:	ed82 ba02 	vstr	s22, [r2, #8]
 800e9d6:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800e9da:	ee74 3a63 	vsub.f32	s7, s8, s7
 800e9de:	ee38 8a47 	vsub.f32	s16, s16, s14
 800e9e2:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800e9e6:	ee30 0a46 	vsub.f32	s0, s0, s12
 800e9ea:	ee33 3a42 	vsub.f32	s6, s6, s4
 800e9ee:	ee38 8a67 	vsub.f32	s16, s16, s15
 800e9f2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800e9f6:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800e9fa:	ee63 8a04 	vmul.f32	s17, s6, s8
 800e9fe:	ee28 aa24 	vmul.f32	s20, s16, s9
 800ea02:	ee60 9a04 	vmul.f32	s19, s0, s8
 800ea06:	ee28 8a04 	vmul.f32	s16, s16, s8
 800ea0a:	ee20 0a24 	vmul.f32	s0, s0, s9
 800ea0e:	ee63 3a84 	vmul.f32	s7, s7, s8
 800ea12:	ee39 4a68 	vsub.f32	s8, s18, s17
 800ea16:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800ea1a:	ee14 aa10 	vmov	sl, s8
 800ea1e:	ee30 0a48 	vsub.f32	s0, s0, s16
 800ea22:	ee63 4a24 	vmul.f32	s9, s6, s9
 800ea26:	ed44 9a02 	vstr	s19, [r4, #-8]
 800ea2a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800ea2e:	ed04 0a01 	vstr	s0, [r4, #-4]
 800ea32:	f846 a908 	str.w	sl, [r6], #-8
 800ea36:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ea3a:	ee35 7a87 	vadd.f32	s14, s11, s14
 800ea3e:	edc6 3a01 	vstr	s7, [r6, #4]
 800ea42:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ea46:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea4a:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800ea4e:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800ea52:	ee67 5a86 	vmul.f32	s11, s15, s12
 800ea56:	ee26 5a87 	vmul.f32	s10, s13, s14
 800ea5a:	ee72 2a62 	vsub.f32	s5, s4, s5
 800ea5e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800ea62:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800ea66:	ee75 5a25 	vadd.f32	s11, s10, s11
 800ea6a:	ee62 0a86 	vmul.f32	s1, s5, s12
 800ea6e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ea72:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ea76:	ee21 6a06 	vmul.f32	s12, s2, s12
 800ea7a:	ee62 2a87 	vmul.f32	s5, s5, s14
 800ea7e:	ee21 1a07 	vmul.f32	s2, s2, s14
 800ea82:	ee15 aa90 	vmov	sl, s11
 800ea86:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ea8a:	f840 ab08 	str.w	sl, [r0], #8
 800ea8e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800ea92:	ee76 2a22 	vadd.f32	s5, s12, s5
 800ea96:	f1b9 0901 	subs.w	r9, r9, #1
 800ea9a:	ed40 7a01 	vstr	s15, [r0, #-4]
 800ea9e:	f105 0508 	add.w	r5, r5, #8
 800eaa2:	ed83 1a02 	vstr	s2, [r3, #8]
 800eaa6:	edc3 2a01 	vstr	s5, [r3, #4]
 800eaaa:	f108 0808 	add.w	r8, r8, #8
 800eaae:	f1a2 0208 	sub.w	r2, r2, #8
 800eab2:	f10c 0c10 	add.w	ip, ip, #16
 800eab6:	f104 0408 	add.w	r4, r4, #8
 800eaba:	f10e 0e18 	add.w	lr, lr, #24
 800eabe:	f1a3 0308 	sub.w	r3, r3, #8
 800eac2:	f47f aefc 	bne.w	800e8be <arm_cfft_radix8by4_f32+0x13e>
 800eac6:	9908      	ldr	r1, [sp, #32]
 800eac8:	9802      	ldr	r0, [sp, #8]
 800eaca:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800eace:	00cb      	lsls	r3, r1, #3
 800ead0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ead4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800ead8:	9102      	str	r1, [sp, #8]
 800eada:	9904      	ldr	r1, [sp, #16]
 800eadc:	4419      	add	r1, r3
 800eade:	9104      	str	r1, [sp, #16]
 800eae0:	9905      	ldr	r1, [sp, #20]
 800eae2:	4419      	add	r1, r3
 800eae4:	9105      	str	r1, [sp, #20]
 800eae6:	9907      	ldr	r1, [sp, #28]
 800eae8:	449b      	add	fp, r3
 800eaea:	4419      	add	r1, r3
 800eaec:	449a      	add	sl, r3
 800eaee:	9b06      	ldr	r3, [sp, #24]
 800eaf0:	9107      	str	r1, [sp, #28]
 800eaf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eaf6:	9306      	str	r3, [sp, #24]
 800eaf8:	9a04      	ldr	r2, [sp, #16]
 800eafa:	9807      	ldr	r0, [sp, #28]
 800eafc:	edd2 3a00 	vldr	s7, [r2]
 800eb00:	ed90 4a00 	vldr	s8, [r0]
 800eb04:	eddb 7a00 	vldr	s15, [fp]
 800eb08:	ed9a 3a00 	vldr	s6, [sl]
 800eb0c:	edd2 4a01 	vldr	s9, [r2, #4]
 800eb10:	ed90 7a01 	vldr	s14, [r0, #4]
 800eb14:	ed9b 2a01 	vldr	s4, [fp, #4]
 800eb18:	edda 5a01 	vldr	s11, [sl, #4]
 800eb1c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800eb20:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800eb22:	ee73 6a84 	vadd.f32	s13, s7, s8
 800eb26:	ee34 6a87 	vadd.f32	s12, s9, s14
 800eb2a:	ee36 5aa7 	vadd.f32	s10, s13, s15
 800eb2e:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800eb32:	ee33 5a05 	vadd.f32	s10, s6, s10
 800eb36:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800eb3a:	ed82 5a00 	vstr	s10, [r2]
 800eb3e:	ed9b 5a01 	vldr	s10, [fp, #4]
 800eb42:	edda 4a01 	vldr	s9, [sl, #4]
 800eb46:	ee36 5a05 	vadd.f32	s10, s12, s10
 800eb4a:	ee72 3a04 	vadd.f32	s7, s4, s8
 800eb4e:	ee35 5a24 	vadd.f32	s10, s10, s9
 800eb52:	ee77 4a67 	vsub.f32	s9, s14, s15
 800eb56:	ed82 5a01 	vstr	s10, [r2, #4]
 800eb5a:	9a05      	ldr	r2, [sp, #20]
 800eb5c:	ee34 5a83 	vadd.f32	s10, s9, s6
 800eb60:	edd2 1a00 	vldr	s3, [r2]
 800eb64:	edd2 2a01 	vldr	s5, [r2, #4]
 800eb68:	9a02      	ldr	r2, [sp, #8]
 800eb6a:	ee73 3ae5 	vsub.f32	s7, s7, s11
 800eb6e:	ee36 6a42 	vsub.f32	s12, s12, s4
 800eb72:	ee63 4aa1 	vmul.f32	s9, s7, s3
 800eb76:	ee63 3aa2 	vmul.f32	s7, s7, s5
 800eb7a:	ee65 2a22 	vmul.f32	s5, s10, s5
 800eb7e:	ee25 5a21 	vmul.f32	s10, s10, s3
 800eb82:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800eb86:	ee35 5a63 	vsub.f32	s10, s10, s7
 800eb8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800eb8e:	edcb 2a00 	vstr	s5, [fp]
 800eb92:	ed8b 5a01 	vstr	s10, [fp, #4]
 800eb96:	edd2 3a01 	vldr	s7, [r2, #4]
 800eb9a:	ed92 5a00 	vldr	s10, [r2]
 800eb9e:	9a06      	ldr	r2, [sp, #24]
 800eba0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800eba4:	ee36 6a65 	vsub.f32	s12, s12, s11
 800eba8:	ee66 4a85 	vmul.f32	s9, s13, s10
 800ebac:	ee26 5a05 	vmul.f32	s10, s12, s10
 800ebb0:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800ebb4:	ee26 6a23 	vmul.f32	s12, s12, s7
 800ebb8:	ee75 6a66 	vsub.f32	s13, s10, s13
 800ebbc:	ee34 6a86 	vadd.f32	s12, s9, s12
 800ebc0:	ee34 4a42 	vsub.f32	s8, s8, s4
 800ebc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ebc8:	edc0 6a01 	vstr	s13, [r0, #4]
 800ebcc:	ed80 6a00 	vstr	s12, [r0]
 800ebd0:	ed92 6a01 	vldr	s12, [r2, #4]
 800ebd4:	9803      	ldr	r0, [sp, #12]
 800ebd6:	ee77 7a43 	vsub.f32	s15, s14, s6
 800ebda:	ee75 5a84 	vadd.f32	s11, s11, s8
 800ebde:	ed92 7a00 	vldr	s14, [r2]
 800ebe2:	ee65 6a87 	vmul.f32	s13, s11, s14
 800ebe6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ebea:	ee65 5a86 	vmul.f32	s11, s11, s12
 800ebee:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ebf2:	ee77 5a65 	vsub.f32	s11, s14, s11
 800ebf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ebfa:	edca 5a01 	vstr	s11, [sl, #4]
 800ebfe:	edca 7a00 	vstr	s15, [sl]
 800ec02:	6872      	ldr	r2, [r6, #4]
 800ec04:	4621      	mov	r1, r4
 800ec06:	2304      	movs	r3, #4
 800ec08:	f000 f9b0 	bl	800ef6c <arm_radix8_butterfly_f32>
 800ec0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec0e:	6872      	ldr	r2, [r6, #4]
 800ec10:	4621      	mov	r1, r4
 800ec12:	2304      	movs	r3, #4
 800ec14:	f000 f9aa 	bl	800ef6c <arm_radix8_butterfly_f32>
 800ec18:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ec1a:	6872      	ldr	r2, [r6, #4]
 800ec1c:	4621      	mov	r1, r4
 800ec1e:	2304      	movs	r3, #4
 800ec20:	f000 f9a4 	bl	800ef6c <arm_radix8_butterfly_f32>
 800ec24:	9801      	ldr	r0, [sp, #4]
 800ec26:	6872      	ldr	r2, [r6, #4]
 800ec28:	4621      	mov	r1, r4
 800ec2a:	2304      	movs	r3, #4
 800ec2c:	b00f      	add	sp, #60	; 0x3c
 800ec2e:	ecbd 8b0a 	vpop	{d8-d12}
 800ec32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec36:	f000 b999 	b.w	800ef6c <arm_radix8_butterfly_f32>
 800ec3a:	bf00      	nop

0800ec3c <arm_cfft_f32>:
 800ec3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec40:	2a01      	cmp	r2, #1
 800ec42:	4606      	mov	r6, r0
 800ec44:	4617      	mov	r7, r2
 800ec46:	460c      	mov	r4, r1
 800ec48:	4698      	mov	r8, r3
 800ec4a:	8805      	ldrh	r5, [r0, #0]
 800ec4c:	d054      	beq.n	800ecf8 <arm_cfft_f32+0xbc>
 800ec4e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800ec52:	d04c      	beq.n	800ecee <arm_cfft_f32+0xb2>
 800ec54:	d916      	bls.n	800ec84 <arm_cfft_f32+0x48>
 800ec56:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800ec5a:	d01a      	beq.n	800ec92 <arm_cfft_f32+0x56>
 800ec5c:	d95c      	bls.n	800ed18 <arm_cfft_f32+0xdc>
 800ec5e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800ec62:	d044      	beq.n	800ecee <arm_cfft_f32+0xb2>
 800ec64:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 800ec68:	d105      	bne.n	800ec76 <arm_cfft_f32+0x3a>
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	4629      	mov	r1, r5
 800ec6e:	6872      	ldr	r2, [r6, #4]
 800ec70:	2301      	movs	r3, #1
 800ec72:	f000 f97b 	bl	800ef6c <arm_radix8_butterfly_f32>
 800ec76:	f1b8 0f00 	cmp.w	r8, #0
 800ec7a:	d111      	bne.n	800eca0 <arm_cfft_f32+0x64>
 800ec7c:	2f01      	cmp	r7, #1
 800ec7e:	d016      	beq.n	800ecae <arm_cfft_f32+0x72>
 800ec80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec84:	2d20      	cmp	r5, #32
 800ec86:	d032      	beq.n	800ecee <arm_cfft_f32+0xb2>
 800ec88:	d94a      	bls.n	800ed20 <arm_cfft_f32+0xe4>
 800ec8a:	2d40      	cmp	r5, #64	; 0x40
 800ec8c:	d0ed      	beq.n	800ec6a <arm_cfft_f32+0x2e>
 800ec8e:	2d80      	cmp	r5, #128	; 0x80
 800ec90:	d1f1      	bne.n	800ec76 <arm_cfft_f32+0x3a>
 800ec92:	4630      	mov	r0, r6
 800ec94:	4621      	mov	r1, r4
 800ec96:	f7ff fca1 	bl	800e5dc <arm_cfft_radix8by2_f32>
 800ec9a:	f1b8 0f00 	cmp.w	r8, #0
 800ec9e:	d0ed      	beq.n	800ec7c <arm_cfft_f32+0x40>
 800eca0:	4620      	mov	r0, r4
 800eca2:	89b1      	ldrh	r1, [r6, #12]
 800eca4:	68b2      	ldr	r2, [r6, #8]
 800eca6:	f7f1 fa9b 	bl	80001e0 <arm_bitreversal_32>
 800ecaa:	2f01      	cmp	r7, #1
 800ecac:	d1e8      	bne.n	800ec80 <arm_cfft_f32+0x44>
 800ecae:	ee07 5a90 	vmov	s15, r5
 800ecb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ecba:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 800ecbe:	2d00      	cmp	r5, #0
 800ecc0:	d0de      	beq.n	800ec80 <arm_cfft_f32+0x44>
 800ecc2:	f104 0108 	add.w	r1, r4, #8
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	3301      	adds	r3, #1
 800ecca:	429d      	cmp	r5, r3
 800eccc:	f101 0108 	add.w	r1, r1, #8
 800ecd0:	ed11 7a04 	vldr	s14, [r1, #-16]
 800ecd4:	ed51 7a03 	vldr	s15, [r1, #-12]
 800ecd8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ecdc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ece0:	ed01 7a04 	vstr	s14, [r1, #-16]
 800ece4:	ed41 7a03 	vstr	s15, [r1, #-12]
 800ece8:	d1ee      	bne.n	800ecc8 <arm_cfft_f32+0x8c>
 800ecea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecee:	4630      	mov	r0, r6
 800ecf0:	4621      	mov	r1, r4
 800ecf2:	f7ff fd45 	bl	800e780 <arm_cfft_radix8by4_f32>
 800ecf6:	e7be      	b.n	800ec76 <arm_cfft_f32+0x3a>
 800ecf8:	b1ad      	cbz	r5, 800ed26 <arm_cfft_f32+0xea>
 800ecfa:	f101 030c 	add.w	r3, r1, #12
 800ecfe:	2200      	movs	r2, #0
 800ed00:	ed53 7a02 	vldr	s15, [r3, #-8]
 800ed04:	3201      	adds	r2, #1
 800ed06:	eef1 7a67 	vneg.f32	s15, s15
 800ed0a:	4295      	cmp	r5, r2
 800ed0c:	ed43 7a02 	vstr	s15, [r3, #-8]
 800ed10:	f103 0308 	add.w	r3, r3, #8
 800ed14:	d1f4      	bne.n	800ed00 <arm_cfft_f32+0xc4>
 800ed16:	e79a      	b.n	800ec4e <arm_cfft_f32+0x12>
 800ed18:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800ed1c:	d0a5      	beq.n	800ec6a <arm_cfft_f32+0x2e>
 800ed1e:	e7aa      	b.n	800ec76 <arm_cfft_f32+0x3a>
 800ed20:	2d10      	cmp	r5, #16
 800ed22:	d0b6      	beq.n	800ec92 <arm_cfft_f32+0x56>
 800ed24:	e7a7      	b.n	800ec76 <arm_cfft_f32+0x3a>
 800ed26:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800ed2a:	d894      	bhi.n	800ec56 <arm_cfft_f32+0x1a>
 800ed2c:	e7aa      	b.n	800ec84 <arm_cfft_f32+0x48>
 800ed2e:	bf00      	nop

0800ed30 <arm_cmplx_mag_f32>:
 800ed30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed34:	ea5f 0892 	movs.w	r8, r2, lsr #2
 800ed38:	b084      	sub	sp, #16
 800ed3a:	d07f      	beq.n	800ee3c <arm_cmplx_mag_f32+0x10c>
 800ed3c:	2700      	movs	r7, #0
 800ed3e:	f100 0420 	add.w	r4, r0, #32
 800ed42:	f101 0510 	add.w	r5, r1, #16
 800ed46:	4646      	mov	r6, r8
 800ed48:	e05a      	b.n	800ee00 <arm_cmplx_mag_f32+0xd0>
 800ed4a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800ed4e:	eeb4 0a40 	vcmp.f32	s0, s0
 800ed52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed56:	f040 80a4 	bne.w	800eea2 <arm_cmplx_mag_f32+0x172>
 800ed5a:	ed05 0a04 	vstr	s0, [r5, #-16]
 800ed5e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800ed62:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800ed66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ed6a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ed6e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ed72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ed76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed7a:	f2c0 808f 	blt.w	800ee9c <arm_cmplx_mag_f32+0x16c>
 800ed7e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800ed82:	eeb4 0a40 	vcmp.f32	s0, s0
 800ed86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed8a:	f040 80af 	bne.w	800eeec <arm_cmplx_mag_f32+0x1bc>
 800ed8e:	ed05 0a03 	vstr	s0, [r5, #-12]
 800ed92:	ed54 7a04 	vldr	s15, [r4, #-16]
 800ed96:	ed14 0a03 	vldr	s0, [r4, #-12]
 800ed9a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ed9e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800eda2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800eda6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800edaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edae:	db72      	blt.n	800ee96 <arm_cmplx_mag_f32+0x166>
 800edb0:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800edb4:	eeb4 0a40 	vcmp.f32	s0, s0
 800edb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edbc:	f040 808c 	bne.w	800eed8 <arm_cmplx_mag_f32+0x1a8>
 800edc0:	ed05 0a02 	vstr	s0, [r5, #-8]
 800edc4:	ed54 7a02 	vldr	s15, [r4, #-8]
 800edc8:	ed14 0a01 	vldr	s0, [r4, #-4]
 800edcc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800edd0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800edd4:	ee77 7a80 	vadd.f32	s15, s15, s0
 800edd8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800eddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ede0:	db20      	blt.n	800ee24 <arm_cmplx_mag_f32+0xf4>
 800ede2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800ede6:	eeb4 0a40 	vcmp.f32	s0, s0
 800edea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800edee:	d169      	bne.n	800eec4 <arm_cmplx_mag_f32+0x194>
 800edf0:	3e01      	subs	r6, #1
 800edf2:	ed05 0a01 	vstr	s0, [r5, #-4]
 800edf6:	f104 0420 	add.w	r4, r4, #32
 800edfa:	f105 0510 	add.w	r5, r5, #16
 800edfe:	d019      	beq.n	800ee34 <arm_cmplx_mag_f32+0x104>
 800ee00:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 800ee04:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 800ee08:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ee0c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ee10:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ee14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ee18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee1c:	da95      	bge.n	800ed4a <arm_cmplx_mag_f32+0x1a>
 800ee1e:	f845 7c10 	str.w	r7, [r5, #-16]
 800ee22:	e79c      	b.n	800ed5e <arm_cmplx_mag_f32+0x2e>
 800ee24:	3e01      	subs	r6, #1
 800ee26:	f845 7c04 	str.w	r7, [r5, #-4]
 800ee2a:	f104 0420 	add.w	r4, r4, #32
 800ee2e:	f105 0510 	add.w	r5, r5, #16
 800ee32:	d1e5      	bne.n	800ee00 <arm_cmplx_mag_f32+0xd0>
 800ee34:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 800ee38:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800ee3c:	f012 0503 	ands.w	r5, r2, #3
 800ee40:	d026      	beq.n	800ee90 <arm_cmplx_mag_f32+0x160>
 800ee42:	2600      	movs	r6, #0
 800ee44:	f100 0408 	add.w	r4, r0, #8
 800ee48:	e00c      	b.n	800ee64 <arm_cmplx_mag_f32+0x134>
 800ee4a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800ee4e:	eeb4 0a40 	vcmp.f32	s0, s0
 800ee52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee56:	d12e      	bne.n	800eeb6 <arm_cmplx_mag_f32+0x186>
 800ee58:	3d01      	subs	r5, #1
 800ee5a:	ed01 0a01 	vstr	s0, [r1, #-4]
 800ee5e:	f104 0408 	add.w	r4, r4, #8
 800ee62:	d015      	beq.n	800ee90 <arm_cmplx_mag_f32+0x160>
 800ee64:	ed54 7a02 	vldr	s15, [r4, #-8]
 800ee68:	ed14 0a01 	vldr	s0, [r4, #-4]
 800ee6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ee70:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ee74:	3104      	adds	r1, #4
 800ee76:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ee7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ee7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee82:	dae2      	bge.n	800ee4a <arm_cmplx_mag_f32+0x11a>
 800ee84:	3d01      	subs	r5, #1
 800ee86:	f841 6c04 	str.w	r6, [r1, #-4]
 800ee8a:	f104 0408 	add.w	r4, r4, #8
 800ee8e:	d1e9      	bne.n	800ee64 <arm_cmplx_mag_f32+0x134>
 800ee90:	b004      	add	sp, #16
 800ee92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee96:	f845 7c08 	str.w	r7, [r5, #-8]
 800ee9a:	e793      	b.n	800edc4 <arm_cmplx_mag_f32+0x94>
 800ee9c:	f845 7c0c 	str.w	r7, [r5, #-12]
 800eea0:	e777      	b.n	800ed92 <arm_cmplx_mag_f32+0x62>
 800eea2:	eeb0 0a67 	vmov.f32	s0, s15
 800eea6:	9203      	str	r2, [sp, #12]
 800eea8:	9102      	str	r1, [sp, #8]
 800eeaa:	9001      	str	r0, [sp, #4]
 800eeac:	f001 f968 	bl	8010180 <sqrtf>
 800eeb0:	a801      	add	r0, sp, #4
 800eeb2:	c807      	ldmia	r0, {r0, r1, r2}
 800eeb4:	e751      	b.n	800ed5a <arm_cmplx_mag_f32+0x2a>
 800eeb6:	eeb0 0a67 	vmov.f32	s0, s15
 800eeba:	9101      	str	r1, [sp, #4]
 800eebc:	f001 f960 	bl	8010180 <sqrtf>
 800eec0:	9901      	ldr	r1, [sp, #4]
 800eec2:	e7c9      	b.n	800ee58 <arm_cmplx_mag_f32+0x128>
 800eec4:	eeb0 0a67 	vmov.f32	s0, s15
 800eec8:	9203      	str	r2, [sp, #12]
 800eeca:	9102      	str	r1, [sp, #8]
 800eecc:	9001      	str	r0, [sp, #4]
 800eece:	f001 f957 	bl	8010180 <sqrtf>
 800eed2:	a801      	add	r0, sp, #4
 800eed4:	c807      	ldmia	r0, {r0, r1, r2}
 800eed6:	e78b      	b.n	800edf0 <arm_cmplx_mag_f32+0xc0>
 800eed8:	eeb0 0a67 	vmov.f32	s0, s15
 800eedc:	9203      	str	r2, [sp, #12]
 800eede:	9102      	str	r1, [sp, #8]
 800eee0:	9001      	str	r0, [sp, #4]
 800eee2:	f001 f94d 	bl	8010180 <sqrtf>
 800eee6:	a801      	add	r0, sp, #4
 800eee8:	c807      	ldmia	r0, {r0, r1, r2}
 800eeea:	e769      	b.n	800edc0 <arm_cmplx_mag_f32+0x90>
 800eeec:	eeb0 0a67 	vmov.f32	s0, s15
 800eef0:	9203      	str	r2, [sp, #12]
 800eef2:	9102      	str	r1, [sp, #8]
 800eef4:	9001      	str	r0, [sp, #4]
 800eef6:	f001 f943 	bl	8010180 <sqrtf>
 800eefa:	a801      	add	r0, sp, #4
 800eefc:	c807      	ldmia	r0, {r0, r1, r2}
 800eefe:	e746      	b.n	800ed8e <arm_cmplx_mag_f32+0x5e>

0800ef00 <arm_scale_f32>:
 800ef00:	b470      	push	{r4, r5, r6}
 800ef02:	0896      	lsrs	r6, r2, #2
 800ef04:	d025      	beq.n	800ef52 <arm_scale_f32+0x52>
 800ef06:	f100 0410 	add.w	r4, r0, #16
 800ef0a:	f101 0310 	add.w	r3, r1, #16
 800ef0e:	4635      	mov	r5, r6
 800ef10:	ed14 6a04 	vldr	s12, [r4, #-16]
 800ef14:	ed54 6a03 	vldr	s13, [r4, #-12]
 800ef18:	ed14 7a02 	vldr	s14, [r4, #-8]
 800ef1c:	ed54 7a01 	vldr	s15, [r4, #-4]
 800ef20:	ee26 6a00 	vmul.f32	s12, s12, s0
 800ef24:	ee66 6a80 	vmul.f32	s13, s13, s0
 800ef28:	ee27 7a00 	vmul.f32	s14, s14, s0
 800ef2c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ef30:	3d01      	subs	r5, #1
 800ef32:	ed03 6a04 	vstr	s12, [r3, #-16]
 800ef36:	ed43 6a03 	vstr	s13, [r3, #-12]
 800ef3a:	ed03 7a02 	vstr	s14, [r3, #-8]
 800ef3e:	ed43 7a01 	vstr	s15, [r3, #-4]
 800ef42:	f104 0410 	add.w	r4, r4, #16
 800ef46:	f103 0310 	add.w	r3, r3, #16
 800ef4a:	d1e1      	bne.n	800ef10 <arm_scale_f32+0x10>
 800ef4c:	0136      	lsls	r6, r6, #4
 800ef4e:	4430      	add	r0, r6
 800ef50:	4431      	add	r1, r6
 800ef52:	f012 0203 	ands.w	r2, r2, #3
 800ef56:	d007      	beq.n	800ef68 <arm_scale_f32+0x68>
 800ef58:	ecf0 7a01 	vldmia	r0!, {s15}
 800ef5c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ef60:	3a01      	subs	r2, #1
 800ef62:	ece1 7a01 	vstmia	r1!, {s15}
 800ef66:	d1f7      	bne.n	800ef58 <arm_scale_f32+0x58>
 800ef68:	bc70      	pop	{r4, r5, r6}
 800ef6a:	4770      	bx	lr

0800ef6c <arm_radix8_butterfly_f32>:
 800ef6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef70:	ed2d 8b10 	vpush	{d8-d15}
 800ef74:	b09d      	sub	sp, #116	; 0x74
 800ef76:	461c      	mov	r4, r3
 800ef78:	ed9f bac8 	vldr	s22, [pc, #800]	; 800f29c <arm_radix8_butterfly_f32+0x330>
 800ef7c:	921a      	str	r2, [sp, #104]	; 0x68
 800ef7e:	1d03      	adds	r3, r0, #4
 800ef80:	4682      	mov	sl, r0
 800ef82:	4689      	mov	r9, r1
 800ef84:	468b      	mov	fp, r1
 800ef86:	931b      	str	r3, [sp, #108]	; 0x6c
 800ef88:	9400      	str	r4, [sp, #0]
 800ef8a:	469e      	mov	lr, r3
 800ef8c:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800ef90:	005a      	lsls	r2, r3, #1
 800ef92:	18d6      	adds	r6, r2, r3
 800ef94:	18f5      	adds	r5, r6, r3
 800ef96:	9203      	str	r2, [sp, #12]
 800ef98:	195a      	adds	r2, r3, r5
 800ef9a:	18d0      	adds	r0, r2, r3
 800ef9c:	00df      	lsls	r7, r3, #3
 800ef9e:	1819      	adds	r1, r3, r0
 800efa0:	463c      	mov	r4, r7
 800efa2:	9701      	str	r7, [sp, #4]
 800efa4:	4457      	add	r7, sl
 800efa6:	930c      	str	r3, [sp, #48]	; 0x30
 800efa8:	eb0a 02c2 	add.w	r2, sl, r2, lsl #3
 800efac:	011b      	lsls	r3, r3, #4
 800efae:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
 800efb2:	eb07 0c04 	add.w	ip, r7, r4
 800efb6:	9c00      	ldr	r4, [sp, #0]
 800efb8:	9302      	str	r3, [sp, #8]
 800efba:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 800efbe:	eb0a 05c5 	add.w	r5, sl, r5, lsl #3
 800efc2:	3204      	adds	r2, #4
 800efc4:	3104      	adds	r1, #4
 800efc6:	eb0a 00c0 	add.w	r0, sl, r0, lsl #3
 800efca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800efce:	f04f 0800 	mov.w	r8, #0
 800efd2:	eddc 7a00 	vldr	s15, [ip]
 800efd6:	edd7 6a00 	vldr	s13, [r7]
 800efda:	edd6 3a00 	vldr	s7, [r6]
 800efde:	ed5e aa01 	vldr	s21, [lr, #-4]
 800efe2:	edd5 4a00 	vldr	s9, [r5]
 800efe6:	ed90 2a00 	vldr	s4, [r0]
 800efea:	ed12 7a01 	vldr	s14, [r2, #-4]
 800efee:	ed51 0a01 	vldr	s1, [r1, #-4]
 800eff2:	ee77 8a82 	vadd.f32	s17, s15, s4
 800eff6:	ee33 4aa0 	vadd.f32	s8, s7, s1
 800effa:	ee76 1a87 	vadd.f32	s3, s13, s14
 800effe:	ee3a 3aa4 	vadd.f32	s6, s21, s9
 800f002:	ee31 6a84 	vadd.f32	s12, s3, s8
 800f006:	ee33 5a28 	vadd.f32	s10, s6, s17
 800f00a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f00e:	ee75 6a06 	vadd.f32	s13, s10, s12
 800f012:	ee35 5a46 	vsub.f32	s10, s10, s12
 800f016:	ed4e 6a01 	vstr	s13, [lr, #-4]
 800f01a:	ed85 5a00 	vstr	s10, [r5]
 800f01e:	ed96 1a01 	vldr	s2, [r6, #4]
 800f022:	edd7 5a01 	vldr	s11, [r7, #4]
 800f026:	ed92 aa00 	vldr	s20, [r2]
 800f02a:	ed91 6a00 	vldr	s12, [r1]
 800f02e:	ed9e 9a00 	vldr	s18, [lr]
 800f032:	ed95 5a01 	vldr	s10, [r5, #4]
 800f036:	eddc 6a01 	vldr	s13, [ip, #4]
 800f03a:	edd0 9a01 	vldr	s19, [r0, #4]
 800f03e:	ee73 0ae0 	vsub.f32	s1, s7, s1
 800f042:	ee71 2a46 	vsub.f32	s5, s2, s12
 800f046:	ee75 3aca 	vsub.f32	s7, s11, s20
 800f04a:	ee37 0a60 	vsub.f32	s0, s14, s1
 800f04e:	ee33 8aa2 	vadd.f32	s16, s7, s5
 800f052:	ee37 7a20 	vadd.f32	s14, s14, s1
 800f056:	ee73 2ae2 	vsub.f32	s5, s7, s5
 800f05a:	ee37 2ac2 	vsub.f32	s4, s15, s4
 800f05e:	ee79 3a05 	vadd.f32	s7, s18, s10
 800f062:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800f066:	ee39 5a45 	vsub.f32	s10, s18, s10
 800f06a:	ee7a 4ae4 	vsub.f32	s9, s21, s9
 800f06e:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800f072:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800f076:	ee31 6a06 	vadd.f32	s12, s2, s12
 800f07a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800f07e:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800f082:	ee62 2a8b 	vmul.f32	s5, s5, s22
 800f086:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800f08a:	ee33 3a68 	vsub.f32	s6, s6, s17
 800f08e:	ee36 0a88 	vadd.f32	s0, s13, s16
 800f092:	ee75 8a86 	vadd.f32	s17, s11, s12
 800f096:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800f09a:	ee71 1ac4 	vsub.f32	s3, s3, s8
 800f09e:	ee75 6a62 	vsub.f32	s13, s10, s5
 800f0a2:	ee33 4ac9 	vsub.f32	s8, s7, s18
 800f0a6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800f0aa:	ee33 1a89 	vadd.f32	s2, s7, s18
 800f0ae:	ee74 5ae0 	vsub.f32	s11, s9, s1
 800f0b2:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800f0b6:	ee75 4a22 	vadd.f32	s9, s10, s5
 800f0ba:	ee32 5a27 	vadd.f32	s10, s4, s15
 800f0be:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f0c2:	ee33 8a06 	vadd.f32	s16, s6, s12
 800f0c6:	ee75 2a87 	vadd.f32	s5, s11, s14
 800f0ca:	ee31 9a28 	vadd.f32	s18, s2, s17
 800f0ce:	ee33 6a46 	vsub.f32	s12, s6, s12
 800f0d2:	ee74 0a61 	vsub.f32	s1, s8, s3
 800f0d6:	ee33 2a80 	vadd.f32	s4, s7, s0
 800f0da:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800f0de:	ee34 3ac5 	vsub.f32	s6, s9, s10
 800f0e2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f0e6:	ee31 1a68 	vsub.f32	s2, s2, s17
 800f0ea:	ee34 4a21 	vadd.f32	s8, s8, s3
 800f0ee:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800f0f2:	ee74 4a85 	vadd.f32	s9, s9, s10
 800f0f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f0fa:	44d8      	add	r8, fp
 800f0fc:	45c1      	cmp	r9, r8
 800f0fe:	ed8e 9a00 	vstr	s18, [lr]
 800f102:	ed85 1a01 	vstr	s2, [r5, #4]
 800f106:	449e      	add	lr, r3
 800f108:	ed8c 8a00 	vstr	s16, [ip]
 800f10c:	441d      	add	r5, r3
 800f10e:	ed80 6a00 	vstr	s12, [r0]
 800f112:	edcc 0a01 	vstr	s1, [ip, #4]
 800f116:	ed80 4a01 	vstr	s8, [r0, #4]
 800f11a:	449c      	add	ip, r3
 800f11c:	ed87 2a00 	vstr	s4, [r7]
 800f120:	4418      	add	r0, r3
 800f122:	ed41 3a01 	vstr	s7, [r1, #-4]
 800f126:	ed42 2a01 	vstr	s5, [r2, #-4]
 800f12a:	ed86 7a00 	vstr	s14, [r6]
 800f12e:	ed87 3a01 	vstr	s6, [r7, #4]
 800f132:	edc1 4a00 	vstr	s9, [r1]
 800f136:	441f      	add	r7, r3
 800f138:	edc2 5a00 	vstr	s11, [r2]
 800f13c:	4419      	add	r1, r3
 800f13e:	edc6 6a01 	vstr	s13, [r6, #4]
 800f142:	441a      	add	r2, r3
 800f144:	441e      	add	r6, r3
 800f146:	f63f af44 	bhi.w	800efd2 <arm_radix8_butterfly_f32+0x66>
 800f14a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f14c:	2907      	cmp	r1, #7
 800f14e:	4620      	mov	r0, r4
 800f150:	f240 81e9 	bls.w	800f526 <arm_radix8_butterfly_f32+0x5ba>
 800f154:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800f158:	193e      	adds	r6, r7, r4
 800f15a:	1935      	adds	r5, r6, r4
 800f15c:	9c03      	ldr	r4, [sp, #12]
 800f15e:	9000      	str	r0, [sp, #0]
 800f160:	4622      	mov	r2, r4
 800f162:	3201      	adds	r2, #1
 800f164:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800f168:	9900      	ldr	r1, [sp, #0]
 800f16a:	1828      	adds	r0, r5, r0
 800f16c:	eb00 0e01 	add.w	lr, r0, r1
 800f170:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f172:	440a      	add	r2, r1
 800f174:	eb04 0c01 	add.w	ip, r4, r1
 800f178:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 800f17c:	eb0a 0ec2 	add.w	lr, sl, r2, lsl #3
 800f180:	9a00      	ldr	r2, [sp, #0]
 800f182:	940f      	str	r4, [sp, #60]	; 0x3c
 800f184:	00ed      	lsls	r5, r5, #3
 800f186:	9511      	str	r5, [sp, #68]	; 0x44
 800f188:	00d5      	lsls	r5, r2, #3
 800f18a:	950d      	str	r5, [sp, #52]	; 0x34
 800f18c:	9d01      	ldr	r5, [sp, #4]
 800f18e:	3508      	adds	r5, #8
 800f190:	9516      	str	r5, [sp, #88]	; 0x58
 800f192:	9d02      	ldr	r5, [sp, #8]
 800f194:	3508      	adds	r5, #8
 800f196:	0114      	lsls	r4, r2, #4
 800f198:	9517      	str	r5, [sp, #92]	; 0x5c
 800f19a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f19c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800f19e:	940e      	str	r4, [sp, #56]	; 0x38
 800f1a0:	00c0      	lsls	r0, r0, #3
 800f1a2:	9010      	str	r0, [sp, #64]	; 0x40
 800f1a4:	18aa      	adds	r2, r5, r2
 800f1a6:	9207      	str	r2, [sp, #28]
 800f1a8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f1aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800f1ac:	18aa      	adds	r2, r5, r2
 800f1ae:	9208      	str	r2, [sp, #32]
 800f1b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1b2:	18aa      	adds	r2, r5, r2
 800f1b4:	9209      	str	r2, [sp, #36]	; 0x24
 800f1b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f1ba:	f10e 0204 	add.w	r2, lr, #4
 800f1be:	920a      	str	r2, [sp, #40]	; 0x28
 800f1c0:	00c9      	lsls	r1, r1, #3
 800f1c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f1c4:	310c      	adds	r1, #12
 800f1c6:	00f6      	lsls	r6, r6, #3
 800f1c8:	ea4f 00cc 	mov.w	r0, ip, lsl #3
 800f1cc:	9114      	str	r1, [sp, #80]	; 0x50
 800f1ce:	18a9      	adds	r1, r5, r2
 800f1d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f1d2:	9612      	str	r6, [sp, #72]	; 0x48
 800f1d4:	00ff      	lsls	r7, r7, #3
 800f1d6:	19ae      	adds	r6, r5, r6
 800f1d8:	3008      	adds	r0, #8
 800f1da:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 800f1de:	9606      	str	r6, [sp, #24]
 800f1e0:	9019      	str	r0, [sp, #100]	; 0x64
 800f1e2:	18aa      	adds	r2, r5, r2
 800f1e4:	0164      	lsls	r4, r4, #5
 800f1e6:	19ee      	adds	r6, r5, r7
 800f1e8:	f10c 000c 	add.w	r0, ip, #12
 800f1ec:	9713      	str	r7, [sp, #76]	; 0x4c
 800f1ee:	9604      	str	r6, [sp, #16]
 800f1f0:	9015      	str	r0, [sp, #84]	; 0x54
 800f1f2:	9103      	str	r1, [sp, #12]
 800f1f4:	9205      	str	r2, [sp, #20]
 800f1f6:	f104 0208 	add.w	r2, r4, #8
 800f1fa:	9218      	str	r2, [sp, #96]	; 0x60
 800f1fc:	f04f 0801 	mov.w	r8, #1
 800f200:	2200      	movs	r2, #0
 800f202:	f102 0108 	add.w	r1, r2, #8
 800f206:	460f      	mov	r7, r1
 800f208:	910b      	str	r1, [sp, #44]	; 0x2c
 800f20a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f20c:	188e      	adds	r6, r1, r2
 800f20e:	9916      	ldr	r1, [sp, #88]	; 0x58
 800f210:	188d      	adds	r5, r1, r2
 800f212:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800f214:	188c      	adds	r4, r1, r2
 800f216:	9919      	ldr	r1, [sp, #100]	; 0x64
 800f218:	1888      	adds	r0, r1, r2
 800f21a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800f21c:	eb01 0c02 	add.w	ip, r1, r2
 800f220:	9915      	ldr	r1, [sp, #84]	; 0x54
 800f222:	440a      	add	r2, r1
 800f224:	9903      	ldr	r1, [sp, #12]
 800f226:	edd1 fa00 	vldr	s31, [r1]
 800f22a:	9905      	ldr	r1, [sp, #20]
 800f22c:	ed91 fa00 	vldr	s30, [r1]
 800f230:	9904      	ldr	r1, [sp, #16]
 800f232:	edd1 ea00 	vldr	s29, [r1]
 800f236:	9906      	ldr	r1, [sp, #24]
 800f238:	ed91 ea00 	vldr	s28, [r1]
 800f23c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f23e:	edd1 da00 	vldr	s27, [r1]
 800f242:	9908      	ldr	r1, [sp, #32]
 800f244:	ed91 da00 	vldr	s26, [r1]
 800f248:	9907      	ldr	r1, [sp, #28]
 800f24a:	edd1 ca00 	vldr	s25, [r1]
 800f24e:	9903      	ldr	r1, [sp, #12]
 800f250:	ed91 ca01 	vldr	s24, [r1, #4]
 800f254:	9905      	ldr	r1, [sp, #20]
 800f256:	edd1 ba01 	vldr	s23, [r1, #4]
 800f25a:	9904      	ldr	r1, [sp, #16]
 800f25c:	edd1 aa01 	vldr	s21, [r1, #4]
 800f260:	9906      	ldr	r1, [sp, #24]
 800f262:	ed91 aa01 	vldr	s20, [r1, #4]
 800f266:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f268:	edd1 7a01 	vldr	s15, [r1, #4]
 800f26c:	9908      	ldr	r1, [sp, #32]
 800f26e:	edcd 7a00 	vstr	s15, [sp]
 800f272:	edd1 7a01 	vldr	s15, [r1, #4]
 800f276:	9907      	ldr	r1, [sp, #28]
 800f278:	edcd 7a01 	vstr	s15, [sp, #4]
 800f27c:	edd1 7a01 	vldr	s15, [r1, #4]
 800f280:	eb0a 0e07 	add.w	lr, sl, r7
 800f284:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800f286:	edcd 7a02 	vstr	s15, [sp, #8]
 800f28a:	eb0c 010a 	add.w	r1, ip, sl
 800f28e:	4456      	add	r6, sl
 800f290:	4455      	add	r5, sl
 800f292:	4454      	add	r4, sl
 800f294:	4450      	add	r0, sl
 800f296:	4452      	add	r2, sl
 800f298:	46c4      	mov	ip, r8
 800f29a:	e001      	b.n	800f2a0 <arm_radix8_butterfly_f32+0x334>
 800f29c:	3f3504f3 	.word	0x3f3504f3
 800f2a0:	ed96 5a00 	vldr	s10, [r6]
 800f2a4:	ed52 9a01 	vldr	s19, [r2, #-4]
 800f2a8:	ed11 6a01 	vldr	s12, [r1, #-4]
 800f2ac:	edd0 7a00 	vldr	s15, [r0]
 800f2b0:	ed17 7a01 	vldr	s14, [r7, #-4]
 800f2b4:	edde 3a00 	vldr	s7, [lr]
 800f2b8:	ed94 3a00 	vldr	s6, [r4]
 800f2bc:	ed95 2a00 	vldr	s4, [r5]
 800f2c0:	ed9e 0a01 	vldr	s0, [lr, #4]
 800f2c4:	ee33 8a85 	vadd.f32	s16, s7, s10
 800f2c8:	ee32 1a06 	vadd.f32	s2, s4, s12
 800f2cc:	ee33 4a29 	vadd.f32	s8, s6, s19
 800f2d0:	ee77 4a87 	vadd.f32	s9, s15, s14
 800f2d4:	ee78 1a04 	vadd.f32	s3, s16, s8
 800f2d8:	ee71 6a24 	vadd.f32	s13, s2, s9
 800f2dc:	ee32 2a46 	vsub.f32	s4, s4, s12
 800f2e0:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800f2e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f2e8:	ed8e 6a00 	vstr	s12, [lr]
 800f2ec:	edd0 8a01 	vldr	s17, [r0, #4]
 800f2f0:	ed95 9a01 	vldr	s18, [r5, #4]
 800f2f4:	edd1 2a00 	vldr	s5, [r1]
 800f2f8:	ed97 7a00 	vldr	s14, [r7]
 800f2fc:	edd4 0a01 	vldr	s1, [r4, #4]
 800f300:	ed96 6a01 	vldr	s12, [r6, #4]
 800f304:	edd2 5a00 	vldr	s11, [r2]
 800f308:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800f30c:	ee33 3a69 	vsub.f32	s6, s6, s19
 800f310:	ee39 5a62 	vsub.f32	s10, s18, s5
 800f314:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800f318:	ee38 4a44 	vsub.f32	s8, s16, s8
 800f31c:	ee38 7a87 	vadd.f32	s14, s17, s14
 800f320:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800f324:	ee79 2a22 	vadd.f32	s5, s18, s5
 800f328:	ee75 8a69 	vsub.f32	s17, s10, s19
 800f32c:	ee32 9a27 	vadd.f32	s18, s4, s15
 800f330:	ee35 5a29 	vadd.f32	s10, s10, s19
 800f334:	ee72 7a67 	vsub.f32	s15, s4, s15
 800f338:	ee30 2a06 	vadd.f32	s4, s0, s12
 800f33c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 800f340:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800f344:	ee32 9a08 	vadd.f32	s18, s4, s16
 800f348:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800f34c:	ee32 2a48 	vsub.f32	s4, s4, s16
 800f350:	ee71 4a64 	vsub.f32	s9, s2, s9
 800f354:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800f358:	ee32 1a87 	vadd.f32	s2, s5, s14
 800f35c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800f360:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800f364:	ee30 6a46 	vsub.f32	s12, s0, s12
 800f368:	ee73 0a29 	vadd.f32	s1, s6, s19
 800f36c:	ee36 0a28 	vadd.f32	s0, s12, s17
 800f370:	ee33 3a69 	vsub.f32	s6, s6, s19
 800f374:	ee32 7a64 	vsub.f32	s14, s4, s9
 800f378:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800f37c:	ee36 6a68 	vsub.f32	s12, s12, s17
 800f380:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800f384:	ee75 8a85 	vadd.f32	s17, s11, s10
 800f388:	ee74 3a22 	vadd.f32	s7, s8, s5
 800f38c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 800f390:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800f394:	ee79 1a41 	vsub.f32	s3, s18, s2
 800f398:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800f39c:	ee76 5a43 	vsub.f32	s11, s12, s6
 800f3a0:	ee74 2a62 	vsub.f32	s5, s8, s5
 800f3a4:	ee72 4a24 	vadd.f32	s9, s4, s9
 800f3a8:	ee30 4a60 	vsub.f32	s8, s0, s1
 800f3ac:	ee79 8ae8 	vsub.f32	s17, s19, s17
 800f3b0:	ee30 0a20 	vadd.f32	s0, s0, s1
 800f3b4:	ee77 9a85 	vadd.f32	s19, s15, s10
 800f3b8:	ee36 6a03 	vadd.f32	s12, s12, s6
 800f3bc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800f3c0:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800f3c4:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800f3c8:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800f3cc:	ee2a 3a21 	vmul.f32	s6, s20, s3
 800f3d0:	ee39 1a01 	vadd.f32	s2, s18, s2
 800f3d4:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800f3d8:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800f3dc:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 800f3e0:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800f3e4:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800f3e8:	ee35 3a03 	vadd.f32	s6, s10, s6
 800f3ec:	ee72 6a66 	vsub.f32	s13, s4, s13
 800f3f0:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800f3f4:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800f3f8:	ed9d 4a02 	vldr	s8, [sp, #8]
 800f3fc:	ed8e 1a01 	vstr	s2, [lr, #4]
 800f400:	ee77 3a63 	vsub.f32	s7, s14, s7
 800f404:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800f408:	ed9d 7a01 	vldr	s14, [sp, #4]
 800f40c:	ed86 3a00 	vstr	s6, [r6]
 800f410:	ee30 9a89 	vadd.f32	s18, s1, s18
 800f414:	ee32 2a05 	vadd.f32	s4, s4, s10
 800f418:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800f41c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 800f420:	ee67 2a22 	vmul.f32	s5, s14, s5
 800f424:	ee64 1a00 	vmul.f32	s3, s8, s0
 800f428:	ee27 7a24 	vmul.f32	s14, s14, s9
 800f42c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 800f430:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800f434:	ee64 8a28 	vmul.f32	s17, s8, s17
 800f438:	ed9d 4a00 	vldr	s8, [sp]
 800f43c:	edc6 6a01 	vstr	s13, [r6, #4]
 800f440:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800f444:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800f448:	ee64 9a29 	vmul.f32	s19, s8, s19
 800f44c:	ee24 4a25 	vmul.f32	s8, s8, s11
 800f450:	ee30 7a87 	vadd.f32	s14, s1, s14
 800f454:	ee74 4a84 	vadd.f32	s9, s9, s8
 800f458:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800f45c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 800f460:	ee2c 0a80 	vmul.f32	s0, s25, s0
 800f464:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800f468:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 800f46c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 800f470:	ee75 1a21 	vadd.f32	s3, s10, s3
 800f474:	ee30 0a68 	vsub.f32	s0, s0, s17
 800f478:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800f47c:	ee70 0a84 	vadd.f32	s1, s1, s8
 800f480:	ee36 6a67 	vsub.f32	s12, s12, s15
 800f484:	44dc      	add	ip, fp
 800f486:	45e1      	cmp	r9, ip
 800f488:	ed84 9a00 	vstr	s18, [r4]
 800f48c:	edc4 3a01 	vstr	s7, [r4, #4]
 800f490:	449e      	add	lr, r3
 800f492:	ed02 7a01 	vstr	s14, [r2, #-4]
 800f496:	edc2 2a00 	vstr	s5, [r2]
 800f49a:	441e      	add	r6, r3
 800f49c:	ed85 2a00 	vstr	s4, [r5]
 800f4a0:	ed85 8a01 	vstr	s16, [r5, #4]
 800f4a4:	441c      	add	r4, r3
 800f4a6:	ed47 1a01 	vstr	s3, [r7, #-4]
 800f4aa:	ed87 0a00 	vstr	s0, [r7]
 800f4ae:	441a      	add	r2, r3
 800f4b0:	ed41 4a01 	vstr	s9, [r1, #-4]
 800f4b4:	edc1 9a00 	vstr	s19, [r1]
 800f4b8:	441d      	add	r5, r3
 800f4ba:	edc0 0a00 	vstr	s1, [r0]
 800f4be:	441f      	add	r7, r3
 800f4c0:	ed80 6a01 	vstr	s12, [r0, #4]
 800f4c4:	4419      	add	r1, r3
 800f4c6:	4418      	add	r0, r3
 800f4c8:	f63f aeea 	bhi.w	800f2a0 <arm_radix8_butterfly_f32+0x334>
 800f4cc:	9a03      	ldr	r2, [sp, #12]
 800f4ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 800f4d0:	440a      	add	r2, r1
 800f4d2:	9203      	str	r2, [sp, #12]
 800f4d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f4d6:	9a05      	ldr	r2, [sp, #20]
 800f4d8:	440a      	add	r2, r1
 800f4da:	9205      	str	r2, [sp, #20]
 800f4dc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f4de:	9a04      	ldr	r2, [sp, #16]
 800f4e0:	440a      	add	r2, r1
 800f4e2:	9204      	str	r2, [sp, #16]
 800f4e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f4e6:	9a06      	ldr	r2, [sp, #24]
 800f4e8:	440a      	add	r2, r1
 800f4ea:	9206      	str	r2, [sp, #24]
 800f4ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f4ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4f0:	440a      	add	r2, r1
 800f4f2:	9209      	str	r2, [sp, #36]	; 0x24
 800f4f4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800f4f6:	9a08      	ldr	r2, [sp, #32]
 800f4f8:	440a      	add	r2, r1
 800f4fa:	9208      	str	r2, [sp, #32]
 800f4fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f4fe:	9a07      	ldr	r2, [sp, #28]
 800f500:	440a      	add	r2, r1
 800f502:	9207      	str	r2, [sp, #28]
 800f504:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f508:	f108 0801 	add.w	r8, r8, #1
 800f50c:	3208      	adds	r2, #8
 800f50e:	4588      	cmp	r8, r1
 800f510:	920a      	str	r2, [sp, #40]	; 0x28
 800f512:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f514:	f47f ae75 	bne.w	800f202 <arm_radix8_butterfly_f32+0x296>
 800f518:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 800f51c:	9300      	str	r3, [sp, #0]
 800f51e:	46c3      	mov	fp, r8
 800f520:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
 800f524:	e532      	b.n	800ef8c <arm_radix8_butterfly_f32+0x20>
 800f526:	b01d      	add	sp, #116	; 0x74
 800f528:	ecbd 8b10 	vpop	{d8-d15}
 800f52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f530 <atoi>:
 800f530:	220a      	movs	r2, #10
 800f532:	2100      	movs	r1, #0
 800f534:	f000 ba3c 	b.w	800f9b0 <strtol>

0800f538 <__errno>:
 800f538:	4b01      	ldr	r3, [pc, #4]	; (800f540 <__errno+0x8>)
 800f53a:	6818      	ldr	r0, [r3, #0]
 800f53c:	4770      	bx	lr
 800f53e:	bf00      	nop
 800f540:	2000010c 	.word	0x2000010c

0800f544 <__libc_init_array>:
 800f544:	b570      	push	{r4, r5, r6, lr}
 800f546:	4d0d      	ldr	r5, [pc, #52]	; (800f57c <__libc_init_array+0x38>)
 800f548:	4c0d      	ldr	r4, [pc, #52]	; (800f580 <__libc_init_array+0x3c>)
 800f54a:	1b64      	subs	r4, r4, r5
 800f54c:	10a4      	asrs	r4, r4, #2
 800f54e:	2600      	movs	r6, #0
 800f550:	42a6      	cmp	r6, r4
 800f552:	d109      	bne.n	800f568 <__libc_init_array+0x24>
 800f554:	4d0b      	ldr	r5, [pc, #44]	; (800f584 <__libc_init_array+0x40>)
 800f556:	4c0c      	ldr	r4, [pc, #48]	; (800f588 <__libc_init_array+0x44>)
 800f558:	f000 ffb0 	bl	80104bc <_init>
 800f55c:	1b64      	subs	r4, r4, r5
 800f55e:	10a4      	asrs	r4, r4, #2
 800f560:	2600      	movs	r6, #0
 800f562:	42a6      	cmp	r6, r4
 800f564:	d105      	bne.n	800f572 <__libc_init_array+0x2e>
 800f566:	bd70      	pop	{r4, r5, r6, pc}
 800f568:	f855 3b04 	ldr.w	r3, [r5], #4
 800f56c:	4798      	blx	r3
 800f56e:	3601      	adds	r6, #1
 800f570:	e7ee      	b.n	800f550 <__libc_init_array+0xc>
 800f572:	f855 3b04 	ldr.w	r3, [r5], #4
 800f576:	4798      	blx	r3
 800f578:	3601      	adds	r6, #1
 800f57a:	e7f2      	b.n	800f562 <__libc_init_array+0x1e>
 800f57c:	080116a8 	.word	0x080116a8
 800f580:	080116a8 	.word	0x080116a8
 800f584:	080116a8 	.word	0x080116a8
 800f588:	080116ac 	.word	0x080116ac

0800f58c <__itoa>:
 800f58c:	1e93      	subs	r3, r2, #2
 800f58e:	2b22      	cmp	r3, #34	; 0x22
 800f590:	b510      	push	{r4, lr}
 800f592:	460c      	mov	r4, r1
 800f594:	d904      	bls.n	800f5a0 <__itoa+0x14>
 800f596:	2300      	movs	r3, #0
 800f598:	700b      	strb	r3, [r1, #0]
 800f59a:	461c      	mov	r4, r3
 800f59c:	4620      	mov	r0, r4
 800f59e:	bd10      	pop	{r4, pc}
 800f5a0:	2a0a      	cmp	r2, #10
 800f5a2:	d109      	bne.n	800f5b8 <__itoa+0x2c>
 800f5a4:	2800      	cmp	r0, #0
 800f5a6:	da07      	bge.n	800f5b8 <__itoa+0x2c>
 800f5a8:	232d      	movs	r3, #45	; 0x2d
 800f5aa:	700b      	strb	r3, [r1, #0]
 800f5ac:	4240      	negs	r0, r0
 800f5ae:	2101      	movs	r1, #1
 800f5b0:	4421      	add	r1, r4
 800f5b2:	f000 fa07 	bl	800f9c4 <__utoa>
 800f5b6:	e7f1      	b.n	800f59c <__itoa+0x10>
 800f5b8:	2100      	movs	r1, #0
 800f5ba:	e7f9      	b.n	800f5b0 <__itoa+0x24>

0800f5bc <itoa>:
 800f5bc:	f7ff bfe6 	b.w	800f58c <__itoa>

0800f5c0 <__retarget_lock_acquire_recursive>:
 800f5c0:	4770      	bx	lr

0800f5c2 <__retarget_lock_release_recursive>:
 800f5c2:	4770      	bx	lr

0800f5c4 <memcpy>:
 800f5c4:	440a      	add	r2, r1
 800f5c6:	4291      	cmp	r1, r2
 800f5c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f5cc:	d100      	bne.n	800f5d0 <memcpy+0xc>
 800f5ce:	4770      	bx	lr
 800f5d0:	b510      	push	{r4, lr}
 800f5d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f5da:	4291      	cmp	r1, r2
 800f5dc:	d1f9      	bne.n	800f5d2 <memcpy+0xe>
 800f5de:	bd10      	pop	{r4, pc}

0800f5e0 <memset>:
 800f5e0:	4402      	add	r2, r0
 800f5e2:	4603      	mov	r3, r0
 800f5e4:	4293      	cmp	r3, r2
 800f5e6:	d100      	bne.n	800f5ea <memset+0xa>
 800f5e8:	4770      	bx	lr
 800f5ea:	f803 1b01 	strb.w	r1, [r3], #1
 800f5ee:	e7f9      	b.n	800f5e4 <memset+0x4>

0800f5f0 <sbrk_aligned>:
 800f5f0:	b570      	push	{r4, r5, r6, lr}
 800f5f2:	4e0e      	ldr	r6, [pc, #56]	; (800f62c <sbrk_aligned+0x3c>)
 800f5f4:	460c      	mov	r4, r1
 800f5f6:	6831      	ldr	r1, [r6, #0]
 800f5f8:	4605      	mov	r5, r0
 800f5fa:	b911      	cbnz	r1, 800f602 <sbrk_aligned+0x12>
 800f5fc:	f000 f8f6 	bl	800f7ec <_sbrk_r>
 800f600:	6030      	str	r0, [r6, #0]
 800f602:	4621      	mov	r1, r4
 800f604:	4628      	mov	r0, r5
 800f606:	f000 f8f1 	bl	800f7ec <_sbrk_r>
 800f60a:	1c43      	adds	r3, r0, #1
 800f60c:	d00a      	beq.n	800f624 <sbrk_aligned+0x34>
 800f60e:	1cc4      	adds	r4, r0, #3
 800f610:	f024 0403 	bic.w	r4, r4, #3
 800f614:	42a0      	cmp	r0, r4
 800f616:	d007      	beq.n	800f628 <sbrk_aligned+0x38>
 800f618:	1a21      	subs	r1, r4, r0
 800f61a:	4628      	mov	r0, r5
 800f61c:	f000 f8e6 	bl	800f7ec <_sbrk_r>
 800f620:	3001      	adds	r0, #1
 800f622:	d101      	bne.n	800f628 <sbrk_aligned+0x38>
 800f624:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f628:	4620      	mov	r0, r4
 800f62a:	bd70      	pop	{r4, r5, r6, pc}
 800f62c:	2000bb40 	.word	0x2000bb40

0800f630 <_malloc_r>:
 800f630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f634:	1ccd      	adds	r5, r1, #3
 800f636:	f025 0503 	bic.w	r5, r5, #3
 800f63a:	3508      	adds	r5, #8
 800f63c:	2d0c      	cmp	r5, #12
 800f63e:	bf38      	it	cc
 800f640:	250c      	movcc	r5, #12
 800f642:	2d00      	cmp	r5, #0
 800f644:	4607      	mov	r7, r0
 800f646:	db01      	blt.n	800f64c <_malloc_r+0x1c>
 800f648:	42a9      	cmp	r1, r5
 800f64a:	d905      	bls.n	800f658 <_malloc_r+0x28>
 800f64c:	230c      	movs	r3, #12
 800f64e:	603b      	str	r3, [r7, #0]
 800f650:	2600      	movs	r6, #0
 800f652:	4630      	mov	r0, r6
 800f654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f658:	4e2e      	ldr	r6, [pc, #184]	; (800f714 <_malloc_r+0xe4>)
 800f65a:	f000 f9f5 	bl	800fa48 <__malloc_lock>
 800f65e:	6833      	ldr	r3, [r6, #0]
 800f660:	461c      	mov	r4, r3
 800f662:	bb34      	cbnz	r4, 800f6b2 <_malloc_r+0x82>
 800f664:	4629      	mov	r1, r5
 800f666:	4638      	mov	r0, r7
 800f668:	f7ff ffc2 	bl	800f5f0 <sbrk_aligned>
 800f66c:	1c43      	adds	r3, r0, #1
 800f66e:	4604      	mov	r4, r0
 800f670:	d14d      	bne.n	800f70e <_malloc_r+0xde>
 800f672:	6834      	ldr	r4, [r6, #0]
 800f674:	4626      	mov	r6, r4
 800f676:	2e00      	cmp	r6, #0
 800f678:	d140      	bne.n	800f6fc <_malloc_r+0xcc>
 800f67a:	6823      	ldr	r3, [r4, #0]
 800f67c:	4631      	mov	r1, r6
 800f67e:	4638      	mov	r0, r7
 800f680:	eb04 0803 	add.w	r8, r4, r3
 800f684:	f000 f8b2 	bl	800f7ec <_sbrk_r>
 800f688:	4580      	cmp	r8, r0
 800f68a:	d13a      	bne.n	800f702 <_malloc_r+0xd2>
 800f68c:	6821      	ldr	r1, [r4, #0]
 800f68e:	3503      	adds	r5, #3
 800f690:	1a6d      	subs	r5, r5, r1
 800f692:	f025 0503 	bic.w	r5, r5, #3
 800f696:	3508      	adds	r5, #8
 800f698:	2d0c      	cmp	r5, #12
 800f69a:	bf38      	it	cc
 800f69c:	250c      	movcc	r5, #12
 800f69e:	4629      	mov	r1, r5
 800f6a0:	4638      	mov	r0, r7
 800f6a2:	f7ff ffa5 	bl	800f5f0 <sbrk_aligned>
 800f6a6:	3001      	adds	r0, #1
 800f6a8:	d02b      	beq.n	800f702 <_malloc_r+0xd2>
 800f6aa:	6823      	ldr	r3, [r4, #0]
 800f6ac:	442b      	add	r3, r5
 800f6ae:	6023      	str	r3, [r4, #0]
 800f6b0:	e00e      	b.n	800f6d0 <_malloc_r+0xa0>
 800f6b2:	6822      	ldr	r2, [r4, #0]
 800f6b4:	1b52      	subs	r2, r2, r5
 800f6b6:	d41e      	bmi.n	800f6f6 <_malloc_r+0xc6>
 800f6b8:	2a0b      	cmp	r2, #11
 800f6ba:	d916      	bls.n	800f6ea <_malloc_r+0xba>
 800f6bc:	1961      	adds	r1, r4, r5
 800f6be:	42a3      	cmp	r3, r4
 800f6c0:	6025      	str	r5, [r4, #0]
 800f6c2:	bf18      	it	ne
 800f6c4:	6059      	strne	r1, [r3, #4]
 800f6c6:	6863      	ldr	r3, [r4, #4]
 800f6c8:	bf08      	it	eq
 800f6ca:	6031      	streq	r1, [r6, #0]
 800f6cc:	5162      	str	r2, [r4, r5]
 800f6ce:	604b      	str	r3, [r1, #4]
 800f6d0:	4638      	mov	r0, r7
 800f6d2:	f104 060b 	add.w	r6, r4, #11
 800f6d6:	f000 f9bd 	bl	800fa54 <__malloc_unlock>
 800f6da:	f026 0607 	bic.w	r6, r6, #7
 800f6de:	1d23      	adds	r3, r4, #4
 800f6e0:	1af2      	subs	r2, r6, r3
 800f6e2:	d0b6      	beq.n	800f652 <_malloc_r+0x22>
 800f6e4:	1b9b      	subs	r3, r3, r6
 800f6e6:	50a3      	str	r3, [r4, r2]
 800f6e8:	e7b3      	b.n	800f652 <_malloc_r+0x22>
 800f6ea:	6862      	ldr	r2, [r4, #4]
 800f6ec:	42a3      	cmp	r3, r4
 800f6ee:	bf0c      	ite	eq
 800f6f0:	6032      	streq	r2, [r6, #0]
 800f6f2:	605a      	strne	r2, [r3, #4]
 800f6f4:	e7ec      	b.n	800f6d0 <_malloc_r+0xa0>
 800f6f6:	4623      	mov	r3, r4
 800f6f8:	6864      	ldr	r4, [r4, #4]
 800f6fa:	e7b2      	b.n	800f662 <_malloc_r+0x32>
 800f6fc:	4634      	mov	r4, r6
 800f6fe:	6876      	ldr	r6, [r6, #4]
 800f700:	e7b9      	b.n	800f676 <_malloc_r+0x46>
 800f702:	230c      	movs	r3, #12
 800f704:	603b      	str	r3, [r7, #0]
 800f706:	4638      	mov	r0, r7
 800f708:	f000 f9a4 	bl	800fa54 <__malloc_unlock>
 800f70c:	e7a1      	b.n	800f652 <_malloc_r+0x22>
 800f70e:	6025      	str	r5, [r4, #0]
 800f710:	e7de      	b.n	800f6d0 <_malloc_r+0xa0>
 800f712:	bf00      	nop
 800f714:	2000bb3c 	.word	0x2000bb3c

0800f718 <cleanup_glue>:
 800f718:	b538      	push	{r3, r4, r5, lr}
 800f71a:	460c      	mov	r4, r1
 800f71c:	6809      	ldr	r1, [r1, #0]
 800f71e:	4605      	mov	r5, r0
 800f720:	b109      	cbz	r1, 800f726 <cleanup_glue+0xe>
 800f722:	f7ff fff9 	bl	800f718 <cleanup_glue>
 800f726:	4621      	mov	r1, r4
 800f728:	4628      	mov	r0, r5
 800f72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f72e:	f000 b997 	b.w	800fa60 <_free_r>
	...

0800f734 <_reclaim_reent>:
 800f734:	4b2c      	ldr	r3, [pc, #176]	; (800f7e8 <_reclaim_reent+0xb4>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4283      	cmp	r3, r0
 800f73a:	b570      	push	{r4, r5, r6, lr}
 800f73c:	4604      	mov	r4, r0
 800f73e:	d051      	beq.n	800f7e4 <_reclaim_reent+0xb0>
 800f740:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800f742:	b143      	cbz	r3, 800f756 <_reclaim_reent+0x22>
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d14a      	bne.n	800f7e0 <_reclaim_reent+0xac>
 800f74a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f74c:	6819      	ldr	r1, [r3, #0]
 800f74e:	b111      	cbz	r1, 800f756 <_reclaim_reent+0x22>
 800f750:	4620      	mov	r0, r4
 800f752:	f000 f985 	bl	800fa60 <_free_r>
 800f756:	6961      	ldr	r1, [r4, #20]
 800f758:	b111      	cbz	r1, 800f760 <_reclaim_reent+0x2c>
 800f75a:	4620      	mov	r0, r4
 800f75c:	f000 f980 	bl	800fa60 <_free_r>
 800f760:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f762:	b111      	cbz	r1, 800f76a <_reclaim_reent+0x36>
 800f764:	4620      	mov	r0, r4
 800f766:	f000 f97b 	bl	800fa60 <_free_r>
 800f76a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f76c:	b111      	cbz	r1, 800f774 <_reclaim_reent+0x40>
 800f76e:	4620      	mov	r0, r4
 800f770:	f000 f976 	bl	800fa60 <_free_r>
 800f774:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f776:	b111      	cbz	r1, 800f77e <_reclaim_reent+0x4a>
 800f778:	4620      	mov	r0, r4
 800f77a:	f000 f971 	bl	800fa60 <_free_r>
 800f77e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f780:	b111      	cbz	r1, 800f788 <_reclaim_reent+0x54>
 800f782:	4620      	mov	r0, r4
 800f784:	f000 f96c 	bl	800fa60 <_free_r>
 800f788:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f78a:	b111      	cbz	r1, 800f792 <_reclaim_reent+0x5e>
 800f78c:	4620      	mov	r0, r4
 800f78e:	f000 f967 	bl	800fa60 <_free_r>
 800f792:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f794:	b111      	cbz	r1, 800f79c <_reclaim_reent+0x68>
 800f796:	4620      	mov	r0, r4
 800f798:	f000 f962 	bl	800fa60 <_free_r>
 800f79c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f79e:	b111      	cbz	r1, 800f7a6 <_reclaim_reent+0x72>
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	f000 f95d 	bl	800fa60 <_free_r>
 800f7a6:	69a3      	ldr	r3, [r4, #24]
 800f7a8:	b1e3      	cbz	r3, 800f7e4 <_reclaim_reent+0xb0>
 800f7aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	4798      	blx	r3
 800f7b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f7b2:	b1b9      	cbz	r1, 800f7e4 <_reclaim_reent+0xb0>
 800f7b4:	4620      	mov	r0, r4
 800f7b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7ba:	f7ff bfad 	b.w	800f718 <cleanup_glue>
 800f7be:	5949      	ldr	r1, [r1, r5]
 800f7c0:	b941      	cbnz	r1, 800f7d4 <_reclaim_reent+0xa0>
 800f7c2:	3504      	adds	r5, #4
 800f7c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7c6:	2d80      	cmp	r5, #128	; 0x80
 800f7c8:	68d9      	ldr	r1, [r3, #12]
 800f7ca:	d1f8      	bne.n	800f7be <_reclaim_reent+0x8a>
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	f000 f947 	bl	800fa60 <_free_r>
 800f7d2:	e7ba      	b.n	800f74a <_reclaim_reent+0x16>
 800f7d4:	680e      	ldr	r6, [r1, #0]
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	f000 f942 	bl	800fa60 <_free_r>
 800f7dc:	4631      	mov	r1, r6
 800f7de:	e7ef      	b.n	800f7c0 <_reclaim_reent+0x8c>
 800f7e0:	2500      	movs	r5, #0
 800f7e2:	e7ef      	b.n	800f7c4 <_reclaim_reent+0x90>
 800f7e4:	bd70      	pop	{r4, r5, r6, pc}
 800f7e6:	bf00      	nop
 800f7e8:	2000010c 	.word	0x2000010c

0800f7ec <_sbrk_r>:
 800f7ec:	b538      	push	{r3, r4, r5, lr}
 800f7ee:	4d06      	ldr	r5, [pc, #24]	; (800f808 <_sbrk_r+0x1c>)
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	4604      	mov	r4, r0
 800f7f4:	4608      	mov	r0, r1
 800f7f6:	602b      	str	r3, [r5, #0]
 800f7f8:	f7f2 fb5a 	bl	8001eb0 <_sbrk>
 800f7fc:	1c43      	adds	r3, r0, #1
 800f7fe:	d102      	bne.n	800f806 <_sbrk_r+0x1a>
 800f800:	682b      	ldr	r3, [r5, #0]
 800f802:	b103      	cbz	r3, 800f806 <_sbrk_r+0x1a>
 800f804:	6023      	str	r3, [r4, #0]
 800f806:	bd38      	pop	{r3, r4, r5, pc}
 800f808:	2000bb44 	.word	0x2000bb44

0800f80c <siprintf>:
 800f80c:	b40e      	push	{r1, r2, r3}
 800f80e:	b500      	push	{lr}
 800f810:	b09c      	sub	sp, #112	; 0x70
 800f812:	ab1d      	add	r3, sp, #116	; 0x74
 800f814:	9002      	str	r0, [sp, #8]
 800f816:	9006      	str	r0, [sp, #24]
 800f818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f81c:	4809      	ldr	r0, [pc, #36]	; (800f844 <siprintf+0x38>)
 800f81e:	9107      	str	r1, [sp, #28]
 800f820:	9104      	str	r1, [sp, #16]
 800f822:	4909      	ldr	r1, [pc, #36]	; (800f848 <siprintf+0x3c>)
 800f824:	f853 2b04 	ldr.w	r2, [r3], #4
 800f828:	9105      	str	r1, [sp, #20]
 800f82a:	6800      	ldr	r0, [r0, #0]
 800f82c:	9301      	str	r3, [sp, #4]
 800f82e:	a902      	add	r1, sp, #8
 800f830:	f000 f9be 	bl	800fbb0 <_svfiprintf_r>
 800f834:	9b02      	ldr	r3, [sp, #8]
 800f836:	2200      	movs	r2, #0
 800f838:	701a      	strb	r2, [r3, #0]
 800f83a:	b01c      	add	sp, #112	; 0x70
 800f83c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f840:	b003      	add	sp, #12
 800f842:	4770      	bx	lr
 800f844:	2000010c 	.word	0x2000010c
 800f848:	ffff0208 	.word	0xffff0208

0800f84c <strcpy>:
 800f84c:	4603      	mov	r3, r0
 800f84e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f852:	f803 2b01 	strb.w	r2, [r3], #1
 800f856:	2a00      	cmp	r2, #0
 800f858:	d1f9      	bne.n	800f84e <strcpy+0x2>
 800f85a:	4770      	bx	lr

0800f85c <strncmp>:
 800f85c:	b510      	push	{r4, lr}
 800f85e:	b17a      	cbz	r2, 800f880 <strncmp+0x24>
 800f860:	4603      	mov	r3, r0
 800f862:	3901      	subs	r1, #1
 800f864:	1884      	adds	r4, r0, r2
 800f866:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f86a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f86e:	4290      	cmp	r0, r2
 800f870:	d101      	bne.n	800f876 <strncmp+0x1a>
 800f872:	42a3      	cmp	r3, r4
 800f874:	d101      	bne.n	800f87a <strncmp+0x1e>
 800f876:	1a80      	subs	r0, r0, r2
 800f878:	bd10      	pop	{r4, pc}
 800f87a:	2800      	cmp	r0, #0
 800f87c:	d1f3      	bne.n	800f866 <strncmp+0xa>
 800f87e:	e7fa      	b.n	800f876 <strncmp+0x1a>
 800f880:	4610      	mov	r0, r2
 800f882:	e7f9      	b.n	800f878 <strncmp+0x1c>

0800f884 <strncpy>:
 800f884:	b510      	push	{r4, lr}
 800f886:	3901      	subs	r1, #1
 800f888:	4603      	mov	r3, r0
 800f88a:	b132      	cbz	r2, 800f89a <strncpy+0x16>
 800f88c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f890:	f803 4b01 	strb.w	r4, [r3], #1
 800f894:	3a01      	subs	r2, #1
 800f896:	2c00      	cmp	r4, #0
 800f898:	d1f7      	bne.n	800f88a <strncpy+0x6>
 800f89a:	441a      	add	r2, r3
 800f89c:	2100      	movs	r1, #0
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d100      	bne.n	800f8a4 <strncpy+0x20>
 800f8a2:	bd10      	pop	{r4, pc}
 800f8a4:	f803 1b01 	strb.w	r1, [r3], #1
 800f8a8:	e7f9      	b.n	800f89e <strncpy+0x1a>
	...

0800f8ac <_strtol_l.constprop.0>:
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8b2:	d001      	beq.n	800f8b8 <_strtol_l.constprop.0+0xc>
 800f8b4:	2b24      	cmp	r3, #36	; 0x24
 800f8b6:	d906      	bls.n	800f8c6 <_strtol_l.constprop.0+0x1a>
 800f8b8:	f7ff fe3e 	bl	800f538 <__errno>
 800f8bc:	2316      	movs	r3, #22
 800f8be:	6003      	str	r3, [r0, #0]
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f8c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800f9ac <_strtol_l.constprop.0+0x100>
 800f8ca:	460d      	mov	r5, r1
 800f8cc:	462e      	mov	r6, r5
 800f8ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f8d2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f8d6:	f017 0708 	ands.w	r7, r7, #8
 800f8da:	d1f7      	bne.n	800f8cc <_strtol_l.constprop.0+0x20>
 800f8dc:	2c2d      	cmp	r4, #45	; 0x2d
 800f8de:	d132      	bne.n	800f946 <_strtol_l.constprop.0+0x9a>
 800f8e0:	782c      	ldrb	r4, [r5, #0]
 800f8e2:	2701      	movs	r7, #1
 800f8e4:	1cb5      	adds	r5, r6, #2
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d05b      	beq.n	800f9a2 <_strtol_l.constprop.0+0xf6>
 800f8ea:	2b10      	cmp	r3, #16
 800f8ec:	d109      	bne.n	800f902 <_strtol_l.constprop.0+0x56>
 800f8ee:	2c30      	cmp	r4, #48	; 0x30
 800f8f0:	d107      	bne.n	800f902 <_strtol_l.constprop.0+0x56>
 800f8f2:	782c      	ldrb	r4, [r5, #0]
 800f8f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f8f8:	2c58      	cmp	r4, #88	; 0x58
 800f8fa:	d14d      	bne.n	800f998 <_strtol_l.constprop.0+0xec>
 800f8fc:	786c      	ldrb	r4, [r5, #1]
 800f8fe:	2310      	movs	r3, #16
 800f900:	3502      	adds	r5, #2
 800f902:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f906:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800f90a:	f04f 0c00 	mov.w	ip, #0
 800f90e:	fbb8 f9f3 	udiv	r9, r8, r3
 800f912:	4666      	mov	r6, ip
 800f914:	fb03 8a19 	mls	sl, r3, r9, r8
 800f918:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f91c:	f1be 0f09 	cmp.w	lr, #9
 800f920:	d816      	bhi.n	800f950 <_strtol_l.constprop.0+0xa4>
 800f922:	4674      	mov	r4, lr
 800f924:	42a3      	cmp	r3, r4
 800f926:	dd24      	ble.n	800f972 <_strtol_l.constprop.0+0xc6>
 800f928:	f1bc 0f00 	cmp.w	ip, #0
 800f92c:	db1e      	blt.n	800f96c <_strtol_l.constprop.0+0xc0>
 800f92e:	45b1      	cmp	r9, r6
 800f930:	d31c      	bcc.n	800f96c <_strtol_l.constprop.0+0xc0>
 800f932:	d101      	bne.n	800f938 <_strtol_l.constprop.0+0x8c>
 800f934:	45a2      	cmp	sl, r4
 800f936:	db19      	blt.n	800f96c <_strtol_l.constprop.0+0xc0>
 800f938:	fb06 4603 	mla	r6, r6, r3, r4
 800f93c:	f04f 0c01 	mov.w	ip, #1
 800f940:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f944:	e7e8      	b.n	800f918 <_strtol_l.constprop.0+0x6c>
 800f946:	2c2b      	cmp	r4, #43	; 0x2b
 800f948:	bf04      	itt	eq
 800f94a:	782c      	ldrbeq	r4, [r5, #0]
 800f94c:	1cb5      	addeq	r5, r6, #2
 800f94e:	e7ca      	b.n	800f8e6 <_strtol_l.constprop.0+0x3a>
 800f950:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800f954:	f1be 0f19 	cmp.w	lr, #25
 800f958:	d801      	bhi.n	800f95e <_strtol_l.constprop.0+0xb2>
 800f95a:	3c37      	subs	r4, #55	; 0x37
 800f95c:	e7e2      	b.n	800f924 <_strtol_l.constprop.0+0x78>
 800f95e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800f962:	f1be 0f19 	cmp.w	lr, #25
 800f966:	d804      	bhi.n	800f972 <_strtol_l.constprop.0+0xc6>
 800f968:	3c57      	subs	r4, #87	; 0x57
 800f96a:	e7db      	b.n	800f924 <_strtol_l.constprop.0+0x78>
 800f96c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800f970:	e7e6      	b.n	800f940 <_strtol_l.constprop.0+0x94>
 800f972:	f1bc 0f00 	cmp.w	ip, #0
 800f976:	da05      	bge.n	800f984 <_strtol_l.constprop.0+0xd8>
 800f978:	2322      	movs	r3, #34	; 0x22
 800f97a:	6003      	str	r3, [r0, #0]
 800f97c:	4646      	mov	r6, r8
 800f97e:	b942      	cbnz	r2, 800f992 <_strtol_l.constprop.0+0xe6>
 800f980:	4630      	mov	r0, r6
 800f982:	e79e      	b.n	800f8c2 <_strtol_l.constprop.0+0x16>
 800f984:	b107      	cbz	r7, 800f988 <_strtol_l.constprop.0+0xdc>
 800f986:	4276      	negs	r6, r6
 800f988:	2a00      	cmp	r2, #0
 800f98a:	d0f9      	beq.n	800f980 <_strtol_l.constprop.0+0xd4>
 800f98c:	f1bc 0f00 	cmp.w	ip, #0
 800f990:	d000      	beq.n	800f994 <_strtol_l.constprop.0+0xe8>
 800f992:	1e69      	subs	r1, r5, #1
 800f994:	6011      	str	r1, [r2, #0]
 800f996:	e7f3      	b.n	800f980 <_strtol_l.constprop.0+0xd4>
 800f998:	2430      	movs	r4, #48	; 0x30
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d1b1      	bne.n	800f902 <_strtol_l.constprop.0+0x56>
 800f99e:	2308      	movs	r3, #8
 800f9a0:	e7af      	b.n	800f902 <_strtol_l.constprop.0+0x56>
 800f9a2:	2c30      	cmp	r4, #48	; 0x30
 800f9a4:	d0a5      	beq.n	800f8f2 <_strtol_l.constprop.0+0x46>
 800f9a6:	230a      	movs	r3, #10
 800f9a8:	e7ab      	b.n	800f902 <_strtol_l.constprop.0+0x56>
 800f9aa:	bf00      	nop
 800f9ac:	08011532 	.word	0x08011532

0800f9b0 <strtol>:
 800f9b0:	4613      	mov	r3, r2
 800f9b2:	460a      	mov	r2, r1
 800f9b4:	4601      	mov	r1, r0
 800f9b6:	4802      	ldr	r0, [pc, #8]	; (800f9c0 <strtol+0x10>)
 800f9b8:	6800      	ldr	r0, [r0, #0]
 800f9ba:	f7ff bf77 	b.w	800f8ac <_strtol_l.constprop.0>
 800f9be:	bf00      	nop
 800f9c0:	2000010c 	.word	0x2000010c

0800f9c4 <__utoa>:
 800f9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f9c6:	4c1f      	ldr	r4, [pc, #124]	; (800fa44 <__utoa+0x80>)
 800f9c8:	b08b      	sub	sp, #44	; 0x2c
 800f9ca:	4605      	mov	r5, r0
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	466e      	mov	r6, sp
 800f9d0:	f104 0c20 	add.w	ip, r4, #32
 800f9d4:	6820      	ldr	r0, [r4, #0]
 800f9d6:	6861      	ldr	r1, [r4, #4]
 800f9d8:	4637      	mov	r7, r6
 800f9da:	c703      	stmia	r7!, {r0, r1}
 800f9dc:	3408      	adds	r4, #8
 800f9de:	4564      	cmp	r4, ip
 800f9e0:	463e      	mov	r6, r7
 800f9e2:	d1f7      	bne.n	800f9d4 <__utoa+0x10>
 800f9e4:	7921      	ldrb	r1, [r4, #4]
 800f9e6:	7139      	strb	r1, [r7, #4]
 800f9e8:	1e91      	subs	r1, r2, #2
 800f9ea:	6820      	ldr	r0, [r4, #0]
 800f9ec:	6038      	str	r0, [r7, #0]
 800f9ee:	2922      	cmp	r1, #34	; 0x22
 800f9f0:	f04f 0100 	mov.w	r1, #0
 800f9f4:	d904      	bls.n	800fa00 <__utoa+0x3c>
 800f9f6:	7019      	strb	r1, [r3, #0]
 800f9f8:	460b      	mov	r3, r1
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	b00b      	add	sp, #44	; 0x2c
 800f9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa00:	1e58      	subs	r0, r3, #1
 800fa02:	4684      	mov	ip, r0
 800fa04:	fbb5 f7f2 	udiv	r7, r5, r2
 800fa08:	fb02 5617 	mls	r6, r2, r7, r5
 800fa0c:	3628      	adds	r6, #40	; 0x28
 800fa0e:	446e      	add	r6, sp
 800fa10:	460c      	mov	r4, r1
 800fa12:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800fa16:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800fa1a:	462e      	mov	r6, r5
 800fa1c:	42b2      	cmp	r2, r6
 800fa1e:	f101 0101 	add.w	r1, r1, #1
 800fa22:	463d      	mov	r5, r7
 800fa24:	d9ee      	bls.n	800fa04 <__utoa+0x40>
 800fa26:	2200      	movs	r2, #0
 800fa28:	545a      	strb	r2, [r3, r1]
 800fa2a:	1919      	adds	r1, r3, r4
 800fa2c:	1aa5      	subs	r5, r4, r2
 800fa2e:	42aa      	cmp	r2, r5
 800fa30:	dae3      	bge.n	800f9fa <__utoa+0x36>
 800fa32:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800fa36:	780e      	ldrb	r6, [r1, #0]
 800fa38:	7006      	strb	r6, [r0, #0]
 800fa3a:	3201      	adds	r2, #1
 800fa3c:	f801 5901 	strb.w	r5, [r1], #-1
 800fa40:	e7f4      	b.n	800fa2c <__utoa+0x68>
 800fa42:	bf00      	nop
 800fa44:	0801150c 	.word	0x0801150c

0800fa48 <__malloc_lock>:
 800fa48:	4801      	ldr	r0, [pc, #4]	; (800fa50 <__malloc_lock+0x8>)
 800fa4a:	f7ff bdb9 	b.w	800f5c0 <__retarget_lock_acquire_recursive>
 800fa4e:	bf00      	nop
 800fa50:	2000bb38 	.word	0x2000bb38

0800fa54 <__malloc_unlock>:
 800fa54:	4801      	ldr	r0, [pc, #4]	; (800fa5c <__malloc_unlock+0x8>)
 800fa56:	f7ff bdb4 	b.w	800f5c2 <__retarget_lock_release_recursive>
 800fa5a:	bf00      	nop
 800fa5c:	2000bb38 	.word	0x2000bb38

0800fa60 <_free_r>:
 800fa60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa62:	2900      	cmp	r1, #0
 800fa64:	d044      	beq.n	800faf0 <_free_r+0x90>
 800fa66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa6a:	9001      	str	r0, [sp, #4]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	f1a1 0404 	sub.w	r4, r1, #4
 800fa72:	bfb8      	it	lt
 800fa74:	18e4      	addlt	r4, r4, r3
 800fa76:	f7ff ffe7 	bl	800fa48 <__malloc_lock>
 800fa7a:	4a1e      	ldr	r2, [pc, #120]	; (800faf4 <_free_r+0x94>)
 800fa7c:	9801      	ldr	r0, [sp, #4]
 800fa7e:	6813      	ldr	r3, [r2, #0]
 800fa80:	b933      	cbnz	r3, 800fa90 <_free_r+0x30>
 800fa82:	6063      	str	r3, [r4, #4]
 800fa84:	6014      	str	r4, [r2, #0]
 800fa86:	b003      	add	sp, #12
 800fa88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa8c:	f7ff bfe2 	b.w	800fa54 <__malloc_unlock>
 800fa90:	42a3      	cmp	r3, r4
 800fa92:	d908      	bls.n	800faa6 <_free_r+0x46>
 800fa94:	6825      	ldr	r5, [r4, #0]
 800fa96:	1961      	adds	r1, r4, r5
 800fa98:	428b      	cmp	r3, r1
 800fa9a:	bf01      	itttt	eq
 800fa9c:	6819      	ldreq	r1, [r3, #0]
 800fa9e:	685b      	ldreq	r3, [r3, #4]
 800faa0:	1949      	addeq	r1, r1, r5
 800faa2:	6021      	streq	r1, [r4, #0]
 800faa4:	e7ed      	b.n	800fa82 <_free_r+0x22>
 800faa6:	461a      	mov	r2, r3
 800faa8:	685b      	ldr	r3, [r3, #4]
 800faaa:	b10b      	cbz	r3, 800fab0 <_free_r+0x50>
 800faac:	42a3      	cmp	r3, r4
 800faae:	d9fa      	bls.n	800faa6 <_free_r+0x46>
 800fab0:	6811      	ldr	r1, [r2, #0]
 800fab2:	1855      	adds	r5, r2, r1
 800fab4:	42a5      	cmp	r5, r4
 800fab6:	d10b      	bne.n	800fad0 <_free_r+0x70>
 800fab8:	6824      	ldr	r4, [r4, #0]
 800faba:	4421      	add	r1, r4
 800fabc:	1854      	adds	r4, r2, r1
 800fabe:	42a3      	cmp	r3, r4
 800fac0:	6011      	str	r1, [r2, #0]
 800fac2:	d1e0      	bne.n	800fa86 <_free_r+0x26>
 800fac4:	681c      	ldr	r4, [r3, #0]
 800fac6:	685b      	ldr	r3, [r3, #4]
 800fac8:	6053      	str	r3, [r2, #4]
 800faca:	4421      	add	r1, r4
 800facc:	6011      	str	r1, [r2, #0]
 800face:	e7da      	b.n	800fa86 <_free_r+0x26>
 800fad0:	d902      	bls.n	800fad8 <_free_r+0x78>
 800fad2:	230c      	movs	r3, #12
 800fad4:	6003      	str	r3, [r0, #0]
 800fad6:	e7d6      	b.n	800fa86 <_free_r+0x26>
 800fad8:	6825      	ldr	r5, [r4, #0]
 800fada:	1961      	adds	r1, r4, r5
 800fadc:	428b      	cmp	r3, r1
 800fade:	bf04      	itt	eq
 800fae0:	6819      	ldreq	r1, [r3, #0]
 800fae2:	685b      	ldreq	r3, [r3, #4]
 800fae4:	6063      	str	r3, [r4, #4]
 800fae6:	bf04      	itt	eq
 800fae8:	1949      	addeq	r1, r1, r5
 800faea:	6021      	streq	r1, [r4, #0]
 800faec:	6054      	str	r4, [r2, #4]
 800faee:	e7ca      	b.n	800fa86 <_free_r+0x26>
 800faf0:	b003      	add	sp, #12
 800faf2:	bd30      	pop	{r4, r5, pc}
 800faf4:	2000bb3c 	.word	0x2000bb3c

0800faf8 <__ssputs_r>:
 800faf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fafc:	688e      	ldr	r6, [r1, #8]
 800fafe:	429e      	cmp	r6, r3
 800fb00:	4682      	mov	sl, r0
 800fb02:	460c      	mov	r4, r1
 800fb04:	4690      	mov	r8, r2
 800fb06:	461f      	mov	r7, r3
 800fb08:	d838      	bhi.n	800fb7c <__ssputs_r+0x84>
 800fb0a:	898a      	ldrh	r2, [r1, #12]
 800fb0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fb10:	d032      	beq.n	800fb78 <__ssputs_r+0x80>
 800fb12:	6825      	ldr	r5, [r4, #0]
 800fb14:	6909      	ldr	r1, [r1, #16]
 800fb16:	eba5 0901 	sub.w	r9, r5, r1
 800fb1a:	6965      	ldr	r5, [r4, #20]
 800fb1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fb20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fb24:	3301      	adds	r3, #1
 800fb26:	444b      	add	r3, r9
 800fb28:	106d      	asrs	r5, r5, #1
 800fb2a:	429d      	cmp	r5, r3
 800fb2c:	bf38      	it	cc
 800fb2e:	461d      	movcc	r5, r3
 800fb30:	0553      	lsls	r3, r2, #21
 800fb32:	d531      	bpl.n	800fb98 <__ssputs_r+0xa0>
 800fb34:	4629      	mov	r1, r5
 800fb36:	f7ff fd7b 	bl	800f630 <_malloc_r>
 800fb3a:	4606      	mov	r6, r0
 800fb3c:	b950      	cbnz	r0, 800fb54 <__ssputs_r+0x5c>
 800fb3e:	230c      	movs	r3, #12
 800fb40:	f8ca 3000 	str.w	r3, [sl]
 800fb44:	89a3      	ldrh	r3, [r4, #12]
 800fb46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb4a:	81a3      	strh	r3, [r4, #12]
 800fb4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fb50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb54:	6921      	ldr	r1, [r4, #16]
 800fb56:	464a      	mov	r2, r9
 800fb58:	f7ff fd34 	bl	800f5c4 <memcpy>
 800fb5c:	89a3      	ldrh	r3, [r4, #12]
 800fb5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fb62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb66:	81a3      	strh	r3, [r4, #12]
 800fb68:	6126      	str	r6, [r4, #16]
 800fb6a:	6165      	str	r5, [r4, #20]
 800fb6c:	444e      	add	r6, r9
 800fb6e:	eba5 0509 	sub.w	r5, r5, r9
 800fb72:	6026      	str	r6, [r4, #0]
 800fb74:	60a5      	str	r5, [r4, #8]
 800fb76:	463e      	mov	r6, r7
 800fb78:	42be      	cmp	r6, r7
 800fb7a:	d900      	bls.n	800fb7e <__ssputs_r+0x86>
 800fb7c:	463e      	mov	r6, r7
 800fb7e:	6820      	ldr	r0, [r4, #0]
 800fb80:	4632      	mov	r2, r6
 800fb82:	4641      	mov	r1, r8
 800fb84:	f000 faa8 	bl	80100d8 <memmove>
 800fb88:	68a3      	ldr	r3, [r4, #8]
 800fb8a:	1b9b      	subs	r3, r3, r6
 800fb8c:	60a3      	str	r3, [r4, #8]
 800fb8e:	6823      	ldr	r3, [r4, #0]
 800fb90:	4433      	add	r3, r6
 800fb92:	6023      	str	r3, [r4, #0]
 800fb94:	2000      	movs	r0, #0
 800fb96:	e7db      	b.n	800fb50 <__ssputs_r+0x58>
 800fb98:	462a      	mov	r2, r5
 800fb9a:	f000 fab7 	bl	801010c <_realloc_r>
 800fb9e:	4606      	mov	r6, r0
 800fba0:	2800      	cmp	r0, #0
 800fba2:	d1e1      	bne.n	800fb68 <__ssputs_r+0x70>
 800fba4:	6921      	ldr	r1, [r4, #16]
 800fba6:	4650      	mov	r0, sl
 800fba8:	f7ff ff5a 	bl	800fa60 <_free_r>
 800fbac:	e7c7      	b.n	800fb3e <__ssputs_r+0x46>
	...

0800fbb0 <_svfiprintf_r>:
 800fbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbb4:	4698      	mov	r8, r3
 800fbb6:	898b      	ldrh	r3, [r1, #12]
 800fbb8:	061b      	lsls	r3, r3, #24
 800fbba:	b09d      	sub	sp, #116	; 0x74
 800fbbc:	4607      	mov	r7, r0
 800fbbe:	460d      	mov	r5, r1
 800fbc0:	4614      	mov	r4, r2
 800fbc2:	d50e      	bpl.n	800fbe2 <_svfiprintf_r+0x32>
 800fbc4:	690b      	ldr	r3, [r1, #16]
 800fbc6:	b963      	cbnz	r3, 800fbe2 <_svfiprintf_r+0x32>
 800fbc8:	2140      	movs	r1, #64	; 0x40
 800fbca:	f7ff fd31 	bl	800f630 <_malloc_r>
 800fbce:	6028      	str	r0, [r5, #0]
 800fbd0:	6128      	str	r0, [r5, #16]
 800fbd2:	b920      	cbnz	r0, 800fbde <_svfiprintf_r+0x2e>
 800fbd4:	230c      	movs	r3, #12
 800fbd6:	603b      	str	r3, [r7, #0]
 800fbd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fbdc:	e0d1      	b.n	800fd82 <_svfiprintf_r+0x1d2>
 800fbde:	2340      	movs	r3, #64	; 0x40
 800fbe0:	616b      	str	r3, [r5, #20]
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	9309      	str	r3, [sp, #36]	; 0x24
 800fbe6:	2320      	movs	r3, #32
 800fbe8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbec:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbf0:	2330      	movs	r3, #48	; 0x30
 800fbf2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fd9c <_svfiprintf_r+0x1ec>
 800fbf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbfa:	f04f 0901 	mov.w	r9, #1
 800fbfe:	4623      	mov	r3, r4
 800fc00:	469a      	mov	sl, r3
 800fc02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fc06:	b10a      	cbz	r2, 800fc0c <_svfiprintf_r+0x5c>
 800fc08:	2a25      	cmp	r2, #37	; 0x25
 800fc0a:	d1f9      	bne.n	800fc00 <_svfiprintf_r+0x50>
 800fc0c:	ebba 0b04 	subs.w	fp, sl, r4
 800fc10:	d00b      	beq.n	800fc2a <_svfiprintf_r+0x7a>
 800fc12:	465b      	mov	r3, fp
 800fc14:	4622      	mov	r2, r4
 800fc16:	4629      	mov	r1, r5
 800fc18:	4638      	mov	r0, r7
 800fc1a:	f7ff ff6d 	bl	800faf8 <__ssputs_r>
 800fc1e:	3001      	adds	r0, #1
 800fc20:	f000 80aa 	beq.w	800fd78 <_svfiprintf_r+0x1c8>
 800fc24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc26:	445a      	add	r2, fp
 800fc28:	9209      	str	r2, [sp, #36]	; 0x24
 800fc2a:	f89a 3000 	ldrb.w	r3, [sl]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	f000 80a2 	beq.w	800fd78 <_svfiprintf_r+0x1c8>
 800fc34:	2300      	movs	r3, #0
 800fc36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc3e:	f10a 0a01 	add.w	sl, sl, #1
 800fc42:	9304      	str	r3, [sp, #16]
 800fc44:	9307      	str	r3, [sp, #28]
 800fc46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc4a:	931a      	str	r3, [sp, #104]	; 0x68
 800fc4c:	4654      	mov	r4, sl
 800fc4e:	2205      	movs	r2, #5
 800fc50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc54:	4851      	ldr	r0, [pc, #324]	; (800fd9c <_svfiprintf_r+0x1ec>)
 800fc56:	f7f0 fb3b 	bl	80002d0 <memchr>
 800fc5a:	9a04      	ldr	r2, [sp, #16]
 800fc5c:	b9d8      	cbnz	r0, 800fc96 <_svfiprintf_r+0xe6>
 800fc5e:	06d0      	lsls	r0, r2, #27
 800fc60:	bf44      	itt	mi
 800fc62:	2320      	movmi	r3, #32
 800fc64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc68:	0711      	lsls	r1, r2, #28
 800fc6a:	bf44      	itt	mi
 800fc6c:	232b      	movmi	r3, #43	; 0x2b
 800fc6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc72:	f89a 3000 	ldrb.w	r3, [sl]
 800fc76:	2b2a      	cmp	r3, #42	; 0x2a
 800fc78:	d015      	beq.n	800fca6 <_svfiprintf_r+0xf6>
 800fc7a:	9a07      	ldr	r2, [sp, #28]
 800fc7c:	4654      	mov	r4, sl
 800fc7e:	2000      	movs	r0, #0
 800fc80:	f04f 0c0a 	mov.w	ip, #10
 800fc84:	4621      	mov	r1, r4
 800fc86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc8a:	3b30      	subs	r3, #48	; 0x30
 800fc8c:	2b09      	cmp	r3, #9
 800fc8e:	d94e      	bls.n	800fd2e <_svfiprintf_r+0x17e>
 800fc90:	b1b0      	cbz	r0, 800fcc0 <_svfiprintf_r+0x110>
 800fc92:	9207      	str	r2, [sp, #28]
 800fc94:	e014      	b.n	800fcc0 <_svfiprintf_r+0x110>
 800fc96:	eba0 0308 	sub.w	r3, r0, r8
 800fc9a:	fa09 f303 	lsl.w	r3, r9, r3
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	9304      	str	r3, [sp, #16]
 800fca2:	46a2      	mov	sl, r4
 800fca4:	e7d2      	b.n	800fc4c <_svfiprintf_r+0x9c>
 800fca6:	9b03      	ldr	r3, [sp, #12]
 800fca8:	1d19      	adds	r1, r3, #4
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	9103      	str	r1, [sp, #12]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	bfbb      	ittet	lt
 800fcb2:	425b      	neglt	r3, r3
 800fcb4:	f042 0202 	orrlt.w	r2, r2, #2
 800fcb8:	9307      	strge	r3, [sp, #28]
 800fcba:	9307      	strlt	r3, [sp, #28]
 800fcbc:	bfb8      	it	lt
 800fcbe:	9204      	strlt	r2, [sp, #16]
 800fcc0:	7823      	ldrb	r3, [r4, #0]
 800fcc2:	2b2e      	cmp	r3, #46	; 0x2e
 800fcc4:	d10c      	bne.n	800fce0 <_svfiprintf_r+0x130>
 800fcc6:	7863      	ldrb	r3, [r4, #1]
 800fcc8:	2b2a      	cmp	r3, #42	; 0x2a
 800fcca:	d135      	bne.n	800fd38 <_svfiprintf_r+0x188>
 800fccc:	9b03      	ldr	r3, [sp, #12]
 800fcce:	1d1a      	adds	r2, r3, #4
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	9203      	str	r2, [sp, #12]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	bfb8      	it	lt
 800fcd8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800fcdc:	3402      	adds	r4, #2
 800fcde:	9305      	str	r3, [sp, #20]
 800fce0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fdac <_svfiprintf_r+0x1fc>
 800fce4:	7821      	ldrb	r1, [r4, #0]
 800fce6:	2203      	movs	r2, #3
 800fce8:	4650      	mov	r0, sl
 800fcea:	f7f0 faf1 	bl	80002d0 <memchr>
 800fcee:	b140      	cbz	r0, 800fd02 <_svfiprintf_r+0x152>
 800fcf0:	2340      	movs	r3, #64	; 0x40
 800fcf2:	eba0 000a 	sub.w	r0, r0, sl
 800fcf6:	fa03 f000 	lsl.w	r0, r3, r0
 800fcfa:	9b04      	ldr	r3, [sp, #16]
 800fcfc:	4303      	orrs	r3, r0
 800fcfe:	3401      	adds	r4, #1
 800fd00:	9304      	str	r3, [sp, #16]
 800fd02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd06:	4826      	ldr	r0, [pc, #152]	; (800fda0 <_svfiprintf_r+0x1f0>)
 800fd08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fd0c:	2206      	movs	r2, #6
 800fd0e:	f7f0 fadf 	bl	80002d0 <memchr>
 800fd12:	2800      	cmp	r0, #0
 800fd14:	d038      	beq.n	800fd88 <_svfiprintf_r+0x1d8>
 800fd16:	4b23      	ldr	r3, [pc, #140]	; (800fda4 <_svfiprintf_r+0x1f4>)
 800fd18:	bb1b      	cbnz	r3, 800fd62 <_svfiprintf_r+0x1b2>
 800fd1a:	9b03      	ldr	r3, [sp, #12]
 800fd1c:	3307      	adds	r3, #7
 800fd1e:	f023 0307 	bic.w	r3, r3, #7
 800fd22:	3308      	adds	r3, #8
 800fd24:	9303      	str	r3, [sp, #12]
 800fd26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd28:	4433      	add	r3, r6
 800fd2a:	9309      	str	r3, [sp, #36]	; 0x24
 800fd2c:	e767      	b.n	800fbfe <_svfiprintf_r+0x4e>
 800fd2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd32:	460c      	mov	r4, r1
 800fd34:	2001      	movs	r0, #1
 800fd36:	e7a5      	b.n	800fc84 <_svfiprintf_r+0xd4>
 800fd38:	2300      	movs	r3, #0
 800fd3a:	3401      	adds	r4, #1
 800fd3c:	9305      	str	r3, [sp, #20]
 800fd3e:	4619      	mov	r1, r3
 800fd40:	f04f 0c0a 	mov.w	ip, #10
 800fd44:	4620      	mov	r0, r4
 800fd46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd4a:	3a30      	subs	r2, #48	; 0x30
 800fd4c:	2a09      	cmp	r2, #9
 800fd4e:	d903      	bls.n	800fd58 <_svfiprintf_r+0x1a8>
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d0c5      	beq.n	800fce0 <_svfiprintf_r+0x130>
 800fd54:	9105      	str	r1, [sp, #20]
 800fd56:	e7c3      	b.n	800fce0 <_svfiprintf_r+0x130>
 800fd58:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd5c:	4604      	mov	r4, r0
 800fd5e:	2301      	movs	r3, #1
 800fd60:	e7f0      	b.n	800fd44 <_svfiprintf_r+0x194>
 800fd62:	ab03      	add	r3, sp, #12
 800fd64:	9300      	str	r3, [sp, #0]
 800fd66:	462a      	mov	r2, r5
 800fd68:	4b0f      	ldr	r3, [pc, #60]	; (800fda8 <_svfiprintf_r+0x1f8>)
 800fd6a:	a904      	add	r1, sp, #16
 800fd6c:	4638      	mov	r0, r7
 800fd6e:	f3af 8000 	nop.w
 800fd72:	1c42      	adds	r2, r0, #1
 800fd74:	4606      	mov	r6, r0
 800fd76:	d1d6      	bne.n	800fd26 <_svfiprintf_r+0x176>
 800fd78:	89ab      	ldrh	r3, [r5, #12]
 800fd7a:	065b      	lsls	r3, r3, #25
 800fd7c:	f53f af2c 	bmi.w	800fbd8 <_svfiprintf_r+0x28>
 800fd80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd82:	b01d      	add	sp, #116	; 0x74
 800fd84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd88:	ab03      	add	r3, sp, #12
 800fd8a:	9300      	str	r3, [sp, #0]
 800fd8c:	462a      	mov	r2, r5
 800fd8e:	4b06      	ldr	r3, [pc, #24]	; (800fda8 <_svfiprintf_r+0x1f8>)
 800fd90:	a904      	add	r1, sp, #16
 800fd92:	4638      	mov	r0, r7
 800fd94:	f000 f87a 	bl	800fe8c <_printf_i>
 800fd98:	e7eb      	b.n	800fd72 <_svfiprintf_r+0x1c2>
 800fd9a:	bf00      	nop
 800fd9c:	08011632 	.word	0x08011632
 800fda0:	0801163c 	.word	0x0801163c
 800fda4:	00000000 	.word	0x00000000
 800fda8:	0800faf9 	.word	0x0800faf9
 800fdac:	08011638 	.word	0x08011638

0800fdb0 <_printf_common>:
 800fdb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdb4:	4616      	mov	r6, r2
 800fdb6:	4699      	mov	r9, r3
 800fdb8:	688a      	ldr	r2, [r1, #8]
 800fdba:	690b      	ldr	r3, [r1, #16]
 800fdbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fdc0:	4293      	cmp	r3, r2
 800fdc2:	bfb8      	it	lt
 800fdc4:	4613      	movlt	r3, r2
 800fdc6:	6033      	str	r3, [r6, #0]
 800fdc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fdcc:	4607      	mov	r7, r0
 800fdce:	460c      	mov	r4, r1
 800fdd0:	b10a      	cbz	r2, 800fdd6 <_printf_common+0x26>
 800fdd2:	3301      	adds	r3, #1
 800fdd4:	6033      	str	r3, [r6, #0]
 800fdd6:	6823      	ldr	r3, [r4, #0]
 800fdd8:	0699      	lsls	r1, r3, #26
 800fdda:	bf42      	ittt	mi
 800fddc:	6833      	ldrmi	r3, [r6, #0]
 800fdde:	3302      	addmi	r3, #2
 800fde0:	6033      	strmi	r3, [r6, #0]
 800fde2:	6825      	ldr	r5, [r4, #0]
 800fde4:	f015 0506 	ands.w	r5, r5, #6
 800fde8:	d106      	bne.n	800fdf8 <_printf_common+0x48>
 800fdea:	f104 0a19 	add.w	sl, r4, #25
 800fdee:	68e3      	ldr	r3, [r4, #12]
 800fdf0:	6832      	ldr	r2, [r6, #0]
 800fdf2:	1a9b      	subs	r3, r3, r2
 800fdf4:	42ab      	cmp	r3, r5
 800fdf6:	dc26      	bgt.n	800fe46 <_printf_common+0x96>
 800fdf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fdfc:	1e13      	subs	r3, r2, #0
 800fdfe:	6822      	ldr	r2, [r4, #0]
 800fe00:	bf18      	it	ne
 800fe02:	2301      	movne	r3, #1
 800fe04:	0692      	lsls	r2, r2, #26
 800fe06:	d42b      	bmi.n	800fe60 <_printf_common+0xb0>
 800fe08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fe0c:	4649      	mov	r1, r9
 800fe0e:	4638      	mov	r0, r7
 800fe10:	47c0      	blx	r8
 800fe12:	3001      	adds	r0, #1
 800fe14:	d01e      	beq.n	800fe54 <_printf_common+0xa4>
 800fe16:	6823      	ldr	r3, [r4, #0]
 800fe18:	68e5      	ldr	r5, [r4, #12]
 800fe1a:	6832      	ldr	r2, [r6, #0]
 800fe1c:	f003 0306 	and.w	r3, r3, #6
 800fe20:	2b04      	cmp	r3, #4
 800fe22:	bf08      	it	eq
 800fe24:	1aad      	subeq	r5, r5, r2
 800fe26:	68a3      	ldr	r3, [r4, #8]
 800fe28:	6922      	ldr	r2, [r4, #16]
 800fe2a:	bf0c      	ite	eq
 800fe2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fe30:	2500      	movne	r5, #0
 800fe32:	4293      	cmp	r3, r2
 800fe34:	bfc4      	itt	gt
 800fe36:	1a9b      	subgt	r3, r3, r2
 800fe38:	18ed      	addgt	r5, r5, r3
 800fe3a:	2600      	movs	r6, #0
 800fe3c:	341a      	adds	r4, #26
 800fe3e:	42b5      	cmp	r5, r6
 800fe40:	d11a      	bne.n	800fe78 <_printf_common+0xc8>
 800fe42:	2000      	movs	r0, #0
 800fe44:	e008      	b.n	800fe58 <_printf_common+0xa8>
 800fe46:	2301      	movs	r3, #1
 800fe48:	4652      	mov	r2, sl
 800fe4a:	4649      	mov	r1, r9
 800fe4c:	4638      	mov	r0, r7
 800fe4e:	47c0      	blx	r8
 800fe50:	3001      	adds	r0, #1
 800fe52:	d103      	bne.n	800fe5c <_printf_common+0xac>
 800fe54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe5c:	3501      	adds	r5, #1
 800fe5e:	e7c6      	b.n	800fdee <_printf_common+0x3e>
 800fe60:	18e1      	adds	r1, r4, r3
 800fe62:	1c5a      	adds	r2, r3, #1
 800fe64:	2030      	movs	r0, #48	; 0x30
 800fe66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fe6a:	4422      	add	r2, r4
 800fe6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fe70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fe74:	3302      	adds	r3, #2
 800fe76:	e7c7      	b.n	800fe08 <_printf_common+0x58>
 800fe78:	2301      	movs	r3, #1
 800fe7a:	4622      	mov	r2, r4
 800fe7c:	4649      	mov	r1, r9
 800fe7e:	4638      	mov	r0, r7
 800fe80:	47c0      	blx	r8
 800fe82:	3001      	adds	r0, #1
 800fe84:	d0e6      	beq.n	800fe54 <_printf_common+0xa4>
 800fe86:	3601      	adds	r6, #1
 800fe88:	e7d9      	b.n	800fe3e <_printf_common+0x8e>
	...

0800fe8c <_printf_i>:
 800fe8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fe90:	7e0f      	ldrb	r7, [r1, #24]
 800fe92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fe94:	2f78      	cmp	r7, #120	; 0x78
 800fe96:	4691      	mov	r9, r2
 800fe98:	4680      	mov	r8, r0
 800fe9a:	460c      	mov	r4, r1
 800fe9c:	469a      	mov	sl, r3
 800fe9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fea2:	d807      	bhi.n	800feb4 <_printf_i+0x28>
 800fea4:	2f62      	cmp	r7, #98	; 0x62
 800fea6:	d80a      	bhi.n	800febe <_printf_i+0x32>
 800fea8:	2f00      	cmp	r7, #0
 800feaa:	f000 80d8 	beq.w	801005e <_printf_i+0x1d2>
 800feae:	2f58      	cmp	r7, #88	; 0x58
 800feb0:	f000 80a3 	beq.w	800fffa <_printf_i+0x16e>
 800feb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800feb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800febc:	e03a      	b.n	800ff34 <_printf_i+0xa8>
 800febe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fec2:	2b15      	cmp	r3, #21
 800fec4:	d8f6      	bhi.n	800feb4 <_printf_i+0x28>
 800fec6:	a101      	add	r1, pc, #4	; (adr r1, 800fecc <_printf_i+0x40>)
 800fec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fecc:	0800ff25 	.word	0x0800ff25
 800fed0:	0800ff39 	.word	0x0800ff39
 800fed4:	0800feb5 	.word	0x0800feb5
 800fed8:	0800feb5 	.word	0x0800feb5
 800fedc:	0800feb5 	.word	0x0800feb5
 800fee0:	0800feb5 	.word	0x0800feb5
 800fee4:	0800ff39 	.word	0x0800ff39
 800fee8:	0800feb5 	.word	0x0800feb5
 800feec:	0800feb5 	.word	0x0800feb5
 800fef0:	0800feb5 	.word	0x0800feb5
 800fef4:	0800feb5 	.word	0x0800feb5
 800fef8:	08010045 	.word	0x08010045
 800fefc:	0800ff69 	.word	0x0800ff69
 800ff00:	08010027 	.word	0x08010027
 800ff04:	0800feb5 	.word	0x0800feb5
 800ff08:	0800feb5 	.word	0x0800feb5
 800ff0c:	08010067 	.word	0x08010067
 800ff10:	0800feb5 	.word	0x0800feb5
 800ff14:	0800ff69 	.word	0x0800ff69
 800ff18:	0800feb5 	.word	0x0800feb5
 800ff1c:	0800feb5 	.word	0x0800feb5
 800ff20:	0801002f 	.word	0x0801002f
 800ff24:	682b      	ldr	r3, [r5, #0]
 800ff26:	1d1a      	adds	r2, r3, #4
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	602a      	str	r2, [r5, #0]
 800ff2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ff30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ff34:	2301      	movs	r3, #1
 800ff36:	e0a3      	b.n	8010080 <_printf_i+0x1f4>
 800ff38:	6820      	ldr	r0, [r4, #0]
 800ff3a:	6829      	ldr	r1, [r5, #0]
 800ff3c:	0606      	lsls	r6, r0, #24
 800ff3e:	f101 0304 	add.w	r3, r1, #4
 800ff42:	d50a      	bpl.n	800ff5a <_printf_i+0xce>
 800ff44:	680e      	ldr	r6, [r1, #0]
 800ff46:	602b      	str	r3, [r5, #0]
 800ff48:	2e00      	cmp	r6, #0
 800ff4a:	da03      	bge.n	800ff54 <_printf_i+0xc8>
 800ff4c:	232d      	movs	r3, #45	; 0x2d
 800ff4e:	4276      	negs	r6, r6
 800ff50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff54:	485e      	ldr	r0, [pc, #376]	; (80100d0 <_printf_i+0x244>)
 800ff56:	230a      	movs	r3, #10
 800ff58:	e019      	b.n	800ff8e <_printf_i+0x102>
 800ff5a:	680e      	ldr	r6, [r1, #0]
 800ff5c:	602b      	str	r3, [r5, #0]
 800ff5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ff62:	bf18      	it	ne
 800ff64:	b236      	sxthne	r6, r6
 800ff66:	e7ef      	b.n	800ff48 <_printf_i+0xbc>
 800ff68:	682b      	ldr	r3, [r5, #0]
 800ff6a:	6820      	ldr	r0, [r4, #0]
 800ff6c:	1d19      	adds	r1, r3, #4
 800ff6e:	6029      	str	r1, [r5, #0]
 800ff70:	0601      	lsls	r1, r0, #24
 800ff72:	d501      	bpl.n	800ff78 <_printf_i+0xec>
 800ff74:	681e      	ldr	r6, [r3, #0]
 800ff76:	e002      	b.n	800ff7e <_printf_i+0xf2>
 800ff78:	0646      	lsls	r6, r0, #25
 800ff7a:	d5fb      	bpl.n	800ff74 <_printf_i+0xe8>
 800ff7c:	881e      	ldrh	r6, [r3, #0]
 800ff7e:	4854      	ldr	r0, [pc, #336]	; (80100d0 <_printf_i+0x244>)
 800ff80:	2f6f      	cmp	r7, #111	; 0x6f
 800ff82:	bf0c      	ite	eq
 800ff84:	2308      	moveq	r3, #8
 800ff86:	230a      	movne	r3, #10
 800ff88:	2100      	movs	r1, #0
 800ff8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ff8e:	6865      	ldr	r5, [r4, #4]
 800ff90:	60a5      	str	r5, [r4, #8]
 800ff92:	2d00      	cmp	r5, #0
 800ff94:	bfa2      	ittt	ge
 800ff96:	6821      	ldrge	r1, [r4, #0]
 800ff98:	f021 0104 	bicge.w	r1, r1, #4
 800ff9c:	6021      	strge	r1, [r4, #0]
 800ff9e:	b90e      	cbnz	r6, 800ffa4 <_printf_i+0x118>
 800ffa0:	2d00      	cmp	r5, #0
 800ffa2:	d04d      	beq.n	8010040 <_printf_i+0x1b4>
 800ffa4:	4615      	mov	r5, r2
 800ffa6:	fbb6 f1f3 	udiv	r1, r6, r3
 800ffaa:	fb03 6711 	mls	r7, r3, r1, r6
 800ffae:	5dc7      	ldrb	r7, [r0, r7]
 800ffb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ffb4:	4637      	mov	r7, r6
 800ffb6:	42bb      	cmp	r3, r7
 800ffb8:	460e      	mov	r6, r1
 800ffba:	d9f4      	bls.n	800ffa6 <_printf_i+0x11a>
 800ffbc:	2b08      	cmp	r3, #8
 800ffbe:	d10b      	bne.n	800ffd8 <_printf_i+0x14c>
 800ffc0:	6823      	ldr	r3, [r4, #0]
 800ffc2:	07de      	lsls	r6, r3, #31
 800ffc4:	d508      	bpl.n	800ffd8 <_printf_i+0x14c>
 800ffc6:	6923      	ldr	r3, [r4, #16]
 800ffc8:	6861      	ldr	r1, [r4, #4]
 800ffca:	4299      	cmp	r1, r3
 800ffcc:	bfde      	ittt	le
 800ffce:	2330      	movle	r3, #48	; 0x30
 800ffd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ffd4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ffd8:	1b52      	subs	r2, r2, r5
 800ffda:	6122      	str	r2, [r4, #16]
 800ffdc:	f8cd a000 	str.w	sl, [sp]
 800ffe0:	464b      	mov	r3, r9
 800ffe2:	aa03      	add	r2, sp, #12
 800ffe4:	4621      	mov	r1, r4
 800ffe6:	4640      	mov	r0, r8
 800ffe8:	f7ff fee2 	bl	800fdb0 <_printf_common>
 800ffec:	3001      	adds	r0, #1
 800ffee:	d14c      	bne.n	801008a <_printf_i+0x1fe>
 800fff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fff4:	b004      	add	sp, #16
 800fff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fffa:	4835      	ldr	r0, [pc, #212]	; (80100d0 <_printf_i+0x244>)
 800fffc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010000:	6829      	ldr	r1, [r5, #0]
 8010002:	6823      	ldr	r3, [r4, #0]
 8010004:	f851 6b04 	ldr.w	r6, [r1], #4
 8010008:	6029      	str	r1, [r5, #0]
 801000a:	061d      	lsls	r5, r3, #24
 801000c:	d514      	bpl.n	8010038 <_printf_i+0x1ac>
 801000e:	07df      	lsls	r7, r3, #31
 8010010:	bf44      	itt	mi
 8010012:	f043 0320 	orrmi.w	r3, r3, #32
 8010016:	6023      	strmi	r3, [r4, #0]
 8010018:	b91e      	cbnz	r6, 8010022 <_printf_i+0x196>
 801001a:	6823      	ldr	r3, [r4, #0]
 801001c:	f023 0320 	bic.w	r3, r3, #32
 8010020:	6023      	str	r3, [r4, #0]
 8010022:	2310      	movs	r3, #16
 8010024:	e7b0      	b.n	800ff88 <_printf_i+0xfc>
 8010026:	6823      	ldr	r3, [r4, #0]
 8010028:	f043 0320 	orr.w	r3, r3, #32
 801002c:	6023      	str	r3, [r4, #0]
 801002e:	2378      	movs	r3, #120	; 0x78
 8010030:	4828      	ldr	r0, [pc, #160]	; (80100d4 <_printf_i+0x248>)
 8010032:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010036:	e7e3      	b.n	8010000 <_printf_i+0x174>
 8010038:	0659      	lsls	r1, r3, #25
 801003a:	bf48      	it	mi
 801003c:	b2b6      	uxthmi	r6, r6
 801003e:	e7e6      	b.n	801000e <_printf_i+0x182>
 8010040:	4615      	mov	r5, r2
 8010042:	e7bb      	b.n	800ffbc <_printf_i+0x130>
 8010044:	682b      	ldr	r3, [r5, #0]
 8010046:	6826      	ldr	r6, [r4, #0]
 8010048:	6961      	ldr	r1, [r4, #20]
 801004a:	1d18      	adds	r0, r3, #4
 801004c:	6028      	str	r0, [r5, #0]
 801004e:	0635      	lsls	r5, r6, #24
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	d501      	bpl.n	8010058 <_printf_i+0x1cc>
 8010054:	6019      	str	r1, [r3, #0]
 8010056:	e002      	b.n	801005e <_printf_i+0x1d2>
 8010058:	0670      	lsls	r0, r6, #25
 801005a:	d5fb      	bpl.n	8010054 <_printf_i+0x1c8>
 801005c:	8019      	strh	r1, [r3, #0]
 801005e:	2300      	movs	r3, #0
 8010060:	6123      	str	r3, [r4, #16]
 8010062:	4615      	mov	r5, r2
 8010064:	e7ba      	b.n	800ffdc <_printf_i+0x150>
 8010066:	682b      	ldr	r3, [r5, #0]
 8010068:	1d1a      	adds	r2, r3, #4
 801006a:	602a      	str	r2, [r5, #0]
 801006c:	681d      	ldr	r5, [r3, #0]
 801006e:	6862      	ldr	r2, [r4, #4]
 8010070:	2100      	movs	r1, #0
 8010072:	4628      	mov	r0, r5
 8010074:	f7f0 f92c 	bl	80002d0 <memchr>
 8010078:	b108      	cbz	r0, 801007e <_printf_i+0x1f2>
 801007a:	1b40      	subs	r0, r0, r5
 801007c:	6060      	str	r0, [r4, #4]
 801007e:	6863      	ldr	r3, [r4, #4]
 8010080:	6123      	str	r3, [r4, #16]
 8010082:	2300      	movs	r3, #0
 8010084:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010088:	e7a8      	b.n	800ffdc <_printf_i+0x150>
 801008a:	6923      	ldr	r3, [r4, #16]
 801008c:	462a      	mov	r2, r5
 801008e:	4649      	mov	r1, r9
 8010090:	4640      	mov	r0, r8
 8010092:	47d0      	blx	sl
 8010094:	3001      	adds	r0, #1
 8010096:	d0ab      	beq.n	800fff0 <_printf_i+0x164>
 8010098:	6823      	ldr	r3, [r4, #0]
 801009a:	079b      	lsls	r3, r3, #30
 801009c:	d413      	bmi.n	80100c6 <_printf_i+0x23a>
 801009e:	68e0      	ldr	r0, [r4, #12]
 80100a0:	9b03      	ldr	r3, [sp, #12]
 80100a2:	4298      	cmp	r0, r3
 80100a4:	bfb8      	it	lt
 80100a6:	4618      	movlt	r0, r3
 80100a8:	e7a4      	b.n	800fff4 <_printf_i+0x168>
 80100aa:	2301      	movs	r3, #1
 80100ac:	4632      	mov	r2, r6
 80100ae:	4649      	mov	r1, r9
 80100b0:	4640      	mov	r0, r8
 80100b2:	47d0      	blx	sl
 80100b4:	3001      	adds	r0, #1
 80100b6:	d09b      	beq.n	800fff0 <_printf_i+0x164>
 80100b8:	3501      	adds	r5, #1
 80100ba:	68e3      	ldr	r3, [r4, #12]
 80100bc:	9903      	ldr	r1, [sp, #12]
 80100be:	1a5b      	subs	r3, r3, r1
 80100c0:	42ab      	cmp	r3, r5
 80100c2:	dcf2      	bgt.n	80100aa <_printf_i+0x21e>
 80100c4:	e7eb      	b.n	801009e <_printf_i+0x212>
 80100c6:	2500      	movs	r5, #0
 80100c8:	f104 0619 	add.w	r6, r4, #25
 80100cc:	e7f5      	b.n	80100ba <_printf_i+0x22e>
 80100ce:	bf00      	nop
 80100d0:	08011643 	.word	0x08011643
 80100d4:	08011654 	.word	0x08011654

080100d8 <memmove>:
 80100d8:	4288      	cmp	r0, r1
 80100da:	b510      	push	{r4, lr}
 80100dc:	eb01 0402 	add.w	r4, r1, r2
 80100e0:	d902      	bls.n	80100e8 <memmove+0x10>
 80100e2:	4284      	cmp	r4, r0
 80100e4:	4623      	mov	r3, r4
 80100e6:	d807      	bhi.n	80100f8 <memmove+0x20>
 80100e8:	1e43      	subs	r3, r0, #1
 80100ea:	42a1      	cmp	r1, r4
 80100ec:	d008      	beq.n	8010100 <memmove+0x28>
 80100ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80100f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80100f6:	e7f8      	b.n	80100ea <memmove+0x12>
 80100f8:	4402      	add	r2, r0
 80100fa:	4601      	mov	r1, r0
 80100fc:	428a      	cmp	r2, r1
 80100fe:	d100      	bne.n	8010102 <memmove+0x2a>
 8010100:	bd10      	pop	{r4, pc}
 8010102:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010106:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801010a:	e7f7      	b.n	80100fc <memmove+0x24>

0801010c <_realloc_r>:
 801010c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010110:	4680      	mov	r8, r0
 8010112:	4614      	mov	r4, r2
 8010114:	460e      	mov	r6, r1
 8010116:	b921      	cbnz	r1, 8010122 <_realloc_r+0x16>
 8010118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801011c:	4611      	mov	r1, r2
 801011e:	f7ff ba87 	b.w	800f630 <_malloc_r>
 8010122:	b92a      	cbnz	r2, 8010130 <_realloc_r+0x24>
 8010124:	f7ff fc9c 	bl	800fa60 <_free_r>
 8010128:	4625      	mov	r5, r4
 801012a:	4628      	mov	r0, r5
 801012c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010130:	f000 f81b 	bl	801016a <_malloc_usable_size_r>
 8010134:	4284      	cmp	r4, r0
 8010136:	4607      	mov	r7, r0
 8010138:	d802      	bhi.n	8010140 <_realloc_r+0x34>
 801013a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801013e:	d812      	bhi.n	8010166 <_realloc_r+0x5a>
 8010140:	4621      	mov	r1, r4
 8010142:	4640      	mov	r0, r8
 8010144:	f7ff fa74 	bl	800f630 <_malloc_r>
 8010148:	4605      	mov	r5, r0
 801014a:	2800      	cmp	r0, #0
 801014c:	d0ed      	beq.n	801012a <_realloc_r+0x1e>
 801014e:	42bc      	cmp	r4, r7
 8010150:	4622      	mov	r2, r4
 8010152:	4631      	mov	r1, r6
 8010154:	bf28      	it	cs
 8010156:	463a      	movcs	r2, r7
 8010158:	f7ff fa34 	bl	800f5c4 <memcpy>
 801015c:	4631      	mov	r1, r6
 801015e:	4640      	mov	r0, r8
 8010160:	f7ff fc7e 	bl	800fa60 <_free_r>
 8010164:	e7e1      	b.n	801012a <_realloc_r+0x1e>
 8010166:	4635      	mov	r5, r6
 8010168:	e7df      	b.n	801012a <_realloc_r+0x1e>

0801016a <_malloc_usable_size_r>:
 801016a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801016e:	1f18      	subs	r0, r3, #4
 8010170:	2b00      	cmp	r3, #0
 8010172:	bfbc      	itt	lt
 8010174:	580b      	ldrlt	r3, [r1, r0]
 8010176:	18c0      	addlt	r0, r0, r3
 8010178:	4770      	bx	lr

0801017a <atan2f>:
 801017a:	f000 b81f 	b.w	80101bc <__ieee754_atan2f>
	...

08010180 <sqrtf>:
 8010180:	b508      	push	{r3, lr}
 8010182:	ed2d 8b02 	vpush	{d8}
 8010186:	eeb0 8a40 	vmov.f32	s16, s0
 801018a:	f000 f8b7 	bl	80102fc <__ieee754_sqrtf>
 801018e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010196:	d60c      	bvs.n	80101b2 <sqrtf+0x32>
 8010198:	eddf 8a07 	vldr	s17, [pc, #28]	; 80101b8 <sqrtf+0x38>
 801019c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80101a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a4:	d505      	bpl.n	80101b2 <sqrtf+0x32>
 80101a6:	f7ff f9c7 	bl	800f538 <__errno>
 80101aa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80101ae:	2321      	movs	r3, #33	; 0x21
 80101b0:	6003      	str	r3, [r0, #0]
 80101b2:	ecbd 8b02 	vpop	{d8}
 80101b6:	bd08      	pop	{r3, pc}
 80101b8:	00000000 	.word	0x00000000

080101bc <__ieee754_atan2f>:
 80101bc:	ee10 2a90 	vmov	r2, s1
 80101c0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80101c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80101c8:	b510      	push	{r4, lr}
 80101ca:	eef0 7a40 	vmov.f32	s15, s0
 80101ce:	dc06      	bgt.n	80101de <__ieee754_atan2f+0x22>
 80101d0:	ee10 0a10 	vmov	r0, s0
 80101d4:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80101d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80101dc:	dd04      	ble.n	80101e8 <__ieee754_atan2f+0x2c>
 80101de:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80101e2:	eeb0 0a67 	vmov.f32	s0, s15
 80101e6:	bd10      	pop	{r4, pc}
 80101e8:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 80101ec:	d103      	bne.n	80101f6 <__ieee754_atan2f+0x3a>
 80101ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101f2:	f000 b887 	b.w	8010304 <atanf>
 80101f6:	1794      	asrs	r4, r2, #30
 80101f8:	f004 0402 	and.w	r4, r4, #2
 80101fc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010200:	b943      	cbnz	r3, 8010214 <__ieee754_atan2f+0x58>
 8010202:	2c02      	cmp	r4, #2
 8010204:	d05e      	beq.n	80102c4 <__ieee754_atan2f+0x108>
 8010206:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80102d8 <__ieee754_atan2f+0x11c>
 801020a:	2c03      	cmp	r4, #3
 801020c:	bf08      	it	eq
 801020e:	eef0 7a47 	vmoveq.f32	s15, s14
 8010212:	e7e6      	b.n	80101e2 <__ieee754_atan2f+0x26>
 8010214:	b941      	cbnz	r1, 8010228 <__ieee754_atan2f+0x6c>
 8010216:	eddf 7a31 	vldr	s15, [pc, #196]	; 80102dc <__ieee754_atan2f+0x120>
 801021a:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80102e0 <__ieee754_atan2f+0x124>
 801021e:	2800      	cmp	r0, #0
 8010220:	bfb8      	it	lt
 8010222:	eef0 7a40 	vmovlt.f32	s15, s0
 8010226:	e7dc      	b.n	80101e2 <__ieee754_atan2f+0x26>
 8010228:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801022c:	d110      	bne.n	8010250 <__ieee754_atan2f+0x94>
 801022e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010232:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8010236:	d107      	bne.n	8010248 <__ieee754_atan2f+0x8c>
 8010238:	2c02      	cmp	r4, #2
 801023a:	d846      	bhi.n	80102ca <__ieee754_atan2f+0x10e>
 801023c:	4b29      	ldr	r3, [pc, #164]	; (80102e4 <__ieee754_atan2f+0x128>)
 801023e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010242:	edd4 7a00 	vldr	s15, [r4]
 8010246:	e7cc      	b.n	80101e2 <__ieee754_atan2f+0x26>
 8010248:	2c02      	cmp	r4, #2
 801024a:	d841      	bhi.n	80102d0 <__ieee754_atan2f+0x114>
 801024c:	4b26      	ldr	r3, [pc, #152]	; (80102e8 <__ieee754_atan2f+0x12c>)
 801024e:	e7f6      	b.n	801023e <__ieee754_atan2f+0x82>
 8010250:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010254:	d0df      	beq.n	8010216 <__ieee754_atan2f+0x5a>
 8010256:	1a5b      	subs	r3, r3, r1
 8010258:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 801025c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010260:	da1a      	bge.n	8010298 <__ieee754_atan2f+0xdc>
 8010262:	2a00      	cmp	r2, #0
 8010264:	da01      	bge.n	801026a <__ieee754_atan2f+0xae>
 8010266:	313c      	adds	r1, #60	; 0x3c
 8010268:	db19      	blt.n	801029e <__ieee754_atan2f+0xe2>
 801026a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801026e:	f000 f91d 	bl	80104ac <fabsf>
 8010272:	f000 f847 	bl	8010304 <atanf>
 8010276:	eef0 7a40 	vmov.f32	s15, s0
 801027a:	2c01      	cmp	r4, #1
 801027c:	d012      	beq.n	80102a4 <__ieee754_atan2f+0xe8>
 801027e:	2c02      	cmp	r4, #2
 8010280:	d017      	beq.n	80102b2 <__ieee754_atan2f+0xf6>
 8010282:	2c00      	cmp	r4, #0
 8010284:	d0ad      	beq.n	80101e2 <__ieee754_atan2f+0x26>
 8010286:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80102ec <__ieee754_atan2f+0x130>
 801028a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801028e:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80102f0 <__ieee754_atan2f+0x134>
 8010292:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010296:	e7a4      	b.n	80101e2 <__ieee754_atan2f+0x26>
 8010298:	eddf 7a10 	vldr	s15, [pc, #64]	; 80102dc <__ieee754_atan2f+0x120>
 801029c:	e7ed      	b.n	801027a <__ieee754_atan2f+0xbe>
 801029e:	eddf 7a15 	vldr	s15, [pc, #84]	; 80102f4 <__ieee754_atan2f+0x138>
 80102a2:	e7ea      	b.n	801027a <__ieee754_atan2f+0xbe>
 80102a4:	ee17 3a90 	vmov	r3, s15
 80102a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80102ac:	ee07 3a90 	vmov	s15, r3
 80102b0:	e797      	b.n	80101e2 <__ieee754_atan2f+0x26>
 80102b2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80102ec <__ieee754_atan2f+0x130>
 80102b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80102ba:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80102f0 <__ieee754_atan2f+0x134>
 80102be:	ee70 7a67 	vsub.f32	s15, s0, s15
 80102c2:	e78e      	b.n	80101e2 <__ieee754_atan2f+0x26>
 80102c4:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80102f0 <__ieee754_atan2f+0x134>
 80102c8:	e78b      	b.n	80101e2 <__ieee754_atan2f+0x26>
 80102ca:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80102f8 <__ieee754_atan2f+0x13c>
 80102ce:	e788      	b.n	80101e2 <__ieee754_atan2f+0x26>
 80102d0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80102f4 <__ieee754_atan2f+0x138>
 80102d4:	e785      	b.n	80101e2 <__ieee754_atan2f+0x26>
 80102d6:	bf00      	nop
 80102d8:	c0490fdb 	.word	0xc0490fdb
 80102dc:	3fc90fdb 	.word	0x3fc90fdb
 80102e0:	bfc90fdb 	.word	0xbfc90fdb
 80102e4:	08011668 	.word	0x08011668
 80102e8:	08011674 	.word	0x08011674
 80102ec:	33bbbd2e 	.word	0x33bbbd2e
 80102f0:	40490fdb 	.word	0x40490fdb
 80102f4:	00000000 	.word	0x00000000
 80102f8:	3f490fdb 	.word	0x3f490fdb

080102fc <__ieee754_sqrtf>:
 80102fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010300:	4770      	bx	lr
	...

08010304 <atanf>:
 8010304:	b538      	push	{r3, r4, r5, lr}
 8010306:	ee10 5a10 	vmov	r5, s0
 801030a:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801030e:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8010312:	eef0 7a40 	vmov.f32	s15, s0
 8010316:	db10      	blt.n	801033a <atanf+0x36>
 8010318:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801031c:	dd04      	ble.n	8010328 <atanf+0x24>
 801031e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8010322:	eeb0 0a67 	vmov.f32	s0, s15
 8010326:	bd38      	pop	{r3, r4, r5, pc}
 8010328:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8010460 <atanf+0x15c>
 801032c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8010464 <atanf+0x160>
 8010330:	2d00      	cmp	r5, #0
 8010332:	bfd8      	it	le
 8010334:	eef0 7a40 	vmovle.f32	s15, s0
 8010338:	e7f3      	b.n	8010322 <atanf+0x1e>
 801033a:	4b4b      	ldr	r3, [pc, #300]	; (8010468 <atanf+0x164>)
 801033c:	429c      	cmp	r4, r3
 801033e:	dc10      	bgt.n	8010362 <atanf+0x5e>
 8010340:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8010344:	da0a      	bge.n	801035c <atanf+0x58>
 8010346:	ed9f 7a49 	vldr	s14, [pc, #292]	; 801046c <atanf+0x168>
 801034a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801034e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010352:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8010356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801035a:	dce2      	bgt.n	8010322 <atanf+0x1e>
 801035c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010360:	e013      	b.n	801038a <atanf+0x86>
 8010362:	f000 f8a3 	bl	80104ac <fabsf>
 8010366:	4b42      	ldr	r3, [pc, #264]	; (8010470 <atanf+0x16c>)
 8010368:	429c      	cmp	r4, r3
 801036a:	dc4f      	bgt.n	801040c <atanf+0x108>
 801036c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8010370:	429c      	cmp	r4, r3
 8010372:	dc41      	bgt.n	80103f8 <atanf+0xf4>
 8010374:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8010378:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801037c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010380:	2300      	movs	r3, #0
 8010382:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010386:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801038a:	1c5a      	adds	r2, r3, #1
 801038c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010390:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010474 <atanf+0x170>
 8010394:	eddf 5a38 	vldr	s11, [pc, #224]	; 8010478 <atanf+0x174>
 8010398:	ed9f 5a38 	vldr	s10, [pc, #224]	; 801047c <atanf+0x178>
 801039c:	ee66 6a06 	vmul.f32	s13, s12, s12
 80103a0:	eee6 5a87 	vfma.f32	s11, s13, s14
 80103a4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8010480 <atanf+0x17c>
 80103a8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80103ac:	eddf 5a35 	vldr	s11, [pc, #212]	; 8010484 <atanf+0x180>
 80103b0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80103b4:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8010488 <atanf+0x184>
 80103b8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80103bc:	eddf 5a33 	vldr	s11, [pc, #204]	; 801048c <atanf+0x188>
 80103c0:	eee7 5a26 	vfma.f32	s11, s14, s13
 80103c4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8010490 <atanf+0x18c>
 80103c8:	eea6 5a87 	vfma.f32	s10, s13, s14
 80103cc:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8010494 <atanf+0x190>
 80103d0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80103d4:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8010498 <atanf+0x194>
 80103d8:	eea7 5a26 	vfma.f32	s10, s14, s13
 80103dc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 801049c <atanf+0x198>
 80103e0:	eea5 7a26 	vfma.f32	s14, s10, s13
 80103e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80103e8:	eea5 7a86 	vfma.f32	s14, s11, s12
 80103ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80103f0:	d121      	bne.n	8010436 <atanf+0x132>
 80103f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80103f6:	e794      	b.n	8010322 <atanf+0x1e>
 80103f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80103fc:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010400:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010404:	2301      	movs	r3, #1
 8010406:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801040a:	e7be      	b.n	801038a <atanf+0x86>
 801040c:	4b24      	ldr	r3, [pc, #144]	; (80104a0 <atanf+0x19c>)
 801040e:	429c      	cmp	r4, r3
 8010410:	dc0b      	bgt.n	801042a <atanf+0x126>
 8010412:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8010416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801041a:	eea0 7a27 	vfma.f32	s14, s0, s15
 801041e:	2302      	movs	r3, #2
 8010420:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010424:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010428:	e7af      	b.n	801038a <atanf+0x86>
 801042a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801042e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010432:	2303      	movs	r3, #3
 8010434:	e7a9      	b.n	801038a <atanf+0x86>
 8010436:	4a1b      	ldr	r2, [pc, #108]	; (80104a4 <atanf+0x1a0>)
 8010438:	491b      	ldr	r1, [pc, #108]	; (80104a8 <atanf+0x1a4>)
 801043a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801043e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010442:	ed93 0a00 	vldr	s0, [r3]
 8010446:	ee37 7a40 	vsub.f32	s14, s14, s0
 801044a:	ed92 0a00 	vldr	s0, [r2]
 801044e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010452:	2d00      	cmp	r5, #0
 8010454:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010458:	bfb8      	it	lt
 801045a:	eef1 7a67 	vneglt.f32	s15, s15
 801045e:	e760      	b.n	8010322 <atanf+0x1e>
 8010460:	3fc90fdb 	.word	0x3fc90fdb
 8010464:	bfc90fdb 	.word	0xbfc90fdb
 8010468:	3edfffff 	.word	0x3edfffff
 801046c:	7149f2ca 	.word	0x7149f2ca
 8010470:	3f97ffff 	.word	0x3f97ffff
 8010474:	3c8569d7 	.word	0x3c8569d7
 8010478:	3d4bda59 	.word	0x3d4bda59
 801047c:	bd6ef16b 	.word	0xbd6ef16b
 8010480:	3d886b35 	.word	0x3d886b35
 8010484:	3dba2e6e 	.word	0x3dba2e6e
 8010488:	3e124925 	.word	0x3e124925
 801048c:	3eaaaaab 	.word	0x3eaaaaab
 8010490:	bd15a221 	.word	0xbd15a221
 8010494:	bd9d8795 	.word	0xbd9d8795
 8010498:	bde38e38 	.word	0xbde38e38
 801049c:	be4ccccd 	.word	0xbe4ccccd
 80104a0:	401bffff 	.word	0x401bffff
 80104a4:	08011680 	.word	0x08011680
 80104a8:	08011690 	.word	0x08011690

080104ac <fabsf>:
 80104ac:	ee10 3a10 	vmov	r3, s0
 80104b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80104b4:	ee00 3a10 	vmov	s0, r3
 80104b8:	4770      	bx	lr
	...

080104bc <_init>:
 80104bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104be:	bf00      	nop
 80104c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104c2:	bc08      	pop	{r3}
 80104c4:	469e      	mov	lr, r3
 80104c6:	4770      	bx	lr

080104c8 <_fini>:
 80104c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ca:	bf00      	nop
 80104cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80104ce:	bc08      	pop	{r3}
 80104d0:	469e      	mov	lr, r3
 80104d2:	4770      	bx	lr
