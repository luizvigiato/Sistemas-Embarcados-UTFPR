
testertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b964  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800bb04  0800bb04  0001bb04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc4c  0800bc4c  00020164  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc4c  0800bc4c  0001bc4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc54  0800bc54  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc54  0800bc54  0001bc54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc58  0800bc58  0001bc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  0800bc5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ab28  20000164  0800bdc0  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ac8c  0800bdc0  0002ac8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d725  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004892  00000000  00000000  0003d8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00042150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  00043738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000696a  00000000  00000000  00044b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a2be  00000000  00000000  0004b4b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e824  00000000  00000000  00065770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103f94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d1c  00000000  00000000  00103fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000164 	.word	0x20000164
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800baec 	.word	0x0800baec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000168 	.word	0x20000168
 80001dc:	0800baec 	.word	0x0800baec

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <task_led>:
	int timeout;
}led_t;

led_t green_led;

void task_led(void *param){
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	led_t *led = (led_t *)param;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	60fb      	str	r3, [r7, #12]
	while(1){
		HAL_GPIO_TogglePin(led->port,led->pin);
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	889b      	ldrh	r3, [r3, #4]
 80004f8:	4619      	mov	r1, r3
 80004fa:	4610      	mov	r0, r2
 80004fc:	f001 fb85 	bl	8001c0a <HAL_GPIO_TogglePin>
		vTaskDelay(led->timeout);
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	689b      	ldr	r3, [r3, #8]
 8000504:	4618      	mov	r0, r3
 8000506:	f008 fc25 	bl	8008d54 <vTaskDelay>
		HAL_GPIO_TogglePin(led->port,led->pin);
 800050a:	e7f1      	b.n	80004f0 <task_led+0xc>

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000512:	f000 fae9 	bl	8000ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000516:	f000 f837 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051a:	f000 f913 	bl	8000744 <MX_GPIO_Init>
  MX_DMA_Init();
 800051e:	f000 f8f1 	bl	8000704 <MX_DMA_Init>
  MX_ADC1_Init();
 8000522:	f000 f89d 	bl	8000660 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000526:	f006 fe81 	bl	800722c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800052a:	4a10      	ldr	r2, [pc, #64]	; (800056c <main+0x60>)
 800052c:	2100      	movs	r1, #0
 800052e:	4810      	ldr	r0, [pc, #64]	; (8000570 <main+0x64>)
 8000530:	f006 fec6 	bl	80072c0 <osThreadNew>
 8000534:	4603      	mov	r3, r0
 8000536:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <main+0x68>)
 8000538:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  green_led.timeout = 500;
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <main+0x6c>)
 800053c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000540:	609a      	str	r2, [r3, #8]
  green_led.port = LED_GPIO_Port;
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <main+0x6c>)
 8000544:	4a0d      	ldr	r2, [pc, #52]	; (800057c <main+0x70>)
 8000546:	601a      	str	r2, [r3, #0]
  green_led.pin = LED_Pin;
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <main+0x6c>)
 800054a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800054e:	809a      	strh	r2, [r3, #4]
  xTaskCreate(task_led,"Tarefa Led",256, &green_led, 1, NULL);
 8000550:	2300      	movs	r3, #0
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	2301      	movs	r3, #1
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	4b07      	ldr	r3, [pc, #28]	; (8000578 <main+0x6c>)
 800055a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800055e:	4908      	ldr	r1, [pc, #32]	; (8000580 <main+0x74>)
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <main+0x78>)
 8000562:	f008 fa9c 	bl	8008a9e <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000566:	f006 fe85 	bl	8007274 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056a:	e7fe      	b.n	800056a <main+0x5e>
 800056c:	0800bbb0 	.word	0x0800bbb0
 8000570:	08000805 	.word	0x08000805
 8000574:	20000228 	.word	0x20000228
 8000578:	2000022c 	.word	0x2000022c
 800057c:	40020800 	.word	0x40020800
 8000580:	0800bb24 	.word	0x0800bb24
 8000584:	080004e5 	.word	0x080004e5

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0320 	add.w	r3, r7, #32
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f00b f9de 	bl	800b958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 030c 	add.w	r3, r7, #12
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b29      	ldr	r3, [pc, #164]	; (8000658 <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a28      	ldr	r2, [pc, #160]	; (8000658 <SystemClock_Config+0xd0>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b26      	ldr	r3, [pc, #152]	; (8000658 <SystemClock_Config+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d4:	4a21      	ldr	r2, [pc, #132]	; (800065c <SystemClock_Config+0xd4>)
 80005d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <SystemClock_Config+0xd4>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80005fc:	2319      	movs	r3, #25
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000604:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000606:	2304      	movs	r3, #4
 8000608:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4618      	mov	r0, r3
 8000614:	f002 fd90 	bl	8003138 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800061e:	f000 f947 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000626:	2302      	movs	r3, #2
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2102      	movs	r1, #2
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fff2 	bl	8003628 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800064a:	f000 f931 	bl	80008b0 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3750      	adds	r7, #80	; 0x50
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <MX_ADC1_Init+0x9c>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ADC1_Init+0x98>)
 800067a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800067e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_ADC1_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_ADC1_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_ADC1_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a2:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_ADC1_Init+0xa0>)
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006bc:	2201      	movs	r2, #1
 80006be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006c2:	f000 faa7 	bl	8000c14 <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006cc:	f000 f8f0 	bl	80008b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_ADC1_Init+0x98>)
 80006e2:	f000 fadb 	bl	8000c9c <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006ec:	f000 f8e0 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000180 	.word	0x20000180
 80006fc:	40012000 	.word	0x40012000
 8000700:	0f000001 	.word	0x0f000001

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_DMA_Init+0x3c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <MX_DMA_Init+0x3c>)
 8000714:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_DMA_Init+0x3c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2105      	movs	r1, #5
 800072a:	2038      	movs	r0, #56	; 0x38
 800072c:	f000 fdaf 	bl	800128e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000730:	2038      	movs	r0, #56	; 0x38
 8000732:	f000 fdc8 	bl	80012c6 <HAL_NVIC_EnableIRQ>

}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
 800075e:	4b27      	ldr	r3, [pc, #156]	; (80007fc <MX_GPIO_Init+0xb8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a26      	ldr	r2, [pc, #152]	; (80007fc <MX_GPIO_Init+0xb8>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b24      	ldr	r3, [pc, #144]	; (80007fc <MX_GPIO_Init+0xb8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	4b20      	ldr	r3, [pc, #128]	; (80007fc <MX_GPIO_Init+0xb8>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <MX_GPIO_Init+0xb8>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b1d      	ldr	r3, [pc, #116]	; (80007fc <MX_GPIO_Init+0xb8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	4b19      	ldr	r3, [pc, #100]	; (80007fc <MX_GPIO_Init+0xb8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <MX_GPIO_Init+0xb8>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_GPIO_Init+0xb8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_GPIO_Init+0xb8>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a11      	ldr	r2, [pc, #68]	; (80007fc <MX_GPIO_Init+0xb8>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_GPIO_Init+0xb8>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d0:	480b      	ldr	r0, [pc, #44]	; (8000800 <MX_GPIO_Init+0xbc>)
 80007d2:	f001 fa01 	bl	8001bd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_GPIO_Init+0xbc>)
 80007f0:	f001 f86e 	bl	80018d0 <HAL_GPIO_Init>

}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	; 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020800 	.word	0x40020800

08000804 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08c      	sub	sp, #48	; 0x30
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800080c:	f00a face 	bl	800adac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  init_usb_rtos_obj();
 8000810:	f00a fafc 	bl	800ae0c <init_usb_rtos_obj>
  uint8_t cRxedChar, buffer[32], cInputIndex = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  /*char data;
	  CDC_Receiveq_MS(&data,portMAX_DELAY);
	  (void) CDC_Transmit_FS((uint8_t *) "\n\r",2);
	  (void) CDC_Transmit_FS((uint8_t *) &data,1);*/

		(void)read_usb_cdc((char *)buffer, 32, portMAX_DELAY);
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000822:	2120      	movs	r1, #32
 8000824:	4618      	mov	r0, r3
 8000826:	f00a fb0f 	bl	800ae48 <read_usb_cdc>
		cRxedChar = buffer[0];
 800082a:	7b3b      	ldrb	r3, [r7, #12]
 800082c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if( cRxedChar == '\r' ){
 8000830:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000834:	2b0d      	cmp	r3, #13
 8000836:	d108      	bne.n	800084a <StartDefaultTask+0x46>
			/*
			 * Entra quando finalizado envio de comando
			 */
			CDC_Transmit_FS((uint8_t *)"\n\r", 2);
 8000838:	2102      	movs	r1, #2
 800083a:	481a      	ldr	r0, [pc, #104]	; (80008a4 <StartDefaultTask+0xa0>)
 800083c:	f00a fbe0 	bl	800b000 <CDC_Transmit_FS>


			CDC_Transmit_FS((uint8_t *)NewLine , 2);
 8000840:	2102      	movs	r1, #2
 8000842:	4819      	ldr	r0, [pc, #100]	; (80008a8 <StartDefaultTask+0xa4>)
 8000844:	f00a fbdc 	bl	800b000 <CDC_Transmit_FS>
 8000848:	e7e7      	b.n	800081a <StartDefaultTask+0x16>
		} else {
			if( cRxedChar == '\0' ){
 800084a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800084e:	2b00      	cmp	r3, #0
 8000850:	d104      	bne.n	800085c <StartDefaultTask+0x58>
				CDC_Transmit_FS((uint8_t *) "Welcome to FreeRTOS\n\r# ", strlen((char *)"Welcome to FreeRTOS\n\r# "));
 8000852:	2117      	movs	r1, #23
 8000854:	4815      	ldr	r0, [pc, #84]	; (80008ac <StartDefaultTask+0xa8>)
 8000856:	f00a fbd3 	bl	800b000 <CDC_Transmit_FS>
 800085a:	e7de      	b.n	800081a <StartDefaultTask+0x16>
			} else if (cRxedChar == 0x7F ){
 800085c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000860:	2b7f      	cmp	r3, #127	; 0x7f
 8000862:	d10f      	bne.n	8000884 <StartDefaultTask+0x80>
				/*
				 * Backspace was pressed.
				 */
				if(cInputIndex > 0){
 8000864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000868:	2b00      	cmp	r3, #0
 800086a:	d0d6      	beq.n	800081a <StartDefaultTask+0x16>
					CDC_Transmit_FS(&cRxedChar, 1);
 800086c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000870:	2101      	movs	r1, #1
 8000872:	4618      	mov	r0, r3
 8000874:	f00a fbc4 	bl	800b000 <CDC_Transmit_FS>
					cInputIndex--;
 8000878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800087c:	3b01      	subs	r3, #1
 800087e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000882:	e7ca      	b.n	800081a <StartDefaultTask+0x16>
				}
			} else if(cInputIndex < MAX_INPUT_LENGTH){
 8000884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000888:	2b3f      	cmp	r3, #63	; 0x3f
 800088a:	d8c6      	bhi.n	800081a <StartDefaultTask+0x16>
			/*
			 * Replica digitado para tela
			 */
				CDC_Transmit_FS(&cRxedChar, 1);
 800088c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000890:	2101      	movs	r1, #1
 8000892:	4618      	mov	r0, r3
 8000894:	f00a fbb4 	bl	800b000 <CDC_Transmit_FS>
				cInputIndex++;
 8000898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800089c:	3301      	adds	r3, #1
 800089e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		(void)read_usb_cdc((char *)buffer, 32, portMAX_DELAY);
 80008a2:	e7ba      	b.n	800081a <StartDefaultTask+0x16>
 80008a4:	0800bb30 	.word	0x0800bb30
 80008a8:	0800bb34 	.word	0x0800bb34
 80008ac:	0800bb38 	.word	0x0800bb38

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <Error_Handler+0x8>
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b12      	ldr	r3, [pc, #72]	; (8000910 <HAL_MspInit+0x54>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	4a11      	ldr	r2, [pc, #68]	; (8000910 <HAL_MspInit+0x54>)
 80008cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d0:	6453      	str	r3, [r2, #68]	; 0x44
 80008d2:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <HAL_MspInit+0x54>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <HAL_MspInit+0x54>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <HAL_MspInit+0x54>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_MspInit+0x54>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	210f      	movs	r1, #15
 80008fe:	f06f 0001 	mvn.w	r0, #1
 8000902:	f000 fcc4 	bl	800128e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a2e      	ldr	r2, [pc, #184]	; (80009ec <HAL_ADC_MspInit+0xd8>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d156      	bne.n	80009e4 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <HAL_ADC_MspInit+0xdc>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a2c      	ldr	r2, [pc, #176]	; (80009f0 <HAL_ADC_MspInit+0xdc>)
 8000940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b2a      	ldr	r3, [pc, #168]	; (80009f0 <HAL_ADC_MspInit+0xdc>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <HAL_ADC_MspInit+0xdc>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a25      	ldr	r2, [pc, #148]	; (80009f0 <HAL_ADC_MspInit+0xdc>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b23      	ldr	r3, [pc, #140]	; (80009f0 <HAL_ADC_MspInit+0xdc>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800096e:	2301      	movs	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000972:	2303      	movs	r3, #3
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4619      	mov	r1, r3
 8000980:	481c      	ldr	r0, [pc, #112]	; (80009f4 <HAL_ADC_MspInit+0xe0>)
 8000982:	f000 ffa5 	bl	80018d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000986:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_ADC_MspInit+0xe4>)
 8000988:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <HAL_ADC_MspInit+0xe8>)
 800098a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <HAL_ADC_MspInit+0xe4>)
 800098e:	2200      	movs	r2, #0
 8000990:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_ADC_MspInit+0xe4>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000998:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <HAL_ADC_MspInit+0xe4>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <HAL_ADC_MspInit+0xe4>)
 80009a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <HAL_ADC_MspInit+0xe4>)
 80009a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_ADC_MspInit+0xe4>)
 80009b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <HAL_ADC_MspInit+0xe4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_ADC_MspInit+0xe4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <HAL_ADC_MspInit+0xe4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009c8:	480b      	ldr	r0, [pc, #44]	; (80009f8 <HAL_ADC_MspInit+0xe4>)
 80009ca:	f000 fc97 	bl	80012fc <HAL_DMA_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80009d4:	f7ff ff6c 	bl	80008b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a07      	ldr	r2, [pc, #28]	; (80009f8 <HAL_ADC_MspInit+0xe4>)
 80009dc:	639a      	str	r2, [r3, #56]	; 0x38
 80009de:	4a06      	ldr	r2, [pc, #24]	; (80009f8 <HAL_ADC_MspInit+0xe4>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	; 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40012000 	.word	0x40012000
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020400 	.word	0x40020400
 80009f8:	200001c8 	.word	0x200001c8
 80009fc:	40026410 	.word	0x40026410

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 f8ac 	bl	8000b8c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a34:	f008 fe2e 	bl	8009694 <xTaskGetSchedulerState>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d001      	beq.n	8000a42 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a3e:	f009 ff3b 	bl	800a8b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <DMA2_Stream0_IRQHandler+0x10>)
 8000a4e:	f000 fd03 	bl	8001458 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200001c8 	.word	0x200001c8

08000a5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000a60:	4802      	ldr	r0, [pc, #8]	; (8000a6c <OTG_FS_IRQHandler+0x10>)
 8000a62:	f001 fa3c 	bl	8001ede <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	2000a558 	.word	0x2000a558

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a9a:	490e      	ldr	r1, [pc, #56]	; (8000ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0b      	ldr	r2, [pc, #44]	; (8000adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ab0:	4c0b      	ldr	r4, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000abe:	f7ff ffd7 	bl	8000a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ac2:	f00a ff15 	bl	800b8f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac6:	f7ff fd21 	bl	800050c <main>
  bx  lr    
 8000aca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000acc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad4:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000ad8:	0800bc5c 	.word	0x0800bc5c
  ldr r2, =_sbss
 8000adc:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000ae0:	2000ac8c 	.word	0x2000ac8c

08000ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae4:	e7fe      	b.n	8000ae4 <ADC_IRQHandler>
	...

08000ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <HAL_Init+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0d      	ldr	r2, [pc, #52]	; (8000b28 <HAL_Init+0x40>)
 8000af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <HAL_Init+0x40>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <HAL_Init+0x40>)
 8000afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x40>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x40>)
 8000b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 fbb1 	bl	8001278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	200f      	movs	r0, #15
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fece 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023c00 	.word	0x40023c00

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fbc9 	bl	80012e2 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b68:	f000 fb91 	bl	800128e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000238 	.word	0x20000238

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000238 	.word	0x20000238

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff ffee 	bl	8000bb4 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_Delay+0x44>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffde 	bl	8000bb4 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008

08000c14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e033      	b.n	8000c92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d109      	bne.n	8000c46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fe6e 	bl	8000914 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d118      	bne.n	8000c84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c5a:	f023 0302 	bic.w	r3, r3, #2
 8000c5e:	f043 0202 	orr.w	r2, r3, #2
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f000 f93a 	bl	8000ee0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f023 0303 	bic.w	r3, r3, #3
 8000c7a:	f043 0201 	orr.w	r2, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	641a      	str	r2, [r3, #64]	; 0x40
 8000c82:	e001      	b.n	8000c88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d101      	bne.n	8000cb8 <HAL_ADC_ConfigChannel+0x1c>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e105      	b.n	8000ec4 <HAL_ADC_ConfigChannel+0x228>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b09      	cmp	r3, #9
 8000cc6:	d925      	bls.n	8000d14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68d9      	ldr	r1, [r3, #12]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	3b1e      	subs	r3, #30
 8000cde:	2207      	movs	r2, #7
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43da      	mvns	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	400a      	ands	r2, r1
 8000cec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68d9      	ldr	r1, [r3, #12]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	689a      	ldr	r2, [r3, #8]
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	4618      	mov	r0, r3
 8000d00:	4603      	mov	r3, r0
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	4403      	add	r3, r0
 8000d06:	3b1e      	subs	r3, #30
 8000d08:	409a      	lsls	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	e022      	b.n	8000d5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	6919      	ldr	r1, [r3, #16]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	461a      	mov	r2, r3
 8000d22:	4613      	mov	r3, r2
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	4413      	add	r3, r2
 8000d28:	2207      	movs	r2, #7
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	400a      	ands	r2, r1
 8000d36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6919      	ldr	r1, [r3, #16]
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4403      	add	r3, r0
 8000d50:	409a      	lsls	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	430a      	orrs	r2, r1
 8000d58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d824      	bhi.n	8000dac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685a      	ldr	r2, [r3, #4]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	3b05      	subs	r3, #5
 8000d74:	221f      	movs	r2, #31
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	400a      	ands	r2, r1
 8000d82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4618      	mov	r0, r3
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685a      	ldr	r2, [r3, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3b05      	subs	r3, #5
 8000d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	635a      	str	r2, [r3, #52]	; 0x34
 8000daa:	e04c      	b.n	8000e46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b0c      	cmp	r3, #12
 8000db2:	d824      	bhi.n	8000dfe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	4413      	add	r3, r2
 8000dc4:	3b23      	subs	r3, #35	; 0x23
 8000dc6:	221f      	movs	r2, #31
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43da      	mvns	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	400a      	ands	r2, r1
 8000dd4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	4613      	mov	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4413      	add	r3, r2
 8000dee:	3b23      	subs	r3, #35	; 0x23
 8000df0:	fa00 f203 	lsl.w	r2, r0, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8000dfc:	e023      	b.n	8000e46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	3b41      	subs	r3, #65	; 0x41
 8000e10:	221f      	movs	r2, #31
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	4613      	mov	r3, r2
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	4413      	add	r3, r2
 8000e38:	3b41      	subs	r3, #65	; 0x41
 8000e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	430a      	orrs	r2, r1
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e46:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <HAL_ADC_ConfigChannel+0x234>)
 8000e48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <HAL_ADC_ConfigChannel+0x238>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d109      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1cc>
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b12      	cmp	r3, #18
 8000e5a:	d105      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <HAL_ADC_ConfigChannel+0x238>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d123      	bne.n	8000eba <HAL_ADC_ConfigChannel+0x21e>
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b10      	cmp	r3, #16
 8000e78:	d003      	beq.n	8000e82 <HAL_ADC_ConfigChannel+0x1e6>
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2b11      	cmp	r3, #17
 8000e80:	d11b      	bne.n	8000eba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	2b10      	cmp	r3, #16
 8000e94:	d111      	bne.n	8000eba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <HAL_ADC_ConfigChannel+0x23c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a10      	ldr	r2, [pc, #64]	; (8000edc <HAL_ADC_ConfigChannel+0x240>)
 8000e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea0:	0c9a      	lsrs	r2, r3, #18
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000eac:	e002      	b.n	8000eb4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d1f9      	bne.n	8000eae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	40012300 	.word	0x40012300
 8000ed4:	40012000 	.word	0x40012000
 8000ed8:	20000000 	.word	0x20000000
 8000edc:	431bde83 	.word	0x431bde83

08000ee0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ee8:	4b79      	ldr	r3, [pc, #484]	; (80010d0 <ADC_Init+0x1f0>)
 8000eea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	685a      	ldr	r2, [r3, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	431a      	orrs	r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	685a      	ldr	r2, [r3, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	6859      	ldr	r1, [r3, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	021a      	lsls	r2, r3, #8
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	430a      	orrs	r2, r1
 8000f28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685a      	ldr	r2, [r3, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6859      	ldr	r1, [r3, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689a      	ldr	r2, [r3, #8]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6899      	ldr	r1, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	4a58      	ldr	r2, [pc, #352]	; (80010d4 <ADC_Init+0x1f4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d022      	beq.n	8000fbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	6899      	ldr	r1, [r3, #8]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	689a      	ldr	r2, [r3, #8]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6899      	ldr	r1, [r3, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	e00f      	b.n	8000fde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	689a      	ldr	r2, [r3, #8]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 0202 	bic.w	r2, r2, #2
 8000fec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6899      	ldr	r1, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7e1b      	ldrb	r3, [r3, #24]
 8000ff8:	005a      	lsls	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	430a      	orrs	r2, r1
 8001000:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d01b      	beq.n	8001044 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800101a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800102a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6859      	ldr	r1, [r3, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	3b01      	subs	r3, #1
 8001038:	035a      	lsls	r2, r3, #13
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	e007      	b.n	8001054 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001052:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001062:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	3b01      	subs	r3, #1
 8001070:	051a      	lsls	r2, r3, #20
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	430a      	orrs	r2, r1
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	689a      	ldr	r2, [r3, #8]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001088:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6899      	ldr	r1, [r3, #8]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001096:	025a      	lsls	r2, r3, #9
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	430a      	orrs	r2, r1
 800109e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6899      	ldr	r1, [r3, #8]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	695b      	ldr	r3, [r3, #20]
 80010ba:	029a      	lsls	r2, r3, #10
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	430a      	orrs	r2, r1
 80010c2:	609a      	str	r2, [r3, #8]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	40012300 	.word	0x40012300
 80010d4:	0f000001 	.word	0x0f000001

080010d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f4:	4013      	ands	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800110a:	4a04      	ldr	r2, [pc, #16]	; (800111c <__NVIC_SetPriorityGrouping+0x44>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <__NVIC_GetPriorityGrouping+0x18>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	0a1b      	lsrs	r3, r3, #8
 800112a:	f003 0307 	and.w	r3, r3, #7
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	2b00      	cmp	r3, #0
 800114c:	db0b      	blt.n	8001166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	f003 021f 	and.w	r2, r3, #31
 8001154:	4907      	ldr	r1, [pc, #28]	; (8001174 <__NVIC_EnableIRQ+0x38>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	2001      	movs	r0, #1
 800115e:	fa00 f202 	lsl.w	r2, r0, r2
 8001162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000e100 	.word	0xe000e100

08001178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	6039      	str	r1, [r7, #0]
 8001182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	db0a      	blt.n	80011a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	b2da      	uxtb	r2, r3
 8001190:	490c      	ldr	r1, [pc, #48]	; (80011c4 <__NVIC_SetPriority+0x4c>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	0112      	lsls	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	440b      	add	r3, r1
 800119c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a0:	e00a      	b.n	80011b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4908      	ldr	r1, [pc, #32]	; (80011c8 <__NVIC_SetPriority+0x50>)
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	3b04      	subs	r3, #4
 80011b0:	0112      	lsls	r2, r2, #4
 80011b2:	b2d2      	uxtb	r2, r2
 80011b4:	440b      	add	r3, r1
 80011b6:	761a      	strb	r2, [r3, #24]
}
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000e100 	.word	0xe000e100
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f1c3 0307 	rsb	r3, r3, #7
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	bf28      	it	cs
 80011ea:	2304      	movcs	r3, #4
 80011ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3304      	adds	r3, #4
 80011f2:	2b06      	cmp	r3, #6
 80011f4:	d902      	bls.n	80011fc <NVIC_EncodePriority+0x30>
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	3b03      	subs	r3, #3
 80011fa:	e000      	b.n	80011fe <NVIC_EncodePriority+0x32>
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	fa02 f303 	lsl.w	r3, r2, r3
 800120a:	43da      	mvns	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	401a      	ands	r2, r3
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001214:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43d9      	mvns	r1, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001224:	4313      	orrs	r3, r2
         );
}
 8001226:	4618      	mov	r0, r3
 8001228:	3724      	adds	r7, #36	; 0x24
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
	...

08001234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001244:	d301      	bcc.n	800124a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001246:	2301      	movs	r3, #1
 8001248:	e00f      	b.n	800126a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <SysTick_Config+0x40>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001252:	210f      	movs	r1, #15
 8001254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001258:	f7ff ff8e 	bl	8001178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <SysTick_Config+0x40>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001262:	4b04      	ldr	r3, [pc, #16]	; (8001274 <SysTick_Config+0x40>)
 8001264:	2207      	movs	r2, #7
 8001266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	e000e010 	.word	0xe000e010

08001278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff29 	bl	80010d8 <__NVIC_SetPriorityGrouping>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
 800129a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012a0:	f7ff ff3e 	bl	8001120 <__NVIC_GetPriorityGrouping>
 80012a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	68b9      	ldr	r1, [r7, #8]
 80012aa:	6978      	ldr	r0, [r7, #20]
 80012ac:	f7ff ff8e 	bl	80011cc <NVIC_EncodePriority>
 80012b0:	4602      	mov	r2, r0
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff5d 	bl	8001178 <__NVIC_SetPriority>
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff31 	bl	800113c <__NVIC_EnableIRQ>
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ffa2 	bl	8001234 <SysTick_Config>
 80012f0:	4603      	mov	r3, r0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff fc54 	bl	8000bb4 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e099      	b.n	800144c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2202      	movs	r2, #2
 800131c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0201 	bic.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001338:	e00f      	b.n	800135a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800133a:	f7ff fc3b 	bl	8000bb4 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b05      	cmp	r3, #5
 8001346:	d908      	bls.n	800135a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2220      	movs	r2, #32
 800134c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2203      	movs	r2, #3
 8001352:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e078      	b.n	800144c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1e8      	bne.n	800133a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	4b38      	ldr	r3, [pc, #224]	; (8001454 <HAL_DMA_Init+0x158>)
 8001374:	4013      	ands	r3, r2
 8001376:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001386:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001392:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800139e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d107      	bne.n	80013c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	4313      	orrs	r3, r2
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	697a      	ldr	r2, [r7, #20]
 80013ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f023 0307 	bic.w	r3, r3, #7
 80013da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	d117      	bne.n	800141e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d00e      	beq.n	800141e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 f9e9 	bl	80017d8 <DMA_CheckFifoParam>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d008      	beq.n	800141e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2240      	movs	r2, #64	; 0x40
 8001410:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800141a:	2301      	movs	r3, #1
 800141c:	e016      	b.n	800144c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f000 f9a0 	bl	800176c <DMA_CalcBaseAndBitshift>
 800142c:	4603      	mov	r3, r0
 800142e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001434:	223f      	movs	r2, #63	; 0x3f
 8001436:	409a      	lsls	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2200      	movs	r2, #0
 8001440:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	f010803f 	.word	0xf010803f

08001458 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001464:	4b8e      	ldr	r3, [pc, #568]	; (80016a0 <HAL_DMA_IRQHandler+0x248>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a8e      	ldr	r2, [pc, #568]	; (80016a4 <HAL_DMA_IRQHandler+0x24c>)
 800146a:	fba2 2303 	umull	r2, r3, r2, r3
 800146e:	0a9b      	lsrs	r3, r3, #10
 8001470:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001476:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001482:	2208      	movs	r2, #8
 8001484:	409a      	lsls	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d01a      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d013      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f022 0204 	bic.w	r2, r2, #4
 80014aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b0:	2208      	movs	r2, #8
 80014b2:	409a      	lsls	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c8:	2201      	movs	r2, #1
 80014ca:	409a      	lsls	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d012      	beq.n	80014fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e6:	2201      	movs	r2, #1
 80014e8:	409a      	lsls	r2, r3
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f2:	f043 0202 	orr.w	r2, r3, #2
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fe:	2204      	movs	r2, #4
 8001500:	409a      	lsls	r2, r3
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d012      	beq.n	8001530 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d00b      	beq.n	8001530 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151c:	2204      	movs	r2, #4
 800151e:	409a      	lsls	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001528:	f043 0204 	orr.w	r2, r3, #4
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001534:	2210      	movs	r2, #16
 8001536:	409a      	lsls	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	4013      	ands	r3, r2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d043      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0308 	and.w	r3, r3, #8
 800154a:	2b00      	cmp	r3, #0
 800154c:	d03c      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001552:	2210      	movs	r2, #16
 8001554:	409a      	lsls	r2, r3
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d018      	beq.n	800159a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d108      	bne.n	8001588 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	2b00      	cmp	r3, #0
 800157c:	d024      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	4798      	blx	r3
 8001586:	e01f      	b.n	80015c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800158c:	2b00      	cmp	r3, #0
 800158e:	d01b      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	4798      	blx	r3
 8001598:	e016      	b.n	80015c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d107      	bne.n	80015b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0208 	bic.w	r2, r2, #8
 80015b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015cc:	2220      	movs	r2, #32
 80015ce:	409a      	lsls	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 808f 	beq.w	80016f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 8087 	beq.w	80016f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ee:	2220      	movs	r2, #32
 80015f0:	409a      	lsls	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	2b05      	cmp	r3, #5
 8001600:	d136      	bne.n	8001670 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0216 	bic.w	r2, r2, #22
 8001610:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	695a      	ldr	r2, [r3, #20]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001620:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d103      	bne.n	8001632 <HAL_DMA_IRQHandler+0x1da>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0208 	bic.w	r2, r2, #8
 8001640:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001646:	223f      	movs	r2, #63	; 0x3f
 8001648:	409a      	lsls	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001662:	2b00      	cmp	r3, #0
 8001664:	d07e      	beq.n	8001764 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	4798      	blx	r3
        }
        return;
 800166e:	e079      	b.n	8001764 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d01d      	beq.n	80016ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d10d      	bne.n	80016a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	2b00      	cmp	r3, #0
 8001692:	d031      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	4798      	blx	r3
 800169c:	e02c      	b.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
 800169e:	bf00      	nop
 80016a0:	20000000 	.word	0x20000000
 80016a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d023      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	4798      	blx	r3
 80016b8:	e01e      	b.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10f      	bne.n	80016e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0210 	bic.w	r2, r2, #16
 80016d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d032      	beq.n	8001766 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	2b00      	cmp	r3, #0
 800170a:	d022      	beq.n	8001752 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2205      	movs	r2, #5
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	3301      	adds	r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	429a      	cmp	r2, r3
 800172e:	d307      	bcc.n	8001740 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f2      	bne.n	8001724 <HAL_DMA_IRQHandler+0x2cc>
 800173e:	e000      	b.n	8001742 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001740:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	2b00      	cmp	r3, #0
 8001758:	d005      	beq.n	8001766 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	4798      	blx	r3
 8001762:	e000      	b.n	8001766 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001764:	bf00      	nop
    }
  }
}
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	b2db      	uxtb	r3, r3
 800177a:	3b10      	subs	r3, #16
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <DMA_CalcBaseAndBitshift+0x64>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	091b      	lsrs	r3, r3, #4
 8001784:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001786:	4a13      	ldr	r2, [pc, #76]	; (80017d4 <DMA_CalcBaseAndBitshift+0x68>)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4413      	add	r3, r2
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b03      	cmp	r3, #3
 8001798:	d909      	bls.n	80017ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017a2:	f023 0303 	bic.w	r3, r3, #3
 80017a6:	1d1a      	adds	r2, r3, #4
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	659a      	str	r2, [r3, #88]	; 0x58
 80017ac:	e007      	b.n	80017be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017b6:	f023 0303 	bic.w	r3, r3, #3
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	aaaaaaab 	.word	0xaaaaaaab
 80017d4:	0800bbe4 	.word	0x0800bbe4

080017d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d11f      	bne.n	8001832 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	2b03      	cmp	r3, #3
 80017f6:	d856      	bhi.n	80018a6 <DMA_CheckFifoParam+0xce>
 80017f8:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <DMA_CheckFifoParam+0x28>)
 80017fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017fe:	bf00      	nop
 8001800:	08001811 	.word	0x08001811
 8001804:	08001823 	.word	0x08001823
 8001808:	08001811 	.word	0x08001811
 800180c:	080018a7 	.word	0x080018a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d046      	beq.n	80018aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001820:	e043      	b.n	80018aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800182a:	d140      	bne.n	80018ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001830:	e03d      	b.n	80018ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800183a:	d121      	bne.n	8001880 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d837      	bhi.n	80018b2 <DMA_CheckFifoParam+0xda>
 8001842:	a201      	add	r2, pc, #4	; (adr r2, 8001848 <DMA_CheckFifoParam+0x70>)
 8001844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001848:	08001859 	.word	0x08001859
 800184c:	0800185f 	.word	0x0800185f
 8001850:	08001859 	.word	0x08001859
 8001854:	08001871 	.word	0x08001871
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	73fb      	strb	r3, [r7, #15]
      break;
 800185c:	e030      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001862:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d025      	beq.n	80018b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800186e:	e022      	b.n	80018b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001874:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001878:	d11f      	bne.n	80018ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800187e:	e01c      	b.n	80018ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d903      	bls.n	800188e <DMA_CheckFifoParam+0xb6>
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	2b03      	cmp	r3, #3
 800188a:	d003      	beq.n	8001894 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800188c:	e018      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	73fb      	strb	r3, [r7, #15]
      break;
 8001892:	e015      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00e      	beq.n	80018be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	73fb      	strb	r3, [r7, #15]
      break;
 80018a4:	e00b      	b.n	80018be <DMA_CheckFifoParam+0xe6>
      break;
 80018a6:	bf00      	nop
 80018a8:	e00a      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      break;
 80018aa:	bf00      	nop
 80018ac:	e008      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      break;
 80018ae:	bf00      	nop
 80018b0:	e006      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      break;
 80018b2:	bf00      	nop
 80018b4:	e004      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      break;
 80018b6:	bf00      	nop
 80018b8:	e002      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80018ba:	bf00      	nop
 80018bc:	e000      	b.n	80018c0 <DMA_CheckFifoParam+0xe8>
      break;
 80018be:	bf00      	nop
    }
  } 
  
  return status; 
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop

080018d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	e159      	b.n	8001ba0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	429a      	cmp	r2, r3
 8001906:	f040 8148 	bne.w	8001b9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d005      	beq.n	8001922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191e:	2b02      	cmp	r3, #2
 8001920:	d130      	bne.n	8001984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001958:	2201      	movs	r2, #1
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 0201 	and.w	r2, r3, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b03      	cmp	r3, #3
 800198e:	d017      	beq.n	80019c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d123      	bne.n	8001a14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	08da      	lsrs	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3208      	adds	r2, #8
 80019d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	08da      	lsrs	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3208      	adds	r2, #8
 8001a0e:	69b9      	ldr	r1, [r7, #24]
 8001a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0203 	and.w	r2, r3, #3
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80a2 	beq.w	8001b9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b57      	ldr	r3, [pc, #348]	; (8001bb8 <HAL_GPIO_Init+0x2e8>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a56      	ldr	r2, [pc, #344]	; (8001bb8 <HAL_GPIO_Init+0x2e8>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b54      	ldr	r3, [pc, #336]	; (8001bb8 <HAL_GPIO_Init+0x2e8>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a72:	4a52      	ldr	r2, [pc, #328]	; (8001bbc <HAL_GPIO_Init+0x2ec>)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	220f      	movs	r2, #15
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a49      	ldr	r2, [pc, #292]	; (8001bc0 <HAL_GPIO_Init+0x2f0>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d019      	beq.n	8001ad2 <HAL_GPIO_Init+0x202>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a48      	ldr	r2, [pc, #288]	; (8001bc4 <HAL_GPIO_Init+0x2f4>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d013      	beq.n	8001ace <HAL_GPIO_Init+0x1fe>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a47      	ldr	r2, [pc, #284]	; (8001bc8 <HAL_GPIO_Init+0x2f8>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d00d      	beq.n	8001aca <HAL_GPIO_Init+0x1fa>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a46      	ldr	r2, [pc, #280]	; (8001bcc <HAL_GPIO_Init+0x2fc>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d007      	beq.n	8001ac6 <HAL_GPIO_Init+0x1f6>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a45      	ldr	r2, [pc, #276]	; (8001bd0 <HAL_GPIO_Init+0x300>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d101      	bne.n	8001ac2 <HAL_GPIO_Init+0x1f2>
 8001abe:	2304      	movs	r3, #4
 8001ac0:	e008      	b.n	8001ad4 <HAL_GPIO_Init+0x204>
 8001ac2:	2307      	movs	r3, #7
 8001ac4:	e006      	b.n	8001ad4 <HAL_GPIO_Init+0x204>
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e004      	b.n	8001ad4 <HAL_GPIO_Init+0x204>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e002      	b.n	8001ad4 <HAL_GPIO_Init+0x204>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <HAL_GPIO_Init+0x204>
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	69fa      	ldr	r2, [r7, #28]
 8001ad6:	f002 0203 	and.w	r2, r2, #3
 8001ada:	0092      	lsls	r2, r2, #2
 8001adc:	4093      	lsls	r3, r2
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ae4:	4935      	ldr	r1, [pc, #212]	; (8001bbc <HAL_GPIO_Init+0x2ec>)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001af2:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <HAL_GPIO_Init+0x304>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b16:	4a2f      	ldr	r2, [pc, #188]	; (8001bd4 <HAL_GPIO_Init+0x304>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <HAL_GPIO_Init+0x304>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b40:	4a24      	ldr	r2, [pc, #144]	; (8001bd4 <HAL_GPIO_Init+0x304>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b46:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <HAL_GPIO_Init+0x304>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6a:	4a1a      	ldr	r2, [pc, #104]	; (8001bd4 <HAL_GPIO_Init+0x304>)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b70:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_GPIO_Init+0x304>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b94:	4a0f      	ldr	r2, [pc, #60]	; (8001bd4 <HAL_GPIO_Init+0x304>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	61fb      	str	r3, [r7, #28]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	2b0f      	cmp	r3, #15
 8001ba4:	f67f aea2 	bls.w	80018ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	40020000 	.word	0x40020000
 8001bc4:	40020400 	.word	0x40020400
 8001bc8:	40020800 	.word	0x40020800
 8001bcc:	40020c00 	.word	0x40020c00
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40013c00 	.word	0x40013c00

08001bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	807b      	strh	r3, [r7, #2]
 8001be4:	4613      	mov	r3, r2
 8001be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be8:	787b      	ldrb	r3, [r7, #1]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf4:	e003      	b.n	8001bfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	041a      	lsls	r2, r3, #16
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	619a      	str	r2, [r3, #24]
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b085      	sub	sp, #20
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c1c:	887a      	ldrh	r2, [r7, #2]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4013      	ands	r3, r2
 8001c22:	041a      	lsls	r2, r3, #16
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	887b      	ldrh	r3, [r7, #2]
 8001c2a:	400b      	ands	r3, r1
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	619a      	str	r2, [r3, #24]
}
 8001c32:	bf00      	nop
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c40:	b08f      	sub	sp, #60	; 0x3c
 8001c42:	af0a      	add	r7, sp, #40	; 0x28
 8001c44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e10f      	b.n	8001e70 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f009 fb2c 	bl	800b2c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2203      	movs	r2, #3
 8001c74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d102      	bne.n	8001c8a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f001 ff97 	bl	8003bc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	603b      	str	r3, [r7, #0]
 8001c9a:	687e      	ldr	r6, [r7, #4]
 8001c9c:	466d      	mov	r5, sp
 8001c9e:	f106 0410 	add.w	r4, r6, #16
 8001ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001caa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cae:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cb2:	1d33      	adds	r3, r6, #4
 8001cb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb6:	6838      	ldr	r0, [r7, #0]
 8001cb8:	f001 fe6e 	bl	8003998 <USB_CoreInit>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2202      	movs	r2, #2
 8001cc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0d0      	b.n	8001e70 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f001 ff85 	bl	8003be4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e04a      	b.n	8001d76 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ce0:	7bfa      	ldrb	r2, [r7, #15]
 8001ce2:	6879      	ldr	r1, [r7, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	440b      	add	r3, r1
 8001cee:	333d      	adds	r3, #61	; 0x3d
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	333c      	adds	r3, #60	; 0x3c
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	7bfb      	ldrb	r3, [r7, #15]
 8001d0c:	b298      	uxth	r0, r3
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	440b      	add	r3, r1
 8001d1a:	3344      	adds	r3, #68	; 0x44
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	3340      	adds	r3, #64	; 0x40
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	3348      	adds	r3, #72	; 0x48
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d48:	7bfa      	ldrb	r2, [r7, #15]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	4413      	add	r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	334c      	adds	r3, #76	; 0x4c
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	3354      	adds	r3, #84	; 0x54
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	3301      	adds	r3, #1
 8001d74:	73fb      	strb	r3, [r7, #15]
 8001d76:	7bfa      	ldrb	r2, [r7, #15]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d3af      	bcc.n	8001ce0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	e044      	b.n	8001e10 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d86:	7bfa      	ldrb	r2, [r7, #15]
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d98:	2200      	movs	r2, #0
 8001d9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001dae:	7bfa      	ldrb	r2, [r7, #15]
 8001db0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001db2:	7bfa      	ldrb	r2, [r7, #15]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001dc8:	7bfa      	ldrb	r2, [r7, #15]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4413      	add	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dde:	7bfa      	ldrb	r2, [r7, #15]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4413      	add	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d3b5      	bcc.n	8001d86 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	687e      	ldr	r6, [r7, #4]
 8001e22:	466d      	mov	r5, sp
 8001e24:	f106 0410 	add.w	r4, r6, #16
 8001e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e30:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e34:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e38:	1d33      	adds	r3, r6, #4
 8001e3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e3c:	6838      	ldr	r0, [r7, #0]
 8001e3e:	f001 ff1d 	bl	8003c7c <USB_DevInit>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e00d      	b.n	8001e70 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f003 f86c 	bl	8004f46 <USB_DevDisconnect>

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e78 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_PCD_Start+0x1c>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e020      	b.n	8001ed6 <HAL_PCD_Start+0x5e>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d109      	bne.n	8001eb8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d005      	beq.n	8001eb8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 fe6f 	bl	8003ba0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f003 f81c 	bl	8004f04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001ede:	b590      	push	{r4, r7, lr}
 8001ee0:	b08d      	sub	sp, #52	; 0x34
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f003 f8da 	bl	80050ae <USB_GetMode>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f040 848a 	bne.w	8002816 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f003 f83e 	bl	8004f88 <USB_ReadInterrupts>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f000 8480 	beq.w	8002814 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f003 f82b 	bl	8004f88 <USB_ReadInterrupts>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d107      	bne.n	8001f4c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f002 0202 	and.w	r2, r2, #2
 8001f4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f003 f819 	bl	8004f88 <USB_ReadInterrupts>
 8001f56:	4603      	mov	r3, r0
 8001f58:	f003 0310 	and.w	r3, r3, #16
 8001f5c:	2b10      	cmp	r3, #16
 8001f5e:	d161      	bne.n	8002024 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699a      	ldr	r2, [r3, #24]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0210 	bic.w	r2, r2, #16
 8001f6e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001f70:	6a3b      	ldr	r3, [r7, #32]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	f003 020f 	and.w	r2, r3, #15
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	0c5b      	lsrs	r3, r3, #17
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d124      	bne.n	8001fe6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d035      	beq.n	8002014 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001fb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	6a38      	ldr	r0, [r7, #32]
 8001fbc:	f002 fe50 	bl	8004c60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	091b      	lsrs	r3, r3, #4
 8001fc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fcc:	441a      	add	r2, r3
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	6a1a      	ldr	r2, [r3, #32]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	091b      	lsrs	r3, r3, #4
 8001fda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001fde:	441a      	add	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	621a      	str	r2, [r3, #32]
 8001fe4:	e016      	b.n	8002014 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	0c5b      	lsrs	r3, r3, #17
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d110      	bne.n	8002014 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	6a38      	ldr	r0, [r7, #32]
 8001ffe:	f002 fe2f 	bl	8004c60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	6a1a      	ldr	r2, [r3, #32]
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800200e:	441a      	add	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0210 	orr.w	r2, r2, #16
 8002022:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4618      	mov	r0, r3
 800202a:	f002 ffad 	bl	8004f88 <USB_ReadInterrupts>
 800202e:	4603      	mov	r3, r0
 8002030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002034:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002038:	f040 80a7 	bne.w	800218a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4618      	mov	r0, r3
 8002046:	f002 ffb2 	bl	8004fae <USB_ReadDevAllOutEpInterrupt>
 800204a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800204c:	e099      	b.n	8002182 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 808e 	beq.w	8002176 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	4611      	mov	r1, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f002 ffd6 	bl	8005016 <USB_ReadDevOutEPInterrupt>
 800206a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	015a      	lsls	r2, r3, #5
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	4413      	add	r3, r2
 800207e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002082:	461a      	mov	r2, r3
 8002084:	2301      	movs	r3, #1
 8002086:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fec2 	bl	8002e14 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800209a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209c:	015a      	lsls	r2, r3, #5
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	4413      	add	r3, r2
 80020a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a6:	461a      	mov	r2, r3
 80020a8:	2308      	movs	r3, #8
 80020aa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80020ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 ff98 	bl	8002fe4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d008      	beq.n	80020d0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ca:	461a      	mov	r2, r3
 80020cc:	2310      	movs	r3, #16
 80020ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d030      	beq.n	800213c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80020da:	6a3b      	ldr	r3, [r7, #32]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e2:	2b80      	cmp	r3, #128	; 0x80
 80020e4:	d109      	bne.n	80020fa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	69fa      	ldr	r2, [r7, #28]
 80020f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020f8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80020fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	4413      	add	r3, r2
 800210c:	3304      	adds	r3, #4
 800210e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	78db      	ldrb	r3, [r3, #3]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d108      	bne.n	800212a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2200      	movs	r2, #0
 800211c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	b2db      	uxtb	r3, r3
 8002122:	4619      	mov	r1, r3
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f009 f9d5 	bl	800b4d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	4413      	add	r3, r2
 8002132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002136:	461a      	mov	r2, r3
 8002138:	2302      	movs	r3, #2
 800213a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b00      	cmp	r3, #0
 8002144:	d008      	beq.n	8002158 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	015a      	lsls	r2, r3, #5
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	4413      	add	r3, r2
 800214e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002152:	461a      	mov	r2, r3
 8002154:	2320      	movs	r3, #32
 8002156:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d009      	beq.n	8002176 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002164:	015a      	lsls	r2, r3, #5
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800216e:	461a      	mov	r2, r3
 8002170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002174:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	3301      	adds	r3, #1
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800217c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217e:	085b      	lsrs	r3, r3, #1
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002184:	2b00      	cmp	r3, #0
 8002186:	f47f af62 	bne.w	800204e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f002 fefa 	bl	8004f88 <USB_ReadInterrupts>
 8002194:	4603      	mov	r3, r0
 8002196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800219a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800219e:	f040 80db 	bne.w	8002358 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f002 ff1b 	bl	8004fe2 <USB_ReadDevAllInEpInterrupt>
 80021ac:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80021b2:	e0cd      	b.n	8002350 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80c2 	beq.w	8002344 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f002 ff41 	bl	8005052 <USB_ReadDevInEPInterrupt>
 80021d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d057      	beq.n	800228c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	2201      	movs	r2, #1
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69f9      	ldr	r1, [r7, #28]
 80021f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021fc:	4013      	ands	r3, r2
 80021fe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	4413      	add	r3, r2
 8002208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800220c:	461a      	mov	r2, r3
 800220e:	2301      	movs	r3, #1
 8002210:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d132      	bne.n	8002280 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800221e:	4613      	mov	r3, r2
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	4413      	add	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	334c      	adds	r3, #76	; 0x4c
 800222a:	6819      	ldr	r1, [r3, #0]
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002230:	4613      	mov	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	4413      	add	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4403      	add	r3, r0
 800223a:	3348      	adds	r3, #72	; 0x48
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4419      	add	r1, r3
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002244:	4613      	mov	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	4413      	add	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4403      	add	r3, r0
 800224e:	334c      	adds	r3, #76	; 0x4c
 8002250:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	2b00      	cmp	r3, #0
 8002256:	d113      	bne.n	8002280 <HAL_PCD_IRQHandler+0x3a2>
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800225c:	4613      	mov	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4413      	add	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	3354      	adds	r3, #84	; 0x54
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d108      	bne.n	8002280 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002278:	461a      	mov	r2, r3
 800227a:	2101      	movs	r1, #1
 800227c:	f002 ff48 	bl	8005110 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	b2db      	uxtb	r3, r3
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f009 f89f 	bl	800b3ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d008      	beq.n	80022a8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a2:	461a      	mov	r2, r3
 80022a4:	2308      	movs	r3, #8
 80022a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	f003 0310 	and.w	r3, r3, #16
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022be:	461a      	mov	r2, r3
 80022c0:	2310      	movs	r3, #16
 80022c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d008      	beq.n	80022e0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022da:	461a      	mov	r2, r3
 80022dc:	2340      	movs	r3, #64	; 0x40
 80022de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d023      	beq.n	8002332 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80022ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022ec:	6a38      	ldr	r0, [r7, #32]
 80022ee:	f001 fe29 	bl	8003f44 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80022f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	3338      	adds	r3, #56	; 0x38
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	4413      	add	r3, r2
 8002302:	3304      	adds	r3, #4
 8002304:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	78db      	ldrb	r3, [r3, #3]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d108      	bne.n	8002320 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2200      	movs	r2, #0
 8002312:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002316:	b2db      	uxtb	r3, r3
 8002318:	4619      	mov	r1, r3
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f009 f8ec 	bl	800b4f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	4413      	add	r3, r2
 8002328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800232c:	461a      	mov	r2, r3
 800232e:	2302      	movs	r3, #2
 8002330:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800233c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fcdb 	bl	8002cfa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002346:	3301      	adds	r3, #1
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	085b      	lsrs	r3, r3, #1
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	2b00      	cmp	r3, #0
 8002354:	f47f af2e 	bne.w	80021b4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f002 fe13 	bl	8004f88 <USB_ReadInterrupts>
 8002362:	4603      	mov	r3, r0
 8002364:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800236c:	d122      	bne.n	80023b4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002388:	2b01      	cmp	r3, #1
 800238a:	d108      	bne.n	800239e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002394:	2100      	movs	r1, #0
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fec2 	bl	8003120 <HAL_PCDEx_LPM_Callback>
 800239c:	e002      	b.n	80023a4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f009 f88a 	bl	800b4b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695a      	ldr	r2, [r3, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 fde5 	bl	8004f88 <USB_ReadInterrupts>
 80023be:	4603      	mov	r3, r0
 80023c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023c8:	d112      	bne.n	80023f0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d102      	bne.n	80023e0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f009 f846 	bl	800b46c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80023ee:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f002 fdc7 	bl	8004f88 <USB_ReadInterrupts>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002400:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002404:	f040 80b7 	bne.w	8002576 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	69fa      	ldr	r2, [r7, #28]
 8002412:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002416:	f023 0301 	bic.w	r3, r3, #1
 800241a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2110      	movs	r1, #16
 8002422:	4618      	mov	r0, r3
 8002424:	f001 fd8e 	bl	8003f44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002428:	2300      	movs	r3, #0
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800242c:	e046      	b.n	80024bc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	4413      	add	r3, r2
 8002436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800243a:	461a      	mov	r2, r3
 800243c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002440:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002444:	015a      	lsls	r2, r3, #5
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	4413      	add	r3, r2
 800244a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002452:	0151      	lsls	r1, r2, #5
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	440a      	add	r2, r1
 8002458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800245c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002460:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	4413      	add	r3, r2
 800246a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246e:	461a      	mov	r2, r3
 8002470:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002474:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	4413      	add	r3, r2
 800247e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002486:	0151      	lsls	r1, r2, #5
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	440a      	add	r2, r1
 800248c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002490:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002494:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	4413      	add	r3, r2
 800249e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024a6:	0151      	lsls	r1, r2, #5
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	440a      	add	r2, r1
 80024ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80024b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80024b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024b8:	3301      	adds	r3, #1
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d3b3      	bcc.n	800242e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80024d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d016      	beq.n	8002510 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024f2:	f043 030b 	orr.w	r3, r3, #11
 80024f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002508:	f043 030b 	orr.w	r3, r3, #11
 800250c:	6453      	str	r3, [r2, #68]	; 0x44
 800250e:	e015      	b.n	800253c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	69fa      	ldr	r2, [r7, #28]
 800251a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800251e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002522:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002526:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002536:	f043 030b 	orr.w	r3, r3, #11
 800253a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800254a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800254e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002560:	461a      	mov	r2, r3
 8002562:	f002 fdd5 	bl	8005110 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695a      	ldr	r2, [r3, #20]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002574:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f002 fd04 	bl	8004f88 <USB_ReadInterrupts>
 8002580:	4603      	mov	r3, r0
 8002582:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800258a:	d124      	bne.n	80025d6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f002 fd9a 	bl	80050ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f001 fd4f 	bl	800403e <USB_GetDevSpeed>
 80025a0:	4603      	mov	r3, r0
 80025a2:	461a      	mov	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681c      	ldr	r4, [r3, #0]
 80025ac:	f001 f9e8 	bl	8003980 <HAL_RCC_GetHCLKFreq>
 80025b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	4620      	mov	r0, r4
 80025bc:	f001 fa4e 	bl	8003a5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f008 ff2a 	bl	800b41a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80025d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f002 fcd4 	bl	8004f88 <USB_ReadInterrupts>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b08      	cmp	r3, #8
 80025e8:	d10a      	bne.n	8002600 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f008 ff07 	bl	800b3fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695a      	ldr	r2, [r3, #20]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f002 0208 	and.w	r2, r2, #8
 80025fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f002 fcbf 	bl	8004f88 <USB_ReadInterrupts>
 800260a:	4603      	mov	r3, r0
 800260c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002610:	2b80      	cmp	r3, #128	; 0x80
 8002612:	d122      	bne.n	800265a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002620:	2301      	movs	r3, #1
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
 8002624:	e014      	b.n	8002650 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d105      	bne.n	800264a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	b2db      	uxtb	r3, r3
 8002642:	4619      	mov	r1, r3
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 fb27 	bl	8002c98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	3301      	adds	r3, #1
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002656:	429a      	cmp	r2, r3
 8002658:	d3e5      	bcc.n	8002626 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f002 fc92 	bl	8004f88 <USB_ReadInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800266e:	d13b      	bne.n	80026e8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002670:	2301      	movs	r3, #1
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
 8002674:	e02b      	b.n	80026ce <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	4413      	add	r3, r2
 800267e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002686:	6879      	ldr	r1, [r7, #4]
 8002688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268a:	4613      	mov	r3, r2
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4413      	add	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	440b      	add	r3, r1
 8002694:	3340      	adds	r3, #64	; 0x40
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d115      	bne.n	80026c8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800269c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800269e:	2b00      	cmp	r3, #0
 80026a0:	da12      	bge.n	80026c8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	333f      	adds	r3, #63	; 0x3f
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	4619      	mov	r1, r3
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 fae8 	bl	8002c98 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	3301      	adds	r3, #1
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d3ce      	bcc.n	8002676 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80026e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f002 fc4b 	bl	8004f88 <USB_ReadInterrupts>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026fc:	d155      	bne.n	80027aa <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026fe:	2301      	movs	r3, #1
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	e045      	b.n	8002790 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	015a      	lsls	r2, r3, #5
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	4413      	add	r3, r2
 800270c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002718:	4613      	mov	r3, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d12e      	bne.n	800278a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800272c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800272e:	2b00      	cmp	r3, #0
 8002730:	da2b      	bge.n	800278a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800273e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002742:	429a      	cmp	r2, r3
 8002744:	d121      	bne.n	800278a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002764:	6a3b      	ldr	r3, [r7, #32]
 8002766:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10a      	bne.n	800278a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002786:	6053      	str	r3, [r2, #4]
            break;
 8002788:	e007      	b.n	800279a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	3301      	adds	r3, #1
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002796:	429a      	cmp	r2, r3
 8002798:	d3b4      	bcc.n	8002704 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	695a      	ldr	r2, [r3, #20]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80027a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f002 fbea 	bl	8004f88 <USB_ReadInterrupts>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027be:	d10a      	bne.n	80027d6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f008 feab 	bl	800b51c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80027d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 fbd4 	bl	8004f88 <USB_ReadInterrupts>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d115      	bne.n	8002816 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f008 fe9b 	bl	800b538 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6859      	ldr	r1, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	e000      	b.n	8002816 <HAL_PCD_IRQHandler+0x938>
      return;
 8002814:	bf00      	nop
    }
  }
}
 8002816:	3734      	adds	r7, #52	; 0x34
 8002818:	46bd      	mov	sp, r7
 800281a:	bd90      	pop	{r4, r7, pc}

0800281c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800282e:	2b01      	cmp	r3, #1
 8002830:	d101      	bne.n	8002836 <HAL_PCD_SetAddress+0x1a>
 8002832:	2302      	movs	r3, #2
 8002834:	e013      	b.n	800285e <HAL_PCD_SetAddress+0x42>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	78fa      	ldrb	r2, [r7, #3]
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fb32 	bl	8004eb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	4608      	mov	r0, r1
 8002870:	4611      	mov	r1, r2
 8002872:	461a      	mov	r2, r3
 8002874:	4603      	mov	r3, r0
 8002876:	70fb      	strb	r3, [r7, #3]
 8002878:	460b      	mov	r3, r1
 800287a:	803b      	strh	r3, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002880:	2300      	movs	r3, #0
 8002882:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002884:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002888:	2b00      	cmp	r3, #0
 800288a:	da0f      	bge.n	80028ac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	f003 020f 	and.w	r2, r3, #15
 8002892:	4613      	mov	r3, r2
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	3338      	adds	r3, #56	; 0x38
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	4413      	add	r3, r2
 80028a0:	3304      	adds	r3, #4
 80028a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	705a      	strb	r2, [r3, #1]
 80028aa:	e00f      	b.n	80028cc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	f003 020f 	and.w	r2, r3, #15
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4413      	add	r3, r2
 80028c2:	3304      	adds	r3, #4
 80028c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80028cc:	78fb      	ldrb	r3, [r7, #3]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80028d8:	883a      	ldrh	r2, [r7, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	78ba      	ldrb	r2, [r7, #2]
 80028e2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	785b      	ldrb	r3, [r3, #1]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d004      	beq.n	80028f6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80028f6:	78bb      	ldrb	r3, [r7, #2]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d102      	bne.n	8002902 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_PCD_EP_Open+0xaa>
 800290c:	2302      	movs	r3, #2
 800290e:	e00e      	b.n	800292e <HAL_PCD_EP_Open+0xc8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68f9      	ldr	r1, [r7, #12]
 800291e:	4618      	mov	r0, r3
 8002920:	f001 fbb2 	bl	8004088 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800292c:	7afb      	ldrb	r3, [r7, #11]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002942:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002946:	2b00      	cmp	r3, #0
 8002948:	da0f      	bge.n	800296a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	f003 020f 	and.w	r2, r3, #15
 8002950:	4613      	mov	r3, r2
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	3338      	adds	r3, #56	; 0x38
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	4413      	add	r3, r2
 800295e:	3304      	adds	r3, #4
 8002960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2201      	movs	r2, #1
 8002966:	705a      	strb	r2, [r3, #1]
 8002968:	e00f      	b.n	800298a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	f003 020f 	and.w	r2, r3, #15
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	3304      	adds	r3, #4
 8002982:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	b2da      	uxtb	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800299c:	2b01      	cmp	r3, #1
 800299e:	d101      	bne.n	80029a4 <HAL_PCD_EP_Close+0x6e>
 80029a0:	2302      	movs	r3, #2
 80029a2:	e00e      	b.n	80029c2 <HAL_PCD_EP_Close+0x8c>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68f9      	ldr	r1, [r7, #12]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f001 fbf0 	bl	8004198 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}

080029ca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b086      	sub	sp, #24
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	460b      	mov	r3, r1
 80029d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029da:	7afb      	ldrb	r3, [r7, #11]
 80029dc:	f003 020f 	and.w	r2, r3, #15
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	3304      	adds	r3, #4
 80029f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2200      	movs	r2, #0
 8002a04:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a0c:	7afb      	ldrb	r3, [r7, #11]
 8002a0e:	f003 030f 	and.w	r3, r3, #15
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d102      	bne.n	8002a26 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a26:	7afb      	ldrb	r3, [r7, #11]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6818      	ldr	r0, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	6979      	ldr	r1, [r7, #20]
 8002a3e:	f001 fecf 	bl	80047e0 <USB_EP0StartXfer>
 8002a42:	e008      	b.n	8002a56 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	461a      	mov	r2, r3
 8002a50:	6979      	ldr	r1, [r7, #20]
 8002a52:	f001 fc7d 	bl	8004350 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3718      	adds	r7, #24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	460b      	mov	r3, r1
 8002a6a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	f003 020f 	and.w	r2, r3, #15
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	603b      	str	r3, [r7, #0]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa0:	7afb      	ldrb	r3, [r7, #11]
 8002aa2:	f003 020f 	and.w	r2, r3, #15
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	3338      	adds	r3, #56	; 0x38
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	2201      	movs	r2, #1
 8002ace:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ad0:	7afb      	ldrb	r3, [r7, #11]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d102      	bne.n	8002aea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aea:	7afb      	ldrb	r3, [r7, #11]
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	6979      	ldr	r1, [r7, #20]
 8002b02:	f001 fe6d 	bl	80047e0 <USB_EP0StartXfer>
 8002b06:	e008      	b.n	8002b1a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	461a      	mov	r2, r3
 8002b14:	6979      	ldr	r1, [r7, #20]
 8002b16:	f001 fc1b 	bl	8004350 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	f003 020f 	and.w	r2, r3, #15
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d901      	bls.n	8002b42 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e050      	b.n	8002be4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	da0f      	bge.n	8002b6a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	f003 020f 	and.w	r2, r3, #15
 8002b50:	4613      	mov	r3, r2
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	3338      	adds	r3, #56	; 0x38
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3304      	adds	r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2201      	movs	r2, #1
 8002b66:	705a      	strb	r2, [r3, #1]
 8002b68:	e00d      	b.n	8002b86 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	f003 030f 	and.w	r3, r3, #15
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_PCD_EP_SetStall+0x82>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e01e      	b.n	8002be4 <HAL_PCD_EP_SetStall+0xc0>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68f9      	ldr	r1, [r7, #12]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f002 f8ab 	bl	8004d10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bba:	78fb      	ldrb	r3, [r7, #3]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6818      	ldr	r0, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	b2d9      	uxtb	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f002 fa9b 	bl	8005110 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	f003 020f 	and.w	r2, r3, #15
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d901      	bls.n	8002c0a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e042      	b.n	8002c90 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da0f      	bge.n	8002c32 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	f003 020f 	and.w	r2, r3, #15
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	3338      	adds	r3, #56	; 0x38
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	3304      	adds	r3, #4
 8002c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	705a      	strb	r2, [r3, #1]
 8002c30:	e00f      	b.n	8002c52 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 020f 	and.w	r2, r3, #15
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	3304      	adds	r3, #4
 8002c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_PCD_EP_ClrStall+0x86>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e00e      	b.n	8002c90 <HAL_PCD_EP_ClrStall+0xa4>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68f9      	ldr	r1, [r7, #12]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f002 f8b3 	bl	8004dec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ca4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	da0c      	bge.n	8002cc6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	f003 020f 	and.w	r2, r3, #15
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	3338      	adds	r3, #56	; 0x38
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e00c      	b.n	8002ce0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc6:	78fb      	ldrb	r3, [r7, #3]
 8002cc8:	f003 020f 	and.w	r2, r3, #15
 8002ccc:	4613      	mov	r3, r2
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	4413      	add	r3, r2
 8002cdc:	3304      	adds	r3, #4
 8002cde:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	68f9      	ldr	r1, [r7, #12]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f001 fed2 	bl	8004a90 <USB_EPStopXfer>
 8002cec:	4603      	mov	r3, r0
 8002cee:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002cf0:	7afb      	ldrb	r3, [r7, #11]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b08a      	sub	sp, #40	; 0x28
 8002cfe:	af02      	add	r7, sp, #8
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	3338      	adds	r3, #56	; 0x38
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3304      	adds	r3, #4
 8002d20:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a1a      	ldr	r2, [r3, #32]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d901      	bls.n	8002d32 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e06c      	b.n	8002e0c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d902      	bls.n	8002d4e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3303      	adds	r3, #3
 8002d52:	089b      	lsrs	r3, r3, #2
 8002d54:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d56:	e02b      	b.n	8002db0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d902      	bls.n	8002d74 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	3303      	adds	r3, #3
 8002d78:	089b      	lsrs	r3, r3, #2
 8002d7a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6919      	ldr	r1, [r3, #16]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	4603      	mov	r3, r0
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f001 ff26 	bl	8004be4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	441a      	add	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a1a      	ldr	r2, [r3, #32]
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	441a      	add	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d809      	bhi.n	8002dda <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a1a      	ldr	r2, [r3, #32]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d203      	bcs.n	8002dda <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1be      	bne.n	8002d58 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	699a      	ldr	r2, [r3, #24]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d811      	bhi.n	8002e0a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	f003 030f 	and.w	r3, r3, #15
 8002dec:	2201      	movs	r2, #1
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	6939      	ldr	r1, [r7, #16]
 8002e02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e06:	4013      	ands	r3, r2
 8002e08:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3720      	adds	r7, #32
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	333c      	adds	r3, #60	; 0x3c
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d17b      	bne.n	8002f42 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d015      	beq.n	8002e80 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	4a61      	ldr	r2, [pc, #388]	; (8002fdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	f240 80b9 	bls.w	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 80b3 	beq.w	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e76:	461a      	mov	r2, r3
 8002e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e7c:	6093      	str	r3, [r2, #8]
 8002e7e:	e0a7      	b.n	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e96:	461a      	mov	r2, r3
 8002e98:	2320      	movs	r3, #32
 8002e9a:	6093      	str	r3, [r2, #8]
 8002e9c:	e098      	b.n	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f040 8093 	bne.w	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	4a4b      	ldr	r2, [pc, #300]	; (8002fdc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d90f      	bls.n	8002ed2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ece:	6093      	str	r3, [r2, #8]
 8002ed0:	e07e      	b.n	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002ed2:	683a      	ldr	r2, [r7, #0]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	69da      	ldr	r2, [r3, #28]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	0159      	lsls	r1, r3, #5
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	440b      	add	r3, r1
 8002ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002efe:	1ad2      	subs	r2, r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d114      	bne.n	8002f34 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6818      	ldr	r0, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2101      	movs	r1, #1
 8002f20:	f002 f8f6 	bl	8005110 <USB_EP0_OutStart>
 8002f24:	e006      	b.n	8002f34 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691a      	ldr	r2, [r3, #16]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	441a      	add	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f008 fa2a 	bl	800b394 <HAL_PCD_DataOutStageCallback>
 8002f40:	e046      	b.n	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	4a26      	ldr	r2, [pc, #152]	; (8002fe0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d124      	bne.n	8002f94 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f60:	461a      	mov	r2, r3
 8002f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f66:	6093      	str	r3, [r2, #8]
 8002f68:	e032      	b.n	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	015a      	lsls	r2, r3, #5
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f80:	461a      	mov	r2, r3
 8002f82:	2320      	movs	r3, #32
 8002f84:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f008 fa01 	bl	800b394 <HAL_PCD_DataOutStageCallback>
 8002f92:	e01d      	b.n	8002fd0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d114      	bne.n	8002fc4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d108      	bne.n	8002fc4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6818      	ldr	r0, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	f002 f8a6 	bl	8005110 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	4619      	mov	r1, r3
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f008 f9e2 	bl	800b394 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3720      	adds	r7, #32
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	4f54300a 	.word	0x4f54300a
 8002fe0:	4f54310a 	.word	0x4f54310a

08002fe4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	333c      	adds	r3, #60	; 0x3c
 8002ffc:	3304      	adds	r3, #4
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a15      	ldr	r2, [pc, #84]	; (800306c <PCD_EP_OutSetupPacket_int+0x88>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d90e      	bls.n	8003038 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003020:	2b00      	cmp	r3, #0
 8003022:	d009      	beq.n	8003038 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003030:	461a      	mov	r2, r3
 8003032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003036:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f008 f999 	bl	800b370 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4a0a      	ldr	r2, [pc, #40]	; (800306c <PCD_EP_OutSetupPacket_int+0x88>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d90c      	bls.n	8003060 <PCD_EP_OutSetupPacket_int+0x7c>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b01      	cmp	r3, #1
 800304c:	d108      	bne.n	8003060 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003058:	461a      	mov	r2, r3
 800305a:	2101      	movs	r1, #1
 800305c:	f002 f858 	bl	8005110 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	4f54300a 	.word	0x4f54300a

08003070 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	70fb      	strb	r3, [r7, #3]
 800307c:	4613      	mov	r3, r2
 800307e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003086:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d107      	bne.n	800309e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800308e:	883b      	ldrh	r3, [r7, #0]
 8003090:	0419      	lsls	r1, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	430a      	orrs	r2, r1
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
 800309c:	e028      	b.n	80030f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	4413      	add	r3, r2
 80030aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
 80030b0:	e00d      	b.n	80030ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	3340      	adds	r3, #64	; 0x40
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	0c1b      	lsrs	r3, r3, #16
 80030c2:	68ba      	ldr	r2, [r7, #8]
 80030c4:	4413      	add	r3, r2
 80030c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	3301      	adds	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	7bfa      	ldrb	r2, [r7, #15]
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d3ec      	bcc.n	80030b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80030d8:	883b      	ldrh	r3, [r7, #0]
 80030da:	0418      	lsls	r0, r3, #16
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6819      	ldr	r1, [r3, #0]
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	4302      	orrs	r2, r0
 80030e8:	3340      	adds	r3, #64	; 0x40
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	887a      	ldrh	r2, [r7, #2]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e267      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0301 	and.w	r3, r3, #1
 8003152:	2b00      	cmp	r3, #0
 8003154:	d075      	beq.n	8003242 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003156:	4b88      	ldr	r3, [pc, #544]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b04      	cmp	r3, #4
 8003160:	d00c      	beq.n	800317c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003162:	4b85      	ldr	r3, [pc, #532]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800316a:	2b08      	cmp	r3, #8
 800316c:	d112      	bne.n	8003194 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316e:	4b82      	ldr	r3, [pc, #520]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800317a:	d10b      	bne.n	8003194 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800317c:	4b7e      	ldr	r3, [pc, #504]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d05b      	beq.n	8003240 <HAL_RCC_OscConfig+0x108>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d157      	bne.n	8003240 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e242      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800319c:	d106      	bne.n	80031ac <HAL_RCC_OscConfig+0x74>
 800319e:	4b76      	ldr	r3, [pc, #472]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a75      	ldr	r2, [pc, #468]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a8:	6013      	str	r3, [r2, #0]
 80031aa:	e01d      	b.n	80031e8 <HAL_RCC_OscConfig+0xb0>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x98>
 80031b6:	4b70      	ldr	r3, [pc, #448]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6f      	ldr	r2, [pc, #444]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4b6d      	ldr	r3, [pc, #436]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6c      	ldr	r2, [pc, #432]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	6013      	str	r3, [r2, #0]
 80031ce:	e00b      	b.n	80031e8 <HAL_RCC_OscConfig+0xb0>
 80031d0:	4b69      	ldr	r3, [pc, #420]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a68      	ldr	r2, [pc, #416]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031da:	6013      	str	r3, [r2, #0]
 80031dc:	4b66      	ldr	r3, [pc, #408]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a65      	ldr	r2, [pc, #404]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80031e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d013      	beq.n	8003218 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7fd fce0 	bl	8000bb4 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f8:	f7fd fcdc 	bl	8000bb4 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b64      	cmp	r3, #100	; 0x64
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e207      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800320a:	4b5b      	ldr	r3, [pc, #364]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f0      	beq.n	80031f8 <HAL_RCC_OscConfig+0xc0>
 8003216:	e014      	b.n	8003242 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fd fccc 	bl	8000bb4 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003220:	f7fd fcc8 	bl	8000bb4 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e1f3      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003232:	4b51      	ldr	r3, [pc, #324]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0xe8>
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d063      	beq.n	8003316 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800324e:	4b4a      	ldr	r3, [pc, #296]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325a:	4b47      	ldr	r3, [pc, #284]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003262:	2b08      	cmp	r3, #8
 8003264:	d11c      	bne.n	80032a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003266:	4b44      	ldr	r3, [pc, #272]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d116      	bne.n	80032a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	4b41      	ldr	r3, [pc, #260]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_RCC_OscConfig+0x152>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d001      	beq.n	800328a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e1c7      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800328a:	4b3b      	ldr	r3, [pc, #236]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4937      	ldr	r1, [pc, #220]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800329a:	4313      	orrs	r3, r2
 800329c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329e:	e03a      	b.n	8003316 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a8:	4b34      	ldr	r3, [pc, #208]	; (800337c <HAL_RCC_OscConfig+0x244>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ae:	f7fd fc81 	bl	8000bb4 <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032b6:	f7fd fc7d 	bl	8000bb4 <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e1a8      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c8:	4b2b      	ldr	r3, [pc, #172]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0f0      	beq.n	80032b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d4:	4b28      	ldr	r3, [pc, #160]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	691b      	ldr	r3, [r3, #16]
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4925      	ldr	r1, [pc, #148]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	600b      	str	r3, [r1, #0]
 80032e8:	e015      	b.n	8003316 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_RCC_OscConfig+0x244>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f0:	f7fd fc60 	bl	8000bb4 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032f8:	f7fd fc5c 	bl	8000bb4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e187      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f0      	bne.n	80032f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d036      	beq.n	8003390 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d016      	beq.n	8003358 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <HAL_RCC_OscConfig+0x248>)
 800332c:	2201      	movs	r2, #1
 800332e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003330:	f7fd fc40 	bl	8000bb4 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003338:	f7fd fc3c 	bl	8000bb4 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e167      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800334a:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_OscConfig+0x240>)
 800334c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0f0      	beq.n	8003338 <HAL_RCC_OscConfig+0x200>
 8003356:	e01b      	b.n	8003390 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_RCC_OscConfig+0x248>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335e:	f7fd fc29 	bl	8000bb4 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003364:	e00e      	b.n	8003384 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003366:	f7fd fc25 	bl	8000bb4 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d907      	bls.n	8003384 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e150      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
 8003378:	40023800 	.word	0x40023800
 800337c:	42470000 	.word	0x42470000
 8003380:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	4b88      	ldr	r3, [pc, #544]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1ea      	bne.n	8003366 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 8097 	beq.w	80034cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b81      	ldr	r3, [pc, #516]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10f      	bne.n	80033ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	4b7d      	ldr	r3, [pc, #500]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	4a7c      	ldr	r2, [pc, #496]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033bc:	6413      	str	r3, [r2, #64]	; 0x40
 80033be:	4b7a      	ldr	r3, [pc, #488]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033ca:	2301      	movs	r3, #1
 80033cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ce:	4b77      	ldr	r3, [pc, #476]	; (80035ac <HAL_RCC_OscConfig+0x474>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d118      	bne.n	800340c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033da:	4b74      	ldr	r3, [pc, #464]	; (80035ac <HAL_RCC_OscConfig+0x474>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a73      	ldr	r2, [pc, #460]	; (80035ac <HAL_RCC_OscConfig+0x474>)
 80033e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e6:	f7fd fbe5 	bl	8000bb4 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ee:	f7fd fbe1 	bl	8000bb4 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e10c      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_OscConfig+0x474>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003408:	2b00      	cmp	r3, #0
 800340a:	d0f0      	beq.n	80033ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d106      	bne.n	8003422 <HAL_RCC_OscConfig+0x2ea>
 8003414:	4b64      	ldr	r3, [pc, #400]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	4a63      	ldr	r2, [pc, #396]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	6713      	str	r3, [r2, #112]	; 0x70
 8003420:	e01c      	b.n	800345c <HAL_RCC_OscConfig+0x324>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b05      	cmp	r3, #5
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x30c>
 800342a:	4b5f      	ldr	r3, [pc, #380]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	4a5e      	ldr	r2, [pc, #376]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003430:	f043 0304 	orr.w	r3, r3, #4
 8003434:	6713      	str	r3, [r2, #112]	; 0x70
 8003436:	4b5c      	ldr	r3, [pc, #368]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343a:	4a5b      	ldr	r2, [pc, #364]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	6713      	str	r3, [r2, #112]	; 0x70
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0x324>
 8003444:	4b58      	ldr	r3, [pc, #352]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	4a57      	ldr	r2, [pc, #348]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	6713      	str	r3, [r2, #112]	; 0x70
 8003450:	4b55      	ldr	r3, [pc, #340]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	4a54      	ldr	r2, [pc, #336]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003456:	f023 0304 	bic.w	r3, r3, #4
 800345a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d015      	beq.n	8003490 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003464:	f7fd fba6 	bl	8000bb4 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800346a:	e00a      	b.n	8003482 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fd fba2 	bl	8000bb4 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e0cb      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003482:	4b49      	ldr	r3, [pc, #292]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d0ee      	beq.n	800346c <HAL_RCC_OscConfig+0x334>
 800348e:	e014      	b.n	80034ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003490:	f7fd fb90 	bl	8000bb4 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003496:	e00a      	b.n	80034ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003498:	f7fd fb8c 	bl	8000bb4 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e0b5      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ae:	4b3e      	ldr	r3, [pc, #248]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1ee      	bne.n	8003498 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ba:	7dfb      	ldrb	r3, [r7, #23]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d105      	bne.n	80034cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c0:	4b39      	ldr	r3, [pc, #228]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	4a38      	ldr	r2, [pc, #224]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 80a1 	beq.w	8003618 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d6:	4b34      	ldr	r3, [pc, #208]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d05c      	beq.n	800359c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d141      	bne.n	800356e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ea:	4b31      	ldr	r3, [pc, #196]	; (80035b0 <HAL_RCC_OscConfig+0x478>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f0:	f7fd fb60 	bl	8000bb4 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f8:	f7fd fb5c 	bl	8000bb4 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b02      	cmp	r3, #2
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e087      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800350a:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f0      	bne.n	80034f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	019b      	lsls	r3, r3, #6
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	085b      	lsrs	r3, r3, #1
 800352e:	3b01      	subs	r3, #1
 8003530:	041b      	lsls	r3, r3, #16
 8003532:	431a      	orrs	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	061b      	lsls	r3, r3, #24
 800353a:	491b      	ldr	r1, [pc, #108]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 800353c:	4313      	orrs	r3, r2
 800353e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <HAL_RCC_OscConfig+0x478>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7fd fb35 	bl	8000bb4 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354e:	f7fd fb31 	bl	8000bb4 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e05c      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003560:	4b11      	ldr	r3, [pc, #68]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x416>
 800356c:	e054      	b.n	8003618 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	4b10      	ldr	r3, [pc, #64]	; (80035b0 <HAL_RCC_OscConfig+0x478>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fd fb1e 	bl	8000bb4 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357c:	f7fd fb1a 	bl	8000bb4 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e045      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	4b06      	ldr	r3, [pc, #24]	; (80035a8 <HAL_RCC_OscConfig+0x470>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x444>
 800359a:	e03d      	b.n	8003618 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d107      	bne.n	80035b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e038      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40007000 	.word	0x40007000
 80035b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b4:	4b1b      	ldr	r3, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x4ec>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d028      	beq.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d121      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d11a      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035e4:	4013      	ands	r3, r2
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d111      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fa:	085b      	lsrs	r3, r3, #1
 80035fc:	3b01      	subs	r3, #1
 80035fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d107      	bne.n	8003614 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e000      	b.n	800361a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	40023800 	.word	0x40023800

08003628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0cc      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800363c:	4b68      	ldr	r3, [pc, #416]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d90c      	bls.n	8003664 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b65      	ldr	r3, [pc, #404]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b63      	ldr	r3, [pc, #396]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e0b8      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d005      	beq.n	8003688 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800367c:	4b59      	ldr	r3, [pc, #356]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4a58      	ldr	r2, [pc, #352]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003686:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0308 	and.w	r3, r3, #8
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003694:	4b53      	ldr	r3, [pc, #332]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a52      	ldr	r2, [pc, #328]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800369e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a0:	4b50      	ldr	r3, [pc, #320]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	494d      	ldr	r1, [pc, #308]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d044      	beq.n	8003748 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d107      	bne.n	80036d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c6:	4b47      	ldr	r3, [pc, #284]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d119      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e07f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e2:	2b03      	cmp	r3, #3
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	4b3f      	ldr	r3, [pc, #252]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e06f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f6:	4b3b      	ldr	r3, [pc, #236]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e067      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003706:	4b37      	ldr	r3, [pc, #220]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f023 0203 	bic.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4934      	ldr	r1, [pc, #208]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003718:	f7fd fa4c 	bl	8000bb4 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	e00a      	b.n	8003736 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003720:	f7fd fa48 	bl	8000bb4 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e04f      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	4b2b      	ldr	r3, [pc, #172]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 020c 	and.w	r2, r3, #12
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	429a      	cmp	r2, r3
 8003746:	d1eb      	bne.n	8003720 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003748:	4b25      	ldr	r3, [pc, #148]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d20c      	bcs.n	8003770 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b20      	ldr	r3, [pc, #128]	; (80037e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0307 	and.w	r3, r3, #7
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e032      	b.n	80037d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d008      	beq.n	800378e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800377c:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	4916      	ldr	r1, [pc, #88]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	4313      	orrs	r3, r2
 800378c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800379a:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	00db      	lsls	r3, r3, #3
 80037a8:	490e      	ldr	r1, [pc, #56]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ae:	f000 f821 	bl	80037f4 <HAL_RCC_GetSysClockFreq>
 80037b2:	4602      	mov	r2, r0
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	490a      	ldr	r1, [pc, #40]	; (80037e8 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	5ccb      	ldrb	r3, [r1, r3]
 80037c2:	fa22 f303 	lsr.w	r3, r2, r3
 80037c6:	4a09      	ldr	r2, [pc, #36]	; (80037ec <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037ca:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <HAL_RCC_ClockConfig+0x1c8>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fd f9ac 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	40023c00 	.word	0x40023c00
 80037e4:	40023800 	.word	0x40023800
 80037e8:	0800bbd4 	.word	0x0800bbd4
 80037ec:	20000000 	.word	0x20000000
 80037f0:	20000004 	.word	0x20000004

080037f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f8:	b090      	sub	sp, #64	; 0x40
 80037fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003800:	2300      	movs	r3, #0
 8003802:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003804:	2300      	movs	r3, #0
 8003806:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800380c:	4b59      	ldr	r3, [pc, #356]	; (8003974 <HAL_RCC_GetSysClockFreq+0x180>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 030c 	and.w	r3, r3, #12
 8003814:	2b08      	cmp	r3, #8
 8003816:	d00d      	beq.n	8003834 <HAL_RCC_GetSysClockFreq+0x40>
 8003818:	2b08      	cmp	r3, #8
 800381a:	f200 80a1 	bhi.w	8003960 <HAL_RCC_GetSysClockFreq+0x16c>
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_RCC_GetSysClockFreq+0x34>
 8003822:	2b04      	cmp	r3, #4
 8003824:	d003      	beq.n	800382e <HAL_RCC_GetSysClockFreq+0x3a>
 8003826:	e09b      	b.n	8003960 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003828:	4b53      	ldr	r3, [pc, #332]	; (8003978 <HAL_RCC_GetSysClockFreq+0x184>)
 800382a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800382c:	e09b      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800382e:	4b53      	ldr	r3, [pc, #332]	; (800397c <HAL_RCC_GetSysClockFreq+0x188>)
 8003830:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003832:	e098      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003834:	4b4f      	ldr	r3, [pc, #316]	; (8003974 <HAL_RCC_GetSysClockFreq+0x180>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800383c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800383e:	4b4d      	ldr	r3, [pc, #308]	; (8003974 <HAL_RCC_GetSysClockFreq+0x180>)
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d028      	beq.n	800389c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384a:	4b4a      	ldr	r3, [pc, #296]	; (8003974 <HAL_RCC_GetSysClockFreq+0x180>)
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	099b      	lsrs	r3, r3, #6
 8003850:	2200      	movs	r2, #0
 8003852:	623b      	str	r3, [r7, #32]
 8003854:	627a      	str	r2, [r7, #36]	; 0x24
 8003856:	6a3b      	ldr	r3, [r7, #32]
 8003858:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800385c:	2100      	movs	r1, #0
 800385e:	4b47      	ldr	r3, [pc, #284]	; (800397c <HAL_RCC_GetSysClockFreq+0x188>)
 8003860:	fb03 f201 	mul.w	r2, r3, r1
 8003864:	2300      	movs	r3, #0
 8003866:	fb00 f303 	mul.w	r3, r0, r3
 800386a:	4413      	add	r3, r2
 800386c:	4a43      	ldr	r2, [pc, #268]	; (800397c <HAL_RCC_GetSysClockFreq+0x188>)
 800386e:	fba0 1202 	umull	r1, r2, r0, r2
 8003872:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003874:	460a      	mov	r2, r1
 8003876:	62ba      	str	r2, [r7, #40]	; 0x28
 8003878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800387a:	4413      	add	r3, r2
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800387e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003880:	2200      	movs	r2, #0
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	61fa      	str	r2, [r7, #28]
 8003886:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800388a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800388e:	f7fc fca7 	bl	80001e0 <__aeabi_uldivmod>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4613      	mov	r3, r2
 8003898:	63fb      	str	r3, [r7, #60]	; 0x3c
 800389a:	e053      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800389c:	4b35      	ldr	r3, [pc, #212]	; (8003974 <HAL_RCC_GetSysClockFreq+0x180>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	2200      	movs	r2, #0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	617a      	str	r2, [r7, #20]
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80038ae:	f04f 0b00 	mov.w	fp, #0
 80038b2:	4652      	mov	r2, sl
 80038b4:	465b      	mov	r3, fp
 80038b6:	f04f 0000 	mov.w	r0, #0
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	0159      	lsls	r1, r3, #5
 80038c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038c4:	0150      	lsls	r0, r2, #5
 80038c6:	4602      	mov	r2, r0
 80038c8:	460b      	mov	r3, r1
 80038ca:	ebb2 080a 	subs.w	r8, r2, sl
 80038ce:	eb63 090b 	sbc.w	r9, r3, fp
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038e6:	ebb2 0408 	subs.w	r4, r2, r8
 80038ea:	eb63 0509 	sbc.w	r5, r3, r9
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	00eb      	lsls	r3, r5, #3
 80038f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038fc:	00e2      	lsls	r2, r4, #3
 80038fe:	4614      	mov	r4, r2
 8003900:	461d      	mov	r5, r3
 8003902:	eb14 030a 	adds.w	r3, r4, sl
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	eb45 030b 	adc.w	r3, r5, fp
 800390c:	607b      	str	r3, [r7, #4]
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	f04f 0300 	mov.w	r3, #0
 8003916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800391a:	4629      	mov	r1, r5
 800391c:	028b      	lsls	r3, r1, #10
 800391e:	4621      	mov	r1, r4
 8003920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003924:	4621      	mov	r1, r4
 8003926:	028a      	lsls	r2, r1, #10
 8003928:	4610      	mov	r0, r2
 800392a:	4619      	mov	r1, r3
 800392c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800392e:	2200      	movs	r2, #0
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	60fa      	str	r2, [r7, #12]
 8003934:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003938:	f7fc fc52 	bl	80001e0 <__aeabi_uldivmod>
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4613      	mov	r3, r2
 8003942:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003944:	4b0b      	ldr	r3, [pc, #44]	; (8003974 <HAL_RCC_GetSysClockFreq+0x180>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	0c1b      	lsrs	r3, r3, #16
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	3301      	adds	r3, #1
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003954:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800395e:	e002      	b.n	8003966 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003960:	4b05      	ldr	r3, [pc, #20]	; (8003978 <HAL_RCC_GetSysClockFreq+0x184>)
 8003962:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003968:	4618      	mov	r0, r3
 800396a:	3740      	adds	r7, #64	; 0x40
 800396c:	46bd      	mov	sp, r7
 800396e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003972:	bf00      	nop
 8003974:	40023800 	.word	0x40023800
 8003978:	00f42400 	.word	0x00f42400
 800397c:	017d7840 	.word	0x017d7840

08003980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003980:	b480      	push	{r7}
 8003982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003984:	4b03      	ldr	r3, [pc, #12]	; (8003994 <HAL_RCC_GetHCLKFreq+0x14>)
 8003986:	681b      	ldr	r3, [r3, #0]
}
 8003988:	4618      	mov	r0, r3
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	20000000 	.word	0x20000000

08003998 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003998:	b084      	sub	sp, #16
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	f107 001c 	add.w	r0, r7, #28
 80039a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80039aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d122      	bne.n	80039f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80039c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80039d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d105      	bne.n	80039ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f001 fbee 	bl	80051cc <USB_CoreReset>
 80039f0:	4603      	mov	r3, r0
 80039f2:	73fb      	strb	r3, [r7, #15]
 80039f4:	e01a      	b.n	8003a2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f001 fbe2 	bl	80051cc <USB_CoreReset>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	639a      	str	r2, [r3, #56]	; 0x38
 8003a1e:	e005      	b.n	8003a2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d10b      	bne.n	8003a4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f043 0206 	orr.w	r2, r3, #6
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f043 0220 	orr.w	r2, r3, #32
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a56:	b004      	add	sp, #16
 8003a58:	4770      	bx	lr
	...

08003a5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d165      	bne.n	8003b3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	4a41      	ldr	r2, [pc, #260]	; (8003b78 <USB_SetTurnaroundTime+0x11c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d906      	bls.n	8003a86 <USB_SetTurnaroundTime+0x2a>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	4a40      	ldr	r2, [pc, #256]	; (8003b7c <USB_SetTurnaroundTime+0x120>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d202      	bcs.n	8003a86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a80:	230f      	movs	r3, #15
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	e062      	b.n	8003b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4a3c      	ldr	r2, [pc, #240]	; (8003b7c <USB_SetTurnaroundTime+0x120>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d306      	bcc.n	8003a9c <USB_SetTurnaroundTime+0x40>
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4a3b      	ldr	r2, [pc, #236]	; (8003b80 <USB_SetTurnaroundTime+0x124>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d202      	bcs.n	8003a9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003a96:	230e      	movs	r3, #14
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	e057      	b.n	8003b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4a38      	ldr	r2, [pc, #224]	; (8003b80 <USB_SetTurnaroundTime+0x124>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d306      	bcc.n	8003ab2 <USB_SetTurnaroundTime+0x56>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4a37      	ldr	r2, [pc, #220]	; (8003b84 <USB_SetTurnaroundTime+0x128>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d202      	bcs.n	8003ab2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003aac:	230d      	movs	r3, #13
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	e04c      	b.n	8003b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	4a33      	ldr	r2, [pc, #204]	; (8003b84 <USB_SetTurnaroundTime+0x128>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d306      	bcc.n	8003ac8 <USB_SetTurnaroundTime+0x6c>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	4a32      	ldr	r2, [pc, #200]	; (8003b88 <USB_SetTurnaroundTime+0x12c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d802      	bhi.n	8003ac8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ac2:	230c      	movs	r3, #12
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	e041      	b.n	8003b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	4a2f      	ldr	r2, [pc, #188]	; (8003b88 <USB_SetTurnaroundTime+0x12c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d906      	bls.n	8003ade <USB_SetTurnaroundTime+0x82>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4a2e      	ldr	r2, [pc, #184]	; (8003b8c <USB_SetTurnaroundTime+0x130>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d802      	bhi.n	8003ade <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003ad8:	230b      	movs	r3, #11
 8003ada:	617b      	str	r3, [r7, #20]
 8003adc:	e036      	b.n	8003b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4a2a      	ldr	r2, [pc, #168]	; (8003b8c <USB_SetTurnaroundTime+0x130>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d906      	bls.n	8003af4 <USB_SetTurnaroundTime+0x98>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	4a29      	ldr	r2, [pc, #164]	; (8003b90 <USB_SetTurnaroundTime+0x134>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d802      	bhi.n	8003af4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003aee:	230a      	movs	r3, #10
 8003af0:	617b      	str	r3, [r7, #20]
 8003af2:	e02b      	b.n	8003b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	4a26      	ldr	r2, [pc, #152]	; (8003b90 <USB_SetTurnaroundTime+0x134>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d906      	bls.n	8003b0a <USB_SetTurnaroundTime+0xae>
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4a25      	ldr	r2, [pc, #148]	; (8003b94 <USB_SetTurnaroundTime+0x138>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d202      	bcs.n	8003b0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003b04:	2309      	movs	r3, #9
 8003b06:	617b      	str	r3, [r7, #20]
 8003b08:	e020      	b.n	8003b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4a21      	ldr	r2, [pc, #132]	; (8003b94 <USB_SetTurnaroundTime+0x138>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d306      	bcc.n	8003b20 <USB_SetTurnaroundTime+0xc4>
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	4a20      	ldr	r2, [pc, #128]	; (8003b98 <USB_SetTurnaroundTime+0x13c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d802      	bhi.n	8003b20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	e015      	b.n	8003b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <USB_SetTurnaroundTime+0x13c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d906      	bls.n	8003b36 <USB_SetTurnaroundTime+0xda>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	4a1c      	ldr	r2, [pc, #112]	; (8003b9c <USB_SetTurnaroundTime+0x140>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d202      	bcs.n	8003b36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003b30:	2307      	movs	r3, #7
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	e00a      	b.n	8003b4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003b36:	2306      	movs	r3, #6
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	e007      	b.n	8003b4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d102      	bne.n	8003b48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003b42:	2309      	movs	r3, #9
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	e001      	b.n	8003b4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003b48:	2309      	movs	r3, #9
 8003b4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68db      	ldr	r3, [r3, #12]
 8003b50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	029b      	lsls	r3, r3, #10
 8003b60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	00d8acbf 	.word	0x00d8acbf
 8003b7c:	00e4e1c0 	.word	0x00e4e1c0
 8003b80:	00f42400 	.word	0x00f42400
 8003b84:	01067380 	.word	0x01067380
 8003b88:	011a499f 	.word	0x011a499f
 8003b8c:	01312cff 	.word	0x01312cff
 8003b90:	014ca43f 	.word	0x014ca43f
 8003b94:	016e3600 	.word	0x016e3600
 8003b98:	01a6ab1f 	.word	0x01a6ab1f
 8003b9c:	01e84800 	.word	0x01e84800

08003ba0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f043 0201 	orr.w	r2, r3, #1
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f023 0201 	bic.w	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003c00:	78fb      	ldrb	r3, [r7, #3]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d115      	bne.n	8003c32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c12:	2001      	movs	r0, #1
 8003c14:	f7fc ffda 	bl	8000bcc <HAL_Delay>
      ms++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f001 fa45 	bl	80050ae <USB_GetMode>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d01e      	beq.n	8003c68 <USB_SetCurrentMode+0x84>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2b31      	cmp	r3, #49	; 0x31
 8003c2e:	d9f0      	bls.n	8003c12 <USB_SetCurrentMode+0x2e>
 8003c30:	e01a      	b.n	8003c68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d115      	bne.n	8003c64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c44:	2001      	movs	r0, #1
 8003c46:	f7fc ffc1 	bl	8000bcc <HAL_Delay>
      ms++;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f001 fa2c 	bl	80050ae <USB_GetMode>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <USB_SetCurrentMode+0x84>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b31      	cmp	r3, #49	; 0x31
 8003c60:	d9f0      	bls.n	8003c44 <USB_SetCurrentMode+0x60>
 8003c62:	e001      	b.n	8003c68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e005      	b.n	8003c74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b32      	cmp	r3, #50	; 0x32
 8003c6c:	d101      	bne.n	8003c72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b086      	sub	sp, #24
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c96:	2300      	movs	r3, #0
 8003c98:	613b      	str	r3, [r7, #16]
 8003c9a:	e009      	b.n	8003cb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	3340      	adds	r3, #64	; 0x40
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	3301      	adds	r3, #1
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b0e      	cmp	r3, #14
 8003cb4:	d9f2      	bls.n	8003c9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d11c      	bne.n	8003cf6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cca:	f043 0302 	orr.w	r3, r3, #2
 8003cce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38
 8003cf4:	e00b      	b.n	8003d0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d14:	461a      	mov	r2, r3
 8003d16:	2300      	movs	r3, #0
 8003d18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d20:	4619      	mov	r1, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d28:	461a      	mov	r2, r3
 8003d2a:	680b      	ldr	r3, [r1, #0]
 8003d2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d10c      	bne.n	8003d4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d104      	bne.n	8003d44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f965 	bl	800400c <USB_SetDevSpeed>
 8003d42:	e008      	b.n	8003d56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003d44:	2101      	movs	r1, #1
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f960 	bl	800400c <USB_SetDevSpeed>
 8003d4c:	e003      	b.n	8003d56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d4e:	2103      	movs	r1, #3
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f000 f95b 	bl	800400c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d56:	2110      	movs	r1, #16
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f8f3 	bl	8003f44 <USB_FlushTxFifo>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f91f 	bl	8003fac <USB_FlushRxFifo>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d001      	beq.n	8003d78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2300      	movs	r3, #0
 8003d82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d96:	461a      	mov	r2, r3
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	613b      	str	r3, [r7, #16]
 8003da0:	e043      	b.n	8003e2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	015a      	lsls	r2, r3, #5
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	4413      	add	r3, r2
 8003daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003db8:	d118      	bne.n	8003dec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10a      	bne.n	8003dd6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dcc:	461a      	mov	r2, r3
 8003dce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	e013      	b.n	8003dfe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	015a      	lsls	r2, r3, #5
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4413      	add	r3, r2
 8003dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de2:	461a      	mov	r2, r3
 8003de4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003de8:	6013      	str	r3, [r2, #0]
 8003dea:	e008      	b.n	8003dfe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	3301      	adds	r3, #1
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d3b7      	bcc.n	8003da2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	e043      	b.n	8003ec0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e4e:	d118      	bne.n	8003e82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10a      	bne.n	8003e6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e62:	461a      	mov	r2, r3
 8003e64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	e013      	b.n	8003e94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	e008      	b.n	8003e94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2300      	movs	r3, #0
 8003e92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003eb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	613b      	str	r3, [r7, #16]
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d3b7      	bcc.n	8003e38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ed6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ee8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f043 0210 	orr.w	r2, r3, #16
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699a      	ldr	r2, [r3, #24]
 8003f00:	4b0f      	ldr	r3, [pc, #60]	; (8003f40 <USB_DevInit+0x2c4>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	f043 0208 	orr.w	r2, r3, #8
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d107      	bne.n	8003f30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f28:	f043 0304 	orr.w	r3, r3, #4
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3718      	adds	r7, #24
 8003f36:	46bd      	mov	sp, r7
 8003f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f3c:	b004      	add	sp, #16
 8003f3e:	4770      	bx	lr
 8003f40:	803c3800 	.word	0x803c3800

08003f44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3301      	adds	r3, #1
 8003f56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4a13      	ldr	r2, [pc, #76]	; (8003fa8 <USB_FlushTxFifo+0x64>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d901      	bls.n	8003f64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e01b      	b.n	8003f9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	daf2      	bge.n	8003f52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	019b      	lsls	r3, r3, #6
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4a08      	ldr	r2, [pc, #32]	; (8003fa8 <USB_FlushTxFifo+0x64>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d901      	bls.n	8003f8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e006      	b.n	8003f9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d0f0      	beq.n	8003f7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3714      	adds	r7, #20
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	00030d40 	.word	0x00030d40

08003fac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4a11      	ldr	r2, [pc, #68]	; (8004008 <USB_FlushRxFifo+0x5c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d901      	bls.n	8003fca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e018      	b.n	8003ffc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	daf2      	bge.n	8003fb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2210      	movs	r2, #16
 8003fda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4a08      	ldr	r2, [pc, #32]	; (8004008 <USB_FlushRxFifo+0x5c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e006      	b.n	8003ffc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	2b10      	cmp	r3, #16
 8003ff8:	d0f0      	beq.n	8003fdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	00030d40 	.word	0x00030d40

0800400c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	78fb      	ldrb	r3, [r7, #3]
 8004026:	68f9      	ldr	r1, [r7, #12]
 8004028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800402c:	4313      	orrs	r3, r2
 800402e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3714      	adds	r7, #20
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr

0800403e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800403e:	b480      	push	{r7}
 8004040:	b087      	sub	sp, #28
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 0306 	and.w	r3, r3, #6
 8004056:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d102      	bne.n	8004064 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800405e:	2300      	movs	r3, #0
 8004060:	75fb      	strb	r3, [r7, #23]
 8004062:	e00a      	b.n	800407a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b02      	cmp	r3, #2
 8004068:	d002      	beq.n	8004070 <USB_GetDevSpeed+0x32>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b06      	cmp	r3, #6
 800406e:	d102      	bne.n	8004076 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004070:	2302      	movs	r3, #2
 8004072:	75fb      	strb	r3, [r7, #23]
 8004074:	e001      	b.n	800407a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004076:	230f      	movs	r3, #15
 8004078:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800407a:	7dfb      	ldrb	r3, [r7, #23]
}
 800407c:	4618      	mov	r0, r3
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	785b      	ldrb	r3, [r3, #1]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d13a      	bne.n	800411a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040aa:	69da      	ldr	r2, [r3, #28]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	2101      	movs	r1, #1
 80040b6:	fa01 f303 	lsl.w	r3, r1, r3
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	68f9      	ldr	r1, [r7, #12]
 80040be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040c2:	4313      	orrs	r3, r2
 80040c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	015a      	lsls	r2, r3, #5
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	4413      	add	r3, r2
 80040ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d155      	bne.n	8004188 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	791b      	ldrb	r3, [r3, #4]
 80040f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	059b      	lsls	r3, r3, #22
 80040fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004100:	4313      	orrs	r3, r2
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	e036      	b.n	8004188 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	2101      	movs	r1, #1
 800412c:	fa01 f303 	lsl.w	r3, r1, r3
 8004130:	041b      	lsls	r3, r3, #16
 8004132:	68f9      	ldr	r1, [r7, #12]
 8004134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004138:	4313      	orrs	r3, r2
 800413a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4413      	add	r3, r2
 8004144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d11a      	bne.n	8004188 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4413      	add	r3, r2
 800415a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	791b      	ldrb	r3, [r3, #4]
 800416c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800416e:	430b      	orrs	r3, r1
 8004170:	4313      	orrs	r3, r2
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	0151      	lsls	r1, r2, #5
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	440a      	add	r2, r1
 800417a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800417e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004186:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004188:	2300      	movs	r3, #0
}
 800418a:	4618      	mov	r0, r3
 800418c:	3714      	adds	r7, #20
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	785b      	ldrb	r3, [r3, #1]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d161      	bne.n	8004278 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041ca:	d11f      	bne.n	800420c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	0151      	lsls	r1, r2, #5
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	440a      	add	r2, r1
 80041e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	0151      	lsls	r1, r2, #5
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	440a      	add	r2, r1
 8004202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800420a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	f003 030f 	and.w	r3, r3, #15
 800421c:	2101      	movs	r1, #1
 800421e:	fa01 f303 	lsl.w	r3, r1, r3
 8004222:	b29b      	uxth	r3, r3
 8004224:	43db      	mvns	r3, r3
 8004226:	68f9      	ldr	r1, [r7, #12]
 8004228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800422c:	4013      	ands	r3, r2
 800422e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	2101      	movs	r1, #1
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	b29b      	uxth	r3, r3
 8004248:	43db      	mvns	r3, r3
 800424a:	68f9      	ldr	r1, [r7, #12]
 800424c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004250:	4013      	ands	r3, r2
 8004252:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	0159      	lsls	r1, r3, #5
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	440b      	add	r3, r1
 800426a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426e:	4619      	mov	r1, r3
 8004270:	4b35      	ldr	r3, [pc, #212]	; (8004348 <USB_DeactivateEndpoint+0x1b0>)
 8004272:	4013      	ands	r3, r2
 8004274:	600b      	str	r3, [r1, #0]
 8004276:	e060      	b.n	800433a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800428a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800428e:	d11f      	bne.n	80042d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	0151      	lsls	r1, r2, #5
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	440a      	add	r2, r1
 80042a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	0151      	lsls	r1, r2, #5
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	440a      	add	r2, r1
 80042c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	2101      	movs	r1, #1
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	43db      	mvns	r3, r3
 80042ea:	68f9      	ldr	r1, [r7, #12]
 80042ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042f0:	4013      	ands	r3, r2
 80042f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	2101      	movs	r1, #1
 8004306:	fa01 f303 	lsl.w	r3, r1, r3
 800430a:	041b      	lsls	r3, r3, #16
 800430c:	43db      	mvns	r3, r3
 800430e:	68f9      	ldr	r1, [r7, #12]
 8004310:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004314:	4013      	ands	r3, r2
 8004316:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	0159      	lsls	r1, r3, #5
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	440b      	add	r3, r1
 800432e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004332:	4619      	mov	r1, r3
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <USB_DeactivateEndpoint+0x1b4>)
 8004336:	4013      	ands	r3, r2
 8004338:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3714      	adds	r7, #20
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	ec337800 	.word	0xec337800
 800434c:	eff37800 	.word	0xeff37800

08004350 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	; 0x28
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	4613      	mov	r3, r2
 800435c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	2b01      	cmp	r3, #1
 800436e:	f040 815c 	bne.w	800462a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d132      	bne.n	80043e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	0151      	lsls	r1, r2, #5
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	440a      	add	r2, r1
 8004390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004394:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004398:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800439c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	0151      	lsls	r1, r2, #5
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	440a      	add	r2, r1
 80043b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	0151      	lsls	r1, r2, #5
 80043d0:	69fa      	ldr	r2, [r7, #28]
 80043d2:	440a      	add	r2, r1
 80043d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d8:	0cdb      	lsrs	r3, r3, #19
 80043da:	04db      	lsls	r3, r3, #19
 80043dc:	6113      	str	r3, [r2, #16]
 80043de:	e074      	b.n	80044ca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	0151      	lsls	r1, r2, #5
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	440a      	add	r2, r1
 80043f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043fa:	0cdb      	lsrs	r3, r3, #19
 80043fc:	04db      	lsls	r3, r3, #19
 80043fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	440a      	add	r2, r1
 8004416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800441a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800441e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004422:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	4413      	add	r3, r2
 800442c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004430:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	6999      	ldr	r1, [r3, #24]
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	440b      	add	r3, r1
 800443c:	1e59      	subs	r1, r3, #1
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	fbb1 f3f3 	udiv	r3, r1, r3
 8004446:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004448:	4b9d      	ldr	r3, [pc, #628]	; (80046c0 <USB_EPStartXfer+0x370>)
 800444a:	400b      	ands	r3, r1
 800444c:	69b9      	ldr	r1, [r7, #24]
 800444e:	0148      	lsls	r0, r1, #5
 8004450:	69f9      	ldr	r1, [r7, #28]
 8004452:	4401      	add	r1, r0
 8004454:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004458:	4313      	orrs	r3, r2
 800445a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004468:	691a      	ldr	r2, [r3, #16]
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004472:	69b9      	ldr	r1, [r7, #24]
 8004474:	0148      	lsls	r0, r1, #5
 8004476:	69f9      	ldr	r1, [r7, #28]
 8004478:	4401      	add	r1, r0
 800447a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800447e:	4313      	orrs	r3, r2
 8004480:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	791b      	ldrb	r3, [r3, #4]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d11f      	bne.n	80044ca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	69fa      	ldr	r2, [r7, #28]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80044a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	015a      	lsls	r2, r3, #5
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	4413      	add	r3, r2
 80044b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	0151      	lsls	r1, r2, #5
 80044bc:	69fa      	ldr	r2, [r7, #28]
 80044be:	440a      	add	r2, r1
 80044c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80044ca:	79fb      	ldrb	r3, [r7, #7]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d14b      	bne.n	8004568 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e4:	461a      	mov	r2, r3
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	791b      	ldrb	r3, [r3, #4]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d128      	bne.n	8004546 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004500:	2b00      	cmp	r3, #0
 8004502:	d110      	bne.n	8004526 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	0151      	lsls	r1, r2, #5
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	440a      	add	r2, r1
 800451a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800451e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	e00f      	b.n	8004546 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	0151      	lsls	r1, r2, #5
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	440a      	add	r2, r1
 800453c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004544:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	69fa      	ldr	r2, [r7, #28]
 800455a:	440a      	add	r2, r1
 800455c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004560:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e133      	b.n	80047d0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004582:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004586:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	791b      	ldrb	r3, [r3, #4]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d015      	beq.n	80045bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 811b 	beq.w	80047d0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	2101      	movs	r1, #1
 80045ac:	fa01 f303 	lsl.w	r3, r1, r3
 80045b0:	69f9      	ldr	r1, [r7, #28]
 80045b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045b6:	4313      	orrs	r3, r2
 80045b8:	634b      	str	r3, [r1, #52]	; 0x34
 80045ba:	e109      	b.n	80047d0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d110      	bne.n	80045ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	0151      	lsls	r1, r2, #5
 80045de:	69fa      	ldr	r2, [r7, #28]
 80045e0:	440a      	add	r2, r1
 80045e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	e00f      	b.n	800460e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045ee:	69bb      	ldr	r3, [r7, #24]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6919      	ldr	r1, [r3, #16]
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	781a      	ldrb	r2, [r3, #0]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	b298      	uxth	r0, r3
 800461c:	79fb      	ldrb	r3, [r7, #7]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	4603      	mov	r3, r0
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fade 	bl	8004be4 <USB_WritePacket>
 8004628:	e0d2      	b.n	80047d0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	4413      	add	r3, r2
 8004632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	0151      	lsls	r1, r2, #5
 800463c:	69fa      	ldr	r2, [r7, #28]
 800463e:	440a      	add	r2, r1
 8004640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004644:	0cdb      	lsrs	r3, r3, #19
 8004646:	04db      	lsls	r3, r3, #19
 8004648:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004656:	691b      	ldr	r3, [r3, #16]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	0151      	lsls	r1, r2, #5
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	440a      	add	r2, r1
 8004660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004664:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004668:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800466c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d126      	bne.n	80046c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468c:	69b9      	ldr	r1, [r7, #24]
 800468e:	0148      	lsls	r0, r1, #5
 8004690:	69f9      	ldr	r1, [r7, #28]
 8004692:	4401      	add	r1, r0
 8004694:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004698:	4313      	orrs	r3, r2
 800469a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	0151      	lsls	r1, r2, #5
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	440a      	add	r2, r1
 80046b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046ba:	6113      	str	r3, [r2, #16]
 80046bc:	e03a      	b.n	8004734 <USB_EPStartXfer+0x3e4>
 80046be:	bf00      	nop
 80046c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	699a      	ldr	r2, [r3, #24]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	1e5a      	subs	r2, r3, #1
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	8afa      	ldrh	r2, [r7, #22]
 80046e0:	fb03 f202 	mul.w	r2, r3, r2
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f4:	691a      	ldr	r2, [r3, #16]
 80046f6:	8afb      	ldrh	r3, [r7, #22]
 80046f8:	04d9      	lsls	r1, r3, #19
 80046fa:	4b38      	ldr	r3, [pc, #224]	; (80047dc <USB_EPStartXfer+0x48c>)
 80046fc:	400b      	ands	r3, r1
 80046fe:	69b9      	ldr	r1, [r7, #24]
 8004700:	0148      	lsls	r0, r1, #5
 8004702:	69f9      	ldr	r1, [r7, #28]
 8004704:	4401      	add	r1, r0
 8004706:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800470a:	4313      	orrs	r3, r2
 800470c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004724:	69b9      	ldr	r1, [r7, #24]
 8004726:	0148      	lsls	r0, r1, #5
 8004728:	69f9      	ldr	r1, [r7, #28]
 800472a:	4401      	add	r1, r0
 800472c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004730:	4313      	orrs	r3, r2
 8004732:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d10d      	bne.n	8004756 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	6919      	ldr	r1, [r3, #16]
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004752:	460a      	mov	r2, r1
 8004754:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	791b      	ldrb	r3, [r3, #4]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d128      	bne.n	80047b0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476a:	2b00      	cmp	r3, #0
 800476c:	d110      	bne.n	8004790 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	0151      	lsls	r1, r2, #5
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	440a      	add	r2, r1
 8004784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004788:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e00f      	b.n	80047b0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69ba      	ldr	r2, [r7, #24]
 80047a0:	0151      	lsls	r1, r2, #5
 80047a2:	69fa      	ldr	r2, [r7, #28]
 80047a4:	440a      	add	r2, r1
 80047a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	0151      	lsls	r1, r2, #5
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	440a      	add	r2, r1
 80047c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	1ff80000 	.word	0x1ff80000

080047e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	4613      	mov	r3, r2
 80047ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	785b      	ldrb	r3, [r3, #1]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	f040 80ce 	bne.w	800499e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d132      	bne.n	8004870 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	0151      	lsls	r1, r2, #5
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	440a      	add	r2, r1
 8004820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004824:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004828:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800482c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	0151      	lsls	r1, r2, #5
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	440a      	add	r2, r1
 8004844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004848:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800484c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	0151      	lsls	r1, r2, #5
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	440a      	add	r2, r1
 8004864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004868:	0cdb      	lsrs	r3, r3, #19
 800486a:	04db      	lsls	r3, r3, #19
 800486c:	6113      	str	r3, [r2, #16]
 800486e:	e04e      	b.n	800490e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	440a      	add	r2, r1
 8004886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800488a:	0cdb      	lsrs	r3, r3, #19
 800488c:	04db      	lsls	r3, r3, #19
 800488e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	0151      	lsls	r1, r2, #5
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	440a      	add	r2, r1
 80048a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	699a      	ldr	r2, [r3, #24]
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	429a      	cmp	r2, r3
 80048be:	d903      	bls.n	80048c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	0151      	lsls	r1, r2, #5
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	440a      	add	r2, r1
 80048de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	015a      	lsls	r2, r3, #5
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	4413      	add	r3, r2
 80048f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fe:	6939      	ldr	r1, [r7, #16]
 8004900:	0148      	lsls	r0, r1, #5
 8004902:	6979      	ldr	r1, [r7, #20]
 8004904:	4401      	add	r1, r0
 8004906:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800490a:	4313      	orrs	r3, r2
 800490c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800490e:	79fb      	ldrb	r3, [r7, #7]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d11e      	bne.n	8004952 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d009      	beq.n	8004930 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	015a      	lsls	r2, r3, #5
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	4413      	add	r3, r2
 8004924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004928:	461a      	mov	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	015a      	lsls	r2, r3, #5
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	4413      	add	r3, r2
 8004938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	0151      	lsls	r1, r2, #5
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	440a      	add	r2, r1
 8004946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800494a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	e097      	b.n	8004a82 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	440a      	add	r2, r1
 8004968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004970:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 8083 	beq.w	8004a82 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	f003 030f 	and.w	r3, r3, #15
 800498c:	2101      	movs	r1, #1
 800498e:	fa01 f303 	lsl.w	r3, r1, r3
 8004992:	6979      	ldr	r1, [r7, #20]
 8004994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004998:	4313      	orrs	r3, r2
 800499a:	634b      	str	r3, [r1, #52]	; 0x34
 800499c:	e071      	b.n	8004a82 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	0151      	lsls	r1, r2, #5
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	440a      	add	r2, r1
 80049b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b8:	0cdb      	lsrs	r3, r3, #19
 80049ba:	04db      	lsls	r3, r3, #19
 80049bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	015a      	lsls	r2, r3, #5
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	4413      	add	r3, r2
 80049c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	0151      	lsls	r1, r2, #5
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	440a      	add	r2, r1
 80049d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	68da      	ldr	r2, [r3, #12]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	0151      	lsls	r1, r2, #5
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	440a      	add	r2, r1
 8004a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a26:	691a      	ldr	r2, [r3, #16]
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a30:	6939      	ldr	r1, [r7, #16]
 8004a32:	0148      	lsls	r0, r1, #5
 8004a34:	6979      	ldr	r1, [r7, #20]
 8004a36:	4401      	add	r1, r0
 8004a38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004a40:	79fb      	ldrb	r3, [r7, #7]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d10d      	bne.n	8004a62 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d009      	beq.n	8004a62 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	6919      	ldr	r1, [r3, #16]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	015a      	lsls	r2, r3, #5
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	4413      	add	r3, r2
 8004a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5e:	460a      	mov	r2, r1
 8004a60:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	015a      	lsls	r2, r3, #5
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	4413      	add	r3, r2
 8004a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	0151      	lsls	r1, r2, #5
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	440a      	add	r2, r1
 8004a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	371c      	adds	r7, #28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b087      	sub	sp, #28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d14a      	bne.n	8004b44 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ac6:	f040 8086 	bne.w	8004bd6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	7812      	ldrb	r2, [r2, #0]
 8004ade:	0151      	lsls	r1, r2, #5
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	440a      	add	r2, r1
 8004ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ae8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004aec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	7812      	ldrb	r2, [r2, #0]
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3301      	adds	r3, #1
 8004b16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d902      	bls.n	8004b28 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	75fb      	strb	r3, [r7, #23]
          break;
 8004b26:	e056      	b.n	8004bd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	015a      	lsls	r2, r3, #5
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	4413      	add	r3, r2
 8004b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b40:	d0e7      	beq.n	8004b12 <USB_EPStopXfer+0x82>
 8004b42:	e048      	b.n	8004bd6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b5c:	d13b      	bne.n	8004bd6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	015a      	lsls	r2, r3, #5
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	4413      	add	r3, r2
 8004b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	7812      	ldrb	r2, [r2, #0]
 8004b72:	0151      	lsls	r1, r2, #5
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	440a      	add	r2, r1
 8004b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b80:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	7812      	ldrb	r2, [r2, #0]
 8004b96:	0151      	lsls	r1, r2, #5
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	440a      	add	r2, r1
 8004b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ba4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3301      	adds	r3, #1
 8004baa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f242 7210 	movw	r2, #10000	; 0x2710
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d902      	bls.n	8004bbc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8004bba:	e00c      	b.n	8004bd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bd4:	d0e7      	beq.n	8004ba6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	371c      	adds	r7, #28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b089      	sub	sp, #36	; 0x24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	4611      	mov	r1, r2
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	71fb      	strb	r3, [r7, #7]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d123      	bne.n	8004c52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c0a:	88bb      	ldrh	r3, [r7, #4]
 8004c0c:	3303      	adds	r3, #3
 8004c0e:	089b      	lsrs	r3, r3, #2
 8004c10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004c12:	2300      	movs	r3, #0
 8004c14:	61bb      	str	r3, [r7, #24]
 8004c16:	e018      	b.n	8004c4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	031a      	lsls	r2, r3, #12
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c24:	461a      	mov	r2, r3
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	3301      	adds	r3, #1
 8004c36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3301      	adds	r3, #1
 8004c42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	3301      	adds	r3, #1
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	69ba      	ldr	r2, [r7, #24]
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d3e2      	bcc.n	8004c18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3724      	adds	r7, #36	; 0x24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b08b      	sub	sp, #44	; 0x2c
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	089b      	lsrs	r3, r3, #2
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004c7e:	88fb      	ldrh	r3, [r7, #6]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004c86:	2300      	movs	r3, #0
 8004c88:	623b      	str	r3, [r7, #32]
 8004c8a:	e014      	b.n	8004cb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	601a      	str	r2, [r3, #0]
    pDest++;
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	3301      	adds	r3, #1
 8004cae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	623b      	str	r3, [r7, #32]
 8004cb6:	6a3a      	ldr	r2, [r7, #32]
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d3e6      	bcc.n	8004c8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004cbe:	8bfb      	ldrh	r3, [r7, #30]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01e      	beq.n	8004d02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f107 0310 	add.w	r3, r7, #16
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	701a      	strb	r2, [r3, #0]
      i++;
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	3301      	adds	r3, #1
 8004cee:	623b      	str	r3, [r7, #32]
      pDest++;
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004cf6:	8bfb      	ldrh	r3, [r7, #30]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004cfc:	8bfb      	ldrh	r3, [r7, #30]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1ea      	bne.n	8004cd8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	372c      	adds	r7, #44	; 0x2c
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	785b      	ldrb	r3, [r3, #1]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d12c      	bne.n	8004d86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	db12      	blt.n	8004d64 <USB_EPSetStall+0x54>
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00f      	beq.n	8004d64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	015a      	lsls	r2, r3, #5
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68ba      	ldr	r2, [r7, #8]
 8004d54:	0151      	lsls	r1, r2, #5
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	440a      	add	r2, r1
 8004d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	015a      	lsls	r2, r3, #5
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	0151      	lsls	r1, r2, #5
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	440a      	add	r2, r1
 8004d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	e02b      	b.n	8004dde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	db12      	blt.n	8004dbe <USB_EPSetStall+0xae>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00f      	beq.n	8004dbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	0151      	lsls	r1, r2, #5
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	440a      	add	r2, r1
 8004db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004dbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	0151      	lsls	r1, r2, #5
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	440a      	add	r2, r1
 8004dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ddc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	785b      	ldrb	r3, [r3, #1]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d128      	bne.n	8004e5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	0151      	lsls	r1, r2, #5
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	440a      	add	r2, r1
 8004e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	791b      	ldrb	r3, [r3, #4]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d003      	beq.n	8004e38 <USB_EPClearStall+0x4c>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	791b      	ldrb	r3, [r3, #4]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d138      	bne.n	8004eaa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	0151      	lsls	r1, r2, #5
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	440a      	add	r2, r1
 8004e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	e027      	b.n	8004eaa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	0151      	lsls	r1, r2, #5
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	440a      	add	r2, r1
 8004e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	791b      	ldrb	r3, [r3, #4]
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d003      	beq.n	8004e8a <USB_EPClearStall+0x9e>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	791b      	ldrb	r3, [r3, #4]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d10f      	bne.n	8004eaa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ed6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004eda:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	78fb      	ldrb	r3, [r7, #3]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004eec:	68f9      	ldr	r1, [r7, #12]
 8004eee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3714      	adds	r7, #20
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f1e:	f023 0303 	bic.w	r3, r3, #3
 8004f22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f32:	f023 0302 	bic.w	r3, r3, #2
 8004f36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b085      	sub	sp, #20
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004f60:	f023 0303 	bic.w	r3, r3, #3
 8004f64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f74:	f043 0302 	orr.w	r3, r3, #2
 8004f78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	0c1b      	lsrs	r3, r3, #16
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	4013      	ands	r3, r2
 8005004:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	b29b      	uxth	r3, r3
}
 800500a:	4618      	mov	r0, r3
 800500c:	3714      	adds	r7, #20
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	460b      	mov	r3, r1
 8005020:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005026:	78fb      	ldrb	r3, [r7, #3]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	4013      	ands	r3, r2
 8005042:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005044:	68bb      	ldr	r3, [r7, #8]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005052:	b480      	push	{r7}
 8005054:	b087      	sub	sp, #28
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	460b      	mov	r3, r1
 800505c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005074:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005076:	78fb      	ldrb	r3, [r7, #3]
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	fa22 f303 	lsr.w	r3, r2, r3
 8005082:	01db      	lsls	r3, r3, #7
 8005084:	b2db      	uxtb	r3, r3
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4013      	ands	r3, r2
 800509e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050a0:	68bb      	ldr	r3, [r7, #8]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f003 0301 	and.w	r3, r3, #1
}
 80050be:	4618      	mov	r0, r3
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b085      	sub	sp, #20
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80050e8:	f023 0307 	bic.w	r3, r3, #7
 80050ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005100:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	460b      	mov	r3, r1
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	333c      	adds	r3, #60	; 0x3c
 8005126:	3304      	adds	r3, #4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4a26      	ldr	r2, [pc, #152]	; (80051c8 <USB_EP0_OutStart+0xb8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d90a      	bls.n	800514a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005144:	d101      	bne.n	800514a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	e037      	b.n	80051ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	461a      	mov	r2, r3
 8005152:	2300      	movs	r3, #0
 8005154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005178:	f043 0318 	orr.w	r3, r3, #24
 800517c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005190:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005192:	7afb      	ldrb	r3, [r7, #11]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d10f      	bne.n	80051b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519e:	461a      	mov	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80051b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	371c      	adds	r7, #28
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	4f54300a 	.word	0x4f54300a

080051cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	3301      	adds	r3, #1
 80051dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4a13      	ldr	r2, [pc, #76]	; (8005230 <USB_CoreReset+0x64>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d901      	bls.n	80051ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e01b      	b.n	8005222 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	daf2      	bge.n	80051d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f043 0201 	orr.w	r2, r3, #1
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	3301      	adds	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4a09      	ldr	r2, [pc, #36]	; (8005230 <USB_CoreReset+0x64>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d901      	bls.n	8005214 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e006      	b.n	8005222 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b01      	cmp	r3, #1
 800521e:	d0f0      	beq.n	8005202 <USB_CoreReset+0x36>

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	00030d40 	.word	0x00030d40

08005234 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005240:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005244:	f006 fb10 	bl	800b868 <USBD_static_malloc>
 8005248:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d109      	bne.n	8005264 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	32b0      	adds	r2, #176	; 0xb0
 800525a:	2100      	movs	r1, #0
 800525c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005260:	2302      	movs	r3, #2
 8005262:	e0d4      	b.n	800540e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005264:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005268:	2100      	movs	r1, #0
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f006 fb74 	bl	800b958 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	32b0      	adds	r2, #176	; 0xb0
 800527a:	68f9      	ldr	r1, [r7, #12]
 800527c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	32b0      	adds	r2, #176	; 0xb0
 800528a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7c1b      	ldrb	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d138      	bne.n	800530e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800529c:	4b5e      	ldr	r3, [pc, #376]	; (8005418 <USBD_CDC_Init+0x1e4>)
 800529e:	7819      	ldrb	r1, [r3, #0]
 80052a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052a4:	2202      	movs	r2, #2
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f006 f9bb 	bl	800b622 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80052ac:	4b5a      	ldr	r3, [pc, #360]	; (8005418 <USBD_CDC_Init+0x1e4>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	f003 020f 	and.w	r2, r3, #15
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	3324      	adds	r3, #36	; 0x24
 80052c2:	2201      	movs	r2, #1
 80052c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80052c6:	4b55      	ldr	r3, [pc, #340]	; (800541c <USBD_CDC_Init+0x1e8>)
 80052c8:	7819      	ldrb	r1, [r3, #0]
 80052ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ce:	2202      	movs	r2, #2
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f006 f9a6 	bl	800b622 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80052d6:	4b51      	ldr	r3, [pc, #324]	; (800541c <USBD_CDC_Init+0x1e8>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	f003 020f 	and.w	r2, r3, #15
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052ee:	2201      	movs	r2, #1
 80052f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80052f2:	4b4b      	ldr	r3, [pc, #300]	; (8005420 <USBD_CDC_Init+0x1ec>)
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	f003 020f 	and.w	r2, r3, #15
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	440b      	add	r3, r1
 8005306:	3326      	adds	r3, #38	; 0x26
 8005308:	2210      	movs	r2, #16
 800530a:	801a      	strh	r2, [r3, #0]
 800530c:	e035      	b.n	800537a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800530e:	4b42      	ldr	r3, [pc, #264]	; (8005418 <USBD_CDC_Init+0x1e4>)
 8005310:	7819      	ldrb	r1, [r3, #0]
 8005312:	2340      	movs	r3, #64	; 0x40
 8005314:	2202      	movs	r2, #2
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f006 f983 	bl	800b622 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800531c:	4b3e      	ldr	r3, [pc, #248]	; (8005418 <USBD_CDC_Init+0x1e4>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	f003 020f 	and.w	r2, r3, #15
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	3324      	adds	r3, #36	; 0x24
 8005332:	2201      	movs	r2, #1
 8005334:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005336:	4b39      	ldr	r3, [pc, #228]	; (800541c <USBD_CDC_Init+0x1e8>)
 8005338:	7819      	ldrb	r1, [r3, #0]
 800533a:	2340      	movs	r3, #64	; 0x40
 800533c:	2202      	movs	r2, #2
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f006 f96f 	bl	800b622 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005344:	4b35      	ldr	r3, [pc, #212]	; (800541c <USBD_CDC_Init+0x1e8>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	f003 020f 	and.w	r2, r3, #15
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800535c:	2201      	movs	r2, #1
 800535e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005360:	4b2f      	ldr	r3, [pc, #188]	; (8005420 <USBD_CDC_Init+0x1ec>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	f003 020f 	and.w	r2, r3, #15
 8005368:	6879      	ldr	r1, [r7, #4]
 800536a:	4613      	mov	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	3326      	adds	r3, #38	; 0x26
 8005376:	2210      	movs	r2, #16
 8005378:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800537a:	4b29      	ldr	r3, [pc, #164]	; (8005420 <USBD_CDC_Init+0x1ec>)
 800537c:	7819      	ldrb	r1, [r3, #0]
 800537e:	2308      	movs	r3, #8
 8005380:	2203      	movs	r2, #3
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f006 f94d 	bl	800b622 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005388:	4b25      	ldr	r3, [pc, #148]	; (8005420 <USBD_CDC_Init+0x1ec>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	f003 020f 	and.w	r2, r3, #15
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	4613      	mov	r3, r2
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4413      	add	r3, r2
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	440b      	add	r3, r1
 800539c:	3324      	adds	r3, #36	; 0x24
 800539e:	2201      	movs	r2, #1
 80053a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	33b0      	adds	r3, #176	; 0xb0
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4413      	add	r3, r2
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80053d8:	2302      	movs	r3, #2
 80053da:	e018      	b.n	800540e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	7c1b      	ldrb	r3, [r3, #16]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053e4:	4b0d      	ldr	r3, [pc, #52]	; (800541c <USBD_CDC_Init+0x1e8>)
 80053e6:	7819      	ldrb	r1, [r3, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80053ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f006 fa04 	bl	800b800 <USBD_LL_PrepareReceive>
 80053f8:	e008      	b.n	800540c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80053fa:	4b08      	ldr	r3, [pc, #32]	; (800541c <USBD_CDC_Init+0x1e8>)
 80053fc:	7819      	ldrb	r1, [r3, #0]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005404:	2340      	movs	r3, #64	; 0x40
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f006 f9fa 	bl	800b800 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000093 	.word	0x20000093
 800541c:	20000094 	.word	0x20000094
 8005420:	20000095 	.word	0x20000095

08005424 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005430:	4b3a      	ldr	r3, [pc, #232]	; (800551c <USBD_CDC_DeInit+0xf8>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f006 f919 	bl	800b66e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800543c:	4b37      	ldr	r3, [pc, #220]	; (800551c <USBD_CDC_DeInit+0xf8>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	f003 020f 	and.w	r2, r3, #15
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	440b      	add	r3, r1
 8005450:	3324      	adds	r3, #36	; 0x24
 8005452:	2200      	movs	r2, #0
 8005454:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005456:	4b32      	ldr	r3, [pc, #200]	; (8005520 <USBD_CDC_DeInit+0xfc>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f006 f906 	bl	800b66e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005462:	4b2f      	ldr	r3, [pc, #188]	; (8005520 <USBD_CDC_DeInit+0xfc>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	f003 020f 	and.w	r2, r3, #15
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800547a:	2200      	movs	r2, #0
 800547c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800547e:	4b29      	ldr	r3, [pc, #164]	; (8005524 <USBD_CDC_DeInit+0x100>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	4619      	mov	r1, r3
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f006 f8f2 	bl	800b66e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800548a:	4b26      	ldr	r3, [pc, #152]	; (8005524 <USBD_CDC_DeInit+0x100>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	f003 020f 	and.w	r2, r3, #15
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	3324      	adds	r3, #36	; 0x24
 80054a0:	2200      	movs	r2, #0
 80054a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80054a4:	4b1f      	ldr	r3, [pc, #124]	; (8005524 <USBD_CDC_DeInit+0x100>)
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	f003 020f 	and.w	r2, r3, #15
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	3326      	adds	r3, #38	; 0x26
 80054ba:	2200      	movs	r2, #0
 80054bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	32b0      	adds	r2, #176	; 0xb0
 80054c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01f      	beq.n	8005510 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	33b0      	adds	r3, #176	; 0xb0
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	32b0      	adds	r2, #176	; 0xb0
 80054ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f006 f9c6 	bl	800b884 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	32b0      	adds	r2, #176	; 0xb0
 8005502:	2100      	movs	r1, #0
 8005504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20000093 	.word	0x20000093
 8005520:	20000094 	.word	0x20000094
 8005524:	20000095 	.word	0x20000095

08005528 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	32b0      	adds	r2, #176	; 0xb0
 800553c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005540:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005546:	2300      	movs	r3, #0
 8005548:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005554:	2303      	movs	r3, #3
 8005556:	e0bf      	b.n	80056d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005560:	2b00      	cmp	r3, #0
 8005562:	d050      	beq.n	8005606 <USBD_CDC_Setup+0xde>
 8005564:	2b20      	cmp	r3, #32
 8005566:	f040 80af 	bne.w	80056c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	88db      	ldrh	r3, [r3, #6]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d03a      	beq.n	80055e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	b25b      	sxtb	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	da1b      	bge.n	80055b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	33b0      	adds	r3, #176	; 0xb0
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005592:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	88d2      	ldrh	r2, [r2, #6]
 8005598:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	88db      	ldrh	r3, [r3, #6]
 800559e:	2b07      	cmp	r3, #7
 80055a0:	bf28      	it	cs
 80055a2:	2307      	movcs	r3, #7
 80055a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	89fa      	ldrh	r2, [r7, #14]
 80055aa:	4619      	mov	r1, r3
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f001 fd89 	bl	80070c4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80055b2:	e090      	b.n	80056d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	785a      	ldrb	r2, [r3, #1]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	88db      	ldrh	r3, [r3, #6]
 80055c2:	2b3f      	cmp	r3, #63	; 0x3f
 80055c4:	d803      	bhi.n	80055ce <USBD_CDC_Setup+0xa6>
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	88db      	ldrh	r3, [r3, #6]
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	e000      	b.n	80055d0 <USBD_CDC_Setup+0xa8>
 80055ce:	2240      	movs	r2, #64	; 0x40
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80055d6:	6939      	ldr	r1, [r7, #16]
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80055de:	461a      	mov	r2, r3
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f001 fd9b 	bl	800711c <USBD_CtlPrepareRx>
      break;
 80055e6:	e076      	b.n	80056d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	33b0      	adds	r3, #176	; 0xb0
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	7850      	ldrb	r0, [r2, #1]
 80055fe:	2200      	movs	r2, #0
 8005600:	6839      	ldr	r1, [r7, #0]
 8005602:	4798      	blx	r3
      break;
 8005604:	e067      	b.n	80056d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	785b      	ldrb	r3, [r3, #1]
 800560a:	2b0b      	cmp	r3, #11
 800560c:	d851      	bhi.n	80056b2 <USBD_CDC_Setup+0x18a>
 800560e:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <USBD_CDC_Setup+0xec>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	08005645 	.word	0x08005645
 8005618:	080056c1 	.word	0x080056c1
 800561c:	080056b3 	.word	0x080056b3
 8005620:	080056b3 	.word	0x080056b3
 8005624:	080056b3 	.word	0x080056b3
 8005628:	080056b3 	.word	0x080056b3
 800562c:	080056b3 	.word	0x080056b3
 8005630:	080056b3 	.word	0x080056b3
 8005634:	080056b3 	.word	0x080056b3
 8005638:	080056b3 	.word	0x080056b3
 800563c:	0800566f 	.word	0x0800566f
 8005640:	08005699 	.word	0x08005699
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b03      	cmp	r3, #3
 800564e:	d107      	bne.n	8005660 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005650:	f107 030a 	add.w	r3, r7, #10
 8005654:	2202      	movs	r2, #2
 8005656:	4619      	mov	r1, r3
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f001 fd33 	bl	80070c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800565e:	e032      	b.n	80056c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005660:	6839      	ldr	r1, [r7, #0]
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f001 fcbd 	bl	8006fe2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005668:	2303      	movs	r3, #3
 800566a:	75fb      	strb	r3, [r7, #23]
          break;
 800566c:	e02b      	b.n	80056c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b03      	cmp	r3, #3
 8005678:	d107      	bne.n	800568a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800567a:	f107 030d 	add.w	r3, r7, #13
 800567e:	2201      	movs	r2, #1
 8005680:	4619      	mov	r1, r3
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f001 fd1e 	bl	80070c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005688:	e01d      	b.n	80056c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800568a:	6839      	ldr	r1, [r7, #0]
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f001 fca8 	bl	8006fe2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005692:	2303      	movs	r3, #3
 8005694:	75fb      	strb	r3, [r7, #23]
          break;
 8005696:	e016      	b.n	80056c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d00f      	beq.n	80056c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80056a4:	6839      	ldr	r1, [r7, #0]
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f001 fc9b 	bl	8006fe2 <USBD_CtlError>
            ret = USBD_FAIL;
 80056ac:	2303      	movs	r3, #3
 80056ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80056b0:	e008      	b.n	80056c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80056b2:	6839      	ldr	r1, [r7, #0]
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f001 fc94 	bl	8006fe2 <USBD_CtlError>
          ret = USBD_FAIL;
 80056ba:	2303      	movs	r3, #3
 80056bc:	75fb      	strb	r3, [r7, #23]
          break;
 80056be:	e002      	b.n	80056c6 <USBD_CDC_Setup+0x19e>
          break;
 80056c0:	bf00      	nop
 80056c2:	e008      	b.n	80056d6 <USBD_CDC_Setup+0x1ae>
          break;
 80056c4:	bf00      	nop
      }
      break;
 80056c6:	e006      	b.n	80056d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80056c8:	6839      	ldr	r1, [r7, #0]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f001 fc89 	bl	8006fe2 <USBD_CtlError>
      ret = USBD_FAIL;
 80056d0:	2303      	movs	r3, #3
 80056d2:	75fb      	strb	r3, [r7, #23]
      break;
 80056d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80056d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	460b      	mov	r3, r1
 80056ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80056f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	32b0      	adds	r2, #176	; 0xb0
 80056fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005706:	2303      	movs	r3, #3
 8005708:	e065      	b.n	80057d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	32b0      	adds	r2, #176	; 0xb0
 8005714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005718:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800571a:	78fb      	ldrb	r3, [r7, #3]
 800571c:	f003 020f 	and.w	r2, r3, #15
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	3318      	adds	r3, #24
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d02f      	beq.n	8005794 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005734:	78fb      	ldrb	r3, [r7, #3]
 8005736:	f003 020f 	and.w	r2, r3, #15
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	3318      	adds	r3, #24
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	78fb      	ldrb	r3, [r7, #3]
 800574c:	f003 010f 	and.w	r1, r3, #15
 8005750:	68f8      	ldr	r0, [r7, #12]
 8005752:	460b      	mov	r3, r1
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	440b      	add	r3, r1
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	4403      	add	r3, r0
 800575c:	3348      	adds	r3, #72	; 0x48
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	fbb2 f1f3 	udiv	r1, r2, r3
 8005764:	fb01 f303 	mul.w	r3, r1, r3
 8005768:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800576a:	2b00      	cmp	r3, #0
 800576c:	d112      	bne.n	8005794 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	f003 020f 	and.w	r2, r3, #15
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	4613      	mov	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	440b      	add	r3, r1
 8005780:	3318      	adds	r3, #24
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005786:	78f9      	ldrb	r1, [r7, #3]
 8005788:	2300      	movs	r3, #0
 800578a:	2200      	movs	r2, #0
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f006 f816 	bl	800b7be <USBD_LL_Transmit>
 8005792:	e01f      	b.n	80057d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	33b0      	adds	r3, #176	; 0xb0
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d010      	beq.n	80057d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	33b0      	adds	r3, #176	; 0xb0
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4413      	add	r3, r2
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	68ba      	ldr	r2, [r7, #8]
 80057c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}

080057de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b084      	sub	sp, #16
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
 80057e6:	460b      	mov	r3, r1
 80057e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	32b0      	adds	r2, #176	; 0xb0
 80057f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	32b0      	adds	r2, #176	; 0xb0
 8005804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800580c:	2303      	movs	r3, #3
 800580e:	e01a      	b.n	8005846 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005810:	78fb      	ldrb	r3, [r7, #3]
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f006 f814 	bl	800b842 <USBD_LL_GetRxDataSize>
 800581a:	4602      	mov	r2, r0
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	33b0      	adds	r3, #176	; 0xb0
 800582c:	009b      	lsls	r3, r3, #2
 800582e:	4413      	add	r3, r2
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005840:	4611      	mov	r1, r2
 8005842:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b084      	sub	sp, #16
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	32b0      	adds	r2, #176	; 0xb0
 8005860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005864:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d101      	bne.n	8005870 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800586c:	2303      	movs	r3, #3
 800586e:	e025      	b.n	80058bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	33b0      	adds	r3, #176	; 0xb0
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01a      	beq.n	80058ba <USBD_CDC_EP0_RxReady+0x6c>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800588a:	2bff      	cmp	r3, #255	; 0xff
 800588c:	d015      	beq.n	80058ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	33b0      	adds	r3, #176	; 0xb0
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80058a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80058ae:	b292      	uxth	r2, r2
 80058b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	22ff      	movs	r2, #255	; 0xff
 80058b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b086      	sub	sp, #24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058cc:	2182      	movs	r1, #130	; 0x82
 80058ce:	4818      	ldr	r0, [pc, #96]	; (8005930 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058d0:	f000 fd4f 	bl	8006372 <USBD_GetEpDesc>
 80058d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058d6:	2101      	movs	r1, #1
 80058d8:	4815      	ldr	r0, [pc, #84]	; (8005930 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058da:	f000 fd4a 	bl	8006372 <USBD_GetEpDesc>
 80058de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80058e0:	2181      	movs	r1, #129	; 0x81
 80058e2:	4813      	ldr	r0, [pc, #76]	; (8005930 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80058e4:	f000 fd45 	bl	8006372 <USBD_GetEpDesc>
 80058e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2210      	movs	r2, #16
 80058f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d006      	beq.n	800590a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	2200      	movs	r2, #0
 8005900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005904:	711a      	strb	r2, [r3, #4]
 8005906:	2200      	movs	r2, #0
 8005908:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d006      	beq.n	800591e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005918:	711a      	strb	r2, [r3, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2243      	movs	r2, #67	; 0x43
 8005922:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005924:	4b02      	ldr	r3, [pc, #8]	; (8005930 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000050 	.word	0x20000050

08005934 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800593c:	2182      	movs	r1, #130	; 0x82
 800593e:	4818      	ldr	r0, [pc, #96]	; (80059a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005940:	f000 fd17 	bl	8006372 <USBD_GetEpDesc>
 8005944:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005946:	2101      	movs	r1, #1
 8005948:	4815      	ldr	r0, [pc, #84]	; (80059a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800594a:	f000 fd12 	bl	8006372 <USBD_GetEpDesc>
 800594e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005950:	2181      	movs	r1, #129	; 0x81
 8005952:	4813      	ldr	r0, [pc, #76]	; (80059a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005954:	f000 fd0d 	bl	8006372 <USBD_GetEpDesc>
 8005958:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	2210      	movs	r2, #16
 8005964:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d006      	beq.n	800597a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2200      	movs	r2, #0
 8005970:	711a      	strb	r2, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	f042 0202 	orr.w	r2, r2, #2
 8005978:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d006      	beq.n	800598e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	711a      	strb	r2, [r3, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f042 0202 	orr.w	r2, r2, #2
 800598c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2243      	movs	r2, #67	; 0x43
 8005992:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005994:	4b02      	ldr	r3, [pc, #8]	; (80059a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000050 	.word	0x20000050

080059a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059ac:	2182      	movs	r1, #130	; 0x82
 80059ae:	4818      	ldr	r0, [pc, #96]	; (8005a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059b0:	f000 fcdf 	bl	8006372 <USBD_GetEpDesc>
 80059b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059b6:	2101      	movs	r1, #1
 80059b8:	4815      	ldr	r0, [pc, #84]	; (8005a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059ba:	f000 fcda 	bl	8006372 <USBD_GetEpDesc>
 80059be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059c0:	2181      	movs	r1, #129	; 0x81
 80059c2:	4813      	ldr	r0, [pc, #76]	; (8005a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80059c4:	f000 fcd5 	bl	8006372 <USBD_GetEpDesc>
 80059c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	2210      	movs	r2, #16
 80059d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d006      	beq.n	80059ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2200      	movs	r2, #0
 80059e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059e4:	711a      	strb	r2, [r3, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d006      	beq.n	80059fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f8:	711a      	strb	r2, [r3, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2243      	movs	r2, #67	; 0x43
 8005a02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a04:	4b02      	ldr	r3, [pc, #8]	; (8005a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	20000050 	.word	0x20000050

08005a14 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	220a      	movs	r2, #10
 8005a20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005a22:	4b03      	ldr	r3, [pc, #12]	; (8005a30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr
 8005a30:	2000000c 	.word	0x2000000c

08005a34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e009      	b.n	8005a5c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	33b0      	adds	r3, #176	; 0xb0
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	32b0      	adds	r2, #176	; 0xb0
 8005a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a82:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e008      	b.n	8005aa0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	687a      	ldr	r2, [r7, #4]
 8005a9a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	371c      	adds	r7, #28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	32b0      	adds	r2, #176	; 0xb0
 8005ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ac4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e004      	b.n	8005ada <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005ad8:	2300      	movs	r3, #0
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	3714      	adds	r7, #20
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	32b0      	adds	r2, #176	; 0xb0
 8005afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005b00:	2301      	movs	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	32b0      	adds	r2, #176	; 0xb0
 8005b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e025      	b.n	8005b66 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d11f      	bne.n	8005b64 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005b2c:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <USBD_CDC_TransmitPacket+0x88>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f003 020f 	and.w	r2, r3, #15
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4403      	add	r3, r0
 8005b46:	3318      	adds	r3, #24
 8005b48:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005b4a:	4b09      	ldr	r3, [pc, #36]	; (8005b70 <USBD_CDC_TransmitPacket+0x88>)
 8005b4c:	7819      	ldrb	r1, [r3, #0]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f005 fe2f 	bl	800b7be <USBD_LL_Transmit>

    ret = USBD_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000093 	.word	0x20000093

08005b74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	32b0      	adds	r2, #176	; 0xb0
 8005b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	32b0      	adds	r2, #176	; 0xb0
 8005b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e018      	b.n	8005bd4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	7c1b      	ldrb	r3, [r3, #16]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10a      	bne.n	8005bc0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005baa:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <USBD_CDC_ReceivePacket+0x68>)
 8005bac:	7819      	ldrb	r1, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f005 fe21 	bl	800b800 <USBD_LL_PrepareReceive>
 8005bbe:	e008      	b.n	8005bd2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <USBD_CDC_ReceivePacket+0x68>)
 8005bc2:	7819      	ldrb	r1, [r3, #0]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bca:	2340      	movs	r3, #64	; 0x40
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f005 fe17 	bl	800b800 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20000094 	.word	0x20000094

08005be0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	4613      	mov	r3, r2
 8005bec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d101      	bne.n	8005bf8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e01f      	b.n	8005c38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	79fa      	ldrb	r2, [r7, #7]
 8005c2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f005 fc91 	bl	800b554 <USBD_LL_Init>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e025      	b.n	8005ca4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	32ae      	adds	r2, #174	; 0xae
 8005c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00f      	beq.n	8005c94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	32ae      	adds	r2, #174	; 0xae
 8005c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	f107 020e 	add.w	r2, r7, #14
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4798      	blx	r3
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f005 fc99 	bl	800b5ec <USBD_LL_Start>
 8005cba:	4603      	mov	r3, r0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3708      	adds	r7, #8
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ccc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d009      	beq.n	8005d08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	78fa      	ldrb	r2, [r7, #3]
 8005cfe:	4611      	mov	r1, r2
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	4798      	blx	r3
 8005d04:	4603      	mov	r3, r0
 8005d06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b084      	sub	sp, #16
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	460b      	mov	r3, r1
 8005d1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	78fa      	ldrb	r2, [r7, #3]
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	4798      	blx	r3
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d56:	6839      	ldr	r1, [r7, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 f908 	bl	8006f6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d01a      	beq.n	8005db8 <USBD_LL_SetupStage+0x72>
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	d822      	bhi.n	8005dcc <USBD_LL_SetupStage+0x86>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <USBD_LL_SetupStage+0x4a>
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d00a      	beq.n	8005da4 <USBD_LL_SetupStage+0x5e>
 8005d8e:	e01d      	b.n	8005dcc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fb5f 	bl	800645c <USBD_StdDevReq>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	73fb      	strb	r3, [r7, #15]
      break;
 8005da2:	e020      	b.n	8005de6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fbc7 	bl	8006540 <USBD_StdItfReq>
 8005db2:	4603      	mov	r3, r0
 8005db4:	73fb      	strb	r3, [r7, #15]
      break;
 8005db6:	e016      	b.n	8005de6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 fc29 	bl	8006618 <USBD_StdEPReq>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005dca:	e00c      	b.n	8005de6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005dd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	4619      	mov	r1, r3
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f005 fc66 	bl	800b6ac <USBD_LL_StallEP>
 8005de0:	4603      	mov	r3, r0
 8005de2:	73fb      	strb	r3, [r7, #15]
      break;
 8005de4:	bf00      	nop
  }

  return ret;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005e02:	7afb      	ldrb	r3, [r7, #11]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d16e      	bne.n	8005ee6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005e0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	f040 8098 	bne.w	8005f4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	689a      	ldr	r2, [r3, #8]
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d913      	bls.n	8005e50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	1ad2      	subs	r2, r2, r3
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	68da      	ldr	r2, [r3, #12]
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	bf28      	it	cs
 8005e42:	4613      	movcs	r3, r2
 8005e44:	461a      	mov	r2, r3
 8005e46:	6879      	ldr	r1, [r7, #4]
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	f001 f984 	bl	8007156 <USBD_CtlContinueRx>
 8005e4e:	e07d      	b.n	8005f4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e56:	f003 031f 	and.w	r3, r3, #31
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d014      	beq.n	8005e88 <USBD_LL_DataOutStage+0x98>
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d81d      	bhi.n	8005e9e <USBD_LL_DataOutStage+0xae>
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <USBD_LL_DataOutStage+0x7c>
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d003      	beq.n	8005e72 <USBD_LL_DataOutStage+0x82>
 8005e6a:	e018      	b.n	8005e9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	75bb      	strb	r3, [r7, #22]
            break;
 8005e70:	e018      	b.n	8005ea4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 fa5e 	bl	800633e <USBD_CoreFindIF>
 8005e82:	4603      	mov	r3, r0
 8005e84:	75bb      	strb	r3, [r7, #22]
            break;
 8005e86:	e00d      	b.n	8005ea4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	4619      	mov	r1, r3
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 fa60 	bl	8006358 <USBD_CoreFindEP>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	75bb      	strb	r3, [r7, #22]
            break;
 8005e9c:	e002      	b.n	8005ea4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	75bb      	strb	r3, [r7, #22]
            break;
 8005ea2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005ea4:	7dbb      	ldrb	r3, [r7, #22]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d119      	bne.n	8005ede <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d113      	bne.n	8005ede <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005eb6:	7dba      	ldrb	r2, [r7, #22]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	32ae      	adds	r2, #174	; 0xae
 8005ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00b      	beq.n	8005ede <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005ec6:	7dba      	ldrb	r2, [r7, #22]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005ece:	7dba      	ldrb	r2, [r7, #22]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	32ae      	adds	r2, #174	; 0xae
 8005ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f001 f94a 	bl	8007178 <USBD_CtlSendStatus>
 8005ee4:	e032      	b.n	8005f4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005ee6:	7afb      	ldrb	r3, [r7, #11]
 8005ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	4619      	mov	r1, r3
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 fa31 	bl	8006358 <USBD_CoreFindEP>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005efa:	7dbb      	ldrb	r3, [r7, #22]
 8005efc:	2bff      	cmp	r3, #255	; 0xff
 8005efe:	d025      	beq.n	8005f4c <USBD_LL_DataOutStage+0x15c>
 8005f00:	7dbb      	ldrb	r3, [r7, #22]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d122      	bne.n	8005f4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b03      	cmp	r3, #3
 8005f10:	d117      	bne.n	8005f42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005f12:	7dba      	ldrb	r2, [r7, #22]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	32ae      	adds	r2, #174	; 0xae
 8005f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00f      	beq.n	8005f42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005f22:	7dba      	ldrb	r2, [r7, #22]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005f2a:	7dba      	ldrb	r2, [r7, #22]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	32ae      	adds	r2, #174	; 0xae
 8005f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f34:	699b      	ldr	r3, [r3, #24]
 8005f36:	7afa      	ldrb	r2, [r7, #11]
 8005f38:	4611      	mov	r1, r2
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	4798      	blx	r3
 8005f3e:	4603      	mov	r3, r0
 8005f40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005f42:	7dfb      	ldrb	r3, [r7, #23]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005f48:	7dfb      	ldrb	r3, [r7, #23]
 8005f4a:	e000      	b.n	8005f4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3718      	adds	r7, #24
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}

08005f56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b086      	sub	sp, #24
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	460b      	mov	r3, r1
 8005f60:	607a      	str	r2, [r7, #4]
 8005f62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005f64:	7afb      	ldrb	r3, [r7, #11]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d16f      	bne.n	800604a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3314      	adds	r3, #20
 8005f6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d15a      	bne.n	8006030 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d914      	bls.n	8005fb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	689a      	ldr	r2, [r3, #8]
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	1ad2      	subs	r2, r2, r3
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6879      	ldr	r1, [r7, #4]
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f001 f8ac 	bl	80070fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f005 fc29 	bl	800b800 <USBD_LL_PrepareReceive>
 8005fae:	e03f      	b.n	8006030 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	68da      	ldr	r2, [r3, #12]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d11c      	bne.n	8005ff6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d316      	bcc.n	8005ff6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d20f      	bcs.n	8005ff6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	2100      	movs	r1, #0
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f001 f88d 	bl	80070fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005fe8:	2300      	movs	r3, #0
 8005fea:	2200      	movs	r2, #0
 8005fec:	2100      	movs	r1, #0
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f005 fc06 	bl	800b800 <USBD_LL_PrepareReceive>
 8005ff4:	e01c      	b.n	8006030 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b03      	cmp	r3, #3
 8006000:	d10f      	bne.n	8006022 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d009      	beq.n	8006022 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006022:	2180      	movs	r1, #128	; 0x80
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f005 fb41 	bl	800b6ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f001 f8b7 	bl	800719e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d03a      	beq.n	80060b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f7ff fe42 	bl	8005cc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006048:	e032      	b.n	80060b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800604a:	7afb      	ldrb	r3, [r7, #11]
 800604c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006050:	b2db      	uxtb	r3, r3
 8006052:	4619      	mov	r1, r3
 8006054:	68f8      	ldr	r0, [r7, #12]
 8006056:	f000 f97f 	bl	8006358 <USBD_CoreFindEP>
 800605a:	4603      	mov	r3, r0
 800605c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	2bff      	cmp	r3, #255	; 0xff
 8006062:	d025      	beq.n	80060b0 <USBD_LL_DataInStage+0x15a>
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d122      	bne.n	80060b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b03      	cmp	r3, #3
 8006074:	d11c      	bne.n	80060b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006076:	7dfa      	ldrb	r2, [r7, #23]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	32ae      	adds	r2, #174	; 0xae
 800607c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d014      	beq.n	80060b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006086:	7dfa      	ldrb	r2, [r7, #23]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800608e:	7dfa      	ldrb	r2, [r7, #23]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	32ae      	adds	r2, #174	; 0xae
 8006094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	7afa      	ldrb	r2, [r7, #11]
 800609c:	4611      	mov	r1, r2
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	4798      	blx	r3
 80060a2:	4603      	mov	r3, r0
 80060a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80060a6:	7dbb      	ldrb	r3, [r7, #22]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80060ac:	7dbb      	ldrb	r3, [r7, #22]
 80060ae:	e000      	b.n	80060b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b084      	sub	sp, #16
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d014      	beq.n	8006120 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00e      	beq.n	8006120 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	6852      	ldr	r2, [r2, #4]
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	4611      	mov	r1, r2
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	4798      	blx	r3
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800611c:	2303      	movs	r3, #3
 800611e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006120:	2340      	movs	r3, #64	; 0x40
 8006122:	2200      	movs	r2, #0
 8006124:	2100      	movs	r1, #0
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f005 fa7b 	bl	800b622 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2240      	movs	r2, #64	; 0x40
 8006138:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800613c:	2340      	movs	r3, #64	; 0x40
 800613e:	2200      	movs	r2, #0
 8006140:	2180      	movs	r1, #128	; 0x80
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f005 fa6d 	bl	800b622 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2240      	movs	r2, #64	; 0x40
 8006152:	621a      	str	r2, [r3, #32]

  return ret;
 8006154:	7bfb      	ldrb	r3, [r7, #15]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800615e:	b480      	push	{r7}
 8006160:	b083      	sub	sp, #12
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	78fa      	ldrb	r2, [r7, #3]
 800616e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800618c:	b2da      	uxtb	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2204      	movs	r2, #4
 8006198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	2b04      	cmp	r3, #4
 80061bc:	d106      	bne.n	80061cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80061c4:	b2da      	uxtb	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b082      	sub	sp, #8
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b03      	cmp	r3, #3
 80061ec:	d110      	bne.n	8006210 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00b      	beq.n	8006210 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d005      	beq.n	8006210 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3708      	adds	r7, #8
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b082      	sub	sp, #8
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	460b      	mov	r3, r1
 8006224:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	32ae      	adds	r2, #174	; 0xae
 8006230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006238:	2303      	movs	r3, #3
 800623a:	e01c      	b.n	8006276 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b03      	cmp	r3, #3
 8006246:	d115      	bne.n	8006274 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	32ae      	adds	r2, #174	; 0xae
 8006252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	32ae      	adds	r2, #174	; 0xae
 8006266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626a:	6a1b      	ldr	r3, [r3, #32]
 800626c:	78fa      	ldrb	r2, [r7, #3]
 800626e:	4611      	mov	r1, r2
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	460b      	mov	r3, r1
 8006288:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	32ae      	adds	r2, #174	; 0xae
 8006294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800629c:	2303      	movs	r3, #3
 800629e:	e01c      	b.n	80062da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d115      	bne.n	80062d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	32ae      	adds	r2, #174	; 0xae
 80062b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00b      	beq.n	80062d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	32ae      	adds	r2, #174	; 0xae
 80062ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	78fa      	ldrb	r2, [r7, #3]
 80062d2:	4611      	mov	r1, r2
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00e      	beq.n	8006334 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6852      	ldr	r2, [r2, #4]
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	4611      	mov	r1, r2
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	4798      	blx	r3
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006330:	2303      	movs	r3, #3
 8006332:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006334:	7bfb      	ldrb	r3, [r7, #15]
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	460b      	mov	r3, r1
 8006348:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800634a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006364:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b086      	sub	sp, #24
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
 800637a:	460b      	mov	r3, r1
 800637c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006386:	2300      	movs	r3, #0
 8006388:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	885b      	ldrh	r3, [r3, #2]
 800638e:	b29a      	uxth	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	b29b      	uxth	r3, r3
 8006396:	429a      	cmp	r2, r3
 8006398:	d920      	bls.n	80063dc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80063a2:	e013      	b.n	80063cc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80063a4:	f107 030a 	add.w	r3, r7, #10
 80063a8:	4619      	mov	r1, r3
 80063aa:	6978      	ldr	r0, [r7, #20]
 80063ac:	f000 f81b 	bl	80063e6 <USBD_GetNextDesc>
 80063b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	785b      	ldrb	r3, [r3, #1]
 80063b6:	2b05      	cmp	r3, #5
 80063b8:	d108      	bne.n	80063cc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	789b      	ldrb	r3, [r3, #2]
 80063c2:	78fa      	ldrb	r2, [r7, #3]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d008      	beq.n	80063da <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80063c8:	2300      	movs	r3, #0
 80063ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	885b      	ldrh	r3, [r3, #2]
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	897b      	ldrh	r3, [r7, #10]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d8e5      	bhi.n	80063a4 <USBD_GetEpDesc+0x32>
 80063d8:	e000      	b.n	80063dc <USBD_GetEpDesc+0x6a>
          break;
 80063da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80063dc:	693b      	ldr	r3, [r7, #16]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	881a      	ldrh	r2, [r3, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	4413      	add	r3, r2
 8006400:	b29a      	uxth	r2, r3
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	461a      	mov	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4413      	add	r3, r2
 8006410:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006412:	68fb      	ldr	r3, [r7, #12]
}
 8006414:	4618      	mov	r0, r3
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	3301      	adds	r3, #1
 8006436:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800643e:	8a3b      	ldrh	r3, [r7, #16]
 8006440:	021b      	lsls	r3, r3, #8
 8006442:	b21a      	sxth	r2, r3
 8006444:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006448:	4313      	orrs	r3, r2
 800644a:	b21b      	sxth	r3, r3
 800644c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800644e:	89fb      	ldrh	r3, [r7, #14]
}
 8006450:	4618      	mov	r0, r3
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006472:	2b40      	cmp	r3, #64	; 0x40
 8006474:	d005      	beq.n	8006482 <USBD_StdDevReq+0x26>
 8006476:	2b40      	cmp	r3, #64	; 0x40
 8006478:	d857      	bhi.n	800652a <USBD_StdDevReq+0xce>
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00f      	beq.n	800649e <USBD_StdDevReq+0x42>
 800647e:	2b20      	cmp	r3, #32
 8006480:	d153      	bne.n	800652a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	32ae      	adds	r2, #174	; 0xae
 800648c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	6839      	ldr	r1, [r7, #0]
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	4798      	blx	r3
 8006498:	4603      	mov	r3, r0
 800649a:	73fb      	strb	r3, [r7, #15]
      break;
 800649c:	e04a      	b.n	8006534 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	785b      	ldrb	r3, [r3, #1]
 80064a2:	2b09      	cmp	r3, #9
 80064a4:	d83b      	bhi.n	800651e <USBD_StdDevReq+0xc2>
 80064a6:	a201      	add	r2, pc, #4	; (adr r2, 80064ac <USBD_StdDevReq+0x50>)
 80064a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ac:	08006501 	.word	0x08006501
 80064b0:	08006515 	.word	0x08006515
 80064b4:	0800651f 	.word	0x0800651f
 80064b8:	0800650b 	.word	0x0800650b
 80064bc:	0800651f 	.word	0x0800651f
 80064c0:	080064df 	.word	0x080064df
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	0800651f 	.word	0x0800651f
 80064cc:	080064f7 	.word	0x080064f7
 80064d0:	080064e9 	.word	0x080064e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fa3c 	bl	8006954 <USBD_GetDescriptor>
          break;
 80064dc:	e024      	b.n	8006528 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 fba1 	bl	8006c28 <USBD_SetAddress>
          break;
 80064e6:	e01f      	b.n	8006528 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fbe0 	bl	8006cb0 <USBD_SetConfig>
 80064f0:	4603      	mov	r3, r0
 80064f2:	73fb      	strb	r3, [r7, #15]
          break;
 80064f4:	e018      	b.n	8006528 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fc83 	bl	8006e04 <USBD_GetConfig>
          break;
 80064fe:	e013      	b.n	8006528 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006500:	6839      	ldr	r1, [r7, #0]
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 fcb4 	bl	8006e70 <USBD_GetStatus>
          break;
 8006508:	e00e      	b.n	8006528 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800650a:	6839      	ldr	r1, [r7, #0]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 fce3 	bl	8006ed8 <USBD_SetFeature>
          break;
 8006512:	e009      	b.n	8006528 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006514:	6839      	ldr	r1, [r7, #0]
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 fd07 	bl	8006f2a <USBD_ClrFeature>
          break;
 800651c:	e004      	b.n	8006528 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fd5e 	bl	8006fe2 <USBD_CtlError>
          break;
 8006526:	bf00      	nop
      }
      break;
 8006528:	e004      	b.n	8006534 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	6878      	ldr	r0, [r7, #4]
 800652e:	f000 fd58 	bl	8006fe2 <USBD_CtlError>
      break;
 8006532:	bf00      	nop
  }

  return ret;
 8006534:	7bfb      	ldrb	r3, [r7, #15]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop

08006540 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006556:	2b40      	cmp	r3, #64	; 0x40
 8006558:	d005      	beq.n	8006566 <USBD_StdItfReq+0x26>
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d852      	bhi.n	8006604 <USBD_StdItfReq+0xc4>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d001      	beq.n	8006566 <USBD_StdItfReq+0x26>
 8006562:	2b20      	cmp	r3, #32
 8006564:	d14e      	bne.n	8006604 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800656c:	b2db      	uxtb	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	2b02      	cmp	r3, #2
 8006572:	d840      	bhi.n	80065f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	889b      	ldrh	r3, [r3, #4]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b01      	cmp	r3, #1
 800657c:	d836      	bhi.n	80065ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	889b      	ldrh	r3, [r3, #4]
 8006582:	b2db      	uxtb	r3, r3
 8006584:	4619      	mov	r1, r3
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fed9 	bl	800633e <USBD_CoreFindIF>
 800658c:	4603      	mov	r3, r0
 800658e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	2bff      	cmp	r3, #255	; 0xff
 8006594:	d01d      	beq.n	80065d2 <USBD_StdItfReq+0x92>
 8006596:	7bbb      	ldrb	r3, [r7, #14]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d11a      	bne.n	80065d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800659c:	7bba      	ldrb	r2, [r7, #14]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	32ae      	adds	r2, #174	; 0xae
 80065a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00f      	beq.n	80065cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80065ac:	7bba      	ldrb	r2, [r7, #14]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80065b4:	7bba      	ldrb	r2, [r7, #14]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	32ae      	adds	r2, #174	; 0xae
 80065ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	6839      	ldr	r1, [r7, #0]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	4798      	blx	r3
 80065c6:	4603      	mov	r3, r0
 80065c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80065ca:	e004      	b.n	80065d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80065cc:	2303      	movs	r3, #3
 80065ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80065d0:	e001      	b.n	80065d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80065d2:	2303      	movs	r3, #3
 80065d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	88db      	ldrh	r3, [r3, #6]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d110      	bne.n	8006600 <USBD_StdItfReq+0xc0>
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d10d      	bne.n	8006600 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fdc7 	bl	8007178 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80065ea:	e009      	b.n	8006600 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80065ec:	6839      	ldr	r1, [r7, #0]
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fcf7 	bl	8006fe2 <USBD_CtlError>
          break;
 80065f4:	e004      	b.n	8006600 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80065f6:	6839      	ldr	r1, [r7, #0]
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 fcf2 	bl	8006fe2 <USBD_CtlError>
          break;
 80065fe:	e000      	b.n	8006602 <USBD_StdItfReq+0xc2>
          break;
 8006600:	bf00      	nop
      }
      break;
 8006602:	e004      	b.n	800660e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fceb 	bl	8006fe2 <USBD_CtlError>
      break;
 800660c:	bf00      	nop
  }

  return ret;
 800660e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	889b      	ldrh	r3, [r3, #4]
 800662a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006634:	2b40      	cmp	r3, #64	; 0x40
 8006636:	d007      	beq.n	8006648 <USBD_StdEPReq+0x30>
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	f200 817f 	bhi.w	800693c <USBD_StdEPReq+0x324>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d02a      	beq.n	8006698 <USBD_StdEPReq+0x80>
 8006642:	2b20      	cmp	r3, #32
 8006644:	f040 817a 	bne.w	800693c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff fe83 	bl	8006358 <USBD_CoreFindEP>
 8006652:	4603      	mov	r3, r0
 8006654:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006656:	7b7b      	ldrb	r3, [r7, #13]
 8006658:	2bff      	cmp	r3, #255	; 0xff
 800665a:	f000 8174 	beq.w	8006946 <USBD_StdEPReq+0x32e>
 800665e:	7b7b      	ldrb	r3, [r7, #13]
 8006660:	2b00      	cmp	r3, #0
 8006662:	f040 8170 	bne.w	8006946 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006666:	7b7a      	ldrb	r2, [r7, #13]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800666e:	7b7a      	ldrb	r2, [r7, #13]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	32ae      	adds	r2, #174	; 0xae
 8006674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	f000 8163 	beq.w	8006946 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006680:	7b7a      	ldrb	r2, [r7, #13]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	32ae      	adds	r2, #174	; 0xae
 8006686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	6839      	ldr	r1, [r7, #0]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	4798      	blx	r3
 8006692:	4603      	mov	r3, r0
 8006694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006696:	e156      	b.n	8006946 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b03      	cmp	r3, #3
 800669e:	d008      	beq.n	80066b2 <USBD_StdEPReq+0x9a>
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	f300 8145 	bgt.w	8006930 <USBD_StdEPReq+0x318>
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 809b 	beq.w	80067e2 <USBD_StdEPReq+0x1ca>
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d03c      	beq.n	800672a <USBD_StdEPReq+0x112>
 80066b0:	e13e      	b.n	8006930 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d002      	beq.n	80066c4 <USBD_StdEPReq+0xac>
 80066be:	2b03      	cmp	r3, #3
 80066c0:	d016      	beq.n	80066f0 <USBD_StdEPReq+0xd8>
 80066c2:	e02c      	b.n	800671e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00d      	beq.n	80066e6 <USBD_StdEPReq+0xce>
 80066ca:	7bbb      	ldrb	r3, [r7, #14]
 80066cc:	2b80      	cmp	r3, #128	; 0x80
 80066ce:	d00a      	beq.n	80066e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066d0:	7bbb      	ldrb	r3, [r7, #14]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f004 ffe9 	bl	800b6ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066da:	2180      	movs	r1, #128	; 0x80
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f004 ffe5 	bl	800b6ac <USBD_LL_StallEP>
 80066e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066e4:	e020      	b.n	8006728 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 fc7a 	bl	8006fe2 <USBD_CtlError>
              break;
 80066ee:	e01b      	b.n	8006728 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	885b      	ldrh	r3, [r3, #2]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10e      	bne.n	8006716 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00b      	beq.n	8006716 <USBD_StdEPReq+0xfe>
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	2b80      	cmp	r3, #128	; 0x80
 8006702:	d008      	beq.n	8006716 <USBD_StdEPReq+0xfe>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	88db      	ldrh	r3, [r3, #6]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d104      	bne.n	8006716 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800670c:	7bbb      	ldrb	r3, [r7, #14]
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f004 ffcb 	bl	800b6ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fd2e 	bl	8007178 <USBD_CtlSendStatus>

              break;
 800671c:	e004      	b.n	8006728 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fc5e 	bl	8006fe2 <USBD_CtlError>
              break;
 8006726:	bf00      	nop
          }
          break;
 8006728:	e107      	b.n	800693a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b02      	cmp	r3, #2
 8006734:	d002      	beq.n	800673c <USBD_StdEPReq+0x124>
 8006736:	2b03      	cmp	r3, #3
 8006738:	d016      	beq.n	8006768 <USBD_StdEPReq+0x150>
 800673a:	e04b      	b.n	80067d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800673c:	7bbb      	ldrb	r3, [r7, #14]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00d      	beq.n	800675e <USBD_StdEPReq+0x146>
 8006742:	7bbb      	ldrb	r3, [r7, #14]
 8006744:	2b80      	cmp	r3, #128	; 0x80
 8006746:	d00a      	beq.n	800675e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f004 ffad 	bl	800b6ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006752:	2180      	movs	r1, #128	; 0x80
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f004 ffa9 	bl	800b6ac <USBD_LL_StallEP>
 800675a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800675c:	e040      	b.n	80067e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800675e:	6839      	ldr	r1, [r7, #0]
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fc3e 	bl	8006fe2 <USBD_CtlError>
              break;
 8006766:	e03b      	b.n	80067e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	885b      	ldrh	r3, [r3, #2]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d136      	bne.n	80067de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006770:	7bbb      	ldrb	r3, [r7, #14]
 8006772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006776:	2b00      	cmp	r3, #0
 8006778:	d004      	beq.n	8006784 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800677a:	7bbb      	ldrb	r3, [r7, #14]
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f004 ffb3 	bl	800b6ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fcf7 	bl	8007178 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	4619      	mov	r1, r3
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f7ff fde2 	bl	8006358 <USBD_CoreFindEP>
 8006794:	4603      	mov	r3, r0
 8006796:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006798:	7b7b      	ldrb	r3, [r7, #13]
 800679a:	2bff      	cmp	r3, #255	; 0xff
 800679c:	d01f      	beq.n	80067de <USBD_StdEPReq+0x1c6>
 800679e:	7b7b      	ldrb	r3, [r7, #13]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d11c      	bne.n	80067de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80067a4:	7b7a      	ldrb	r2, [r7, #13]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80067ac:	7b7a      	ldrb	r2, [r7, #13]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	32ae      	adds	r2, #174	; 0xae
 80067b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d010      	beq.n	80067de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067bc:	7b7a      	ldrb	r2, [r7, #13]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	32ae      	adds	r2, #174	; 0xae
 80067c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	4798      	blx	r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80067d2:	e004      	b.n	80067de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 fc03 	bl	8006fe2 <USBD_CtlError>
              break;
 80067dc:	e000      	b.n	80067e0 <USBD_StdEPReq+0x1c8>
              break;
 80067de:	bf00      	nop
          }
          break;
 80067e0:	e0ab      	b.n	800693a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d002      	beq.n	80067f4 <USBD_StdEPReq+0x1dc>
 80067ee:	2b03      	cmp	r3, #3
 80067f0:	d032      	beq.n	8006858 <USBD_StdEPReq+0x240>
 80067f2:	e097      	b.n	8006924 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067f4:	7bbb      	ldrb	r3, [r7, #14]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d007      	beq.n	800680a <USBD_StdEPReq+0x1f2>
 80067fa:	7bbb      	ldrb	r3, [r7, #14]
 80067fc:	2b80      	cmp	r3, #128	; 0x80
 80067fe:	d004      	beq.n	800680a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fbed 	bl	8006fe2 <USBD_CtlError>
                break;
 8006808:	e091      	b.n	800692e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800680a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800680e:	2b00      	cmp	r3, #0
 8006810:	da0b      	bge.n	800682a <USBD_StdEPReq+0x212>
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006818:	4613      	mov	r3, r2
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	3310      	adds	r3, #16
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	4413      	add	r3, r2
 8006826:	3304      	adds	r3, #4
 8006828:	e00b      	b.n	8006842 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800682a:	7bbb      	ldrb	r3, [r7, #14]
 800682c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	4413      	add	r3, r2
 8006840:	3304      	adds	r3, #4
 8006842:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2202      	movs	r2, #2
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fc37 	bl	80070c4 <USBD_CtlSendData>
              break;
 8006856:	e06a      	b.n	800692e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006858:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800685c:	2b00      	cmp	r3, #0
 800685e:	da11      	bge.n	8006884 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	f003 020f 	and.w	r2, r3, #15
 8006866:	6879      	ldr	r1, [r7, #4]
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	440b      	add	r3, r1
 8006872:	3324      	adds	r3, #36	; 0x24
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d117      	bne.n	80068aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fbb0 	bl	8006fe2 <USBD_CtlError>
                  break;
 8006882:	e054      	b.n	800692e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006884:	7bbb      	ldrb	r3, [r7, #14]
 8006886:	f003 020f 	and.w	r2, r3, #15
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	440b      	add	r3, r1
 8006896:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800689a:	881b      	ldrh	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d104      	bne.n	80068aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fb9d 	bl	8006fe2 <USBD_CtlError>
                  break;
 80068a8:	e041      	b.n	800692e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	da0b      	bge.n	80068ca <USBD_StdEPReq+0x2b2>
 80068b2:	7bbb      	ldrb	r3, [r7, #14]
 80068b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80068b8:	4613      	mov	r3, r2
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	3310      	adds	r3, #16
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	4413      	add	r3, r2
 80068c6:	3304      	adds	r3, #4
 80068c8:	e00b      	b.n	80068e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80068ca:	7bbb      	ldrb	r3, [r7, #14]
 80068cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80068d0:	4613      	mov	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	4413      	add	r3, r2
 80068e0:	3304      	adds	r3, #4
 80068e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80068e4:	7bbb      	ldrb	r3, [r7, #14]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <USBD_StdEPReq+0x2d8>
 80068ea:	7bbb      	ldrb	r3, [r7, #14]
 80068ec:	2b80      	cmp	r3, #128	; 0x80
 80068ee:	d103      	bne.n	80068f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
 80068f6:	e00e      	b.n	8006916 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f004 ff13 	bl	800b728 <USBD_LL_IsStallEP>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	2201      	movs	r2, #1
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	e002      	b.n	8006916 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2200      	movs	r2, #0
 8006914:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2202      	movs	r2, #2
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 fbd1 	bl	80070c4 <USBD_CtlSendData>
              break;
 8006922:	e004      	b.n	800692e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fb5b 	bl	8006fe2 <USBD_CtlError>
              break;
 800692c:	bf00      	nop
          }
          break;
 800692e:	e004      	b.n	800693a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fb55 	bl	8006fe2 <USBD_CtlError>
          break;
 8006938:	bf00      	nop
      }
      break;
 800693a:	e005      	b.n	8006948 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fb4f 	bl	8006fe2 <USBD_CtlError>
      break;
 8006944:	e000      	b.n	8006948 <USBD_StdEPReq+0x330>
      break;
 8006946:	bf00      	nop
  }

  return ret;
 8006948:	7bfb      	ldrb	r3, [r7, #15]
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
	...

08006954 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	885b      	ldrh	r3, [r3, #2]
 800696e:	0a1b      	lsrs	r3, r3, #8
 8006970:	b29b      	uxth	r3, r3
 8006972:	3b01      	subs	r3, #1
 8006974:	2b06      	cmp	r3, #6
 8006976:	f200 8128 	bhi.w	8006bca <USBD_GetDescriptor+0x276>
 800697a:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <USBD_GetDescriptor+0x2c>)
 800697c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006980:	0800699d 	.word	0x0800699d
 8006984:	080069b5 	.word	0x080069b5
 8006988:	080069f5 	.word	0x080069f5
 800698c:	08006bcb 	.word	0x08006bcb
 8006990:	08006bcb 	.word	0x08006bcb
 8006994:	08006b6b 	.word	0x08006b6b
 8006998:	08006b97 	.word	0x08006b97
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	7c12      	ldrb	r2, [r2, #16]
 80069a8:	f107 0108 	add.w	r1, r7, #8
 80069ac:	4610      	mov	r0, r2
 80069ae:	4798      	blx	r3
 80069b0:	60f8      	str	r0, [r7, #12]
      break;
 80069b2:	e112      	b.n	8006bda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	7c1b      	ldrb	r3, [r3, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10d      	bne.n	80069d8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	f107 0208 	add.w	r2, r7, #8
 80069c8:	4610      	mov	r0, r2
 80069ca:	4798      	blx	r3
 80069cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3301      	adds	r3, #1
 80069d2:	2202      	movs	r2, #2
 80069d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80069d6:	e100      	b.n	8006bda <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e0:	f107 0208 	add.w	r2, r7, #8
 80069e4:	4610      	mov	r0, r2
 80069e6:	4798      	blx	r3
 80069e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3301      	adds	r3, #1
 80069ee:	2202      	movs	r2, #2
 80069f0:	701a      	strb	r2, [r3, #0]
      break;
 80069f2:	e0f2      	b.n	8006bda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	885b      	ldrh	r3, [r3, #2]
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b05      	cmp	r3, #5
 80069fc:	f200 80ac 	bhi.w	8006b58 <USBD_GetDescriptor+0x204>
 8006a00:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <USBD_GetDescriptor+0xb4>)
 8006a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a06:	bf00      	nop
 8006a08:	08006a21 	.word	0x08006a21
 8006a0c:	08006a55 	.word	0x08006a55
 8006a10:	08006a89 	.word	0x08006a89
 8006a14:	08006abd 	.word	0x08006abd
 8006a18:	08006af1 	.word	0x08006af1
 8006a1c:	08006b25 	.word	0x08006b25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00b      	beq.n	8006a44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	7c12      	ldrb	r2, [r2, #16]
 8006a38:	f107 0108 	add.w	r1, r7, #8
 8006a3c:	4610      	mov	r0, r2
 8006a3e:	4798      	blx	r3
 8006a40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a42:	e091      	b.n	8006b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 facb 	bl	8006fe2 <USBD_CtlError>
            err++;
 8006a4c:	7afb      	ldrb	r3, [r7, #11]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	72fb      	strb	r3, [r7, #11]
          break;
 8006a52:	e089      	b.n	8006b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00b      	beq.n	8006a78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	7c12      	ldrb	r2, [r2, #16]
 8006a6c:	f107 0108 	add.w	r1, r7, #8
 8006a70:	4610      	mov	r0, r2
 8006a72:	4798      	blx	r3
 8006a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a76:	e077      	b.n	8006b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fab1 	bl	8006fe2 <USBD_CtlError>
            err++;
 8006a80:	7afb      	ldrb	r3, [r7, #11]
 8006a82:	3301      	adds	r3, #1
 8006a84:	72fb      	strb	r3, [r7, #11]
          break;
 8006a86:	e06f      	b.n	8006b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00b      	beq.n	8006aac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	7c12      	ldrb	r2, [r2, #16]
 8006aa0:	f107 0108 	add.w	r1, r7, #8
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4798      	blx	r3
 8006aa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006aaa:	e05d      	b.n	8006b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fa97 	bl	8006fe2 <USBD_CtlError>
            err++;
 8006ab4:	7afb      	ldrb	r3, [r7, #11]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8006aba:	e055      	b.n	8006b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d00b      	beq.n	8006ae0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	7c12      	ldrb	r2, [r2, #16]
 8006ad4:	f107 0108 	add.w	r1, r7, #8
 8006ad8:	4610      	mov	r0, r2
 8006ada:	4798      	blx	r3
 8006adc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ade:	e043      	b.n	8006b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 fa7d 	bl	8006fe2 <USBD_CtlError>
            err++;
 8006ae8:	7afb      	ldrb	r3, [r7, #11]
 8006aea:	3301      	adds	r3, #1
 8006aec:	72fb      	strb	r3, [r7, #11]
          break;
 8006aee:	e03b      	b.n	8006b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00b      	beq.n	8006b14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b02:	695b      	ldr	r3, [r3, #20]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	7c12      	ldrb	r2, [r2, #16]
 8006b08:	f107 0108 	add.w	r1, r7, #8
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	4798      	blx	r3
 8006b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b12:	e029      	b.n	8006b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b14:	6839      	ldr	r1, [r7, #0]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fa63 	bl	8006fe2 <USBD_CtlError>
            err++;
 8006b1c:	7afb      	ldrb	r3, [r7, #11]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	72fb      	strb	r3, [r7, #11]
          break;
 8006b22:	e021      	b.n	8006b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00b      	beq.n	8006b48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	7c12      	ldrb	r2, [r2, #16]
 8006b3c:	f107 0108 	add.w	r1, r7, #8
 8006b40:	4610      	mov	r0, r2
 8006b42:	4798      	blx	r3
 8006b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b46:	e00f      	b.n	8006b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fa49 	bl	8006fe2 <USBD_CtlError>
            err++;
 8006b50:	7afb      	ldrb	r3, [r7, #11]
 8006b52:	3301      	adds	r3, #1
 8006b54:	72fb      	strb	r3, [r7, #11]
          break;
 8006b56:	e007      	b.n	8006b68 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 fa41 	bl	8006fe2 <USBD_CtlError>
          err++;
 8006b60:	7afb      	ldrb	r3, [r7, #11]
 8006b62:	3301      	adds	r3, #1
 8006b64:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006b66:	bf00      	nop
      }
      break;
 8006b68:	e037      	b.n	8006bda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	7c1b      	ldrb	r3, [r3, #16]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d109      	bne.n	8006b86 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7a:	f107 0208 	add.w	r2, r7, #8
 8006b7e:	4610      	mov	r0, r2
 8006b80:	4798      	blx	r3
 8006b82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b84:	e029      	b.n	8006bda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fa2a 	bl	8006fe2 <USBD_CtlError>
        err++;
 8006b8e:	7afb      	ldrb	r3, [r7, #11]
 8006b90:	3301      	adds	r3, #1
 8006b92:	72fb      	strb	r3, [r7, #11]
      break;
 8006b94:	e021      	b.n	8006bda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	7c1b      	ldrb	r3, [r3, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d10d      	bne.n	8006bba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba6:	f107 0208 	add.w	r2, r7, #8
 8006baa:	4610      	mov	r0, r2
 8006bac:	4798      	blx	r3
 8006bae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	2207      	movs	r2, #7
 8006bb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006bb8:	e00f      	b.n	8006bda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006bba:	6839      	ldr	r1, [r7, #0]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fa10 	bl	8006fe2 <USBD_CtlError>
        err++;
 8006bc2:	7afb      	ldrb	r3, [r7, #11]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	72fb      	strb	r3, [r7, #11]
      break;
 8006bc8:	e007      	b.n	8006bda <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fa08 	bl	8006fe2 <USBD_CtlError>
      err++;
 8006bd2:	7afb      	ldrb	r3, [r7, #11]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	72fb      	strb	r3, [r7, #11]
      break;
 8006bd8:	bf00      	nop
  }

  if (err != 0U)
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d11e      	bne.n	8006c1e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	88db      	ldrh	r3, [r3, #6]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d016      	beq.n	8006c16 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006be8:	893b      	ldrh	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00e      	beq.n	8006c0c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	88da      	ldrh	r2, [r3, #6]
 8006bf2:	893b      	ldrh	r3, [r7, #8]
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	bf28      	it	cs
 8006bf8:	4613      	movcs	r3, r2
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006bfe:	893b      	ldrh	r3, [r7, #8]
 8006c00:	461a      	mov	r2, r3
 8006c02:	68f9      	ldr	r1, [r7, #12]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fa5d 	bl	80070c4 <USBD_CtlSendData>
 8006c0a:	e009      	b.n	8006c20 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f9e7 	bl	8006fe2 <USBD_CtlError>
 8006c14:	e004      	b.n	8006c20 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 faae 	bl	8007178 <USBD_CtlSendStatus>
 8006c1c:	e000      	b.n	8006c20 <USBD_GetDescriptor+0x2cc>
    return;
 8006c1e:	bf00      	nop
  }
}
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop

08006c28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	889b      	ldrh	r3, [r3, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d131      	bne.n	8006c9e <USBD_SetAddress+0x76>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	88db      	ldrh	r3, [r3, #6]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d12d      	bne.n	8006c9e <USBD_SetAddress+0x76>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	885b      	ldrh	r3, [r3, #2]
 8006c46:	2b7f      	cmp	r3, #127	; 0x7f
 8006c48:	d829      	bhi.n	8006c9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	885b      	ldrh	r3, [r3, #2]
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d104      	bne.n	8006c6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f9bc 	bl	8006fe2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c6a:	e01d      	b.n	8006ca8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	7bfa      	ldrb	r2, [r7, #15]
 8006c70:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f004 fd81 	bl	800b780 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fa7a 	bl	8007178 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d004      	beq.n	8006c94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c92:	e009      	b.n	8006ca8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9c:	e004      	b.n	8006ca8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 f99e 	bl	8006fe2 <USBD_CtlError>
  }
}
 8006ca6:	bf00      	nop
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	885b      	ldrh	r3, [r3, #2]
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	4b4e      	ldr	r3, [pc, #312]	; (8006e00 <USBD_SetConfig+0x150>)
 8006cc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006cc8:	4b4d      	ldr	r3, [pc, #308]	; (8006e00 <USBD_SetConfig+0x150>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d905      	bls.n	8006cdc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f985 	bl	8006fe2 <USBD_CtlError>
    return USBD_FAIL;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e08c      	b.n	8006df6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d002      	beq.n	8006cee <USBD_SetConfig+0x3e>
 8006ce8:	2b03      	cmp	r3, #3
 8006cea:	d029      	beq.n	8006d40 <USBD_SetConfig+0x90>
 8006cec:	e075      	b.n	8006dda <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006cee:	4b44      	ldr	r3, [pc, #272]	; (8006e00 <USBD_SetConfig+0x150>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d020      	beq.n	8006d38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006cf6:	4b42      	ldr	r3, [pc, #264]	; (8006e00 <USBD_SetConfig+0x150>)
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d00:	4b3f      	ldr	r3, [pc, #252]	; (8006e00 <USBD_SetConfig+0x150>)
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7fe ffe7 	bl	8005cda <USBD_SetClassConfig>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006d10:	7bfb      	ldrb	r3, [r7, #15]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d008      	beq.n	8006d28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f962 	bl	8006fe2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2202      	movs	r2, #2
 8006d22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d26:	e065      	b.n	8006df4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 fa25 	bl	8007178 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2203      	movs	r2, #3
 8006d32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d36:	e05d      	b.n	8006df4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fa1d 	bl	8007178 <USBD_CtlSendStatus>
      break;
 8006d3e:	e059      	b.n	8006df4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006d40:	4b2f      	ldr	r3, [pc, #188]	; (8006e00 <USBD_SetConfig+0x150>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d112      	bne.n	8006d6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006d50:	4b2b      	ldr	r3, [pc, #172]	; (8006e00 <USBD_SetConfig+0x150>)
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d5a:	4b29      	ldr	r3, [pc, #164]	; (8006e00 <USBD_SetConfig+0x150>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7fe ffd6 	bl	8005d12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 fa06 	bl	8007178 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006d6c:	e042      	b.n	8006df4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006d6e:	4b24      	ldr	r3, [pc, #144]	; (8006e00 <USBD_SetConfig+0x150>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d02a      	beq.n	8006dd2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f7fe ffc4 	bl	8005d12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006d8a:	4b1d      	ldr	r3, [pc, #116]	; (8006e00 <USBD_SetConfig+0x150>)
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d94:	4b1a      	ldr	r3, [pc, #104]	; (8006e00 <USBD_SetConfig+0x150>)
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fe ff9d 	bl	8005cda <USBD_SetClassConfig>
 8006da0:	4603      	mov	r3, r0
 8006da2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006da4:	7bfb      	ldrb	r3, [r7, #15]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00f      	beq.n	8006dca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f918 	bl	8006fe2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	4619      	mov	r1, r3
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fe ffa9 	bl	8005d12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2202      	movs	r2, #2
 8006dc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006dc8:	e014      	b.n	8006df4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f9d4 	bl	8007178 <USBD_CtlSendStatus>
      break;
 8006dd0:	e010      	b.n	8006df4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f9d0 	bl	8007178 <USBD_CtlSendStatus>
      break;
 8006dd8:	e00c      	b.n	8006df4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f900 	bl	8006fe2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006de2:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <USBD_SetConfig+0x150>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7fe ff92 	bl	8005d12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006dee:	2303      	movs	r3, #3
 8006df0:	73fb      	strb	r3, [r7, #15]
      break;
 8006df2:	bf00      	nop
  }

  return ret;
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	2000023c 	.word	0x2000023c

08006e04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	88db      	ldrh	r3, [r3, #6]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d004      	beq.n	8006e20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f8e2 	bl	8006fe2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006e1e:	e023      	b.n	8006e68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	dc02      	bgt.n	8006e32 <USBD_GetConfig+0x2e>
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	dc03      	bgt.n	8006e38 <USBD_GetConfig+0x34>
 8006e30:	e015      	b.n	8006e5e <USBD_GetConfig+0x5a>
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d00b      	beq.n	8006e4e <USBD_GetConfig+0x4a>
 8006e36:	e012      	b.n	8006e5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3308      	adds	r3, #8
 8006e42:	2201      	movs	r2, #1
 8006e44:	4619      	mov	r1, r3
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f93c 	bl	80070c4 <USBD_CtlSendData>
        break;
 8006e4c:	e00c      	b.n	8006e68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	3304      	adds	r3, #4
 8006e52:	2201      	movs	r2, #1
 8006e54:	4619      	mov	r1, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f934 	bl	80070c4 <USBD_CtlSendData>
        break;
 8006e5c:	e004      	b.n	8006e68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f8be 	bl	8006fe2 <USBD_CtlError>
        break;
 8006e66:	bf00      	nop
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d81e      	bhi.n	8006ec6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	88db      	ldrh	r3, [r3, #6]
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d004      	beq.n	8006e9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f8a5 	bl	8006fe2 <USBD_CtlError>
        break;
 8006e98:	e01a      	b.n	8006ed0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d005      	beq.n	8006eb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f043 0202 	orr.w	r2, r3, #2
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	330c      	adds	r3, #12
 8006eba:	2202      	movs	r2, #2
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f900 	bl	80070c4 <USBD_CtlSendData>
      break;
 8006ec4:	e004      	b.n	8006ed0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006ec6:	6839      	ldr	r1, [r7, #0]
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f88a 	bl	8006fe2 <USBD_CtlError>
      break;
 8006ece:	bf00      	nop
  }
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	885b      	ldrh	r3, [r3, #2]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d107      	bne.n	8006efa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f940 	bl	8007178 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006ef8:	e013      	b.n	8006f22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	885b      	ldrh	r3, [r3, #2]
 8006efe:	2b02      	cmp	r3, #2
 8006f00:	d10b      	bne.n	8006f1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	889b      	ldrh	r3, [r3, #4]
 8006f06:	0a1b      	lsrs	r3, r3, #8
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	b2da      	uxtb	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f930 	bl	8007178 <USBD_CtlSendStatus>
}
 8006f18:	e003      	b.n	8006f22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 f860 	bl	8006fe2 <USBD_CtlError>
}
 8006f22:	bf00      	nop
 8006f24:	3708      	adds	r7, #8
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b082      	sub	sp, #8
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
 8006f32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d80b      	bhi.n	8006f5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	885b      	ldrh	r3, [r3, #2]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d10c      	bne.n	8006f64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f910 	bl	8007178 <USBD_CtlSendStatus>
      }
      break;
 8006f58:	e004      	b.n	8006f64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006f5a:	6839      	ldr	r1, [r7, #0]
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f840 	bl	8006fe2 <USBD_CtlError>
      break;
 8006f62:	e000      	b.n	8006f66 <USBD_ClrFeature+0x3c>
      break;
 8006f64:	bf00      	nop
  }
}
 8006f66:	bf00      	nop
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	781a      	ldrb	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3301      	adds	r3, #1
 8006f88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	781a      	ldrb	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	3301      	adds	r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f7ff fa41 	bl	8006420 <SWAPBYTE>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f7ff fa34 	bl	8006420 <SWAPBYTE>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	461a      	mov	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f7ff fa27 	bl	8006420 <SWAPBYTE>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	80da      	strh	r2, [r3, #6]
}
 8006fda:	bf00      	nop
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b082      	sub	sp, #8
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
 8006fea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fec:	2180      	movs	r1, #128	; 0x80
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f004 fb5c 	bl	800b6ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006ff4:	2100      	movs	r1, #0
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f004 fb58 	bl	800b6ac <USBD_LL_StallEP>
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d036      	beq.n	8007088 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800701e:	6938      	ldr	r0, [r7, #16]
 8007020:	f000 f836 	bl	8007090 <USBD_GetLen>
 8007024:	4603      	mov	r3, r0
 8007026:	3301      	adds	r3, #1
 8007028:	b29b      	uxth	r3, r3
 800702a:	005b      	lsls	r3, r3, #1
 800702c:	b29a      	uxth	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007032:	7dfb      	ldrb	r3, [r7, #23]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	4413      	add	r3, r2
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	7812      	ldrb	r2, [r2, #0]
 800703c:	701a      	strb	r2, [r3, #0]
  idx++;
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	3301      	adds	r3, #1
 8007042:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	4413      	add	r3, r2
 800704a:	2203      	movs	r2, #3
 800704c:	701a      	strb	r2, [r3, #0]
  idx++;
 800704e:	7dfb      	ldrb	r3, [r7, #23]
 8007050:	3301      	adds	r3, #1
 8007052:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007054:	e013      	b.n	800707e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	4413      	add	r3, r2
 800705c:	693a      	ldr	r2, [r7, #16]
 800705e:	7812      	ldrb	r2, [r2, #0]
 8007060:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	3301      	adds	r3, #1
 8007066:	613b      	str	r3, [r7, #16]
    idx++;
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	3301      	adds	r3, #1
 800706c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800706e:	7dfb      	ldrb	r3, [r7, #23]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	4413      	add	r3, r2
 8007074:	2200      	movs	r2, #0
 8007076:	701a      	strb	r2, [r3, #0]
    idx++;
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	3301      	adds	r3, #1
 800707c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e7      	bne.n	8007056 <USBD_GetString+0x52>
 8007086:	e000      	b.n	800708a <USBD_GetString+0x86>
    return;
 8007088:	bf00      	nop
  }
}
 800708a:	3718      	adds	r7, #24
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007098:	2300      	movs	r3, #0
 800709a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80070a0:	e005      	b.n	80070ae <USBD_GetLen+0x1e>
  {
    len++;
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	3301      	adds	r3, #1
 80070a6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	3301      	adds	r3, #1
 80070ac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f5      	bne.n	80070a2 <USBD_GetLen+0x12>
  }

  return len;
 80070b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2202      	movs	r2, #2
 80070d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	2100      	movs	r1, #0
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f004 fb67 	bl	800b7be <USBD_LL_Transmit>

  return USBD_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	60f8      	str	r0, [r7, #12]
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	2100      	movs	r1, #0
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f004 fb56 	bl	800b7be <USBD_LL_Transmit>

  return USBD_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2203      	movs	r2, #3
 800712c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	2100      	movs	r1, #0
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f004 fb5a 	bl	800b800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	60f8      	str	r0, [r7, #12]
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68ba      	ldr	r2, [r7, #8]
 8007166:	2100      	movs	r1, #0
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f004 fb49 	bl	800b800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2204      	movs	r2, #4
 8007184:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007188:	2300      	movs	r3, #0
 800718a:	2200      	movs	r2, #0
 800718c:	2100      	movs	r1, #0
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f004 fb15 	bl	800b7be <USBD_LL_Transmit>

  return USBD_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2205      	movs	r2, #5
 80071aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071ae:	2300      	movs	r3, #0
 80071b0:	2200      	movs	r2, #0
 80071b2:	2100      	movs	r1, #0
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f004 fb23 	bl	800b800 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <__NVIC_SetPriority>:
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	6039      	str	r1, [r7, #0]
 80071ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	db0a      	blt.n	80071ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	490c      	ldr	r1, [pc, #48]	; (8007210 <__NVIC_SetPriority+0x4c>)
 80071de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071e2:	0112      	lsls	r2, r2, #4
 80071e4:	b2d2      	uxtb	r2, r2
 80071e6:	440b      	add	r3, r1
 80071e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80071ec:	e00a      	b.n	8007204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	4908      	ldr	r1, [pc, #32]	; (8007214 <__NVIC_SetPriority+0x50>)
 80071f4:	79fb      	ldrb	r3, [r7, #7]
 80071f6:	f003 030f 	and.w	r3, r3, #15
 80071fa:	3b04      	subs	r3, #4
 80071fc:	0112      	lsls	r2, r2, #4
 80071fe:	b2d2      	uxtb	r2, r2
 8007200:	440b      	add	r3, r1
 8007202:	761a      	strb	r2, [r3, #24]
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	e000e100 	.word	0xe000e100
 8007214:	e000ed00 	.word	0xe000ed00

08007218 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007218:	b580      	push	{r7, lr}
 800721a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800721c:	2100      	movs	r1, #0
 800721e:	f06f 0004 	mvn.w	r0, #4
 8007222:	f7ff ffcf 	bl	80071c4 <__NVIC_SetPriority>
#endif
}
 8007226:	bf00      	nop
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007232:	f3ef 8305 	mrs	r3, IPSR
 8007236:	603b      	str	r3, [r7, #0]
  return(result);
 8007238:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800723e:	f06f 0305 	mvn.w	r3, #5
 8007242:	607b      	str	r3, [r7, #4]
 8007244:	e00c      	b.n	8007260 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007246:	4b0a      	ldr	r3, [pc, #40]	; (8007270 <osKernelInitialize+0x44>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d105      	bne.n	800725a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800724e:	4b08      	ldr	r3, [pc, #32]	; (8007270 <osKernelInitialize+0x44>)
 8007250:	2201      	movs	r2, #1
 8007252:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007254:	2300      	movs	r3, #0
 8007256:	607b      	str	r3, [r7, #4]
 8007258:	e002      	b.n	8007260 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800725a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800725e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007260:	687b      	ldr	r3, [r7, #4]
}
 8007262:	4618      	mov	r0, r3
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	20000240 	.word	0x20000240

08007274 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800727a:	f3ef 8305 	mrs	r3, IPSR
 800727e:	603b      	str	r3, [r7, #0]
  return(result);
 8007280:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007286:	f06f 0305 	mvn.w	r3, #5
 800728a:	607b      	str	r3, [r7, #4]
 800728c:	e010      	b.n	80072b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800728e:	4b0b      	ldr	r3, [pc, #44]	; (80072bc <osKernelStart+0x48>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d109      	bne.n	80072aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007296:	f7ff ffbf 	bl	8007218 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800729a:	4b08      	ldr	r3, [pc, #32]	; (80072bc <osKernelStart+0x48>)
 800729c:	2202      	movs	r2, #2
 800729e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80072a0:	f001 fd8c 	bl	8008dbc <vTaskStartScheduler>
      stat = osOK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	607b      	str	r3, [r7, #4]
 80072a8:	e002      	b.n	80072b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80072aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80072b0:	687b      	ldr	r3, [r7, #4]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3708      	adds	r7, #8
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	20000240 	.word	0x20000240

080072c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08e      	sub	sp, #56	; 0x38
 80072c4:	af04      	add	r7, sp, #16
 80072c6:	60f8      	str	r0, [r7, #12]
 80072c8:	60b9      	str	r1, [r7, #8]
 80072ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80072cc:	2300      	movs	r3, #0
 80072ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072d0:	f3ef 8305 	mrs	r3, IPSR
 80072d4:	617b      	str	r3, [r7, #20]
  return(result);
 80072d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d17e      	bne.n	80073da <osThreadNew+0x11a>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d07b      	beq.n	80073da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80072e2:	2380      	movs	r3, #128	; 0x80
 80072e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80072e6:	2318      	movs	r3, #24
 80072e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80072ea:	2300      	movs	r3, #0
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80072ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d045      	beq.n	8007386 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d002      	beq.n	8007308 <osThreadNew+0x48>
        name = attr->name;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d002      	beq.n	8007316 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d008      	beq.n	800732e <osThreadNew+0x6e>
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	2b38      	cmp	r3, #56	; 0x38
 8007320:	d805      	bhi.n	800732e <osThreadNew+0x6e>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <osThreadNew+0x72>
        return (NULL);
 800732e:	2300      	movs	r3, #0
 8007330:	e054      	b.n	80073dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	695b      	ldr	r3, [r3, #20]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	695b      	ldr	r3, [r3, #20]
 800733e:	089b      	lsrs	r3, r3, #2
 8007340:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00e      	beq.n	8007368 <osThreadNew+0xa8>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	2bcb      	cmp	r3, #203	; 0xcb
 8007350:	d90a      	bls.n	8007368 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007356:	2b00      	cmp	r3, #0
 8007358:	d006      	beq.n	8007368 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d002      	beq.n	8007368 <osThreadNew+0xa8>
        mem = 1;
 8007362:	2301      	movs	r3, #1
 8007364:	61bb      	str	r3, [r7, #24]
 8007366:	e010      	b.n	800738a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10c      	bne.n	800738a <osThreadNew+0xca>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d108      	bne.n	800738a <osThreadNew+0xca>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d104      	bne.n	800738a <osThreadNew+0xca>
          mem = 0;
 8007380:	2300      	movs	r3, #0
 8007382:	61bb      	str	r3, [r7, #24]
 8007384:	e001      	b.n	800738a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d110      	bne.n	80073b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007398:	9202      	str	r2, [sp, #8]
 800739a:	9301      	str	r3, [sp, #4]
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	6a3a      	ldr	r2, [r7, #32]
 80073a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f001 fb1c 	bl	80089e4 <xTaskCreateStatic>
 80073ac:	4603      	mov	r3, r0
 80073ae:	613b      	str	r3, [r7, #16]
 80073b0:	e013      	b.n	80073da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d110      	bne.n	80073da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	f107 0310 	add.w	r3, r7, #16
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f001 fb67 	bl	8008a9e <xTaskCreate>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d001      	beq.n	80073da <osThreadNew+0x11a>
            hTask = NULL;
 80073d6:	2300      	movs	r3, #0
 80073d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80073da:	693b      	ldr	r3, [r7, #16]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3728      	adds	r7, #40	; 0x28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	60b9      	str	r1, [r7, #8]
 80073ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	4a07      	ldr	r2, [pc, #28]	; (8007410 <vApplicationGetIdleTaskMemory+0x2c>)
 80073f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	4a06      	ldr	r2, [pc, #24]	; (8007414 <vApplicationGetIdleTaskMemory+0x30>)
 80073fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2280      	movs	r2, #128	; 0x80
 8007400:	601a      	str	r2, [r3, #0]
}
 8007402:	bf00      	nop
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	20000244 	.word	0x20000244
 8007414:	20000310 	.word	0x20000310

08007418 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	4a07      	ldr	r2, [pc, #28]	; (8007444 <vApplicationGetTimerTaskMemory+0x2c>)
 8007428:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	4a06      	ldr	r2, [pc, #24]	; (8007448 <vApplicationGetTimerTaskMemory+0x30>)
 800742e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007436:	601a      	str	r2, [r3, #0]
}
 8007438:	bf00      	nop
 800743a:	3714      	adds	r7, #20
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr
 8007444:	20000510 	.word	0x20000510
 8007448:	200005dc 	.word	0x200005dc

0800744c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f103 0208 	add.w	r2, r3, #8
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007464:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f103 0208 	add.w	r2, r3, #8
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f103 0208 	add.w	r2, r3, #8
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007480:	bf00      	nop
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074a6:	b480      	push	{r7}
 80074a8:	b085      	sub	sp, #20
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	1c5a      	adds	r2, r3, #1
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	601a      	str	r2, [r3, #0]
}
 80074e2:	bf00      	nop
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr

080074ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074ee:	b480      	push	{r7}
 80074f0:	b085      	sub	sp, #20
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007504:	d103      	bne.n	800750e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	e00c      	b.n	8007528 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3308      	adds	r3, #8
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	e002      	b.n	800751c <vListInsert+0x2e>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	60fb      	str	r3, [r7, #12]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	429a      	cmp	r2, r3
 8007526:	d2f6      	bcs.n	8007516 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	683a      	ldr	r2, [r7, #0]
 8007536:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	601a      	str	r2, [r3, #0]
}
 8007554:	bf00      	nop
 8007556:	3714      	adds	r7, #20
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	691b      	ldr	r3, [r3, #16]
 800756c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6892      	ldr	r2, [r2, #8]
 8007576:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	6852      	ldr	r2, [r2, #4]
 8007580:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	429a      	cmp	r2, r3
 800758a:	d103      	bne.n	8007594 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	1e5a      	subs	r2, r3, #1
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3714      	adds	r7, #20
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10a      	bne.n	80075de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075de:	f003 f8d9 	bl	800a794 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ea:	68f9      	ldr	r1, [r7, #12]
 80075ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075ee:	fb01 f303 	mul.w	r3, r1, r3
 80075f2:	441a      	add	r2, r3
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760e:	3b01      	subs	r3, #1
 8007610:	68f9      	ldr	r1, [r7, #12]
 8007612:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007614:	fb01 f303 	mul.w	r3, r1, r3
 8007618:	441a      	add	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	22ff      	movs	r2, #255	; 0xff
 8007622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	22ff      	movs	r2, #255	; 0xff
 800762a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d114      	bne.n	800765e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	691b      	ldr	r3, [r3, #16]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d01a      	beq.n	8007672 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	3310      	adds	r3, #16
 8007640:	4618      	mov	r0, r3
 8007642:	f001 fe55 	bl	80092f0 <xTaskRemoveFromEventList>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d012      	beq.n	8007672 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800764c:	4b0c      	ldr	r3, [pc, #48]	; (8007680 <xQueueGenericReset+0xcc>)
 800764e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	e009      	b.n	8007672 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3310      	adds	r3, #16
 8007662:	4618      	mov	r0, r3
 8007664:	f7ff fef2 	bl	800744c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3324      	adds	r3, #36	; 0x24
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff feed 	bl	800744c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007672:	f003 f8bf 	bl	800a7f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007676:	2301      	movs	r3, #1
}
 8007678:	4618      	mov	r0, r3
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	e000ed04 	.word	0xe000ed04

08007684 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08e      	sub	sp, #56	; 0x38
 8007688:	af02      	add	r7, sp, #8
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d10a      	bne.n	80076ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <xQueueGenericCreateStatic+0x52>
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <xQueueGenericCreateStatic+0x56>
 80076d6:	2301      	movs	r3, #1
 80076d8:	e000      	b.n	80076dc <xQueueGenericCreateStatic+0x58>
 80076da:	2300      	movs	r3, #0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d10a      	bne.n	80076f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80076e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e4:	f383 8811 	msr	BASEPRI, r3
 80076e8:	f3bf 8f6f 	isb	sy
 80076ec:	f3bf 8f4f 	dsb	sy
 80076f0:	623b      	str	r3, [r7, #32]
}
 80076f2:	bf00      	nop
 80076f4:	e7fe      	b.n	80076f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <xQueueGenericCreateStatic+0x7e>
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <xQueueGenericCreateStatic+0x82>
 8007702:	2301      	movs	r3, #1
 8007704:	e000      	b.n	8007708 <xQueueGenericCreateStatic+0x84>
 8007706:	2300      	movs	r3, #0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	61fb      	str	r3, [r7, #28]
}
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007722:	2350      	movs	r3, #80	; 0x50
 8007724:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b50      	cmp	r3, #80	; 0x50
 800772a:	d00a      	beq.n	8007742 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800772c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007730:	f383 8811 	msr	BASEPRI, r3
 8007734:	f3bf 8f6f 	isb	sy
 8007738:	f3bf 8f4f 	dsb	sy
 800773c:	61bb      	str	r3, [r7, #24]
}
 800773e:	bf00      	nop
 8007740:	e7fe      	b.n	8007740 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007742:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00d      	beq.n	800776a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800774e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007756:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	4613      	mov	r3, r2
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	68b9      	ldr	r1, [r7, #8]
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f000 f83f 	bl	80077e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800776c:	4618      	mov	r0, r3
 800776e:	3730      	adds	r7, #48	; 0x30
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08a      	sub	sp, #40	; 0x28
 8007778:	af02      	add	r7, sp, #8
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	4613      	mov	r3, r2
 8007780:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10a      	bne.n	800779e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778c:	f383 8811 	msr	BASEPRI, r3
 8007790:	f3bf 8f6f 	isb	sy
 8007794:	f3bf 8f4f 	dsb	sy
 8007798:	613b      	str	r3, [r7, #16]
}
 800779a:	bf00      	nop
 800779c:	e7fe      	b.n	800779c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	68ba      	ldr	r2, [r7, #8]
 80077a2:	fb02 f303 	mul.w	r3, r2, r3
 80077a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	3350      	adds	r3, #80	; 0x50
 80077ac:	4618      	mov	r0, r3
 80077ae:	f003 f913 	bl	800a9d8 <pvPortMalloc>
 80077b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80077b4:	69bb      	ldr	r3, [r7, #24]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d011      	beq.n	80077de <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	3350      	adds	r3, #80	; 0x50
 80077c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077cc:	79fa      	ldrb	r2, [r7, #7]
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	4613      	mov	r3, r2
 80077d4:	697a      	ldr	r2, [r7, #20]
 80077d6:	68b9      	ldr	r1, [r7, #8]
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f805 	bl	80077e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077de:	69bb      	ldr	r3, [r7, #24]
	}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3720      	adds	r7, #32
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b084      	sub	sp, #16
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
 80077f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d103      	bne.n	8007804 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	e002      	b.n	800780a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007816:	2101      	movs	r1, #1
 8007818:	69b8      	ldr	r0, [r7, #24]
 800781a:	f7ff fecb 	bl	80075b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	78fa      	ldrb	r2, [r7, #3]
 8007822:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007826:	bf00      	nop
 8007828:	3710      	adds	r7, #16
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
	...

08007830 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08e      	sub	sp, #56	; 0x38
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	60b9      	str	r1, [r7, #8]
 800783a:	607a      	str	r2, [r7, #4]
 800783c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800783e:	2300      	movs	r3, #0
 8007840:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <xQueueGenericSend+0x32>
	__asm volatile
 800784c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007850:	f383 8811 	msr	BASEPRI, r3
 8007854:	f3bf 8f6f 	isb	sy
 8007858:	f3bf 8f4f 	dsb	sy
 800785c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800785e:	bf00      	nop
 8007860:	e7fe      	b.n	8007860 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d103      	bne.n	8007870 <xQueueGenericSend+0x40>
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d101      	bne.n	8007874 <xQueueGenericSend+0x44>
 8007870:	2301      	movs	r3, #1
 8007872:	e000      	b.n	8007876 <xQueueGenericSend+0x46>
 8007874:	2300      	movs	r3, #0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d10a      	bne.n	8007890 <xQueueGenericSend+0x60>
	__asm volatile
 800787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787e:	f383 8811 	msr	BASEPRI, r3
 8007882:	f3bf 8f6f 	isb	sy
 8007886:	f3bf 8f4f 	dsb	sy
 800788a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800788c:	bf00      	nop
 800788e:	e7fe      	b.n	800788e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	2b02      	cmp	r3, #2
 8007894:	d103      	bne.n	800789e <xQueueGenericSend+0x6e>
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <xQueueGenericSend+0x72>
 800789e:	2301      	movs	r3, #1
 80078a0:	e000      	b.n	80078a4 <xQueueGenericSend+0x74>
 80078a2:	2300      	movs	r3, #0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10a      	bne.n	80078be <xQueueGenericSend+0x8e>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	623b      	str	r3, [r7, #32]
}
 80078ba:	bf00      	nop
 80078bc:	e7fe      	b.n	80078bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078be:	f001 fee9 	bl	8009694 <xTaskGetSchedulerState>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d102      	bne.n	80078ce <xQueueGenericSend+0x9e>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <xQueueGenericSend+0xa2>
 80078ce:	2301      	movs	r3, #1
 80078d0:	e000      	b.n	80078d4 <xQueueGenericSend+0xa4>
 80078d2:	2300      	movs	r3, #0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10a      	bne.n	80078ee <xQueueGenericSend+0xbe>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	61fb      	str	r3, [r7, #28]
}
 80078ea:	bf00      	nop
 80078ec:	e7fe      	b.n	80078ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078ee:	f002 ff51 	bl	800a794 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d302      	bcc.n	8007904 <xQueueGenericSend+0xd4>
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	2b02      	cmp	r3, #2
 8007902:	d129      	bne.n	8007958 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	68b9      	ldr	r1, [r7, #8]
 8007908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800790a:	f000 fbbb 	bl	8008084 <prvCopyDataToQueue>
 800790e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	2b00      	cmp	r3, #0
 8007916:	d010      	beq.n	800793a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	3324      	adds	r3, #36	; 0x24
 800791c:	4618      	mov	r0, r3
 800791e:	f001 fce7 	bl	80092f0 <xTaskRemoveFromEventList>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d013      	beq.n	8007950 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007928:	4b3f      	ldr	r3, [pc, #252]	; (8007a28 <xQueueGenericSend+0x1f8>)
 800792a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800792e:	601a      	str	r2, [r3, #0]
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	f3bf 8f6f 	isb	sy
 8007938:	e00a      	b.n	8007950 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800793a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007940:	4b39      	ldr	r3, [pc, #228]	; (8007a28 <xQueueGenericSend+0x1f8>)
 8007942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007950:	f002 ff50 	bl	800a7f4 <vPortExitCritical>
				return pdPASS;
 8007954:	2301      	movs	r3, #1
 8007956:	e063      	b.n	8007a20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d103      	bne.n	8007966 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800795e:	f002 ff49 	bl	800a7f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007962:	2300      	movs	r3, #0
 8007964:	e05c      	b.n	8007a20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007968:	2b00      	cmp	r3, #0
 800796a:	d106      	bne.n	800797a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800796c:	f107 0314 	add.w	r3, r7, #20
 8007970:	4618      	mov	r0, r3
 8007972:	f001 fd21 	bl	80093b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007976:	2301      	movs	r3, #1
 8007978:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800797a:	f002 ff3b 	bl	800a7f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800797e:	f001 fa8d 	bl	8008e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007982:	f002 ff07 	bl	800a794 <vPortEnterCritical>
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800798c:	b25b      	sxtb	r3, r3
 800798e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007992:	d103      	bne.n	800799c <xQueueGenericSend+0x16c>
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	2200      	movs	r2, #0
 8007998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079a2:	b25b      	sxtb	r3, r3
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079a8:	d103      	bne.n	80079b2 <xQueueGenericSend+0x182>
 80079aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079b2:	f002 ff1f 	bl	800a7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079b6:	1d3a      	adds	r2, r7, #4
 80079b8:	f107 0314 	add.w	r3, r7, #20
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f001 fd10 	bl	80093e4 <xTaskCheckForTimeOut>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d124      	bne.n	8007a14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079cc:	f000 fc52 	bl	8008274 <prvIsQueueFull>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d018      	beq.n	8007a08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	3310      	adds	r3, #16
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	4611      	mov	r1, r2
 80079de:	4618      	mov	r0, r3
 80079e0:	f001 fc36 	bl	8009250 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079e6:	f000 fbdd 	bl	80081a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079ea:	f001 fa65 	bl	8008eb8 <xTaskResumeAll>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f47f af7c 	bne.w	80078ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80079f6:	4b0c      	ldr	r3, [pc, #48]	; (8007a28 <xQueueGenericSend+0x1f8>)
 80079f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	e772      	b.n	80078ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a0a:	f000 fbcb 	bl	80081a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a0e:	f001 fa53 	bl	8008eb8 <xTaskResumeAll>
 8007a12:	e76c      	b.n	80078ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a16:	f000 fbc5 	bl	80081a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a1a:	f001 fa4d 	bl	8008eb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3738      	adds	r7, #56	; 0x38
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	e000ed04 	.word	0xe000ed04

08007a2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b090      	sub	sp, #64	; 0x40
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10a      	bne.n	8007a5a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a56:	bf00      	nop
 8007a58:	e7fe      	b.n	8007a58 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d103      	bne.n	8007a68 <xQueueGenericSendFromISR+0x3c>
 8007a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <xQueueGenericSendFromISR+0x40>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e000      	b.n	8007a6e <xQueueGenericSendFromISR+0x42>
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10a      	bne.n	8007a88 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a84:	bf00      	nop
 8007a86:	e7fe      	b.n	8007a86 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d103      	bne.n	8007a96 <xQueueGenericSendFromISR+0x6a>
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d101      	bne.n	8007a9a <xQueueGenericSendFromISR+0x6e>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e000      	b.n	8007a9c <xQueueGenericSendFromISR+0x70>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10a      	bne.n	8007ab6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	623b      	str	r3, [r7, #32]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ab6:	f002 ff4f 	bl	800a958 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007aba:	f3ef 8211 	mrs	r2, BASEPRI
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	61fa      	str	r2, [r7, #28]
 8007ad0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ad2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ad4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d302      	bcc.n	8007ae8 <xQueueGenericSendFromISR+0xbc>
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d12f      	bne.n	8007b48 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007afe:	f000 fac1 	bl	8008084 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b02:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b0a:	d112      	bne.n	8007b32 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d016      	beq.n	8007b42 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b16:	3324      	adds	r3, #36	; 0x24
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f001 fbe9 	bl	80092f0 <xTaskRemoveFromEventList>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00e      	beq.n	8007b42 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00b      	beq.n	8007b42 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
 8007b30:	e007      	b.n	8007b42 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007b36:	3301      	adds	r3, #1
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	b25a      	sxtb	r2, r3
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b42:	2301      	movs	r3, #1
 8007b44:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007b46:	e001      	b.n	8007b4c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b4e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3740      	adds	r7, #64	; 0x40
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b08e      	sub	sp, #56	; 0x38
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d10a      	bne.n	8007b8c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	623b      	str	r3, [r7, #32]
}
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00a      	beq.n	8007baa <xQueueGiveFromISR+0x48>
	__asm volatile
 8007b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b98:	f383 8811 	msr	BASEPRI, r3
 8007b9c:	f3bf 8f6f 	isb	sy
 8007ba0:	f3bf 8f4f 	dsb	sy
 8007ba4:	61fb      	str	r3, [r7, #28]
}
 8007ba6:	bf00      	nop
 8007ba8:	e7fe      	b.n	8007ba8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d103      	bne.n	8007bba <xQueueGiveFromISR+0x58>
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <xQueueGiveFromISR+0x5c>
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e000      	b.n	8007bc0 <xQueueGiveFromISR+0x5e>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <xQueueGiveFromISR+0x78>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	61bb      	str	r3, [r7, #24]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bda:	f002 febd 	bl	800a958 <vPortValidateInterruptPriority>
	__asm volatile
 8007bde:	f3ef 8211 	mrs	r2, BASEPRI
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	617a      	str	r2, [r7, #20]
 8007bf4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007bf6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d22b      	bcs.n	8007c62 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c16:	1c5a      	adds	r2, r3, #1
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c24:	d112      	bne.n	8007c4c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d016      	beq.n	8007c5c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	3324      	adds	r3, #36	; 0x24
 8007c32:	4618      	mov	r0, r3
 8007c34:	f001 fb5c 	bl	80092f0 <xTaskRemoveFromEventList>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00e      	beq.n	8007c5c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00b      	beq.n	8007c5c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2201      	movs	r2, #1
 8007c48:	601a      	str	r2, [r3, #0]
 8007c4a:	e007      	b.n	8007c5c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c50:	3301      	adds	r3, #1
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	b25a      	sxtb	r2, r3
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c60:	e001      	b.n	8007c66 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c62:	2300      	movs	r3, #0
 8007c64:	637b      	str	r3, [r7, #52]	; 0x34
 8007c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c68:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f383 8811 	msr	BASEPRI, r3
}
 8007c70:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3738      	adds	r7, #56	; 0x38
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08c      	sub	sp, #48	; 0x30
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10a      	bne.n	8007cac <xQueueReceive+0x30>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	f383 8811 	msr	BASEPRI, r3
 8007c9e:	f3bf 8f6f 	isb	sy
 8007ca2:	f3bf 8f4f 	dsb	sy
 8007ca6:	623b      	str	r3, [r7, #32]
}
 8007ca8:	bf00      	nop
 8007caa:	e7fe      	b.n	8007caa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d103      	bne.n	8007cba <xQueueReceive+0x3e>
 8007cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d101      	bne.n	8007cbe <xQueueReceive+0x42>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e000      	b.n	8007cc0 <xQueueReceive+0x44>
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10a      	bne.n	8007cda <xQueueReceive+0x5e>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	61fb      	str	r3, [r7, #28]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cda:	f001 fcdb 	bl	8009694 <xTaskGetSchedulerState>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <xQueueReceive+0x6e>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <xQueueReceive+0x72>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e000      	b.n	8007cf0 <xQueueReceive+0x74>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10a      	bne.n	8007d0a <xQueueReceive+0x8e>
	__asm volatile
 8007cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf8:	f383 8811 	msr	BASEPRI, r3
 8007cfc:	f3bf 8f6f 	isb	sy
 8007d00:	f3bf 8f4f 	dsb	sy
 8007d04:	61bb      	str	r3, [r7, #24]
}
 8007d06:	bf00      	nop
 8007d08:	e7fe      	b.n	8007d08 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d0a:	f002 fd43 	bl	800a794 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d01f      	beq.n	8007d5a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d1a:	68b9      	ldr	r1, [r7, #8]
 8007d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d1e:	f000 fa1b 	bl	8008158 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d24:	1e5a      	subs	r2, r3, #1
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00f      	beq.n	8007d52 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d34:	3310      	adds	r3, #16
 8007d36:	4618      	mov	r0, r3
 8007d38:	f001 fada 	bl	80092f0 <xTaskRemoveFromEventList>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d007      	beq.n	8007d52 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d42:	4b3d      	ldr	r3, [pc, #244]	; (8007e38 <xQueueReceive+0x1bc>)
 8007d44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d48:	601a      	str	r2, [r3, #0]
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d52:	f002 fd4f 	bl	800a7f4 <vPortExitCritical>
				return pdPASS;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e069      	b.n	8007e2e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d103      	bne.n	8007d68 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d60:	f002 fd48 	bl	800a7f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d64:	2300      	movs	r3, #0
 8007d66:	e062      	b.n	8007e2e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d106      	bne.n	8007d7c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d6e:	f107 0310 	add.w	r3, r7, #16
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 fb20 	bl	80093b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d7c:	f002 fd3a 	bl	800a7f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d80:	f001 f88c 	bl	8008e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d84:	f002 fd06 	bl	800a794 <vPortEnterCritical>
 8007d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d8e:	b25b      	sxtb	r3, r3
 8007d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d94:	d103      	bne.n	8007d9e <xQueueReceive+0x122>
 8007d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007da4:	b25b      	sxtb	r3, r3
 8007da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007daa:	d103      	bne.n	8007db4 <xQueueReceive+0x138>
 8007dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007db4:	f002 fd1e 	bl	800a7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007db8:	1d3a      	adds	r2, r7, #4
 8007dba:	f107 0310 	add.w	r3, r7, #16
 8007dbe:	4611      	mov	r1, r2
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f001 fb0f 	bl	80093e4 <xTaskCheckForTimeOut>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d123      	bne.n	8007e14 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dce:	f000 fa3b 	bl	8008248 <prvIsQueueEmpty>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d017      	beq.n	8007e08 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dda:	3324      	adds	r3, #36	; 0x24
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	4611      	mov	r1, r2
 8007de0:	4618      	mov	r0, r3
 8007de2:	f001 fa35 	bl	8009250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de8:	f000 f9dc 	bl	80081a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007dec:	f001 f864 	bl	8008eb8 <xTaskResumeAll>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d189      	bne.n	8007d0a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007df6:	4b10      	ldr	r3, [pc, #64]	; (8007e38 <xQueueReceive+0x1bc>)
 8007df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	e780      	b.n	8007d0a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e0a:	f000 f9cb 	bl	80081a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e0e:	f001 f853 	bl	8008eb8 <xTaskResumeAll>
 8007e12:	e77a      	b.n	8007d0a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e16:	f000 f9c5 	bl	80081a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e1a:	f001 f84d 	bl	8008eb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e20:	f000 fa12 	bl	8008248 <prvIsQueueEmpty>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f43f af6f 	beq.w	8007d0a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3730      	adds	r7, #48	; 0x30
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	e000ed04 	.word	0xe000ed04

08007e3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b08e      	sub	sp, #56	; 0x38
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e46:	2300      	movs	r3, #0
 8007e48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10a      	bne.n	8007e6e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	623b      	str	r3, [r7, #32]
}
 8007e6a:	bf00      	nop
 8007e6c:	e7fe      	b.n	8007e6c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00a      	beq.n	8007e8c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e7a:	f383 8811 	msr	BASEPRI, r3
 8007e7e:	f3bf 8f6f 	isb	sy
 8007e82:	f3bf 8f4f 	dsb	sy
 8007e86:	61fb      	str	r3, [r7, #28]
}
 8007e88:	bf00      	nop
 8007e8a:	e7fe      	b.n	8007e8a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e8c:	f001 fc02 	bl	8009694 <xTaskGetSchedulerState>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d102      	bne.n	8007e9c <xQueueSemaphoreTake+0x60>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d101      	bne.n	8007ea0 <xQueueSemaphoreTake+0x64>
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e000      	b.n	8007ea2 <xQueueSemaphoreTake+0x66>
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10a      	bne.n	8007ebc <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eaa:	f383 8811 	msr	BASEPRI, r3
 8007eae:	f3bf 8f6f 	isb	sy
 8007eb2:	f3bf 8f4f 	dsb	sy
 8007eb6:	61bb      	str	r3, [r7, #24]
}
 8007eb8:	bf00      	nop
 8007eba:	e7fe      	b.n	8007eba <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ebc:	f002 fc6a 	bl	800a794 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d024      	beq.n	8007f16 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ece:	1e5a      	subs	r2, r3, #1
 8007ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d104      	bne.n	8007ee6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007edc:	f001 fd50 	bl	8009980 <pvTaskIncrementMutexHeldCount>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee8:	691b      	ldr	r3, [r3, #16]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d00f      	beq.n	8007f0e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	3310      	adds	r3, #16
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f001 f9fc 	bl	80092f0 <xTaskRemoveFromEventList>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d007      	beq.n	8007f0e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007efe:	4b54      	ldr	r3, [pc, #336]	; (8008050 <xQueueSemaphoreTake+0x214>)
 8007f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f0e:	f002 fc71 	bl	800a7f4 <vPortExitCritical>
				return pdPASS;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e097      	b.n	8008046 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d111      	bne.n	8007f40 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00a      	beq.n	8007f38 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	617b      	str	r3, [r7, #20]
}
 8007f34:	bf00      	nop
 8007f36:	e7fe      	b.n	8007f36 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007f38:	f002 fc5c 	bl	800a7f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e082      	b.n	8008046 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d106      	bne.n	8007f54 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f46:	f107 030c 	add.w	r3, r7, #12
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f001 fa34 	bl	80093b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f50:	2301      	movs	r3, #1
 8007f52:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f54:	f002 fc4e 	bl	800a7f4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f58:	f000 ffa0 	bl	8008e9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f5c:	f002 fc1a 	bl	800a794 <vPortEnterCritical>
 8007f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f66:	b25b      	sxtb	r3, r3
 8007f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f6c:	d103      	bne.n	8007f76 <xQueueSemaphoreTake+0x13a>
 8007f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f7c:	b25b      	sxtb	r3, r3
 8007f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f82:	d103      	bne.n	8007f8c <xQueueSemaphoreTake+0x150>
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	2200      	movs	r2, #0
 8007f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f8c:	f002 fc32 	bl	800a7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f90:	463a      	mov	r2, r7
 8007f92:	f107 030c 	add.w	r3, r7, #12
 8007f96:	4611      	mov	r1, r2
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f001 fa23 	bl	80093e4 <xTaskCheckForTimeOut>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d132      	bne.n	800800a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fa4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fa6:	f000 f94f 	bl	8008248 <prvIsQueueEmpty>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d026      	beq.n	8007ffe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d109      	bne.n	8007fcc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007fb8:	f002 fbec 	bl	800a794 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f001 fb85 	bl	80096d0 <xTaskPriorityInherit>
 8007fc6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007fc8:	f002 fc14 	bl	800a7f4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	3324      	adds	r3, #36	; 0x24
 8007fd0:	683a      	ldr	r2, [r7, #0]
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f001 f93b 	bl	8009250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fdc:	f000 f8e2 	bl	80081a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fe0:	f000 ff6a 	bl	8008eb8 <xTaskResumeAll>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	f47f af68 	bne.w	8007ebc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007fec:	4b18      	ldr	r3, [pc, #96]	; (8008050 <xQueueSemaphoreTake+0x214>)
 8007fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	f3bf 8f4f 	dsb	sy
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	e75e      	b.n	8007ebc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007ffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008000:	f000 f8d0 	bl	80081a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008004:	f000 ff58 	bl	8008eb8 <xTaskResumeAll>
 8008008:	e758      	b.n	8007ebc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800800a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800800c:	f000 f8ca 	bl	80081a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008010:	f000 ff52 	bl	8008eb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008016:	f000 f917 	bl	8008248 <prvIsQueueEmpty>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	f43f af4d 	beq.w	8007ebc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00d      	beq.n	8008044 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008028:	f002 fbb4 	bl	800a794 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800802c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800802e:	f000 f811 	bl	8008054 <prvGetDisinheritPriorityAfterTimeout>
 8008032:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800803a:	4618      	mov	r0, r3
 800803c:	f001 fc1e 	bl	800987c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008040:	f002 fbd8 	bl	800a7f4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008044:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008046:	4618      	mov	r0, r3
 8008048:	3738      	adds	r7, #56	; 0x38
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	e000ed04 	.word	0xe000ed04

08008054 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	2b00      	cmp	r3, #0
 8008062:	d006      	beq.n	8008072 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	e001      	b.n	8008076 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008072:	2300      	movs	r3, #0
 8008074:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008076:	68fb      	ldr	r3, [r7, #12]
	}
 8008078:	4618      	mov	r0, r3
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008098:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d10d      	bne.n	80080be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d14d      	bne.n	8008146 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f001 fb76 	bl	80097a0 <xTaskPriorityDisinherit>
 80080b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	609a      	str	r2, [r3, #8]
 80080bc:	e043      	b.n	8008146 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d119      	bne.n	80080f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6858      	ldr	r0, [r3, #4]
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080cc:	461a      	mov	r2, r3
 80080ce:	68b9      	ldr	r1, [r7, #8]
 80080d0:	f003 fc34 	bl	800b93c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080dc:	441a      	add	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d32b      	bcc.n	8008146 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	605a      	str	r2, [r3, #4]
 80080f6:	e026      	b.n	8008146 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	68d8      	ldr	r0, [r3, #12]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008100:	461a      	mov	r2, r3
 8008102:	68b9      	ldr	r1, [r7, #8]
 8008104:	f003 fc1a 	bl	800b93c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008110:	425b      	negs	r3, r3
 8008112:	441a      	add	r2, r3
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	68da      	ldr	r2, [r3, #12]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	429a      	cmp	r2, r3
 8008122:	d207      	bcs.n	8008134 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812c:	425b      	negs	r3, r3
 800812e:	441a      	add	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d105      	bne.n	8008146 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	3b01      	subs	r3, #1
 8008144:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800814e:	697b      	ldr	r3, [r7, #20]
}
 8008150:	4618      	mov	r0, r3
 8008152:	3718      	adds	r7, #24
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008166:	2b00      	cmp	r3, #0
 8008168:	d018      	beq.n	800819c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68da      	ldr	r2, [r3, #12]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008172:	441a      	add	r2, r3
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68da      	ldr	r2, [r3, #12]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	429a      	cmp	r2, r3
 8008182:	d303      	bcc.n	800818c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	68d9      	ldr	r1, [r3, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008194:	461a      	mov	r2, r3
 8008196:	6838      	ldr	r0, [r7, #0]
 8008198:	f003 fbd0 	bl	800b93c <memcpy>
	}
}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081ac:	f002 faf2 	bl	800a794 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081b8:	e011      	b.n	80081de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d012      	beq.n	80081e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3324      	adds	r3, #36	; 0x24
 80081c6:	4618      	mov	r0, r3
 80081c8:	f001 f892 	bl	80092f0 <xTaskRemoveFromEventList>
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081d2:	f001 f969 	bl	80094a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	3b01      	subs	r3, #1
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dce9      	bgt.n	80081ba <prvUnlockQueue+0x16>
 80081e6:	e000      	b.n	80081ea <prvUnlockQueue+0x46>
					break;
 80081e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	22ff      	movs	r2, #255	; 0xff
 80081ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081f2:	f002 faff 	bl	800a7f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081f6:	f002 facd 	bl	800a794 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008200:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008202:	e011      	b.n	8008228 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d012      	beq.n	8008232 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	3310      	adds	r3, #16
 8008210:	4618      	mov	r0, r3
 8008212:	f001 f86d 	bl	80092f0 <xTaskRemoveFromEventList>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800821c:	f001 f944 	bl	80094a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	3b01      	subs	r3, #1
 8008224:	b2db      	uxtb	r3, r3
 8008226:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008228:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800822c:	2b00      	cmp	r3, #0
 800822e:	dce9      	bgt.n	8008204 <prvUnlockQueue+0x60>
 8008230:	e000      	b.n	8008234 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008232:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	22ff      	movs	r2, #255	; 0xff
 8008238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800823c:	f002 fada 	bl	800a7f4 <vPortExitCritical>
}
 8008240:	bf00      	nop
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008250:	f002 faa0 	bl	800a794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008258:	2b00      	cmp	r3, #0
 800825a:	d102      	bne.n	8008262 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800825c:	2301      	movs	r3, #1
 800825e:	60fb      	str	r3, [r7, #12]
 8008260:	e001      	b.n	8008266 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008262:	2300      	movs	r3, #0
 8008264:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008266:	f002 fac5 	bl	800a7f4 <vPortExitCritical>

	return xReturn;
 800826a:	68fb      	ldr	r3, [r7, #12]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800827c:	f002 fa8a 	bl	800a794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008288:	429a      	cmp	r2, r3
 800828a:	d102      	bne.n	8008292 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800828c:	2301      	movs	r3, #1
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	e001      	b.n	8008296 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008292:	2300      	movs	r3, #0
 8008294:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008296:	f002 faad 	bl	800a7f4 <vPortExitCritical>

	return xReturn;
 800829a:	68fb      	ldr	r3, [r7, #12]
}
 800829c:	4618      	mov	r0, r3
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	e014      	b.n	80082de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80082b4:	4a0f      	ldr	r2, [pc, #60]	; (80082f4 <vQueueAddToRegistry+0x50>)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10b      	bne.n	80082d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80082c0:	490c      	ldr	r1, [pc, #48]	; (80082f4 <vQueueAddToRegistry+0x50>)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80082ca:	4a0a      	ldr	r2, [pc, #40]	; (80082f4 <vQueueAddToRegistry+0x50>)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	4413      	add	r3, r2
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082d6:	e006      	b.n	80082e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	3301      	adds	r3, #1
 80082dc:	60fb      	str	r3, [r7, #12]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2b07      	cmp	r3, #7
 80082e2:	d9e7      	bls.n	80082b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082e4:	bf00      	nop
 80082e6:	bf00      	nop
 80082e8:	3714      	adds	r7, #20
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	200009dc 	.word	0x200009dc

080082f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b086      	sub	sp, #24
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	60f8      	str	r0, [r7, #12]
 8008300:	60b9      	str	r1, [r7, #8]
 8008302:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008308:	f002 fa44 	bl	800a794 <vPortEnterCritical>
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008312:	b25b      	sxtb	r3, r3
 8008314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008318:	d103      	bne.n	8008322 <vQueueWaitForMessageRestricted+0x2a>
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2200      	movs	r2, #0
 800831e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008328:	b25b      	sxtb	r3, r3
 800832a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800832e:	d103      	bne.n	8008338 <vQueueWaitForMessageRestricted+0x40>
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008338:	f002 fa5c 	bl	800a7f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008340:	2b00      	cmp	r3, #0
 8008342:	d106      	bne.n	8008352 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	3324      	adds	r3, #36	; 0x24
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	68b9      	ldr	r1, [r7, #8]
 800834c:	4618      	mov	r0, r3
 800834e:	f000 ffa3 	bl	8009298 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008352:	6978      	ldr	r0, [r7, #20]
 8008354:	f7ff ff26 	bl	80081a4 <prvUnlockQueue>
	}
 8008358:	bf00      	nop
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8008360:	b580      	push	{r7, lr}
 8008362:	b08c      	sub	sp, #48	; 0x30
 8008364:	af02      	add	r7, sp, #8
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d110      	bne.n	8008394 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8008372:	2301      	movs	r3, #1
 8008374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b04      	cmp	r3, #4
 800837c:	d81b      	bhi.n	80083b6 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	61fb      	str	r3, [r7, #28]
}
 8008390:	bf00      	nop
 8008392:	e7fe      	b.n	8008392 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10a      	bne.n	80083b6 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	61bb      	str	r3, [r7, #24]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d90a      	bls.n	80083d4 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	617b      	str	r3, [r7, #20]
}
 80083d0:	bf00      	nop
 80083d2:	e7fe      	b.n	80083d2 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80083da:	2301      	movs	r3, #1
 80083dc:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	3301      	adds	r3, #1
 80083e2:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	3324      	adds	r3, #36	; 0x24
 80083e8:	4618      	mov	r0, r3
 80083ea:	f002 faf5 	bl	800a9d8 <pvPortMalloc>
 80083ee:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d00a      	beq.n	800840c <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80083f6:	6a3b      	ldr	r3, [r7, #32]
 80083f8:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80083fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	68fa      	ldr	r2, [r7, #12]
 8008406:	6a38      	ldr	r0, [r7, #32]
 8008408:	f000 fab9 	bl	800897e <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800840c:	6a3b      	ldr	r3, [r7, #32]
	}
 800840e:	4618      	mov	r0, r3
 8008410:	3728      	adds	r7, #40	; 0x28
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8008416:	b480      	push	{r7}
 8008418:	b087      	sub	sp, #28
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10a      	bne.n	800843e <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	60fb      	str	r3, [r7, #12]
}
 800843a:	bf00      	nop
 800843c:	e7fe      	b.n	800843c <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	689a      	ldr	r2, [r3, #8]
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4413      	add	r3, r2
 8008448:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	697a      	ldr	r2, [r7, #20]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	3b01      	subs	r3, #1
 8008458:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	697a      	ldr	r2, [r7, #20]
 8008460:	429a      	cmp	r2, r3
 8008462:	d304      	bcc.n	800846e <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 800846e:	697b      	ldr	r3, [r7, #20]
}
 8008470:	4618      	mov	r0, r3
 8008472:	371c      	adds	r7, #28
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b090      	sub	sp, #64	; 0x40
 8008480:	af02      	add	r7, sp, #8
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
 8008488:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	633b      	str	r3, [r7, #48]	; 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	637b      	str	r3, [r7, #52]	; 0x34

	configASSERT( pvTxData );
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <xStreamBufferSendFromISR+0x32>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	623b      	str	r3, [r7, #32]
}
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10a      	bne.n	80084ca <xStreamBufferSendFromISR+0x4e>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	61fb      	str	r3, [r7, #28]
}
 80084c6:	bf00      	nop
 80084c8:	e7fe      	b.n	80084c8 <xStreamBufferSendFromISR+0x4c>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80084ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084cc:	7f1b      	ldrb	r3, [r3, #28]
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d002      	beq.n	80084dc <xStreamBufferSendFromISR+0x60>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80084d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d8:	3304      	adds	r3, #4
 80084da:	637b      	str	r3, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80084dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084de:	f7ff ff9a 	bl	8008416 <xStreamBufferSpacesAvailable>
 80084e2:	62f8      	str	r0, [r7, #44]	; 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80084e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	687a      	ldr	r2, [r7, #4]
 80084ec:	68b9      	ldr	r1, [r7, #8]
 80084ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084f0:	f000 f835 	bl	800855e <prvWriteMessageToBuffer>
 80084f4:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 80084f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d02b      	beq.n	8008554 <xStreamBufferSendFromISR+0xd8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80084fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084fe:	f000 fa1e 	bl	800893e <prvBytesInBuffer>
 8008502:	4602      	mov	r2, r0
 8008504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	429a      	cmp	r2, r3
 800850a:	d323      	bcc.n	8008554 <xStreamBufferSendFromISR+0xd8>
	__asm volatile
 800850c:	f3ef 8211 	mrs	r2, BASEPRI
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	61ba      	str	r2, [r7, #24]
 8008522:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008524:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8008526:	627b      	str	r3, [r7, #36]	; 0x24
 8008528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00b      	beq.n	8008548 <xStreamBufferSendFromISR+0xcc>
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	6918      	ldr	r0, [r3, #16]
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	2300      	movs	r3, #0
 800853a:	2200      	movs	r2, #0
 800853c:	2100      	movs	r1, #0
 800853e:	f001 fb51 	bl	8009be4 <xTaskGenericNotifyFromISR>
 8008542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008544:	2200      	movs	r2, #0
 8008546:	611a      	str	r2, [r3, #16]
 8008548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	f383 8811 	msr	BASEPRI, r3
}
 8008552:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8008556:	4618      	mov	r0, r3
 8008558:	3738      	adds	r7, #56	; 0x38
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b086      	sub	sp, #24
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]
 800856a:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d102      	bne.n	8008578 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8008572:	2300      	movs	r3, #0
 8008574:	617b      	str	r3, [r7, #20]
 8008576:	e01d      	b.n	80085b4 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	7f1b      	ldrb	r3, [r3, #28]
 800857c:	f003 0301 	and.w	r3, r3, #1
 8008580:	2b00      	cmp	r3, #0
 8008582:	d108      	bne.n	8008596 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8008584:	2301      	movs	r3, #1
 8008586:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	4293      	cmp	r3, r2
 800858e:	bf28      	it	cs
 8008590:	4613      	movcs	r3, r2
 8008592:	607b      	str	r3, [r7, #4]
 8008594:	e00e      	b.n	80085b4 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	429a      	cmp	r2, r3
 800859c:	d308      	bcc.n	80085b0 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800859e:	2301      	movs	r3, #1
 80085a0:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80085a2:	1d3b      	adds	r3, r7, #4
 80085a4:	2204      	movs	r2, #4
 80085a6:	4619      	mov	r1, r3
 80085a8:	68f8      	ldr	r0, [r7, #12]
 80085aa:	f000 f8dc 	bl	8008766 <prvWriteBytesToBuffer>
 80085ae:	e001      	b.n	80085b4 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80085b0:	2300      	movs	r3, #0
 80085b2:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d007      	beq.n	80085ca <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	461a      	mov	r2, r3
 80085be:	68b9      	ldr	r1, [r7, #8]
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 f8d0 	bl	8008766 <prvWriteBytesToBuffer>
 80085c6:	6138      	str	r0, [r7, #16]
 80085c8:	e001      	b.n	80085ce <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80085ca:	2300      	movs	r3, #0
 80085cc:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80085ce:	693b      	ldr	r3, [r7, #16]
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b08e      	sub	sp, #56	; 0x38
 80085dc:	af02      	add	r7, sp, #8
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80085ea:	2300      	movs	r3, #0
 80085ec:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d10a      	bne.n	800860a <xStreamBufferReceive+0x32>
	__asm volatile
 80085f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085f8:	f383 8811 	msr	BASEPRI, r3
 80085fc:	f3bf 8f6f 	isb	sy
 8008600:	f3bf 8f4f 	dsb	sy
 8008604:	61fb      	str	r3, [r7, #28]
}
 8008606:	bf00      	nop
 8008608:	e7fe      	b.n	8008608 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800860a:	6a3b      	ldr	r3, [r7, #32]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <xStreamBufferReceive+0x4e>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	61bb      	str	r3, [r7, #24]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	7f1b      	ldrb	r3, [r3, #28]
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d002      	beq.n	8008638 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8008632:	2304      	movs	r3, #4
 8008634:	627b      	str	r3, [r7, #36]	; 0x24
 8008636:	e001      	b.n	800863c <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8008638:	2300      	movs	r3, #0
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d034      	beq.n	80086ac <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8008642:	f002 f8a7 	bl	800a794 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008646:	6a38      	ldr	r0, [r7, #32]
 8008648:	f000 f979 	bl	800893e <prvBytesInBuffer>
 800864c:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800864e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	429a      	cmp	r2, r3
 8008654:	d816      	bhi.n	8008684 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8008656:	2000      	movs	r0, #0
 8008658:	f001 fba8 	bl	8009dac <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800865c:	6a3b      	ldr	r3, [r7, #32]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00a      	beq.n	800867a <xStreamBufferReceive+0xa2>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	617b      	str	r3, [r7, #20]
}
 8008676:	bf00      	nop
 8008678:	e7fe      	b.n	8008678 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800867a:	f000 fffb 	bl	8009674 <xTaskGetCurrentTaskHandle>
 800867e:	4602      	mov	r2, r0
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008684:	f002 f8b6 	bl	800a7f4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008688:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800868a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868c:	429a      	cmp	r2, r3
 800868e:	d811      	bhi.n	80086b4 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2200      	movs	r2, #0
 8008694:	2100      	movs	r1, #0
 8008696:	2000      	movs	r0, #0
 8008698:	f001 f986 	bl	80099a8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800869c:	6a3b      	ldr	r3, [r7, #32]
 800869e:	2200      	movs	r2, #0
 80086a0:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80086a2:	6a38      	ldr	r0, [r7, #32]
 80086a4:	f000 f94b 	bl	800893e <prvBytesInBuffer>
 80086a8:	62b8      	str	r0, [r7, #40]	; 0x28
 80086aa:	e003      	b.n	80086b4 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80086ac:	6a38      	ldr	r0, [r7, #32]
 80086ae:	f000 f946 	bl	800893e <prvBytesInBuffer>
 80086b2:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80086b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d91d      	bls.n	80086f8 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	9300      	str	r3, [sp, #0]
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	68b9      	ldr	r1, [r7, #8]
 80086c6:	6a38      	ldr	r0, [r7, #32]
 80086c8:	f000 f81b 	bl	8008702 <prvReadMessageFromBuffer>
 80086cc:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80086ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d011      	beq.n	80086f8 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80086d4:	f000 fbe2 	bl	8008e9c <vTaskSuspendAll>
 80086d8:	6a3b      	ldr	r3, [r7, #32]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d009      	beq.n	80086f4 <xStreamBufferReceive+0x11c>
 80086e0:	6a3b      	ldr	r3, [r7, #32]
 80086e2:	6958      	ldr	r0, [r3, #20]
 80086e4:	2300      	movs	r3, #0
 80086e6:	2200      	movs	r2, #0
 80086e8:	2100      	movs	r1, #0
 80086ea:	f001 f9bd 	bl	8009a68 <xTaskGenericNotify>
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	2200      	movs	r2, #0
 80086f2:	615a      	str	r2, [r3, #20]
 80086f4:	f000 fbe0 	bl	8008eb8 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80086f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3730      	adds	r7, #48	; 0x30
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b088      	sub	sp, #32
 8008706:	af00      	add	r7, sp, #0
 8008708:	60f8      	str	r0, [r7, #12]
 800870a:	60b9      	str	r1, [r7, #8]
 800870c:	607a      	str	r2, [r7, #4]
 800870e:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8008710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008712:	2b00      	cmp	r3, #0
 8008714:	d019      	beq.n	800874a <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800871c:	f107 0110 	add.w	r1, r7, #16
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008724:	68f8      	ldr	r0, [r7, #12]
 8008726:	f000 f890 	bl	800884a <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800872e:	683a      	ldr	r2, [r7, #0]
 8008730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008732:	1ad3      	subs	r3, r2, r3
 8008734:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8008736:	69fa      	ldr	r2, [r7, #28]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	429a      	cmp	r2, r3
 800873c:	d907      	bls.n	800874e <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8008744:	2300      	movs	r3, #0
 8008746:	61fb      	str	r3, [r7, #28]
 8008748:	e001      	b.n	800874e <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	69fa      	ldr	r2, [r7, #28]
 8008752:	68b9      	ldr	r1, [r7, #8]
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 f878 	bl	800884a <prvReadBytesFromBuffer>
 800875a:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800875c:	697b      	ldr	r3, [r7, #20]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3720      	adds	r7, #32
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b08a      	sub	sp, #40	; 0x28
 800876a:	af00      	add	r7, sp, #0
 800876c:	60f8      	str	r0, [r7, #12]
 800876e:	60b9      	str	r1, [r7, #8]
 8008770:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d10a      	bne.n	800878e <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8008778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877c:	f383 8811 	msr	BASEPRI, r3
 8008780:	f3bf 8f6f 	isb	sy
 8008784:	f3bf 8f4f 	dsb	sy
 8008788:	61fb      	str	r3, [r7, #28]
}
 800878a:	bf00      	nop
 800878c:	e7fe      	b.n	800878c <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	4293      	cmp	r3, r2
 80087a0:	bf28      	it	cs
 80087a2:	4613      	movcs	r3, r2
 80087a4:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80087a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a8:	6a3b      	ldr	r3, [r7, #32]
 80087aa:	441a      	add	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d90a      	bls.n	80087ca <prvWriteBytesToBuffer+0x64>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	61bb      	str	r3, [r7, #24]
}
 80087c6:	bf00      	nop
 80087c8:	e7fe      	b.n	80087c8 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d0:	4413      	add	r3, r2
 80087d2:	6a3a      	ldr	r2, [r7, #32]
 80087d4:	68b9      	ldr	r1, [r7, #8]
 80087d6:	4618      	mov	r0, r3
 80087d8:	f003 f8b0 	bl	800b93c <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d91c      	bls.n	800881e <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	1ad2      	subs	r2, r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d90a      	bls.n	8008808 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 80087f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f6:	f383 8811 	msr	BASEPRI, r3
 80087fa:	f3bf 8f6f 	isb	sy
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	617b      	str	r3, [r7, #20]
}
 8008804:	bf00      	nop
 8008806:	e7fe      	b.n	8008806 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6998      	ldr	r0, [r3, #24]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	18d1      	adds	r1, r2, r3
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	461a      	mov	r2, r3
 800881a:	f003 f88f 	bl	800b93c <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 800881e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4413      	add	r3, r2
 8008824:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800882c:	429a      	cmp	r2, r3
 800882e:	d304      	bcc.n	800883a <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800883e:	605a      	str	r2, [r3, #4]

	return xCount;
 8008840:	687b      	ldr	r3, [r7, #4]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3728      	adds	r7, #40	; 0x28
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b08a      	sub	sp, #40	; 0x28
 800884e:	af00      	add	r7, sp, #0
 8008850:	60f8      	str	r0, [r7, #12]
 8008852:	60b9      	str	r1, [r7, #8]
 8008854:	607a      	str	r2, [r7, #4]
 8008856:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	4293      	cmp	r3, r2
 800885e:	bf28      	it	cs
 8008860:	4613      	movcs	r3, r2
 8008862:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d064      	beq.n	8008934 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	6a3a      	ldr	r2, [r7, #32]
 800887a:	4293      	cmp	r3, r2
 800887c:	bf28      	it	cs
 800887e:	4613      	movcs	r3, r2
 8008880:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8008882:	69fa      	ldr	r2, [r7, #28]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	429a      	cmp	r2, r3
 8008888:	d90a      	bls.n	80088a0 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	61bb      	str	r3, [r7, #24]
}
 800889c:	bf00      	nop
 800889e:	e7fe      	b.n	800889e <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80088a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	441a      	add	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d90a      	bls.n	80088c4 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	617b      	str	r3, [r7, #20]
}
 80088c0:	bf00      	nop
 80088c2:	e7fe      	b.n	80088c2 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	699a      	ldr	r2, [r3, #24]
 80088c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ca:	4413      	add	r3, r2
 80088cc:	69fa      	ldr	r2, [r7, #28]
 80088ce:	4619      	mov	r1, r3
 80088d0:	68b8      	ldr	r0, [r7, #8]
 80088d2:	f003 f833 	bl	800b93c <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80088d6:	6a3a      	ldr	r2, [r7, #32]
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d919      	bls.n	8008912 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80088de:	6a3a      	ldr	r2, [r7, #32]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d90a      	bls.n	80088fc <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	613b      	str	r3, [r7, #16]
}
 80088f8:	bf00      	nop
 80088fa:	e7fe      	b.n	80088fa <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	18d0      	adds	r0, r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6999      	ldr	r1, [r3, #24]
 8008906:	6a3a      	ldr	r2, [r7, #32]
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	461a      	mov	r2, r3
 800890e:	f003 f815 	bl	800b93c <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8008912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	4413      	add	r3, r2
 8008918:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008920:	429a      	cmp	r2, r3
 8008922:	d304      	bcc.n	800892e <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008932:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8008934:	6a3b      	ldr	r3, [r7, #32]
}
 8008936:	4618      	mov	r0, r3
 8008938:	3728      	adds	r7, #40	; 0x28
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800893e:	b480      	push	{r7}
 8008940:	b085      	sub	sp, #20
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	689a      	ldr	r2, [r3, #8]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	4413      	add	r3, r2
 8008950:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	1ad3      	subs	r3, r2, r3
 800895a:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	429a      	cmp	r2, r3
 8008964:	d304      	bcc.n	8008970 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8008970:	68fb      	ldr	r3, [r7, #12]
}
 8008972:	4618      	mov	r0, r3
 8008974:	3714      	adds	r7, #20
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b086      	sub	sp, #24
 8008982:	af00      	add	r7, sp, #0
 8008984:	60f8      	str	r0, [r7, #12]
 8008986:	60b9      	str	r1, [r7, #8]
 8008988:	607a      	str	r2, [r7, #4]
 800898a:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800898c:	2355      	movs	r3, #85	; 0x55
 800898e:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	6979      	ldr	r1, [r7, #20]
 8008994:	68b8      	ldr	r0, [r7, #8]
 8008996:	f002 ffdf 	bl	800b958 <memset>
 800899a:	4602      	mov	r2, r0
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	4293      	cmp	r3, r2
 80089a0:	d00a      	beq.n	80089b8 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 80089a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a6:	f383 8811 	msr	BASEPRI, r3
 80089aa:	f3bf 8f6f 	isb	sy
 80089ae:	f3bf 8f4f 	dsb	sy
 80089b2:	613b      	str	r3, [r7, #16]
}
 80089b4:	bf00      	nop
 80089b6:	e7fe      	b.n	80089b6 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80089b8:	2224      	movs	r2, #36	; 0x24
 80089ba:	2100      	movs	r1, #0
 80089bc:	68f8      	ldr	r0, [r7, #12]
 80089be:	f002 ffcb 	bl	800b958 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80089da:	771a      	strb	r2, [r3, #28]
}
 80089dc:	bf00      	nop
 80089de:	3718      	adds	r7, #24
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b08e      	sub	sp, #56	; 0x38
 80089e8:	af04      	add	r7, sp, #16
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	607a      	str	r2, [r7, #4]
 80089f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80089f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10a      	bne.n	8008a0e <xTaskCreateStatic+0x2a>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	623b      	str	r3, [r7, #32]
}
 8008a0a:	bf00      	nop
 8008a0c:	e7fe      	b.n	8008a0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d10a      	bne.n	8008a2a <xTaskCreateStatic+0x46>
	__asm volatile
 8008a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a18:	f383 8811 	msr	BASEPRI, r3
 8008a1c:	f3bf 8f6f 	isb	sy
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	61fb      	str	r3, [r7, #28]
}
 8008a26:	bf00      	nop
 8008a28:	e7fe      	b.n	8008a28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008a2a:	23cc      	movs	r3, #204	; 0xcc
 8008a2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	2bcc      	cmp	r3, #204	; 0xcc
 8008a32:	d00a      	beq.n	8008a4a <xTaskCreateStatic+0x66>
	__asm volatile
 8008a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a38:	f383 8811 	msr	BASEPRI, r3
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f3bf 8f4f 	dsb	sy
 8008a44:	61bb      	str	r3, [r7, #24]
}
 8008a46:	bf00      	nop
 8008a48:	e7fe      	b.n	8008a48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008a4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d01e      	beq.n	8008a90 <xTaskCreateStatic+0xac>
 8008a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d01b      	beq.n	8008a90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	2202      	movs	r2, #2
 8008a66:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	9303      	str	r3, [sp, #12]
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	9302      	str	r3, [sp, #8]
 8008a72:	f107 0314 	add.w	r3, r7, #20
 8008a76:	9301      	str	r3, [sp, #4]
 8008a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	68b9      	ldr	r1, [r7, #8]
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 f850 	bl	8008b28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008a88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008a8a:	f000 f8f3 	bl	8008c74 <prvAddNewTaskToReadyList>
 8008a8e:	e001      	b.n	8008a94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008a90:	2300      	movs	r3, #0
 8008a92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008a94:	697b      	ldr	r3, [r7, #20]
	}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3728      	adds	r7, #40	; 0x28
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b08c      	sub	sp, #48	; 0x30
 8008aa2:	af04      	add	r7, sp, #16
 8008aa4:	60f8      	str	r0, [r7, #12]
 8008aa6:	60b9      	str	r1, [r7, #8]
 8008aa8:	603b      	str	r3, [r7, #0]
 8008aaa:	4613      	mov	r3, r2
 8008aac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008aae:	88fb      	ldrh	r3, [r7, #6]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f001 ff90 	bl	800a9d8 <pvPortMalloc>
 8008ab8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00e      	beq.n	8008ade <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ac0:	20cc      	movs	r0, #204	; 0xcc
 8008ac2:	f001 ff89 	bl	800a9d8 <pvPortMalloc>
 8008ac6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	697a      	ldr	r2, [r7, #20]
 8008ad2:	631a      	str	r2, [r3, #48]	; 0x30
 8008ad4:	e005      	b.n	8008ae2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ad6:	6978      	ldr	r0, [r7, #20]
 8008ad8:	f002 f84a 	bl	800ab70 <vPortFree>
 8008adc:	e001      	b.n	8008ae2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d017      	beq.n	8008b18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008af0:	88fa      	ldrh	r2, [r7, #6]
 8008af2:	2300      	movs	r3, #0
 8008af4:	9303      	str	r3, [sp, #12]
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	9302      	str	r3, [sp, #8]
 8008afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afc:	9301      	str	r3, [sp, #4]
 8008afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b00:	9300      	str	r3, [sp, #0]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	68b9      	ldr	r1, [r7, #8]
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f000 f80e 	bl	8008b28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b0c:	69f8      	ldr	r0, [r7, #28]
 8008b0e:	f000 f8b1 	bl	8008c74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b12:	2301      	movs	r3, #1
 8008b14:	61bb      	str	r3, [r7, #24]
 8008b16:	e002      	b.n	8008b1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b1e:	69bb      	ldr	r3, [r7, #24]
	}
 8008b20:	4618      	mov	r0, r3
 8008b22:	3720      	adds	r7, #32
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	60f8      	str	r0, [r7, #12]
 8008b30:	60b9      	str	r1, [r7, #8]
 8008b32:	607a      	str	r2, [r7, #4]
 8008b34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	461a      	mov	r2, r3
 8008b40:	21a5      	movs	r1, #165	; 0xa5
 8008b42:	f002 ff09 	bl	800b958 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008b50:	3b01      	subs	r3, #1
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	4413      	add	r3, r2
 8008b56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	f023 0307 	bic.w	r3, r3, #7
 8008b5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	f003 0307 	and.w	r3, r3, #7
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00a      	beq.n	8008b80 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6e:	f383 8811 	msr	BASEPRI, r3
 8008b72:	f3bf 8f6f 	isb	sy
 8008b76:	f3bf 8f4f 	dsb	sy
 8008b7a:	617b      	str	r3, [r7, #20]
}
 8008b7c:	bf00      	nop
 8008b7e:	e7fe      	b.n	8008b7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d01f      	beq.n	8008bc6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008b86:	2300      	movs	r3, #0
 8008b88:	61fb      	str	r3, [r7, #28]
 8008b8a:	e012      	b.n	8008bb2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	4413      	add	r3, r2
 8008b92:	7819      	ldrb	r1, [r3, #0]
 8008b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	4413      	add	r3, r2
 8008b9a:	3334      	adds	r3, #52	; 0x34
 8008b9c:	460a      	mov	r2, r1
 8008b9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d006      	beq.n	8008bba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	61fb      	str	r3, [r7, #28]
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	2b1f      	cmp	r3, #31
 8008bb6:	d9e9      	bls.n	8008b8c <prvInitialiseNewTask+0x64>
 8008bb8:	e000      	b.n	8008bbc <prvInitialiseNewTask+0x94>
			{
				break;
 8008bba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8008bc4:	e003      	b.n	8008bce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd0:	2b37      	cmp	r3, #55	; 0x37
 8008bd2:	d901      	bls.n	8008bd8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008bd4:	2337      	movs	r3, #55	; 0x37
 8008bd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bdc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008be2:	65da      	str	r2, [r3, #92]	; 0x5c
		pxNewTCB->uxMutexesHeld = 0;
 8008be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be6:	2200      	movs	r2, #0
 8008be8:	661a      	str	r2, [r3, #96]	; 0x60
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bec:	3304      	adds	r3, #4
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7fe fc4c 	bl	800748c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bf6:	3318      	adds	r3, #24
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f7fe fc47 	bl	800748c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c16:	2200      	movs	r2, #0
 8008c18:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c26:	3364      	adds	r3, #100	; 0x64
 8008c28:	2260      	movs	r2, #96	; 0x60
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f002 fe93 	bl	800b958 <memset>
 8008c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c34:	4a0c      	ldr	r2, [pc, #48]	; (8008c68 <prvInitialiseNewTask+0x140>)
 8008c36:	669a      	str	r2, [r3, #104]	; 0x68
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	4a0c      	ldr	r2, [pc, #48]	; (8008c6c <prvInitialiseNewTask+0x144>)
 8008c3c:	66da      	str	r2, [r3, #108]	; 0x6c
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c40:	4a0b      	ldr	r2, [pc, #44]	; (8008c70 <prvInitialiseNewTask+0x148>)
 8008c42:	671a      	str	r2, [r3, #112]	; 0x70
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	68f9      	ldr	r1, [r7, #12]
 8008c48:	69b8      	ldr	r0, [r7, #24]
 8008c4a:	f001 fc77 	bl	800a53c <pxPortInitialiseStack>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c60:	bf00      	nop
 8008c62:	3720      	adds	r7, #32
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	0800bc0c 	.word	0x0800bc0c
 8008c6c:	0800bc2c 	.word	0x0800bc2c
 8008c70:	0800bbec 	.word	0x0800bbec

08008c74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008c7c:	f001 fd8a 	bl	800a794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008c80:	4b2d      	ldr	r3, [pc, #180]	; (8008d38 <prvAddNewTaskToReadyList+0xc4>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	3301      	adds	r3, #1
 8008c86:	4a2c      	ldr	r2, [pc, #176]	; (8008d38 <prvAddNewTaskToReadyList+0xc4>)
 8008c88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008c8a:	4b2c      	ldr	r3, [pc, #176]	; (8008d3c <prvAddNewTaskToReadyList+0xc8>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d109      	bne.n	8008ca6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008c92:	4a2a      	ldr	r2, [pc, #168]	; (8008d3c <prvAddNewTaskToReadyList+0xc8>)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008c98:	4b27      	ldr	r3, [pc, #156]	; (8008d38 <prvAddNewTaskToReadyList+0xc4>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d110      	bne.n	8008cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008ca0:	f000 fc26 	bl	80094f0 <prvInitialiseTaskLists>
 8008ca4:	e00d      	b.n	8008cc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008ca6:	4b26      	ldr	r3, [pc, #152]	; (8008d40 <prvAddNewTaskToReadyList+0xcc>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d109      	bne.n	8008cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cae:	4b23      	ldr	r3, [pc, #140]	; (8008d3c <prvAddNewTaskToReadyList+0xc8>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d802      	bhi.n	8008cc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008cbc:	4a1f      	ldr	r2, [pc, #124]	; (8008d3c <prvAddNewTaskToReadyList+0xc8>)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008cc2:	4b20      	ldr	r3, [pc, #128]	; (8008d44 <prvAddNewTaskToReadyList+0xd0>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	4a1e      	ldr	r2, [pc, #120]	; (8008d44 <prvAddNewTaskToReadyList+0xd0>)
 8008cca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008ccc:	4b1d      	ldr	r3, [pc, #116]	; (8008d44 <prvAddNewTaskToReadyList+0xd0>)
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	655a      	str	r2, [r3, #84]	; 0x54
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd8:	4b1b      	ldr	r3, [pc, #108]	; (8008d48 <prvAddNewTaskToReadyList+0xd4>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d903      	bls.n	8008ce8 <prvAddNewTaskToReadyList+0x74>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce4:	4a18      	ldr	r2, [pc, #96]	; (8008d48 <prvAddNewTaskToReadyList+0xd4>)
 8008ce6:	6013      	str	r3, [r2, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cec:	4613      	mov	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4a15      	ldr	r2, [pc, #84]	; (8008d4c <prvAddNewTaskToReadyList+0xd8>)
 8008cf6:	441a      	add	r2, r3
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	3304      	adds	r3, #4
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4610      	mov	r0, r2
 8008d00:	f7fe fbd1 	bl	80074a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d04:	f001 fd76 	bl	800a7f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d08:	4b0d      	ldr	r3, [pc, #52]	; (8008d40 <prvAddNewTaskToReadyList+0xcc>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00e      	beq.n	8008d2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d10:	4b0a      	ldr	r3, [pc, #40]	; (8008d3c <prvAddNewTaskToReadyList+0xc8>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d207      	bcs.n	8008d2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d1e:	4b0c      	ldr	r3, [pc, #48]	; (8008d50 <prvAddNewTaskToReadyList+0xdc>)
 8008d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	f3bf 8f4f 	dsb	sy
 8008d2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d2e:	bf00      	nop
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20000ef0 	.word	0x20000ef0
 8008d3c:	20000a1c 	.word	0x20000a1c
 8008d40:	20000efc 	.word	0x20000efc
 8008d44:	20000f0c 	.word	0x20000f0c
 8008d48:	20000ef8 	.word	0x20000ef8
 8008d4c:	20000a20 	.word	0x20000a20
 8008d50:	e000ed04 	.word	0xe000ed04

08008d54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d017      	beq.n	8008d96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d66:	4b13      	ldr	r3, [pc, #76]	; (8008db4 <vTaskDelay+0x60>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00a      	beq.n	8008d84 <vTaskDelay+0x30>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	f383 8811 	msr	BASEPRI, r3
 8008d76:	f3bf 8f6f 	isb	sy
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	60bb      	str	r3, [r7, #8]
}
 8008d80:	bf00      	nop
 8008d82:	e7fe      	b.n	8008d82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008d84:	f000 f88a 	bl	8008e9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d88:	2100      	movs	r1, #0
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f001 f834 	bl	8009df8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d90:	f000 f892 	bl	8008eb8 <xTaskResumeAll>
 8008d94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d107      	bne.n	8008dac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008d9c:	4b06      	ldr	r3, [pc, #24]	; (8008db8 <vTaskDelay+0x64>)
 8008d9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008dac:	bf00      	nop
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	20000f18 	.word	0x20000f18
 8008db8:	e000ed04 	.word	0xe000ed04

08008dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b08a      	sub	sp, #40	; 0x28
 8008dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008dca:	463a      	mov	r2, r7
 8008dcc:	1d39      	adds	r1, r7, #4
 8008dce:	f107 0308 	add.w	r3, r7, #8
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fe fb06 	bl	80073e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68ba      	ldr	r2, [r7, #8]
 8008dde:	9202      	str	r2, [sp, #8]
 8008de0:	9301      	str	r3, [sp, #4]
 8008de2:	2300      	movs	r3, #0
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	2300      	movs	r3, #0
 8008de8:	460a      	mov	r2, r1
 8008dea:	4924      	ldr	r1, [pc, #144]	; (8008e7c <vTaskStartScheduler+0xc0>)
 8008dec:	4824      	ldr	r0, [pc, #144]	; (8008e80 <vTaskStartScheduler+0xc4>)
 8008dee:	f7ff fdf9 	bl	80089e4 <xTaskCreateStatic>
 8008df2:	4603      	mov	r3, r0
 8008df4:	4a23      	ldr	r2, [pc, #140]	; (8008e84 <vTaskStartScheduler+0xc8>)
 8008df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008df8:	4b22      	ldr	r3, [pc, #136]	; (8008e84 <vTaskStartScheduler+0xc8>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d002      	beq.n	8008e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e00:	2301      	movs	r3, #1
 8008e02:	617b      	str	r3, [r7, #20]
 8008e04:	e001      	b.n	8008e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d102      	bne.n	8008e16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e10:	f001 f846 	bl	8009ea0 <xTimerCreateTimerTask>
 8008e14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d11b      	bne.n	8008e54 <vTaskStartScheduler+0x98>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	613b      	str	r3, [r7, #16]
}
 8008e2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008e30:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <vTaskStartScheduler+0xcc>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3364      	adds	r3, #100	; 0x64
 8008e36:	4a15      	ldr	r2, [pc, #84]	; (8008e8c <vTaskStartScheduler+0xd0>)
 8008e38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008e3a:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <vTaskStartScheduler+0xd4>)
 8008e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008e42:	4b14      	ldr	r3, [pc, #80]	; (8008e94 <vTaskStartScheduler+0xd8>)
 8008e44:	2201      	movs	r2, #1
 8008e46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008e48:	4b13      	ldr	r3, [pc, #76]	; (8008e98 <vTaskStartScheduler+0xdc>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008e4e:	f001 fbff 	bl	800a650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008e52:	e00e      	b.n	8008e72 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e5a:	d10a      	bne.n	8008e72 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	60fb      	str	r3, [r7, #12]
}
 8008e6e:	bf00      	nop
 8008e70:	e7fe      	b.n	8008e70 <vTaskStartScheduler+0xb4>
}
 8008e72:	bf00      	nop
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	0800bb50 	.word	0x0800bb50
 8008e80:	080094c1 	.word	0x080094c1
 8008e84:	20000f14 	.word	0x20000f14
 8008e88:	20000a1c 	.word	0x20000a1c
 8008e8c:	20000100 	.word	0x20000100
 8008e90:	20000f10 	.word	0x20000f10
 8008e94:	20000efc 	.word	0x20000efc
 8008e98:	20000ef4 	.word	0x20000ef4

08008e9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008ea0:	4b04      	ldr	r3, [pc, #16]	; (8008eb4 <vTaskSuspendAll+0x18>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	4a03      	ldr	r2, [pc, #12]	; (8008eb4 <vTaskSuspendAll+0x18>)
 8008ea8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008eaa:	bf00      	nop
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr
 8008eb4:	20000f18 	.word	0x20000f18

08008eb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008ec6:	4b42      	ldr	r3, [pc, #264]	; (8008fd0 <xTaskResumeAll+0x118>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10a      	bne.n	8008ee4 <xTaskResumeAll+0x2c>
	__asm volatile
 8008ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed2:	f383 8811 	msr	BASEPRI, r3
 8008ed6:	f3bf 8f6f 	isb	sy
 8008eda:	f3bf 8f4f 	dsb	sy
 8008ede:	603b      	str	r3, [r7, #0]
}
 8008ee0:	bf00      	nop
 8008ee2:	e7fe      	b.n	8008ee2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008ee4:	f001 fc56 	bl	800a794 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ee8:	4b39      	ldr	r3, [pc, #228]	; (8008fd0 <xTaskResumeAll+0x118>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	3b01      	subs	r3, #1
 8008eee:	4a38      	ldr	r2, [pc, #224]	; (8008fd0 <xTaskResumeAll+0x118>)
 8008ef0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ef2:	4b37      	ldr	r3, [pc, #220]	; (8008fd0 <xTaskResumeAll+0x118>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d162      	bne.n	8008fc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008efa:	4b36      	ldr	r3, [pc, #216]	; (8008fd4 <xTaskResumeAll+0x11c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d05e      	beq.n	8008fc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f02:	e02f      	b.n	8008f64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f04:	4b34      	ldr	r3, [pc, #208]	; (8008fd8 <xTaskResumeAll+0x120>)
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3318      	adds	r3, #24
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7fe fb25 	bl	8007560 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3304      	adds	r3, #4
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f7fe fb20 	bl	8007560 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f24:	4b2d      	ldr	r3, [pc, #180]	; (8008fdc <xTaskResumeAll+0x124>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d903      	bls.n	8008f34 <xTaskResumeAll+0x7c>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f30:	4a2a      	ldr	r2, [pc, #168]	; (8008fdc <xTaskResumeAll+0x124>)
 8008f32:	6013      	str	r3, [r2, #0]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f38:	4613      	mov	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4413      	add	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4a27      	ldr	r2, [pc, #156]	; (8008fe0 <xTaskResumeAll+0x128>)
 8008f42:	441a      	add	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3304      	adds	r3, #4
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4610      	mov	r0, r2
 8008f4c:	f7fe faab 	bl	80074a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f54:	4b23      	ldr	r3, [pc, #140]	; (8008fe4 <xTaskResumeAll+0x12c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d302      	bcc.n	8008f64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008f5e:	4b22      	ldr	r3, [pc, #136]	; (8008fe8 <xTaskResumeAll+0x130>)
 8008f60:	2201      	movs	r2, #1
 8008f62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f64:	4b1c      	ldr	r3, [pc, #112]	; (8008fd8 <xTaskResumeAll+0x120>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1cb      	bne.n	8008f04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008f72:	f000 fb5f 	bl	8009634 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008f76:	4b1d      	ldr	r3, [pc, #116]	; (8008fec <xTaskResumeAll+0x134>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d010      	beq.n	8008fa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008f82:	f000 f847 	bl	8009014 <xTaskIncrementTick>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008f8c:	4b16      	ldr	r3, [pc, #88]	; (8008fe8 <xTaskResumeAll+0x130>)
 8008f8e:	2201      	movs	r2, #1
 8008f90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	3b01      	subs	r3, #1
 8008f96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1f1      	bne.n	8008f82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008f9e:	4b13      	ldr	r3, [pc, #76]	; (8008fec <xTaskResumeAll+0x134>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008fa4:	4b10      	ldr	r3, [pc, #64]	; (8008fe8 <xTaskResumeAll+0x130>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d009      	beq.n	8008fc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008fac:	2301      	movs	r3, #1
 8008fae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008fb0:	4b0f      	ldr	r3, [pc, #60]	; (8008ff0 <xTaskResumeAll+0x138>)
 8008fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008fc0:	f001 fc18 	bl	800a7f4 <vPortExitCritical>

	return xAlreadyYielded;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	20000f18 	.word	0x20000f18
 8008fd4:	20000ef0 	.word	0x20000ef0
 8008fd8:	20000eb0 	.word	0x20000eb0
 8008fdc:	20000ef8 	.word	0x20000ef8
 8008fe0:	20000a20 	.word	0x20000a20
 8008fe4:	20000a1c 	.word	0x20000a1c
 8008fe8:	20000f04 	.word	0x20000f04
 8008fec:	20000f00 	.word	0x20000f00
 8008ff0:	e000ed04 	.word	0xe000ed04

08008ff4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ffa:	4b05      	ldr	r3, [pc, #20]	; (8009010 <xTaskGetTickCount+0x1c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009000:	687b      	ldr	r3, [r7, #4]
}
 8009002:	4618      	mov	r0, r3
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	20000ef4 	.word	0x20000ef4

08009014 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800901a:	2300      	movs	r3, #0
 800901c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800901e:	4b4f      	ldr	r3, [pc, #316]	; (800915c <xTaskIncrementTick+0x148>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	f040 808f 	bne.w	8009146 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009028:	4b4d      	ldr	r3, [pc, #308]	; (8009160 <xTaskIncrementTick+0x14c>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	3301      	adds	r3, #1
 800902e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009030:	4a4b      	ldr	r2, [pc, #300]	; (8009160 <xTaskIncrementTick+0x14c>)
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d120      	bne.n	800907e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800903c:	4b49      	ldr	r3, [pc, #292]	; (8009164 <xTaskIncrementTick+0x150>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00a      	beq.n	800905c <xTaskIncrementTick+0x48>
	__asm volatile
 8009046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904a:	f383 8811 	msr	BASEPRI, r3
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f3bf 8f4f 	dsb	sy
 8009056:	603b      	str	r3, [r7, #0]
}
 8009058:	bf00      	nop
 800905a:	e7fe      	b.n	800905a <xTaskIncrementTick+0x46>
 800905c:	4b41      	ldr	r3, [pc, #260]	; (8009164 <xTaskIncrementTick+0x150>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	60fb      	str	r3, [r7, #12]
 8009062:	4b41      	ldr	r3, [pc, #260]	; (8009168 <xTaskIncrementTick+0x154>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a3f      	ldr	r2, [pc, #252]	; (8009164 <xTaskIncrementTick+0x150>)
 8009068:	6013      	str	r3, [r2, #0]
 800906a:	4a3f      	ldr	r2, [pc, #252]	; (8009168 <xTaskIncrementTick+0x154>)
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6013      	str	r3, [r2, #0]
 8009070:	4b3e      	ldr	r3, [pc, #248]	; (800916c <xTaskIncrementTick+0x158>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3301      	adds	r3, #1
 8009076:	4a3d      	ldr	r2, [pc, #244]	; (800916c <xTaskIncrementTick+0x158>)
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	f000 fadb 	bl	8009634 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800907e:	4b3c      	ldr	r3, [pc, #240]	; (8009170 <xTaskIncrementTick+0x15c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	693a      	ldr	r2, [r7, #16]
 8009084:	429a      	cmp	r2, r3
 8009086:	d349      	bcc.n	800911c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009088:	4b36      	ldr	r3, [pc, #216]	; (8009164 <xTaskIncrementTick+0x150>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d104      	bne.n	800909c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009092:	4b37      	ldr	r3, [pc, #220]	; (8009170 <xTaskIncrementTick+0x15c>)
 8009094:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009098:	601a      	str	r2, [r3, #0]
					break;
 800909a:	e03f      	b.n	800911c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800909c:	4b31      	ldr	r3, [pc, #196]	; (8009164 <xTaskIncrementTick+0x150>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d203      	bcs.n	80090bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090b4:	4a2e      	ldr	r2, [pc, #184]	; (8009170 <xTaskIncrementTick+0x15c>)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090ba:	e02f      	b.n	800911c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	3304      	adds	r3, #4
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fe fa4d 	bl	8007560 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d004      	beq.n	80090d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	3318      	adds	r3, #24
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fe fa44 	bl	8007560 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090dc:	4b25      	ldr	r3, [pc, #148]	; (8009174 <xTaskIncrementTick+0x160>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	429a      	cmp	r2, r3
 80090e2:	d903      	bls.n	80090ec <xTaskIncrementTick+0xd8>
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e8:	4a22      	ldr	r2, [pc, #136]	; (8009174 <xTaskIncrementTick+0x160>)
 80090ea:	6013      	str	r3, [r2, #0]
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4a1f      	ldr	r2, [pc, #124]	; (8009178 <xTaskIncrementTick+0x164>)
 80090fa:	441a      	add	r2, r3
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	3304      	adds	r3, #4
 8009100:	4619      	mov	r1, r3
 8009102:	4610      	mov	r0, r2
 8009104:	f7fe f9cf 	bl	80074a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910c:	4b1b      	ldr	r3, [pc, #108]	; (800917c <xTaskIncrementTick+0x168>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009112:	429a      	cmp	r2, r3
 8009114:	d3b8      	bcc.n	8009088 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009116:	2301      	movs	r3, #1
 8009118:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800911a:	e7b5      	b.n	8009088 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800911c:	4b17      	ldr	r3, [pc, #92]	; (800917c <xTaskIncrementTick+0x168>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009122:	4915      	ldr	r1, [pc, #84]	; (8009178 <xTaskIncrementTick+0x164>)
 8009124:	4613      	mov	r3, r2
 8009126:	009b      	lsls	r3, r3, #2
 8009128:	4413      	add	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b01      	cmp	r3, #1
 8009132:	d901      	bls.n	8009138 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009134:	2301      	movs	r3, #1
 8009136:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009138:	4b11      	ldr	r3, [pc, #68]	; (8009180 <xTaskIncrementTick+0x16c>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d007      	beq.n	8009150 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009140:	2301      	movs	r3, #1
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	e004      	b.n	8009150 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009146:	4b0f      	ldr	r3, [pc, #60]	; (8009184 <xTaskIncrementTick+0x170>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3301      	adds	r3, #1
 800914c:	4a0d      	ldr	r2, [pc, #52]	; (8009184 <xTaskIncrementTick+0x170>)
 800914e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009150:	697b      	ldr	r3, [r7, #20]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	20000f18 	.word	0x20000f18
 8009160:	20000ef4 	.word	0x20000ef4
 8009164:	20000ea8 	.word	0x20000ea8
 8009168:	20000eac 	.word	0x20000eac
 800916c:	20000f08 	.word	0x20000f08
 8009170:	20000f10 	.word	0x20000f10
 8009174:	20000ef8 	.word	0x20000ef8
 8009178:	20000a20 	.word	0x20000a20
 800917c:	20000a1c 	.word	0x20000a1c
 8009180:	20000f04 	.word	0x20000f04
 8009184:	20000f00 	.word	0x20000f00

08009188 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800918e:	4b2a      	ldr	r3, [pc, #168]	; (8009238 <vTaskSwitchContext+0xb0>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009196:	4b29      	ldr	r3, [pc, #164]	; (800923c <vTaskSwitchContext+0xb4>)
 8009198:	2201      	movs	r2, #1
 800919a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800919c:	e046      	b.n	800922c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800919e:	4b27      	ldr	r3, [pc, #156]	; (800923c <vTaskSwitchContext+0xb4>)
 80091a0:	2200      	movs	r2, #0
 80091a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091a4:	4b26      	ldr	r3, [pc, #152]	; (8009240 <vTaskSwitchContext+0xb8>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	e010      	b.n	80091ce <vTaskSwitchContext+0x46>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10a      	bne.n	80091c8 <vTaskSwitchContext+0x40>
	__asm volatile
 80091b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b6:	f383 8811 	msr	BASEPRI, r3
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	f3bf 8f4f 	dsb	sy
 80091c2:	607b      	str	r3, [r7, #4]
}
 80091c4:	bf00      	nop
 80091c6:	e7fe      	b.n	80091c6 <vTaskSwitchContext+0x3e>
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	60fb      	str	r3, [r7, #12]
 80091ce:	491d      	ldr	r1, [pc, #116]	; (8009244 <vTaskSwitchContext+0xbc>)
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	4613      	mov	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	440b      	add	r3, r1
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0e4      	beq.n	80091ac <vTaskSwitchContext+0x24>
 80091e2:	68fa      	ldr	r2, [r7, #12]
 80091e4:	4613      	mov	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4a15      	ldr	r2, [pc, #84]	; (8009244 <vTaskSwitchContext+0xbc>)
 80091ee:	4413      	add	r3, r2
 80091f0:	60bb      	str	r3, [r7, #8]
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	685a      	ldr	r2, [r3, #4]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	605a      	str	r2, [r3, #4]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	3308      	adds	r3, #8
 8009204:	429a      	cmp	r2, r3
 8009206:	d104      	bne.n	8009212 <vTaskSwitchContext+0x8a>
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	605a      	str	r2, [r3, #4]
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	4a0b      	ldr	r2, [pc, #44]	; (8009248 <vTaskSwitchContext+0xc0>)
 800921a:	6013      	str	r3, [r2, #0]
 800921c:	4a08      	ldr	r2, [pc, #32]	; (8009240 <vTaskSwitchContext+0xb8>)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009222:	4b09      	ldr	r3, [pc, #36]	; (8009248 <vTaskSwitchContext+0xc0>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3364      	adds	r3, #100	; 0x64
 8009228:	4a08      	ldr	r2, [pc, #32]	; (800924c <vTaskSwitchContext+0xc4>)
 800922a:	6013      	str	r3, [r2, #0]
}
 800922c:	bf00      	nop
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr
 8009238:	20000f18 	.word	0x20000f18
 800923c:	20000f04 	.word	0x20000f04
 8009240:	20000ef8 	.word	0x20000ef8
 8009244:	20000a20 	.word	0x20000a20
 8009248:	20000a1c 	.word	0x20000a1c
 800924c:	20000100 	.word	0x20000100

08009250 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d10a      	bne.n	8009276 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009264:	f383 8811 	msr	BASEPRI, r3
 8009268:	f3bf 8f6f 	isb	sy
 800926c:	f3bf 8f4f 	dsb	sy
 8009270:	60fb      	str	r3, [r7, #12]
}
 8009272:	bf00      	nop
 8009274:	e7fe      	b.n	8009274 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009276:	4b07      	ldr	r3, [pc, #28]	; (8009294 <vTaskPlaceOnEventList+0x44>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3318      	adds	r3, #24
 800927c:	4619      	mov	r1, r3
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7fe f935 	bl	80074ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009284:	2101      	movs	r1, #1
 8009286:	6838      	ldr	r0, [r7, #0]
 8009288:	f000 fdb6 	bl	8009df8 <prvAddCurrentTaskToDelayedList>
}
 800928c:	bf00      	nop
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}
 8009294:	20000a1c 	.word	0x20000a1c

08009298 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009298:	b580      	push	{r7, lr}
 800929a:	b086      	sub	sp, #24
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10a      	bne.n	80092c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80092aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ae:	f383 8811 	msr	BASEPRI, r3
 80092b2:	f3bf 8f6f 	isb	sy
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	617b      	str	r3, [r7, #20]
}
 80092bc:	bf00      	nop
 80092be:	e7fe      	b.n	80092be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092c0:	4b0a      	ldr	r3, [pc, #40]	; (80092ec <vTaskPlaceOnEventListRestricted+0x54>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	3318      	adds	r3, #24
 80092c6:	4619      	mov	r1, r3
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f7fe f8ec 	bl	80074a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80092d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80092da:	6879      	ldr	r1, [r7, #4]
 80092dc:	68b8      	ldr	r0, [r7, #8]
 80092de:	f000 fd8b 	bl	8009df8 <prvAddCurrentTaskToDelayedList>
	}
 80092e2:	bf00      	nop
 80092e4:	3718      	adds	r7, #24
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	bf00      	nop
 80092ec:	20000a1c 	.word	0x20000a1c

080092f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d10a      	bne.n	800931c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	60fb      	str	r3, [r7, #12]
}
 8009318:	bf00      	nop
 800931a:	e7fe      	b.n	800931a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	3318      	adds	r3, #24
 8009320:	4618      	mov	r0, r3
 8009322:	f7fe f91d 	bl	8007560 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009326:	4b1e      	ldr	r3, [pc, #120]	; (80093a0 <xTaskRemoveFromEventList+0xb0>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d11d      	bne.n	800936a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	3304      	adds	r3, #4
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe f914 	bl	8007560 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933c:	4b19      	ldr	r3, [pc, #100]	; (80093a4 <xTaskRemoveFromEventList+0xb4>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	429a      	cmp	r2, r3
 8009342:	d903      	bls.n	800934c <xTaskRemoveFromEventList+0x5c>
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009348:	4a16      	ldr	r2, [pc, #88]	; (80093a4 <xTaskRemoveFromEventList+0xb4>)
 800934a:	6013      	str	r3, [r2, #0]
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009350:	4613      	mov	r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	4413      	add	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	4a13      	ldr	r2, [pc, #76]	; (80093a8 <xTaskRemoveFromEventList+0xb8>)
 800935a:	441a      	add	r2, r3
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	3304      	adds	r3, #4
 8009360:	4619      	mov	r1, r3
 8009362:	4610      	mov	r0, r2
 8009364:	f7fe f89f 	bl	80074a6 <vListInsertEnd>
 8009368:	e005      	b.n	8009376 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800936a:	693b      	ldr	r3, [r7, #16]
 800936c:	3318      	adds	r3, #24
 800936e:	4619      	mov	r1, r3
 8009370:	480e      	ldr	r0, [pc, #56]	; (80093ac <xTaskRemoveFromEventList+0xbc>)
 8009372:	f7fe f898 	bl	80074a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800937a:	4b0d      	ldr	r3, [pc, #52]	; (80093b0 <xTaskRemoveFromEventList+0xc0>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009380:	429a      	cmp	r2, r3
 8009382:	d905      	bls.n	8009390 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009384:	2301      	movs	r3, #1
 8009386:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009388:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <xTaskRemoveFromEventList+0xc4>)
 800938a:	2201      	movs	r2, #1
 800938c:	601a      	str	r2, [r3, #0]
 800938e:	e001      	b.n	8009394 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009390:	2300      	movs	r3, #0
 8009392:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009394:	697b      	ldr	r3, [r7, #20]
}
 8009396:	4618      	mov	r0, r3
 8009398:	3718      	adds	r7, #24
 800939a:	46bd      	mov	sp, r7
 800939c:	bd80      	pop	{r7, pc}
 800939e:	bf00      	nop
 80093a0:	20000f18 	.word	0x20000f18
 80093a4:	20000ef8 	.word	0x20000ef8
 80093a8:	20000a20 	.word	0x20000a20
 80093ac:	20000eb0 	.word	0x20000eb0
 80093b0:	20000a1c 	.word	0x20000a1c
 80093b4:	20000f04 	.word	0x20000f04

080093b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80093c0:	4b06      	ldr	r3, [pc, #24]	; (80093dc <vTaskInternalSetTimeOutState+0x24>)
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80093c8:	4b05      	ldr	r3, [pc, #20]	; (80093e0 <vTaskInternalSetTimeOutState+0x28>)
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	605a      	str	r2, [r3, #4]
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	20000f08 	.word	0x20000f08
 80093e0:	20000ef4 	.word	0x20000ef4

080093e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b088      	sub	sp, #32
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10a      	bne.n	800940a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	613b      	str	r3, [r7, #16]
}
 8009406:	bf00      	nop
 8009408:	e7fe      	b.n	8009408 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10a      	bne.n	8009426 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009414:	f383 8811 	msr	BASEPRI, r3
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	60fb      	str	r3, [r7, #12]
}
 8009422:	bf00      	nop
 8009424:	e7fe      	b.n	8009424 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009426:	f001 f9b5 	bl	800a794 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800942a:	4b1d      	ldr	r3, [pc, #116]	; (80094a0 <xTaskCheckForTimeOut+0xbc>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	1ad3      	subs	r3, r2, r3
 8009438:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009442:	d102      	bne.n	800944a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009444:	2300      	movs	r3, #0
 8009446:	61fb      	str	r3, [r7, #28]
 8009448:	e023      	b.n	8009492 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	4b15      	ldr	r3, [pc, #84]	; (80094a4 <xTaskCheckForTimeOut+0xc0>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	429a      	cmp	r2, r3
 8009454:	d007      	beq.n	8009466 <xTaskCheckForTimeOut+0x82>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	69ba      	ldr	r2, [r7, #24]
 800945c:	429a      	cmp	r2, r3
 800945e:	d302      	bcc.n	8009466 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009460:	2301      	movs	r3, #1
 8009462:	61fb      	str	r3, [r7, #28]
 8009464:	e015      	b.n	8009492 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	429a      	cmp	r2, r3
 800946e:	d20b      	bcs.n	8009488 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	1ad2      	subs	r2, r2, r3
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7ff ff9b 	bl	80093b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009482:	2300      	movs	r3, #0
 8009484:	61fb      	str	r3, [r7, #28]
 8009486:	e004      	b.n	8009492 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	2200      	movs	r2, #0
 800948c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800948e:	2301      	movs	r3, #1
 8009490:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009492:	f001 f9af 	bl	800a7f4 <vPortExitCritical>

	return xReturn;
 8009496:	69fb      	ldr	r3, [r7, #28]
}
 8009498:	4618      	mov	r0, r3
 800949a:	3720      	adds	r7, #32
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}
 80094a0:	20000ef4 	.word	0x20000ef4
 80094a4:	20000f08 	.word	0x20000f08

080094a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80094a8:	b480      	push	{r7}
 80094aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80094ac:	4b03      	ldr	r3, [pc, #12]	; (80094bc <vTaskMissedYield+0x14>)
 80094ae:	2201      	movs	r2, #1
 80094b0:	601a      	str	r2, [r3, #0]
}
 80094b2:	bf00      	nop
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	20000f04 	.word	0x20000f04

080094c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b082      	sub	sp, #8
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80094c8:	f000 f852 	bl	8009570 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80094cc:	4b06      	ldr	r3, [pc, #24]	; (80094e8 <prvIdleTask+0x28>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d9f9      	bls.n	80094c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80094d4:	4b05      	ldr	r3, [pc, #20]	; (80094ec <prvIdleTask+0x2c>)
 80094d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094da:	601a      	str	r2, [r3, #0]
 80094dc:	f3bf 8f4f 	dsb	sy
 80094e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80094e4:	e7f0      	b.n	80094c8 <prvIdleTask+0x8>
 80094e6:	bf00      	nop
 80094e8:	20000a20 	.word	0x20000a20
 80094ec:	e000ed04 	.word	0xe000ed04

080094f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80094f6:	2300      	movs	r3, #0
 80094f8:	607b      	str	r3, [r7, #4]
 80094fa:	e00c      	b.n	8009516 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	4613      	mov	r3, r2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4a12      	ldr	r2, [pc, #72]	; (8009550 <prvInitialiseTaskLists+0x60>)
 8009508:	4413      	add	r3, r2
 800950a:	4618      	mov	r0, r3
 800950c:	f7fd ff9e 	bl	800744c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	3301      	adds	r3, #1
 8009514:	607b      	str	r3, [r7, #4]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b37      	cmp	r3, #55	; 0x37
 800951a:	d9ef      	bls.n	80094fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800951c:	480d      	ldr	r0, [pc, #52]	; (8009554 <prvInitialiseTaskLists+0x64>)
 800951e:	f7fd ff95 	bl	800744c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009522:	480d      	ldr	r0, [pc, #52]	; (8009558 <prvInitialiseTaskLists+0x68>)
 8009524:	f7fd ff92 	bl	800744c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009528:	480c      	ldr	r0, [pc, #48]	; (800955c <prvInitialiseTaskLists+0x6c>)
 800952a:	f7fd ff8f 	bl	800744c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800952e:	480c      	ldr	r0, [pc, #48]	; (8009560 <prvInitialiseTaskLists+0x70>)
 8009530:	f7fd ff8c 	bl	800744c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009534:	480b      	ldr	r0, [pc, #44]	; (8009564 <prvInitialiseTaskLists+0x74>)
 8009536:	f7fd ff89 	bl	800744c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800953a:	4b0b      	ldr	r3, [pc, #44]	; (8009568 <prvInitialiseTaskLists+0x78>)
 800953c:	4a05      	ldr	r2, [pc, #20]	; (8009554 <prvInitialiseTaskLists+0x64>)
 800953e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009540:	4b0a      	ldr	r3, [pc, #40]	; (800956c <prvInitialiseTaskLists+0x7c>)
 8009542:	4a05      	ldr	r2, [pc, #20]	; (8009558 <prvInitialiseTaskLists+0x68>)
 8009544:	601a      	str	r2, [r3, #0]
}
 8009546:	bf00      	nop
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	20000a20 	.word	0x20000a20
 8009554:	20000e80 	.word	0x20000e80
 8009558:	20000e94 	.word	0x20000e94
 800955c:	20000eb0 	.word	0x20000eb0
 8009560:	20000ec4 	.word	0x20000ec4
 8009564:	20000edc 	.word	0x20000edc
 8009568:	20000ea8 	.word	0x20000ea8
 800956c:	20000eac 	.word	0x20000eac

08009570 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009576:	e019      	b.n	80095ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009578:	f001 f90c 	bl	800a794 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800957c:	4b10      	ldr	r3, [pc, #64]	; (80095c0 <prvCheckTasksWaitingTermination+0x50>)
 800957e:	68db      	ldr	r3, [r3, #12]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3304      	adds	r3, #4
 8009588:	4618      	mov	r0, r3
 800958a:	f7fd ffe9 	bl	8007560 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800958e:	4b0d      	ldr	r3, [pc, #52]	; (80095c4 <prvCheckTasksWaitingTermination+0x54>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3b01      	subs	r3, #1
 8009594:	4a0b      	ldr	r2, [pc, #44]	; (80095c4 <prvCheckTasksWaitingTermination+0x54>)
 8009596:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009598:	4b0b      	ldr	r3, [pc, #44]	; (80095c8 <prvCheckTasksWaitingTermination+0x58>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	3b01      	subs	r3, #1
 800959e:	4a0a      	ldr	r2, [pc, #40]	; (80095c8 <prvCheckTasksWaitingTermination+0x58>)
 80095a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80095a2:	f001 f927 	bl	800a7f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f810 	bl	80095cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095ac:	4b06      	ldr	r3, [pc, #24]	; (80095c8 <prvCheckTasksWaitingTermination+0x58>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1e1      	bne.n	8009578 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80095b4:	bf00      	nop
 80095b6:	bf00      	nop
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20000ec4 	.word	0x20000ec4
 80095c4:	20000ef0 	.word	0x20000ef0
 80095c8:	20000ed8 	.word	0x20000ed8

080095cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3364      	adds	r3, #100	; 0x64
 80095d8:	4618      	mov	r0, r3
 80095da:	f002 f9d3 	bl	800b984 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d108      	bne.n	80095fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ec:	4618      	mov	r0, r3
 80095ee:	f001 fabf 	bl	800ab70 <vPortFree>
				vPortFree( pxTCB );
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f001 fabc 	bl	800ab70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80095f8:	e018      	b.n	800962c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8009600:	2b01      	cmp	r3, #1
 8009602:	d103      	bne.n	800960c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f001 fab3 	bl	800ab70 <vPortFree>
	}
 800960a:	e00f      	b.n	800962c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 30c9 	ldrb.w	r3, [r3, #201]	; 0xc9
 8009612:	2b02      	cmp	r3, #2
 8009614:	d00a      	beq.n	800962c <prvDeleteTCB+0x60>
	__asm volatile
 8009616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	60fb      	str	r3, [r7, #12]
}
 8009628:	bf00      	nop
 800962a:	e7fe      	b.n	800962a <prvDeleteTCB+0x5e>
	}
 800962c:	bf00      	nop
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800963a:	4b0c      	ldr	r3, [pc, #48]	; (800966c <prvResetNextTaskUnblockTime+0x38>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d104      	bne.n	800964e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009644:	4b0a      	ldr	r3, [pc, #40]	; (8009670 <prvResetNextTaskUnblockTime+0x3c>)
 8009646:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800964a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800964c:	e008      	b.n	8009660 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800964e:	4b07      	ldr	r3, [pc, #28]	; (800966c <prvResetNextTaskUnblockTime+0x38>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	68db      	ldr	r3, [r3, #12]
 8009656:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	4a04      	ldr	r2, [pc, #16]	; (8009670 <prvResetNextTaskUnblockTime+0x3c>)
 800965e:	6013      	str	r3, [r2, #0]
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr
 800966c:	20000ea8 	.word	0x20000ea8
 8009670:	20000f10 	.word	0x20000f10

08009674 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800967a:	4b05      	ldr	r3, [pc, #20]	; (8009690 <xTaskGetCurrentTaskHandle+0x1c>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009680:	687b      	ldr	r3, [r7, #4]
	}
 8009682:	4618      	mov	r0, r3
 8009684:	370c      	adds	r7, #12
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	20000a1c 	.word	0x20000a1c

08009694 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800969a:	4b0b      	ldr	r3, [pc, #44]	; (80096c8 <xTaskGetSchedulerState+0x34>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d102      	bne.n	80096a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096a2:	2301      	movs	r3, #1
 80096a4:	607b      	str	r3, [r7, #4]
 80096a6:	e008      	b.n	80096ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096a8:	4b08      	ldr	r3, [pc, #32]	; (80096cc <xTaskGetSchedulerState+0x38>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d102      	bne.n	80096b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096b0:	2302      	movs	r3, #2
 80096b2:	607b      	str	r3, [r7, #4]
 80096b4:	e001      	b.n	80096ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096b6:	2300      	movs	r3, #0
 80096b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096ba:	687b      	ldr	r3, [r7, #4]
	}
 80096bc:	4618      	mov	r0, r3
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr
 80096c8:	20000efc 	.word	0x20000efc
 80096cc:	20000f18 	.word	0x20000f18

080096d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80096dc:	2300      	movs	r3, #0
 80096de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d051      	beq.n	800978a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ea:	4b2a      	ldr	r3, [pc, #168]	; (8009794 <xTaskPriorityInherit+0xc4>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d241      	bcs.n	8009778 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	db06      	blt.n	800970a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096fc:	4b25      	ldr	r3, [pc, #148]	; (8009794 <xTaskPriorityInherit+0xc4>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009702:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	6959      	ldr	r1, [r3, #20]
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009712:	4613      	mov	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	4413      	add	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4a1f      	ldr	r2, [pc, #124]	; (8009798 <xTaskPriorityInherit+0xc8>)
 800971c:	4413      	add	r3, r2
 800971e:	4299      	cmp	r1, r3
 8009720:	d122      	bne.n	8009768 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	3304      	adds	r3, #4
 8009726:	4618      	mov	r0, r3
 8009728:	f7fd ff1a 	bl	8007560 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800972c:	4b19      	ldr	r3, [pc, #100]	; (8009794 <xTaskPriorityInherit+0xc4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973a:	4b18      	ldr	r3, [pc, #96]	; (800979c <xTaskPriorityInherit+0xcc>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	429a      	cmp	r2, r3
 8009740:	d903      	bls.n	800974a <xTaskPriorityInherit+0x7a>
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009746:	4a15      	ldr	r2, [pc, #84]	; (800979c <xTaskPriorityInherit+0xcc>)
 8009748:	6013      	str	r3, [r2, #0]
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974e:	4613      	mov	r3, r2
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	4a10      	ldr	r2, [pc, #64]	; (8009798 <xTaskPriorityInherit+0xc8>)
 8009758:	441a      	add	r2, r3
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	3304      	adds	r3, #4
 800975e:	4619      	mov	r1, r3
 8009760:	4610      	mov	r0, r2
 8009762:	f7fd fea0 	bl	80074a6 <vListInsertEnd>
 8009766:	e004      	b.n	8009772 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009768:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <xTaskPriorityInherit+0xc4>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009772:	2301      	movs	r3, #1
 8009774:	60fb      	str	r3, [r7, #12]
 8009776:	e008      	b.n	800978a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800977c:	4b05      	ldr	r3, [pc, #20]	; (8009794 <xTaskPriorityInherit+0xc4>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009782:	429a      	cmp	r2, r3
 8009784:	d201      	bcs.n	800978a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009786:	2301      	movs	r3, #1
 8009788:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800978a:	68fb      	ldr	r3, [r7, #12]
	}
 800978c:	4618      	mov	r0, r3
 800978e:	3710      	adds	r7, #16
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}
 8009794:	20000a1c 	.word	0x20000a1c
 8009798:	20000a20 	.word	0x20000a20
 800979c:	20000ef8 	.word	0x20000ef8

080097a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80097ac:	2300      	movs	r3, #0
 80097ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d056      	beq.n	8009864 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097b6:	4b2e      	ldr	r3, [pc, #184]	; (8009870 <xTaskPriorityDisinherit+0xd0>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d00a      	beq.n	80097d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	60fb      	str	r3, [r7, #12]
}
 80097d2:	bf00      	nop
 80097d4:	e7fe      	b.n	80097d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10a      	bne.n	80097f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	60bb      	str	r3, [r7, #8]
}
 80097f0:	bf00      	nop
 80097f2:	e7fe      	b.n	80097f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097f8:	1e5a      	subs	r2, r3, #1
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	661a      	str	r2, [r3, #96]	; 0x60

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009806:	429a      	cmp	r2, r3
 8009808:	d02c      	beq.n	8009864 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800980e:	2b00      	cmp	r3, #0
 8009810:	d128      	bne.n	8009864 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	3304      	adds	r3, #4
 8009816:	4618      	mov	r0, r3
 8009818:	f7fd fea2 	bl	8007560 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009828:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009834:	4b0f      	ldr	r3, [pc, #60]	; (8009874 <xTaskPriorityDisinherit+0xd4>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	429a      	cmp	r2, r3
 800983a:	d903      	bls.n	8009844 <xTaskPriorityDisinherit+0xa4>
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009840:	4a0c      	ldr	r2, [pc, #48]	; (8009874 <xTaskPriorityDisinherit+0xd4>)
 8009842:	6013      	str	r3, [r2, #0]
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009848:	4613      	mov	r3, r2
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	4413      	add	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4a09      	ldr	r2, [pc, #36]	; (8009878 <xTaskPriorityDisinherit+0xd8>)
 8009852:	441a      	add	r2, r3
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	3304      	adds	r3, #4
 8009858:	4619      	mov	r1, r3
 800985a:	4610      	mov	r0, r2
 800985c:	f7fd fe23 	bl	80074a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009860:	2301      	movs	r3, #1
 8009862:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009864:	697b      	ldr	r3, [r7, #20]
	}
 8009866:	4618      	mov	r0, r3
 8009868:	3718      	adds	r7, #24
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	20000a1c 	.word	0x20000a1c
 8009874:	20000ef8 	.word	0x20000ef8
 8009878:	20000a20 	.word	0x20000a20

0800987c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800987c:	b580      	push	{r7, lr}
 800987e:	b088      	sub	sp, #32
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800988a:	2301      	movs	r3, #1
 800988c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d06a      	beq.n	800996a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009894:	69bb      	ldr	r3, [r7, #24]
 8009896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009898:	2b00      	cmp	r3, #0
 800989a:	d10a      	bne.n	80098b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800989c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a0:	f383 8811 	msr	BASEPRI, r3
 80098a4:	f3bf 8f6f 	isb	sy
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	60fb      	str	r3, [r7, #12]
}
 80098ae:	bf00      	nop
 80098b0:	e7fe      	b.n	80098b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098b6:	683a      	ldr	r2, [r7, #0]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d902      	bls.n	80098c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	61fb      	str	r3, [r7, #28]
 80098c0:	e002      	b.n	80098c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098cc:	69fa      	ldr	r2, [r7, #28]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d04b      	beq.n	800996a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d146      	bne.n	800996a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80098dc:	4b25      	ldr	r3, [pc, #148]	; (8009974 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	69ba      	ldr	r2, [r7, #24]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d10a      	bne.n	80098fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	60bb      	str	r3, [r7, #8]
}
 80098f8:	bf00      	nop
 80098fa:	e7fe      	b.n	80098fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009900:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	69fa      	ldr	r2, [r7, #28]
 8009906:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	2b00      	cmp	r3, #0
 800990e:	db04      	blt.n	800991a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	6959      	ldr	r1, [r3, #20]
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	4613      	mov	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4a13      	ldr	r2, [pc, #76]	; (8009978 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800992a:	4413      	add	r3, r2
 800992c:	4299      	cmp	r1, r3
 800992e:	d11c      	bne.n	800996a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	3304      	adds	r3, #4
 8009934:	4618      	mov	r0, r3
 8009936:	f7fd fe13 	bl	8007560 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800993a:	69bb      	ldr	r3, [r7, #24]
 800993c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800993e:	4b0f      	ldr	r3, [pc, #60]	; (800997c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	429a      	cmp	r2, r3
 8009944:	d903      	bls.n	800994e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994a:	4a0c      	ldr	r2, [pc, #48]	; (800997c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800994c:	6013      	str	r3, [r2, #0]
 800994e:	69bb      	ldr	r3, [r7, #24]
 8009950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009952:	4613      	mov	r3, r2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	009b      	lsls	r3, r3, #2
 800995a:	4a07      	ldr	r2, [pc, #28]	; (8009978 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800995c:	441a      	add	r2, r3
 800995e:	69bb      	ldr	r3, [r7, #24]
 8009960:	3304      	adds	r3, #4
 8009962:	4619      	mov	r1, r3
 8009964:	4610      	mov	r0, r2
 8009966:	f7fd fd9e 	bl	80074a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800996a:	bf00      	nop
 800996c:	3720      	adds	r7, #32
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	20000a1c 	.word	0x20000a1c
 8009978:	20000a20 	.word	0x20000a20
 800997c:	20000ef8 	.word	0x20000ef8

08009980 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009980:	b480      	push	{r7}
 8009982:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009984:	4b07      	ldr	r3, [pc, #28]	; (80099a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d004      	beq.n	8009996 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800998c:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009992:	3201      	adds	r2, #1
 8009994:	661a      	str	r2, [r3, #96]	; 0x60
		}

		return pxCurrentTCB;
 8009996:	4b03      	ldr	r3, [pc, #12]	; (80099a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009998:	681b      	ldr	r3, [r3, #0]
	}
 800999a:	4618      	mov	r0, r3
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	20000a1c 	.word	0x20000a1c

080099a8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b086      	sub	sp, #24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	607a      	str	r2, [r7, #4]
 80099b4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80099b6:	f000 feed 	bl	800a794 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80099ba:	4b29      	ldr	r3, [pc, #164]	; (8009a60 <xTaskNotifyWait+0xb8>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	d01c      	beq.n	8009a02 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80099c8:	4b25      	ldr	r3, [pc, #148]	; (8009a60 <xTaskNotifyWait+0xb8>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	43d2      	mvns	r2, r2
 80099d4:	400a      	ands	r2, r1
 80099d6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80099da:	4b21      	ldr	r3, [pc, #132]	; (8009a60 <xTaskNotifyWait+0xb8>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

				if( xTicksToWait > ( TickType_t ) 0 )
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00b      	beq.n	8009a02 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80099ea:	2101      	movs	r1, #1
 80099ec:	6838      	ldr	r0, [r7, #0]
 80099ee:	f000 fa03 	bl	8009df8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80099f2:	4b1c      	ldr	r3, [pc, #112]	; (8009a64 <xTaskNotifyWait+0xbc>)
 80099f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f8:	601a      	str	r2, [r3, #0]
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009a02:	f000 fef7 	bl	800a7f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009a06:	f000 fec5 	bl	800a794 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d005      	beq.n	8009a1c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009a10:	4b13      	ldr	r3, [pc, #76]	; (8009a60 <xTaskNotifyWait+0xb8>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009a1c:	4b10      	ldr	r3, [pc, #64]	; (8009a60 <xTaskNotifyWait+0xb8>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d002      	beq.n	8009a30 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	617b      	str	r3, [r7, #20]
 8009a2e:	e00a      	b.n	8009a46 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8009a30:	4b0b      	ldr	r3, [pc, #44]	; (8009a60 <xTaskNotifyWait+0xb8>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 8009a38:	68ba      	ldr	r2, [r7, #8]
 8009a3a:	43d2      	mvns	r2, r2
 8009a3c:	400a      	ands	r2, r1
 8009a3e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
				xReturn = pdTRUE;
 8009a42:	2301      	movs	r3, #1
 8009a44:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a46:	4b06      	ldr	r3, [pc, #24]	; (8009a60 <xTaskNotifyWait+0xb8>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
		}
		taskEXIT_CRITICAL();
 8009a50:	f000 fed0 	bl	800a7f4 <vPortExitCritical>

		return xReturn;
 8009a54:	697b      	ldr	r3, [r7, #20]
	}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20000a1c 	.word	0x20000a1c
 8009a64:	e000ed04 	.word	0xe000ed04

08009a68 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b08a      	sub	sp, #40	; 0x28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	603b      	str	r3, [r7, #0]
 8009a74:	4613      	mov	r3, r2
 8009a76:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10a      	bne.n	8009a98 <xTaskGenericNotify+0x30>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	61bb      	str	r3, [r7, #24]
}
 8009a94:	bf00      	nop
 8009a96:	e7fe      	b.n	8009a96 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8009a9c:	f000 fe7a 	bl	800a794 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d004      	beq.n	8009ab0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
 8009ab2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8009ab6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009ab8:	6a3b      	ldr	r3, [r7, #32]
 8009aba:	2202      	movs	r2, #2
 8009abc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 8009ac0:	79fb      	ldrb	r3, [r7, #7]
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	d82d      	bhi.n	8009b22 <xTaskGenericNotify+0xba>
 8009ac6:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <xTaskGenericNotify+0x64>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009b45 	.word	0x08009b45
 8009ad0:	08009ae1 	.word	0x08009ae1
 8009ad4:	08009af3 	.word	0x08009af3
 8009ad8:	08009b03 	.word	0x08009b03
 8009adc:	08009b0d 	.word	0x08009b0d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	431a      	orrs	r2, r3
 8009aea:	6a3b      	ldr	r3, [r7, #32]
 8009aec:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8009af0:	e02b      	b.n	8009b4a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009af8:	1c5a      	adds	r2, r3, #1
 8009afa:	6a3b      	ldr	r3, [r7, #32]
 8009afc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8009b00:	e023      	b.n	8009b4a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8009b0a:	e01e      	b.n	8009b4a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009b0c:	7ffb      	ldrb	r3, [r7, #31]
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d004      	beq.n	8009b1c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009b12:	6a3b      	ldr	r3, [r7, #32]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009b1a:	e016      	b.n	8009b4a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009b20:	e013      	b.n	8009b4a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b2c:	d00c      	beq.n	8009b48 <xTaskGenericNotify+0xe0>
	__asm volatile
 8009b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b32:	f383 8811 	msr	BASEPRI, r3
 8009b36:	f3bf 8f6f 	isb	sy
 8009b3a:	f3bf 8f4f 	dsb	sy
 8009b3e:	617b      	str	r3, [r7, #20]
}
 8009b40:	bf00      	nop
 8009b42:	e7fe      	b.n	8009b42 <xTaskGenericNotify+0xda>
					break;
 8009b44:	bf00      	nop
 8009b46:	e000      	b.n	8009b4a <xTaskGenericNotify+0xe2>

					break;
 8009b48:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009b4a:	7ffb      	ldrb	r3, [r7, #31]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d13a      	bne.n	8009bc6 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b50:	6a3b      	ldr	r3, [r7, #32]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fd fd03 	bl	8007560 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b5e:	4b1d      	ldr	r3, [pc, #116]	; (8009bd4 <xTaskGenericNotify+0x16c>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d903      	bls.n	8009b6e <xTaskGenericNotify+0x106>
 8009b66:	6a3b      	ldr	r3, [r7, #32]
 8009b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b6a:	4a1a      	ldr	r2, [pc, #104]	; (8009bd4 <xTaskGenericNotify+0x16c>)
 8009b6c:	6013      	str	r3, [r2, #0]
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b72:	4613      	mov	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4413      	add	r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4a17      	ldr	r2, [pc, #92]	; (8009bd8 <xTaskGenericNotify+0x170>)
 8009b7c:	441a      	add	r2, r3
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	3304      	adds	r3, #4
 8009b82:	4619      	mov	r1, r3
 8009b84:	4610      	mov	r0, r2
 8009b86:	f7fd fc8e 	bl	80074a6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00a      	beq.n	8009ba8 <xTaskGenericNotify+0x140>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	613b      	str	r3, [r7, #16]
}
 8009ba4:	bf00      	nop
 8009ba6:	e7fe      	b.n	8009ba6 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009ba8:	6a3b      	ldr	r3, [r7, #32]
 8009baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bac:	4b0b      	ldr	r3, [pc, #44]	; (8009bdc <xTaskGenericNotify+0x174>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d907      	bls.n	8009bc6 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8009bb6:	4b0a      	ldr	r3, [pc, #40]	; (8009be0 <xTaskGenericNotify+0x178>)
 8009bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bbc:	601a      	str	r2, [r3, #0]
 8009bbe:	f3bf 8f4f 	dsb	sy
 8009bc2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009bc6:	f000 fe15 	bl	800a7f4 <vPortExitCritical>

		return xReturn;
 8009bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3728      	adds	r7, #40	; 0x28
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20000ef8 	.word	0x20000ef8
 8009bd8:	20000a20 	.word	0x20000a20
 8009bdc:	20000a1c 	.word	0x20000a1c
 8009be0:	e000ed04 	.word	0xe000ed04

08009be4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b08e      	sub	sp, #56	; 0x38
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	603b      	str	r3, [r7, #0]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d10a      	bne.n	8009c14 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8009bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c10:	bf00      	nop
 8009c12:	e7fe      	b.n	8009c12 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c14:	f000 fea0 	bl	800a958 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8009c1c:	f3ef 8211 	mrs	r2, BASEPRI
 8009c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	623a      	str	r2, [r7, #32]
 8009c32:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8009c34:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c36:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d004      	beq.n	8009c48 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8009c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c54:	2202      	movs	r2, #2
 8009c56:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

			switch( eAction )
 8009c5a:	79fb      	ldrb	r3, [r7, #7]
 8009c5c:	2b04      	cmp	r3, #4
 8009c5e:	d82f      	bhi.n	8009cc0 <xTaskGenericNotifyFromISR+0xdc>
 8009c60:	a201      	add	r2, pc, #4	; (adr r2, 8009c68 <xTaskGenericNotifyFromISR+0x84>)
 8009c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c66:	bf00      	nop
 8009c68:	08009ce3 	.word	0x08009ce3
 8009c6c:	08009c7d 	.word	0x08009c7d
 8009c70:	08009c8f 	.word	0x08009c8f
 8009c74:	08009c9f 	.word	0x08009c9f
 8009c78:	08009ca9 	.word	0x08009ca9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c7e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	431a      	orrs	r2, r3
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8009c8c:	e02c      	b.n	8009ce8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c90:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009c94:	1c5a      	adds	r2, r3, #1
 8009c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c98:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8009c9c:	e024      	b.n	8009ce8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					break;
 8009ca6:	e01f      	b.n	8009ce8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009ca8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cac:	2b02      	cmp	r3, #2
 8009cae:	d004      	beq.n	8009cba <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009cb8:	e016      	b.n	8009ce8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8009cbe:	e013      	b.n	8009ce8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8009cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cca:	d00c      	beq.n	8009ce6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	61bb      	str	r3, [r7, #24]
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8009ce2:	bf00      	nop
 8009ce4:	e000      	b.n	8009ce8 <xTaskGenericNotifyFromISR+0x104>
					break;
 8009ce6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009ce8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d146      	bne.n	8009d7e <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00a      	beq.n	8009d0e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8009cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfc:	f383 8811 	msr	BASEPRI, r3
 8009d00:	f3bf 8f6f 	isb	sy
 8009d04:	f3bf 8f4f 	dsb	sy
 8009d08:	617b      	str	r3, [r7, #20]
}
 8009d0a:	bf00      	nop
 8009d0c:	e7fe      	b.n	8009d0c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d0e:	4b21      	ldr	r3, [pc, #132]	; (8009d94 <xTaskGenericNotifyFromISR+0x1b0>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d11d      	bne.n	8009d52 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d18:	3304      	adds	r3, #4
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fd fc20 	bl	8007560 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d24:	4b1c      	ldr	r3, [pc, #112]	; (8009d98 <xTaskGenericNotifyFromISR+0x1b4>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d903      	bls.n	8009d34 <xTaskGenericNotifyFromISR+0x150>
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d30:	4a19      	ldr	r2, [pc, #100]	; (8009d98 <xTaskGenericNotifyFromISR+0x1b4>)
 8009d32:	6013      	str	r3, [r2, #0]
 8009d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d38:	4613      	mov	r3, r2
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4413      	add	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	4a16      	ldr	r2, [pc, #88]	; (8009d9c <xTaskGenericNotifyFromISR+0x1b8>)
 8009d42:	441a      	add	r2, r3
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	3304      	adds	r3, #4
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	f7fd fbab 	bl	80074a6 <vListInsertEnd>
 8009d50:	e005      	b.n	8009d5e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	3318      	adds	r3, #24
 8009d56:	4619      	mov	r1, r3
 8009d58:	4811      	ldr	r0, [pc, #68]	; (8009da0 <xTaskGenericNotifyFromISR+0x1bc>)
 8009d5a:	f7fd fba4 	bl	80074a6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d62:	4b10      	ldr	r3, [pc, #64]	; (8009da4 <xTaskGenericNotifyFromISR+0x1c0>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d908      	bls.n	8009d7e <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8009d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d74:	2201      	movs	r2, #1
 8009d76:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009d78:	4b0b      	ldr	r3, [pc, #44]	; (8009da8 <xTaskGenericNotifyFromISR+0x1c4>)
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	601a      	str	r2, [r3, #0]
 8009d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d80:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	f383 8811 	msr	BASEPRI, r3
}
 8009d88:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8009d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3738      	adds	r7, #56	; 0x38
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	20000f18 	.word	0x20000f18
 8009d98:	20000ef8 	.word	0x20000ef8
 8009d9c:	20000a20 	.word	0x20000a20
 8009da0:	20000eb0 	.word	0x20000eb0
 8009da4:	20000a1c 	.word	0x20000a1c
 8009da8:	20000f04 	.word	0x20000f04

08009dac <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d102      	bne.n	8009dc0 <xTaskNotifyStateClear+0x14>
 8009dba:	4b0e      	ldr	r3, [pc, #56]	; (8009df4 <xTaskNotifyStateClear+0x48>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	e000      	b.n	8009dc2 <xTaskNotifyStateClear+0x16>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8009dc4:	f000 fce6 	bl	800a794 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	d106      	bne.n	8009de2 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
				xReturn = pdPASS;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	60fb      	str	r3, [r7, #12]
 8009de0:	e001      	b.n	8009de6 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8009de2:	2300      	movs	r3, #0
 8009de4:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8009de6:	f000 fd05 	bl	800a7f4 <vPortExitCritical>

		return xReturn;
 8009dea:	68fb      	ldr	r3, [r7, #12]
	}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3710      	adds	r7, #16
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	20000a1c 	.word	0x20000a1c

08009df8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b084      	sub	sp, #16
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009e02:	4b21      	ldr	r3, [pc, #132]	; (8009e88 <prvAddCurrentTaskToDelayedList+0x90>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e08:	4b20      	ldr	r3, [pc, #128]	; (8009e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fd fba6 	bl	8007560 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e1a:	d10a      	bne.n	8009e32 <prvAddCurrentTaskToDelayedList+0x3a>
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d007      	beq.n	8009e32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e22:	4b1a      	ldr	r3, [pc, #104]	; (8009e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3304      	adds	r3, #4
 8009e28:	4619      	mov	r1, r3
 8009e2a:	4819      	ldr	r0, [pc, #100]	; (8009e90 <prvAddCurrentTaskToDelayedList+0x98>)
 8009e2c:	f7fd fb3b 	bl	80074a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e30:	e026      	b.n	8009e80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4413      	add	r3, r2
 8009e38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e3a:	4b14      	ldr	r3, [pc, #80]	; (8009e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	68ba      	ldr	r2, [r7, #8]
 8009e40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d209      	bcs.n	8009e5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e4a:	4b12      	ldr	r3, [pc, #72]	; (8009e94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	4b0f      	ldr	r3, [pc, #60]	; (8009e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	3304      	adds	r3, #4
 8009e54:	4619      	mov	r1, r3
 8009e56:	4610      	mov	r0, r2
 8009e58:	f7fd fb49 	bl	80074ee <vListInsert>
}
 8009e5c:	e010      	b.n	8009e80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e5e:	4b0e      	ldr	r3, [pc, #56]	; (8009e98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	4b0a      	ldr	r3, [pc, #40]	; (8009e8c <prvAddCurrentTaskToDelayedList+0x94>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	3304      	adds	r3, #4
 8009e68:	4619      	mov	r1, r3
 8009e6a:	4610      	mov	r0, r2
 8009e6c:	f7fd fb3f 	bl	80074ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e70:	4b0a      	ldr	r3, [pc, #40]	; (8009e9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	68ba      	ldr	r2, [r7, #8]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d202      	bcs.n	8009e80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e7a:	4a08      	ldr	r2, [pc, #32]	; (8009e9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	6013      	str	r3, [r2, #0]
}
 8009e80:	bf00      	nop
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	20000ef4 	.word	0x20000ef4
 8009e8c:	20000a1c 	.word	0x20000a1c
 8009e90:	20000edc 	.word	0x20000edc
 8009e94:	20000eac 	.word	0x20000eac
 8009e98:	20000ea8 	.word	0x20000ea8
 8009e9c:	20000f10 	.word	0x20000f10

08009ea0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08a      	sub	sp, #40	; 0x28
 8009ea4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009eaa:	f000 fb07 	bl	800a4bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009eae:	4b1c      	ldr	r3, [pc, #112]	; (8009f20 <xTimerCreateTimerTask+0x80>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d021      	beq.n	8009efa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009ebe:	1d3a      	adds	r2, r7, #4
 8009ec0:	f107 0108 	add.w	r1, r7, #8
 8009ec4:	f107 030c 	add.w	r3, r7, #12
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7fd faa5 	bl	8007418 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ece:	6879      	ldr	r1, [r7, #4]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	9202      	str	r2, [sp, #8]
 8009ed6:	9301      	str	r3, [sp, #4]
 8009ed8:	2302      	movs	r3, #2
 8009eda:	9300      	str	r3, [sp, #0]
 8009edc:	2300      	movs	r3, #0
 8009ede:	460a      	mov	r2, r1
 8009ee0:	4910      	ldr	r1, [pc, #64]	; (8009f24 <xTimerCreateTimerTask+0x84>)
 8009ee2:	4811      	ldr	r0, [pc, #68]	; (8009f28 <xTimerCreateTimerTask+0x88>)
 8009ee4:	f7fe fd7e 	bl	80089e4 <xTaskCreateStatic>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	4a10      	ldr	r2, [pc, #64]	; (8009f2c <xTimerCreateTimerTask+0x8c>)
 8009eec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <xTimerCreateTimerTask+0x8c>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d10a      	bne.n	8009f16 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	f3bf 8f6f 	isb	sy
 8009f0c:	f3bf 8f4f 	dsb	sy
 8009f10:	613b      	str	r3, [r7, #16]
}
 8009f12:	bf00      	nop
 8009f14:	e7fe      	b.n	8009f14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f16:	697b      	ldr	r3, [r7, #20]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3718      	adds	r7, #24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	20000f4c 	.word	0x20000f4c
 8009f24:	0800bb58 	.word	0x0800bb58
 8009f28:	0800a065 	.word	0x0800a065
 8009f2c:	20000f50 	.word	0x20000f50

08009f30 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b08a      	sub	sp, #40	; 0x28
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
 8009f3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10a      	bne.n	8009f5e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	623b      	str	r3, [r7, #32]
}
 8009f5a:	bf00      	nop
 8009f5c:	e7fe      	b.n	8009f5c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009f5e:	4b1a      	ldr	r3, [pc, #104]	; (8009fc8 <xTimerGenericCommand+0x98>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d02a      	beq.n	8009fbc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b05      	cmp	r3, #5
 8009f76:	dc18      	bgt.n	8009faa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009f78:	f7ff fb8c 	bl	8009694 <xTaskGetSchedulerState>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d109      	bne.n	8009f96 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009f82:	4b11      	ldr	r3, [pc, #68]	; (8009fc8 <xTimerGenericCommand+0x98>)
 8009f84:	6818      	ldr	r0, [r3, #0]
 8009f86:	f107 0110 	add.w	r1, r7, #16
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f8e:	f7fd fc4f 	bl	8007830 <xQueueGenericSend>
 8009f92:	6278      	str	r0, [r7, #36]	; 0x24
 8009f94:	e012      	b.n	8009fbc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009f96:	4b0c      	ldr	r3, [pc, #48]	; (8009fc8 <xTimerGenericCommand+0x98>)
 8009f98:	6818      	ldr	r0, [r3, #0]
 8009f9a:	f107 0110 	add.w	r1, r7, #16
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	f7fd fc45 	bl	8007830 <xQueueGenericSend>
 8009fa6:	6278      	str	r0, [r7, #36]	; 0x24
 8009fa8:	e008      	b.n	8009fbc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009faa:	4b07      	ldr	r3, [pc, #28]	; (8009fc8 <xTimerGenericCommand+0x98>)
 8009fac:	6818      	ldr	r0, [r3, #0]
 8009fae:	f107 0110 	add.w	r1, r7, #16
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	683a      	ldr	r2, [r7, #0]
 8009fb6:	f7fd fd39 	bl	8007a2c <xQueueGenericSendFromISR>
 8009fba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3728      	adds	r7, #40	; 0x28
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20000f4c 	.word	0x20000f4c

08009fcc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b088      	sub	sp, #32
 8009fd0:	af02      	add	r7, sp, #8
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fd6:	4b22      	ldr	r3, [pc, #136]	; (800a060 <prvProcessExpiredTimer+0x94>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	3304      	adds	r3, #4
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7fd fabb 	bl	8007560 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ff0:	f003 0304 	and.w	r3, r3, #4
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d022      	beq.n	800a03e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	699a      	ldr	r2, [r3, #24]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	18d1      	adds	r1, r2, r3
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	6978      	ldr	r0, [r7, #20]
 800a006:	f000 f8d1 	bl	800a1ac <prvInsertTimerInActiveList>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d01f      	beq.n	800a050 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a010:	2300      	movs	r3, #0
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	2300      	movs	r3, #0
 800a016:	687a      	ldr	r2, [r7, #4]
 800a018:	2100      	movs	r1, #0
 800a01a:	6978      	ldr	r0, [r7, #20]
 800a01c:	f7ff ff88 	bl	8009f30 <xTimerGenericCommand>
 800a020:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d113      	bne.n	800a050 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	60fb      	str	r3, [r7, #12]
}
 800a03a:	bf00      	nop
 800a03c:	e7fe      	b.n	800a03c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a044:	f023 0301 	bic.w	r3, r3, #1
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	6a1b      	ldr	r3, [r3, #32]
 800a054:	6978      	ldr	r0, [r7, #20]
 800a056:	4798      	blx	r3
}
 800a058:	bf00      	nop
 800a05a:	3718      	adds	r7, #24
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	20000f44 	.word	0x20000f44

0800a064 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b084      	sub	sp, #16
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a06c:	f107 0308 	add.w	r3, r7, #8
 800a070:	4618      	mov	r0, r3
 800a072:	f000 f857 	bl	800a124 <prvGetNextExpireTime>
 800a076:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	4619      	mov	r1, r3
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f000 f803 	bl	800a088 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a082:	f000 f8d5 	bl	800a230 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a086:	e7f1      	b.n	800a06c <prvTimerTask+0x8>

0800a088 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a092:	f7fe ff03 	bl	8008e9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a096:	f107 0308 	add.w	r3, r7, #8
 800a09a:	4618      	mov	r0, r3
 800a09c:	f000 f866 	bl	800a16c <prvSampleTimeNow>
 800a0a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d130      	bne.n	800a10a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10a      	bne.n	800a0c4 <prvProcessTimerOrBlockTask+0x3c>
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d806      	bhi.n	800a0c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a0b6:	f7fe feff 	bl	8008eb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a0ba:	68f9      	ldr	r1, [r7, #12]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f7ff ff85 	bl	8009fcc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a0c2:	e024      	b.n	800a10e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d008      	beq.n	800a0dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a0ca:	4b13      	ldr	r3, [pc, #76]	; (800a118 <prvProcessTimerOrBlockTask+0x90>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d101      	bne.n	800a0d8 <prvProcessTimerOrBlockTask+0x50>
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e000      	b.n	800a0da <prvProcessTimerOrBlockTask+0x52>
 800a0d8:	2300      	movs	r3, #0
 800a0da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a0dc:	4b0f      	ldr	r3, [pc, #60]	; (800a11c <prvProcessTimerOrBlockTask+0x94>)
 800a0de:	6818      	ldr	r0, [r3, #0]
 800a0e0:	687a      	ldr	r2, [r7, #4]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	683a      	ldr	r2, [r7, #0]
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	f7fe f905 	bl	80082f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a0ee:	f7fe fee3 	bl	8008eb8 <xTaskResumeAll>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d10a      	bne.n	800a10e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a0f8:	4b09      	ldr	r3, [pc, #36]	; (800a120 <prvProcessTimerOrBlockTask+0x98>)
 800a0fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0fe:	601a      	str	r2, [r3, #0]
 800a100:	f3bf 8f4f 	dsb	sy
 800a104:	f3bf 8f6f 	isb	sy
}
 800a108:	e001      	b.n	800a10e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a10a:	f7fe fed5 	bl	8008eb8 <xTaskResumeAll>
}
 800a10e:	bf00      	nop
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20000f48 	.word	0x20000f48
 800a11c:	20000f4c 	.word	0x20000f4c
 800a120:	e000ed04 	.word	0xe000ed04

0800a124 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a12c:	4b0e      	ldr	r3, [pc, #56]	; (800a168 <prvGetNextExpireTime+0x44>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d101      	bne.n	800a13a <prvGetNextExpireTime+0x16>
 800a136:	2201      	movs	r2, #1
 800a138:	e000      	b.n	800a13c <prvGetNextExpireTime+0x18>
 800a13a:	2200      	movs	r2, #0
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d105      	bne.n	800a154 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a148:	4b07      	ldr	r3, [pc, #28]	; (800a168 <prvGetNextExpireTime+0x44>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	60fb      	str	r3, [r7, #12]
 800a152:	e001      	b.n	800a158 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a154:	2300      	movs	r3, #0
 800a156:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a158:	68fb      	ldr	r3, [r7, #12]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3714      	adds	r7, #20
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	20000f44 	.word	0x20000f44

0800a16c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a174:	f7fe ff3e 	bl	8008ff4 <xTaskGetTickCount>
 800a178:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a17a:	4b0b      	ldr	r3, [pc, #44]	; (800a1a8 <prvSampleTimeNow+0x3c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68fa      	ldr	r2, [r7, #12]
 800a180:	429a      	cmp	r2, r3
 800a182:	d205      	bcs.n	800a190 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a184:	f000 f936 	bl	800a3f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	601a      	str	r2, [r3, #0]
 800a18e:	e002      	b.n	800a196 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a196:	4a04      	ldr	r2, [pc, #16]	; (800a1a8 <prvSampleTimeNow+0x3c>)
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a19c:	68fb      	ldr	r3, [r7, #12]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20000f54 	.word	0x20000f54

0800a1ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
 800a1b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	68ba      	ldr	r2, [r7, #8]
 800a1c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d812      	bhi.n	800a1f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	1ad2      	subs	r2, r2, r3
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	d302      	bcc.n	800a1e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	617b      	str	r3, [r7, #20]
 800a1e4:	e01b      	b.n	800a21e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a1e6:	4b10      	ldr	r3, [pc, #64]	; (800a228 <prvInsertTimerInActiveList+0x7c>)
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	3304      	adds	r3, #4
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	4610      	mov	r0, r2
 800a1f2:	f7fd f97c 	bl	80074ee <vListInsert>
 800a1f6:	e012      	b.n	800a21e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d206      	bcs.n	800a20e <prvInsertTimerInActiveList+0x62>
 800a200:	68ba      	ldr	r2, [r7, #8]
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	429a      	cmp	r2, r3
 800a206:	d302      	bcc.n	800a20e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a208:	2301      	movs	r3, #1
 800a20a:	617b      	str	r3, [r7, #20]
 800a20c:	e007      	b.n	800a21e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a20e:	4b07      	ldr	r3, [pc, #28]	; (800a22c <prvInsertTimerInActiveList+0x80>)
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	3304      	adds	r3, #4
 800a216:	4619      	mov	r1, r3
 800a218:	4610      	mov	r0, r2
 800a21a:	f7fd f968 	bl	80074ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a21e:	697b      	ldr	r3, [r7, #20]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3718      	adds	r7, #24
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	20000f48 	.word	0x20000f48
 800a22c:	20000f44 	.word	0x20000f44

0800a230 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b08e      	sub	sp, #56	; 0x38
 800a234:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a236:	e0ca      	b.n	800a3ce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	da18      	bge.n	800a270 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a23e:	1d3b      	adds	r3, r7, #4
 800a240:	3304      	adds	r3, #4
 800a242:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a246:	2b00      	cmp	r3, #0
 800a248:	d10a      	bne.n	800a260 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	61fb      	str	r3, [r7, #28]
}
 800a25c:	bf00      	nop
 800a25e:	e7fe      	b.n	800a25e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a266:	6850      	ldr	r0, [r2, #4]
 800a268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a26a:	6892      	ldr	r2, [r2, #8]
 800a26c:	4611      	mov	r1, r2
 800a26e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2b00      	cmp	r3, #0
 800a274:	f2c0 80aa 	blt.w	800a3cc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a27e:	695b      	ldr	r3, [r3, #20]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d004      	beq.n	800a28e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a286:	3304      	adds	r3, #4
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fd f969 	bl	8007560 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a28e:	463b      	mov	r3, r7
 800a290:	4618      	mov	r0, r3
 800a292:	f7ff ff6b 	bl	800a16c <prvSampleTimeNow>
 800a296:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b09      	cmp	r3, #9
 800a29c:	f200 8097 	bhi.w	800a3ce <prvProcessReceivedCommands+0x19e>
 800a2a0:	a201      	add	r2, pc, #4	; (adr r2, 800a2a8 <prvProcessReceivedCommands+0x78>)
 800a2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a6:	bf00      	nop
 800a2a8:	0800a2d1 	.word	0x0800a2d1
 800a2ac:	0800a2d1 	.word	0x0800a2d1
 800a2b0:	0800a2d1 	.word	0x0800a2d1
 800a2b4:	0800a345 	.word	0x0800a345
 800a2b8:	0800a359 	.word	0x0800a359
 800a2bc:	0800a3a3 	.word	0x0800a3a3
 800a2c0:	0800a2d1 	.word	0x0800a2d1
 800a2c4:	0800a2d1 	.word	0x0800a2d1
 800a2c8:	0800a345 	.word	0x0800a345
 800a2cc:	0800a359 	.word	0x0800a359
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a2d6:	f043 0301 	orr.w	r3, r3, #1
 800a2da:	b2da      	uxtb	r2, r3
 800a2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a2e2:	68ba      	ldr	r2, [r7, #8]
 800a2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	18d1      	adds	r1, r2, r3
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2f0:	f7ff ff5c 	bl	800a1ac <prvInsertTimerInActiveList>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d069      	beq.n	800a3ce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2fc:	6a1b      	ldr	r3, [r3, #32]
 800a2fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a300:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a304:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d05e      	beq.n	800a3ce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a310:	68ba      	ldr	r2, [r7, #8]
 800a312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	441a      	add	r2, r3
 800a318:	2300      	movs	r3, #0
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	2300      	movs	r3, #0
 800a31e:	2100      	movs	r1, #0
 800a320:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a322:	f7ff fe05 	bl	8009f30 <xTimerGenericCommand>
 800a326:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a328:	6a3b      	ldr	r3, [r7, #32]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d14f      	bne.n	800a3ce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	61bb      	str	r3, [r7, #24]
}
 800a340:	bf00      	nop
 800a342:	e7fe      	b.n	800a342 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a346:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a34a:	f023 0301 	bic.w	r3, r3, #1
 800a34e:	b2da      	uxtb	r2, r3
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a356:	e03a      	b.n	800a3ce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a35e:	f043 0301 	orr.w	r3, r3, #1
 800a362:	b2da      	uxtb	r2, r3
 800a364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a366:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10a      	bne.n	800a38e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	617b      	str	r3, [r7, #20]
}
 800a38a:	bf00      	nop
 800a38c:	e7fe      	b.n	800a38c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a390:	699a      	ldr	r2, [r3, #24]
 800a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a394:	18d1      	adds	r1, r2, r3
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a39c:	f7ff ff06 	bl	800a1ac <prvInsertTimerInActiveList>
					break;
 800a3a0:	e015      	b.n	800a3ce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3a8:	f003 0302 	and.w	r3, r3, #2
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d103      	bne.n	800a3b8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a3b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a3b2:	f000 fbdd 	bl	800ab70 <vPortFree>
 800a3b6:	e00a      	b.n	800a3ce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3be:	f023 0301 	bic.w	r3, r3, #1
 800a3c2:	b2da      	uxtb	r2, r3
 800a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a3ca:	e000      	b.n	800a3ce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a3cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a3ce:	4b08      	ldr	r3, [pc, #32]	; (800a3f0 <prvProcessReceivedCommands+0x1c0>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	1d39      	adds	r1, r7, #4
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fd fc50 	bl	8007c7c <xQueueReceive>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f47f af2a 	bne.w	800a238 <prvProcessReceivedCommands+0x8>
	}
}
 800a3e4:	bf00      	nop
 800a3e6:	bf00      	nop
 800a3e8:	3730      	adds	r7, #48	; 0x30
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	20000f4c 	.word	0x20000f4c

0800a3f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b088      	sub	sp, #32
 800a3f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a3fa:	e048      	b.n	800a48e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a3fc:	4b2d      	ldr	r3, [pc, #180]	; (800a4b4 <prvSwitchTimerLists+0xc0>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a406:	4b2b      	ldr	r3, [pc, #172]	; (800a4b4 <prvSwitchTimerLists+0xc0>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	68db      	ldr	r3, [r3, #12]
 800a40e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3304      	adds	r3, #4
 800a414:	4618      	mov	r0, r3
 800a416:	f7fd f8a3 	bl	8007560 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6a1b      	ldr	r3, [r3, #32]
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a428:	f003 0304 	and.w	r3, r3, #4
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d02e      	beq.n	800a48e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	4413      	add	r3, r2
 800a438:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a43a:	68ba      	ldr	r2, [r7, #8]
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d90e      	bls.n	800a460 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	68ba      	ldr	r2, [r7, #8]
 800a446:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a44e:	4b19      	ldr	r3, [pc, #100]	; (800a4b4 <prvSwitchTimerLists+0xc0>)
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	3304      	adds	r3, #4
 800a456:	4619      	mov	r1, r3
 800a458:	4610      	mov	r0, r2
 800a45a:	f7fd f848 	bl	80074ee <vListInsert>
 800a45e:	e016      	b.n	800a48e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a460:	2300      	movs	r3, #0
 800a462:	9300      	str	r3, [sp, #0]
 800a464:	2300      	movs	r3, #0
 800a466:	693a      	ldr	r2, [r7, #16]
 800a468:	2100      	movs	r1, #0
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f7ff fd60 	bl	8009f30 <xTimerGenericCommand>
 800a470:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10a      	bne.n	800a48e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	603b      	str	r3, [r7, #0]
}
 800a48a:	bf00      	nop
 800a48c:	e7fe      	b.n	800a48c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a48e:	4b09      	ldr	r3, [pc, #36]	; (800a4b4 <prvSwitchTimerLists+0xc0>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1b1      	bne.n	800a3fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a498:	4b06      	ldr	r3, [pc, #24]	; (800a4b4 <prvSwitchTimerLists+0xc0>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a49e:	4b06      	ldr	r3, [pc, #24]	; (800a4b8 <prvSwitchTimerLists+0xc4>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a04      	ldr	r2, [pc, #16]	; (800a4b4 <prvSwitchTimerLists+0xc0>)
 800a4a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a4a6:	4a04      	ldr	r2, [pc, #16]	; (800a4b8 <prvSwitchTimerLists+0xc4>)
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	6013      	str	r3, [r2, #0]
}
 800a4ac:	bf00      	nop
 800a4ae:	3718      	adds	r7, #24
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}
 800a4b4:	20000f44 	.word	0x20000f44
 800a4b8:	20000f48 	.word	0x20000f48

0800a4bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a4c2:	f000 f967 	bl	800a794 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a4c6:	4b15      	ldr	r3, [pc, #84]	; (800a51c <prvCheckForValidListAndQueue+0x60>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d120      	bne.n	800a510 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a4ce:	4814      	ldr	r0, [pc, #80]	; (800a520 <prvCheckForValidListAndQueue+0x64>)
 800a4d0:	f7fc ffbc 	bl	800744c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a4d4:	4813      	ldr	r0, [pc, #76]	; (800a524 <prvCheckForValidListAndQueue+0x68>)
 800a4d6:	f7fc ffb9 	bl	800744c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a4da:	4b13      	ldr	r3, [pc, #76]	; (800a528 <prvCheckForValidListAndQueue+0x6c>)
 800a4dc:	4a10      	ldr	r2, [pc, #64]	; (800a520 <prvCheckForValidListAndQueue+0x64>)
 800a4de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a4e0:	4b12      	ldr	r3, [pc, #72]	; (800a52c <prvCheckForValidListAndQueue+0x70>)
 800a4e2:	4a10      	ldr	r2, [pc, #64]	; (800a524 <prvCheckForValidListAndQueue+0x68>)
 800a4e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	4b11      	ldr	r3, [pc, #68]	; (800a530 <prvCheckForValidListAndQueue+0x74>)
 800a4ec:	4a11      	ldr	r2, [pc, #68]	; (800a534 <prvCheckForValidListAndQueue+0x78>)
 800a4ee:	2110      	movs	r1, #16
 800a4f0:	200a      	movs	r0, #10
 800a4f2:	f7fd f8c7 	bl	8007684 <xQueueGenericCreateStatic>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	4a08      	ldr	r2, [pc, #32]	; (800a51c <prvCheckForValidListAndQueue+0x60>)
 800a4fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a4fc:	4b07      	ldr	r3, [pc, #28]	; (800a51c <prvCheckForValidListAndQueue+0x60>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d005      	beq.n	800a510 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a504:	4b05      	ldr	r3, [pc, #20]	; (800a51c <prvCheckForValidListAndQueue+0x60>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	490b      	ldr	r1, [pc, #44]	; (800a538 <prvCheckForValidListAndQueue+0x7c>)
 800a50a:	4618      	mov	r0, r3
 800a50c:	f7fd feca 	bl	80082a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a510:	f000 f970 	bl	800a7f4 <vPortExitCritical>
}
 800a514:	bf00      	nop
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20000f4c 	.word	0x20000f4c
 800a520:	20000f1c 	.word	0x20000f1c
 800a524:	20000f30 	.word	0x20000f30
 800a528:	20000f44 	.word	0x20000f44
 800a52c:	20000f48 	.word	0x20000f48
 800a530:	20000ff8 	.word	0x20000ff8
 800a534:	20000f58 	.word	0x20000f58
 800a538:	0800bb60 	.word	0x0800bb60

0800a53c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	3b04      	subs	r3, #4
 800a54c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	3b04      	subs	r3, #4
 800a55a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	f023 0201 	bic.w	r2, r3, #1
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3b04      	subs	r3, #4
 800a56a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a56c:	4a0c      	ldr	r2, [pc, #48]	; (800a5a0 <pxPortInitialiseStack+0x64>)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3b14      	subs	r3, #20
 800a576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	3b04      	subs	r3, #4
 800a582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f06f 0202 	mvn.w	r2, #2
 800a58a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	3b20      	subs	r3, #32
 800a590:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a592:	68fb      	ldr	r3, [r7, #12]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3714      	adds	r7, #20
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	0800a5a5 	.word	0x0800a5a5

0800a5a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b085      	sub	sp, #20
 800a5a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a5ae:	4b12      	ldr	r3, [pc, #72]	; (800a5f8 <prvTaskExitError+0x54>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5b6:	d00a      	beq.n	800a5ce <prvTaskExitError+0x2a>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	60fb      	str	r3, [r7, #12]
}
 800a5ca:	bf00      	nop
 800a5cc:	e7fe      	b.n	800a5cc <prvTaskExitError+0x28>
	__asm volatile
 800a5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d2:	f383 8811 	msr	BASEPRI, r3
 800a5d6:	f3bf 8f6f 	isb	sy
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	60bb      	str	r3, [r7, #8]
}
 800a5e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a5e2:	bf00      	nop
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d0fc      	beq.n	800a5e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a5ea:	bf00      	nop
 800a5ec:	bf00      	nop
 800a5ee:	3714      	adds	r7, #20
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	20000098 	.word	0x20000098
 800a5fc:	00000000 	.word	0x00000000

0800a600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a600:	4b07      	ldr	r3, [pc, #28]	; (800a620 <pxCurrentTCBConst2>)
 800a602:	6819      	ldr	r1, [r3, #0]
 800a604:	6808      	ldr	r0, [r1, #0]
 800a606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60a:	f380 8809 	msr	PSP, r0
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f04f 0000 	mov.w	r0, #0
 800a616:	f380 8811 	msr	BASEPRI, r0
 800a61a:	4770      	bx	lr
 800a61c:	f3af 8000 	nop.w

0800a620 <pxCurrentTCBConst2>:
 800a620:	20000a1c 	.word	0x20000a1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop

0800a628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a628:	4808      	ldr	r0, [pc, #32]	; (800a64c <prvPortStartFirstTask+0x24>)
 800a62a:	6800      	ldr	r0, [r0, #0]
 800a62c:	6800      	ldr	r0, [r0, #0]
 800a62e:	f380 8808 	msr	MSP, r0
 800a632:	f04f 0000 	mov.w	r0, #0
 800a636:	f380 8814 	msr	CONTROL, r0
 800a63a:	b662      	cpsie	i
 800a63c:	b661      	cpsie	f
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	df00      	svc	0
 800a648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a64a:	bf00      	nop
 800a64c:	e000ed08 	.word	0xe000ed08

0800a650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a656:	4b46      	ldr	r3, [pc, #280]	; (800a770 <xPortStartScheduler+0x120>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a46      	ldr	r2, [pc, #280]	; (800a774 <xPortStartScheduler+0x124>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d10a      	bne.n	800a676 <xPortStartScheduler+0x26>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	613b      	str	r3, [r7, #16]
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a676:	4b3e      	ldr	r3, [pc, #248]	; (800a770 <xPortStartScheduler+0x120>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a3f      	ldr	r2, [pc, #252]	; (800a778 <xPortStartScheduler+0x128>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d10a      	bne.n	800a696 <xPortStartScheduler+0x46>
	__asm volatile
 800a680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	60fb      	str	r3, [r7, #12]
}
 800a692:	bf00      	nop
 800a694:	e7fe      	b.n	800a694 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a696:	4b39      	ldr	r3, [pc, #228]	; (800a77c <xPortStartScheduler+0x12c>)
 800a698:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	22ff      	movs	r2, #255	; 0xff
 800a6a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6b0:	78fb      	ldrb	r3, [r7, #3]
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	4b31      	ldr	r3, [pc, #196]	; (800a780 <xPortStartScheduler+0x130>)
 800a6bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6be:	4b31      	ldr	r3, [pc, #196]	; (800a784 <xPortStartScheduler+0x134>)
 800a6c0:	2207      	movs	r2, #7
 800a6c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6c4:	e009      	b.n	800a6da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a6c6:	4b2f      	ldr	r3, [pc, #188]	; (800a784 <xPortStartScheduler+0x134>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	4a2d      	ldr	r2, [pc, #180]	; (800a784 <xPortStartScheduler+0x134>)
 800a6ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a6d0:	78fb      	ldrb	r3, [r7, #3]
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6da:	78fb      	ldrb	r3, [r7, #3]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6e2:	2b80      	cmp	r3, #128	; 0x80
 800a6e4:	d0ef      	beq.n	800a6c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6e6:	4b27      	ldr	r3, [pc, #156]	; (800a784 <xPortStartScheduler+0x134>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f1c3 0307 	rsb	r3, r3, #7
 800a6ee:	2b04      	cmp	r3, #4
 800a6f0:	d00a      	beq.n	800a708 <xPortStartScheduler+0xb8>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	60bb      	str	r3, [r7, #8]
}
 800a704:	bf00      	nop
 800a706:	e7fe      	b.n	800a706 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a708:	4b1e      	ldr	r3, [pc, #120]	; (800a784 <xPortStartScheduler+0x134>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	021b      	lsls	r3, r3, #8
 800a70e:	4a1d      	ldr	r2, [pc, #116]	; (800a784 <xPortStartScheduler+0x134>)
 800a710:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a712:	4b1c      	ldr	r3, [pc, #112]	; (800a784 <xPortStartScheduler+0x134>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a71a:	4a1a      	ldr	r2, [pc, #104]	; (800a784 <xPortStartScheduler+0x134>)
 800a71c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	b2da      	uxtb	r2, r3
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a726:	4b18      	ldr	r3, [pc, #96]	; (800a788 <xPortStartScheduler+0x138>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a17      	ldr	r2, [pc, #92]	; (800a788 <xPortStartScheduler+0x138>)
 800a72c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a732:	4b15      	ldr	r3, [pc, #84]	; (800a788 <xPortStartScheduler+0x138>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a14      	ldr	r2, [pc, #80]	; (800a788 <xPortStartScheduler+0x138>)
 800a738:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a73c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a73e:	f000 f8dd 	bl	800a8fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a742:	4b12      	ldr	r3, [pc, #72]	; (800a78c <xPortStartScheduler+0x13c>)
 800a744:	2200      	movs	r2, #0
 800a746:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a748:	f000 f8fc 	bl	800a944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a74c:	4b10      	ldr	r3, [pc, #64]	; (800a790 <xPortStartScheduler+0x140>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a0f      	ldr	r2, [pc, #60]	; (800a790 <xPortStartScheduler+0x140>)
 800a752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a756:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a758:	f7ff ff66 	bl	800a628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a75c:	f7fe fd14 	bl	8009188 <vTaskSwitchContext>
	prvTaskExitError();
 800a760:	f7ff ff20 	bl	800a5a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	e000ed00 	.word	0xe000ed00
 800a774:	410fc271 	.word	0x410fc271
 800a778:	410fc270 	.word	0x410fc270
 800a77c:	e000e400 	.word	0xe000e400
 800a780:	20001048 	.word	0x20001048
 800a784:	2000104c 	.word	0x2000104c
 800a788:	e000ed20 	.word	0xe000ed20
 800a78c:	20000098 	.word	0x20000098
 800a790:	e000ef34 	.word	0xe000ef34

0800a794 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
	__asm volatile
 800a79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79e:	f383 8811 	msr	BASEPRI, r3
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	f3bf 8f4f 	dsb	sy
 800a7aa:	607b      	str	r3, [r7, #4]
}
 800a7ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7ae:	4b0f      	ldr	r3, [pc, #60]	; (800a7ec <vPortEnterCritical+0x58>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	4a0d      	ldr	r2, [pc, #52]	; (800a7ec <vPortEnterCritical+0x58>)
 800a7b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7b8:	4b0c      	ldr	r3, [pc, #48]	; (800a7ec <vPortEnterCritical+0x58>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d10f      	bne.n	800a7e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7c0:	4b0b      	ldr	r3, [pc, #44]	; (800a7f0 <vPortEnterCritical+0x5c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00a      	beq.n	800a7e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	603b      	str	r3, [r7, #0]
}
 800a7dc:	bf00      	nop
 800a7de:	e7fe      	b.n	800a7de <vPortEnterCritical+0x4a>
	}
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	20000098 	.word	0x20000098
 800a7f0:	e000ed04 	.word	0xe000ed04

0800a7f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7fa:	4b12      	ldr	r3, [pc, #72]	; (800a844 <vPortExitCritical+0x50>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10a      	bne.n	800a818 <vPortExitCritical+0x24>
	__asm volatile
 800a802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	607b      	str	r3, [r7, #4]
}
 800a814:	bf00      	nop
 800a816:	e7fe      	b.n	800a816 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a818:	4b0a      	ldr	r3, [pc, #40]	; (800a844 <vPortExitCritical+0x50>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	4a09      	ldr	r2, [pc, #36]	; (800a844 <vPortExitCritical+0x50>)
 800a820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a822:	4b08      	ldr	r3, [pc, #32]	; (800a844 <vPortExitCritical+0x50>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d105      	bne.n	800a836 <vPortExitCritical+0x42>
 800a82a:	2300      	movs	r3, #0
 800a82c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	f383 8811 	msr	BASEPRI, r3
}
 800a834:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a836:	bf00      	nop
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	20000098 	.word	0x20000098
	...

0800a850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a850:	f3ef 8009 	mrs	r0, PSP
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	4b15      	ldr	r3, [pc, #84]	; (800a8b0 <pxCurrentTCBConst>)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	f01e 0f10 	tst.w	lr, #16
 800a860:	bf08      	it	eq
 800a862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86a:	6010      	str	r0, [r2, #0]
 800a86c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a870:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a874:	f380 8811 	msr	BASEPRI, r0
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f7fe fc82 	bl	8009188 <vTaskSwitchContext>
 800a884:	f04f 0000 	mov.w	r0, #0
 800a888:	f380 8811 	msr	BASEPRI, r0
 800a88c:	bc09      	pop	{r0, r3}
 800a88e:	6819      	ldr	r1, [r3, #0]
 800a890:	6808      	ldr	r0, [r1, #0]
 800a892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a896:	f01e 0f10 	tst.w	lr, #16
 800a89a:	bf08      	it	eq
 800a89c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8a0:	f380 8809 	msr	PSP, r0
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	f3af 8000 	nop.w

0800a8b0 <pxCurrentTCBConst>:
 800a8b0:	20000a1c 	.word	0x20000a1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8b4:	bf00      	nop
 800a8b6:	bf00      	nop

0800a8b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	607b      	str	r3, [r7, #4]
}
 800a8d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a8d2:	f7fe fb9f 	bl	8009014 <xTaskIncrementTick>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a8dc:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <xPortSysTickHandler+0x40>)
 800a8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	f383 8811 	msr	BASEPRI, r3
}
 800a8ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	e000ed04 	.word	0xe000ed04

0800a8fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a900:	4b0b      	ldr	r3, [pc, #44]	; (800a930 <vPortSetupTimerInterrupt+0x34>)
 800a902:	2200      	movs	r2, #0
 800a904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a906:	4b0b      	ldr	r3, [pc, #44]	; (800a934 <vPortSetupTimerInterrupt+0x38>)
 800a908:	2200      	movs	r2, #0
 800a90a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a90c:	4b0a      	ldr	r3, [pc, #40]	; (800a938 <vPortSetupTimerInterrupt+0x3c>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a0a      	ldr	r2, [pc, #40]	; (800a93c <vPortSetupTimerInterrupt+0x40>)
 800a912:	fba2 2303 	umull	r2, r3, r2, r3
 800a916:	099b      	lsrs	r3, r3, #6
 800a918:	4a09      	ldr	r2, [pc, #36]	; (800a940 <vPortSetupTimerInterrupt+0x44>)
 800a91a:	3b01      	subs	r3, #1
 800a91c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a91e:	4b04      	ldr	r3, [pc, #16]	; (800a930 <vPortSetupTimerInterrupt+0x34>)
 800a920:	2207      	movs	r2, #7
 800a922:	601a      	str	r2, [r3, #0]
}
 800a924:	bf00      	nop
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	e000e010 	.word	0xe000e010
 800a934:	e000e018 	.word	0xe000e018
 800a938:	20000000 	.word	0x20000000
 800a93c:	10624dd3 	.word	0x10624dd3
 800a940:	e000e014 	.word	0xe000e014

0800a944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a954 <vPortEnableVFP+0x10>
 800a948:	6801      	ldr	r1, [r0, #0]
 800a94a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a94e:	6001      	str	r1, [r0, #0]
 800a950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a952:	bf00      	nop
 800a954:	e000ed88 	.word	0xe000ed88

0800a958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a95e:	f3ef 8305 	mrs	r3, IPSR
 800a962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2b0f      	cmp	r3, #15
 800a968:	d914      	bls.n	800a994 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a96a:	4a17      	ldr	r2, [pc, #92]	; (800a9c8 <vPortValidateInterruptPriority+0x70>)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4413      	add	r3, r2
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a974:	4b15      	ldr	r3, [pc, #84]	; (800a9cc <vPortValidateInterruptPriority+0x74>)
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	7afa      	ldrb	r2, [r7, #11]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d20a      	bcs.n	800a994 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	607b      	str	r3, [r7, #4]
}
 800a990:	bf00      	nop
 800a992:	e7fe      	b.n	800a992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a994:	4b0e      	ldr	r3, [pc, #56]	; (800a9d0 <vPortValidateInterruptPriority+0x78>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a99c:	4b0d      	ldr	r3, [pc, #52]	; (800a9d4 <vPortValidateInterruptPriority+0x7c>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d90a      	bls.n	800a9ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	603b      	str	r3, [r7, #0]
}
 800a9b6:	bf00      	nop
 800a9b8:	e7fe      	b.n	800a9b8 <vPortValidateInterruptPriority+0x60>
	}
 800a9ba:	bf00      	nop
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	e000e3f0 	.word	0xe000e3f0
 800a9cc:	20001048 	.word	0x20001048
 800a9d0:	e000ed0c 	.word	0xe000ed0c
 800a9d4:	2000104c 	.word	0x2000104c

0800a9d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b08a      	sub	sp, #40	; 0x28
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a9e4:	f7fe fa5a 	bl	8008e9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a9e8:	4b5b      	ldr	r3, [pc, #364]	; (800ab58 <pvPortMalloc+0x180>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d101      	bne.n	800a9f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a9f0:	f000 f920 	bl	800ac34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a9f4:	4b59      	ldr	r3, [pc, #356]	; (800ab5c <pvPortMalloc+0x184>)
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	f040 8093 	bne.w	800ab28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d01d      	beq.n	800aa44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800aa08:	2208      	movs	r2, #8
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f003 0307 	and.w	r3, r3, #7
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d014      	beq.n	800aa44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f023 0307 	bic.w	r3, r3, #7
 800aa20:	3308      	adds	r3, #8
 800aa22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f003 0307 	and.w	r3, r3, #7
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00a      	beq.n	800aa44 <pvPortMalloc+0x6c>
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	617b      	str	r3, [r7, #20]
}
 800aa40:	bf00      	nop
 800aa42:	e7fe      	b.n	800aa42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d06e      	beq.n	800ab28 <pvPortMalloc+0x150>
 800aa4a:	4b45      	ldr	r3, [pc, #276]	; (800ab60 <pvPortMalloc+0x188>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d869      	bhi.n	800ab28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800aa54:	4b43      	ldr	r3, [pc, #268]	; (800ab64 <pvPortMalloc+0x18c>)
 800aa56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800aa58:	4b42      	ldr	r3, [pc, #264]	; (800ab64 <pvPortMalloc+0x18c>)
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa5e:	e004      	b.n	800aa6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d903      	bls.n	800aa7c <pvPortMalloc+0xa4>
 800aa74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1f1      	bne.n	800aa60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800aa7c:	4b36      	ldr	r3, [pc, #216]	; (800ab58 <pvPortMalloc+0x180>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d050      	beq.n	800ab28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800aa86:	6a3b      	ldr	r3, [r7, #32]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2208      	movs	r2, #8
 800aa8c:	4413      	add	r3, r2
 800aa8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800aa90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	6a3b      	ldr	r3, [r7, #32]
 800aa96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9a:	685a      	ldr	r2, [r3, #4]
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	1ad2      	subs	r2, r2, r3
 800aaa0:	2308      	movs	r3, #8
 800aaa2:	005b      	lsls	r3, r3, #1
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d91f      	bls.n	800aae8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800aaa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4413      	add	r3, r2
 800aaae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	f003 0307 	and.w	r3, r3, #7
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <pvPortMalloc+0xf8>
	__asm volatile
 800aaba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aabe:	f383 8811 	msr	BASEPRI, r3
 800aac2:	f3bf 8f6f 	isb	sy
 800aac6:	f3bf 8f4f 	dsb	sy
 800aaca:	613b      	str	r3, [r7, #16]
}
 800aacc:	bf00      	nop
 800aace:	e7fe      	b.n	800aace <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	1ad2      	subs	r2, r2, r3
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aae2:	69b8      	ldr	r0, [r7, #24]
 800aae4:	f000 f908 	bl	800acf8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aae8:	4b1d      	ldr	r3, [pc, #116]	; (800ab60 <pvPortMalloc+0x188>)
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	4a1b      	ldr	r2, [pc, #108]	; (800ab60 <pvPortMalloc+0x188>)
 800aaf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aaf6:	4b1a      	ldr	r3, [pc, #104]	; (800ab60 <pvPortMalloc+0x188>)
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	4b1b      	ldr	r3, [pc, #108]	; (800ab68 <pvPortMalloc+0x190>)
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d203      	bcs.n	800ab0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ab02:	4b17      	ldr	r3, [pc, #92]	; (800ab60 <pvPortMalloc+0x188>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a18      	ldr	r2, [pc, #96]	; (800ab68 <pvPortMalloc+0x190>)
 800ab08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	4b13      	ldr	r3, [pc, #76]	; (800ab5c <pvPortMalloc+0x184>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	431a      	orrs	r2, r3
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ab18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ab1e:	4b13      	ldr	r3, [pc, #76]	; (800ab6c <pvPortMalloc+0x194>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	3301      	adds	r3, #1
 800ab24:	4a11      	ldr	r2, [pc, #68]	; (800ab6c <pvPortMalloc+0x194>)
 800ab26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ab28:	f7fe f9c6 	bl	8008eb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	f003 0307 	and.w	r3, r3, #7
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d00a      	beq.n	800ab4c <pvPortMalloc+0x174>
	__asm volatile
 800ab36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3a:	f383 8811 	msr	BASEPRI, r3
 800ab3e:	f3bf 8f6f 	isb	sy
 800ab42:	f3bf 8f4f 	dsb	sy
 800ab46:	60fb      	str	r3, [r7, #12]
}
 800ab48:	bf00      	nop
 800ab4a:	e7fe      	b.n	800ab4a <pvPortMalloc+0x172>
	return pvReturn;
 800ab4c:	69fb      	ldr	r3, [r7, #28]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3728      	adds	r7, #40	; 0x28
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}
 800ab56:	bf00      	nop
 800ab58:	20009058 	.word	0x20009058
 800ab5c:	2000906c 	.word	0x2000906c
 800ab60:	2000905c 	.word	0x2000905c
 800ab64:	20009050 	.word	0x20009050
 800ab68:	20009060 	.word	0x20009060
 800ab6c:	20009064 	.word	0x20009064

0800ab70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d04d      	beq.n	800ac1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ab82:	2308      	movs	r3, #8
 800ab84:	425b      	negs	r3, r3
 800ab86:	697a      	ldr	r2, [r7, #20]
 800ab88:	4413      	add	r3, r2
 800ab8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	4b24      	ldr	r3, [pc, #144]	; (800ac28 <vPortFree+0xb8>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4013      	ands	r3, r2
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10a      	bne.n	800abb4 <vPortFree+0x44>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	60fb      	str	r3, [r7, #12]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00a      	beq.n	800abd2 <vPortFree+0x62>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	60bb      	str	r3, [r7, #8]
}
 800abce:	bf00      	nop
 800abd0:	e7fe      	b.n	800abd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	685a      	ldr	r2, [r3, #4]
 800abd6:	4b14      	ldr	r3, [pc, #80]	; (800ac28 <vPortFree+0xb8>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4013      	ands	r3, r2
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d01e      	beq.n	800ac1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d11a      	bne.n	800ac1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	685a      	ldr	r2, [r3, #4]
 800abec:	4b0e      	ldr	r3, [pc, #56]	; (800ac28 <vPortFree+0xb8>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	43db      	mvns	r3, r3
 800abf2:	401a      	ands	r2, r3
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800abf8:	f7fe f950 	bl	8008e9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	685a      	ldr	r2, [r3, #4]
 800ac00:	4b0a      	ldr	r3, [pc, #40]	; (800ac2c <vPortFree+0xbc>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4413      	add	r3, r2
 800ac06:	4a09      	ldr	r2, [pc, #36]	; (800ac2c <vPortFree+0xbc>)
 800ac08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ac0a:	6938      	ldr	r0, [r7, #16]
 800ac0c:	f000 f874 	bl	800acf8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ac10:	4b07      	ldr	r3, [pc, #28]	; (800ac30 <vPortFree+0xc0>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	3301      	adds	r3, #1
 800ac16:	4a06      	ldr	r2, [pc, #24]	; (800ac30 <vPortFree+0xc0>)
 800ac18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ac1a:	f7fe f94d 	bl	8008eb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ac1e:	bf00      	nop
 800ac20:	3718      	adds	r7, #24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	2000906c 	.word	0x2000906c
 800ac2c:	2000905c 	.word	0x2000905c
 800ac30:	20009068 	.word	0x20009068

0800ac34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ac34:	b480      	push	{r7}
 800ac36:	b085      	sub	sp, #20
 800ac38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ac3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ac40:	4b27      	ldr	r3, [pc, #156]	; (800ace0 <prvHeapInit+0xac>)
 800ac42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f003 0307 	and.w	r3, r3, #7
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00c      	beq.n	800ac68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	3307      	adds	r3, #7
 800ac52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f023 0307 	bic.w	r3, r3, #7
 800ac5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ac5c:	68ba      	ldr	r2, [r7, #8]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	4a1f      	ldr	r2, [pc, #124]	; (800ace0 <prvHeapInit+0xac>)
 800ac64:	4413      	add	r3, r2
 800ac66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ac6c:	4a1d      	ldr	r2, [pc, #116]	; (800ace4 <prvHeapInit+0xb0>)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ac72:	4b1c      	ldr	r3, [pc, #112]	; (800ace4 <prvHeapInit+0xb0>)
 800ac74:	2200      	movs	r2, #0
 800ac76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ac80:	2208      	movs	r2, #8
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	1a9b      	subs	r3, r3, r2
 800ac86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f023 0307 	bic.w	r3, r3, #7
 800ac8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	4a15      	ldr	r2, [pc, #84]	; (800ace8 <prvHeapInit+0xb4>)
 800ac94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ac96:	4b14      	ldr	r3, [pc, #80]	; (800ace8 <prvHeapInit+0xb4>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ac9e:	4b12      	ldr	r3, [pc, #72]	; (800ace8 <prvHeapInit+0xb4>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2200      	movs	r2, #0
 800aca4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	1ad2      	subs	r2, r2, r3
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800acb4:	4b0c      	ldr	r3, [pc, #48]	; (800ace8 <prvHeapInit+0xb4>)
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	4a0a      	ldr	r2, [pc, #40]	; (800acec <prvHeapInit+0xb8>)
 800acc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	4a09      	ldr	r2, [pc, #36]	; (800acf0 <prvHeapInit+0xbc>)
 800acca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800accc:	4b09      	ldr	r3, [pc, #36]	; (800acf4 <prvHeapInit+0xc0>)
 800acce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800acd2:	601a      	str	r2, [r3, #0]
}
 800acd4:	bf00      	nop
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr
 800ace0:	20001050 	.word	0x20001050
 800ace4:	20009050 	.word	0x20009050
 800ace8:	20009058 	.word	0x20009058
 800acec:	20009060 	.word	0x20009060
 800acf0:	2000905c 	.word	0x2000905c
 800acf4:	2000906c 	.word	0x2000906c

0800acf8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ad00:	4b28      	ldr	r3, [pc, #160]	; (800ada4 <prvInsertBlockIntoFreeList+0xac>)
 800ad02:	60fb      	str	r3, [r7, #12]
 800ad04:	e002      	b.n	800ad0c <prvInsertBlockIntoFreeList+0x14>
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	60fb      	str	r3, [r7, #12]
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d8f7      	bhi.n	800ad06 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	68ba      	ldr	r2, [r7, #8]
 800ad20:	4413      	add	r3, r2
 800ad22:	687a      	ldr	r2, [r7, #4]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d108      	bne.n	800ad3a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	685a      	ldr	r2, [r3, #4]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	441a      	add	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	68ba      	ldr	r2, [r7, #8]
 800ad44:	441a      	add	r2, r3
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d118      	bne.n	800ad80 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	4b15      	ldr	r3, [pc, #84]	; (800ada8 <prvInsertBlockIntoFreeList+0xb0>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d00d      	beq.n	800ad76 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	685a      	ldr	r2, [r3, #4]
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	441a      	add	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	601a      	str	r2, [r3, #0]
 800ad74:	e008      	b.n	800ad88 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ad76:	4b0c      	ldr	r3, [pc, #48]	; (800ada8 <prvInsertBlockIntoFreeList+0xb0>)
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	601a      	str	r2, [r3, #0]
 800ad7e:	e003      	b.n	800ad88 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d002      	beq.n	800ad96 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad96:	bf00      	nop
 800ad98:	3714      	adds	r7, #20
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
 800ada2:	bf00      	nop
 800ada4:	20009050 	.word	0x20009050
 800ada8:	20009058 	.word	0x20009058

0800adac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800adb0:	2200      	movs	r2, #0
 800adb2:	4912      	ldr	r1, [pc, #72]	; (800adfc <MX_USB_DEVICE_Init+0x50>)
 800adb4:	4812      	ldr	r0, [pc, #72]	; (800ae00 <MX_USB_DEVICE_Init+0x54>)
 800adb6:	f7fa ff13 	bl	8005be0 <USBD_Init>
 800adba:	4603      	mov	r3, r0
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d001      	beq.n	800adc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800adc0:	f7f5 fd76 	bl	80008b0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800adc4:	490f      	ldr	r1, [pc, #60]	; (800ae04 <MX_USB_DEVICE_Init+0x58>)
 800adc6:	480e      	ldr	r0, [pc, #56]	; (800ae00 <MX_USB_DEVICE_Init+0x54>)
 800adc8:	f7fa ff3a 	bl	8005c40 <USBD_RegisterClass>
 800adcc:	4603      	mov	r3, r0
 800adce:	2b00      	cmp	r3, #0
 800add0:	d001      	beq.n	800add6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800add2:	f7f5 fd6d 	bl	80008b0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800add6:	490c      	ldr	r1, [pc, #48]	; (800ae08 <MX_USB_DEVICE_Init+0x5c>)
 800add8:	4809      	ldr	r0, [pc, #36]	; (800ae00 <MX_USB_DEVICE_Init+0x54>)
 800adda:	f7fa fe2b 	bl	8005a34 <USBD_CDC_RegisterInterface>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d001      	beq.n	800ade8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ade4:	f7f5 fd64 	bl	80008b0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ade8:	4805      	ldr	r0, [pc, #20]	; (800ae00 <MX_USB_DEVICE_Init+0x54>)
 800adea:	f7fa ff5f 	bl	8005cac <USBD_Start>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d001      	beq.n	800adf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800adf4:	f7f5 fd5c 	bl	80008b0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800adf8:	bf00      	nop
 800adfa:	bd80      	pop	{r7, pc}
 800adfc:	200000b0 	.word	0x200000b0
 800ae00:	20009070 	.word	0x20009070
 800ae04:	20000018 	.word	0x20000018
 800ae08:	2000009c 	.word	0x2000009c

0800ae0c <init_usb_rtos_obj>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);
static int8_t CDC_TransmitCplt_FS(uint8_t *pbuf, uint32_t *Len, uint8_t epnum);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

void init_usb_rtos_obj(void){
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	af00      	add	r7, sp, #0
	sem_usb_tx = xSemaphoreCreateBinary();
 800ae10:	2203      	movs	r2, #3
 800ae12:	2100      	movs	r1, #0
 800ae14:	2001      	movs	r0, #1
 800ae16:	f7fc fcad 	bl	8007774 <xQueueGenericCreate>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	4a07      	ldr	r2, [pc, #28]	; (800ae3c <init_usb_rtos_obj+0x30>)
 800ae1e:	6013      	str	r3, [r2, #0]
	msg_buf_rx = xMessageBufferCreate(768);
 800ae20:	2201      	movs	r2, #1
 800ae22:	2100      	movs	r1, #0
 800ae24:	f44f 7040 	mov.w	r0, #768	; 0x300
 800ae28:	f7fd fa9a 	bl	8008360 <xStreamBufferGenericCreate>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	4a04      	ldr	r2, [pc, #16]	; (800ae40 <init_usb_rtos_obj+0x34>)
 800ae30:	6013      	str	r3, [r2, #0]
	usb_on = 1;
 800ae32:	4b04      	ldr	r3, [pc, #16]	; (800ae44 <init_usb_rtos_obj+0x38>)
 800ae34:	2201      	movs	r2, #1
 800ae36:	601a      	str	r2, [r3, #0]
}
 800ae38:	bf00      	nop
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	2000a350 	.word	0x2000a350
 800ae40:	2000934c 	.word	0x2000934c
 800ae44:	2000a354 	.word	0x2000a354

0800ae48 <read_usb_cdc>:
/*
BaseType_t CDC_Receiveq_MS(char *data, TickType_t timeout){
	return xQueueReceive(queue_usb, data, timeout);
}*/

uint8_t read_usb_cdc(char *buffer, int buf_len, TickType_t timeout){
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
	return xMessageBufferReceive(msg_buf_rx, buffer, buf_len, timeout);
 800ae54:	4b06      	ldr	r3, [pc, #24]	; (800ae70 <read_usb_cdc+0x28>)
 800ae56:	6818      	ldr	r0, [r3, #0]
 800ae58:	68ba      	ldr	r2, [r7, #8]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	68f9      	ldr	r1, [r7, #12]
 800ae5e:	f7fd fbbb 	bl	80085d8 <xStreamBufferReceive>
 800ae62:	4603      	mov	r3, r0
 800ae64:	b2db      	uxtb	r3, r3
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3710      	adds	r7, #16
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	2000934c 	.word	0x2000934c

0800ae74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ae78:	2200      	movs	r2, #0
 800ae7a:	4905      	ldr	r1, [pc, #20]	; (800ae90 <CDC_Init_FS+0x1c>)
 800ae7c:	4805      	ldr	r0, [pc, #20]	; (800ae94 <CDC_Init_FS+0x20>)
 800ae7e:	f7fa fdf3 	bl	8005a68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ae82:	4905      	ldr	r1, [pc, #20]	; (800ae98 <CDC_Init_FS+0x24>)
 800ae84:	4803      	ldr	r0, [pc, #12]	; (800ae94 <CDC_Init_FS+0x20>)
 800ae86:	f7fa fe11 	bl	8005aac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ae8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	20009b50 	.word	0x20009b50
 800ae94:	20009070 	.word	0x20009070
 800ae98:	20009350 	.word	0x20009350

0800ae9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aea0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr

0800aeac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	6039      	str	r1, [r7, #0]
 800aeb6:	71fb      	strb	r3, [r7, #7]
 800aeb8:	4613      	mov	r3, r2
 800aeba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  portBASE_TYPE yield = pdFALSE;
 800aebc:	2300      	movs	r3, #0
 800aebe:	60fb      	str	r3, [r7, #12]
  char data = 0;
 800aec0:	2300      	movs	r3, #0
 800aec2:	72fb      	strb	r3, [r7, #11]
  switch(cmd)
 800aec4:	79fb      	ldrb	r3, [r7, #7]
 800aec6:	2b23      	cmp	r3, #35	; 0x23
 800aec8:	d85f      	bhi.n	800af8a <CDC_Control_FS+0xde>
 800aeca:	a201      	add	r2, pc, #4	; (adr r2, 800aed0 <CDC_Control_FS+0x24>)
 800aecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed0:	0800af8b 	.word	0x0800af8b
 800aed4:	0800af8b 	.word	0x0800af8b
 800aed8:	0800af8b 	.word	0x0800af8b
 800aedc:	0800af8b 	.word	0x0800af8b
 800aee0:	0800af8b 	.word	0x0800af8b
 800aee4:	0800af8b 	.word	0x0800af8b
 800aee8:	0800af8b 	.word	0x0800af8b
 800aeec:	0800af8b 	.word	0x0800af8b
 800aef0:	0800af8b 	.word	0x0800af8b
 800aef4:	0800af8b 	.word	0x0800af8b
 800aef8:	0800af8b 	.word	0x0800af8b
 800aefc:	0800af8b 	.word	0x0800af8b
 800af00:	0800af8b 	.word	0x0800af8b
 800af04:	0800af8b 	.word	0x0800af8b
 800af08:	0800af8b 	.word	0x0800af8b
 800af0c:	0800af8b 	.word	0x0800af8b
 800af10:	0800af8b 	.word	0x0800af8b
 800af14:	0800af8b 	.word	0x0800af8b
 800af18:	0800af8b 	.word	0x0800af8b
 800af1c:	0800af8b 	.word	0x0800af8b
 800af20:	0800af8b 	.word	0x0800af8b
 800af24:	0800af8b 	.word	0x0800af8b
 800af28:	0800af8b 	.word	0x0800af8b
 800af2c:	0800af8b 	.word	0x0800af8b
 800af30:	0800af8b 	.word	0x0800af8b
 800af34:	0800af8b 	.word	0x0800af8b
 800af38:	0800af8b 	.word	0x0800af8b
 800af3c:	0800af8b 	.word	0x0800af8b
 800af40:	0800af8b 	.word	0x0800af8b
 800af44:	0800af8b 	.word	0x0800af8b
 800af48:	0800af8b 	.word	0x0800af8b
 800af4c:	0800af8b 	.word	0x0800af8b
 800af50:	0800af8b 	.word	0x0800af8b
 800af54:	0800af8b 	.word	0x0800af8b
 800af58:	0800af61 	.word	0x0800af61
 800af5c:	0800af8b 	.word	0x0800af8b
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
  	  xMessageBufferSendFromISR(msg_buf_rx, &data, 1, &yield);
 800af60:	4b0e      	ldr	r3, [pc, #56]	; (800af9c <CDC_Control_FS+0xf0>)
 800af62:	6818      	ldr	r0, [r3, #0]
 800af64:	f107 030c 	add.w	r3, r7, #12
 800af68:	f107 010b 	add.w	r1, r7, #11
 800af6c:	2201      	movs	r2, #1
 800af6e:	f7fd fa85 	bl	800847c <xStreamBufferSendFromISR>
  	  portYIELD_FROM_ISR(yield);
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d00a      	beq.n	800af8e <CDC_Control_FS+0xe2>
 800af78:	4b09      	ldr	r3, [pc, #36]	; (800afa0 <CDC_Control_FS+0xf4>)
 800af7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af7e:	601a      	str	r2, [r3, #0]
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	f3bf 8f6f 	isb	sy

    break;
 800af88:	e001      	b.n	800af8e <CDC_Control_FS+0xe2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800af8a:	bf00      	nop
 800af8c:	e000      	b.n	800af90 <CDC_Control_FS+0xe4>
    break;
 800af8e:	bf00      	nop
  }

  return (USBD_OK);
 800af90:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800af92:	4618      	mov	r0, r3
 800af94:	3710      	adds	r7, #16
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	2000934c 	.word	0x2000934c
 800afa0:	e000ed04 	.word	0xe000ed04

0800afa4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	portBASE_TYPE yield = pdFALSE;
 800afae:	2300      	movs	r3, #0
 800afb0:	60fb      	str	r3, [r7, #12]
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800afb2:	6879      	ldr	r1, [r7, #4]
 800afb4:	480f      	ldr	r0, [pc, #60]	; (800aff4 <CDC_Receive_FS+0x50>)
 800afb6:	f7fa fd79 	bl	8005aac <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800afba:	480e      	ldr	r0, [pc, #56]	; (800aff4 <CDC_Receive_FS+0x50>)
 800afbc:	f7fa fdda 	bl	8005b74 <USBD_CDC_ReceivePacket>

	  xMessageBufferSendFromISR(msg_buf_rx, Buf, *Len, &yield);
 800afc0:	4b0d      	ldr	r3, [pc, #52]	; (800aff8 <CDC_Receive_FS+0x54>)
 800afc2:	6818      	ldr	r0, [r3, #0]
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	f107 030c 	add.w	r3, r7, #12
 800afcc:	6879      	ldr	r1, [r7, #4]
 800afce:	f7fd fa55 	bl	800847c <xStreamBufferSendFromISR>
	  portYIELD_FROM_ISR(yield);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d007      	beq.n	800afe8 <CDC_Receive_FS+0x44>
 800afd8:	4b08      	ldr	r3, [pc, #32]	; (800affc <CDC_Receive_FS+0x58>)
 800afda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	f3bf 8f4f 	dsb	sy
 800afe4:	f3bf 8f6f 	isb	sy

	return (USBD_OK);
 800afe8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	20009070 	.word	0x20009070
 800aff8:	2000934c 	.word	0x2000934c
 800affc:	e000ed04 	.word	0xe000ed04

0800b000 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	460b      	mov	r3, r1
 800b00a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b00c:	2300      	movs	r3, #0
 800b00e:	73fb      	strb	r3, [r7, #15]
	  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
	  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
	  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
	  xSemaphoreGive(mutex_usb);
  }*/
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b010:	4b10      	ldr	r3, [pc, #64]	; (800b054 <CDC_Transmit_FS+0x54>)
 800b012:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b016:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b022:	2301      	movs	r3, #1
 800b024:	e012      	b.n	800b04c <CDC_Transmit_FS+0x4c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b026:	887b      	ldrh	r3, [r7, #2]
 800b028:	461a      	mov	r2, r3
 800b02a:	6879      	ldr	r1, [r7, #4]
 800b02c:	4809      	ldr	r0, [pc, #36]	; (800b054 <CDC_Transmit_FS+0x54>)
 800b02e:	f7fa fd1b 	bl	8005a68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b032:	4808      	ldr	r0, [pc, #32]	; (800b054 <CDC_Transmit_FS+0x54>)
 800b034:	f7fa fd58 	bl	8005ae8 <USBD_CDC_TransmitPacket>
 800b038:	4603      	mov	r3, r0
 800b03a:	73fb      	strb	r3, [r7, #15]
  xSemaphoreTake(sem_usb_tx, portMAX_DELAY);
 800b03c:	4b06      	ldr	r3, [pc, #24]	; (800b058 <CDC_Transmit_FS+0x58>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b044:	4618      	mov	r0, r3
 800b046:	f7fc fef9 	bl	8007e3c <xQueueSemaphoreTake>
  /* USER CODE END 7 */
  return result;
 800b04a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}
 800b054:	20009070 	.word	0x20009070
 800b058:	2000a350 	.word	0x2000a350

0800b05c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b086      	sub	sp, #24
 800b060:	af00      	add	r7, sp, #0
 800b062:	60f8      	str	r0, [r7, #12]
 800b064:	60b9      	str	r1, [r7, #8]
 800b066:	4613      	mov	r3, r2
 800b068:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b06a:	2300      	movs	r3, #0
 800b06c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  portBASE_TYPE tmp = pdFALSE;
 800b06e:	2300      	movs	r3, #0
 800b070:	613b      	str	r3, [r7, #16]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  xSemaphoreGiveFromISR(sem_usb_tx, &tmp);
 800b072:	4b0b      	ldr	r3, [pc, #44]	; (800b0a0 <CDC_TransmitCplt_FS+0x44>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f107 0210 	add.w	r2, r7, #16
 800b07a:	4611      	mov	r1, r2
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7fc fd70 	bl	8007b62 <xQueueGiveFromISR>
  portYIELD_FROM_ISR(&tmp);
 800b082:	4b08      	ldr	r3, [pc, #32]	; (800b0a4 <CDC_TransmitCplt_FS+0x48>)
 800b084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b088:	601a      	str	r2, [r3, #0]
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	f3bf 8f6f 	isb	sy
  /* USER CODE END 13 */
  return result;
 800b092:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b096:	4618      	mov	r0, r3
 800b098:	3718      	adds	r7, #24
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd80      	pop	{r7, pc}
 800b09e:	bf00      	nop
 800b0a0:	2000a350 	.word	0x2000a350
 800b0a4:	e000ed04 	.word	0xe000ed04

0800b0a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	6039      	str	r1, [r7, #0]
 800b0b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	2212      	movs	r2, #18
 800b0b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b0ba:	4b03      	ldr	r3, [pc, #12]	; (800b0c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	200000cc 	.word	0x200000cc

0800b0cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	6039      	str	r1, [r7, #0]
 800b0d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	2204      	movs	r2, #4
 800b0dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b0de:	4b03      	ldr	r3, [pc, #12]	; (800b0ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	370c      	adds	r7, #12
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ea:	4770      	bx	lr
 800b0ec:	200000e0 	.word	0x200000e0

0800b0f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	6039      	str	r1, [r7, #0]
 800b0fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b0fc:	79fb      	ldrb	r3, [r7, #7]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d105      	bne.n	800b10e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b102:	683a      	ldr	r2, [r7, #0]
 800b104:	4907      	ldr	r1, [pc, #28]	; (800b124 <USBD_FS_ProductStrDescriptor+0x34>)
 800b106:	4808      	ldr	r0, [pc, #32]	; (800b128 <USBD_FS_ProductStrDescriptor+0x38>)
 800b108:	f7fb ff7c 	bl	8007004 <USBD_GetString>
 800b10c:	e004      	b.n	800b118 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b10e:	683a      	ldr	r2, [r7, #0]
 800b110:	4904      	ldr	r1, [pc, #16]	; (800b124 <USBD_FS_ProductStrDescriptor+0x34>)
 800b112:	4805      	ldr	r0, [pc, #20]	; (800b128 <USBD_FS_ProductStrDescriptor+0x38>)
 800b114:	f7fb ff76 	bl	8007004 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b118:	4b02      	ldr	r3, [pc, #8]	; (800b124 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	2000a358 	.word	0x2000a358
 800b128:	0800bb68 	.word	0x0800bb68

0800b12c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	4603      	mov	r3, r0
 800b134:	6039      	str	r1, [r7, #0]
 800b136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b138:	683a      	ldr	r2, [r7, #0]
 800b13a:	4904      	ldr	r1, [pc, #16]	; (800b14c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b13c:	4804      	ldr	r0, [pc, #16]	; (800b150 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b13e:	f7fb ff61 	bl	8007004 <USBD_GetString>
  return USBD_StrDesc;
 800b142:	4b02      	ldr	r3, [pc, #8]	; (800b14c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b144:	4618      	mov	r0, r3
 800b146:	3708      	adds	r7, #8
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	2000a358 	.word	0x2000a358
 800b150:	0800bb80 	.word	0x0800bb80

0800b154 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	4603      	mov	r3, r0
 800b15c:	6039      	str	r1, [r7, #0]
 800b15e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	221a      	movs	r2, #26
 800b164:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b166:	f000 f843 	bl	800b1f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b16a:	4b02      	ldr	r3, [pc, #8]	; (800b174 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3708      	adds	r7, #8
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}
 800b174:	200000e4 	.word	0x200000e4

0800b178 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	4603      	mov	r3, r0
 800b180:	6039      	str	r1, [r7, #0]
 800b182:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b184:	79fb      	ldrb	r3, [r7, #7]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d105      	bne.n	800b196 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	4907      	ldr	r1, [pc, #28]	; (800b1ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800b18e:	4808      	ldr	r0, [pc, #32]	; (800b1b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b190:	f7fb ff38 	bl	8007004 <USBD_GetString>
 800b194:	e004      	b.n	800b1a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b196:	683a      	ldr	r2, [r7, #0]
 800b198:	4904      	ldr	r1, [pc, #16]	; (800b1ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800b19a:	4805      	ldr	r0, [pc, #20]	; (800b1b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b19c:	f7fb ff32 	bl	8007004 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1a0:	4b02      	ldr	r3, [pc, #8]	; (800b1ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3708      	adds	r7, #8
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	2000a358 	.word	0x2000a358
 800b1b0:	0800bb94 	.word	0x0800bb94

0800b1b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b082      	sub	sp, #8
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	6039      	str	r1, [r7, #0]
 800b1be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b1c0:	79fb      	ldrb	r3, [r7, #7]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d105      	bne.n	800b1d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b1c6:	683a      	ldr	r2, [r7, #0]
 800b1c8:	4907      	ldr	r1, [pc, #28]	; (800b1e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b1ca:	4808      	ldr	r0, [pc, #32]	; (800b1ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b1cc:	f7fb ff1a 	bl	8007004 <USBD_GetString>
 800b1d0:	e004      	b.n	800b1dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b1d2:	683a      	ldr	r2, [r7, #0]
 800b1d4:	4904      	ldr	r1, [pc, #16]	; (800b1e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b1d6:	4805      	ldr	r0, [pc, #20]	; (800b1ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b1d8:	f7fb ff14 	bl	8007004 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b1dc:	4b02      	ldr	r3, [pc, #8]	; (800b1e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	3708      	adds	r7, #8
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	bd80      	pop	{r7, pc}
 800b1e6:	bf00      	nop
 800b1e8:	2000a358 	.word	0x2000a358
 800b1ec:	0800bba0 	.word	0x0800bba0

0800b1f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b1f6:	4b0f      	ldr	r3, [pc, #60]	; (800b234 <Get_SerialNum+0x44>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b1fc:	4b0e      	ldr	r3, [pc, #56]	; (800b238 <Get_SerialNum+0x48>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b202:	4b0e      	ldr	r3, [pc, #56]	; (800b23c <Get_SerialNum+0x4c>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4413      	add	r3, r2
 800b20e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d009      	beq.n	800b22a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b216:	2208      	movs	r2, #8
 800b218:	4909      	ldr	r1, [pc, #36]	; (800b240 <Get_SerialNum+0x50>)
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f000 f814 	bl	800b248 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b220:	2204      	movs	r2, #4
 800b222:	4908      	ldr	r1, [pc, #32]	; (800b244 <Get_SerialNum+0x54>)
 800b224:	68b8      	ldr	r0, [r7, #8]
 800b226:	f000 f80f 	bl	800b248 <IntToUnicode>
  }
}
 800b22a:	bf00      	nop
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	1fff7a10 	.word	0x1fff7a10
 800b238:	1fff7a14 	.word	0x1fff7a14
 800b23c:	1fff7a18 	.word	0x1fff7a18
 800b240:	200000e6 	.word	0x200000e6
 800b244:	200000f6 	.word	0x200000f6

0800b248 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b248:	b480      	push	{r7}
 800b24a:	b087      	sub	sp, #28
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	4613      	mov	r3, r2
 800b254:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b256:	2300      	movs	r3, #0
 800b258:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b25a:	2300      	movs	r3, #0
 800b25c:	75fb      	strb	r3, [r7, #23]
 800b25e:	e027      	b.n	800b2b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	0f1b      	lsrs	r3, r3, #28
 800b264:	2b09      	cmp	r3, #9
 800b266:	d80b      	bhi.n	800b280 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	0f1b      	lsrs	r3, r3, #28
 800b26c:	b2da      	uxtb	r2, r3
 800b26e:	7dfb      	ldrb	r3, [r7, #23]
 800b270:	005b      	lsls	r3, r3, #1
 800b272:	4619      	mov	r1, r3
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	440b      	add	r3, r1
 800b278:	3230      	adds	r2, #48	; 0x30
 800b27a:	b2d2      	uxtb	r2, r2
 800b27c:	701a      	strb	r2, [r3, #0]
 800b27e:	e00a      	b.n	800b296 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	0f1b      	lsrs	r3, r3, #28
 800b284:	b2da      	uxtb	r2, r3
 800b286:	7dfb      	ldrb	r3, [r7, #23]
 800b288:	005b      	lsls	r3, r3, #1
 800b28a:	4619      	mov	r1, r3
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	440b      	add	r3, r1
 800b290:	3237      	adds	r2, #55	; 0x37
 800b292:	b2d2      	uxtb	r2, r2
 800b294:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	011b      	lsls	r3, r3, #4
 800b29a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b29c:	7dfb      	ldrb	r3, [r7, #23]
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	3301      	adds	r3, #1
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	4413      	add	r3, r2
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b2aa:	7dfb      	ldrb	r3, [r7, #23]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	75fb      	strb	r3, [r7, #23]
 800b2b0:	7dfa      	ldrb	r2, [r7, #23]
 800b2b2:	79fb      	ldrb	r3, [r7, #7]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d3d3      	bcc.n	800b260 <IntToUnicode+0x18>
  }
}
 800b2b8:	bf00      	nop
 800b2ba:	bf00      	nop
 800b2bc:	371c      	adds	r7, #28
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c4:	4770      	bx	lr
	...

0800b2c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b08a      	sub	sp, #40	; 0x28
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2d0:	f107 0314 	add.w	r3, r7, #20
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]
 800b2d8:	605a      	str	r2, [r3, #4]
 800b2da:	609a      	str	r2, [r3, #8]
 800b2dc:	60da      	str	r2, [r3, #12]
 800b2de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2e8:	d13a      	bne.n	800b360 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	613b      	str	r3, [r7, #16]
 800b2ee:	4b1e      	ldr	r3, [pc, #120]	; (800b368 <HAL_PCD_MspInit+0xa0>)
 800b2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f2:	4a1d      	ldr	r2, [pc, #116]	; (800b368 <HAL_PCD_MspInit+0xa0>)
 800b2f4:	f043 0301 	orr.w	r3, r3, #1
 800b2f8:	6313      	str	r3, [r2, #48]	; 0x30
 800b2fa:	4b1b      	ldr	r3, [pc, #108]	; (800b368 <HAL_PCD_MspInit+0xa0>)
 800b2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fe:	f003 0301 	and.w	r3, r3, #1
 800b302:	613b      	str	r3, [r7, #16]
 800b304:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b306:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b30a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b30c:	2302      	movs	r3, #2
 800b30e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b310:	2300      	movs	r3, #0
 800b312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b314:	2303      	movs	r3, #3
 800b316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b318:	230a      	movs	r3, #10
 800b31a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b31c:	f107 0314 	add.w	r3, r7, #20
 800b320:	4619      	mov	r1, r3
 800b322:	4812      	ldr	r0, [pc, #72]	; (800b36c <HAL_PCD_MspInit+0xa4>)
 800b324:	f7f6 fad4 	bl	80018d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b328:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <HAL_PCD_MspInit+0xa0>)
 800b32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b32c:	4a0e      	ldr	r2, [pc, #56]	; (800b368 <HAL_PCD_MspInit+0xa0>)
 800b32e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b332:	6353      	str	r3, [r2, #52]	; 0x34
 800b334:	2300      	movs	r3, #0
 800b336:	60fb      	str	r3, [r7, #12]
 800b338:	4b0b      	ldr	r3, [pc, #44]	; (800b368 <HAL_PCD_MspInit+0xa0>)
 800b33a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b33c:	4a0a      	ldr	r2, [pc, #40]	; (800b368 <HAL_PCD_MspInit+0xa0>)
 800b33e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b342:	6453      	str	r3, [r2, #68]	; 0x44
 800b344:	4b08      	ldr	r3, [pc, #32]	; (800b368 <HAL_PCD_MspInit+0xa0>)
 800b346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b34c:	60fb      	str	r3, [r7, #12]
 800b34e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b350:	2200      	movs	r2, #0
 800b352:	2105      	movs	r1, #5
 800b354:	2043      	movs	r0, #67	; 0x43
 800b356:	f7f5 ff9a 	bl	800128e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b35a:	2043      	movs	r0, #67	; 0x43
 800b35c:	f7f5 ffb3 	bl	80012c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b360:	bf00      	nop
 800b362:	3728      	adds	r7, #40	; 0x28
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	40023800 	.word	0x40023800
 800b36c:	40020000 	.word	0x40020000

0800b370 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b384:	4619      	mov	r1, r3
 800b386:	4610      	mov	r0, r2
 800b388:	f7fa fcdd 	bl	8005d46 <USBD_LL_SetupStage>
}
 800b38c:	bf00      	nop
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b3a6:	78fa      	ldrb	r2, [r7, #3]
 800b3a8:	6879      	ldr	r1, [r7, #4]
 800b3aa:	4613      	mov	r3, r2
 800b3ac:	00db      	lsls	r3, r3, #3
 800b3ae:	4413      	add	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	440b      	add	r3, r1
 800b3b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	78fb      	ldrb	r3, [r7, #3]
 800b3bc:	4619      	mov	r1, r3
 800b3be:	f7fa fd17 	bl	8005df0 <USBD_LL_DataOutStage>
}
 800b3c2:	bf00      	nop
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b082      	sub	sp, #8
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	460b      	mov	r3, r1
 800b3d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b3dc:	78fa      	ldrb	r2, [r7, #3]
 800b3de:	6879      	ldr	r1, [r7, #4]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	00db      	lsls	r3, r3, #3
 800b3e4:	4413      	add	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	440b      	add	r3, r1
 800b3ea:	334c      	adds	r3, #76	; 0x4c
 800b3ec:	681a      	ldr	r2, [r3, #0]
 800b3ee:	78fb      	ldrb	r3, [r7, #3]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	f7fa fdb0 	bl	8005f56 <USBD_LL_DataInStage>
}
 800b3f6:	bf00      	nop
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b082      	sub	sp, #8
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7fa fee4 	bl	80061da <USBD_LL_SOF>
}
 800b412:	bf00      	nop
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b084      	sub	sp, #16
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b422:	2301      	movs	r3, #1
 800b424:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d102      	bne.n	800b434 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b42e:	2300      	movs	r3, #0
 800b430:	73fb      	strb	r3, [r7, #15]
 800b432:	e008      	b.n	800b446 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	2b02      	cmp	r3, #2
 800b43a:	d102      	bne.n	800b442 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b43c:	2301      	movs	r3, #1
 800b43e:	73fb      	strb	r3, [r7, #15]
 800b440:	e001      	b.n	800b446 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b442:	f7f5 fa35 	bl	80008b0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b44c:	7bfa      	ldrb	r2, [r7, #15]
 800b44e:	4611      	mov	r1, r2
 800b450:	4618      	mov	r0, r3
 800b452:	f7fa fe84 	bl	800615e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fa fe2c 	bl	80060ba <USBD_LL_Reset>
}
 800b462:	bf00      	nop
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
	...

0800b46c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b47a:	4618      	mov	r0, r3
 800b47c:	f7fa fe7f 	bl	800617e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	6812      	ldr	r2, [r2, #0]
 800b48e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b492:	f043 0301 	orr.w	r3, r3, #1
 800b496:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6a1b      	ldr	r3, [r3, #32]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d005      	beq.n	800b4ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4a0:	4b04      	ldr	r3, [pc, #16]	; (800b4b4 <HAL_PCD_SuspendCallback+0x48>)
 800b4a2:	691b      	ldr	r3, [r3, #16]
 800b4a4:	4a03      	ldr	r2, [pc, #12]	; (800b4b4 <HAL_PCD_SuspendCallback+0x48>)
 800b4a6:	f043 0306 	orr.w	r3, r3, #6
 800b4aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b4ac:	bf00      	nop
 800b4ae:	3708      	adds	r7, #8
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	e000ed00 	.word	0xe000ed00

0800b4b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fa fe6f 	bl	80061aa <USBD_LL_Resume>
}
 800b4cc:	bf00      	nop
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}

0800b4d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b082      	sub	sp, #8
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	460b      	mov	r3, r1
 800b4de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b4e6:	78fa      	ldrb	r2, [r7, #3]
 800b4e8:	4611      	mov	r1, r2
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fa fec7 	bl	800627e <USBD_LL_IsoOUTIncomplete>
}
 800b4f0:	bf00      	nop
 800b4f2:	3708      	adds	r7, #8
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	460b      	mov	r3, r1
 800b502:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b50a:	78fa      	ldrb	r2, [r7, #3]
 800b50c:	4611      	mov	r1, r2
 800b50e:	4618      	mov	r0, r3
 800b510:	f7fa fe83 	bl	800621a <USBD_LL_IsoINIncomplete>
}
 800b514:	bf00      	nop
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}

0800b51c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b082      	sub	sp, #8
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b52a:	4618      	mov	r0, r3
 800b52c:	f7fa fed9 	bl	80062e2 <USBD_LL_DevConnected>
}
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b082      	sub	sp, #8
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b546:	4618      	mov	r0, r3
 800b548:	f7fa fed6 	bl	80062f8 <USBD_LL_DevDisconnected>
}
 800b54c:	bf00      	nop
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d13c      	bne.n	800b5de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b564:	4a20      	ldr	r2, [pc, #128]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a1e      	ldr	r2, [pc, #120]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b570:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b574:	4b1c      	ldr	r3, [pc, #112]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b576:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b57a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b57c:	4b1a      	ldr	r3, [pc, #104]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b57e:	2204      	movs	r2, #4
 800b580:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b582:	4b19      	ldr	r3, [pc, #100]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b584:	2202      	movs	r2, #2
 800b586:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b588:	4b17      	ldr	r3, [pc, #92]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b58e:	4b16      	ldr	r3, [pc, #88]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b590:	2202      	movs	r2, #2
 800b592:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b594:	4b14      	ldr	r3, [pc, #80]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b596:	2200      	movs	r2, #0
 800b598:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b59a:	4b13      	ldr	r3, [pc, #76]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b5a0:	4b11      	ldr	r3, [pc, #68]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b5a6:	4b10      	ldr	r3, [pc, #64]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b5ac:	4b0e      	ldr	r3, [pc, #56]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b5b2:	480d      	ldr	r0, [pc, #52]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b5b4:	f7f6 fb43 	bl	8001c3e <HAL_PCD_Init>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d001      	beq.n	800b5c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b5be:	f7f5 f977 	bl	80008b0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b5c2:	2180      	movs	r1, #128	; 0x80
 800b5c4:	4808      	ldr	r0, [pc, #32]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b5c6:	f7f7 fd9a 	bl	80030fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b5ca:	2240      	movs	r2, #64	; 0x40
 800b5cc:	2100      	movs	r1, #0
 800b5ce:	4806      	ldr	r0, [pc, #24]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b5d0:	f7f7 fd4e 	bl	8003070 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b5d4:	2280      	movs	r2, #128	; 0x80
 800b5d6:	2101      	movs	r1, #1
 800b5d8:	4803      	ldr	r0, [pc, #12]	; (800b5e8 <USBD_LL_Init+0x94>)
 800b5da:	f7f7 fd49 	bl	8003070 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	2000a558 	.word	0x2000a558

0800b5ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b602:	4618      	mov	r0, r3
 800b604:	f7f6 fc38 	bl	8001e78 <HAL_PCD_Start>
 800b608:	4603      	mov	r3, r0
 800b60a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b60c:	7bfb      	ldrb	r3, [r7, #15]
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 f942 	bl	800b898 <USBD_Get_USB_Status>
 800b614:	4603      	mov	r3, r0
 800b616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b618:	7bbb      	ldrb	r3, [r7, #14]
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b084      	sub	sp, #16
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
 800b62a:	4608      	mov	r0, r1
 800b62c:	4611      	mov	r1, r2
 800b62e:	461a      	mov	r2, r3
 800b630:	4603      	mov	r3, r0
 800b632:	70fb      	strb	r3, [r7, #3]
 800b634:	460b      	mov	r3, r1
 800b636:	70bb      	strb	r3, [r7, #2]
 800b638:	4613      	mov	r3, r2
 800b63a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b63c:	2300      	movs	r3, #0
 800b63e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b640:	2300      	movs	r3, #0
 800b642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b64a:	78bb      	ldrb	r3, [r7, #2]
 800b64c:	883a      	ldrh	r2, [r7, #0]
 800b64e:	78f9      	ldrb	r1, [r7, #3]
 800b650:	f7f7 f909 	bl	8002866 <HAL_PCD_EP_Open>
 800b654:	4603      	mov	r3, r0
 800b656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b658:	7bfb      	ldrb	r3, [r7, #15]
 800b65a:	4618      	mov	r0, r3
 800b65c:	f000 f91c 	bl	800b898 <USBD_Get_USB_Status>
 800b660:	4603      	mov	r3, r0
 800b662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b664:	7bbb      	ldrb	r3, [r7, #14]
}
 800b666:	4618      	mov	r0, r3
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}

0800b66e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b66e:	b580      	push	{r7, lr}
 800b670:	b084      	sub	sp, #16
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	460b      	mov	r3, r1
 800b678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b67e:	2300      	movs	r3, #0
 800b680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b688:	78fa      	ldrb	r2, [r7, #3]
 800b68a:	4611      	mov	r1, r2
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7f7 f952 	bl	8002936 <HAL_PCD_EP_Close>
 800b692:	4603      	mov	r3, r0
 800b694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b696:	7bfb      	ldrb	r3, [r7, #15]
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 f8fd 	bl	800b898 <USBD_Get_USB_Status>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3710      	adds	r7, #16
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b6c6:	78fa      	ldrb	r2, [r7, #3]
 800b6c8:	4611      	mov	r1, r2
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7f7 fa2a 	bl	8002b24 <HAL_PCD_EP_SetStall>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6d4:	7bfb      	ldrb	r3, [r7, #15]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f000 f8de 	bl	800b898 <USBD_Get_USB_Status>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b084      	sub	sp, #16
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b704:	78fa      	ldrb	r2, [r7, #3]
 800b706:	4611      	mov	r1, r2
 800b708:	4618      	mov	r0, r3
 800b70a:	f7f7 fa6f 	bl	8002bec <HAL_PCD_EP_ClrStall>
 800b70e:	4603      	mov	r3, r0
 800b710:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	4618      	mov	r0, r3
 800b716:	f000 f8bf 	bl	800b898 <USBD_Get_USB_Status>
 800b71a:	4603      	mov	r3, r0
 800b71c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b71e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3710      	adds	r7, #16
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	460b      	mov	r3, r1
 800b732:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b73a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b73c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b740:	2b00      	cmp	r3, #0
 800b742:	da0b      	bge.n	800b75c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b744:	78fb      	ldrb	r3, [r7, #3]
 800b746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b74a:	68f9      	ldr	r1, [r7, #12]
 800b74c:	4613      	mov	r3, r2
 800b74e:	00db      	lsls	r3, r3, #3
 800b750:	4413      	add	r3, r2
 800b752:	009b      	lsls	r3, r3, #2
 800b754:	440b      	add	r3, r1
 800b756:	333e      	adds	r3, #62	; 0x3e
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	e00b      	b.n	800b774 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b75c:	78fb      	ldrb	r3, [r7, #3]
 800b75e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b762:	68f9      	ldr	r1, [r7, #12]
 800b764:	4613      	mov	r3, r2
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	4413      	add	r3, r2
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	440b      	add	r3, r1
 800b76e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b772:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b774:	4618      	mov	r0, r3
 800b776:	3714      	adds	r7, #20
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	460b      	mov	r3, r1
 800b78a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b78c:	2300      	movs	r3, #0
 800b78e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b790:	2300      	movs	r3, #0
 800b792:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b79a:	78fa      	ldrb	r2, [r7, #3]
 800b79c:	4611      	mov	r1, r2
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7f7 f83c 	bl	800281c <HAL_PCD_SetAddress>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f000 f874 	bl	800b898 <USBD_Get_USB_Status>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}

0800b7be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b7be:	b580      	push	{r7, lr}
 800b7c0:	b086      	sub	sp, #24
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	60f8      	str	r0, [r7, #12]
 800b7c6:	607a      	str	r2, [r7, #4]
 800b7c8:	603b      	str	r3, [r7, #0]
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b7dc:	7af9      	ldrb	r1, [r7, #11]
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	687a      	ldr	r2, [r7, #4]
 800b7e2:	f7f7 f955 	bl	8002a90 <HAL_PCD_EP_Transmit>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f000 f853 	bl	800b898 <USBD_Get_USB_Status>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b7f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b086      	sub	sp, #24
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	607a      	str	r2, [r7, #4]
 800b80a:	603b      	str	r3, [r7, #0]
 800b80c:	460b      	mov	r3, r1
 800b80e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b810:	2300      	movs	r3, #0
 800b812:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b814:	2300      	movs	r3, #0
 800b816:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b81e:	7af9      	ldrb	r1, [r7, #11]
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	f7f7 f8d1 	bl	80029ca <HAL_PCD_EP_Receive>
 800b828:	4603      	mov	r3, r0
 800b82a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b82c:	7dfb      	ldrb	r3, [r7, #23]
 800b82e:	4618      	mov	r0, r3
 800b830:	f000 f832 	bl	800b898 <USBD_Get_USB_Status>
 800b834:	4603      	mov	r3, r0
 800b836:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b838:	7dbb      	ldrb	r3, [r7, #22]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b082      	sub	sp, #8
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	460b      	mov	r3, r1
 800b84c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b854:	78fa      	ldrb	r2, [r7, #3]
 800b856:	4611      	mov	r1, r2
 800b858:	4618      	mov	r0, r3
 800b85a:	f7f7 f901 	bl	8002a60 <HAL_PCD_EP_GetRxCount>
 800b85e:	4603      	mov	r3, r0
}
 800b860:	4618      	mov	r0, r3
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b870:	4b03      	ldr	r3, [pc, #12]	; (800b880 <USBD_static_malloc+0x18>)
}
 800b872:	4618      	mov	r0, r3
 800b874:	370c      	adds	r7, #12
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	2000aa64 	.word	0x2000aa64

0800b884 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b884:	b480      	push	{r7}
 800b886:	b083      	sub	sp, #12
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]

}
 800b88c:	bf00      	nop
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	4603      	mov	r3, r0
 800b8a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b8a6:	79fb      	ldrb	r3, [r7, #7]
 800b8a8:	2b03      	cmp	r3, #3
 800b8aa:	d817      	bhi.n	800b8dc <USBD_Get_USB_Status+0x44>
 800b8ac:	a201      	add	r2, pc, #4	; (adr r2, 800b8b4 <USBD_Get_USB_Status+0x1c>)
 800b8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8b2:	bf00      	nop
 800b8b4:	0800b8c5 	.word	0x0800b8c5
 800b8b8:	0800b8cb 	.word	0x0800b8cb
 800b8bc:	0800b8d1 	.word	0x0800b8d1
 800b8c0:	0800b8d7 	.word	0x0800b8d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b8c8:	e00b      	b.n	800b8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b8ca:	2303      	movs	r3, #3
 800b8cc:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ce:	e008      	b.n	800b8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8d4:	e005      	b.n	800b8e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	73fb      	strb	r3, [r7, #15]
    break;
 800b8da:	e002      	b.n	800b8e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	73fb      	strb	r3, [r7, #15]
    break;
 800b8e0:	bf00      	nop
  }
  return usb_status;
 800b8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3714      	adds	r7, #20
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <__libc_init_array>:
 800b8f0:	b570      	push	{r4, r5, r6, lr}
 800b8f2:	4d0d      	ldr	r5, [pc, #52]	; (800b928 <__libc_init_array+0x38>)
 800b8f4:	4c0d      	ldr	r4, [pc, #52]	; (800b92c <__libc_init_array+0x3c>)
 800b8f6:	1b64      	subs	r4, r4, r5
 800b8f8:	10a4      	asrs	r4, r4, #2
 800b8fa:	2600      	movs	r6, #0
 800b8fc:	42a6      	cmp	r6, r4
 800b8fe:	d109      	bne.n	800b914 <__libc_init_array+0x24>
 800b900:	4d0b      	ldr	r5, [pc, #44]	; (800b930 <__libc_init_array+0x40>)
 800b902:	4c0c      	ldr	r4, [pc, #48]	; (800b934 <__libc_init_array+0x44>)
 800b904:	f000 f8f2 	bl	800baec <_init>
 800b908:	1b64      	subs	r4, r4, r5
 800b90a:	10a4      	asrs	r4, r4, #2
 800b90c:	2600      	movs	r6, #0
 800b90e:	42a6      	cmp	r6, r4
 800b910:	d105      	bne.n	800b91e <__libc_init_array+0x2e>
 800b912:	bd70      	pop	{r4, r5, r6, pc}
 800b914:	f855 3b04 	ldr.w	r3, [r5], #4
 800b918:	4798      	blx	r3
 800b91a:	3601      	adds	r6, #1
 800b91c:	e7ee      	b.n	800b8fc <__libc_init_array+0xc>
 800b91e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b922:	4798      	blx	r3
 800b924:	3601      	adds	r6, #1
 800b926:	e7f2      	b.n	800b90e <__libc_init_array+0x1e>
 800b928:	0800bc54 	.word	0x0800bc54
 800b92c:	0800bc54 	.word	0x0800bc54
 800b930:	0800bc54 	.word	0x0800bc54
 800b934:	0800bc58 	.word	0x0800bc58

0800b938 <__retarget_lock_acquire_recursive>:
 800b938:	4770      	bx	lr

0800b93a <__retarget_lock_release_recursive>:
 800b93a:	4770      	bx	lr

0800b93c <memcpy>:
 800b93c:	440a      	add	r2, r1
 800b93e:	4291      	cmp	r1, r2
 800b940:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b944:	d100      	bne.n	800b948 <memcpy+0xc>
 800b946:	4770      	bx	lr
 800b948:	b510      	push	{r4, lr}
 800b94a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b94e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b952:	4291      	cmp	r1, r2
 800b954:	d1f9      	bne.n	800b94a <memcpy+0xe>
 800b956:	bd10      	pop	{r4, pc}

0800b958 <memset>:
 800b958:	4402      	add	r2, r0
 800b95a:	4603      	mov	r3, r0
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d100      	bne.n	800b962 <memset+0xa>
 800b960:	4770      	bx	lr
 800b962:	f803 1b01 	strb.w	r1, [r3], #1
 800b966:	e7f9      	b.n	800b95c <memset+0x4>

0800b968 <cleanup_glue>:
 800b968:	b538      	push	{r3, r4, r5, lr}
 800b96a:	460c      	mov	r4, r1
 800b96c:	6809      	ldr	r1, [r1, #0]
 800b96e:	4605      	mov	r5, r0
 800b970:	b109      	cbz	r1, 800b976 <cleanup_glue+0xe>
 800b972:	f7ff fff9 	bl	800b968 <cleanup_glue>
 800b976:	4621      	mov	r1, r4
 800b978:	4628      	mov	r0, r5
 800b97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b97e:	f000 b869 	b.w	800ba54 <_free_r>
	...

0800b984 <_reclaim_reent>:
 800b984:	4b2c      	ldr	r3, [pc, #176]	; (800ba38 <_reclaim_reent+0xb4>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4283      	cmp	r3, r0
 800b98a:	b570      	push	{r4, r5, r6, lr}
 800b98c:	4604      	mov	r4, r0
 800b98e:	d051      	beq.n	800ba34 <_reclaim_reent+0xb0>
 800b990:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b992:	b143      	cbz	r3, 800b9a6 <_reclaim_reent+0x22>
 800b994:	68db      	ldr	r3, [r3, #12]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d14a      	bne.n	800ba30 <_reclaim_reent+0xac>
 800b99a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b99c:	6819      	ldr	r1, [r3, #0]
 800b99e:	b111      	cbz	r1, 800b9a6 <_reclaim_reent+0x22>
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	f000 f857 	bl	800ba54 <_free_r>
 800b9a6:	6961      	ldr	r1, [r4, #20]
 800b9a8:	b111      	cbz	r1, 800b9b0 <_reclaim_reent+0x2c>
 800b9aa:	4620      	mov	r0, r4
 800b9ac:	f000 f852 	bl	800ba54 <_free_r>
 800b9b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b9b2:	b111      	cbz	r1, 800b9ba <_reclaim_reent+0x36>
 800b9b4:	4620      	mov	r0, r4
 800b9b6:	f000 f84d 	bl	800ba54 <_free_r>
 800b9ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b9bc:	b111      	cbz	r1, 800b9c4 <_reclaim_reent+0x40>
 800b9be:	4620      	mov	r0, r4
 800b9c0:	f000 f848 	bl	800ba54 <_free_r>
 800b9c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b9c6:	b111      	cbz	r1, 800b9ce <_reclaim_reent+0x4a>
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f000 f843 	bl	800ba54 <_free_r>
 800b9ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b9d0:	b111      	cbz	r1, 800b9d8 <_reclaim_reent+0x54>
 800b9d2:	4620      	mov	r0, r4
 800b9d4:	f000 f83e 	bl	800ba54 <_free_r>
 800b9d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b9da:	b111      	cbz	r1, 800b9e2 <_reclaim_reent+0x5e>
 800b9dc:	4620      	mov	r0, r4
 800b9de:	f000 f839 	bl	800ba54 <_free_r>
 800b9e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b9e4:	b111      	cbz	r1, 800b9ec <_reclaim_reent+0x68>
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f000 f834 	bl	800ba54 <_free_r>
 800b9ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9ee:	b111      	cbz	r1, 800b9f6 <_reclaim_reent+0x72>
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f000 f82f 	bl	800ba54 <_free_r>
 800b9f6:	69a3      	ldr	r3, [r4, #24]
 800b9f8:	b1e3      	cbz	r3, 800ba34 <_reclaim_reent+0xb0>
 800b9fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	4798      	blx	r3
 800ba00:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ba02:	b1b9      	cbz	r1, 800ba34 <_reclaim_reent+0xb0>
 800ba04:	4620      	mov	r0, r4
 800ba06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ba0a:	f7ff bfad 	b.w	800b968 <cleanup_glue>
 800ba0e:	5949      	ldr	r1, [r1, r5]
 800ba10:	b941      	cbnz	r1, 800ba24 <_reclaim_reent+0xa0>
 800ba12:	3504      	adds	r5, #4
 800ba14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba16:	2d80      	cmp	r5, #128	; 0x80
 800ba18:	68d9      	ldr	r1, [r3, #12]
 800ba1a:	d1f8      	bne.n	800ba0e <_reclaim_reent+0x8a>
 800ba1c:	4620      	mov	r0, r4
 800ba1e:	f000 f819 	bl	800ba54 <_free_r>
 800ba22:	e7ba      	b.n	800b99a <_reclaim_reent+0x16>
 800ba24:	680e      	ldr	r6, [r1, #0]
 800ba26:	4620      	mov	r0, r4
 800ba28:	f000 f814 	bl	800ba54 <_free_r>
 800ba2c:	4631      	mov	r1, r6
 800ba2e:	e7ef      	b.n	800ba10 <_reclaim_reent+0x8c>
 800ba30:	2500      	movs	r5, #0
 800ba32:	e7ef      	b.n	800ba14 <_reclaim_reent+0x90>
 800ba34:	bd70      	pop	{r4, r5, r6, pc}
 800ba36:	bf00      	nop
 800ba38:	20000100 	.word	0x20000100

0800ba3c <__malloc_lock>:
 800ba3c:	4801      	ldr	r0, [pc, #4]	; (800ba44 <__malloc_lock+0x8>)
 800ba3e:	f7ff bf7b 	b.w	800b938 <__retarget_lock_acquire_recursive>
 800ba42:	bf00      	nop
 800ba44:	2000ac84 	.word	0x2000ac84

0800ba48 <__malloc_unlock>:
 800ba48:	4801      	ldr	r0, [pc, #4]	; (800ba50 <__malloc_unlock+0x8>)
 800ba4a:	f7ff bf76 	b.w	800b93a <__retarget_lock_release_recursive>
 800ba4e:	bf00      	nop
 800ba50:	2000ac84 	.word	0x2000ac84

0800ba54 <_free_r>:
 800ba54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba56:	2900      	cmp	r1, #0
 800ba58:	d044      	beq.n	800bae4 <_free_r+0x90>
 800ba5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba5e:	9001      	str	r0, [sp, #4]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f1a1 0404 	sub.w	r4, r1, #4
 800ba66:	bfb8      	it	lt
 800ba68:	18e4      	addlt	r4, r4, r3
 800ba6a:	f7ff ffe7 	bl	800ba3c <__malloc_lock>
 800ba6e:	4a1e      	ldr	r2, [pc, #120]	; (800bae8 <_free_r+0x94>)
 800ba70:	9801      	ldr	r0, [sp, #4]
 800ba72:	6813      	ldr	r3, [r2, #0]
 800ba74:	b933      	cbnz	r3, 800ba84 <_free_r+0x30>
 800ba76:	6063      	str	r3, [r4, #4]
 800ba78:	6014      	str	r4, [r2, #0]
 800ba7a:	b003      	add	sp, #12
 800ba7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba80:	f7ff bfe2 	b.w	800ba48 <__malloc_unlock>
 800ba84:	42a3      	cmp	r3, r4
 800ba86:	d908      	bls.n	800ba9a <_free_r+0x46>
 800ba88:	6825      	ldr	r5, [r4, #0]
 800ba8a:	1961      	adds	r1, r4, r5
 800ba8c:	428b      	cmp	r3, r1
 800ba8e:	bf01      	itttt	eq
 800ba90:	6819      	ldreq	r1, [r3, #0]
 800ba92:	685b      	ldreq	r3, [r3, #4]
 800ba94:	1949      	addeq	r1, r1, r5
 800ba96:	6021      	streq	r1, [r4, #0]
 800ba98:	e7ed      	b.n	800ba76 <_free_r+0x22>
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	b10b      	cbz	r3, 800baa4 <_free_r+0x50>
 800baa0:	42a3      	cmp	r3, r4
 800baa2:	d9fa      	bls.n	800ba9a <_free_r+0x46>
 800baa4:	6811      	ldr	r1, [r2, #0]
 800baa6:	1855      	adds	r5, r2, r1
 800baa8:	42a5      	cmp	r5, r4
 800baaa:	d10b      	bne.n	800bac4 <_free_r+0x70>
 800baac:	6824      	ldr	r4, [r4, #0]
 800baae:	4421      	add	r1, r4
 800bab0:	1854      	adds	r4, r2, r1
 800bab2:	42a3      	cmp	r3, r4
 800bab4:	6011      	str	r1, [r2, #0]
 800bab6:	d1e0      	bne.n	800ba7a <_free_r+0x26>
 800bab8:	681c      	ldr	r4, [r3, #0]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	6053      	str	r3, [r2, #4]
 800babe:	4421      	add	r1, r4
 800bac0:	6011      	str	r1, [r2, #0]
 800bac2:	e7da      	b.n	800ba7a <_free_r+0x26>
 800bac4:	d902      	bls.n	800bacc <_free_r+0x78>
 800bac6:	230c      	movs	r3, #12
 800bac8:	6003      	str	r3, [r0, #0]
 800baca:	e7d6      	b.n	800ba7a <_free_r+0x26>
 800bacc:	6825      	ldr	r5, [r4, #0]
 800bace:	1961      	adds	r1, r4, r5
 800bad0:	428b      	cmp	r3, r1
 800bad2:	bf04      	itt	eq
 800bad4:	6819      	ldreq	r1, [r3, #0]
 800bad6:	685b      	ldreq	r3, [r3, #4]
 800bad8:	6063      	str	r3, [r4, #4]
 800bada:	bf04      	itt	eq
 800badc:	1949      	addeq	r1, r1, r5
 800bade:	6021      	streq	r1, [r4, #0]
 800bae0:	6054      	str	r4, [r2, #4]
 800bae2:	e7ca      	b.n	800ba7a <_free_r+0x26>
 800bae4:	b003      	add	sp, #12
 800bae6:	bd30      	pop	{r4, r5, pc}
 800bae8:	2000ac88 	.word	0x2000ac88

0800baec <_init>:
 800baec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baee:	bf00      	nop
 800baf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baf2:	bc08      	pop	{r3}
 800baf4:	469e      	mov	lr, r3
 800baf6:	4770      	bx	lr

0800baf8 <_fini>:
 800baf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafa:	bf00      	nop
 800bafc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bafe:	bc08      	pop	{r3}
 800bb00:	469e      	mov	lr, r3
 800bb02:	4770      	bx	lr
